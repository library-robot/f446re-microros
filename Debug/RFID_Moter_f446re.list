
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000128c  08019070  08019070  0001a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2fc  0801a2fc  0001c284  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2fc  0801a2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a304  0801a304  0001c284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a304  0801a304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a30c  0801a30c  0001b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801a310  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017978  20000288  0801a594  0001c288  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20017c00  0801a594  0001cc00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c334  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ff  00000000  00000000  000385e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108c  00000000  00000000  0003e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002820e  00000000  00000000  0003f51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e193  00000000  00000000  0006772a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6290  00000000  00000000  000858bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0016bb4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c80  00000000  00000000  0016bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00172844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019054 	.word	0x08019054

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08019054 	.word	0x08019054

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fa4:	f007 f876 	bl	8008094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f986 	bl	80012c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 8090 	bne.w	80010e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fc8:	2208      	movs	r2, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06a      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <pvPortMallocMicroROS+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d865      	bhi.n	80010e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 8001018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001020:	e004      	b.n	800102c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d903      	bls.n	800103e <pvPortMallocMicroROS+0xa6>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	429a      	cmp	r2, r3
 8001046:	d04c      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	429a      	cmp	r2, r3
 8001068:	d920      	bls.n	80010ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	613b      	str	r3, [r7, #16]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 f96c 	bl	8001384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010e2:	f006 ffe5 	bl	80080b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	60fb      	str	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003eac 	.word	0x20003eac
 8001118:	20003eb8 	.word	0x20003eb8
 800111c:	20003eb0 	.word	0x20003eb0
 8001120:	20003ea4 	.word	0x20003ea4
 8001124:	20003eb4 	.word	0x20003eb4

08001128 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800113a:	2308      	movs	r3, #8
 800113c:	425b      	negs	r3, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011b4:	f006 ff6e 	bl	8008094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f000 f8dc 	bl	8001384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011cc:	f006 ff70 	bl	80080b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003eb0 	.word	0x20003eb0

080011e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011ec:	2308      	movs	r3, #8
 80011ee:	425b      	negs	r3, r3
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <getBlockSize+0x38>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

	return count;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20003eb8 	.word	0x20003eb8

0800121c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001226:	f006 ff35 	bl	8008094 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feb4 	bl	8000f98 <pvPortMallocMicroROS>
 8001230:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffce 	bl	80011e0 <getBlockSize>
 8001244:	4603      	mov	r3, r0
 8001246:	2208      	movs	r2, #8
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f016 f85a 	bl	8017316 <memcpy>

		vPortFreeMicroROS(pv);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001268:	f006 ff22 	bl	80080b0 <xTaskResumeAll>

	return newmem;
 800126c:	68bb      	ldr	r3, [r7, #8]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001280:	f006 ff08 	bl	8008094 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fe82 	bl	8000f98 <pvPortMallocMicroROS>
 8001294:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	613b      	str	r3, [r7, #16]

  	while(count--)
 800129a:	e004      	b.n	80012a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	613a      	str	r2, [r7, #16]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	617a      	str	r2, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f5      	bne.n	800129c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012b0:	f006 fefe 	bl	80080b0 <xTaskResumeAll>
  	return mem;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <prvHeapInit+0xac>)
 80012ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3307      	adds	r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <prvHeapInit+0xac>)
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <prvHeapInit+0xb0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <prvHeapInit+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800130c:	2208      	movs	r2, #8
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <prvHeapInit+0xb4>)
 8001320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <prvHeapInit+0xb4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <prvHeapInit+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <prvHeapInit+0xb4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <prvHeapInit+0xb8>)
 800134e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <prvHeapInit+0xbc>)
 8001356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <prvHeapInit+0xc0>)
 800135a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4
 8001370:	20003ea4 	.word	0x20003ea4
 8001374:	20003eac 	.word	0x20003eac
 8001378:	20003eb4 	.word	0x20003eb4
 800137c:	20003eb0 	.word	0x20003eb0
 8001380:	20003eb8 	.word	0x20003eb8

08001384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <prvInsertBlockIntoFreeList+0xac>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <prvInsertBlockIntoFreeList+0x14>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d108      	bne.n	80013c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d118      	bne.n	800140c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d00d      	beq.n	8001402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20003ea4 	.word	0x20003ea4
 8001434:	20003eac 	.word	0x20003eac

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_DMA_Init+0x98>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	200b      	movs	r0, #11
 800147c:	f002 fa00 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001480:	200b      	movs	r0, #11
 8001482:	f002 fa19 	bl	80038b8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2010      	movs	r0, #16
 800148c:	f002 f9f8 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001490:	2010      	movs	r0, #16
 8001492:	f002 fa11 	bl	80038b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2039      	movs	r0, #57	@ 0x39
 800149c:	f002 f9f0 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014a0:	2039      	movs	r0, #57	@ 0x39
 80014a2:	f002 fa09 	bl	80038b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2044      	movs	r0, #68	@ 0x44
 80014ac:	f002 f9e8 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80014b0:	2044      	movs	r0, #68	@ 0x44
 80014b2:	f002 fa01 	bl	80038b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2045      	movs	r0, #69	@ 0x45
 80014bc:	f002 f9e0 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	@ 0x45
 80014c2:	f002 f9f9 	bl	80038b8 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <cubemx_transport_open+0x28>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f004 fe62 	bl	80061b4 <HAL_UART_Receive_DMA>
    return true;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003ebc 	.word	0x20003ebc

08001500 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f004 fe74 	bl	80061fe <HAL_UART_DMAStop>
    return true;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001534:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b20      	cmp	r3, #32
 8001540:	d11c      	bne.n	800157c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f004 fdc2 	bl	80060d4 <HAL_UART_Transmit_DMA>
 8001550:	4603      	mov	r3, r0
 8001552:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001554:	e002      	b.n	800155c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f006 f8d3 	bl	8007702 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <cubemx_transport_write+0x4e>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	d1f3      	bne.n	8001556 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <cubemx_transport_write+0x58>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	e002      	b.n	800157e <cubemx_transport_write+0x5e>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800157c:	2300      	movs	r3, #0
    }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800159c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
}
 80015b8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f006 f89e 	bl	8007702 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <cubemx_transport_read+0x52>
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe3      	blt.n	80015a2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015de:	e011      	b.n	8001604 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	440b      	add	r3, r1
 80015ea:	4910      	ldr	r1, [pc, #64]	@ (800162c <cubemx_transport_read+0xa4>)
 80015ec:	5c8a      	ldrb	r2, [r1, r2]
 80015ee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015fc:	6013      	str	r3, [r2, #0]
        wrote++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <cubemx_transport_read+0xa0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <cubemx_transport_read+0x9c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d003      	beq.n	8001618 <cubemx_transport_read+0x90>
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3e3      	bcc.n	80015e0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001618:	69bb      	ldr	r3, [r7, #24]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200046c0 	.word	0x200046c0
 8001628:	200046bc 	.word	0x200046bc
 800162c:	20003ebc 	.word	0x20003ebc

08001630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <vApplicationGetIdleTaskMemory+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <vApplicationGetIdleTaskMemory+0x30>)
 8001646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000e3e4 	.word	0x2000e3e4
 8001660:	2000e484 	.word	0x2000e484

08001664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b0b2      	sub	sp, #200	@ 0xc8
 8001668:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 400);
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <MX_FREERTOS_Init+0x114>)
 800166c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 fff0 	bl	800766a <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <MX_FREERTOS_Init+0x118>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MX_FREERTOS_Init+0x11c>)
 8001692:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80016a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 ffdd 	bl	800766a <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <MX_FREERTOS_Init+0x120>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <MX_FREERTOS_Init+0x124>)
 80016b8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80016ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 ffca 	bl	800766a <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a2c      	ldr	r2, [pc, #176]	@ (800178c <MX_FREERTOS_Init+0x128>)
 80016da:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityLow, 0, 128);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <MX_FREERTOS_Init+0x12c>)
 80016de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80016e2:	461d      	mov	r5, r3
 80016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80016f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 ffb7 	bl	800766a <osThreadCreate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <MX_FREERTOS_Init+0x130>)
 8001700:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <MX_FREERTOS_Init+0x134>)
 8001704:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 8001716:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f005 ffa4 	bl	800766a <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <MX_FREERTOS_Init+0x138>)
 8001726:	6013      	str	r3, [r2, #0]

  /* definition and creation of RosTask */
  osThreadStaticDef(RosTask, StartRosTask, osPriorityLow, 0, 10000, RosTaskBuffer, &RosTaskControlBlock);
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_FREERTOS_Init+0x13c>)
 800172a:	f107 0420 	add.w	r4, r7, #32
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RosTaskHandle = osThreadCreate(osThread(RosTask), NULL);
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f005 ff91 	bl	800766a <osThreadCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <MX_FREERTOS_Init+0x140>)
 800174c:	6013      	str	r3, [r2, #0]

  /* definition and creation of transePosition */
  osThreadDef(transePosition, StartTransePosition, osPriorityIdle, 0, 128);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_FREERTOS_Init+0x144>)
 8001750:	1d3c      	adds	r4, r7, #4
 8001752:	461d      	mov	r5, r3
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transePositionHandle = osThreadCreate(osThread(transePosition), NULL);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 ff80 	bl	800766a <osThreadCreate>
 800176a:	4603      	mov	r3, r0
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <MX_FREERTOS_Init+0x148>)
 800176e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001770:	bf00      	nop
 8001772:	37c8      	adds	r7, #200	@ 0xc8
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	0801907c 	.word	0x0801907c
 800177c:	200046e8 	.word	0x200046e8
 8001780:	080190a8 	.word	0x080190a8
 8001784:	200046ec 	.word	0x200046ec
 8001788:	080190d4 	.word	0x080190d4
 800178c:	200046f0 	.word	0x200046f0
 8001790:	080190fc 	.word	0x080190fc
 8001794:	200046f4 	.word	0x200046f4
 8001798:	08019128 	.word	0x08019128
 800179c:	200046f8 	.word	0x200046f8
 80017a0:	0801914c 	.word	0x0801914c
 80017a4:	200046fc 	.word	0x200046fc
 80017a8:	08019178 	.word	0x08019178
 80017ac:	2000e3e0 	.word	0x2000e3e0

080017b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80017b8:	f001 f9c6 	bl	8002b48 <read_rfid_number>
	read_location();
 80017bc:	f001 faee 	bl	8002d9c <read_location>
//	read_command();

    osDelay(50);
 80017c0:	2032      	movs	r0, #50	@ 0x32
 80017c2:	f005 ff9e 	bl	8007702 <osDelay>
	read_rfid_number();
 80017c6:	bf00      	nop
 80017c8:	e7f6      	b.n	80017b8 <StartDefaultTask+0x8>
	...

080017cc <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80017d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001810 <StartRfidExecuteTask+0x44>)
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017de:	6018      	str	r0, [r3, #0]
 80017e0:	3304      	adds	r3, #4
 80017e2:	8019      	strh	r1, [r3, #0]
 80017e4:	3302      	adds	r3, #2
 80017e6:	0c0a      	lsrs	r2, r1, #16
 80017e8:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <StartRfidExecuteTask+0x48>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 fac2 	bl	8007d78 <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 80017f4:	f107 0108 	add.w	r1, r7, #8
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fc:	2207      	movs	r2, #7
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <StartRfidExecuteTask+0x4c>)
 8001800:	f004 fbb8 	bl	8005f74 <HAL_UART_Transmit>

		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 8001804:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001808:	f005 ff7b 	bl	8007702 <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 800180c:	bf00      	nop
 800180e:	e7f1      	b.n	80017f4 <StartRfidExecuteTask+0x28>
 8001810:	08019194 	.word	0x08019194
 8001814:	200046ec 	.word	0x200046ec
 8001818:	2000eedc 	.word	0x2000eedc

0800181c <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
//	  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
	event = osSignalWait(transmitSignal, 100);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2264      	movs	r2, #100	@ 0x64
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f005 ffbd 	bl	80077ac <osSignalWait>
	if(event.value.signals == transmitSignal){
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <StartTagNumTransmitTask+0x20>
		transmitData();
 8001838:	f001 f9e0 	bl	8002bfc <transmitData>
		}
	osDelay(10);
 800183c:	200a      	movs	r0, #10
 800183e:	f005 ff60 	bl	8007702 <osDelay>
	event = osSignalWait(transmitSignal, 100);
 8001842:	e7ef      	b.n	8001824 <StartTagNumTransmitTask+0x8>

08001844 <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 800184c:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <controlmotor+0x34>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f006 fa91 	bl	8007d78 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <controlmotor+0x38>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <controlmotor+0x20>
		  scan_motor_up();
 800185e:	f000 fdbf 	bl	80023e0 <scan_motor_up>
 8001862:	e005      	b.n	8001870 <controlmotor+0x2c>
	  }else if(motor_status == 1){
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <controlmotor+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <controlmotor+0x2c>
		  scan_motor_down();
 800186c:	f000 fde6 	bl	800243c <scan_motor_down>
	  }
	  osDelay(100);
 8001870:	2064      	movs	r0, #100	@ 0x64
 8001872:	f005 ff46 	bl	8007702 <osDelay>
	  if(motor_status == 0){
 8001876:	e7ee      	b.n	8001856 <controlmotor+0x12>
 8001878:	200046f4 	.word	0x200046f4
 800187c:	200046e4 	.word	0x200046e4

08001880 <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 8001888:	220c      	movs	r2, #12
 800188a:	490a      	ldr	r1, [pc, #40]	@ (80018b4 <StarttransmitTask2+0x34>)
 800188c:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <StarttransmitTask2+0x38>)
 800188e:	f004 fbfc 	bl	800608a <HAL_UART_Receive_IT>
		  event = osSignalWait(transmitSignal2, 100);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	2264      	movs	r2, #100	@ 0x64
 8001898:	2102      	movs	r1, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f005 ff86 	bl	80077ac <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d101      	bne.n	80018aa <StarttransmitTask2+0x2a>
			  transmitCommand();
 80018a6:	f001 fac5 	bl	8002e34 <transmitCommand>
		  }
		  osDelay(1);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f005 ff29 	bl	8007702 <osDelay>
		  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 80018b0:	e7ea      	b.n	8001888 <StarttransmitTask2+0x8>
 80018b2:	bf00      	nop
 80018b4:	2000ee30 	.word	0x2000ee30
 80018b8:	2000ee94 	.word	0x2000ee94

080018bc <subscription_str_callback>:
#define ARRAY_LEN 200
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}

void subscription_str_callback(const void * msgin)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b09c      	sub	sp, #112	@ 0x70
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pub_str_msg = *msg;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <subscription_str_callback+0x88>)
 80018ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 80018d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f015 fd12 	bl	8017306 <strcpy>
  if(!strcmp(str,"scan")){
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4918      	ldr	r1, [pc, #96]	@ (8001948 <subscription_str_callback+0x8c>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fc91 	bl	8000210 <strcmp>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d112      	bne.n	800191a <subscription_str_callback+0x5e>
	  sprintf(pub_str_msg.data.data, "launch", str);
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <subscription_str_callback+0x88>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	4913      	ldr	r1, [pc, #76]	@ (800194c <subscription_str_callback+0x90>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f015 fa8c 	bl	8016e1c <siprintf>
	  vTaskResume(motorTaskHandle);
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <subscription_str_callback+0x94>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f006 fafb 	bl	8007f04 <vTaskResume>
	  vTaskResume(rfidExecuteTaskHandle);
 800190e:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <subscription_str_callback+0x98>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f006 faf6 	bl	8007f04 <vTaskResume>
 8001918:	e007      	b.n	800192a <subscription_str_callback+0x6e>
  }else{
	  sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <subscription_str_callback+0x88>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <subscription_str_callback+0x9c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f015 fa79 	bl	8016e1c <siprintf>
  }
  //sprintf(pub_str_msg.data.data, "F446RE heard: %s", str);
  pub_str_msg.data.size = strlen(pub_str_msg.data.data);
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <subscription_str_callback+0x88>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fcce 	bl	80002d0 <strlen>
 8001934:	4603      	mov	r3, r0
 8001936:	4a03      	ldr	r2, [pc, #12]	@ (8001944 <subscription_str_callback+0x88>)
 8001938:	6053      	str	r3, [r2, #4]
  //rcl_publish(&publisher_string_scan, &pub_str_msg, NULL);
  //Publisher_test();
  //debug_led();
}
 800193a:	bf00      	nop
 800193c:	3770      	adds	r7, #112	@ 0x70
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200046cc 	.word	0x200046cc
 8001948:	0801919c 	.word	0x0801919c
 800194c:	080191a4 	.word	0x080191a4
 8001950:	200046f4 	.word	0x200046f4
 8001954:	200046ec 	.word	0x200046ec
 8001958:	080191ac 	.word	0x080191ac

0800195c <StartRosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRosTask */
void StartRosTask(void const * argument)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8001962:	af02      	add	r7, sp, #8
 8001964:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001968:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 800196c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRosTask */
	  // micro-ROS configuration
	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 800196e:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8001972:	22c8      	movs	r2, #200	@ 0xc8
 8001974:	217a      	movs	r1, #122	@ 0x7a
 8001976:	4618      	mov	r0, r3
 8001978:	f015 fbaa 	bl	80170d0 <memset>

	  rmw_uros_set_custom_transport(
 800197c:	4bcb      	ldr	r3, [pc, #812]	@ (8001cac <StartRosTask+0x350>)
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	4bcb      	ldr	r3, [pc, #812]	@ (8001cb0 <StartRosTask+0x354>)
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4bcb      	ldr	r3, [pc, #812]	@ (8001cb4 <StartRosTask+0x358>)
 8001986:	4acc      	ldr	r2, [pc, #816]	@ (8001cb8 <StartRosTask+0x35c>)
 8001988:	49cc      	ldr	r1, [pc, #816]	@ (8001cbc <StartRosTask+0x360>)
 800198a:	2001      	movs	r0, #1
 800198c:	f009 fbee 	bl	800b16c <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001990:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001998:	4618      	mov	r0, r3
 800199a:	f009 f8b7 	bl	800ab0c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 800199e:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019a6:	4ac6      	ldr	r2, [pc, #792]	@ (8001cc0 <StartRosTask+0x364>)
 80019a8:	601a      	str	r2, [r3, #0]
	  freeRTOS_allocator.deallocate = microros_deallocate;
 80019aa:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019b2:	4ac4      	ldr	r2, [pc, #784]	@ (8001cc4 <StartRosTask+0x368>)
 80019b4:	605a      	str	r2, [r3, #4]
	  freeRTOS_allocator.reallocate = microros_reallocate;
 80019b6:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019be:	4ac2      	ldr	r2, [pc, #776]	@ (8001cc8 <StartRosTask+0x36c>)
 80019c0:	609a      	str	r2, [r3, #8]
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80019c2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019ca:	4ac0      	ldr	r2, [pc, #768]	@ (8001ccc <StartRosTask+0x370>)
 80019cc:	60da      	str	r2, [r3, #12]

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80019ce:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80019d2:	4618      	mov	r0, r3
 80019d4:	f009 f8a8 	bl	800ab28 <rcutils_set_default_allocator>
 80019d8:	4603      	mov	r3, r0
 80019da:	f083 0301 	eor.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <StartRosTask+0x92>
	    printf("Error on default allocators (line %d)\n", __LINE__);
 80019e4:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 80019e8:	48b9      	ldr	r0, [pc, #740]	@ (8001cd0 <StartRosTask+0x374>)
 80019ea:	f015 f9d1 	bl	8016d90 <iprintf>
	  sensor_msgs__msg__Imu sub_imu_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 80019ee:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80019f2:	f5a3 7428 	sub.w	r4, r3, #672	@ 0x2a0
 80019f6:	463b      	mov	r3, r7
 80019f8:	4618      	mov	r0, r3
 80019fa:	f009 f8b3 	bl	800ab64 <rcutils_get_default_allocator>
 80019fe:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001a02:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001a06:	461d      	mov	r5, r3
 8001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	6023      	str	r3, [r4, #0]

	  // create init_options
	  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 8001a10:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001a14:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f008 ff80 	bl	800a920 <rclc_support_init>
 8001a20:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
 8001a24:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <StartRosTask+0xe0>
 8001a2c:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001a30:	f240 1185 	movw	r1, #389	@ 0x185
 8001a34:	48a7      	ldr	r0, [pc, #668]	@ (8001cd4 <StartRosTask+0x378>)
 8001a36:	f015 f9ab 	bl	8016d90 <iprintf>
 8001a3a:	e132      	b.n	8001ca2 <StartRosTask+0x346>

	  // create node
	  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001a3c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a40:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a44:	4aa4      	ldr	r2, [pc, #656]	@ (8001cd8 <StartRosTask+0x37c>)
 8001a46:	49a5      	ldr	r1, [pc, #660]	@ (8001cdc <StartRosTask+0x380>)
 8001a48:	f008 ffb4 	bl	800a9b4 <rclc_node_init_default>
 8001a4c:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
 8001a50:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d007      	beq.n	8001a68 <StartRosTask+0x10c>
 8001a58:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8001a5c:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001a60:	489c      	ldr	r0, [pc, #624]	@ (8001cd4 <StartRosTask+0x378>)
 8001a62:	f015 f995 	bl	8016d90 <iprintf>
 8001a66:	e11c      	b.n	8001ca2 <StartRosTask+0x346>

	  // create publisher
	  RCCHECK(rclc_publisher_init_best_effort(
 8001a68:	f00a fbaa 	bl	800c1c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a72:	4b9b      	ldr	r3, [pc, #620]	@ (8001ce0 <StartRosTask+0x384>)
 8001a74:	489b      	ldr	r0, [pc, #620]	@ (8001ce4 <StartRosTask+0x388>)
 8001a76:	f008 ffd9 	bl	800aa2c <rclc_publisher_init_best_effort>
 8001a7a:	f8c7 0344 	str.w	r0, [r7, #836]	@ 0x344
 8001a7e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <StartRosTask+0x13a>
 8001a86:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8001a8a:	f240 118b 	movw	r1, #395	@ 0x18b
 8001a8e:	4891      	ldr	r0, [pc, #580]	@ (8001cd4 <StartRosTask+0x378>)
 8001a90:	f015 f97e 	bl	8016d90 <iprintf>
 8001a94:	e105      	b.n	8001ca2 <StartRosTask+0x346>
	    &publisher_string_scan,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_status"));

	  RCCHECK(rclc_publisher_init_best_effort(
 8001a96:	f00a fb93 	bl	800c1c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001aa0:	4b91      	ldr	r3, [pc, #580]	@ (8001ce8 <StartRosTask+0x38c>)
 8001aa2:	4892      	ldr	r0, [pc, #584]	@ (8001cec <StartRosTask+0x390>)
 8001aa4:	f008 ffc2 	bl	800aa2c <rclc_publisher_init_best_effort>
 8001aa8:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8001aac:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <StartRosTask+0x168>
 8001ab4:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8001ab8:	f240 1191 	movw	r1, #401	@ 0x191
 8001abc:	4885      	ldr	r0, [pc, #532]	@ (8001cd4 <StartRosTask+0x378>)
 8001abe:	f015 f967 	bl	8016d90 <iprintf>
 8001ac2:	e0ee      	b.n	8001ca2 <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_nav_pos"));

	  // create subscriber
	  RCCHECK(rclc_subscription_init_default(
 8001ac4:	f00a fb7c 	bl	800c1c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001ace:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001ad2:	4b87      	ldr	r3, [pc, #540]	@ (8001cf0 <StartRosTask+0x394>)
 8001ad4:	f008 ffde 	bl	800aa94 <rclc_subscription_init_default>
 8001ad8:	f8c7 033c 	str.w	r0, [r7, #828]	@ 0x33c
 8001adc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <StartRosTask+0x198>
 8001ae4:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001ae8:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8001aec:	4879      	ldr	r0, [pc, #484]	@ (8001cd4 <StartRosTask+0x378>)
 8001aee:	f015 f94f 	bl	8016d90 <iprintf>
 8001af2:	e0d6      	b.n	8001ca2 <StartRosTask+0x346>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_oper"));

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001af4:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001af8:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8001afc:	4618      	mov	r0, r3
 8001afe:	f008 fc35 	bl	800a36c <rclc_executor_get_zero_initialized_executor>
	  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001b02:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001b06:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001b0a:	f107 0020 	add.w	r0, r7, #32
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f008 fc36 	bl	800a380 <rclc_executor_init>
 8001b14:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001b18:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <StartRosTask+0x1d4>
 8001b20:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001b24:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001b28:	486a      	ldr	r0, [pc, #424]	@ (8001cd4 <StartRosTask+0x378>)
 8001b2a:	f015 f931 	bl	8016d90 <iprintf>
 8001b2e:	e0b8      	b.n	8001ca2 <StartRosTask+0x346>
	  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_oper, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 8001b30:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8001b34:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 8001b38:	f107 0020 	add.w	r0, r7, #32
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf4 <StartRosTask+0x398>)
 8001b42:	f008 fc8d 	bl	800a460 <rclc_executor_add_subscription>
 8001b46:	f8c7 0334 	str.w	r0, [r7, #820]	@ 0x334
 8001b4a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <StartRosTask+0x206>
 8001b52:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001b56:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001b5a:	485e      	ldr	r0, [pc, #376]	@ (8001cd4 <StartRosTask+0x378>)
 8001b5c:	f015 f918 	bl	8016d90 <iprintf>
 8001b60:	e09f      	b.n	8001ca2 <StartRosTask+0x346>

	  // initialize message memory
	  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b62:	20c8      	movs	r0, #200	@ 0xc8
 8001b64:	f014 f986 	bl	8015e74 <malloc>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b62      	ldr	r3, [pc, #392]	@ (8001cf8 <StartRosTask+0x39c>)
 8001b6e:	601a      	str	r2, [r3, #0]
	  pub_str_msg.data.size = 0;
 8001b70:	4b61      	ldr	r3, [pc, #388]	@ (8001cf8 <StartRosTask+0x39c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
	  pub_str_msg.data.capacity = ARRAY_LEN;
 8001b76:	4b60      	ldr	r3, [pc, #384]	@ (8001cf8 <StartRosTask+0x39c>)
 8001b78:	22c8      	movs	r2, #200	@ 0xc8
 8001b7a:	609a      	str	r2, [r3, #8]

	  pub_str_pos.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b7c:	20c8      	movs	r0, #200	@ 0xc8
 8001b7e:	f014 f979 	bl	8015e74 <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <StartRosTask+0x3a0>)
 8001b88:	601a      	str	r2, [r3, #0]
	  pub_str_pos.data.size = 0;
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <StartRosTask+0x3a0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
	  pub_str_pos.data.capacity = ARRAY_LEN;
 8001b90:	4b5a      	ldr	r3, [pc, #360]	@ (8001cfc <StartRosTask+0x3a0>)
 8001b92:	22c8      	movs	r2, #200	@ 0xc8
 8001b94:	609a      	str	r2, [r3, #8]

	  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b96:	20c8      	movs	r0, #200	@ 0xc8
 8001b98:	f014 f96c 	bl	8015e74 <malloc>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001ba4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba8:	601a      	str	r2, [r3, #0]
	  sub_str_msg.data.size = 0;
 8001baa:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001bae:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
	  sub_str_msg.data.capacity = ARRAY_LEN;
 8001bb6:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001bba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bbe:	22c8      	movs	r2, #200	@ 0xc8
 8001bc0:	609a      	str	r2, [r3, #8]

	  sub_imu_msg.header.frame_id.capacity = 100;
 8001bc2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001bc6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001bca:	2264      	movs	r2, #100	@ 0x64
 8001bcc:	611a      	str	r2, [r3, #16]
	  sub_imu_msg.header.frame_id.data =(char * ) malloc(100 * sizeof(char));
 8001bce:	2064      	movs	r0, #100	@ 0x64
 8001bd0:	f014 f950 	bl	8015e74 <malloc>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001bdc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001be0:	609a      	str	r2, [r3, #8]
	  sub_imu_msg.header.frame_id.size = 0;
 8001be2:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8001be6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]

	  // execute subscriber
	  rclc_executor_spin(&executor);
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 fe54 	bl	800a8a0 <rclc_executor_spin>
	  // cleaning Up
	  RCCHECK(rcl_publisher_fini(&publisher_string_scan, &node));
 8001bf8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4839      	ldr	r0, [pc, #228]	@ (8001ce4 <StartRosTask+0x388>)
 8001c00:	f007 fe34 	bl	800986c <rcl_publisher_fini>
 8001c04:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
 8001c08:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <StartRosTask+0x2c4>
 8001c10:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001c14:	f240 11b7 	movw	r1, #439	@ 0x1b7
 8001c18:	482e      	ldr	r0, [pc, #184]	@ (8001cd4 <StartRosTask+0x378>)
 8001c1a:	f015 f8b9 	bl	8016d90 <iprintf>
 8001c1e:	e040      	b.n	8001ca2 <StartRosTask+0x346>
	  RCCHECK(rcl_publisher_fini(&publisher_string_pos, &node));
 8001c20:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c24:	4619      	mov	r1, r3
 8001c26:	4831      	ldr	r0, [pc, #196]	@ (8001cec <StartRosTask+0x390>)
 8001c28:	f007 fe20 	bl	800986c <rcl_publisher_fini>
 8001c2c:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8001c30:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <StartRosTask+0x2ec>
 8001c38:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001c3c:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8001c40:	4824      	ldr	r0, [pc, #144]	@ (8001cd4 <StartRosTask+0x378>)
 8001c42:	f015 f8a5 	bl	8016d90 <iprintf>
 8001c46:	e02c      	b.n	8001ca2 <StartRosTask+0x346>
	  RCCHECK(rcl_subscription_fini(&subscriber_oper, &node));
 8001c48:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001c4c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 ff58 	bl	8009b08 <rcl_subscription_fini>
 8001c58:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
 8001c5c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <StartRosTask+0x318>
 8001c64:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001c68:	f240 11b9 	movw	r1, #441	@ 0x1b9
 8001c6c:	4819      	ldr	r0, [pc, #100]	@ (8001cd4 <StartRosTask+0x378>)
 8001c6e:	f015 f88f 	bl	8016d90 <iprintf>
 8001c72:	e016      	b.n	8001ca2 <StartRosTask+0x346>
	  RCCHECK(rcl_node_fini(&node));
 8001c74:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 fcd5 	bl	8009628 <rcl_node_fini>
 8001c7e:	f8c7 0324 	str.w	r0, [r7, #804]	@ 0x324
 8001c82:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <StartRosTask+0x33e>
 8001c8a:	f8d7 2324 	ldr.w	r2, [r7, #804]	@ 0x324
 8001c8e:	f44f 71dd 	mov.w	r1, #442	@ 0x1ba
 8001c92:	4810      	ldr	r0, [pc, #64]	@ (8001cd4 <StartRosTask+0x378>)
 8001c94:	f015 f87c 	bl	8016d90 <iprintf>
 8001c98:	e003      	b.n	8001ca2 <StartRosTask+0x346>
	  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f005 fd31 	bl	8007702 <osDelay>
 8001ca0:	e7fb      	b.n	8001c9a <StartRosTask+0x33e>
  }
  /* USER CODE END StartRosTask */
}
 8001ca2:	f507 7754 	add.w	r7, r7, #848	@ 0x350
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	08001589 	.word	0x08001589
 8001cb0:	08001521 	.word	0x08001521
 8001cb4:	08001501 	.word	0x08001501
 8001cb8:	080014d5 	.word	0x080014d5
 8001cbc:	2000efb4 	.word	0x2000efb4
 8001cc0:	08002119 	.word	0x08002119
 8001cc4:	0800215d 	.word	0x0800215d
 8001cc8:	08002195 	.word	0x08002195
 8001ccc:	08002201 	.word	0x08002201
 8001cd0:	080191c0 	.word	0x080191c0
 8001cd4:	080191e8 	.word	0x080191e8
 8001cd8:	08019214 	.word	0x08019214
 8001cdc:	08019218 	.word	0x08019218
 8001ce0:	08019224 	.word	0x08019224
 8001ce4:	200046c4 	.word	0x200046c4
 8001ce8:	08019238 	.word	0x08019238
 8001cec:	200046c8 	.word	0x200046c8
 8001cf0:	08019248 	.word	0x08019248
 8001cf4:	080018bd 	.word	0x080018bd
 8001cf8:	200046cc 	.word	0x200046cc
 8001cfc:	200046d8 	.word	0x200046d8

08001d00 <StartTransePosition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransePosition */
void StartTransePosition(void const * argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransePosition */
  /* Infinite loop */
	osEvent event;
  for(;;)
  {
	  event = osSignalWait(positionSignal, 100);
 8001d08:	f107 0318 	add.w	r3, r7, #24
 8001d0c:	2264      	movs	r2, #100	@ 0x64
 8001d0e:	2103      	movs	r1, #3
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 fd4b 	bl	80077ac <osSignalWait>
	  	if(event.value.signals == positionSignal){
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d139      	bne.n	8001d90 <StartTransePosition+0x90>
	  		char xChar[6],yChar[6];
			HAL_UART_Transmit(&huart2, BLE_RX_BUF, 12, 1000);
 8001d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d20:	220c      	movs	r2, #12
 8001d22:	491d      	ldr	r1, [pc, #116]	@ (8001d98 <StartTransePosition+0x98>)
 8001d24:	481d      	ldr	r0, [pc, #116]	@ (8001d9c <StartTransePosition+0x9c>)
 8001d26:	f004 f925 	bl	8005f74 <HAL_UART_Transmit>
			if(BLE_RX_BUF[0] == 'z'){
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <StartTransePosition+0x98>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b7a      	cmp	r3, #122	@ 0x7a
 8001d30:	d024      	beq.n	8001d7c <StartTransePosition+0x7c>
				//정비시작
				int a;
			}
			else{
				//book location move
				for(int i=0;i<6;i++){
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d36:	e016      	b.n	8001d66 <StartTransePosition+0x66>
					xChar[i] = BLE_RX_BUF[i];
 8001d38:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <StartTransePosition+0x98>)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	4413      	add	r3, r2
 8001d3e:	7819      	ldrb	r1, [r3, #0]
 8001d40:	f107 0210 	add.w	r2, r7, #16
 8001d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d46:	4413      	add	r3, r2
 8001d48:	460a      	mov	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
					yChar[i] = BLE_RX_BUF[i+6];
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	3306      	adds	r3, #6
 8001d50:	4a11      	ldr	r2, [pc, #68]	@ (8001d98 <StartTransePosition+0x98>)
 8001d52:	5cd1      	ldrb	r1, [r2, r3]
 8001d54:	f107 0208 	add.w	r2, r7, #8
 8001d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5a:	4413      	add	r3, r2
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<6;i++){
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	dde5      	ble.n	8001d38 <StartTransePosition+0x38>
				}
				Publisher_pos(xChar,yChar);
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fc26 	bl	80035c8 <Publisher_pos>
			}

			HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4906      	ldr	r1, [pc, #24]	@ (8001d98 <StartTransePosition+0x98>)
 8001d80:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <StartTransePosition+0xa0>)
 8001d82:	f004 f982 	bl	800608a <HAL_UART_Receive_IT>

			memset(BLE_RX_BUF,0,sizeof(BLE_RX_BUF));
 8001d86:	2264      	movs	r2, #100	@ 0x64
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <StartTransePosition+0x98>)
 8001d8c:	f015 f9a0 	bl	80170d0 <memset>
	  	}

    osDelay(1);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f005 fcb6 	bl	8007702 <osDelay>
	  event = osSignalWait(positionSignal, 100);
 8001d96:	e7b7      	b.n	8001d08 <StartTransePosition+0x8>
 8001d98:	2000ee30 	.word	0x2000ee30
 8001d9c:	2000ef24 	.word	0x2000ef24
 8001da0:	2000ee94 	.word	0x2000ee94

08001da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b47      	ldr	r3, [pc, #284]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a42      	ldr	r2, [pc, #264]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b40      	ldr	r3, [pc, #256]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b39      	ldr	r3, [pc, #228]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a34      	ldr	r2, [pc, #208]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e34:	f043 0308 	orr.w	r3, r3, #8
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2120      	movs	r1, #32
 8001e4a:	4828      	ldr	r0, [pc, #160]	@ (8001eec <MX_GPIO_Init+0x148>)
 8001e4c:	f002 fad8 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direction0_Pin|Direction1_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001e56:	4826      	ldr	r0, [pc, #152]	@ (8001ef0 <MX_GPIO_Init+0x14c>)
 8001e58:	f002 fad2 	bl	8004400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin;
 8001e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_switch_up_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	481f      	ldr	r0, [pc, #124]	@ (8001ef0 <MX_GPIO_Init+0x14c>)
 8001e74:	f002 f930 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4817      	ldr	r0, [pc, #92]	@ (8001eec <MX_GPIO_Init+0x148>)
 8001e90:	f002 f922 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 8001e94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	@ (8001ef0 <MX_GPIO_Init+0x14c>)
 8001eae:	f002 f913 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Limit_switch_down_Pin;
 8001eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_switch_down_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	480a      	ldr	r0, [pc, #40]	@ (8001ef4 <MX_GPIO_Init+0x150>)
 8001eca:	f002 f905 	bl	80040d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2105      	movs	r1, #5
 8001ed2:	2017      	movs	r0, #23
 8001ed4:	f001 fcd4 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ed8:	2017      	movs	r0, #23
 8001eda:	f001 fced 	bl	80038b8 <HAL_NVIC_EnableIRQ>

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	@ 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f08:	d118      	bne.n	8001f3c <HAL_GPIO_EXTI_Callback+0x44>
		if(HAL_GetTick() - before_tick1 >= 300){
 8001f0a:	f001 fbf5 	bl	80036f8 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_GPIO_EXTI_Callback+0x84>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f1a:	d32b      	bcc.n	8001f74 <HAL_GPIO_EXTI_Callback+0x7c>
			before_tick1 = HAL_GetTick();
 8001f1c:	f001 fbec 	bl	80036f8 <HAL_GetTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <HAL_GPIO_EXTI_Callback+0x84>)
 8001f24:	6013      	str	r3, [r2, #0]
			TIM2->CCR4 = 0;
 8001f26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	641a      	str	r2, [r3, #64]	@ 0x40
			limit_switch_up = 1;
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
			limit_switch_down = 0;
 8001f34:	4b13      	ldr	r3, [pc, #76]	@ (8001f84 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
			TIM2->CCR4 = 0;
			limit_switch_down = 1;
			limit_switch_up = 0;
		}
	}
}
 8001f3a:	e01b      	b.n	8001f74 <HAL_GPIO_EXTI_Callback+0x7c>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f42:	d117      	bne.n	8001f74 <HAL_GPIO_EXTI_Callback+0x7c>
		if(HAL_GetTick() - before_tick2 >= 300){
 8001f44:	f001 fbd8 	bl	80036f8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f88 <HAL_GPIO_EXTI_Callback+0x90>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001f54:	d30e      	bcc.n	8001f74 <HAL_GPIO_EXTI_Callback+0x7c>
			before_tick2 = HAL_GetTick();
 8001f56:	f001 fbcf 	bl	80036f8 <HAL_GetTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <HAL_GPIO_EXTI_Callback+0x90>)
 8001f5e:	6013      	str	r3, [r2, #0]
			TIM2->CCR4 = 0;
 8001f60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f64:	2200      	movs	r2, #0
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40
			limit_switch_down = 1;
 8001f68:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
			limit_switch_up = 0;
 8001f6e:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000e684 	.word	0x2000e684
 8001f80:	2000e694 	.word	0x2000e694
 8001f84:	2000e698 	.word	0x2000e698
 8001f88:	2000e688 	.word	0x2000e688

08001f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f90:	f001 fb7c 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f94:	f000 f836 	bl	8002004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f98:	f7ff ff04 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f9c:	f7ff fa4c 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001fa0:	f000 ffca 	bl	8002f38 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001fa4:	f000 ff9e 	bl	8002ee4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fa8:	f000 fff0 	bl	8002f8c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001fac:	f001 f818 	bl	8002fe0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001fb0:	f000 fca4 	bl	80028fc <MX_TIM2_Init>
  MX_UART5_Init();
 8001fb4:	f000 ff6c 	bl	8002e90 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8001fb8:	f000 fd50 	bl	8002a5c <uart_init>
//  uart2_init();
  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF, 12);
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	490d      	ldr	r1, [pc, #52]	@ (8001ff4 <main+0x68>)
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <main+0x6c>)
 8001fc2:	f004 f862 	bl	800608a <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001fc6:	210c      	movs	r1, #12
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <main+0x70>)
 8001fca:	f003 f9cf 	bl	800536c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fd4:	480a      	ldr	r0, [pc, #40]	@ (8002000 <main+0x74>)
 8001fd6:	f002 fa13 	bl	8004400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fe0:	4807      	ldr	r0, [pc, #28]	@ (8002000 <main+0x74>)
 8001fe2:	f002 fa0d 	bl	8004400 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001fe6:	f7ff fb3d 	bl	8001664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001fea:	f005 fb37 	bl	800765c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <main+0x62>
 8001ff2:	bf00      	nop
 8001ff4:	2000ee30 	.word	0x2000ee30
 8001ff8:	2000ee94 	.word	0x2000ee94
 8001ffc:	2000e6ec 	.word	0x2000e6ec
 8002000:	40020800 	.word	0x40020800

08002004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	@ 0x50
 8002008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2234      	movs	r2, #52	@ 0x34
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f015 f85c 	bl	80170d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002018:	f107 0308 	add.w	r3, r7, #8
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <SystemClock_Config+0xdc>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	4a2b      	ldr	r2, [pc, #172]	@ (80020e0 <SystemClock_Config+0xdc>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	@ 0x40
 8002038:	4b29      	ldr	r3, [pc, #164]	@ (80020e0 <SystemClock_Config+0xdc>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002044:	2300      	movs	r3, #0
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <SystemClock_Config+0xe0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <SystemClock_Config+0xe0>)
 800204e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <SystemClock_Config+0xe0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002060:	2301      	movs	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002068:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800206a:	2302      	movs	r3, #2
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002074:	2304      	movs	r3, #4
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002078:	23b4      	movs	r3, #180	@ 0xb4
 800207a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800207c:	2302      	movs	r3, #2
 800207e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002080:	2302      	movs	r3, #2
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002084:	2302      	movs	r3, #2
 8002086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fdb5 	bl	8004bfc <HAL_RCC_OscConfig>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002098:	f000 f838 	bl	800210c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800209c:	f002 f9e2 	bl	8004464 <HAL_PWREx_EnableOverDrive>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020a6:	f000 f831 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020aa:	230f      	movs	r3, #15
 80020ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020ae:	2302      	movs	r3, #2
 80020b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80020ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	2105      	movs	r1, #5
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fa1b 	bl	8004504 <HAL_RCC_ClockConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80020d4:	f000 f81a 	bl	800210c <Error_Handler>
  }
}
 80020d8:	bf00      	nop
 80020da:	3750      	adds	r7, #80	@ 0x50
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020fa:	f001 fae9 	bl	80036d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40000800 	.word	0x40000800

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <Error_Handler+0x8>

08002118 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <microros_allocate+0x3c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	461a      	mov	r2, r3
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <microros_allocate+0x3c>)
 8002130:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <microros_allocate+0x40>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <microros_allocate+0x40>)
 8002140:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe ff28 	bl	8000f98 <pvPortMallocMicroROS>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000e68c 	.word	0x2000e68c
 8002158:	2000e690 	.word	0x2000e690

0800215c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00c      	beq.n	8002186 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff f837 	bl	80011e0 <getBlockSize>
 8002172:	4603      	mov	r3, r0
 8002174:	4a06      	ldr	r2, [pc, #24]	@ (8002190 <microros_deallocate+0x34>)
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	461a      	mov	r2, r3
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <microros_deallocate+0x34>)
 800217e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe ffd1 	bl	8001128 <vPortFreeMicroROS>
  }
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	2000e690 	.word	0x2000e690

08002194 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <microros_reallocate+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <microros_reallocate+0x64>)
 80021ae:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <microros_reallocate+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	461a      	mov	r2, r3
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <microros_reallocate+0x68>)
 80021be:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80021c6:	68b8      	ldr	r0, [r7, #8]
 80021c8:	f7fe fee6 	bl	8000f98 <pvPortMallocMicroROS>
 80021cc:	4603      	mov	r3, r0
 80021ce:	e00e      	b.n	80021ee <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff f805 	bl	80011e0 <getBlockSize>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a08      	ldr	r2, [pc, #32]	@ (80021fc <microros_reallocate+0x68>)
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <microros_reallocate+0x68>)
 80021e2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff f818 	bl	800121c <pvPortReallocMicroROS>
 80021ec:	4603      	mov	r3, r0
  }
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000e68c 	.word	0x2000e68c
 80021fc:	2000e690 	.word	0x2000e690

08002200 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	4a0c      	ldr	r2, [pc, #48]	@ (8002248 <microros_zero_allocate+0x48>)
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4413      	add	r3, r2
 800221a:	461a      	mov	r2, r3
 800221c:	4b0a      	ldr	r3, [pc, #40]	@ (8002248 <microros_zero_allocate+0x48>)
 800221e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	4a08      	ldr	r2, [pc, #32]	@ (800224c <microros_zero_allocate+0x4c>)
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4413      	add	r3, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <microros_zero_allocate+0x4c>)
 8002232:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff f81d 	bl	8001276 <pvPortCallocMicroROS>
 800223c:	4603      	mov	r3, r0
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000e68c 	.word	0x2000e68c
 800224c:	2000e690 	.word	0x2000e690

08002250 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002250:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002262:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002266:	a320      	add	r3, pc, #128	@ (adr r3, 80022e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe fccc 	bl	8000c08 <__aeabi_ldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800227a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800227e:	a31a      	add	r3, pc, #104	@ (adr r3, 80022e8 <UTILS_NanosecondsToTimespec+0x98>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe fcc0 	bl	8000c08 <__aeabi_ldivmod>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da20      	bge.n	80022d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <UTILS_NanosecondsToTimespec+0x90>)
 800229a:	fb82 1203 	smull	r1, r2, r2, r3
 800229e:	1712      	asrs	r2, r2, #28
 80022a0:	17db      	asrs	r3, r3, #31
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	17c8      	asrs	r0, r1, #31
 80022b2:	460c      	mov	r4, r1
 80022b4:	4605      	mov	r5, r0
 80022b6:	ebb2 0804 	subs.w	r8, r2, r4
 80022ba:	eb63 0905 	sbc.w	r9, r3, r5
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	4906      	ldr	r1, [pc, #24]	@ (80022e4 <UTILS_NanosecondsToTimespec+0x94>)
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	609a      	str	r2, [r3, #8]
    }
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022e0:	44b82fa1 	.word	0x44b82fa1
 80022e4:	3b9aca00 	.word	0x3b9aca00
 80022e8:	3b9aca00 	.word	0x3b9aca00
 80022ec:	00000000 	.word	0x00000000

080022f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b08e      	sub	sp, #56	@ 0x38
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80022fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80022fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002300:	2300      	movs	r3, #0
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002312:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002316:	4618      	mov	r0, r3
 8002318:	f006 f886 	bl	8008428 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	17da      	asrs	r2, r3, #31
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	61fa      	str	r2, [r7, #28]
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	000b      	movs	r3, r1
 8002330:	2200      	movs	r2, #0
 8002332:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002338:	2200      	movs	r2, #0
 800233a:	461c      	mov	r4, r3
 800233c:	4615      	mov	r5, r2
 800233e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002342:	1911      	adds	r1, r2, r4
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	416b      	adcs	r3, r5
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800234e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002352:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	f04f 0400 	mov.w	r4, #0
 800235e:	f04f 0500 	mov.w	r5, #0
 8002362:	015d      	lsls	r5, r3, #5
 8002364:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002368:	0154      	lsls	r4, r2, #5
 800236a:	4622      	mov	r2, r4
 800236c:	462b      	mov	r3, r5
 800236e:	ebb2 0800 	subs.w	r8, r2, r0
 8002372:	eb63 0901 	sbc.w	r9, r3, r1
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002382:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002386:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800238a:	4690      	mov	r8, r2
 800238c:	4699      	mov	r9, r3
 800238e:	eb18 0a00 	adds.w	sl, r8, r0
 8002392:	eb49 0b01 	adc.w	fp, r9, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023aa:	ebb2 040a 	subs.w	r4, r2, sl
 80023ae:	603c      	str	r4, [r7, #0]
 80023b0:	eb63 030b 	sbc.w	r3, r3, fp
 80023b4:	607b      	str	r3, [r7, #4]
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4623      	mov	r3, r4
 80023bc:	181b      	adds	r3, r3, r0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	462b      	mov	r3, r5
 80023c2:	eb41 0303 	adc.w	r3, r1, r3
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ce:	f7ff ff3f 	bl	8002250 <UTILS_NanosecondsToTimespec>

    return 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3738      	adds	r7, #56	@ 0x38
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080023e0 <scan_motor_up>:

extern int motor_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <scan_motor_up+0x4c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d016      	beq.n	800241a <scan_motor_up+0x3a>
		TIM2->CCR4 = 0;
 80023ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f0:	2200      	movs	r2, #0
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 1;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <scan_motor_up+0x50>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <scan_motor_up+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
		Publisher_state();
 8002400:	f001 f8b8 	bl	8003574 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <scan_motor_up+0x54>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f005 fcb5 	bl	8007d78 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <scan_motor_up+0x58>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f005 fcb0 	bl	8007d78 <vTaskSuspend>
	}else{
		change_motor_direction(1);
		TIM2->CCR4 = 20;
	}
}
 8002418:	e006      	b.n	8002428 <scan_motor_up+0x48>
		change_motor_direction(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 f83c 	bl	8002498 <change_motor_direction>
		TIM2->CCR4 = 20;
 8002420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002424:	2214      	movs	r2, #20
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	2000e694 	.word	0x2000e694
 8002430:	200046e4 	.word	0x200046e4
 8002434:	200046ec 	.word	0x200046ec
 8002438:	200046f4 	.word	0x200046f4

0800243c <scan_motor_down>:

void scan_motor_down(){
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <scan_motor_down+0x4c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <scan_motor_down+0x3a>
		TIM2->CCR4 = 0;
 8002448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800244c:	2200      	movs	r2, #0
 800244e:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 0;
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <scan_motor_down+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <scan_motor_down+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
		Publisher_state();
 800245c:	f001 f88a 	bl	8003574 <Publisher_state>
		vTaskSuspend(rfidExecuteTaskHandle);
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <scan_motor_down+0x54>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f005 fc87 	bl	8007d78 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <scan_motor_down+0x58>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f005 fc82 	bl	8007d78 <vTaskSuspend>
	}else{
		change_motor_direction(0);
		TIM2->CCR4 = 20;
	}
}
 8002474:	e006      	b.n	8002484 <scan_motor_down+0x48>
		change_motor_direction(0);
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f80e 	bl	8002498 <change_motor_direction>
		TIM2->CCR4 = 20;
 800247c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002480:	2214      	movs	r2, #20
 8002482:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000e698 	.word	0x2000e698
 800248c:	200046e4 	.word	0x200046e4
 8002490:	200046ec 	.word	0x200046ec
 8002494:	200046f4 	.word	0x200046f4

08002498 <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10c      	bne.n	80024c0 <change_motor_direction+0x28>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ac:	480e      	ldr	r0, [pc, #56]	@ (80024e8 <change_motor_direction+0x50>)
 80024ae:	f001 ffa7 	bl	8004400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024b8:	480b      	ldr	r0, [pc, #44]	@ (80024e8 <change_motor_direction+0x50>)
 80024ba:	f001 ffa1 	bl	8004400 <HAL_GPIO_WritePin>
	}else if(direction == 0){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}
}
 80024be:	e00e      	b.n	80024de <change_motor_direction+0x46>
	}else if(direction == 0){
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <change_motor_direction+0x46>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024cc:	4806      	ldr	r0, [pc, #24]	@ (80024e8 <change_motor_direction+0x50>)
 80024ce:	f001 ff97 	bl	8004400 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 80024d2:	2201      	movs	r2, #1
 80024d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024d8:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <change_motor_direction+0x50>)
 80024da:	f001 ff91 	bl	8004400 <HAL_GPIO_WritePin>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020800 	.word	0x40020800

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_MspInit+0x54>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fa:	4a11      	ldr	r2, [pc, #68]	@ (8002540 <HAL_MspInit+0x54>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002500:	6453      	str	r3, [r2, #68]	@ 0x44
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <HAL_MspInit+0x54>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_MspInit+0x54>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_MspInit+0x54>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_MspInit+0x54>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	f06f 0001 	mvn.w	r0, #1
 8002532:	f001 f9a5 	bl	8003880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	4b33      	ldr	r3, [pc, #204]	@ (8002628 <HAL_InitTick+0xe4>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	4a32      	ldr	r2, [pc, #200]	@ (8002628 <HAL_InitTick+0xe4>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6413      	str	r3, [r2, #64]	@ 0x40
 8002564:	4b30      	ldr	r3, [pc, #192]	@ (8002628 <HAL_InitTick+0xe4>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002570:	f107 0210 	add.w	r2, r7, #16
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f002 f8dc 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800258a:	f002 f8ad 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 800258e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002590:	e004      	b.n	800259c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002592:	f002 f8a9 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8002596:	4603      	mov	r3, r0
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800259c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800259e:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_InitTick+0xe8>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9b      	lsrs	r3, r3, #18
 80025a6:	3b01      	subs	r3, #1
 80025a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80025aa:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <HAL_InitTick+0xec>)
 80025ac:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_InitTick+0xf0>)
 80025ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <HAL_InitTick+0xec>)
 80025b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025b6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80025b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <HAL_InitTick+0xec>)
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80025be:	4b1c      	ldr	r3, [pc, #112]	@ (8002630 <HAL_InitTick+0xec>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002630 <HAL_InitTick+0xec>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_InitTick+0xec>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80025d0:	4817      	ldr	r0, [pc, #92]	@ (8002630 <HAL_InitTick+0xec>)
 80025d2:	f002 fdb1 	bl	8005138 <HAL_TIM_Base_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80025dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11b      	bne.n	800261c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80025e4:	4812      	ldr	r0, [pc, #72]	@ (8002630 <HAL_InitTick+0xec>)
 80025e6:	f002 fe01 	bl	80051ec <HAL_TIM_Base_Start_IT>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80025f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d111      	bne.n	800261c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025f8:	201e      	movs	r0, #30
 80025fa:	f001 f95d 	bl	80038b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d808      	bhi.n	8002616 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	201e      	movs	r0, #30
 800260a:	f001 f939 	bl	8003880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800260e:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_InitTick+0xf4>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e002      	b.n	800261c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800261c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002620:	4618      	mov	r0, r3
 8002622:	3738      	adds	r7, #56	@ 0x38
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	431bde83 	.word	0x431bde83
 8002630:	2000e69c 	.word	0x2000e69c
 8002634:	40000800 	.word	0x40000800
 8002638:	20000010 	.word	0x20000010

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <NMI_Handler+0x4>

08002644 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002648:	bf00      	nop
 800264a:	e7fd      	b.n	8002648 <HardFault_Handler+0x4>

0800264c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <MemManage_Handler+0x4>

08002654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <BusFault_Handler+0x4>

0800265c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <UsageFault_Handler+0x4>

08002664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <DMA1_Stream0_IRQHandler+0x10>)
 800267a:	f001 fac3 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000effc 	.word	0x2000effc

08002688 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <DMA1_Stream5_IRQHandler+0x10>)
 800268e:	f001 fab9 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000f0bc 	.word	0x2000f0bc

0800269c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 80026a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80026a4:	f001 fec6 	bl	8004434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <TIM4_IRQHandler+0x10>)
 80026b2:	f002 ff23 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000e69c 	.word	0x2000e69c

080026c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <USART1_IRQHandler+0x10>)
 80026c6:	f003 fe19 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000eedc 	.word	0x2000eedc

080026d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <USART3_IRQHandler+0x10>)
 80026da:	f003 fe0f 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000ef6c 	.word	0x2000ef6c

080026e8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <UART5_IRQHandler+0x10>)
 80026ee:	f003 fe05 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000ee94 	.word	0x2000ee94

080026fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <DMA2_Stream1_IRQHandler+0x10>)
 8002702:	f001 fa7f 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000f11c 	.word	0x2000f11c

08002710 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <DMA2_Stream5_IRQHandler+0x10>)
 8002716:	f001 fa75 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000f05c 	.word	0x2000f05c

08002724 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA2_Stream6_IRQHandler+0x10>)
 800272a:	f001 fa6b 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000f17c 	.word	0x2000f17c

08002738 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <USART6_IRQHandler+0x10>)
 800273e:	f003 fddd 	bl	80062fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	2000efb4 	.word	0x2000efb4

0800274c <_getpid>:
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
 8002750:	2301      	movs	r3, #1
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <_kill>:
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	f014 fda1 	bl	80172ac <__errno>
 800276a:	4603      	mov	r3, r0
 800276c:	2216      	movs	r2, #22
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_exit>:
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ffe7 	bl	800275c <_kill>
 800278e:	bf00      	nop
 8002790:	e7fd      	b.n	800278e <_exit+0x12>

08002792 <_read>:
 8002792:	b580      	push	{r7, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e00a      	b.n	80027ba <_read+0x28>
 80027a4:	f3af 8000 	nop.w
 80027a8:	4601      	mov	r1, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	60ba      	str	r2, [r7, #8]
 80027b0:	b2ca      	uxtb	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbf0      	blt.n	80027a4 <_read+0x12>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_write>:
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e009      	b.n	80027f2 <_write+0x26>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	60ba      	str	r2, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f3af 8000 	nop.w
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	dbf1      	blt.n	80027de <_write+0x12>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <_close>:
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <_fstat>:
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	2300      	movs	r3, #0
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_isatty>:
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	2301      	movs	r3, #1
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_lseek>:
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	2300      	movs	r3, #0
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_sbrk>:
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
 800289c:	f014 fd06 	bl	80172ac <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20020000 	.word	0x20020000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	2000e6e8 	.word	0x2000e6e8
 80028d4:	20017c00 	.word	0x20017c00

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <SystemInit+0x20>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <SystemInit+0x20>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002902:	f107 0320 	add.w	r3, r7, #32
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002920:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002924:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002928:	2200      	movs	r2, #0
 800292a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <MX_TIM2_Init+0xac>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8002932:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002934:	2259      	movs	r2, #89	@ 0x59
 8002936:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <MX_TIM2_Init+0xac>)
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293e:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002940:	2200      	movs	r2, #0
 8002942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002944:	4818      	ldr	r0, [pc, #96]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002946:	f002 fcc1 	bl	80052cc <HAL_TIM_PWM_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002950:	f7ff fbdc 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	4619      	mov	r1, r3
 8002962:	4811      	ldr	r0, [pc, #68]	@ (80029a8 <MX_TIM2_Init+0xac>)
 8002964:	f003 fa26 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800296e:	f7ff fbcd 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002972:	2360      	movs	r3, #96	@ 0x60
 8002974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	220c      	movs	r2, #12
 8002986:	4619      	mov	r1, r3
 8002988:	4807      	ldr	r0, [pc, #28]	@ (80029a8 <MX_TIM2_Init+0xac>)
 800298a:	f002 fea7 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002994:	f7ff fbba 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002998:	4803      	ldr	r0, [pc, #12]	@ (80029a8 <MX_TIM2_Init+0xac>)
 800299a:	f000 f827 	bl	80029ec <HAL_TIM_MspPostInit>

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	@ 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	2000e6ec 	.word	0x2000e6ec

080029ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029bc:	d10d      	bne.n	80029da <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a08      	ldr	r2, [pc, #32]	@ (80029e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40023800 	.word	0x40023800

080029ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0c:	d11d      	bne.n	8002a4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_TIM_MspPostInit+0x68>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4a0f      	ldr	r2, [pc, #60]	@ (8002a54 <HAL_TIM_MspPostInit+0x68>)
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <HAL_TIM_MspPostInit+0x68>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	60bb      	str	r3, [r7, #8]
 8002a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	4619      	mov	r1, r3
 8002a44:	4804      	ldr	r0, [pc, #16]	@ (8002a58 <HAL_TIM_MspPostInit+0x6c>)
 8002a46:	f001 fb47 	bl	80040d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400

08002a5c <uart_init>:

queue8_t uart_queue;
queue8_t uart2_queue;
queue8_t uart5_queue;

void uart_init(){
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 8002a60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a64:	490a      	ldr	r1, [pc, #40]	@ (8002a90 <uart_init+0x34>)
 8002a66:	480b      	ldr	r0, [pc, #44]	@ (8002a94 <uart_init+0x38>)
 8002a68:	f003 fba4 	bl	80061b4 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <uart_init+0x34>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart_queue.q_out_index = 0;
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <uart_init+0x34>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

//	HAL_UART_Receive_DMA(&huart5, uart5_queue.buf, QUEUE_BUF_MAX);
		uart5_queue.q_in_index = 0;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <uart_init+0x3c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		uart5_queue.q_out_index = 0;
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <uart_init+0x3c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2000e734 	.word	0x2000e734
 8002a94:	2000eedc 	.word	0x2000eedc
 8002a98:	2000e838 	.word	0x2000e838

08002a9c <uart_available>:

uint32_t uart_available(void){
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <uart_available+0x50>)
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <uart_available+0x54>)
 8002abc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <uart_available+0x54>)
 8002ac2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002ac6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002aca:	4a09      	ldr	r2, [pc, #36]	@ (8002af0 <uart_available+0x54>)
 8002acc:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	425a      	negs	r2, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	bf58      	it	pl
 8002ada:	4253      	negpl	r3, r2
 8002adc:	607b      	str	r3, [r7, #4]

	return ret;
 8002ade:	687b      	ldr	r3, [r7, #4]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	2000eedc 	.word	0x2000eedc
 8002af0:	2000e734 	.word	0x2000e734

08002af4 <uart_q8_read>:

uint8_t uart_q8_read(void){
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <uart_q8_read+0x50>)
 8002b00:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <uart_q8_read+0x50>)
 8002b06:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d013      	beq.n	8002b36 <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <uart_q8_read+0x50>)
 8002b10:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <uart_q8_read+0x50>)
 8002b18:	5c9b      	ldrb	r3, [r3, r2]
 8002b1a:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <uart_q8_read+0x50>)
 8002b1e:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002b22:	3301      	adds	r3, #1
 8002b24:	425a      	negs	r2, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	bf58      	it	pl
 8002b2c:	4253      	negpl	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <uart_q8_read+0x50>)
 8002b32:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8002b36:	79fb      	ldrb	r3, [r7, #7]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	2000e734 	.word	0x2000e734

08002b48 <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 8002b4e:	f7ff ffa5 	bl	8002a9c <uart_available>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d042      	beq.n	8002bde <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 8002b58:	f7ff ffcc 	bl	8002af4 <uart_q8_read>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 8002b60:	4b21      	ldr	r3, [pc, #132]	@ (8002be8 <read_rfid_number+0xa0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	b2d1      	uxtb	r1, r2
 8002b68:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <read_rfid_number+0xa0>)
 8002b6a:	7011      	strb	r1, [r2, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <read_rfid_number+0xa4>)
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 8002b74:	79bb      	ldrb	r3, [r7, #6]
 8002b76:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b78:	d126      	bne.n	8002bc8 <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 8002b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <read_rfid_number+0xa4>)
 8002b7c:	785b      	ldrb	r3, [r3, #1]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d01f      	beq.n	8002bc2 <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 8002b82:	2308      	movs	r3, #8
 8002b84:	71fb      	strb	r3, [r7, #7]
 8002b86:	e013      	b.n	8002bb0 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <read_rfid_number+0xa8>)
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	4610      	mov	r0, r2
 8002b90:	79fa      	ldrb	r2, [r7, #7]
 8002b92:	3a08      	subs	r2, #8
 8002b94:	4915      	ldr	r1, [pc, #84]	@ (8002bec <read_rfid_number+0xa4>)
 8002b96:	5ccc      	ldrb	r4, [r1, r3]
 8002b98:	4916      	ldr	r1, [pc, #88]	@ (8002bf4 <read_rfid_number+0xac>)
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4403      	add	r3, r0
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	3301      	adds	r3, #1
 8002bae:	71fb      	strb	r3, [r7, #7]
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b13      	cmp	r3, #19
 8002bb4:	d9e8      	bls.n	8002b88 <read_rfid_number+0x40>
				book_num ++;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf0 <read_rfid_number+0xa8>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf0 <read_rfid_number+0xa8>)
 8002bc0:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <read_rfid_number+0xa0>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 8002bc8:	f7ff ff68 	bl	8002a9c <uart_available>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <read_rfid_number+0xb0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f004 fda7 	bl	800772c <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	2000ee05 	.word	0x2000ee05
 8002bec:	2000edec 	.word	0x2000edec
 8002bf0:	2000ee04 	.word	0x2000ee04
 8002bf4:	2000e93c 	.word	0x2000e93c
 8002bf8:	200046f0 	.word	0x200046f0

08002bfc <transmitData>:
//robot initial location
int robotLocation=0;
void transmitData(){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
	int i=0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
	char location[15];
	memset(location,'0',15);
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	220f      	movs	r2, #15
 8002c0a:	2130      	movs	r1, #48	@ 0x30
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f014 fa5f 	bl	80170d0 <memset>
	while(rfid_number[i][0] != 0){
 8002c12:	e02d      	b.n	8002c70 <transmitData+0x74>
		if(robotLocation != 0){
 8002c14:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <transmitData+0xa4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <transmitData+0x2e>
			itoa(robotLocation,location,10);
 8002c1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <transmitData+0xa4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	1d39      	adds	r1, r7, #4
 8002c22:	220a      	movs	r2, #10
 8002c24:	4618      	mov	r0, r3
 8002c26:	f013 f923 	bl	8015e70 <itoa>
		}
		// 위치 + RFID태그값 문자열 합침
 		locationCatRfid(location,rfid_number[i]);
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca4 <transmitData+0xa8>)
 8002c36:	441a      	add	r2, r3
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f839 	bl	8002cb4 <locationCatRfid>
		//computer
		HAL_UART_Transmit(&huart2, location, 15, 500);
 8002c42:	1d39      	adds	r1, r7, #4
 8002c44:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c48:	220f      	movs	r2, #15
 8002c4a:	4817      	ldr	r0, [pc, #92]	@ (8002ca8 <transmitData+0xac>)
 8002c4c:	f003 f992 	bl	8005f74 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, location, 15, 500);
 8002c50:	1d39      	adds	r1, r7, #4
 8002c52:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c56:	220f      	movs	r2, #15
 8002c58:	4814      	ldr	r0, [pc, #80]	@ (8002cac <transmitData+0xb0>)
 8002c5a:	f003 f98b 	bl	8005f74 <HAL_UART_Transmit>

		i++;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
		memset(location,'0',15);
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	220f      	movs	r2, #15
 8002c68:	2130      	movs	r1, #48	@ 0x30
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f014 fa30 	bl	80170d0 <memset>
	while(rfid_number[i][0] != 0){
 8002c70:	490c      	ldr	r1, [pc, #48]	@ (8002ca4 <transmitData+0xa8>)
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1c7      	bne.n	8002c14 <transmitData+0x18>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 8002c84:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4806      	ldr	r0, [pc, #24]	@ (8002ca4 <transmitData+0xa8>)
 8002c8c:	f014 fa20 	bl	80170d0 <memset>
	book_num =0;
 8002c90:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <transmitData+0xb4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]

}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000ee08 	.word	0x2000ee08
 8002ca4:	2000e93c 	.word	0x2000e93c
 8002ca8:	2000ef24 	.word	0x2000ef24
 8002cac:	2000ef6c 	.word	0x2000ef6c
 8002cb0:	2000ee04 	.word	0x2000ee04

08002cb4 <locationCatRfid>:
void locationCatRfid(char *location, const char *tagNum){
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
	for(int i=3;i<15;i++){
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e00b      	b.n	8002cdc <locationCatRfid+0x28>
		location[i] = tagNum[i-3];
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3b03      	subs	r3, #3
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	440b      	add	r3, r1
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<15;i++){
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b0e      	cmp	r3, #14
 8002ce0:	ddf0      	ble.n	8002cc4 <locationCatRfid+0x10>
	}
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <uart5_available>:

uint32_t uart5_available(void){
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
	uart5_queue.q_in_index = (QUEUE_BUF_MAX - huart5.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <uart5_available+0x50>)
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <uart5_available+0x54>)
 8002d10:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart5_queue.q_in_index - uart5_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8002d14:	4b0b      	ldr	r3, [pc, #44]	@ (8002d44 <uart5_available+0x54>)
 8002d16:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002d1a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d1e:	4a09      	ldr	r2, [pc, #36]	@ (8002d44 <uart5_available+0x54>)
 8002d20:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	425a      	negs	r2, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	bf58      	it	pl
 8002d2e:	4253      	negpl	r3, r2
 8002d30:	607b      	str	r3, [r7, #4]

	return ret;
 8002d32:	687b      	ldr	r3, [r7, #4]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	2000ee94 	.word	0x2000ee94
 8002d44:	2000e838 	.word	0x2000e838

08002d48 <uart5_q8_read>:

uint8_t uart5_q8_read(void){
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	71fb      	strb	r3, [r7, #7]
	if(uart5_queue.q_out_index != uart5_queue.q_in_index){
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d54:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d5a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d013      	beq.n	8002d8a <uart5_q8_read+0x42>
		ret = uart5_queue.buf[uart5_queue.q_out_index];
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d64:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d6c:	5c9b      	ldrb	r3, [r3, r2]
 8002d6e:	71fb      	strb	r3, [r7, #7]
		uart5_queue.q_out_index = (uart5_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8002d70:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d72:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002d76:	3301      	adds	r3, #1
 8002d78:	425a      	negs	r2, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	bf58      	it	pl
 8002d80:	4253      	negpl	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <uart5_q8_read+0x50>)
 8002d86:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	2000e838 	.word	0x2000e838

08002d9c <read_location>:
uint8_t recive_data2[12];
uint8_t indexXY;
void read_location(){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
	char xChar[6],yChar[6];
	if(uart5_available()){
 8002da2:	f7ff ffa5 	bl	8002cf0 <uart5_available>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d039      	beq.n	8002e20 <read_location+0x84>
/*//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);*/
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8002dac:	2201      	movs	r2, #1
 8002dae:	2120      	movs	r1, #32
 8002db0:	481d      	ldr	r0, [pc, #116]	@ (8002e28 <read_location+0x8c>)
 8002db2:	f001 fb25 	bl	8004400 <HAL_GPIO_WritePin>
		uint8_t read_byte =  uart5_q8_read(); // 버퍼에서 1byte 읽고
 8002db6:	f7ff ffc7 	bl	8002d48 <uart5_q8_read>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]
		recive_data2[indexXY++] = read_byte;
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <read_location+0x90>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	b2d1      	uxtb	r1, r2
 8002dc6:	4a19      	ldr	r2, [pc, #100]	@ (8002e2c <read_location+0x90>)
 8002dc8:	7011      	strb	r1, [r2, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4a18      	ldr	r2, [pc, #96]	@ (8002e30 <read_location+0x94>)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	5453      	strb	r3, [r2, r1]
		if(indexXY == 12){
 8002dd2:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <read_location+0x90>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d122      	bne.n	8002e20 <read_location+0x84>

			if(recive_data2[0] == 'z'){
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <read_location+0x94>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b7a      	cmp	r3, #122	@ 0x7a
 8002de0:	d01b      	beq.n	8002e1a <read_location+0x7e>
				//정비시작
				int a;
			}
			else{
				//book location move
				for(int i=0;i<6;i++){
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e015      	b.n	8002e14 <read_location+0x78>
					xChar[i] = recive_data2[i];
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <read_location+0x94>)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	4413      	add	r3, r2
 8002dee:	7819      	ldrb	r1, [r3, #0]
 8002df0:	f107 020c 	add.w	r2, r7, #12
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
					yChar[i] = recive_data2[i+6];
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	3306      	adds	r3, #6
 8002e00:	4a0b      	ldr	r2, [pc, #44]	@ (8002e30 <read_location+0x94>)
 8002e02:	5cd1      	ldrb	r1, [r2, r3]
 8002e04:	1d3a      	adds	r2, r7, #4
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	460a      	mov	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<6;i++){
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b05      	cmp	r3, #5
 8002e18:	dde6      	ble.n	8002de8 <read_location+0x4c>
				}
//				Publisher_pos(xChar,yChar);
			}
			indexXY=0;
 8002e1a:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <read_location+0x90>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	2000ee18 	.word	0x2000ee18
 8002e30:	2000ee0c 	.word	0x2000ee0c

08002e34 <transmitCommand>:
}

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 8002e38:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <transmitCommand+0x44>)
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480f      	ldr	r0, [pc, #60]	@ (8002e7c <transmitCommand+0x48>)
 8002e3e:	f014 f94f 	bl	80170e0 <strchr>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 8002e48:	2301      	movs	r3, #1
 8002e4a:	2205      	movs	r2, #5
 8002e4c:	490c      	ldr	r1, [pc, #48]	@ (8002e80 <transmitCommand+0x4c>)
 8002e4e:	480d      	ldr	r0, [pc, #52]	@ (8002e84 <transmitCommand+0x50>)
 8002e50:	f003 f890 	bl	8005f74 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <transmitCommand+0x54>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f005 f853 	bl	8007f04 <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e8c <transmitCommand+0x58>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 f84e 	bl	8007f04 <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 8002e68:	2214      	movs	r2, #20
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4803      	ldr	r0, [pc, #12]	@ (8002e7c <transmitCommand+0x48>)
 8002e6e:	f014 f92f 	bl	80170d0 <memset>
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	2000ee1c 	.word	0x2000ee1c
 8002e80:	0801925c 	.word	0x0801925c
 8002e84:	2000ef24 	.word	0x2000ef24
 8002e88:	200046f4 	.word	0x200046f4
 8002e8c:	200046ec 	.word	0x200046ec

08002e90 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <MX_UART5_Init+0x50>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ec6:	4805      	ldr	r0, [pc, #20]	@ (8002edc <MX_UART5_Init+0x4c>)
 8002ec8:	f003 f804 	bl	8005ed4 <HAL_UART_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002ed2:	f7ff f91b 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000ee94 	.word	0x2000ee94
 8002ee0:	40005000 	.word	0x40005000

08002ee4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002eea:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <MX_USART1_UART_Init+0x50>)
 8002eec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eee:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002ef0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ef4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0e:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f1a:	4805      	ldr	r0, [pc, #20]	@ (8002f30 <MX_USART1_UART_Init+0x4c>)
 8002f1c:	f002 ffda 	bl	8005ed4 <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f26:	f7ff f8f1 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000eedc 	.word	0x2000eedc
 8002f34:	40011000 	.word	0x40011000

08002f38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	@ (8002f88 <MX_USART2_UART_Init+0x50>)
 8002f40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f5c:	4b09      	ldr	r3, [pc, #36]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	220c      	movs	r2, #12
 8002f60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f62:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f68:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6e:	4805      	ldr	r0, [pc, #20]	@ (8002f84 <MX_USART2_UART_Init+0x4c>)
 8002f70:	f002 ffb0 	bl	8005ed4 <HAL_UART_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f7a:	f7ff f8c7 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000ef24 	.word	0x2000ef24
 8002f88:	40004400 	.word	0x40004400

08002f8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f90:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002f92:	4a12      	ldr	r2, [pc, #72]	@ (8002fdc <MX_USART3_UART_Init+0x50>)
 8002f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f96:	4b10      	ldr	r3, [pc, #64]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002f98:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fc2:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <MX_USART3_UART_Init+0x4c>)
 8002fc4:	f002 ff86 	bl	8005ed4 <HAL_UART_Init>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002fce:	f7ff f89d 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2000ef6c 	.word	0x2000ef6c
 8002fdc:	40004800 	.word	0x40004800

08002fe0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8002fe6:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <MX_USART6_UART_Init+0x50>)
 8002fe8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002fea:	4b10      	ldr	r3, [pc, #64]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8002fec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ff0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8003006:	220c      	movs	r2, #12
 8003008:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800300a:	4b08      	ldr	r3, [pc, #32]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8003012:	2200      	movs	r2, #0
 8003014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003016:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_USART6_UART_Init+0x4c>)
 8003018:	f002 ff5c 	bl	8005ed4 <HAL_UART_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003022:	f7ff f873 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000efb4 	.word	0x2000efb4
 8003030:	40011400 	.word	0x40011400

08003034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b094      	sub	sp, #80	@ 0x50
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a78      	ldr	r2, [pc, #480]	@ (8003234 <HAL_UART_MspInit+0x200>)
 8003052:	4293      	cmp	r3, r2
 8003054:	f040 8083 	bne.w	800315e <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003058:	2300      	movs	r3, #0
 800305a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800305c:	4b76      	ldr	r3, [pc, #472]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003060:	4a75      	ldr	r2, [pc, #468]	@ (8003238 <HAL_UART_MspInit+0x204>)
 8003062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003066:	6413      	str	r3, [r2, #64]	@ 0x40
 8003068:	4b73      	ldr	r3, [pc, #460]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	637b      	str	r3, [r7, #52]	@ 0x34
 8003078:	4b6f      	ldr	r3, [pc, #444]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	4a6e      	ldr	r2, [pc, #440]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800307e:	f043 0304 	orr.w	r3, r3, #4
 8003082:	6313      	str	r3, [r2, #48]	@ 0x30
 8003084:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_UART_MspInit+0x204>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	633b      	str	r3, [r7, #48]	@ 0x30
 8003094:	4b68      	ldr	r3, [pc, #416]	@ (8003238 <HAL_UART_MspInit+0x204>)
 8003096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003098:	4a67      	ldr	r2, [pc, #412]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800309a:	f043 0308 	orr.w	r3, r3, #8
 800309e:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a0:	4b65      	ldr	r3, [pc, #404]	@ (8003238 <HAL_UART_MspInit+0x204>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = F103re_TX_Pin;
 80030ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ba:	2303      	movs	r3, #3
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030be:	2308      	movs	r3, #8
 80030c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(F103re_TX_GPIO_Port, &GPIO_InitStruct);
 80030c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030c6:	4619      	mov	r1, r3
 80030c8:	485c      	ldr	r0, [pc, #368]	@ (800323c <HAL_UART_MspInit+0x208>)
 80030ca:	f001 f805 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F103re_RX_Pin;
 80030ce:	2304      	movs	r3, #4
 80030d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d2:	2302      	movs	r3, #2
 80030d4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030da:	2303      	movs	r3, #3
 80030dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030de:	2308      	movs	r3, #8
 80030e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(F103re_RX_GPIO_Port, &GPIO_InitStruct);
 80030e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80030e6:	4619      	mov	r1, r3
 80030e8:	4855      	ldr	r0, [pc, #340]	@ (8003240 <HAL_UART_MspInit+0x20c>)
 80030ea:	f000 fff5 	bl	80040d8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80030ee:	4b55      	ldr	r3, [pc, #340]	@ (8003244 <HAL_UART_MspInit+0x210>)
 80030f0:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <HAL_UART_MspInit+0x214>)
 80030f2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80030f4:	4b53      	ldr	r3, [pc, #332]	@ (8003244 <HAL_UART_MspInit+0x210>)
 80030f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030fa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fc:	4b51      	ldr	r3, [pc, #324]	@ (8003244 <HAL_UART_MspInit+0x210>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003102:	4b50      	ldr	r3, [pc, #320]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003104:	2200      	movs	r2, #0
 8003106:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003108:	4b4e      	ldr	r3, [pc, #312]	@ (8003244 <HAL_UART_MspInit+0x210>)
 800310a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800310e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003110:	4b4c      	ldr	r3, [pc, #304]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003116:	4b4b      	ldr	r3, [pc, #300]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800311c:	4b49      	ldr	r3, [pc, #292]	@ (8003244 <HAL_UART_MspInit+0x210>)
 800311e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003122:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b47      	ldr	r3, [pc, #284]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312a:	4b46      	ldr	r3, [pc, #280]	@ (8003244 <HAL_UART_MspInit+0x210>)
 800312c:	2200      	movs	r2, #0
 800312e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003130:	4844      	ldr	r0, [pc, #272]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003132:	f000 fbcf 	bl	80038d4 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800313c:	f7fe ffe6 	bl	800210c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a40      	ldr	r2, [pc, #256]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003146:	4a3f      	ldr	r2, [pc, #252]	@ (8003244 <HAL_UART_MspInit+0x210>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2105      	movs	r1, #5
 8003150:	2035      	movs	r0, #53	@ 0x35
 8003152:	f000 fb95 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003156:	2035      	movs	r0, #53	@ 0x35
 8003158:	f000 fbae 	bl	80038b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800315c:	e1e0      	b.n	8003520 <HAL_UART_MspInit+0x4ec>
  else if(uartHandle->Instance==USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a3a      	ldr	r2, [pc, #232]	@ (800324c <HAL_UART_MspInit+0x218>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d179      	bne.n	800325c <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800316e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003170:	4a31      	ldr	r2, [pc, #196]	@ (8003238 <HAL_UART_MspInit+0x204>)
 8003172:	f043 0310 	orr.w	r3, r3, #16
 8003176:	6453      	str	r3, [r2, #68]	@ 0x44
 8003178:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800317a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	4a2a      	ldr	r2, [pc, #168]	@ (8003238 <HAL_UART_MspInit+0x204>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6313      	str	r3, [r2, #48]	@ 0x30
 8003194:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <HAL_UART_MspInit+0x204>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 80031a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80031a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b2:	2307      	movs	r3, #7
 80031b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031ba:	4619      	mov	r1, r3
 80031bc:	4824      	ldr	r0, [pc, #144]	@ (8003250 <HAL_UART_MspInit+0x21c>)
 80031be:	f000 ff8b 	bl	80040d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80031c2:	4b24      	ldr	r3, [pc, #144]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_UART_MspInit+0x224>)
 80031c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80031c8:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031d0:	4b20      	ldr	r3, [pc, #128]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80031f0:	4b18      	ldr	r3, [pc, #96]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031f8:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <HAL_UART_MspInit+0x220>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031fe:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <HAL_UART_MspInit+0x220>)
 8003200:	2200      	movs	r2, #0
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003204:	4813      	ldr	r0, [pc, #76]	@ (8003254 <HAL_UART_MspInit+0x220>)
 8003206:	f000 fb65 	bl	80038d4 <HAL_DMA_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003210:	f7fe ff7c 	bl	800210c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_UART_MspInit+0x220>)
 8003218:	63da      	str	r2, [r3, #60]	@ 0x3c
 800321a:	4a0e      	ldr	r2, [pc, #56]	@ (8003254 <HAL_UART_MspInit+0x220>)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003220:	2200      	movs	r2, #0
 8003222:	2105      	movs	r1, #5
 8003224:	2025      	movs	r0, #37	@ 0x25
 8003226:	f000 fb2b 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800322a:	2025      	movs	r0, #37	@ 0x25
 800322c:	f000 fb44 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 8003230:	e176      	b.n	8003520 <HAL_UART_MspInit+0x4ec>
 8003232:	bf00      	nop
 8003234:	40005000 	.word	0x40005000
 8003238:	40023800 	.word	0x40023800
 800323c:	40020800 	.word	0x40020800
 8003240:	40020c00 	.word	0x40020c00
 8003244:	2000effc 	.word	0x2000effc
 8003248:	40026010 	.word	0x40026010
 800324c:	40011000 	.word	0x40011000
 8003250:	40020000 	.word	0x40020000
 8003254:	2000f05c 	.word	0x2000f05c
 8003258:	40026488 	.word	0x40026488
  else if(uartHandle->Instance==USART2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5b      	ldr	r2, [pc, #364]	@ (80033d0 <HAL_UART_MspInit+0x39c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d15a      	bne.n	800331c <HAL_UART_MspInit+0x2e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
 800326a:	4b5a      	ldr	r3, [pc, #360]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a59      	ldr	r2, [pc, #356]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b57      	ldr	r3, [pc, #348]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	4b53      	ldr	r3, [pc, #332]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	4a52      	ldr	r2, [pc, #328]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6313      	str	r3, [r2, #48]	@ 0x30
 8003292:	4b50      	ldr	r3, [pc, #320]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 800329e:	230c      	movs	r3, #12
 80032a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a2:	2302      	movs	r3, #2
 80032a4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032ae:	2307      	movs	r3, #7
 80032b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032b6:	4619      	mov	r1, r3
 80032b8:	4847      	ldr	r0, [pc, #284]	@ (80033d8 <HAL_UART_MspInit+0x3a4>)
 80032ba:	f000 ff0d 	bl	80040d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032c0:	4a47      	ldr	r2, [pc, #284]	@ (80033e0 <HAL_UART_MspInit+0x3ac>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80032c4:	4b45      	ldr	r3, [pc, #276]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032cc:	4b43      	ldr	r3, [pc, #268]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d2:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d8:	4b40      	ldr	r3, [pc, #256]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032e0:	4b3e      	ldr	r3, [pc, #248]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80032ec:	4b3b      	ldr	r3, [pc, #236]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f8:	4b38      	ldr	r3, [pc, #224]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032fe:	4837      	ldr	r0, [pc, #220]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 8003300:	f000 fae8 	bl	80038d4 <HAL_DMA_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_MspInit+0x2da>
      Error_Handler();
 800330a:	f7fe feff 	bl	800210c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 8003312:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003314:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <HAL_UART_MspInit+0x3a8>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800331a:	e101      	b.n	8003520 <HAL_UART_MspInit+0x4ec>
  else if(uartHandle->Instance==USART3)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <HAL_UART_MspInit+0x3b0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d164      	bne.n	80033f0 <HAL_UART_MspInit+0x3bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	4b2a      	ldr	r3, [pc, #168]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	4a29      	ldr	r2, [pc, #164]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003334:	6413      	str	r3, [r2, #64]	@ 0x40
 8003336:	4b27      	ldr	r3, [pc, #156]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	4b23      	ldr	r3, [pc, #140]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a22      	ldr	r2, [pc, #136]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	4b1c      	ldr	r3, [pc, #112]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30
 800336e:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <HAL_UART_MspInit+0x3a0>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 800337a:	2320      	movs	r3, #32
 800337c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800338a:	2307      	movs	r3, #7
 800338c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 800338e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003392:	4619      	mov	r1, r3
 8003394:	4814      	ldr	r0, [pc, #80]	@ (80033e8 <HAL_UART_MspInit+0x3b4>)
 8003396:	f000 fe9f 	bl	80040d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 800339a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ac:	2307      	movs	r3, #7
 80033ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033b4:	4619      	mov	r1, r3
 80033b6:	480d      	ldr	r0, [pc, #52]	@ (80033ec <HAL_UART_MspInit+0x3b8>)
 80033b8:	f000 fe8e 	bl	80040d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80033bc:	2200      	movs	r2, #0
 80033be:	2105      	movs	r1, #5
 80033c0:	2027      	movs	r0, #39	@ 0x27
 80033c2:	f000 fa5d 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033c6:	2027      	movs	r0, #39	@ 0x27
 80033c8:	f000 fa76 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 80033cc:	e0a8      	b.n	8003520 <HAL_UART_MspInit+0x4ec>
 80033ce:	bf00      	nop
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	2000f0bc 	.word	0x2000f0bc
 80033e0:	40026088 	.word	0x40026088
 80033e4:	40004800 	.word	0x40004800
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003528 <HAL_UART_MspInit+0x4f4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	f040 8092 	bne.w	8003520 <HAL_UART_MspInit+0x4ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	4b4a      	ldr	r3, [pc, #296]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	4a49      	ldr	r2, [pc, #292]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6453      	str	r3, [r2, #68]	@ 0x44
 800340c:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	4b43      	ldr	r3, [pc, #268]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	4a42      	ldr	r2, [pc, #264]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6313      	str	r3, [r2, #48]	@ 0x30
 8003428:	4b40      	ldr	r3, [pc, #256]	@ (800352c <HAL_UART_MspInit+0x4f8>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Micro_ROS_TX_Pin|Micro_ROS_RX_Pin;
 8003434:	23c0      	movs	r3, #192	@ 0xc0
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003440:	2303      	movs	r3, #3
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003444:	2308      	movs	r3, #8
 8003446:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003448:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800344c:	4619      	mov	r1, r3
 800344e:	4838      	ldr	r0, [pc, #224]	@ (8003530 <HAL_UART_MspInit+0x4fc>)
 8003450:	f000 fe42 	bl	80040d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003454:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003456:	4a38      	ldr	r2, [pc, #224]	@ (8003538 <HAL_UART_MspInit+0x504>)
 8003458:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800345a:	4b36      	ldr	r3, [pc, #216]	@ (8003534 <HAL_UART_MspInit+0x500>)
 800345c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003460:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003462:	4b34      	ldr	r3, [pc, #208]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003464:	2200      	movs	r2, #0
 8003466:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003468:	4b32      	ldr	r3, [pc, #200]	@ (8003534 <HAL_UART_MspInit+0x500>)
 800346a:	2200      	movs	r2, #0
 800346c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800346e:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003474:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003476:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003478:	2200      	movs	r2, #0
 800347a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800347c:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_UART_MspInit+0x500>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003482:	4b2c      	ldr	r3, [pc, #176]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003488:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800348a:	4b2a      	ldr	r3, [pc, #168]	@ (8003534 <HAL_UART_MspInit+0x500>)
 800348c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003490:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003492:	4b28      	ldr	r3, [pc, #160]	@ (8003534 <HAL_UART_MspInit+0x500>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003498:	4826      	ldr	r0, [pc, #152]	@ (8003534 <HAL_UART_MspInit+0x500>)
 800349a:	f000 fa1b 	bl	80038d4 <HAL_DMA_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_MspInit+0x474>
      Error_Handler();
 80034a4:	f7fe fe32 	bl	800210c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a22      	ldr	r2, [pc, #136]	@ (8003534 <HAL_UART_MspInit+0x500>)
 80034ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034ae:	4a21      	ldr	r2, [pc, #132]	@ (8003534 <HAL_UART_MspInit+0x500>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80034b4:	4b21      	ldr	r3, [pc, #132]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034b6:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <HAL_UART_MspInit+0x50c>)
 80034b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80034ba:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034bc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034c4:	2240      	movs	r2, #64	@ 0x40
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b1c      	ldr	r3, [pc, #112]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d6:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80034e2:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034e8:	4b14      	ldr	r3, [pc, #80]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ee:	4b13      	ldr	r3, [pc, #76]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80034f4:	4811      	ldr	r0, [pc, #68]	@ (800353c <HAL_UART_MspInit+0x508>)
 80034f6:	f000 f9ed 	bl	80038d4 <HAL_DMA_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_MspInit+0x4d0>
      Error_Handler();
 8003500:	f7fe fe04 	bl	800210c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a0d      	ldr	r2, [pc, #52]	@ (800353c <HAL_UART_MspInit+0x508>)
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38
 800350a:	4a0c      	ldr	r2, [pc, #48]	@ (800353c <HAL_UART_MspInit+0x508>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2105      	movs	r1, #5
 8003514:	2047      	movs	r0, #71	@ 0x47
 8003516:	f000 f9b3 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800351a:	2047      	movs	r0, #71	@ 0x47
 800351c:	f000 f9cc 	bl	80038b8 <HAL_NVIC_EnableIRQ>
}
 8003520:	bf00      	nop
 8003522:	3750      	adds	r7, #80	@ 0x50
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40011400 	.word	0x40011400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020800 	.word	0x40020800
 8003534:	2000f11c 	.word	0x2000f11c
 8003538:	40026428 	.word	0x40026428
 800353c:	2000f17c 	.word	0x2000f17c
 8003540:	400264a0 	.word	0x400264a0

08003544 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
char c;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

	//446re
	if(huart->Instance == UART5){
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a06      	ldr	r2, [pc, #24]	@ (800356c <HAL_UART_RxCpltCallback+0x28>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d105      	bne.n	8003562 <HAL_UART_RxCpltCallback+0x1e>
		osSignalSet(transePositionHandle, positionSignal);
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_UART_RxCpltCallback+0x2c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2103      	movs	r1, #3
 800355c:	4618      	mov	r0, r3
 800355e:	f004 f8e5 	bl	800772c <osSignalSet>
	}

}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40005000 	.word	0x40005000
 8003570:	2000e3e0 	.word	0x2000e3e0

08003574 <Publisher_state>:

extern rcl_publisher_t publisher_string_scan;
extern rcl_publisher_t publisher_string_pos;
extern UART_HandleTypeDef huart2;

void Publisher_state(){
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[20] = "finish";
 800357a:	4a11      	ldr	r2, [pc, #68]	@ (80035c0 <Publisher_state+0x4c>)
 800357c:	463b      	mov	r3, r7
 800357e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003582:	6018      	str	r0, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	8019      	strh	r1, [r3, #0]
 8003588:	3302      	adds	r3, #2
 800358a:	0c0a      	lsrs	r2, r1, #16
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	731a      	strb	r2, [r3, #12]
	msg.data.data = str;
 800359a:	463b      	mov	r3, r7
 800359c:	617b      	str	r3, [r7, #20]
	msg.data.size = strlen(str);
 800359e:	463b      	mov	r3, r7
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc fe95 	bl	80002d0 <strlen>
 80035a6:	4603      	mov	r3, r0
 80035a8:	61bb      	str	r3, [r7, #24]
	rcl_publish(&publisher_string_scan, &msg, NULL);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	2200      	movs	r2, #0
 80035b0:	4619      	mov	r1, r3
 80035b2:	4804      	ldr	r0, [pc, #16]	@ (80035c4 <Publisher_state+0x50>)
 80035b4:	f006 f9b4 	bl	8009920 <rcl_publish>
}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08019264 	.word	0x08019264
 80035c4:	200046c4 	.word	0x200046c4

080035c8 <Publisher_pos>:
	msg.data.size = strlen(str);
	rcl_publish(&publisher_string_scan, &msg, NULL);
}

/*double type input X,Y */
void Publisher_pos(char *x, char *y){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b09e      	sub	sp, #120	@ 0x78
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
	std_msgs__msg__String msg;
	char str[100] = "";
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2260      	movs	r2, #96	@ 0x60
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f013 fd76 	bl	80170d0 <memset>
	sprintf(str, "%s %s", x,y);
 80035e4:	f107 0008 	add.w	r0, r7, #8
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	490f      	ldr	r1, [pc, #60]	@ (800362c <Publisher_pos+0x64>)
 80035ee:	f013 fc15 	bl	8016e1c <siprintf>
	msg.data.data = str;
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	msg.data.size = strlen(str);
 80035f8:	f107 0308 	add.w	r3, r7, #8
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc fe67 	bl	80002d0 <strlen>
 8003602:	4603      	mov	r3, r0
 8003604:	673b      	str	r3, [r7, #112]	@ 0x70
	HAL_UART_Transmit(&huart2, str, 12, 1000);
 8003606:	f107 0108 	add.w	r1, r7, #8
 800360a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800360e:	220c      	movs	r2, #12
 8003610:	4807      	ldr	r0, [pc, #28]	@ (8003630 <Publisher_pos+0x68>)
 8003612:	f002 fcaf 	bl	8005f74 <HAL_UART_Transmit>
	rcl_publish(&publisher_string_pos, &msg, NULL);
 8003616:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800361a:	2200      	movs	r2, #0
 800361c:	4619      	mov	r1, r3
 800361e:	4805      	ldr	r0, [pc, #20]	@ (8003634 <Publisher_pos+0x6c>)
 8003620:	f006 f97e 	bl	8009920 <rcl_publish>
}
 8003624:	bf00      	nop
 8003626:	3778      	adds	r7, #120	@ 0x78
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	0801928c 	.word	0x0801928c
 8003630:	2000ef24 	.word	0x2000ef24
 8003634:	200046c8 	.word	0x200046c8

08003638 <Reset_Handler>:
 8003638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003670 <LoopFillZerobss+0xe>
 800363c:	f7ff f94c 	bl	80028d8 <SystemInit>
 8003640:	480c      	ldr	r0, [pc, #48]	@ (8003674 <LoopFillZerobss+0x12>)
 8003642:	490d      	ldr	r1, [pc, #52]	@ (8003678 <LoopFillZerobss+0x16>)
 8003644:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <LoopFillZerobss+0x1a>)
 8003646:	2300      	movs	r3, #0
 8003648:	e002      	b.n	8003650 <LoopCopyDataInit>

0800364a <CopyDataInit>:
 800364a:	58d4      	ldr	r4, [r2, r3]
 800364c:	50c4      	str	r4, [r0, r3]
 800364e:	3304      	adds	r3, #4

08003650 <LoopCopyDataInit>:
 8003650:	18c4      	adds	r4, r0, r3
 8003652:	428c      	cmp	r4, r1
 8003654:	d3f9      	bcc.n	800364a <CopyDataInit>
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LoopFillZerobss+0x1e>)
 8003658:	4c0a      	ldr	r4, [pc, #40]	@ (8003684 <LoopFillZerobss+0x22>)
 800365a:	2300      	movs	r3, #0
 800365c:	e001      	b.n	8003662 <LoopFillZerobss>

0800365e <FillZerobss>:
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	3204      	adds	r2, #4

08003662 <LoopFillZerobss>:
 8003662:	42a2      	cmp	r2, r4
 8003664:	d3fb      	bcc.n	800365e <FillZerobss>
 8003666:	f013 fe27 	bl	80172b8 <__libc_init_array>
 800366a:	f7fe fc8f 	bl	8001f8c <main>
 800366e:	4770      	bx	lr
 8003670:	20020000 	.word	0x20020000
 8003674:	20000000 	.word	0x20000000
 8003678:	20000284 	.word	0x20000284
 800367c:	0801a310 	.word	0x0801a310
 8003680:	20000288 	.word	0x20000288
 8003684:	20017c00 	.word	0x20017c00

08003688 <ADC_IRQHandler>:
 8003688:	e7fe      	b.n	8003688 <ADC_IRQHandler>
	...

0800368c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <HAL_Init+0x40>)
 8003696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <HAL_Init+0x40>)
 80036a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <HAL_Init+0x40>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b4:	2003      	movs	r0, #3
 80036b6:	f000 f8d8 	bl	800386a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ba:	200f      	movs	r0, #15
 80036bc:	f7fe ff42 	bl	8002544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c0:	f7fe ff14 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000014 	.word	0x20000014
 80036f4:	2000f1dc 	.word	0x2000f1dc

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	2000f1dc 	.word	0x2000f1dc

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	@ (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	@ (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	@ (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f1c3 0307 	rsb	r3, r3, #7
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3304      	adds	r3, #4
 800382a:	2b06      	cmp	r3, #6
 800382c:	d902      	bls.n	8003834 <NVIC_EncodePriority+0x30>
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3b03      	subs	r3, #3
 8003832:	e000      	b.n	8003836 <NVIC_EncodePriority+0x32>
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	401a      	ands	r2, r3
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800384c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	43d9      	mvns	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	4313      	orrs	r3, r2
         );
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	@ 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff4c 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003892:	f7ff ff61 	bl	8003758 <__NVIC_GetPriorityGrouping>
 8003896:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7ff ffb1 	bl	8003804 <NVIC_EncodePriority>
 80038a2:	4602      	mov	r2, r0
 80038a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ff80 	bl	80037b0 <__NVIC_SetPriority>
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ff54 	bl	8003774 <__NVIC_EnableIRQ>
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff ff0a 	bl	80036f8 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e099      	b.n	8003a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	e00f      	b.n	8003932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003912:	f7ff fef1 	bl	80036f8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b05      	cmp	r3, #5
 800391e:	d908      	bls.n	8003932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e078      	b.n	8003a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4b38      	ldr	r3, [pc, #224]	@ (8003a2c <HAL_DMA_Init+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d117      	bne.n	80039f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb01 	bl	8003fe0 <DMA_CheckFifoParam>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fab8 	bl	8003f74 <DMA_CalcBaseAndBitshift>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	223f      	movs	r2, #63	@ 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	f010803f 	.word	0xf010803f

08003a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Start_IT+0x26>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e040      	b.n	8003ad8 <HAL_DMA_Start_IT+0xa8>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d12f      	bne.n	8003aca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fa4a 	bl	8003f18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	223f      	movs	r2, #63	@ 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0216 	orr.w	r2, r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0208 	orr.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e005      	b.n	8003ad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7ff fe03 	bl	80036f8 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e052      	b.n	8003bb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_Abort+0x62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0201 	bic.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b62:	e013      	b.n	8003b8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b64:	f7ff fdc8 	bl	80036f8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d90c      	bls.n	8003b8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2203      	movs	r2, #3
 8003b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e015      	b.n	8003bb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e4      	bne.n	8003b64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	223f      	movs	r2, #63	@ 0x3f
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d004      	beq.n	8003bde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2280      	movs	r2, #128	@ 0x80
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e00c      	b.n	8003bf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2205      	movs	r2, #5
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c10:	4b8e      	ldr	r3, [pc, #568]	@ (8003e4c <HAL_DMA_IRQHandler+0x248>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a8e      	ldr	r2, [pc, #568]	@ (8003e50 <HAL_DMA_IRQHandler+0x24c>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	2208      	movs	r2, #8
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01a      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	2201      	movs	r2, #1
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2204      	movs	r2, #4
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	2204      	movs	r2, #4
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d043      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03c      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	2210      	movs	r2, #16
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e01f      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e016      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0208 	bic.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	2220      	movs	r2, #32
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 808f 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8087 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d136      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0216 	bic.w	r2, r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <HAL_DMA_IRQHandler+0x1da>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	223f      	movs	r2, #63	@ 0x3f
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d07e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
        }
        return;
 8003e1a:	e079      	b.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01d      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
 8003e48:	e02c      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
 8003e4a:	bf00      	nop
 8003e4c:	20000004 	.word	0x20000004
 8003e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e01e      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d032      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2205      	movs	r2, #5
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d307      	bcc.n	8003eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x2cc>
 8003eea:	e000      	b.n	8003eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	e000      	b.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f10:	bf00      	nop
    }
  }
}
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d108      	bne.n	8003f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f56:	e007      	b.n	8003f68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	3b10      	subs	r3, #16
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x68>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d909      	bls.n	8003fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fb4:	e007      	b.n	8003fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab
 8003fdc:	080192d0 	.word	0x080192d0

08003fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11f      	bne.n	800403a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d856      	bhi.n	80040ae <DMA_CheckFifoParam+0xce>
 8004000:	a201      	add	r2, pc, #4	@ (adr r2, 8004008 <DMA_CheckFifoParam+0x28>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	0800402b 	.word	0x0800402b
 8004010:	08004019 	.word	0x08004019
 8004014:	080040af 	.word	0x080040af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d046      	beq.n	80040b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e043      	b.n	80040b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004032:	d140      	bne.n	80040b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004038:	e03d      	b.n	80040b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004042:	d121      	bne.n	8004088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d837      	bhi.n	80040ba <DMA_CheckFifoParam+0xda>
 800404a:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <DMA_CheckFifoParam+0x70>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004061 	.word	0x08004061
 8004054:	08004067 	.word	0x08004067
 8004058:	08004061 	.word	0x08004061
 800405c:	08004079 	.word	0x08004079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e030      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d025      	beq.n	80040be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004076:	e022      	b.n	80040be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004080:	d11f      	bne.n	80040c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004086:	e01c      	b.n	80040c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d903      	bls.n	8004096 <DMA_CheckFifoParam+0xb6>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d003      	beq.n	800409c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004094:	e018      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e015      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e00b      	b.n	80040c6 <DMA_CheckFifoParam+0xe6>
      break;
 80040ae:	bf00      	nop
 80040b0:	e00a      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e008      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e006      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e004      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040c6:	bf00      	nop
    }
  } 
  
  return status; 
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	@ 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e165      	b.n	80043c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8154 	bne.w	80043ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d005      	beq.n	800412a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004126:	2b02      	cmp	r3, #2
 8004128:	d130      	bne.n	800418c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0201 	and.w	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d017      	beq.n	80041c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80ae 	beq.w	80043ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b5d      	ldr	r3, [pc, #372]	@ (80043d8 <HAL_GPIO_Init+0x300>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	4a5c      	ldr	r2, [pc, #368]	@ (80043d8 <HAL_GPIO_Init+0x300>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800426c:	6453      	str	r3, [r2, #68]	@ 0x44
 800426e:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <HAL_GPIO_Init+0x300>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427a:	4a58      	ldr	r2, [pc, #352]	@ (80043dc <HAL_GPIO_Init+0x304>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4f      	ldr	r2, [pc, #316]	@ (80043e0 <HAL_GPIO_Init+0x308>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d025      	beq.n	80042f2 <HAL_GPIO_Init+0x21a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4e      	ldr	r2, [pc, #312]	@ (80043e4 <HAL_GPIO_Init+0x30c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <HAL_GPIO_Init+0x216>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4d      	ldr	r2, [pc, #308]	@ (80043e8 <HAL_GPIO_Init+0x310>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x212>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4c      	ldr	r2, [pc, #304]	@ (80043ec <HAL_GPIO_Init+0x314>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x20e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a4b      	ldr	r2, [pc, #300]	@ (80043f0 <HAL_GPIO_Init+0x318>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x20a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4a      	ldr	r2, [pc, #296]	@ (80043f4 <HAL_GPIO_Init+0x31c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x206>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a49      	ldr	r2, [pc, #292]	@ (80043f8 <HAL_GPIO_Init+0x320>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x202>
 80042d6:	2306      	movs	r3, #6
 80042d8:	e00c      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042da:	2307      	movs	r3, #7
 80042dc:	e00a      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042de:	2305      	movs	r3, #5
 80042e0:	e008      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_GPIO_Init+0x21c>
 80042f2:	2300      	movs	r3, #0
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	f002 0203 	and.w	r2, r2, #3
 80042fa:	0092      	lsls	r2, r2, #2
 80042fc:	4093      	lsls	r3, r2
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4313      	orrs	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004304:	4935      	ldr	r1, [pc, #212]	@ (80043dc <HAL_GPIO_Init+0x304>)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	089b      	lsrs	r3, r3, #2
 800430a:	3302      	adds	r3, #2
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b3a      	ldr	r3, [pc, #232]	@ (80043fc <HAL_GPIO_Init+0x324>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004336:	4a31      	ldr	r2, [pc, #196]	@ (80043fc <HAL_GPIO_Init+0x324>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800433c:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_GPIO_Init+0x324>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004360:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <HAL_GPIO_Init+0x324>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004366:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <HAL_GPIO_Init+0x324>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800438a:	4a1c      	ldr	r2, [pc, #112]	@ (80043fc <HAL_GPIO_Init+0x324>)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004390:	4b1a      	ldr	r3, [pc, #104]	@ (80043fc <HAL_GPIO_Init+0x324>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	43db      	mvns	r3, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4013      	ands	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043b4:	4a11      	ldr	r2, [pc, #68]	@ (80043fc <HAL_GPIO_Init+0x324>)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3301      	adds	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	f67f ae96 	bls.w	80040f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	3724      	adds	r7, #36	@ 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40023800 	.word	0x40023800
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40020000 	.word	0x40020000
 80043e4:	40020400 	.word	0x40020400
 80043e8:	40020800 	.word	0x40020800
 80043ec:	40020c00 	.word	0x40020c00
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40021400 	.word	0x40021400
 80043f8:	40021800 	.word	0x40021800
 80043fc:	40013c00 	.word	0x40013c00

08004400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	807b      	strh	r3, [r7, #2]
 800440c:	4613      	mov	r3, r2
 800440e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004410:	787b      	ldrb	r3, [r7, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004416:	887a      	ldrh	r2, [r7, #2]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800441c:	e003      	b.n	8004426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800441e:	887b      	ldrh	r3, [r7, #2]
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800443e:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	695a      	ldr	r2, [r3, #20]
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800444a:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd fd50 	bl	8001ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40013c00 	.word	0x40013c00

08004464 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	4a1f      	ldr	r2, [pc, #124]	@ (80044f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447c:	6413      	str	r3, [r2, #64]	@ 0x40
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800448a:	4b1b      	ldr	r3, [pc, #108]	@ (80044f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004490:	f7ff f932 	bl	80036f8 <HAL_GetTick>
 8004494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004496:	e009      	b.n	80044ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004498:	f7ff f92e 	bl	80036f8 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044a6:	d901      	bls.n	80044ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e01f      	b.n	80044ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044ac:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <HAL_PWREx_EnableOverDrive+0x98>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b8:	d1ee      	bne.n	8004498 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044ba:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c0:	f7ff f91a 	bl	80036f8 <HAL_GetTick>
 80044c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044c6:	e009      	b.n	80044dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044c8:	f7ff f916 	bl	80036f8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044d6:	d901      	bls.n	80044dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e007      	b.n	80044ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044dc:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <HAL_PWREx_EnableOverDrive+0x98>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e8:	d1ee      	bne.n	80044c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40023800 	.word	0x40023800
 80044f8:	420e0040 	.word	0x420e0040
 80044fc:	40007000 	.word	0x40007000
 8004500:	420e0044 	.word	0x420e0044

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7ff f880 	bl	80036f8 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7ff f87c 	bl	80036f8 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 030f 	and.w	r3, r3, #15
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	@ (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f887 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	@ (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd ff4a 	bl	8002544 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	080192b8 	.word	0x080192b8
 80046c8:	20000004 	.word	0x20000004
 80046cc:	20000010 	.word	0x20000010

080046d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046d6:	681b      	ldr	r3, [r3, #0]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000004 	.word	0x20000004

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff0 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4903      	ldr	r1, [pc, #12]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	080192c8 	.word	0x080192c8

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffdc 	bl	80046d0 <HAL_RCC_GetHCLKFreq>
 8004718:	4602      	mov	r2, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	0b5b      	lsrs	r3, r3, #13
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5ccb      	ldrb	r3, [r1, r3]
 8004728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40023800 	.word	0x40023800
 8004734:	080192c8 	.word	0x080192c8

08004738 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0f      	ldr	r3, [pc, #60]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_RCC_GetClockConfig+0x60>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	40023c00 	.word	0x40023c00

0800479c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a0:	b0ae      	sub	sp, #184	@ 0xb8
 80047a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c2:	4bcb      	ldr	r3, [pc, #812]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 030c 	and.w	r3, r3, #12
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	f200 8206 	bhi.w	8004bdc <HAL_RCC_GetSysClockFreq+0x440>
 80047d0:	a201      	add	r2, pc, #4	@ (adr r2, 80047d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	08004bdd 	.word	0x08004bdd
 80047e0:	08004bdd 	.word	0x08004bdd
 80047e4:	08004bdd 	.word	0x08004bdd
 80047e8:	08004815 	.word	0x08004815
 80047ec:	08004bdd 	.word	0x08004bdd
 80047f0:	08004bdd 	.word	0x08004bdd
 80047f4:	08004bdd 	.word	0x08004bdd
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004bdd 	.word	0x08004bdd
 8004800:	08004bdd 	.word	0x08004bdd
 8004804:	08004bdd 	.word	0x08004bdd
 8004808:	08004a0d 	.word	0x08004a0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4bb9      	ldr	r3, [pc, #740]	@ (8004af4 <HAL_RCC_GetSysClockFreq+0x358>)
 800480e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004812:	e1e7      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004814:	4bb8      	ldr	r3, [pc, #736]	@ (8004af8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800481a:	e1e3      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800481c:	4bb4      	ldr	r3, [pc, #720]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004828:	4bb1      	ldr	r3, [pc, #708]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d071      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004834:	4bae      	ldr	r3, [pc, #696]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	2200      	movs	r2, #0
 800483c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004840:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800485a:	4622      	mov	r2, r4
 800485c:	462b      	mov	r3, r5
 800485e:	f04f 0000 	mov.w	r0, #0
 8004862:	f04f 0100 	mov.w	r1, #0
 8004866:	0159      	lsls	r1, r3, #5
 8004868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486c:	0150      	lsls	r0, r2, #5
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4621      	mov	r1, r4
 8004874:	1a51      	subs	r1, r2, r1
 8004876:	6439      	str	r1, [r7, #64]	@ 0x40
 8004878:	4629      	mov	r1, r5
 800487a:	eb63 0301 	sbc.w	r3, r3, r1
 800487e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800488c:	4649      	mov	r1, r9
 800488e:	018b      	lsls	r3, r1, #6
 8004890:	4641      	mov	r1, r8
 8004892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004896:	4641      	mov	r1, r8
 8004898:	018a      	lsls	r2, r1, #6
 800489a:	4641      	mov	r1, r8
 800489c:	1a51      	subs	r1, r2, r1
 800489e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048a0:	4649      	mov	r1, r9
 80048a2:	eb63 0301 	sbc.w	r3, r3, r1
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80048b4:	4649      	mov	r1, r9
 80048b6:	00cb      	lsls	r3, r1, #3
 80048b8:	4641      	mov	r1, r8
 80048ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048be:	4641      	mov	r1, r8
 80048c0:	00ca      	lsls	r2, r1, #3
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	4603      	mov	r3, r0
 80048c8:	4622      	mov	r2, r4
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ce:	462b      	mov	r3, r5
 80048d0:	460a      	mov	r2, r1
 80048d2:	eb42 0303 	adc.w	r3, r2, r3
 80048d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048e4:	4629      	mov	r1, r5
 80048e6:	024b      	lsls	r3, r1, #9
 80048e8:	4621      	mov	r1, r4
 80048ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ee:	4621      	mov	r1, r4
 80048f0:	024a      	lsls	r2, r1, #9
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004904:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004908:	f7fc f9ce 	bl	8000ca8 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004916:	e067      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004918:	4b75      	ldr	r3, [pc, #468]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004924:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004928:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004932:	2300      	movs	r3, #0
 8004934:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004936:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	4621      	mov	r1, r4
 8004954:	1a51      	subs	r1, r2, r1
 8004956:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004958:	4629      	mov	r1, r5
 800495a:	eb63 0301 	sbc.w	r3, r3, r1
 800495e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800496c:	4649      	mov	r1, r9
 800496e:	018b      	lsls	r3, r1, #6
 8004970:	4641      	mov	r1, r8
 8004972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004976:	4641      	mov	r1, r8
 8004978:	018a      	lsls	r2, r1, #6
 800497a:	4641      	mov	r1, r8
 800497c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004980:	4649      	mov	r1, r9
 8004982:	eb63 0b01 	sbc.w	fp, r3, r1
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004992:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800499a:	4692      	mov	sl, r2
 800499c:	469b      	mov	fp, r3
 800499e:	4623      	mov	r3, r4
 80049a0:	eb1a 0303 	adds.w	r3, sl, r3
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	462b      	mov	r3, r5
 80049a8:	eb4b 0303 	adc.w	r3, fp, r3
 80049ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80049ba:	4629      	mov	r1, r5
 80049bc:	028b      	lsls	r3, r1, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c4:	4621      	mov	r1, r4
 80049c6:	028a      	lsls	r2, r1, #10
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049d0:	2200      	movs	r2, #0
 80049d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80049d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80049d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80049da:	f7fc f965 	bl	8000ca8 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4613      	mov	r3, r2
 80049e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e8:	4b41      	ldr	r3, [pc, #260]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0c1b      	lsrs	r3, r3, #16
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80049fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a0a:	e0eb      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0c:	4b38      	ldr	r3, [pc, #224]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a18:	4b35      	ldr	r3, [pc, #212]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d06b      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a24:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a36:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a38:	2300      	movs	r3, #0
 8004a3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a40:	4622      	mov	r2, r4
 8004a42:	462b      	mov	r3, r5
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	0159      	lsls	r1, r3, #5
 8004a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a52:	0150      	lsls	r0, r2, #5
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4621      	mov	r1, r4
 8004a5a:	1a51      	subs	r1, r2, r1
 8004a5c:	61b9      	str	r1, [r7, #24]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	eb63 0301 	sbc.w	r3, r3, r1
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a72:	4659      	mov	r1, fp
 8004a74:	018b      	lsls	r3, r1, #6
 8004a76:	4651      	mov	r1, sl
 8004a78:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	018a      	lsls	r2, r1, #6
 8004a80:	4651      	mov	r1, sl
 8004a82:	ebb2 0801 	subs.w	r8, r2, r1
 8004a86:	4659      	mov	r1, fp
 8004a88:	eb63 0901 	sbc.w	r9, r3, r1
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aa0:	4690      	mov	r8, r2
 8004aa2:	4699      	mov	r9, r3
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	eb18 0303 	adds.w	r3, r8, r3
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	462b      	mov	r3, r5
 8004aae:	eb49 0303 	adc.w	r3, r9, r3
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	024b      	lsls	r3, r1, #9
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004aca:	4621      	mov	r1, r4
 8004acc:	024a      	lsls	r2, r1, #9
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ada:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004adc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ae0:	f7fc f8e2 	bl	8000ca8 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aee:	e065      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x420>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	099b      	lsrs	r3, r3, #6
 8004b02:	2200      	movs	r2, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	4611      	mov	r1, r2
 8004b08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b0c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b0e:	2300      	movs	r3, #0
 8004b10:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4641      	mov	r1, r8
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	4649      	mov	r1, r9
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b52:	4651      	mov	r1, sl
 8004b54:	018a      	lsls	r2, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	1a54      	subs	r4, r2, r1
 8004b5a:	4659      	mov	r1, fp
 8004b5c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb45 0303 	adc.w	r3, r5, r3
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	028b      	lsls	r3, r1, #10
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b98:	4621      	mov	r1, r4
 8004b9a:	028a      	lsls	r2, r1, #10
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004baa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004bae:	f7fc f87b 	bl	8000ca8 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0f1b      	lsrs	r3, r3, #28
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bda:	e003      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004be2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	37b8      	adds	r7, #184	@ 0xb8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00f42400 	.word	0x00f42400

08004bfc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e28d      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8083 	beq.w	8004d22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c1c:	4b94      	ldr	r3, [pc, #592]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d019      	beq.n	8004c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c28:	4b91      	ldr	r3, [pc, #580]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d106      	bne.n	8004c42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c34:	4b8e      	ldr	r3, [pc, #568]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c40:	d00c      	beq.n	8004c5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c42:	4b8b      	ldr	r3, [pc, #556]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d112      	bne.n	8004c74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4e:	4b88      	ldr	r3, [pc, #544]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c5a:	d10b      	bne.n	8004c74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5c:	4b84      	ldr	r3, [pc, #528]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d05b      	beq.n	8004d20 <HAL_RCC_OscConfig+0x124>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d157      	bne.n	8004d20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e25a      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7c:	d106      	bne.n	8004c8c <HAL_RCC_OscConfig+0x90>
 8004c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7b      	ldr	r2, [pc, #492]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e01d      	b.n	8004cc8 <HAL_RCC_OscConfig+0xcc>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xb4>
 8004c96:	4b76      	ldr	r3, [pc, #472]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a75      	ldr	r2, [pc, #468]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b73      	ldr	r3, [pc, #460]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a72      	ldr	r2, [pc, #456]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCC_OscConfig+0xcc>
 8004cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6b      	ldr	r2, [pc, #428]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fd12 	bl	80036f8 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fd0e 	bl	80036f8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	@ 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e21f      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xdc>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fe fcfe 	bl	80036f8 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d00:	f7fe fcfa 	bl	80036f8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	@ 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e20b      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	4b57      	ldr	r3, [pc, #348]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x104>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d06f      	beq.n	8004e0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d2e:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d105      	bne.n	8004d52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d46:	4b4a      	ldr	r3, [pc, #296]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d52:	4b47      	ldr	r3, [pc, #284]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d5a:	2b0c      	cmp	r3, #12
 8004d5c:	d11c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b44      	ldr	r3, [pc, #272]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d116      	bne.n	8004d98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6a:	4b41      	ldr	r3, [pc, #260]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_RCC_OscConfig+0x186>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d001      	beq.n	8004d82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e1d3      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d82:	4b3b      	ldr	r3, [pc, #236]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4937      	ldr	r1, [pc, #220]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	e03a      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da0:	4b34      	ldr	r3, [pc, #208]	@ (8004e74 <HAL_RCC_OscConfig+0x278>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da6:	f7fe fca7 	bl	80036f8 <HAL_GetTick>
 8004daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dae:	f7fe fca3 	bl	80036f8 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e1b4      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dcc:	4b28      	ldr	r3, [pc, #160]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4925      	ldr	r1, [pc, #148]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]
 8004de0:	e015      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <HAL_RCC_OscConfig+0x278>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fc86 	bl	80036f8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe fc82 	bl	80036f8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e193      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d036      	beq.n	8004e88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fe fc66 	bl	80036f8 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e30:	f7fe fc62 	bl	80036f8 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e173      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	4b0b      	ldr	r3, [pc, #44]	@ (8004e70 <HAL_RCC_OscConfig+0x274>)
 8004e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0x234>
 8004e4e:	e01b      	b.n	8004e88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_OscConfig+0x27c>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fe fc4f 	bl	80036f8 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5c:	e00e      	b.n	8004e7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fe fc4b 	bl	80036f8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d907      	bls.n	8004e7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e15c      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
 8004e70:	40023800 	.word	0x40023800
 8004e74:	42470000 	.word	0x42470000
 8004e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e7c:	4b8a      	ldr	r3, [pc, #552]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1ea      	bne.n	8004e5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8097 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b83      	ldr	r3, [pc, #524]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10f      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60bb      	str	r3, [r7, #8]
 8004eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	4a7e      	ldr	r2, [pc, #504]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b79      	ldr	r3, [pc, #484]	@ (80050ac <HAL_RCC_OscConfig+0x4b0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d118      	bne.n	8004f04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ed2:	4b76      	ldr	r3, [pc, #472]	@ (80050ac <HAL_RCC_OscConfig+0x4b0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a75      	ldr	r2, [pc, #468]	@ (80050ac <HAL_RCC_OscConfig+0x4b0>)
 8004ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ede:	f7fe fc0b 	bl	80036f8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fe fc07 	bl	80036f8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e118      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80050ac <HAL_RCC_OscConfig+0x4b0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x31e>
 8004f0c:	4b66      	ldr	r3, [pc, #408]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f10:	4a65      	ldr	r2, [pc, #404]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	f043 0301 	orr.w	r3, r3, #1
 8004f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f18:	e01c      	b.n	8004f54 <HAL_RCC_OscConfig+0x358>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b05      	cmp	r3, #5
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x340>
 8004f22:	4b61      	ldr	r3, [pc, #388]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f26:	4a60      	ldr	r2, [pc, #384]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	4a5d      	ldr	r2, [pc, #372]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0x358>
 8004f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f40:	4a59      	ldr	r2, [pc, #356]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f48:	4b57      	ldr	r3, [pc, #348]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a56      	ldr	r2, [pc, #344]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f4e:	f023 0304 	bic.w	r3, r3, #4
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d015      	beq.n	8004f88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fe fbcc 	bl	80036f8 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f62:	e00a      	b.n	8004f7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f64:	f7fe fbc8 	bl	80036f8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e0d7      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0ee      	beq.n	8004f64 <HAL_RCC_OscConfig+0x368>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fe fbb6 	bl	80036f8 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fe fbb2 	bl	80036f8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0c1      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa6:	4b40      	ldr	r3, [pc, #256]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ee      	bne.n	8004f90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80ad 	beq.w	8005128 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fce:	4b36      	ldr	r3, [pc, #216]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d060      	beq.n	800509c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d145      	bne.n	800506e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe2:	4b33      	ldr	r3, [pc, #204]	@ (80050b0 <HAL_RCC_OscConfig+0x4b4>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe8:	f7fe fb86 	bl	80036f8 <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff0:	f7fe fb82 	bl	80036f8 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e093      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	4b29      	ldr	r3, [pc, #164]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	019b      	lsls	r3, r3, #6
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	3b01      	subs	r3, #1
 8005028:	041b      	lsls	r3, r3, #16
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	491b      	ldr	r1, [pc, #108]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	4313      	orrs	r3, r2
 800503e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005040:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <HAL_RCC_OscConfig+0x4b4>)
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fe fb57 	bl	80036f8 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504c:	e008      	b.n	8005060 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504e:	f7fe fb53 	bl	80036f8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e064      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005060:	4b11      	ldr	r3, [pc, #68]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <HAL_RCC_OscConfig+0x452>
 800506c:	e05c      	b.n	8005128 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506e:	4b10      	ldr	r3, [pc, #64]	@ (80050b0 <HAL_RCC_OscConfig+0x4b4>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fe fb40 	bl	80036f8 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507c:	f7fe fb3c 	bl	80036f8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e04d      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <HAL_RCC_OscConfig+0x4ac>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f0      	bne.n	800507c <HAL_RCC_OscConfig+0x480>
 800509a:	e045      	b.n	8005128 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e040      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40007000 	.word	0x40007000
 80050b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005134 <HAL_RCC_OscConfig+0x538>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d030      	beq.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d129      	bne.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d122      	bne.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d119      	bne.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	3b01      	subs	r3, #1
 80050fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005100:	429a      	cmp	r2, r3
 8005102:	d10f      	bne.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d107      	bne.n	8005124 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d001      	beq.n	8005128 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023800 	.word	0x40023800

08005138 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e041      	b.n	80051ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f839 	bl	80051d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	4610      	mov	r0, r2
 8005178:	f000 fb9a 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d001      	beq.n	8005204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e04e      	b.n	80052a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a23      	ldr	r2, [pc, #140]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522e:	d01d      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1e      	ldr	r2, [pc, #120]	@ (80052b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <HAL_TIM_Base_Start_IT+0xd0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1b      	ldr	r2, [pc, #108]	@ (80052c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x80>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a18      	ldr	r2, [pc, #96]	@ (80052c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2b06      	cmp	r3, #6
 800527c:	d010      	beq.n	80052a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0201 	orr.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	e007      	b.n	80052a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0201 	orr.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40000800 	.word	0x40000800
 80052bc:	40000c00 	.word	0x40000c00
 80052c0:	40010400 	.word	0x40010400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e041      	b.n	8005362 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fd fb5a 	bl	80029ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f000 fad0 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d109      	bne.n	8005390 <HAL_TIM_PWM_Start+0x24>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e022      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d109      	bne.n	80053aa <HAL_TIM_PWM_Start+0x3e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	e015      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x58>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e008      	b.n	80053d6 <HAL_TIM_PWM_Start+0x6a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07c      	b.n	80054d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_TIM_PWM_Start+0x82>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ec:	e013      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d104      	bne.n	80053fe <HAL_TIM_PWM_Start+0x92>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fc:	e00b      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0xa2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800540c:	e003      	b.n	8005416 <HAL_TIM_PWM_Start+0xaa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2201      	movs	r2, #1
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fca2 	bl	8005d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2d      	ldr	r2, [pc, #180]	@ (80054e0 <HAL_TIM_PWM_Start+0x174>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_TIM_PWM_Start+0xcc>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2c      	ldr	r2, [pc, #176]	@ (80054e4 <HAL_TIM_PWM_Start+0x178>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_TIM_PWM_Start+0xd0>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_TIM_PWM_Start+0xd2>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a22      	ldr	r2, [pc, #136]	@ (80054e0 <HAL_TIM_PWM_Start+0x174>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d022      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005464:	d01d      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1f      	ldr	r2, [pc, #124]	@ (80054e8 <HAL_TIM_PWM_Start+0x17c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d018      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_TIM_PWM_Start+0x180>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a1c      	ldr	r2, [pc, #112]	@ (80054f0 <HAL_TIM_PWM_Start+0x184>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00e      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <HAL_TIM_PWM_Start+0x178>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a18      	ldr	r2, [pc, #96]	@ (80054f4 <HAL_TIM_PWM_Start+0x188>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d004      	beq.n	80054a2 <HAL_TIM_PWM_Start+0x136>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a16      	ldr	r2, [pc, #88]	@ (80054f8 <HAL_TIM_PWM_Start+0x18c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d111      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d010      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0201 	orr.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c4:	e007      	b.n	80054d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40010400 	.word	0x40010400
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40001800 	.word	0x40001800

080054fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0202 	mvn.w	r2, #2
 8005530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f994 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f986 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f997 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0204 	mvn.w	r2, #4
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f96e 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f960 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f971 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0208 	mvn.w	r2, #8
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f948 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f93a 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f94b 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0310 	and.w	r3, r3, #16
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d020      	beq.n	8005644 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d01b      	beq.n	8005644 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0210 	mvn.w	r2, #16
 8005614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2208      	movs	r2, #8
 800561a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f922 	bl	8005874 <HAL_TIM_IC_CaptureCallback>
 8005630:	e005      	b.n	800563e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f914 	bl	8005860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f925 	bl	8005888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00c      	beq.n	8005668 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f06f 0201 	mvn.w	r2, #1
 8005660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc fd40 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fc1a 	bl	8005ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00c      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d007      	beq.n	80056b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f8f6 	bl	800589c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00c      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0220 	mvn.w	r2, #32
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fbec 	bl	8005eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ae      	b.n	8005858 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	f200 809f 	bhi.w	8005848 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800570a:	a201      	add	r2, pc, #4	@ (adr r2, 8005710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005745 	.word	0x08005745
 8005714:	08005849 	.word	0x08005849
 8005718:	08005849 	.word	0x08005849
 800571c:	08005849 	.word	0x08005849
 8005720:	08005785 	.word	0x08005785
 8005724:	08005849 	.word	0x08005849
 8005728:	08005849 	.word	0x08005849
 800572c:	08005849 	.word	0x08005849
 8005730:	080057c7 	.word	0x080057c7
 8005734:	08005849 	.word	0x08005849
 8005738:	08005849 	.word	0x08005849
 800573c:	08005849 	.word	0x08005849
 8005740:	08005807 	.word	0x08005807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f95c 	bl	8005a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	619a      	str	r2, [r3, #24]
      break;
 8005782:	e064      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68b9      	ldr	r1, [r7, #8]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 f9ac 	bl	8005ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800579e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699a      	ldr	r2, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6999      	ldr	r1, [r3, #24]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	021a      	lsls	r2, r3, #8
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	619a      	str	r2, [r3, #24]
      break;
 80057c4:	e043      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fa01 	bl	8005bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f042 0208 	orr.w	r2, r2, #8
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0204 	bic.w	r2, r2, #4
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691a      	ldr	r2, [r3, #16]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	61da      	str	r2, [r3, #28]
      break;
 8005804:	e023      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fa55 	bl	8005cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	61da      	str	r2, [r3, #28]
      break;
 8005846:	e002      	b.n	800584e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
      break;
 800584c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a46      	ldr	r2, [pc, #280]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d013      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ce:	d00f      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a43      	ldr	r2, [pc, #268]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00b      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a42      	ldr	r2, [pc, #264]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d007      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a41      	ldr	r2, [pc, #260]	@ (80059e8 <TIM_Base_SetConfig+0x138>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d003      	beq.n	80058f0 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a40      	ldr	r2, [pc, #256]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d108      	bne.n	8005902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a35      	ldr	r2, [pc, #212]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005910:	d027      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a32      	ldr	r2, [pc, #200]	@ (80059e0 <TIM_Base_SetConfig+0x130>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d023      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a31      	ldr	r2, [pc, #196]	@ (80059e4 <TIM_Base_SetConfig+0x134>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01f      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a30      	ldr	r2, [pc, #192]	@ (80059e8 <TIM_Base_SetConfig+0x138>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2f      	ldr	r2, [pc, #188]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d017      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a2e      	ldr	r2, [pc, #184]	@ (80059f0 <TIM_Base_SetConfig+0x140>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a2d      	ldr	r2, [pc, #180]	@ (80059f4 <TIM_Base_SetConfig+0x144>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2c      	ldr	r2, [pc, #176]	@ (80059f8 <TIM_Base_SetConfig+0x148>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2b      	ldr	r2, [pc, #172]	@ (80059fc <TIM_Base_SetConfig+0x14c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2a      	ldr	r2, [pc, #168]	@ (8005a00 <TIM_Base_SetConfig+0x150>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a29      	ldr	r2, [pc, #164]	@ (8005a04 <TIM_Base_SetConfig+0x154>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d108      	bne.n	8005974 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	@ (80059dc <TIM_Base_SetConfig+0x12c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d003      	beq.n	80059a8 <TIM_Base_SetConfig+0xf8>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a12      	ldr	r2, [pc, #72]	@ (80059ec <TIM_Base_SetConfig+0x13c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d103      	bne.n	80059b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d105      	bne.n	80059ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f023 0201 	bic.w	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	611a      	str	r2, [r3, #16]
  }
}
 80059ce:	bf00      	nop
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40014000 	.word	0x40014000
 80059f4:	40014400 	.word	0x40014400
 80059f8:	40014800 	.word	0x40014800
 80059fc:	40001800 	.word	0x40001800
 8005a00:	40001c00 	.word	0x40001c00
 8005a04:	40002000 	.word	0x40002000

08005a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f023 0201 	bic.w	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f023 0302 	bic.w	r3, r3, #2
 8005a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a20      	ldr	r2, [pc, #128]	@ (8005ae0 <TIM_OC1_SetConfig+0xd8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d003      	beq.n	8005a6c <TIM_OC1_SetConfig+0x64>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <TIM_OC1_SetConfig+0xdc>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d10c      	bne.n	8005a86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0308 	bic.w	r3, r3, #8
 8005a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <TIM_OC1_SetConfig+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d003      	beq.n	8005a96 <TIM_OC1_SetConfig+0x8e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a14      	ldr	r2, [pc, #80]	@ (8005ae4 <TIM_OC1_SetConfig+0xdc>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d111      	bne.n	8005aba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	621a      	str	r2, [r3, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40010400 	.word	0x40010400

08005ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f023 0210 	bic.w	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0320 	bic.w	r3, r3, #32
 8005b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a22      	ldr	r2, [pc, #136]	@ (8005bcc <TIM_OC2_SetConfig+0xe4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_OC2_SetConfig+0x68>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a21      	ldr	r2, [pc, #132]	@ (8005bd0 <TIM_OC2_SetConfig+0xe8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d10d      	bne.n	8005b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <TIM_OC2_SetConfig+0xe4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d003      	beq.n	8005b7c <TIM_OC2_SetConfig+0x94>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <TIM_OC2_SetConfig+0xe8>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d113      	bne.n	8005ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a21      	ldr	r2, [pc, #132]	@ (8005cb4 <TIM_OC3_SetConfig+0xe0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_OC3_SetConfig+0x66>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a20      	ldr	r2, [pc, #128]	@ (8005cb8 <TIM_OC3_SetConfig+0xe4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10d      	bne.n	8005c56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a16      	ldr	r2, [pc, #88]	@ (8005cb4 <TIM_OC3_SetConfig+0xe0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC3_SetConfig+0x92>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <TIM_OC3_SetConfig+0xe4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d113      	bne.n	8005c8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	621a      	str	r2, [r3, #32]
}
 8005ca8:	bf00      	nop
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40010000 	.word	0x40010000
 8005cb8:	40010400 	.word	0x40010400

08005cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	031b      	lsls	r3, r3, #12
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a12      	ldr	r2, [pc, #72]	@ (8005d60 <TIM_OC4_SetConfig+0xa4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_OC4_SetConfig+0x68>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <TIM_OC4_SetConfig+0xa8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d109      	bne.n	8005d38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400

08005d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	431a      	orrs	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e05a      	b.n	8005e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d022      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e18:	d01d      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d018      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1a      	ldr	r2, [pc, #104]	@ (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00e      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a17      	ldr	r2, [pc, #92]	@ (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10c      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40010400 	.word	0x40010400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40001800 	.word	0x40001800

08005eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e042      	b.n	8005f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fd f89a 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	@ 0x24
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 f901 	bl	8007120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d175      	bne.n	8006080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit+0x2c>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e06e      	b.n	8006082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2221      	movs	r2, #33	@ 0x21
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb2:	f7fd fba1 	bl	80036f8 <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe8:	e02e      	b.n	8006048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fda0 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e03a      	b.n	8006082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3302      	adds	r3, #2
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e007      	b.n	800603a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1cb      	bne.n	8005fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	2140      	movs	r1, #64	@ 0x40
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 fd6c 	bl	8006b3a <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e006      	b.n	8006082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	4613      	mov	r3, r2
 8006096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d112      	bne.n	80060ca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Receive_IT+0x26>
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e00b      	b.n	80060cc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060ba:	88fb      	ldrh	r3, [r7, #6]
 80060bc:	461a      	mov	r2, r3
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fd93 	bl	8006bec <UART_Start_Receive_IT>
 80060c6:	4603      	mov	r3, r0
 80060c8:	e000      	b.n	80060cc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
  }
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	@ 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d156      	bne.n	800619c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <HAL_UART_Transmit_DMA+0x26>
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e04f      	b.n	800619e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2221      	movs	r2, #33	@ 0x21
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	4a21      	ldr	r2, [pc, #132]	@ (80061a8 <HAL_UART_Transmit_DMA+0xd4>)
 8006124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612a:	4a20      	ldr	r2, [pc, #128]	@ (80061ac <HAL_UART_Transmit_DMA+0xd8>)
 800612c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006132:	4a1f      	ldr	r2, [pc, #124]	@ (80061b0 <HAL_UART_Transmit_DMA+0xdc>)
 8006134:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613a:	2200      	movs	r2, #0
 800613c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614a:	6819      	ldr	r1, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3304      	adds	r3, #4
 8006152:	461a      	mov	r2, r3
 8006154:	88fb      	ldrh	r3, [r7, #6]
 8006156:	f7fd fc6b 	bl	8003a30 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006162:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	617b      	str	r3, [r7, #20]
   return(result);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006184:	627a      	str	r2, [r7, #36]	@ 0x24
 8006186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6a39      	ldr	r1, [r7, #32]
 800618a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	61fb      	str	r3, [r7, #28]
   return(result);
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e5      	bne.n	8006164 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e000      	b.n	800619e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3730      	adds	r7, #48	@ 0x30
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	08006889 	.word	0x08006889
 80061ac:	08006923 	.word	0x08006923
 80061b0:	08006aa7 	.word	0x08006aa7

080061b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d112      	bne.n	80061f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_Receive_DMA+0x26>
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e00b      	b.n	80061f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061e4:	88fb      	ldrh	r3, [r7, #6]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fd38 	bl	8006c60 <UART_Start_Receive_DMA>
 80061f0:	4603      	mov	r3, r0
 80061f2:	e000      	b.n	80061f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061f4:	2302      	movs	r3, #2
  }
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b090      	sub	sp, #64	@ 0x40
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006206:	2300      	movs	r3, #0
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006214:	2b80      	cmp	r3, #128	@ 0x80
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b21      	cmp	r3, #33	@ 0x21
 800622a:	d128      	bne.n	800627e <HAL_UART_DMAStop+0x80>
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d025      	beq.n	800627e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	623b      	str	r3, [r7, #32]
   return(result);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006248:	63bb      	str	r3, [r7, #56]	@ 0x38
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006252:	633a      	str	r2, [r7, #48]	@ 0x30
 8006254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e5      	bne.n	8006232 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	4618      	mov	r0, r3
 8006274:	f7fd fc34 	bl	8003ae0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fd8b 	bl	8006d94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b22      	cmp	r3, #34	@ 0x22
 800629e:	d128      	bne.n	80062f2 <HAL_UART_DMAStop+0xf4>
 80062a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d025      	beq.n	80062f2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3314      	adds	r3, #20
 80062c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062c6:	61fa      	str	r2, [r7, #28]
 80062c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ca:	69b9      	ldr	r1, [r7, #24]
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	e841 2300 	strex	r3, r2, [r1]
 80062d2:	617b      	str	r3, [r7, #20]
   return(result);
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e5      	bne.n	80062a6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd fbfa 	bl	8003ae0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fd79 	bl	8006de4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3740      	adds	r7, #64	@ 0x40
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b0ba      	sub	sp, #232	@ 0xe8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800633a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <HAL_UART_IRQHandler+0x66>
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fe21 	bl	8006fa2 <UART_Receive_IT>
      return;
 8006360:	e25b      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80de 	beq.w	8006528 <HAL_UART_IRQHandler+0x22c>
 800636c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80d1 	beq.w	8006528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00b      	beq.n	80063aa <HAL_UART_IRQHandler+0xae>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a2:	f043 0201 	orr.w	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_UART_IRQHandler+0xd2>
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f043 0202 	orr.w	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <HAL_UART_IRQHandler+0xf6>
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f043 0204 	orr.w	r2, r3, #4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d011      	beq.n	8006422 <HAL_UART_IRQHandler+0x126>
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800640a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f043 0208 	orr.w	r2, r3, #8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 81f2 	beq.w	8006810 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_UART_IRQHandler+0x14e>
 8006438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fdac 	bl	8006fa2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b40      	cmp	r3, #64	@ 0x40
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006466:	f003 0308 	and.w	r3, r3, #8
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <HAL_UART_IRQHandler+0x17a>
 800646e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d04f      	beq.n	8006516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fcb4 	bl	8006de4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d141      	bne.n	800650e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3314      	adds	r3, #20
 8006490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80064c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1d9      	bne.n	800648a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d013      	beq.n	8006506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e2:	4a7e      	ldr	r2, [pc, #504]	@ (80066dc <HAL_UART_IRQHandler+0x3e0>)
 80064e4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fd fb68 	bl	8003bc0 <HAL_DMA_Abort_IT>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d016      	beq.n	8006524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	e00e      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9a8 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800650c:	e00a      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9a4 	bl	800685c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	e006      	b.n	8006524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f9a0 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006522:	e175      	b.n	8006810 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	bf00      	nop
    return;
 8006526:	e173      	b.n	8006810 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	2b01      	cmp	r3, #1
 800652e:	f040 814f 	bne.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8148 	beq.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8141 	beq.w	80067d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800654e:	2300      	movs	r3, #0
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656e:	2b40      	cmp	r3, #64	@ 0x40
 8006570:	f040 80b6 	bne.w	80066e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 8145 	beq.w	8006814 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800658e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006592:	429a      	cmp	r2, r3
 8006594:	f080 813e 	bcs.w	8006814 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800659e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065aa:	f000 8088 	beq.w	80066be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	330c      	adds	r3, #12
 80065b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	330c      	adds	r3, #12
 80065d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80065da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1d9      	bne.n	80065ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3314      	adds	r3, #20
 8006600:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800660a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3314      	adds	r3, #20
 800661a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800661e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006622:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006624:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006626:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e1      	bne.n	80065fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800665a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800665c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006660:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e3      	bne.n	8006636 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800668c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800668e:	f023 0310 	bic.w	r3, r3, #16
 8006692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e3      	bne.n	800667c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fd fa11 	bl	8003ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f8cb 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066da:	e09b      	b.n	8006814 <HAL_UART_IRQHandler+0x518>
 80066dc:	08006eab 	.word	0x08006eab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 808e 	beq.w	8006818 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8089 	beq.w	8006818 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800671c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	330c      	adds	r3, #12
 8006726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800672a:	647a      	str	r2, [r7, #68]	@ 0x44
 800672c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e3      	bne.n	8006706 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	e853 3f00 	ldrex	r3, [r3]
 800674c:	623b      	str	r3, [r7, #32]
   return(result);
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f023 0301 	bic.w	r3, r3, #1
 8006754:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3314      	adds	r3, #20
 800675e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006762:	633a      	str	r2, [r7, #48]	@ 0x30
 8006764:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e3      	bne.n	800673e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	e853 3f00 	ldrex	r3, [r3]
 8006792:	60fb      	str	r3, [r7, #12]
   return(result);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0310 	bic.w	r3, r3, #16
 800679a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067a8:	61fa      	str	r2, [r7, #28]
 80067aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	69b9      	ldr	r1, [r7, #24]
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	617b      	str	r3, [r7, #20]
   return(result);
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e3      	bne.n	8006784 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f851 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067ce:	e023      	b.n	8006818 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_UART_IRQHandler+0x4f4>
 80067dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 fb72 	bl	8006ed2 <UART_Transmit_IT>
    return;
 80067ee:	e014      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00e      	beq.n	800681a <HAL_UART_IRQHandler+0x51e>
 80067fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fbb2 	bl	8006f72 <UART_EndTransmit_IT>
    return;
 800680e:	e004      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
    return;
 8006810:	bf00      	nop
 8006812:	e002      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
      return;
 8006814:	bf00      	nop
 8006816:	e000      	b.n	800681a <HAL_UART_IRQHandler+0x51e>
      return;
 8006818:	bf00      	nop
  }
}
 800681a:	37e8      	adds	r7, #232	@ 0xe8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b090      	sub	sp, #64	@ 0x40
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d137      	bne.n	8006914 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80068a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a6:	2200      	movs	r2, #0
 80068a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3314      	adds	r3, #20
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3314      	adds	r3, #20
 80068c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068fe:	61fa      	str	r2, [r7, #28]
 8006900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	69b9      	ldr	r1, [r7, #24]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	617b      	str	r3, [r7, #20]
   return(result);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006912:	e002      	b.n	800691a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006914:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006916:	f7ff ff83 	bl	8006820 <HAL_UART_TxCpltCallback>
}
 800691a:	bf00      	nop
 800691c:	3740      	adds	r7, #64	@ 0x40
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b084      	sub	sp, #16
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff7f 	bl	8006834 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b09c      	sub	sp, #112	@ 0x70
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d172      	bne.n	8006a40 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800695a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800695c:	2200      	movs	r2, #0
 800695e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800696a:	e853 3f00 	ldrex	r3, [r3]
 800696e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006976:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006980:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006982:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006984:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006986:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006988:	e841 2300 	strex	r3, r2, [r1]
 800698c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800698e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1e5      	bne.n	8006960 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	e853 3f00 	ldrex	r3, [r3]
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80069ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80069b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e5      	bne.n	8006994 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	623b      	str	r3, [r7, #32]
   return(result);
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069de:	663b      	str	r3, [r7, #96]	@ 0x60
 80069e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3314      	adds	r3, #20
 80069e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e5      	bne.n	80069c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d119      	bne.n	8006a40 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a2c:	61fa      	str	r2, [r7, #28]
 8006a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	69b9      	ldr	r1, [r7, #24]
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a42:	2200      	movs	r2, #0
 8006a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d106      	bne.n	8006a5c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a52:	4619      	mov	r1, r3
 8006a54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a56:	f7ff ff0b 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a5a:	e002      	b.n	8006a62 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a5e:	f7fc fd71 	bl	8003544 <HAL_UART_RxCpltCallback>
}
 8006a62:	bf00      	nop
 8006a64:	3770      	adds	r7, #112	@ 0x70
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d108      	bne.n	8006a98 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	4619      	mov	r1, r3
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff feed 	bl	8006870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a96:	e002      	b.n	8006a9e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fed5 	bl	8006848 <HAL_UART_RxHalfCpltCallback>
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac2:	2b80      	cmp	r3, #128	@ 0x80
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b21      	cmp	r3, #33	@ 0x21
 8006ad8:	d108      	bne.n	8006aec <UART_DMAError+0x46>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	f000 f954 	bl	8006d94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695b      	ldr	r3, [r3, #20]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	bf0c      	ite	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	2300      	movne	r3, #0
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b22      	cmp	r3, #34	@ 0x22
 8006b0c:	d108      	bne.n	8006b20 <UART_DMAError+0x7a>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2200      	movs	r2, #0
 8006b18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f000 f962 	bl	8006de4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	f043 0210 	orr.w	r2, r3, #16
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2c:	68b8      	ldr	r0, [r7, #8]
 8006b2e:	f7ff fe95 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b086      	sub	sp, #24
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	4613      	mov	r3, r2
 8006b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b4a:	e03b      	b.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b52:	d037      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b54:	f7fc fdd0 	bl	80036f8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d302      	bcc.n	8006b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e03a      	b.n	8006be4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d023      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b80      	cmp	r3, #128	@ 0x80
 8006b80:	d020      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b40      	cmp	r3, #64	@ 0x40
 8006b86:	d01d      	beq.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0308 	and.w	r3, r3, #8
 8006b92:	2b08      	cmp	r3, #8
 8006b94:	d116      	bne.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f919 	bl	8006de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e00f      	b.n	8006be4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	bf0c      	ite	eq
 8006bd4:	2301      	moveq	r3, #1
 8006bd6:	2300      	movne	r3, #0
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	79fb      	ldrb	r3, [r7, #7]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d0b4      	beq.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	88fa      	ldrh	r2, [r7, #6]
 8006c04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2222      	movs	r2, #34	@ 0x22
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695a      	ldr	r2, [r3, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0201 	orr.w	r2, r2, #1
 8006c40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f042 0220 	orr.w	r2, r2, #32
 8006c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3714      	adds	r7, #20
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b098      	sub	sp, #96	@ 0x60
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	88fa      	ldrh	r2, [r7, #6]
 8006c78:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2222      	movs	r2, #34	@ 0x22
 8006c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d88 <UART_Start_Receive_DMA+0x128>)
 8006c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	4a3d      	ldr	r2, [pc, #244]	@ (8006d8c <UART_Start_Receive_DMA+0x12c>)
 8006c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c9c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d90 <UART_Start_Receive_DMA+0x130>)
 8006c9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ca8:	f107 0308 	add.w	r3, r7, #8
 8006cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	f7fc feb6 	bl	8003a30 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d019      	beq.n	8006d16 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d02:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006d08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e5      	bne.n	8006ce2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3314      	adds	r3, #20
 8006d34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d36:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006d3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	617b      	str	r3, [r7, #20]
   return(result);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3314      	adds	r3, #20
 8006d68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6a39      	ldr	r1, [r7, #32]
 8006d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e5      	bne.n	8006d4a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3760      	adds	r7, #96	@ 0x60
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	0800693f 	.word	0x0800693f
 8006d8c:	08006a6b 	.word	0x08006a6b
 8006d90:	08006aa7 	.word	0x08006aa7

08006d94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b089      	sub	sp, #36	@ 0x24
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006db2:	61fb      	str	r3, [r7, #28]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	330c      	adds	r3, #12
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	61ba      	str	r2, [r7, #24]
 8006dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e5      	bne.n	8006d9c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006dd8:	bf00      	nop
 8006dda:	3724      	adds	r7, #36	@ 0x24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b095      	sub	sp, #84	@ 0x54
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d119      	bne.n	8006e90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 0310 	bic.w	r3, r3, #16
 8006e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	330c      	adds	r3, #12
 8006e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e7c:	61ba      	str	r2, [r7, #24]
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6979      	ldr	r1, [r7, #20]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	e841 2300 	strex	r3, r2, [r1]
 8006e88:	613b      	str	r3, [r7, #16]
   return(result);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1e5      	bne.n	8006e5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e9e:	bf00      	nop
 8006ea0:	3754      	adds	r7, #84	@ 0x54
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fcc9 	bl	800685c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eca:	bf00      	nop
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b21      	cmp	r3, #33	@ 0x21
 8006ee4:	d13e      	bne.n	8006f64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eee:	d114      	bne.n	8006f1a <UART_Transmit_IT+0x48>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d110      	bne.n	8006f1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	881b      	ldrh	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	621a      	str	r2, [r3, #32]
 8006f18:	e008      	b.n	8006f2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	1c59      	adds	r1, r3, #1
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6211      	str	r1, [r2, #32]
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10f      	bne.n	8006f60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e000      	b.n	8006f66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f64:	2302      	movs	r3, #2
  }
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b082      	sub	sp, #8
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7ff fc44 	bl	8006820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b08c      	sub	sp, #48	@ 0x30
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b22      	cmp	r3, #34	@ 0x22
 8006fb4:	f040 80ae 	bne.w	8007114 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc0:	d117      	bne.n	8006ff2 <UART_Receive_IT+0x50>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d113      	bne.n	8006ff2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ff0:	e026      	b.n	8007040 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007004:	d007      	beq.n	8007016 <UART_Receive_IT+0x74>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <UART_Receive_IT+0x82>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	b2da      	uxtb	r2, r3
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e008      	b.n	8007036 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007030:	b2da      	uxtb	r2, r3
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29b      	uxth	r3, r3
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	4619      	mov	r1, r3
 800704e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007050:	2b00      	cmp	r3, #0
 8007052:	d15d      	bne.n	8007110 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68da      	ldr	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0220 	bic.w	r2, r2, #32
 8007062:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695a      	ldr	r2, [r3, #20]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0201 	bic.w	r2, r2, #1
 8007082:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007096:	2b01      	cmp	r3, #1
 8007098:	d135      	bne.n	8007106 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	330c      	adds	r3, #12
 80070a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	613b      	str	r3, [r7, #16]
   return(result);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f023 0310 	bic.w	r3, r3, #16
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070c0:	623a      	str	r2, [r7, #32]
 80070c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	69f9      	ldr	r1, [r7, #28]
 80070c6:	6a3a      	ldr	r2, [r7, #32]
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d10a      	bne.n	80070f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	60fb      	str	r3, [r7, #12]
 80070f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fbb6 	bl	8006870 <HAL_UARTEx_RxEventCallback>
 8007104:	e002      	b.n	800710c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fc fa1c 	bl	8003544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e002      	b.n	8007116 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e000      	b.n	8007116 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007114:	2302      	movs	r3, #2
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	3730      	adds	r7, #48	@ 0x30
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
	...

08007120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007124:	b0c0      	sub	sp, #256	@ 0x100
 8007126:	af00      	add	r7, sp, #0
 8007128:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713c:	68d9      	ldr	r1, [r3, #12]
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	ea40 0301 	orr.w	r3, r0, r1
 8007148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	431a      	orrs	r2, r3
 8007158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	431a      	orrs	r2, r3
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007178:	f021 010c 	bic.w	r1, r1, #12
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007186:	430b      	orrs	r3, r1
 8007188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800718a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719a:	6999      	ldr	r1, [r3, #24]
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	ea40 0301 	orr.w	r3, r0, r1
 80071a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b8f      	ldr	r3, [pc, #572]	@ (80073ec <UART_SetConfig+0x2cc>)
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d005      	beq.n	80071c0 <UART_SetConfig+0xa0>
 80071b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b8d      	ldr	r3, [pc, #564]	@ (80073f0 <UART_SetConfig+0x2d0>)
 80071bc:	429a      	cmp	r2, r3
 80071be:	d104      	bne.n	80071ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c0:	f7fd faa6 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 80071c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071c8:	e003      	b.n	80071d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7fd fa8d 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 80071ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071dc:	f040 810c 	bne.w	80073f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071f2:	4622      	mov	r2, r4
 80071f4:	462b      	mov	r3, r5
 80071f6:	1891      	adds	r1, r2, r2
 80071f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071fa:	415b      	adcs	r3, r3
 80071fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007202:	4621      	mov	r1, r4
 8007204:	eb12 0801 	adds.w	r8, r2, r1
 8007208:	4629      	mov	r1, r5
 800720a:	eb43 0901 	adc.w	r9, r3, r1
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800721a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800721e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007222:	4690      	mov	r8, r2
 8007224:	4699      	mov	r9, r3
 8007226:	4623      	mov	r3, r4
 8007228:	eb18 0303 	adds.w	r3, r8, r3
 800722c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007230:	462b      	mov	r3, r5
 8007232:	eb49 0303 	adc.w	r3, r9, r3
 8007236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007246:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800724a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800724e:	460b      	mov	r3, r1
 8007250:	18db      	adds	r3, r3, r3
 8007252:	653b      	str	r3, [r7, #80]	@ 0x50
 8007254:	4613      	mov	r3, r2
 8007256:	eb42 0303 	adc.w	r3, r2, r3
 800725a:	657b      	str	r3, [r7, #84]	@ 0x54
 800725c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007264:	f7f9 fd20 	bl	8000ca8 <__aeabi_uldivmod>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4b61      	ldr	r3, [pc, #388]	@ (80073f4 <UART_SetConfig+0x2d4>)
 800726e:	fba3 2302 	umull	r2, r3, r3, r2
 8007272:	095b      	lsrs	r3, r3, #5
 8007274:	011c      	lsls	r4, r3, #4
 8007276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800727a:	2200      	movs	r2, #0
 800727c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007280:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007288:	4642      	mov	r2, r8
 800728a:	464b      	mov	r3, r9
 800728c:	1891      	adds	r1, r2, r2
 800728e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007290:	415b      	adcs	r3, r3
 8007292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007298:	4641      	mov	r1, r8
 800729a:	eb12 0a01 	adds.w	sl, r2, r1
 800729e:	4649      	mov	r1, r9
 80072a0:	eb43 0b01 	adc.w	fp, r3, r1
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	f04f 0300 	mov.w	r3, #0
 80072ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072b8:	4692      	mov	sl, r2
 80072ba:	469b      	mov	fp, r3
 80072bc:	4643      	mov	r3, r8
 80072be:	eb1a 0303 	adds.w	r3, sl, r3
 80072c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072c6:	464b      	mov	r3, r9
 80072c8:	eb4b 0303 	adc.w	r3, fp, r3
 80072cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072e4:	460b      	mov	r3, r1
 80072e6:	18db      	adds	r3, r3, r3
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ea:	4613      	mov	r3, r2
 80072ec:	eb42 0303 	adc.w	r3, r2, r3
 80072f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072fa:	f7f9 fcd5 	bl	8000ca8 <__aeabi_uldivmod>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4611      	mov	r1, r2
 8007304:	4b3b      	ldr	r3, [pc, #236]	@ (80073f4 <UART_SetConfig+0x2d4>)
 8007306:	fba3 2301 	umull	r2, r3, r3, r1
 800730a:	095b      	lsrs	r3, r3, #5
 800730c:	2264      	movs	r2, #100	@ 0x64
 800730e:	fb02 f303 	mul.w	r3, r2, r3
 8007312:	1acb      	subs	r3, r1, r3
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800731a:	4b36      	ldr	r3, [pc, #216]	@ (80073f4 <UART_SetConfig+0x2d4>)
 800731c:	fba3 2302 	umull	r2, r3, r3, r2
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	005b      	lsls	r3, r3, #1
 8007324:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007328:	441c      	add	r4, r3
 800732a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800732e:	2200      	movs	r2, #0
 8007330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007334:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800733c:	4642      	mov	r2, r8
 800733e:	464b      	mov	r3, r9
 8007340:	1891      	adds	r1, r2, r2
 8007342:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007344:	415b      	adcs	r3, r3
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800734c:	4641      	mov	r1, r8
 800734e:	1851      	adds	r1, r2, r1
 8007350:	6339      	str	r1, [r7, #48]	@ 0x30
 8007352:	4649      	mov	r1, r9
 8007354:	414b      	adcs	r3, r1
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007364:	4659      	mov	r1, fp
 8007366:	00cb      	lsls	r3, r1, #3
 8007368:	4651      	mov	r1, sl
 800736a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800736e:	4651      	mov	r1, sl
 8007370:	00ca      	lsls	r2, r1, #3
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	4603      	mov	r3, r0
 8007378:	4642      	mov	r2, r8
 800737a:	189b      	adds	r3, r3, r2
 800737c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007380:	464b      	mov	r3, r9
 8007382:	460a      	mov	r2, r1
 8007384:	eb42 0303 	adc.w	r3, r2, r3
 8007388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007398:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800739c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073a0:	460b      	mov	r3, r1
 80073a2:	18db      	adds	r3, r3, r3
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073a6:	4613      	mov	r3, r2
 80073a8:	eb42 0303 	adc.w	r3, r2, r3
 80073ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073b6:	f7f9 fc77 	bl	8000ca8 <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4b0d      	ldr	r3, [pc, #52]	@ (80073f4 <UART_SetConfig+0x2d4>)
 80073c0:	fba3 1302 	umull	r1, r3, r3, r2
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	2164      	movs	r1, #100	@ 0x64
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	3332      	adds	r3, #50	@ 0x32
 80073d2:	4a08      	ldr	r2, [pc, #32]	@ (80073f4 <UART_SetConfig+0x2d4>)
 80073d4:	fba2 2303 	umull	r2, r3, r2, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	f003 0207 	and.w	r2, r3, #7
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4422      	add	r2, r4
 80073e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073e8:	e106      	b.n	80075f8 <UART_SetConfig+0x4d8>
 80073ea:	bf00      	nop
 80073ec:	40011000 	.word	0x40011000
 80073f0:	40011400 	.word	0x40011400
 80073f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007402:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800740a:	4642      	mov	r2, r8
 800740c:	464b      	mov	r3, r9
 800740e:	1891      	adds	r1, r2, r2
 8007410:	6239      	str	r1, [r7, #32]
 8007412:	415b      	adcs	r3, r3
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
 8007416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800741a:	4641      	mov	r1, r8
 800741c:	1854      	adds	r4, r2, r1
 800741e:	4649      	mov	r1, r9
 8007420:	eb43 0501 	adc.w	r5, r3, r1
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	00eb      	lsls	r3, r5, #3
 800742e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007432:	00e2      	lsls	r2, r4, #3
 8007434:	4614      	mov	r4, r2
 8007436:	461d      	mov	r5, r3
 8007438:	4643      	mov	r3, r8
 800743a:	18e3      	adds	r3, r4, r3
 800743c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007440:	464b      	mov	r3, r9
 8007442:	eb45 0303 	adc.w	r3, r5, r3
 8007446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007456:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007466:	4629      	mov	r1, r5
 8007468:	008b      	lsls	r3, r1, #2
 800746a:	4621      	mov	r1, r4
 800746c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007470:	4621      	mov	r1, r4
 8007472:	008a      	lsls	r2, r1, #2
 8007474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007478:	f7f9 fc16 	bl	8000ca8 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4b60      	ldr	r3, [pc, #384]	@ (8007604 <UART_SetConfig+0x4e4>)
 8007482:	fba3 2302 	umull	r2, r3, r3, r2
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	011c      	lsls	r4, r3, #4
 800748a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007494:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	1891      	adds	r1, r2, r2
 80074a2:	61b9      	str	r1, [r7, #24]
 80074a4:	415b      	adcs	r3, r3
 80074a6:	61fb      	str	r3, [r7, #28]
 80074a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ac:	4641      	mov	r1, r8
 80074ae:	1851      	adds	r1, r2, r1
 80074b0:	6139      	str	r1, [r7, #16]
 80074b2:	4649      	mov	r1, r9
 80074b4:	414b      	adcs	r3, r1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074c4:	4659      	mov	r1, fp
 80074c6:	00cb      	lsls	r3, r1, #3
 80074c8:	4651      	mov	r1, sl
 80074ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ce:	4651      	mov	r1, sl
 80074d0:	00ca      	lsls	r2, r1, #3
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	4603      	mov	r3, r0
 80074d8:	4642      	mov	r2, r8
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074e0:	464b      	mov	r3, r9
 80074e2:	460a      	mov	r2, r1
 80074e4:	eb42 0303 	adc.w	r3, r2, r3
 80074e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007504:	4649      	mov	r1, r9
 8007506:	008b      	lsls	r3, r1, #2
 8007508:	4641      	mov	r1, r8
 800750a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800750e:	4641      	mov	r1, r8
 8007510:	008a      	lsls	r2, r1, #2
 8007512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007516:	f7f9 fbc7 	bl	8000ca8 <__aeabi_uldivmod>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4611      	mov	r1, r2
 8007520:	4b38      	ldr	r3, [pc, #224]	@ (8007604 <UART_SetConfig+0x4e4>)
 8007522:	fba3 2301 	umull	r2, r3, r3, r1
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	2264      	movs	r2, #100	@ 0x64
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	1acb      	subs	r3, r1, r3
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	3332      	adds	r3, #50	@ 0x32
 8007534:	4a33      	ldr	r2, [pc, #204]	@ (8007604 <UART_SetConfig+0x4e4>)
 8007536:	fba2 2303 	umull	r2, r3, r2, r3
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007540:	441c      	add	r4, r3
 8007542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007546:	2200      	movs	r2, #0
 8007548:	673b      	str	r3, [r7, #112]	@ 0x70
 800754a:	677a      	str	r2, [r7, #116]	@ 0x74
 800754c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	1891      	adds	r1, r2, r2
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	415b      	adcs	r3, r3
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007560:	4641      	mov	r1, r8
 8007562:	1851      	adds	r1, r2, r1
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	4649      	mov	r1, r9
 8007568:	414b      	adcs	r3, r1
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007578:	4659      	mov	r1, fp
 800757a:	00cb      	lsls	r3, r1, #3
 800757c:	4651      	mov	r1, sl
 800757e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007582:	4651      	mov	r1, sl
 8007584:	00ca      	lsls	r2, r1, #3
 8007586:	4610      	mov	r0, r2
 8007588:	4619      	mov	r1, r3
 800758a:	4603      	mov	r3, r0
 800758c:	4642      	mov	r2, r8
 800758e:	189b      	adds	r3, r3, r2
 8007590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007592:	464b      	mov	r3, r9
 8007594:	460a      	mov	r2, r1
 8007596:	eb42 0303 	adc.w	r3, r2, r3
 800759a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075b4:	4649      	mov	r1, r9
 80075b6:	008b      	lsls	r3, r1, #2
 80075b8:	4641      	mov	r1, r8
 80075ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075be:	4641      	mov	r1, r8
 80075c0:	008a      	lsls	r2, r1, #2
 80075c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075c6:	f7f9 fb6f 	bl	8000ca8 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007604 <UART_SetConfig+0x4e4>)
 80075d0:	fba3 1302 	umull	r1, r3, r3, r2
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	2164      	movs	r1, #100	@ 0x64
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	011b      	lsls	r3, r3, #4
 80075e0:	3332      	adds	r3, #50	@ 0x32
 80075e2:	4a08      	ldr	r2, [pc, #32]	@ (8007604 <UART_SetConfig+0x4e4>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f003 020f 	and.w	r2, r3, #15
 80075ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4422      	add	r2, r4
 80075f6:	609a      	str	r2, [r3, #8]
}
 80075f8:	bf00      	nop
 80075fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075fe:	46bd      	mov	sp, r7
 8007600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007604:	51eb851f 	.word	0x51eb851f

08007608 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800761a:	2b84      	cmp	r3, #132	@ 0x84
 800761c:	d005      	beq.n	800762a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800761e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	3303      	adds	r3, #3
 8007628:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763e:	f3ef 8305 	mrs	r3, IPSR
 8007642:	607b      	str	r3, [r7, #4]
  return(result);
 8007644:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007660:	f000 fcae 	bl	8007fc0 <vTaskStartScheduler>
  
  return osOK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	bd80      	pop	{r7, pc}

0800766a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800766a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766c:	b089      	sub	sp, #36	@ 0x24
 800766e:	af04      	add	r7, sp, #16
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d020      	beq.n	80076be <osThreadCreate+0x54>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01c      	beq.n	80076be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685c      	ldr	r4, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691e      	ldr	r6, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff ffb6 	bl	8007608 <makeFreeRtosPriority>
 800769c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a6:	9202      	str	r2, [sp, #8]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	9100      	str	r1, [sp, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	4632      	mov	r2, r6
 80076b0:	4629      	mov	r1, r5
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f97a 	bl	80079ac <xTaskCreateStatic>
 80076b8:	4603      	mov	r3, r0
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	e01c      	b.n	80076f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685c      	ldr	r4, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff ff98 	bl	8007608 <makeFreeRtosPriority>
 80076d8:	4602      	mov	r2, r0
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	9200      	str	r2, [sp, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	4632      	mov	r2, r6
 80076e6:	4629      	mov	r1, r5
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 f9bf 	bl	8007a6c <xTaskCreate>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d001      	beq.n	80076f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076f8:	68fb      	ldr	r3, [r7, #12]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007702 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <osDelay+0x16>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e000      	b.n	800771a <osDelay+0x18>
 8007718:	2301      	movs	r3, #1
 800771a:	4618      	mov	r0, r3
 800771c:	f000 faf6 	bl	8007d0c <vTaskDelay>
  
  return osOK;
 8007720:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800773e:	f7ff ff7b 	bl	8007638 <inHandlerMode>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01c      	beq.n	8007782 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	f107 0208 	add.w	r2, r7, #8
 800774e:	f107 030c 	add.w	r3, r7, #12
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	2201      	movs	r2, #1
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 f88b 	bl	8008874 <xTaskGenericNotifyFromISR>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <osSignalSet+0x3e>
      return 0x80000000;
 8007764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007768:	e019      	b.n	800779e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <osSignalSet+0x70>
 8007770:	4b0d      	ldr	r3, [pc, #52]	@ (80077a8 <osSignalSet+0x7c>)
 8007772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	e00c      	b.n	800779c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	2201      	movs	r2, #1
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 ffb0 	bl	80086f0 <xTaskGenericNotify>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d002      	beq.n	800779c <osSignalSet+0x70>
    return 0x80000000;
 8007796:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800779a:	e000      	b.n	800779e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800779c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80077ac:	b590      	push	{r4, r7, lr}
 80077ae:	b089      	sub	sp, #36	@ 0x24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80077b8:	2300      	movs	r3, #0
 80077ba:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077c6:	d103      	bne.n	80077d0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e009      	b.n	80077e4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d006      	beq.n	80077e4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <osSignalWait+0x38>
      ticks = 1;
 80077e0:	2301      	movs	r3, #1
 80077e2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80077e4:	f7ff ff28 	bl	8007638 <inHandlerMode>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80077ee:	2382      	movs	r3, #130	@ 0x82
 80077f0:	613b      	str	r3, [r7, #16]
 80077f2:	e01b      	b.n	800782c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	f107 0310 	add.w	r3, r7, #16
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	2000      	movs	r0, #0
 8007800:	f000 ff16 	bl	8008630 <xTaskNotifyWait>
 8007804:	4603      	mov	r3, r0
 8007806:	2b01      	cmp	r3, #1
 8007808:	d008      	beq.n	800781c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d102      	bne.n	8007816 <osSignalWait+0x6a>
 8007810:	2300      	movs	r3, #0
 8007812:	613b      	str	r3, [r7, #16]
 8007814:	e00a      	b.n	800782c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8007816:	2340      	movs	r3, #64	@ 0x40
 8007818:	613b      	str	r3, [r7, #16]
 800781a:	e007      	b.n	800782c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da02      	bge.n	8007828 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8007822:	2386      	movs	r3, #134	@ 0x86
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	e001      	b.n	800782c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8007828:	2308      	movs	r3, #8
 800782a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	461c      	mov	r4, r3
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	3724      	adds	r7, #36	@ 0x24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f103 0208 	add.w	r2, r3, #8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800785c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f103 0208 	add.w	r2, r3, #8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f103 0208 	add.w	r2, r3, #8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	3714      	adds	r7, #20
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078e6:	b480      	push	{r7}
 80078e8:	b085      	sub	sp, #20
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078fc:	d103      	bne.n	8007906 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e00c      	b.n	8007920 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	3308      	adds	r3, #8
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e002      	b.n	8007914 <vListInsert+0x2e>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	429a      	cmp	r2, r3
 800791e:	d2f6      	bcs.n	800790e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	601a      	str	r2, [r3, #0]
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6892      	ldr	r2, [r2, #8]
 800796e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6852      	ldr	r2, [r2, #4]
 8007978:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d103      	bne.n	800798c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	1e5a      	subs	r2, r3, #1
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08e      	sub	sp, #56	@ 0x38
 80079b0:	af04      	add	r7, sp, #16
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	623b      	str	r3, [r7, #32]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	61fb      	str	r3, [r7, #28]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079f6:	23a0      	movs	r3, #160	@ 0xa0
 80079f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80079fe:	d00b      	beq.n	8007a18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	61bb      	str	r3, [r7, #24]
}
 8007a12:	bf00      	nop
 8007a14:	bf00      	nop
 8007a16:	e7fd      	b.n	8007a14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01e      	beq.n	8007a5e <xTaskCreateStatic+0xb2>
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d01b      	beq.n	8007a5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	f107 0314 	add.w	r3, r7, #20
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f851 	bl	8007af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a58:	f000 f8ee 	bl	8007c38 <prvAddNewTaskToReadyList>
 8007a5c:	e001      	b.n	8007a62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a62:	697b      	ldr	r3, [r7, #20]
	}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3728      	adds	r7, #40	@ 0x28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08c      	sub	sp, #48	@ 0x30
 8007a70:	af04      	add	r7, sp, #16
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fa93 	bl	8008fac <pvPortMalloc>
 8007a86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00e      	beq.n	8007aac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a8e:	20a0      	movs	r0, #160	@ 0xa0
 8007a90:	f001 fa8c 	bl	8008fac <pvPortMalloc>
 8007a94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007aa2:	e005      	b.n	8007ab0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007aa4:	6978      	ldr	r0, [r7, #20]
 8007aa6:	f001 fb4f 	bl	8009148 <vPortFree>
 8007aaa:	e001      	b.n	8007ab0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d017      	beq.n	8007ae6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007abe:	88fa      	ldrh	r2, [r7, #6]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9303      	str	r3, [sp, #12]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	9302      	str	r3, [sp, #8]
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f80f 	bl	8007af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ada:	69f8      	ldr	r0, [r7, #28]
 8007adc:	f000 f8ac 	bl	8007c38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	e002      	b.n	8007aec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007aec:	69bb      	ldr	r3, [r7, #24]
	}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b10:	3b01      	subs	r3, #1
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f003 0307 	and.w	r3, r3, #7
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	617b      	str	r3, [r7, #20]
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	e7fd      	b.n	8007b3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01f      	beq.n	8007b88 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
 8007b4c:	e012      	b.n	8007b74 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	7819      	ldrb	r1, [r3, #0]
 8007b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3334      	adds	r3, #52	@ 0x34
 8007b5e:	460a      	mov	r2, r1
 8007b60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	4413      	add	r3, r2
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d006      	beq.n	8007b7c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	3301      	adds	r3, #1
 8007b72:	61fb      	str	r3, [r7, #28]
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b0f      	cmp	r3, #15
 8007b78:	d9e9      	bls.n	8007b4e <prvInitialiseNewTask+0x56>
 8007b7a:	e000      	b.n	8007b7e <prvInitialiseNewTask+0x86>
			{
				break;
 8007b7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b86:	e003      	b.n	8007b90 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	2b06      	cmp	r3, #6
 8007b94:	d901      	bls.n	8007b9a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b96:	2306      	movs	r3, #6
 8007b98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	2200      	movs	r2, #0
 8007baa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fe67 	bl	8007884 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	3318      	adds	r3, #24
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7ff fe62 	bl	8007884 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	f1c3 0207 	rsb	r2, r3, #7
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be8:	334c      	adds	r3, #76	@ 0x4c
 8007bea:	224c      	movs	r2, #76	@ 0x4c
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f00f fa6e 	bl	80170d0 <memset>
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8007c2c <prvInitialiseNewTask+0x134>)
 8007bf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8007c30 <prvInitialiseNewTask+0x138>)
 8007bfe:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	4a0c      	ldr	r2, [pc, #48]	@ (8007c34 <prvInitialiseNewTask+0x13c>)
 8007c04:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	68f9      	ldr	r1, [r7, #12]
 8007c0a:	69b8      	ldr	r0, [r7, #24]
 8007c0c:	f000 ff7e 	bl	8008b0c <pxPortInitialiseStack>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c22:	bf00      	nop
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20017abc 	.word	0x20017abc
 8007c30:	20017b24 	.word	0x20017b24
 8007c34:	20017b8c 	.word	0x20017b8c

08007c38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c40:	f001 f892 	bl	8008d68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c44:	4b2a      	ldr	r3, [pc, #168]	@ (8007cf0 <prvAddNewTaskToReadyList+0xb8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	4a29      	ldr	r2, [pc, #164]	@ (8007cf0 <prvAddNewTaskToReadyList+0xb8>)
 8007c4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c4e:	4b29      	ldr	r3, [pc, #164]	@ (8007cf4 <prvAddNewTaskToReadyList+0xbc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c56:	4a27      	ldr	r2, [pc, #156]	@ (8007cf4 <prvAddNewTaskToReadyList+0xbc>)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c5c:	4b24      	ldr	r3, [pc, #144]	@ (8007cf0 <prvAddNewTaskToReadyList+0xb8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d110      	bne.n	8007c86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c64:	f000 fc20 	bl	80084a8 <prvInitialiseTaskLists>
 8007c68:	e00d      	b.n	8007c86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c6a:	4b23      	ldr	r3, [pc, #140]	@ (8007cf8 <prvAddNewTaskToReadyList+0xc0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c72:	4b20      	ldr	r3, [pc, #128]	@ (8007cf4 <prvAddNewTaskToReadyList+0xbc>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d802      	bhi.n	8007c86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c80:	4a1c      	ldr	r2, [pc, #112]	@ (8007cf4 <prvAddNewTaskToReadyList+0xbc>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c86:	4b1d      	ldr	r3, [pc, #116]	@ (8007cfc <prvAddNewTaskToReadyList+0xc4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <prvAddNewTaskToReadyList+0xc4>)
 8007c8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	4b19      	ldr	r3, [pc, #100]	@ (8007d00 <prvAddNewTaskToReadyList+0xc8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <prvAddNewTaskToReadyList+0xc8>)
 8007ca0:	6013      	str	r3, [r2, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4a15      	ldr	r2, [pc, #84]	@ (8007d04 <prvAddNewTaskToReadyList+0xcc>)
 8007cb0:	441a      	add	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7ff fdf0 	bl	800789e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007cbe:	f001 f885 	bl	8008dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <prvAddNewTaskToReadyList+0xc0>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00e      	beq.n	8007ce8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <prvAddNewTaskToReadyList+0xbc>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d207      	bcs.n	8007ce8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d08 <prvAddNewTaskToReadyList+0xd0>)
 8007cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2000f2e0 	.word	0x2000f2e0
 8007cf4:	2000f1e0 	.word	0x2000f1e0
 8007cf8:	2000f2ec 	.word	0x2000f2ec
 8007cfc:	2000f2fc 	.word	0x2000f2fc
 8007d00:	2000f2e8 	.word	0x2000f2e8
 8007d04:	2000f1e4 	.word	0x2000f1e4
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d018      	beq.n	8007d50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007d1e:	4b14      	ldr	r3, [pc, #80]	@ (8007d70 <vTaskDelay+0x64>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <vTaskDelay+0x32>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60bb      	str	r3, [r7, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d3e:	f000 f9a9 	bl	8008094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fe7b 	bl	8008a40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d4a:	f000 f9b1 	bl	80080b0 <xTaskResumeAll>
 8007d4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d107      	bne.n	8007d66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d56:	4b07      	ldr	r3, [pc, #28]	@ (8007d74 <vTaskDelay+0x68>)
 8007d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d66:	bf00      	nop
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000f308 	.word	0x2000f308
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d80:	f000 fff2 	bl	8008d68 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <vTaskSuspend+0x18>
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8007e80 <vTaskSuspend+0x108>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	e000      	b.n	8007d92 <vTaskSuspend+0x1a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fddd 	bl	8007958 <uxListRemove>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d115      	bne.n	8007dd0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da8:	4936      	ldr	r1, [pc, #216]	@ (8007e84 <vTaskSuspend+0x10c>)
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <vTaskSuspend+0x58>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	43da      	mvns	r2, r3
 8007dc6:	4b30      	ldr	r3, [pc, #192]	@ (8007e88 <vTaskSuspend+0x110>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8007e88 <vTaskSuspend+0x110>)
 8007dce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3318      	adds	r3, #24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fdbb 	bl	8007958 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3304      	adds	r3, #4
 8007de6:	4619      	mov	r1, r3
 8007de8:	4828      	ldr	r0, [pc, #160]	@ (8007e8c <vTaskSuspend+0x114>)
 8007dea:	f7ff fd58 	bl	800789e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d103      	bne.n	8007e02 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007e02:	f000 ffe3 	bl	8008dcc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007e06:	4b22      	ldr	r3, [pc, #136]	@ (8007e90 <vTaskSuspend+0x118>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007e0e:	f000 ffab 	bl	8008d68 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007e12:	f000 fbed 	bl	80085f0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007e16:	f000 ffd9 	bl	8008dcc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007e1a:	4b19      	ldr	r3, [pc, #100]	@ (8007e80 <vTaskSuspend+0x108>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d128      	bne.n	8007e76 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8007e24:	4b1a      	ldr	r3, [pc, #104]	@ (8007e90 <vTaskSuspend+0x118>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d018      	beq.n	8007e5e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007e2c:	4b19      	ldr	r3, [pc, #100]	@ (8007e94 <vTaskSuspend+0x11c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00b      	beq.n	8007e4c <vTaskSuspend+0xd4>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	60bb      	str	r3, [r7, #8]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <vTaskSuspend+0x120>)
 8007e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e5c:	e00b      	b.n	8007e76 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <vTaskSuspend+0x114>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4b0e      	ldr	r3, [pc, #56]	@ (8007e9c <vTaskSuspend+0x124>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d103      	bne.n	8007e72 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8007e6a:	4b05      	ldr	r3, [pc, #20]	@ (8007e80 <vTaskSuspend+0x108>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
	}
 8007e70:	e001      	b.n	8007e76 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8007e72:	f000 fa75 	bl	8008360 <vTaskSwitchContext>
	}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	2000f1e0 	.word	0x2000f1e0
 8007e84:	2000f1e4 	.word	0x2000f1e4
 8007e88:	2000f2e8 	.word	0x2000f2e8
 8007e8c:	2000f2cc 	.word	0x2000f2cc
 8007e90:	2000f2ec 	.word	0x2000f2ec
 8007e94:	2000f308 	.word	0x2000f308
 8007e98:	e000ed04 	.word	0xe000ed04
 8007e9c:	2000f2e0 	.word	0x2000f2e0

08007ea0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8007efc <prvTaskIsTaskSuspended+0x5c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d10a      	bne.n	8007eee <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007edc:	4a08      	ldr	r2, [pc, #32]	@ (8007f00 <prvTaskIsTaskSuspended+0x60>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d005      	beq.n	8007eee <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8007eea:	2301      	movs	r3, #1
 8007eec:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eee:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	2000f2cc 	.word	0x2000f2cc
 8007f00:	2000f2a0 	.word	0x2000f2a0

08007f04 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <vTaskResume+0x2a>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	60bb      	str	r3, [r7, #8]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007f2e:	4b20      	ldr	r3, [pc, #128]	@ (8007fb0 <vTaskResume+0xac>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d037      	beq.n	8007fa8 <vTaskResume+0xa4>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d034      	beq.n	8007fa8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007f3e:	f000 ff13 	bl	8008d68 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff ffac 	bl	8007ea0 <prvTaskIsTaskSuspended>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d02a      	beq.n	8007fa4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fd00 	bl	8007958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	409a      	lsls	r2, r3
 8007f60:	4b14      	ldr	r3, [pc, #80]	@ (8007fb4 <vTaskResume+0xb0>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	4a13      	ldr	r2, [pc, #76]	@ (8007fb4 <vTaskResume+0xb0>)
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4a10      	ldr	r2, [pc, #64]	@ (8007fb8 <vTaskResume+0xb4>)
 8007f78:	441a      	add	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	4619      	mov	r1, r3
 8007f80:	4610      	mov	r0, r2
 8007f82:	f7ff fc8c 	bl	800789e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <vTaskResume+0xac>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d307      	bcc.n	8007fa4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007f94:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <vTaskResume+0xb8>)
 8007f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007fa4:	f000 ff12 	bl	8008dcc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	2000f1e0 	.word	0x2000f1e0
 8007fb4:	2000f2e8 	.word	0x2000f2e8
 8007fb8:	2000f1e4 	.word	0x2000f1e4
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08a      	sub	sp, #40	@ 0x28
 8007fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fce:	463a      	mov	r2, r7
 8007fd0:	1d39      	adds	r1, r7, #4
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7f9 fb2a 	bl	8001630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	9202      	str	r2, [sp, #8]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	2300      	movs	r3, #0
 8007fec:	460a      	mov	r2, r1
 8007fee:	4921      	ldr	r1, [pc, #132]	@ (8008074 <vTaskStartScheduler+0xb4>)
 8007ff0:	4821      	ldr	r0, [pc, #132]	@ (8008078 <vTaskStartScheduler+0xb8>)
 8007ff2:	f7ff fcdb 	bl	80079ac <xTaskCreateStatic>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4a20      	ldr	r2, [pc, #128]	@ (800807c <vTaskStartScheduler+0xbc>)
 8007ffa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800807c <vTaskStartScheduler+0xbc>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008004:	2301      	movs	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e001      	b.n	800800e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d11b      	bne.n	800804c <vTaskStartScheduler+0x8c>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	613b      	str	r3, [r7, #16]
}
 8008026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008028:	4b15      	ldr	r3, [pc, #84]	@ (8008080 <vTaskStartScheduler+0xc0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	334c      	adds	r3, #76	@ 0x4c
 800802e:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <vTaskStartScheduler+0xc4>)
 8008030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008032:	4b15      	ldr	r3, [pc, #84]	@ (8008088 <vTaskStartScheduler+0xc8>)
 8008034:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800803a:	4b14      	ldr	r3, [pc, #80]	@ (800808c <vTaskStartScheduler+0xcc>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008040:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <vTaskStartScheduler+0xd0>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008046:	f000 fdeb 	bl	8008c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800804a:	e00f      	b.n	800806c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008052:	d10b      	bne.n	800806c <vTaskStartScheduler+0xac>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	bf00      	nop
 800806a:	e7fd      	b.n	8008068 <vTaskStartScheduler+0xa8>
}
 800806c:	bf00      	nop
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08019294 	.word	0x08019294
 8008078:	08008479 	.word	0x08008479
 800807c:	2000f304 	.word	0x2000f304
 8008080:	2000f1e0 	.word	0x2000f1e0
 8008084:	200000c8 	.word	0x200000c8
 8008088:	2000f300 	.word	0x2000f300
 800808c:	2000f2ec 	.word	0x2000f2ec
 8008090:	2000f2e4 	.word	0x2000f2e4

08008094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008098:	4b04      	ldr	r3, [pc, #16]	@ (80080ac <vTaskSuspendAll+0x18>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a03      	ldr	r2, [pc, #12]	@ (80080ac <vTaskSuspendAll+0x18>)
 80080a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080a2:	bf00      	nop
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000f308 	.word	0x2000f308

080080b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080be:	4b42      	ldr	r3, [pc, #264]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xTaskResumeAll+0x2e>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	603b      	str	r3, [r7, #0]
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080de:	f000 fe43 	bl	8008d68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080e2:	4b39      	ldr	r3, [pc, #228]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	4a37      	ldr	r2, [pc, #220]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ec:	4b36      	ldr	r3, [pc, #216]	@ (80081c8 <xTaskResumeAll+0x118>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d161      	bne.n	80081b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080f4:	4b35      	ldr	r3, [pc, #212]	@ (80081cc <xTaskResumeAll+0x11c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d05d      	beq.n	80081b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080fc:	e02e      	b.n	800815c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fe:	4b34      	ldr	r3, [pc, #208]	@ (80081d0 <xTaskResumeAll+0x120>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3318      	adds	r3, #24
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fc24 	bl	8007958 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3304      	adds	r3, #4
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fc1f 	bl	8007958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	2201      	movs	r2, #1
 8008120:	409a      	lsls	r2, r3
 8008122:	4b2c      	ldr	r3, [pc, #176]	@ (80081d4 <xTaskResumeAll+0x124>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4313      	orrs	r3, r2
 8008128:	4a2a      	ldr	r2, [pc, #168]	@ (80081d4 <xTaskResumeAll+0x124>)
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a27      	ldr	r2, [pc, #156]	@ (80081d8 <xTaskResumeAll+0x128>)
 800813a:	441a      	add	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7ff fbab 	bl	800789e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814c:	4b23      	ldr	r3, [pc, #140]	@ (80081dc <xTaskResumeAll+0x12c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008156:	4b22      	ldr	r3, [pc, #136]	@ (80081e0 <xTaskResumeAll+0x130>)
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800815c:	4b1c      	ldr	r3, [pc, #112]	@ (80081d0 <xTaskResumeAll+0x120>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1cc      	bne.n	80080fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800816a:	f000 fa41 	bl	80085f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800816e:	4b1d      	ldr	r3, [pc, #116]	@ (80081e4 <xTaskResumeAll+0x134>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800817a:	f000 f837 	bl	80081ec <xTaskIncrementTick>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008184:	4b16      	ldr	r3, [pc, #88]	@ (80081e0 <xTaskResumeAll+0x130>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3b01      	subs	r3, #1
 800818e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f1      	bne.n	800817a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008196:	4b13      	ldr	r3, [pc, #76]	@ (80081e4 <xTaskResumeAll+0x134>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800819c:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTaskResumeAll+0x130>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081a8:	4b0f      	ldr	r3, [pc, #60]	@ (80081e8 <xTaskResumeAll+0x138>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081b8:	f000 fe08 	bl	8008dcc <vPortExitCritical>

	return xAlreadyYielded;
 80081bc:	68bb      	ldr	r3, [r7, #8]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	2000f308 	.word	0x2000f308
 80081cc:	2000f2e0 	.word	0x2000f2e0
 80081d0:	2000f2a0 	.word	0x2000f2a0
 80081d4:	2000f2e8 	.word	0x2000f2e8
 80081d8:	2000f1e4 	.word	0x2000f1e4
 80081dc:	2000f1e0 	.word	0x2000f1e0
 80081e0:	2000f2f4 	.word	0x2000f2f4
 80081e4:	2000f2f0 	.word	0x2000f2f0
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008334 <xTaskIncrementTick+0x148>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f040 808f 	bne.w	800831e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008200:	4b4d      	ldr	r3, [pc, #308]	@ (8008338 <xTaskIncrementTick+0x14c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008208:	4a4b      	ldr	r2, [pc, #300]	@ (8008338 <xTaskIncrementTick+0x14c>)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d121      	bne.n	8008258 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008214:	4b49      	ldr	r3, [pc, #292]	@ (800833c <xTaskIncrementTick+0x150>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <xTaskIncrementTick+0x4a>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	603b      	str	r3, [r7, #0]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <xTaskIncrementTick+0x46>
 8008236:	4b41      	ldr	r3, [pc, #260]	@ (800833c <xTaskIncrementTick+0x150>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	4b40      	ldr	r3, [pc, #256]	@ (8008340 <xTaskIncrementTick+0x154>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a3e      	ldr	r2, [pc, #248]	@ (800833c <xTaskIncrementTick+0x150>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4a3e      	ldr	r2, [pc, #248]	@ (8008340 <xTaskIncrementTick+0x154>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6013      	str	r3, [r2, #0]
 800824a:	4b3e      	ldr	r3, [pc, #248]	@ (8008344 <xTaskIncrementTick+0x158>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3301      	adds	r3, #1
 8008250:	4a3c      	ldr	r2, [pc, #240]	@ (8008344 <xTaskIncrementTick+0x158>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	f000 f9cc 	bl	80085f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008258:	4b3b      	ldr	r3, [pc, #236]	@ (8008348 <xTaskIncrementTick+0x15c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	429a      	cmp	r2, r3
 8008260:	d348      	bcc.n	80082f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008262:	4b36      	ldr	r3, [pc, #216]	@ (800833c <xTaskIncrementTick+0x150>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800826c:	4b36      	ldr	r3, [pc, #216]	@ (8008348 <xTaskIncrementTick+0x15c>)
 800826e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008272:	601a      	str	r2, [r3, #0]
					break;
 8008274:	e03e      	b.n	80082f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008276:	4b31      	ldr	r3, [pc, #196]	@ (800833c <xTaskIncrementTick+0x150>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d203      	bcs.n	8008296 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800828e:	4a2e      	ldr	r2, [pc, #184]	@ (8008348 <xTaskIncrementTick+0x15c>)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008294:	e02e      	b.n	80082f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff fb5c 	bl	8007958 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	3318      	adds	r3, #24
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7ff fb53 	bl	8007958 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b6:	2201      	movs	r2, #1
 80082b8:	409a      	lsls	r2, r3
 80082ba:	4b24      	ldr	r3, [pc, #144]	@ (800834c <xTaskIncrementTick+0x160>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4313      	orrs	r3, r2
 80082c0:	4a22      	ldr	r2, [pc, #136]	@ (800834c <xTaskIncrementTick+0x160>)
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008350 <xTaskIncrementTick+0x164>)
 80082d2:	441a      	add	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3304      	adds	r3, #4
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f7ff fadf 	bl	800789e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008354 <xTaskIncrementTick+0x168>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d3b9      	bcc.n	8008262 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082f2:	e7b6      	b.n	8008262 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082f4:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <xTaskIncrementTick+0x168>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082fa:	4915      	ldr	r1, [pc, #84]	@ (8008350 <xTaskIncrementTick+0x164>)
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	440b      	add	r3, r1
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d901      	bls.n	8008310 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800830c:	2301      	movs	r3, #1
 800830e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008310:	4b11      	ldr	r3, [pc, #68]	@ (8008358 <xTaskIncrementTick+0x16c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e004      	b.n	8008328 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800831e:	4b0f      	ldr	r3, [pc, #60]	@ (800835c <xTaskIncrementTick+0x170>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	4a0d      	ldr	r2, [pc, #52]	@ (800835c <xTaskIncrementTick+0x170>)
 8008326:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008328:	697b      	ldr	r3, [r7, #20]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	2000f308 	.word	0x2000f308
 8008338:	2000f2e4 	.word	0x2000f2e4
 800833c:	2000f298 	.word	0x2000f298
 8008340:	2000f29c 	.word	0x2000f29c
 8008344:	2000f2f8 	.word	0x2000f2f8
 8008348:	2000f300 	.word	0x2000f300
 800834c:	2000f2e8 	.word	0x2000f2e8
 8008350:	2000f1e4 	.word	0x2000f1e4
 8008354:	2000f1e0 	.word	0x2000f1e0
 8008358:	2000f2f4 	.word	0x2000f2f4
 800835c:	2000f2f0 	.word	0x2000f2f0

08008360 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008366:	4b2a      	ldr	r3, [pc, #168]	@ (8008410 <vTaskSwitchContext+0xb0>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800836e:	4b29      	ldr	r3, [pc, #164]	@ (8008414 <vTaskSwitchContext+0xb4>)
 8008370:	2201      	movs	r2, #1
 8008372:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008374:	e045      	b.n	8008402 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008376:	4b27      	ldr	r3, [pc, #156]	@ (8008414 <vTaskSwitchContext+0xb4>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837c:	4b26      	ldr	r3, [pc, #152]	@ (8008418 <vTaskSwitchContext+0xb8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	fab3 f383 	clz	r3, r3
 8008388:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800838a:	7afb      	ldrb	r3, [r7, #11]
 800838c:	f1c3 031f 	rsb	r3, r3, #31
 8008390:	617b      	str	r3, [r7, #20]
 8008392:	4922      	ldr	r1, [pc, #136]	@ (800841c <vTaskSwitchContext+0xbc>)
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10b      	bne.n	80083be <vTaskSwitchContext+0x5e>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	607b      	str	r3, [r7, #4]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <vTaskSwitchContext+0x5a>
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a14      	ldr	r2, [pc, #80]	@ (800841c <vTaskSwitchContext+0xbc>)
 80083ca:	4413      	add	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	3308      	adds	r3, #8
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d104      	bne.n	80083ee <vTaskSwitchContext+0x8e>
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	605a      	str	r2, [r3, #4]
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	@ (8008420 <vTaskSwitchContext+0xc0>)
 80083f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083f8:	4b09      	ldr	r3, [pc, #36]	@ (8008420 <vTaskSwitchContext+0xc0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	334c      	adds	r3, #76	@ 0x4c
 80083fe:	4a09      	ldr	r2, [pc, #36]	@ (8008424 <vTaskSwitchContext+0xc4>)
 8008400:	6013      	str	r3, [r2, #0]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	2000f308 	.word	0x2000f308
 8008414:	2000f2f4 	.word	0x2000f2f4
 8008418:	2000f2e8 	.word	0x2000f2e8
 800841c:	2000f1e4 	.word	0x2000f1e4
 8008420:	2000f1e0 	.word	0x2000f1e0
 8008424:	200000c8 	.word	0x200000c8

08008428 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60fb      	str	r3, [r7, #12]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800844e:	f000 fc8b 	bl	8008d68 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008452:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <vTaskSetTimeOutState+0x48>)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800845a:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <vTaskSetTimeOutState+0x4c>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008462:	f000 fcb3 	bl	8008dcc <vPortExitCritical>
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	2000f2f8 	.word	0x2000f2f8
 8008474:	2000f2e4 	.word	0x2000f2e4

08008478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008480:	f000 f852 	bl	8008528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <prvIdleTask+0x28>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d9f9      	bls.n	8008480 <prvIdleTask+0x8>
			{
				taskYIELD();
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <prvIdleTask+0x2c>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800849c:	e7f0      	b.n	8008480 <prvIdleTask+0x8>
 800849e:	bf00      	nop
 80084a0:	2000f1e4 	.word	0x2000f1e4
 80084a4:	e000ed04 	.word	0xe000ed04

080084a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]
 80084b2:	e00c      	b.n	80084ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4613      	mov	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4a12      	ldr	r2, [pc, #72]	@ (8008508 <prvInitialiseTaskLists+0x60>)
 80084c0:	4413      	add	r3, r2
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff f9be 	bl	8007844 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3301      	adds	r3, #1
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b06      	cmp	r3, #6
 80084d2:	d9ef      	bls.n	80084b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084d4:	480d      	ldr	r0, [pc, #52]	@ (800850c <prvInitialiseTaskLists+0x64>)
 80084d6:	f7ff f9b5 	bl	8007844 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084da:	480d      	ldr	r0, [pc, #52]	@ (8008510 <prvInitialiseTaskLists+0x68>)
 80084dc:	f7ff f9b2 	bl	8007844 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084e0:	480c      	ldr	r0, [pc, #48]	@ (8008514 <prvInitialiseTaskLists+0x6c>)
 80084e2:	f7ff f9af 	bl	8007844 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084e6:	480c      	ldr	r0, [pc, #48]	@ (8008518 <prvInitialiseTaskLists+0x70>)
 80084e8:	f7ff f9ac 	bl	8007844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084ec:	480b      	ldr	r0, [pc, #44]	@ (800851c <prvInitialiseTaskLists+0x74>)
 80084ee:	f7ff f9a9 	bl	8007844 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <prvInitialiseTaskLists+0x78>)
 80084f4:	4a05      	ldr	r2, [pc, #20]	@ (800850c <prvInitialiseTaskLists+0x64>)
 80084f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <prvInitialiseTaskLists+0x7c>)
 80084fa:	4a05      	ldr	r2, [pc, #20]	@ (8008510 <prvInitialiseTaskLists+0x68>)
 80084fc:	601a      	str	r2, [r3, #0]
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	2000f1e4 	.word	0x2000f1e4
 800850c:	2000f270 	.word	0x2000f270
 8008510:	2000f284 	.word	0x2000f284
 8008514:	2000f2a0 	.word	0x2000f2a0
 8008518:	2000f2b4 	.word	0x2000f2b4
 800851c:	2000f2cc 	.word	0x2000f2cc
 8008520:	2000f298 	.word	0x2000f298
 8008524:	2000f29c 	.word	0x2000f29c

08008528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800852e:	e019      	b.n	8008564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008530:	f000 fc1a 	bl	8008d68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008534:	4b10      	ldr	r3, [pc, #64]	@ (8008578 <prvCheckTasksWaitingTermination+0x50>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	3304      	adds	r3, #4
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fa09 	bl	8007958 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008546:	4b0d      	ldr	r3, [pc, #52]	@ (800857c <prvCheckTasksWaitingTermination+0x54>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3b01      	subs	r3, #1
 800854c:	4a0b      	ldr	r2, [pc, #44]	@ (800857c <prvCheckTasksWaitingTermination+0x54>)
 800854e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008550:	4b0b      	ldr	r3, [pc, #44]	@ (8008580 <prvCheckTasksWaitingTermination+0x58>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3b01      	subs	r3, #1
 8008556:	4a0a      	ldr	r2, [pc, #40]	@ (8008580 <prvCheckTasksWaitingTermination+0x58>)
 8008558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800855a:	f000 fc37 	bl	8008dcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f810 	bl	8008584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008564:	4b06      	ldr	r3, [pc, #24]	@ (8008580 <prvCheckTasksWaitingTermination+0x58>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1e1      	bne.n	8008530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	2000f2b4 	.word	0x2000f2b4
 800857c:	2000f2e0 	.word	0x2000f2e0
 8008580:	2000f2c8 	.word	0x2000f2c8

08008584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	334c      	adds	r3, #76	@ 0x4c
 8008590:	4618      	mov	r0, r3
 8008592:	f00e fdef 	bl	8017174 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800859c:	2b00      	cmp	r3, #0
 800859e:	d108      	bne.n	80085b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fdcf 	bl	8009148 <vPortFree>
				vPortFree( pxTCB );
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fdcc 	bl	8009148 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085b0:	e019      	b.n	80085e6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d103      	bne.n	80085c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fdc3 	bl	8009148 <vPortFree>
	}
 80085c2:	e010      	b.n	80085e6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d00b      	beq.n	80085e6 <prvDeleteTCB+0x62>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	f383 8811 	msr	BASEPRI, r3
 80085d6:	f3bf 8f6f 	isb	sy
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	60fb      	str	r3, [r7, #12]
}
 80085e0:	bf00      	nop
 80085e2:	bf00      	nop
 80085e4:	e7fd      	b.n	80085e2 <prvDeleteTCB+0x5e>
	}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008628 <prvResetNextTaskUnblockTime+0x38>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008600:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <prvResetNextTaskUnblockTime+0x3c>)
 8008602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008606:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008608:	e008      	b.n	800861c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860a:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <prvResetNextTaskUnblockTime+0x38>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4a04      	ldr	r2, [pc, #16]	@ (800862c <prvResetNextTaskUnblockTime+0x3c>)
 800861a:	6013      	str	r3, [r2, #0]
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	2000f298 	.word	0x2000f298
 800862c:	2000f300 	.word	0x2000f300

08008630 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800863e:	f000 fb93 	bl	8008d68 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008642:	4b29      	ldr	r3, [pc, #164]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d01c      	beq.n	800868a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008650:	4b25      	ldr	r3, [pc, #148]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	43d2      	mvns	r2, r2
 800865c:	400a      	ands	r2, r1
 800865e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008662:	4b21      	ldr	r3, [pc, #132]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008672:	2101      	movs	r1, #1
 8008674:	6838      	ldr	r0, [r7, #0]
 8008676:	f000 f9e3 	bl	8008a40 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800867a:	4b1c      	ldr	r3, [pc, #112]	@ (80086ec <xTaskNotifyWait+0xbc>)
 800867c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800868a:	f000 fb9f 	bl	8008dcc <vPortExitCritical>

		taskENTER_CRITICAL();
 800868e:	f000 fb6b 	bl	8008d68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008698:	4b13      	ldr	r3, [pc, #76]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80086a4:	4b10      	ldr	r3, [pc, #64]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d002      	beq.n	80086b8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	e00a      	b.n	80086ce <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80086b8:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	43d2      	mvns	r2, r2
 80086c4:	400a      	ands	r2, r1
 80086c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 80086ca:	2301      	movs	r3, #1
 80086cc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086ce:	4b06      	ldr	r3, [pc, #24]	@ (80086e8 <xTaskNotifyWait+0xb8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80086d8:	f000 fb78 	bl	8008dcc <vPortExitCritical>

		return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	2000f1e0 	.word	0x2000f1e0
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	@ 0x28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	603b      	str	r3, [r7, #0]
 80086fc:	4613      	mov	r3, r2
 80086fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008700:	2301      	movs	r3, #1
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <xTaskGenericNotify+0x32>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	61bb      	str	r3, [r7, #24]
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008726:	f000 fb1f 	bl	8008d68 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d004      	beq.n	800873a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008740:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008742:	6a3b      	ldr	r3, [r7, #32]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	2b04      	cmp	r3, #4
 800874e:	d82e      	bhi.n	80087ae <xTaskGenericNotify+0xbe>
 8008750:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <xTaskGenericNotify+0x68>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	080087d3 	.word	0x080087d3
 800875c:	0800876d 	.word	0x0800876d
 8008760:	0800877f 	.word	0x0800877f
 8008764:	0800878f 	.word	0x0800878f
 8008768:	08008799 	.word	0x08008799
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	431a      	orrs	r2, r3
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800877c:	e02c      	b.n	80087d8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800878c:	e024      	b.n	80087d8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008796:	e01f      	b.n	80087d8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008798:	7ffb      	ldrb	r3, [r7, #31]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d004      	beq.n	80087a8 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80087a6:	e017      	b.n	80087d8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80087ac:	e014      	b.n	80087d8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087b8:	d00d      	beq.n	80087d6 <xTaskGenericNotify+0xe6>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	617b      	str	r3, [r7, #20]
}
 80087cc:	bf00      	nop
 80087ce:	bf00      	nop
 80087d0:	e7fd      	b.n	80087ce <xTaskGenericNotify+0xde>
					break;
 80087d2:	bf00      	nop
 80087d4:	e000      	b.n	80087d8 <xTaskGenericNotify+0xe8>

					break;
 80087d6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80087d8:	7ffb      	ldrb	r3, [r7, #31]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d13a      	bne.n	8008854 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff f8b8 	bl	8007958 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ec:	2201      	movs	r2, #1
 80087ee:	409a      	lsls	r2, r3
 80087f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008864 <xTaskGenericNotify+0x174>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008864 <xTaskGenericNotify+0x174>)
 80087f8:	6013      	str	r3, [r2, #0]
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fe:	4613      	mov	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4a18      	ldr	r2, [pc, #96]	@ (8008868 <xTaskGenericNotify+0x178>)
 8008808:	441a      	add	r2, r3
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7ff f844 	bl	800789e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <xTaskGenericNotify+0x146>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	613b      	str	r3, [r7, #16]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883a:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <xTaskGenericNotify+0x17c>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	429a      	cmp	r2, r3
 8008842:	d907      	bls.n	8008854 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008844:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <xTaskGenericNotify+0x180>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008854:	f000 faba 	bl	8008dcc <vPortExitCritical>

		return xReturn;
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800885a:	4618      	mov	r0, r3
 800885c:	3728      	adds	r7, #40	@ 0x28
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	2000f2e8 	.word	0x2000f2e8
 8008868:	2000f1e4 	.word	0x2000f1e4
 800886c:	2000f1e0 	.word	0x2000f1e0
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08e      	sub	sp, #56	@ 0x38
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	4613      	mov	r3, r2
 8008882:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10b      	bne.n	80088a6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088a6:	f000 fb3f 	bl	8008f28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088ae:	f3ef 8211 	mrs	r2, BASEPRI
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	623a      	str	r2, [r7, #32]
 80088c4:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088c6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80088d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80088da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088dc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80088e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d82e      	bhi.n	8008950 <xTaskGenericNotifyFromISR+0xdc>
 80088f2:	a201      	add	r2, pc, #4	@ (adr r2, 80088f8 <xTaskGenericNotifyFromISR+0x84>)
 80088f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f8:	08008975 	.word	0x08008975
 80088fc:	0800890d 	.word	0x0800890d
 8008900:	0800891f 	.word	0x0800891f
 8008904:	0800892f 	.word	0x0800892f
 8008908:	08008939 	.word	0x08008939
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800890c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	431a      	orrs	r2, r3
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800891c:	e02d      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008924:	1c5a      	adds	r2, r3, #1
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800892c:	e025      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008936:	e020      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008938:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800893c:	2b02      	cmp	r3, #2
 800893e:	d004      	beq.n	800894a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008948:	e017      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800894a:	2300      	movs	r3, #0
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800894e:	e014      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800895a:	d00d      	beq.n	8008978 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	61bb      	str	r3, [r7, #24]
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	e7fd      	b.n	8008970 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008974:	bf00      	nop
 8008976:	e000      	b.n	800897a <xTaskGenericNotifyFromISR+0x106>
					break;
 8008978:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800897a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800897e:	2b01      	cmp	r3, #1
 8008980:	d146      	bne.n	8008a10 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	617b      	str	r3, [r7, #20]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a2:	4b21      	ldr	r3, [pc, #132]	@ (8008a28 <xTaskGenericNotifyFromISR+0x1b4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d11c      	bne.n	80089e4 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe ffd2 	bl	8007958 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	2201      	movs	r2, #1
 80089ba:	409a      	lsls	r2, r3
 80089bc:	4b1b      	ldr	r3, [pc, #108]	@ (8008a2c <xTaskGenericNotifyFromISR+0x1b8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a2c <xTaskGenericNotifyFromISR+0x1b8>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4a17      	ldr	r2, [pc, #92]	@ (8008a30 <xTaskGenericNotifyFromISR+0x1bc>)
 80089d4:	441a      	add	r2, r3
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7fe ff5e 	bl	800789e <vListInsertEnd>
 80089e2:	e005      	b.n	80089f0 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	3318      	adds	r3, #24
 80089e8:	4619      	mov	r1, r3
 80089ea:	4812      	ldr	r0, [pc, #72]	@ (8008a34 <xTaskGenericNotifyFromISR+0x1c0>)
 80089ec:	f7fe ff57 	bl	800789e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f4:	4b10      	ldr	r3, [pc, #64]	@ (8008a38 <xTaskGenericNotifyFromISR+0x1c4>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d908      	bls.n	8008a10 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a3c <xTaskGenericNotifyFromISR+0x1c8>)
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a1a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3738      	adds	r7, #56	@ 0x38
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	2000f308 	.word	0x2000f308
 8008a2c:	2000f2e8 	.word	0x2000f2e8
 8008a30:	2000f1e4 	.word	0x2000f1e4
 8008a34:	2000f2a0 	.word	0x2000f2a0
 8008a38:	2000f1e0 	.word	0x2000f1e0
 8008a3c:	2000f2f4 	.word	0x2000f2f4

08008a40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a4a:	4b29      	ldr	r3, [pc, #164]	@ (8008af0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a50:	4b28      	ldr	r3, [pc, #160]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe ff7e 	bl	8007958 <uxListRemove>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10b      	bne.n	8008a7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a62:	4b24      	ldr	r3, [pc, #144]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a68:	2201      	movs	r2, #1
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	4b21      	ldr	r3, [pc, #132]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4013      	ands	r3, r2
 8008a76:	4a20      	ldr	r2, [pc, #128]	@ (8008af8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a80:	d10a      	bne.n	8008a98 <prvAddCurrentTaskToDelayedList+0x58>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a88:	4b1a      	ldr	r3, [pc, #104]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	481a      	ldr	r0, [pc, #104]	@ (8008afc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a92:	f7fe ff04 	bl	800789e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a96:	e026      	b.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008aa0:	4b14      	ldr	r3, [pc, #80]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d209      	bcs.n	8008ac4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab0:	4b13      	ldr	r3, [pc, #76]	@ (8008b00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7fe ff12 	bl	80078e6 <vListInsert>
}
 8008ac2:	e010      	b.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8008af4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f7fe ff08 	bl	80078e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d202      	bcs.n	8008ae6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008ae0:	4a09      	ldr	r2, [pc, #36]	@ (8008b08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	6013      	str	r3, [r2, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	2000f2e4 	.word	0x2000f2e4
 8008af4:	2000f1e0 	.word	0x2000f1e0
 8008af8:	2000f2e8 	.word	0x2000f2e8
 8008afc:	2000f2cc 	.word	0x2000f2cc
 8008b00:	2000f29c 	.word	0x2000f29c
 8008b04:	2000f298 	.word	0x2000f298
 8008b08:	2000f300 	.word	0x2000f300

08008b0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3b04      	subs	r3, #4
 8008b1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3b04      	subs	r3, #4
 8008b2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f023 0201 	bic.w	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3b04      	subs	r3, #4
 8008b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b3c:	4a0c      	ldr	r2, [pc, #48]	@ (8008b70 <pxPortInitialiseStack+0x64>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3b14      	subs	r3, #20
 8008b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3b04      	subs	r3, #4
 8008b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f06f 0202 	mvn.w	r2, #2
 8008b5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3b20      	subs	r3, #32
 8008b60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b62:	68fb      	ldr	r3, [r7, #12]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	08008b75 	.word	0x08008b75

08008b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b7e:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <prvTaskExitError+0x58>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b86:	d00b      	beq.n	8008ba0 <prvTaskExitError+0x2c>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	60fb      	str	r3, [r7, #12]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <prvTaskExitError+0x28>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60bb      	str	r3, [r7, #8]
}
 8008bb2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bb4:	bf00      	nop
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d0fc      	beq.n	8008bb6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bbc:	bf00      	nop
 8008bbe:	bf00      	nop
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000018 	.word	0x20000018

08008bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	4770      	bx	lr
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	2000f1e0 	.word	0x2000f1e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bf8:	4808      	ldr	r0, [pc, #32]	@ (8008c1c <prvPortStartFirstTask+0x24>)
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f380 8808 	msr	MSP, r0
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8814 	msr	CONTROL, r0
 8008c0a:	b662      	cpsie	i
 8008c0c:	b661      	cpsie	f
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	df00      	svc	0
 8008c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed08 	.word	0xe000ed08

08008c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c26:	4b47      	ldr	r3, [pc, #284]	@ (8008d44 <xPortStartScheduler+0x124>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a47      	ldr	r2, [pc, #284]	@ (8008d48 <xPortStartScheduler+0x128>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10b      	bne.n	8008c48 <xPortStartScheduler+0x28>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c48:	4b3e      	ldr	r3, [pc, #248]	@ (8008d44 <xPortStartScheduler+0x124>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d4c <xPortStartScheduler+0x12c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d10b      	bne.n	8008c6a <xPortStartScheduler+0x4a>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c6a:	4b39      	ldr	r3, [pc, #228]	@ (8008d50 <xPortStartScheduler+0x130>)
 8008c6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	22ff      	movs	r2, #255	@ 0xff
 8008c7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4b31      	ldr	r3, [pc, #196]	@ (8008d54 <xPortStartScheduler+0x134>)
 8008c90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c92:	4b31      	ldr	r3, [pc, #196]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008c94:	2207      	movs	r2, #7
 8008c96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c98:	e009      	b.n	8008cae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008ca2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb6:	2b80      	cmp	r3, #128	@ 0x80
 8008cb8:	d0ef      	beq.n	8008c9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cba:	4b27      	ldr	r3, [pc, #156]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f1c3 0307 	rsb	r3, r3, #7
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d00b      	beq.n	8008cde <xPortStartScheduler+0xbe>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	60bb      	str	r3, [r7, #8]
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	e7fd      	b.n	8008cda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cde:	4b1e      	ldr	r3, [pc, #120]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008ce6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cf0:	4a19      	ldr	r2, [pc, #100]	@ (8008d58 <xPortStartScheduler+0x138>)
 8008cf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cfc:	4b17      	ldr	r3, [pc, #92]	@ (8008d5c <xPortStartScheduler+0x13c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a16      	ldr	r2, [pc, #88]	@ (8008d5c <xPortStartScheduler+0x13c>)
 8008d02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d08:	4b14      	ldr	r3, [pc, #80]	@ (8008d5c <xPortStartScheduler+0x13c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a13      	ldr	r2, [pc, #76]	@ (8008d5c <xPortStartScheduler+0x13c>)
 8008d0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d14:	f000 f8da 	bl	8008ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d18:	4b11      	ldr	r3, [pc, #68]	@ (8008d60 <xPortStartScheduler+0x140>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d1e:	f000 f8f9 	bl	8008f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d22:	4b10      	ldr	r3, [pc, #64]	@ (8008d64 <xPortStartScheduler+0x144>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a0f      	ldr	r2, [pc, #60]	@ (8008d64 <xPortStartScheduler+0x144>)
 8008d28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d2e:	f7ff ff63 	bl	8008bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d32:	f7ff fb15 	bl	8008360 <vTaskSwitchContext>
	prvTaskExitError();
 8008d36:	f7ff ff1d 	bl	8008b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	e000ed00 	.word	0xe000ed00
 8008d48:	410fc271 	.word	0x410fc271
 8008d4c:	410fc270 	.word	0x410fc270
 8008d50:	e000e400 	.word	0xe000e400
 8008d54:	2000f30c 	.word	0x2000f30c
 8008d58:	2000f310 	.word	0x2000f310
 8008d5c:	e000ed20 	.word	0xe000ed20
 8008d60:	20000018 	.word	0x20000018
 8008d64:	e000ef34 	.word	0xe000ef34

08008d68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	607b      	str	r3, [r7, #4]
}
 8008d80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d82:	4b10      	ldr	r3, [pc, #64]	@ (8008dc4 <vPortEnterCritical+0x5c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	4a0e      	ldr	r2, [pc, #56]	@ (8008dc4 <vPortEnterCritical+0x5c>)
 8008d8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <vPortEnterCritical+0x5c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d110      	bne.n	8008db6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d94:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <vPortEnterCritical+0x60>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	603b      	str	r3, [r7, #0]
}
 8008db0:	bf00      	nop
 8008db2:	bf00      	nop
 8008db4:	e7fd      	b.n	8008db2 <vPortEnterCritical+0x4a>
	}
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20000018 	.word	0x20000018
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dd2:	4b12      	ldr	r3, [pc, #72]	@ (8008e1c <vPortExitCritical+0x50>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10b      	bne.n	8008df2 <vPortExitCritical+0x26>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	607b      	str	r3, [r7, #4]
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <vPortExitCritical+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	4a08      	ldr	r2, [pc, #32]	@ (8008e1c <vPortExitCritical+0x50>)
 8008dfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dfc:	4b07      	ldr	r3, [pc, #28]	@ (8008e1c <vPortExitCritical+0x50>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <vPortExitCritical+0x44>
 8008e04:	2300      	movs	r3, #0
 8008e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f383 8811 	msr	BASEPRI, r3
}
 8008e0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	20000018 	.word	0x20000018

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4b15      	ldr	r3, [pc, #84]	@ (8008e80 <pxCurrentTCBConst>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	f01e 0f10 	tst.w	lr, #16
 8008e30:	bf08      	it	eq
 8008e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e44:	f380 8811 	msr	BASEPRI, r0
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f7ff fa86 	bl	8008360 <vTaskSwitchContext>
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f380 8811 	msr	BASEPRI, r0
 8008e5c:	bc09      	pop	{r0, r3}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f01e 0f10 	tst.w	lr, #16
 8008e6a:	bf08      	it	eq
 8008e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e70:	f380 8809 	msr	PSP, r0
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst>:
 8008e80:	2000f1e0 	.word	0x2000f1e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ea2:	f7ff f9a3 	bl	80081ec <xTaskIncrementTick>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <SysTick_Handler+0x40>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f383 8811 	msr	BASEPRI, r3
}
 8008ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <vPortSetupTimerInterrupt+0x38>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	@ (8008f08 <vPortSetupTimerInterrupt+0x3c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8008f0c <vPortSetupTimerInterrupt+0x40>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	4a09      	ldr	r2, [pc, #36]	@ (8008f10 <vPortSetupTimerInterrupt+0x44>)
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eee:	4b04      	ldr	r3, [pc, #16]	@ (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010
 8008f04:	e000e018 	.word	0xe000e018
 8008f08:	20000004 	.word	0x20000004
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	e000e014 	.word	0xe000e014

08008f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f24 <vPortEnableVFP+0x10>
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed88 	.word	0xe000ed88

08008f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
 8008f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d915      	bls.n	8008f66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f3a:	4a18      	ldr	r2, [pc, #96]	@ (8008f9c <vPortValidateInterruptPriority+0x74>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f44:	4b16      	ldr	r3, [pc, #88]	@ (8008fa0 <vPortValidateInterruptPriority+0x78>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	7afa      	ldrb	r2, [r7, #11]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d20b      	bcs.n	8008f66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
 8008f62:	bf00      	nop
 8008f64:	e7fd      	b.n	8008f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f66:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa4 <vPortValidateInterruptPriority+0x7c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa8 <vPortValidateInterruptPriority+0x80>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d90b      	bls.n	8008f8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	603b      	str	r3, [r7, #0]
}
 8008f88:	bf00      	nop
 8008f8a:	bf00      	nop
 8008f8c:	e7fd      	b.n	8008f8a <vPortValidateInterruptPriority+0x62>
	}
 8008f8e:	bf00      	nop
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	e000e3f0 	.word	0xe000e3f0
 8008fa0:	2000f30c 	.word	0x2000f30c
 8008fa4:	e000ed0c 	.word	0xe000ed0c
 8008fa8:	2000f310 	.word	0x2000f310

08008fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b08a      	sub	sp, #40	@ 0x28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fb8:	f7ff f86c 	bl	8008094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8009130 <pvPortMalloc+0x184>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fc4:	f000 f924 	bl	8009210 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8009134 <pvPortMalloc+0x188>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4013      	ands	r3, r2
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 8095 	bne.w	8009100 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01e      	beq.n	800901a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008fdc:	2208      	movs	r2, #8
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d015      	beq.n	800901a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f023 0307 	bic.w	r3, r3, #7
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <pvPortMalloc+0x6e>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	617b      	str	r3, [r7, #20]
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	e7fd      	b.n	8009016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d06f      	beq.n	8009100 <pvPortMalloc+0x154>
 8009020:	4b45      	ldr	r3, [pc, #276]	@ (8009138 <pvPortMalloc+0x18c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	429a      	cmp	r2, r3
 8009028:	d86a      	bhi.n	8009100 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800902a:	4b44      	ldr	r3, [pc, #272]	@ (800913c <pvPortMalloc+0x190>)
 800902c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800902e:	4b43      	ldr	r3, [pc, #268]	@ (800913c <pvPortMalloc+0x190>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009034:	e004      	b.n	8009040 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d903      	bls.n	8009052 <pvPortMalloc+0xa6>
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f1      	bne.n	8009036 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009052:	4b37      	ldr	r3, [pc, #220]	@ (8009130 <pvPortMalloc+0x184>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009058:	429a      	cmp	r2, r3
 800905a:	d051      	beq.n	8009100 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2208      	movs	r2, #8
 8009062:	4413      	add	r3, r2
 8009064:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800906e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	1ad2      	subs	r2, r2, r3
 8009076:	2308      	movs	r3, #8
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	429a      	cmp	r2, r3
 800907c:	d920      	bls.n	80090c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800907e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4413      	add	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <pvPortMalloc+0xfc>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	613b      	str	r3, [r7, #16]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090ba:	69b8      	ldr	r0, [r7, #24]
 80090bc:	f000 f90a 	bl	80092d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009138 <pvPortMalloc+0x18c>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009138 <pvPortMalloc+0x18c>)
 80090cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090ce:	4b1a      	ldr	r3, [pc, #104]	@ (8009138 <pvPortMalloc+0x18c>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009140 <pvPortMalloc+0x194>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d203      	bcs.n	80090e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090da:	4b17      	ldr	r3, [pc, #92]	@ (8009138 <pvPortMalloc+0x18c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a18      	ldr	r2, [pc, #96]	@ (8009140 <pvPortMalloc+0x194>)
 80090e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e4:	685a      	ldr	r2, [r3, #4]
 80090e6:	4b13      	ldr	r3, [pc, #76]	@ (8009134 <pvPortMalloc+0x188>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	431a      	orrs	r2, r3
 80090ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090f6:	4b13      	ldr	r3, [pc, #76]	@ (8009144 <pvPortMalloc+0x198>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3301      	adds	r3, #1
 80090fc:	4a11      	ldr	r2, [pc, #68]	@ (8009144 <pvPortMalloc+0x198>)
 80090fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009100:	f7fe ffd6 	bl	80080b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	f003 0307 	and.w	r3, r3, #7
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <pvPortMalloc+0x17a>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	60fb      	str	r3, [r7, #12]
}
 8009120:	bf00      	nop
 8009122:	bf00      	nop
 8009124:	e7fd      	b.n	8009122 <pvPortMalloc+0x176>
	return pvReturn;
 8009126:	69fb      	ldr	r3, [r7, #28]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3728      	adds	r7, #40	@ 0x28
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20012f1c 	.word	0x20012f1c
 8009134:	20012f30 	.word	0x20012f30
 8009138:	20012f20 	.word	0x20012f20
 800913c:	20012f14 	.word	0x20012f14
 8009140:	20012f24 	.word	0x20012f24
 8009144:	20012f28 	.word	0x20012f28

08009148 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d04f      	beq.n	80091fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800915a:	2308      	movs	r3, #8
 800915c:	425b      	negs	r3, r3
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4413      	add	r3, r2
 8009162:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	4b25      	ldr	r3, [pc, #148]	@ (8009204 <vPortFree+0xbc>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4013      	ands	r3, r2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10b      	bne.n	800918e <vPortFree+0x46>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	60fb      	str	r3, [r7, #12]
}
 8009188:	bf00      	nop
 800918a:	bf00      	nop
 800918c:	e7fd      	b.n	800918a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <vPortFree+0x66>
	__asm volatile
 8009196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	60bb      	str	r3, [r7, #8]
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	e7fd      	b.n	80091aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	4b14      	ldr	r3, [pc, #80]	@ (8009204 <vPortFree+0xbc>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4013      	ands	r3, r2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d01e      	beq.n	80091fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d11a      	bne.n	80091fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <vPortFree+0xbc>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	401a      	ands	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091d4:	f7fe ff5e 	bl	8008094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <vPortFree+0xc0>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <vPortFree+0xc0>)
 80091e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091e6:	6938      	ldr	r0, [r7, #16]
 80091e8:	f000 f874 	bl	80092d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <vPortFree+0xc4>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	4a06      	ldr	r2, [pc, #24]	@ (800920c <vPortFree+0xc4>)
 80091f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091f6:	f7fe ff5b 	bl	80080b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091fa:	bf00      	nop
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20012f30 	.word	0x20012f30
 8009208:	20012f20 	.word	0x20012f20
 800920c:	20012f2c 	.word	0x20012f2c

08009210 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009216:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800921a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800921c:	4b27      	ldr	r3, [pc, #156]	@ (80092bc <prvHeapInit+0xac>)
 800921e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3307      	adds	r3, #7
 800922e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0307 	bic.w	r3, r3, #7
 8009236:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	4a1f      	ldr	r2, [pc, #124]	@ (80092bc <prvHeapInit+0xac>)
 8009240:	4413      	add	r3, r2
 8009242:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009248:	4a1d      	ldr	r2, [pc, #116]	@ (80092c0 <prvHeapInit+0xb0>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800924e:	4b1c      	ldr	r3, [pc, #112]	@ (80092c0 <prvHeapInit+0xb0>)
 8009250:	2200      	movs	r2, #0
 8009252:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	4413      	add	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800925c:	2208      	movs	r2, #8
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0307 	bic.w	r3, r3, #7
 800926a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4a15      	ldr	r2, [pc, #84]	@ (80092c4 <prvHeapInit+0xb4>)
 8009270:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009272:	4b14      	ldr	r3, [pc, #80]	@ (80092c4 <prvHeapInit+0xb4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2200      	movs	r2, #0
 8009278:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800927a:	4b12      	ldr	r3, [pc, #72]	@ (80092c4 <prvHeapInit+0xb4>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	1ad2      	subs	r2, r2, r3
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009290:	4b0c      	ldr	r3, [pc, #48]	@ (80092c4 <prvHeapInit+0xb4>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4a0a      	ldr	r2, [pc, #40]	@ (80092c8 <prvHeapInit+0xb8>)
 800929e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	4a09      	ldr	r2, [pc, #36]	@ (80092cc <prvHeapInit+0xbc>)
 80092a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092a8:	4b09      	ldr	r3, [pc, #36]	@ (80092d0 <prvHeapInit+0xc0>)
 80092aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092ae:	601a      	str	r2, [r3, #0]
}
 80092b0:	bf00      	nop
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	2000f314 	.word	0x2000f314
 80092c0:	20012f14 	.word	0x20012f14
 80092c4:	20012f1c 	.word	0x20012f1c
 80092c8:	20012f24 	.word	0x20012f24
 80092cc:	20012f20 	.word	0x20012f20
 80092d0:	20012f30 	.word	0x20012f30

080092d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092dc:	4b28      	ldr	r3, [pc, #160]	@ (8009380 <prvInsertBlockIntoFreeList+0xac>)
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	e002      	b.n	80092e8 <prvInsertBlockIntoFreeList+0x14>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d8f7      	bhi.n	80092e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	4413      	add	r3, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d108      	bne.n	8009316 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	441a      	add	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	441a      	add	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d118      	bne.n	800935c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4b15      	ldr	r3, [pc, #84]	@ (8009384 <prvInsertBlockIntoFreeList+0xb0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d00d      	beq.n	8009352 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	441a      	add	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	e008      	b.n	8009364 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009352:	4b0c      	ldr	r3, [pc, #48]	@ (8009384 <prvInsertBlockIntoFreeList+0xb0>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e003      	b.n	8009364 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d002      	beq.n	8009372 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	20012f14 	.word	0x20012f14
 8009384:	20012f1c 	.word	0x20012f1c

08009388 <rcl_get_zero_initialized_node>:
 8009388:	4a03      	ldr	r2, [pc, #12]	@ (8009398 <rcl_get_zero_initialized_node+0x10>)
 800938a:	4603      	mov	r3, r0
 800938c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009390:	e883 0003 	stmia.w	r3, {r0, r1}
 8009394:	4618      	mov	r0, r3
 8009396:	4770      	bx	lr
 8009398:	080192f4 	.word	0x080192f4

0800939c <rcl_node_init>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	b0a9      	sub	sp, #164	@ 0xa4
 80093a2:	4604      	mov	r4, r0
 80093a4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80093a8:	a823      	add	r0, sp, #140	@ 0x8c
 80093aa:	460e      	mov	r6, r1
 80093ac:	4615      	mov	r5, r2
 80093ae:	461f      	mov	r7, r3
 80093b0:	f006 fa08 	bl	800f7c4 <rcl_guard_condition_get_default_options>
 80093b4:	f1b8 0f00 	cmp.w	r8, #0
 80093b8:	f000 80e6 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093bc:	4640      	mov	r0, r8
 80093be:	f001 fbdf 	bl	800ab80 <rcutils_allocator_is_valid>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	f000 80e0 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093c8:	2e00      	cmp	r6, #0
 80093ca:	f000 80dd 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	f000 80da 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093d4:	2c00      	cmp	r4, #0
 80093d6:	f000 80d7 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80093de:	f1b9 0f00 	cmp.w	r9, #0
 80093e2:	f040 80fd 	bne.w	80095e0 <rcl_node_init+0x244>
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	f000 80ce 	beq.w	8009588 <rcl_node_init+0x1ec>
 80093ec:	4638      	mov	r0, r7
 80093ee:	f006 f8f3 	bl	800f5d8 <rcl_context_is_valid>
 80093f2:	4682      	mov	sl, r0
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f000 80cd 	beq.w	8009594 <rcl_node_init+0x1f8>
 80093fa:	464a      	mov	r2, r9
 80093fc:	a922      	add	r1, sp, #136	@ 0x88
 80093fe:	4630      	mov	r0, r6
 8009400:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8009404:	f001 fe54 	bl	800b0b0 <rmw_validate_node_name>
 8009408:	4681      	mov	r9, r0
 800940a:	2800      	cmp	r0, #0
 800940c:	f040 80be 	bne.w	800958c <rcl_node_init+0x1f0>
 8009410:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8009412:	2800      	cmp	r0, #0
 8009414:	f040 80f0 	bne.w	80095f8 <rcl_node_init+0x25c>
 8009418:	4628      	mov	r0, r5
 800941a:	f7f6 ff59 	bl	80002d0 <strlen>
 800941e:	2800      	cmp	r0, #0
 8009420:	f040 80bb 	bne.w	800959a <rcl_node_init+0x1fe>
 8009424:	4d7c      	ldr	r5, [pc, #496]	@ (8009618 <rcl_node_init+0x27c>)
 8009426:	a922      	add	r1, sp, #136	@ 0x88
 8009428:	2200      	movs	r2, #0
 800942a:	4628      	mov	r0, r5
 800942c:	f001 fe22 	bl	800b074 <rmw_validate_namespace>
 8009430:	4681      	mov	r9, r0
 8009432:	2800      	cmp	r0, #0
 8009434:	f040 80aa 	bne.w	800958c <rcl_node_init+0x1f0>
 8009438:	4682      	mov	sl, r0
 800943a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800943c:	2800      	cmp	r0, #0
 800943e:	f040 80e0 	bne.w	8009602 <rcl_node_init+0x266>
 8009442:	f8d8 3000 	ldr.w	r3, [r8]
 8009446:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800944a:	2078      	movs	r0, #120	@ 0x78
 800944c:	4798      	blx	r3
 800944e:	4681      	mov	r9, r0
 8009450:	6060      	str	r0, [r4, #4]
 8009452:	2800      	cmp	r0, #0
 8009454:	f000 80ca 	beq.w	80095ec <rcl_node_init+0x250>
 8009458:	2200      	movs	r2, #0
 800945a:	2300      	movs	r3, #0
 800945c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8009460:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8009464:	a808      	add	r0, sp, #32
 8009466:	f000 f939 	bl	80096dc <rcl_node_get_default_options>
 800946a:	a908      	add	r1, sp, #32
 800946c:	4648      	mov	r0, r9
 800946e:	2268      	movs	r2, #104	@ 0x68
 8009470:	f00d ff51 	bl	8017316 <memcpy>
 8009474:	6861      	ldr	r1, [r4, #4]
 8009476:	6027      	str	r7, [r4, #0]
 8009478:	4640      	mov	r0, r8
 800947a:	f000 f93d 	bl	80096f8 <rcl_node_options_copy>
 800947e:	2800      	cmp	r0, #0
 8009480:	d158      	bne.n	8009534 <rcl_node_init+0x198>
 8009482:	4628      	mov	r0, r5
 8009484:	f7f6 ff24 	bl	80002d0 <strlen>
 8009488:	4428      	add	r0, r5
 800948a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800948e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8009492:	2b2f      	cmp	r3, #47	@ 0x2f
 8009494:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	bf0c      	ite	eq
 800949c:	4b5f      	ldreq	r3, [pc, #380]	@ (800961c <rcl_node_init+0x280>)
 800949e:	4b60      	ldrne	r3, [pc, #384]	@ (8009620 <rcl_node_init+0x284>)
 80094a0:	9302      	str	r3, [sp, #8]
 80094a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094a6:	9301      	str	r3, [sp, #4]
 80094a8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80094ac:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80094b0:	f001 fbbe 	bl	800ac30 <rcutils_format_string_limit>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	4631      	mov	r1, r6
 80094be:	3028      	adds	r0, #40	@ 0x28
 80094c0:	462a      	mov	r2, r5
 80094c2:	6866      	ldr	r6, [r4, #4]
 80094c4:	f001 fee2 	bl	800b28c <rmw_create_node>
 80094c8:	6863      	ldr	r3, [r4, #4]
 80094ca:	66b0      	str	r0, [r6, #104]	@ 0x68
 80094cc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d032      	beq.n	8009538 <rcl_node_init+0x19c>
 80094d2:	f001 ff6f 	bl	800b3b4 <rmw_node_get_graph_guard_condition>
 80094d6:	4681      	mov	r9, r0
 80094d8:	b360      	cbz	r0, 8009534 <rcl_node_init+0x198>
 80094da:	f8d8 3000 	ldr.w	r3, [r8]
 80094de:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80094e2:	6866      	ldr	r6, [r4, #4]
 80094e4:	2008      	movs	r0, #8
 80094e6:	4798      	blx	r3
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80094ec:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80094f0:	f1bb 0f00 	cmp.w	fp, #0
 80094f4:	d020      	beq.n	8009538 <rcl_node_init+0x19c>
 80094f6:	a806      	add	r0, sp, #24
 80094f8:	f006 f8d4 	bl	800f6a4 <rcl_get_zero_initialized_guard_condition>
 80094fc:	a806      	add	r0, sp, #24
 80094fe:	c803      	ldmia	r0, {r0, r1}
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	46c4      	mov	ip, r8
 8009504:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8009508:	e88b 0003 	stmia.w	fp, {r0, r1}
 800950c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009510:	ae23      	add	r6, sp, #140	@ 0x8c
 8009512:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009514:	f8dc 3000 	ldr.w	r3, [ip]
 8009518:	6033      	str	r3, [r6, #0]
 800951a:	ab28      	add	r3, sp, #160	@ 0xa0
 800951c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8009520:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009524:	4649      	mov	r1, r9
 8009526:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009528:	463a      	mov	r2, r7
 800952a:	4670      	mov	r0, lr
 800952c:	f006 f8c4 	bl	800f6b8 <rcl_guard_condition_init_from_rmw>
 8009530:	4681      	mov	r9, r0
 8009532:	b328      	cbz	r0, 8009580 <rcl_node_init+0x1e4>
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	b1f3      	cbz	r3, 8009576 <rcl_node_init+0x1da>
 8009538:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800953a:	b128      	cbz	r0, 8009548 <rcl_node_init+0x1ac>
 800953c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009540:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009544:	4798      	blx	r3
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800954a:	b110      	cbz	r0, 8009552 <rcl_node_init+0x1b6>
 800954c:	f001 feb6 	bl	800b2bc <rmw_destroy_node>
 8009550:	6863      	ldr	r3, [r4, #4]
 8009552:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009554:	b148      	cbz	r0, 800956a <rcl_node_init+0x1ce>
 8009556:	f006 f90f 	bl	800f778 <rcl_guard_condition_fini>
 800955a:	6863      	ldr	r3, [r4, #4]
 800955c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8009560:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009566:	4798      	blx	r3
 8009568:	6863      	ldr	r3, [r4, #4]
 800956a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800956e:	4618      	mov	r0, r3
 8009570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009574:	4798      	blx	r3
 8009576:	2300      	movs	r3, #0
 8009578:	e9c4 3300 	strd	r3, r3, [r4]
 800957c:	f04f 0901 	mov.w	r9, #1
 8009580:	f1ba 0f00 	cmp.w	sl, #0
 8009584:	d125      	bne.n	80095d2 <rcl_node_init+0x236>
 8009586:	e001      	b.n	800958c <rcl_node_init+0x1f0>
 8009588:	f04f 090b 	mov.w	r9, #11
 800958c:	4648      	mov	r0, r9
 800958e:	b029      	add	sp, #164	@ 0xa4
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8009598:	e7f8      	b.n	800958c <rcl_node_init+0x1f0>
 800959a:	782b      	ldrb	r3, [r5, #0]
 800959c:	2b2f      	cmp	r3, #47	@ 0x2f
 800959e:	f43f af42 	beq.w	8009426 <rcl_node_init+0x8a>
 80095a2:	9503      	str	r5, [sp, #12]
 80095a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009624 <rcl_node_init+0x288>)
 80095ac:	9302      	str	r3, [sp, #8]
 80095ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80095b8:	f001 fb3a 	bl	800ac30 <rcutils_format_string_limit>
 80095bc:	4605      	mov	r5, r0
 80095be:	b340      	cbz	r0, 8009612 <rcl_node_init+0x276>
 80095c0:	2200      	movs	r2, #0
 80095c2:	a922      	add	r1, sp, #136	@ 0x88
 80095c4:	9222      	str	r2, [sp, #136]	@ 0x88
 80095c6:	f001 fd55 	bl	800b074 <rmw_validate_namespace>
 80095ca:	4681      	mov	r9, r0
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f43f af34 	beq.w	800943a <rcl_node_init+0x9e>
 80095d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80095da:	4628      	mov	r0, r5
 80095dc:	4798      	blx	r3
 80095de:	e7d5      	b.n	800958c <rcl_node_init+0x1f0>
 80095e0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80095e4:	4648      	mov	r0, r9
 80095e6:	b029      	add	sp, #164	@ 0xa4
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	f04f 090a 	mov.w	r9, #10
 80095f0:	f1ba 0f00 	cmp.w	sl, #0
 80095f4:	d1ed      	bne.n	80095d2 <rcl_node_init+0x236>
 80095f6:	e7c9      	b.n	800958c <rcl_node_init+0x1f0>
 80095f8:	f001 fdac 	bl	800b154 <rmw_node_name_validation_result_string>
 80095fc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8009600:	e7c4      	b.n	800958c <rcl_node_init+0x1f0>
 8009602:	f001 fd49 	bl	800b098 <rmw_namespace_validation_result_string>
 8009606:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800960a:	f1ba 0f00 	cmp.w	sl, #0
 800960e:	d1e0      	bne.n	80095d2 <rcl_node_init+0x236>
 8009610:	e7bc      	b.n	800958c <rcl_node_init+0x1f0>
 8009612:	f04f 090a 	mov.w	r9, #10
 8009616:	e7b9      	b.n	800958c <rcl_node_init+0x1f0>
 8009618:	080192dc 	.word	0x080192dc
 800961c:	080192e4 	.word	0x080192e4
 8009620:	080192ec 	.word	0x080192ec
 8009624:	080192e0 	.word	0x080192e0

08009628 <rcl_node_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	b320      	cbz	r0, 8009676 <rcl_node_fini+0x4e>
 800962c:	6845      	ldr	r5, [r0, #4]
 800962e:	4604      	mov	r4, r0
 8009630:	b1fd      	cbz	r5, 8009672 <rcl_node_fini+0x4a>
 8009632:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8009634:	686f      	ldr	r7, [r5, #4]
 8009636:	692e      	ldr	r6, [r5, #16]
 8009638:	f001 fe40 	bl	800b2bc <rmw_destroy_node>
 800963c:	6863      	ldr	r3, [r4, #4]
 800963e:	4605      	mov	r5, r0
 8009640:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009642:	f006 f899 	bl	800f778 <rcl_guard_condition_fini>
 8009646:	ea55 0300 	orrs.w	r3, r5, r0
 800964a:	6863      	ldr	r3, [r4, #4]
 800964c:	4631      	mov	r1, r6
 800964e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009650:	bf14      	ite	ne
 8009652:	2501      	movne	r5, #1
 8009654:	2500      	moveq	r5, #0
 8009656:	47b8      	blx	r7
 8009658:	6863      	ldr	r3, [r4, #4]
 800965a:	4631      	mov	r1, r6
 800965c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800965e:	47b8      	blx	r7
 8009660:	6863      	ldr	r3, [r4, #4]
 8009662:	4631      	mov	r1, r6
 8009664:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009666:	47b8      	blx	r7
 8009668:	6860      	ldr	r0, [r4, #4]
 800966a:	4631      	mov	r1, r6
 800966c:	47b8      	blx	r7
 800966e:	2300      	movs	r3, #0
 8009670:	6063      	str	r3, [r4, #4]
 8009672:	4628      	mov	r0, r5
 8009674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009676:	25c8      	movs	r5, #200	@ 0xc8
 8009678:	4628      	mov	r0, r5
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800967c <rcl_node_is_valid_except_context>:
 800967c:	b128      	cbz	r0, 800968a <rcl_node_is_valid_except_context+0xe>
 800967e:	6840      	ldr	r0, [r0, #4]
 8009680:	b118      	cbz	r0, 800968a <rcl_node_is_valid_except_context+0xe>
 8009682:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8009684:	3800      	subs	r0, #0
 8009686:	bf18      	it	ne
 8009688:	2001      	movne	r0, #1
 800968a:	4770      	bx	lr

0800968c <rcl_node_is_valid>:
 800968c:	b130      	cbz	r0, 800969c <rcl_node_is_valid+0x10>
 800968e:	6843      	ldr	r3, [r0, #4]
 8009690:	b123      	cbz	r3, 800969c <rcl_node_is_valid+0x10>
 8009692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009694:	b113      	cbz	r3, 800969c <rcl_node_is_valid+0x10>
 8009696:	6800      	ldr	r0, [r0, #0]
 8009698:	f005 bf9e 	b.w	800f5d8 <rcl_context_is_valid>
 800969c:	2000      	movs	r0, #0
 800969e:	4770      	bx	lr

080096a0 <rcl_node_get_name>:
 80096a0:	b120      	cbz	r0, 80096ac <rcl_node_get_name+0xc>
 80096a2:	6840      	ldr	r0, [r0, #4]
 80096a4:	b110      	cbz	r0, 80096ac <rcl_node_get_name+0xc>
 80096a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80096a8:	b100      	cbz	r0, 80096ac <rcl_node_get_name+0xc>
 80096aa:	6880      	ldr	r0, [r0, #8]
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop

080096b0 <rcl_node_get_namespace>:
 80096b0:	b120      	cbz	r0, 80096bc <rcl_node_get_namespace+0xc>
 80096b2:	6840      	ldr	r0, [r0, #4]
 80096b4:	b110      	cbz	r0, 80096bc <rcl_node_get_namespace+0xc>
 80096b6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80096b8:	b100      	cbz	r0, 80096bc <rcl_node_get_namespace+0xc>
 80096ba:	68c0      	ldr	r0, [r0, #12]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop

080096c0 <rcl_node_get_options>:
 80096c0:	b128      	cbz	r0, 80096ce <rcl_node_get_options+0xe>
 80096c2:	6840      	ldr	r0, [r0, #4]
 80096c4:	b118      	cbz	r0, 80096ce <rcl_node_get_options+0xe>
 80096c6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bf08      	it	eq
 80096cc:	2000      	moveq	r0, #0
 80096ce:	4770      	bx	lr

080096d0 <rcl_node_get_rmw_handle>:
 80096d0:	b110      	cbz	r0, 80096d8 <rcl_node_get_rmw_handle+0x8>
 80096d2:	6840      	ldr	r0, [r0, #4]
 80096d4:	b100      	cbz	r0, 80096d8 <rcl_node_get_rmw_handle+0x8>
 80096d6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop

080096dc <rcl_node_get_default_options>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	2268      	movs	r2, #104	@ 0x68
 80096e0:	4604      	mov	r4, r0
 80096e2:	2100      	movs	r1, #0
 80096e4:	f00d fcf4 	bl	80170d0 <memset>
 80096e8:	4620      	mov	r0, r4
 80096ea:	f001 fa3b 	bl	800ab64 <rcutils_get_default_allocator>
 80096ee:	2301      	movs	r3, #1
 80096f0:	7523      	strb	r3, [r4, #20]
 80096f2:	4620      	mov	r0, r4
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop

080096f8 <rcl_node_options_copy>:
 80096f8:	b1d0      	cbz	r0, 8009730 <rcl_node_options_copy+0x38>
 80096fa:	b570      	push	{r4, r5, r6, lr}
 80096fc:	460c      	mov	r4, r1
 80096fe:	b1a9      	cbz	r1, 800972c <rcl_node_options_copy+0x34>
 8009700:	4288      	cmp	r0, r1
 8009702:	4684      	mov	ip, r0
 8009704:	d012      	beq.n	800972c <rcl_node_options_copy+0x34>
 8009706:	4605      	mov	r5, r0
 8009708:	8a86      	ldrh	r6, [r0, #20]
 800970a:	468e      	mov	lr, r1
 800970c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800970e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	f8ce 3000 	str.w	r3, [lr]
 8009718:	f10c 0118 	add.w	r1, ip, #24
 800971c:	2250      	movs	r2, #80	@ 0x50
 800971e:	82a6      	strh	r6, [r4, #20]
 8009720:	f104 0018 	add.w	r0, r4, #24
 8009724:	f00d fdf7 	bl	8017316 <memcpy>
 8009728:	2000      	movs	r0, #0
 800972a:	bd70      	pop	{r4, r5, r6, pc}
 800972c:	200b      	movs	r0, #11
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	200b      	movs	r0, #11
 8009732:	4770      	bx	lr

08009734 <rcl_get_zero_initialized_publisher>:
 8009734:	4b01      	ldr	r3, [pc, #4]	@ (800973c <rcl_get_zero_initialized_publisher+0x8>)
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	080192fc 	.word	0x080192fc

08009740 <rcl_publisher_init>:
 8009740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009744:	b088      	sub	sp, #32
 8009746:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009748:	2d00      	cmp	r5, #0
 800974a:	d069      	beq.n	8009820 <rcl_publisher_init+0xe0>
 800974c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009750:	4604      	mov	r4, r0
 8009752:	4648      	mov	r0, r9
 8009754:	460e      	mov	r6, r1
 8009756:	4690      	mov	r8, r2
 8009758:	461f      	mov	r7, r3
 800975a:	f001 fa11 	bl	800ab80 <rcutils_allocator_is_valid>
 800975e:	2800      	cmp	r0, #0
 8009760:	d05e      	beq.n	8009820 <rcl_publisher_init+0xe0>
 8009762:	2c00      	cmp	r4, #0
 8009764:	d05c      	beq.n	8009820 <rcl_publisher_init+0xe0>
 8009766:	f8d4 a000 	ldr.w	sl, [r4]
 800976a:	f1ba 0f00 	cmp.w	sl, #0
 800976e:	d004      	beq.n	800977a <rcl_publisher_init+0x3a>
 8009770:	2764      	movs	r7, #100	@ 0x64
 8009772:	4638      	mov	r0, r7
 8009774:	b008      	add	sp, #32
 8009776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977a:	4630      	mov	r0, r6
 800977c:	f7ff ff86 	bl	800968c <rcl_node_is_valid>
 8009780:	2800      	cmp	r0, #0
 8009782:	d052      	beq.n	800982a <rcl_publisher_init+0xea>
 8009784:	f1b8 0f00 	cmp.w	r8, #0
 8009788:	d04a      	beq.n	8009820 <rcl_publisher_init+0xe0>
 800978a:	2f00      	cmp	r7, #0
 800978c:	d048      	beq.n	8009820 <rcl_publisher_init+0xe0>
 800978e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009792:	aa07      	add	r2, sp, #28
 8009794:	9205      	str	r2, [sp, #20]
 8009796:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800979a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800979e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80097a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80097a6:	4639      	mov	r1, r7
 80097a8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80097ac:	4630      	mov	r0, r6
 80097ae:	f006 fa4f 	bl	800fc50 <rcl_node_resolve_name>
 80097b2:	4607      	mov	r7, r0
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d14f      	bne.n	8009858 <rcl_publisher_init+0x118>
 80097b8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80097ba:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80097bc:	20c8      	movs	r0, #200	@ 0xc8
 80097be:	4798      	blx	r3
 80097c0:	6020      	str	r0, [r4, #0]
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d04e      	beq.n	8009864 <rcl_publisher_init+0x124>
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ff82 	bl	80096d0 <rcl_node_get_rmw_handle>
 80097cc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	9a07      	ldr	r2, [sp, #28]
 80097d4:	6827      	ldr	r7, [r4, #0]
 80097d6:	462b      	mov	r3, r5
 80097d8:	4641      	mov	r1, r8
 80097da:	f001 fe55 	bl	800b488 <rmw_create_publisher>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80097e4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80097e8:	b370      	cbz	r0, 8009848 <rcl_publisher_init+0x108>
 80097ea:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80097ee:	f001 ff29 	bl	800b644 <rmw_publisher_get_actual_qos>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	4607      	mov	r7, r0
 80097f6:	b9d0      	cbnz	r0, 800982e <rcl_publisher_init+0xee>
 80097f8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80097fc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009800:	4629      	mov	r1, r5
 8009802:	2270      	movs	r2, #112	@ 0x70
 8009804:	4618      	mov	r0, r3
 8009806:	f00d fd86 	bl	8017316 <memcpy>
 800980a:	6832      	ldr	r2, [r6, #0]
 800980c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009810:	9807      	ldr	r0, [sp, #28]
 8009812:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009814:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009816:	4798      	blx	r3
 8009818:	4638      	mov	r0, r7
 800981a:	b008      	add	sp, #32
 800981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009820:	270b      	movs	r7, #11
 8009822:	4638      	mov	r0, r7
 8009824:	b008      	add	sp, #32
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	27c8      	movs	r7, #200	@ 0xc8
 800982c:	e7a1      	b.n	8009772 <rcl_publisher_init+0x32>
 800982e:	b18b      	cbz	r3, 8009854 <rcl_publisher_init+0x114>
 8009830:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009834:	b142      	cbz	r2, 8009848 <rcl_publisher_init+0x108>
 8009836:	4630      	mov	r0, r6
 8009838:	f7ff ff4a 	bl	80096d0 <rcl_node_get_rmw_handle>
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009842:	f001 ff0f 	bl	800b664 <rmw_destroy_publisher>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800984a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800984c:	4618      	mov	r0, r3
 800984e:	4790      	blx	r2
 8009850:	2300      	movs	r3, #0
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	2701      	movs	r7, #1
 8009856:	e7db      	b.n	8009810 <rcl_publisher_init+0xd0>
 8009858:	2867      	cmp	r0, #103	@ 0x67
 800985a:	d0d9      	beq.n	8009810 <rcl_publisher_init+0xd0>
 800985c:	2869      	cmp	r0, #105	@ 0x69
 800985e:	d003      	beq.n	8009868 <rcl_publisher_init+0x128>
 8009860:	280a      	cmp	r0, #10
 8009862:	d1f7      	bne.n	8009854 <rcl_publisher_init+0x114>
 8009864:	270a      	movs	r7, #10
 8009866:	e7d3      	b.n	8009810 <rcl_publisher_init+0xd0>
 8009868:	2767      	movs	r7, #103	@ 0x67
 800986a:	e7d1      	b.n	8009810 <rcl_publisher_init+0xd0>

0800986c <rcl_publisher_fini>:
 800986c:	b570      	push	{r4, r5, r6, lr}
 800986e:	b300      	cbz	r0, 80098b2 <rcl_publisher_fini+0x46>
 8009870:	4604      	mov	r4, r0
 8009872:	4608      	mov	r0, r1
 8009874:	460d      	mov	r5, r1
 8009876:	f7ff ff01 	bl	800967c <rcl_node_is_valid_except_context>
 800987a:	b1f0      	cbz	r0, 80098ba <rcl_publisher_fini+0x4e>
 800987c:	6823      	ldr	r3, [r4, #0]
 800987e:	b1ab      	cbz	r3, 80098ac <rcl_publisher_fini+0x40>
 8009880:	4628      	mov	r0, r5
 8009882:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 8009884:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8009886:	f7ff ff23 	bl	80096d0 <rcl_node_get_rmw_handle>
 800988a:	b1c8      	cbz	r0, 80098c0 <rcl_publisher_fini+0x54>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009892:	f001 fee7 	bl	800b664 <rmw_destroy_publisher>
 8009896:	4603      	mov	r3, r0
 8009898:	4629      	mov	r1, r5
 800989a:	6820      	ldr	r0, [r4, #0]
 800989c:	1e1d      	subs	r5, r3, #0
 800989e:	bf18      	it	ne
 80098a0:	2501      	movne	r5, #1
 80098a2:	47b0      	blx	r6
 80098a4:	2300      	movs	r3, #0
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	4628      	mov	r0, r5
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	461d      	mov	r5, r3
 80098ae:	4628      	mov	r0, r5
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80098b6:	4628      	mov	r0, r5
 80098b8:	bd70      	pop	{r4, r5, r6, pc}
 80098ba:	25c8      	movs	r5, #200	@ 0xc8
 80098bc:	4628      	mov	r0, r5
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	250b      	movs	r5, #11
 80098c2:	e7f1      	b.n	80098a8 <rcl_publisher_fini+0x3c>

080098c4 <rcl_publisher_get_default_options>:
 80098c4:	b570      	push	{r4, r5, r6, lr}
 80098c6:	4d14      	ldr	r5, [pc, #80]	@ (8009918 <rcl_publisher_get_default_options+0x54>)
 80098c8:	4914      	ldr	r1, [pc, #80]	@ (800991c <rcl_publisher_get_default_options+0x58>)
 80098ca:	b088      	sub	sp, #32
 80098cc:	4604      	mov	r4, r0
 80098ce:	2250      	movs	r2, #80	@ 0x50
 80098d0:	4628      	mov	r0, r5
 80098d2:	f00d fd20 	bl	8017316 <memcpy>
 80098d6:	a802      	add	r0, sp, #8
 80098d8:	f001 f944 	bl	800ab64 <rcutils_get_default_allocator>
 80098dc:	f10d 0c08 	add.w	ip, sp, #8
 80098e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098e4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80098e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80098ec:	466e      	mov	r6, sp
 80098ee:	f8dc 3000 	ldr.w	r3, [ip]
 80098f2:	f8ce 3000 	str.w	r3, [lr]
 80098f6:	4630      	mov	r0, r6
 80098f8:	f001 fb42 	bl	800af80 <rmw_get_default_publisher_options>
 80098fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009900:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009904:	e883 0003 	stmia.w	r3, {r0, r1}
 8009908:	2270      	movs	r2, #112	@ 0x70
 800990a:	4629      	mov	r1, r5
 800990c:	4620      	mov	r0, r4
 800990e:	f00d fd02 	bl	8017316 <memcpy>
 8009912:	4620      	mov	r0, r4
 8009914:	b008      	add	sp, #32
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	20012f38 	.word	0x20012f38
 800991c:	08019300 	.word	0x08019300

08009920 <rcl_publish>:
 8009920:	b1f8      	cbz	r0, 8009962 <rcl_publish+0x42>
 8009922:	6803      	ldr	r3, [r0, #0]
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4604      	mov	r4, r0
 8009928:	b1b3      	cbz	r3, 8009958 <rcl_publish+0x38>
 800992a:	4616      	mov	r6, r2
 800992c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009930:	b192      	cbz	r2, 8009958 <rcl_publish+0x38>
 8009932:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009936:	460d      	mov	r5, r1
 8009938:	f005 fe4e 	bl	800f5d8 <rcl_context_is_valid>
 800993c:	b160      	cbz	r0, 8009958 <rcl_publish+0x38>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009944:	b140      	cbz	r0, 8009958 <rcl_publish+0x38>
 8009946:	b155      	cbz	r5, 800995e <rcl_publish+0x3e>
 8009948:	4632      	mov	r2, r6
 800994a:	4629      	mov	r1, r5
 800994c:	f001 fd3c 	bl	800b3c8 <rmw_publish>
 8009950:	3800      	subs	r0, #0
 8009952:	bf18      	it	ne
 8009954:	2001      	movne	r0, #1
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800995c:	bd70      	pop	{r4, r5, r6, pc}
 800995e:	200b      	movs	r0, #11
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009966:	4770      	bx	lr

08009968 <rcl_publisher_is_valid>:
 8009968:	b1a0      	cbz	r0, 8009994 <rcl_publisher_is_valid+0x2c>
 800996a:	6803      	ldr	r3, [r0, #0]
 800996c:	b510      	push	{r4, lr}
 800996e:	4604      	mov	r4, r0
 8009970:	b173      	cbz	r3, 8009990 <rcl_publisher_is_valid+0x28>
 8009972:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009976:	b15a      	cbz	r2, 8009990 <rcl_publisher_is_valid+0x28>
 8009978:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800997c:	f005 fe2c 	bl	800f5d8 <rcl_context_is_valid>
 8009980:	b130      	cbz	r0, 8009990 <rcl_publisher_is_valid+0x28>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009988:	3800      	subs	r0, #0
 800998a:	bf18      	it	ne
 800998c:	2001      	movne	r0, #1
 800998e:	bd10      	pop	{r4, pc}
 8009990:	2000      	movs	r0, #0
 8009992:	bd10      	pop	{r4, pc}
 8009994:	2000      	movs	r0, #0
 8009996:	4770      	bx	lr

08009998 <rcl_publisher_is_valid_except_context>:
 8009998:	b130      	cbz	r0, 80099a8 <rcl_publisher_is_valid_except_context+0x10>
 800999a:	6800      	ldr	r0, [r0, #0]
 800999c:	b120      	cbz	r0, 80099a8 <rcl_publisher_is_valid_except_context+0x10>
 800999e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80099a2:	3800      	subs	r0, #0
 80099a4:	bf18      	it	ne
 80099a6:	2001      	movne	r0, #1
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop

080099ac <rcl_get_zero_initialized_subscription>:
 80099ac:	4b01      	ldr	r3, [pc, #4]	@ (80099b4 <rcl_get_zero_initialized_subscription+0x8>)
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	08019350 	.word	0x08019350

080099b8 <rcl_subscription_init>:
 80099b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099bc:	b089      	sub	sp, #36	@ 0x24
 80099be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80099c0:	b1d6      	cbz	r6, 80099f8 <rcl_subscription_init+0x40>
 80099c2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80099c6:	4604      	mov	r4, r0
 80099c8:	4648      	mov	r0, r9
 80099ca:	460d      	mov	r5, r1
 80099cc:	4690      	mov	r8, r2
 80099ce:	461f      	mov	r7, r3
 80099d0:	f001 f8d6 	bl	800ab80 <rcutils_allocator_is_valid>
 80099d4:	b180      	cbz	r0, 80099f8 <rcl_subscription_init+0x40>
 80099d6:	b17c      	cbz	r4, 80099f8 <rcl_subscription_init+0x40>
 80099d8:	4628      	mov	r0, r5
 80099da:	f7ff fe57 	bl	800968c <rcl_node_is_valid>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d054      	beq.n	8009a8c <rcl_subscription_init+0xd4>
 80099e2:	f1b8 0f00 	cmp.w	r8, #0
 80099e6:	d007      	beq.n	80099f8 <rcl_subscription_init+0x40>
 80099e8:	b137      	cbz	r7, 80099f8 <rcl_subscription_init+0x40>
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	b14b      	cbz	r3, 8009a02 <rcl_subscription_init+0x4a>
 80099ee:	2764      	movs	r7, #100	@ 0x64
 80099f0:	4638      	mov	r0, r7
 80099f2:	b009      	add	sp, #36	@ 0x24
 80099f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f8:	270b      	movs	r7, #11
 80099fa:	4638      	mov	r0, r7
 80099fc:	b009      	add	sp, #36	@ 0x24
 80099fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a02:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009a06:	aa07      	add	r2, sp, #28
 8009a08:	9205      	str	r2, [sp, #20]
 8009a0a:	9307      	str	r3, [sp, #28]
 8009a0c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8009a10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009a18:	4639      	mov	r1, r7
 8009a1a:	e899 000c 	ldmia.w	r9, {r2, r3}
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f006 f916 	bl	800fc50 <rcl_node_resolve_name>
 8009a24:	4607      	mov	r7, r0
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d15f      	bne.n	8009aea <rcl_subscription_init+0x132>
 8009a2a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8009a2e:	21c8      	movs	r1, #200	@ 0xc8
 8009a30:	2001      	movs	r0, #1
 8009a32:	4798      	blx	r3
 8009a34:	6020      	str	r0, [r4, #0]
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d05d      	beq.n	8009af6 <rcl_subscription_init+0x13e>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7ff fe48 	bl	80096d0 <rcl_node_get_rmw_handle>
 8009a40:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	9a07      	ldr	r2, [sp, #28]
 8009a48:	6827      	ldr	r7, [r4, #0]
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	4633      	mov	r3, r6
 8009a4e:	f001 fe9f 	bl	800b790 <rmw_create_subscription>
 8009a52:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8009a56:	6827      	ldr	r7, [r4, #0]
 8009a58:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8009a5c:	b348      	cbz	r0, 8009ab2 <rcl_subscription_init+0xfa>
 8009a5e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8009a62:	f001 ff77 	bl	800b954 <rmw_subscription_get_actual_qos>
 8009a66:	4607      	mov	r7, r0
 8009a68:	b9a8      	cbnz	r0, 8009a96 <rcl_subscription_init+0xde>
 8009a6a:	6820      	ldr	r0, [r4, #0]
 8009a6c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8009a70:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8009a74:	2270      	movs	r2, #112	@ 0x70
 8009a76:	4631      	mov	r1, r6
 8009a78:	f00d fc4d 	bl	8017316 <memcpy>
 8009a7c:	9807      	ldr	r0, [sp, #28]
 8009a7e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009a80:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009a82:	4798      	blx	r3
 8009a84:	4638      	mov	r0, r7
 8009a86:	b009      	add	sp, #36	@ 0x24
 8009a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8c:	27c8      	movs	r7, #200	@ 0xc8
 8009a8e:	4638      	mov	r0, r7
 8009a90:	b009      	add	sp, #36	@ 0x24
 8009a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a96:	6827      	ldr	r7, [r4, #0]
 8009a98:	b32f      	cbz	r7, 8009ae6 <rcl_subscription_init+0x12e>
 8009a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009a9e:	b14b      	cbz	r3, 8009ab4 <rcl_subscription_init+0xfc>
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f7ff fe15 	bl	80096d0 <rcl_node_get_rmw_handle>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009aac:	f001 ff62 	bl	800b974 <rmw_destroy_subscription>
 8009ab0:	6827      	ldr	r7, [r4, #0]
 8009ab2:	b197      	cbz	r7, 8009ada <rcl_subscription_init+0x122>
 8009ab4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f001 f861 	bl	800ab80 <rcutils_allocator_is_valid>
 8009abe:	b158      	cbz	r0, 8009ad8 <rcl_subscription_init+0x120>
 8009ac0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ac2:	b148      	cbz	r0, 8009ad8 <rcl_subscription_init+0x120>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f001 fa5f 	bl	800af88 <rmw_subscription_content_filter_options_fini>
 8009aca:	4605      	mov	r5, r0
 8009acc:	b9b8      	cbnz	r0, 8009afe <rcl_subscription_init+0x146>
 8009ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009ad2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ad4:	4798      	blx	r3
 8009ad6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8009ad8:	6827      	ldr	r7, [r4, #0]
 8009ada:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009adc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009ade:	4638      	mov	r0, r7
 8009ae0:	4798      	blx	r3
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	6023      	str	r3, [r4, #0]
 8009ae6:	2701      	movs	r7, #1
 8009ae8:	e7c8      	b.n	8009a7c <rcl_subscription_init+0xc4>
 8009aea:	2867      	cmp	r0, #103	@ 0x67
 8009aec:	d0c6      	beq.n	8009a7c <rcl_subscription_init+0xc4>
 8009aee:	2869      	cmp	r0, #105	@ 0x69
 8009af0:	d003      	beq.n	8009afa <rcl_subscription_init+0x142>
 8009af2:	280a      	cmp	r0, #10
 8009af4:	d1f7      	bne.n	8009ae6 <rcl_subscription_init+0x12e>
 8009af6:	270a      	movs	r7, #10
 8009af8:	e7c0      	b.n	8009a7c <rcl_subscription_init+0xc4>
 8009afa:	2767      	movs	r7, #103	@ 0x67
 8009afc:	e7be      	b.n	8009a7c <rcl_subscription_init+0xc4>
 8009afe:	f005 fd4d 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 8009b02:	6827      	ldr	r7, [r4, #0]
 8009b04:	e7e9      	b.n	8009ada <rcl_subscription_init+0x122>
 8009b06:	bf00      	nop

08009b08 <rcl_subscription_fini>:
 8009b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d039      	beq.n	8009b84 <rcl_subscription_fini+0x7c>
 8009b10:	4604      	mov	r4, r0
 8009b12:	4608      	mov	r0, r1
 8009b14:	460d      	mov	r5, r1
 8009b16:	f7ff fdb1 	bl	800967c <rcl_node_is_valid_except_context>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d037      	beq.n	8009b8e <rcl_subscription_fini+0x86>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	b363      	cbz	r3, 8009b7c <rcl_subscription_fini+0x74>
 8009b22:	4628      	mov	r0, r5
 8009b24:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 8009b26:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 8009b2a:	f7ff fdd1 	bl	80096d0 <rcl_node_get_rmw_handle>
 8009b2e:	b390      	cbz	r0, 8009b96 <rcl_subscription_fini+0x8e>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009b36:	f001 ff1d 	bl	800b974 <rmw_destroy_subscription>
 8009b3a:	6826      	ldr	r6, [r4, #0]
 8009b3c:	1e05      	subs	r5, r0, #0
 8009b3e:	bf18      	it	ne
 8009b40:	2501      	movne	r5, #1
 8009b42:	b37e      	cbz	r6, 8009ba4 <rcl_subscription_fini+0x9c>
 8009b44:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8009b48:	4648      	mov	r0, r9
 8009b4a:	f001 f819 	bl	800ab80 <rcutils_allocator_is_valid>
 8009b4e:	b358      	cbz	r0, 8009ba8 <rcl_subscription_fini+0xa0>
 8009b50:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8009b52:	b150      	cbz	r0, 8009b6a <rcl_subscription_fini+0x62>
 8009b54:	4649      	mov	r1, r9
 8009b56:	f001 fa17 	bl	800af88 <rmw_subscription_content_filter_options_fini>
 8009b5a:	4681      	mov	r9, r0
 8009b5c:	b9e8      	cbnz	r0, 8009b9a <rcl_subscription_fini+0x92>
 8009b5e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009b60:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8009b62:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8009b64:	4798      	blx	r3
 8009b66:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 8009b6a:	6826      	ldr	r6, [r4, #0]
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4641      	mov	r1, r8
 8009b70:	47b8      	blx	r7
 8009b72:	2300      	movs	r3, #0
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	4628      	mov	r0, r5
 8009b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b7c:	461d      	mov	r5, r3
 8009b7e:	4628      	mov	r0, r5
 8009b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b84:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8009b88:	4628      	mov	r0, r5
 8009b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8e:	25c8      	movs	r5, #200	@ 0xc8
 8009b90:	4628      	mov	r0, r5
 8009b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b96:	250b      	movs	r5, #11
 8009b98:	e7f1      	b.n	8009b7e <rcl_subscription_fini+0x76>
 8009b9a:	f005 fcff 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 8009b9e:	6826      	ldr	r6, [r4, #0]
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d0e3      	beq.n	8009b6c <rcl_subscription_fini+0x64>
 8009ba4:	2501      	movs	r5, #1
 8009ba6:	e7e1      	b.n	8009b6c <rcl_subscription_fini+0x64>
 8009ba8:	6826      	ldr	r6, [r4, #0]
 8009baa:	2501      	movs	r5, #1
 8009bac:	e7de      	b.n	8009b6c <rcl_subscription_fini+0x64>
 8009bae:	bf00      	nop

08009bb0 <rcl_subscription_get_default_options>:
 8009bb0:	b570      	push	{r4, r5, r6, lr}
 8009bb2:	4d14      	ldr	r5, [pc, #80]	@ (8009c04 <rcl_subscription_get_default_options+0x54>)
 8009bb4:	4914      	ldr	r1, [pc, #80]	@ (8009c08 <rcl_subscription_get_default_options+0x58>)
 8009bb6:	b08a      	sub	sp, #40	@ 0x28
 8009bb8:	4604      	mov	r4, r0
 8009bba:	2250      	movs	r2, #80	@ 0x50
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f00d fbaa 	bl	8017316 <memcpy>
 8009bc2:	a804      	add	r0, sp, #16
 8009bc4:	f000 ffce 	bl	800ab64 <rcutils_get_default_allocator>
 8009bc8:	f10d 0c10 	add.w	ip, sp, #16
 8009bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bd0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8009bd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009bd8:	466e      	mov	r6, sp
 8009bda:	f8dc 3000 	ldr.w	r3, [ip]
 8009bde:	f8ce 3000 	str.w	r3, [lr]
 8009be2:	4630      	mov	r0, r6
 8009be4:	f001 f9ea 	bl	800afbc <rmw_get_default_subscription_options>
 8009be8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009bec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009bf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bf4:	2270      	movs	r2, #112	@ 0x70
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f00d fb8c 	bl	8017316 <memcpy>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	b00a      	add	sp, #40	@ 0x28
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	20012fa8 	.word	0x20012fa8
 8009c08:	08019358 	.word	0x08019358

08009c0c <rcl_take>:
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d04a      	beq.n	8009ca6 <rcl_take+0x9a>
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	4604      	mov	r4, r0
 8009c16:	6800      	ldr	r0, [r0, #0]
 8009c18:	b0a4      	sub	sp, #144	@ 0x90
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d03b      	beq.n	8009c96 <rcl_take+0x8a>
 8009c1e:	461f      	mov	r7, r3
 8009c20:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d036      	beq.n	8009c96 <rcl_take+0x8a>
 8009c28:	460e      	mov	r6, r1
 8009c2a:	2900      	cmp	r1, #0
 8009c2c:	d039      	beq.n	8009ca2 <rcl_take+0x96>
 8009c2e:	4615      	mov	r5, r2
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	d03c      	beq.n	8009cae <rcl_take+0xa2>
 8009c34:	a802      	add	r0, sp, #8
 8009c36:	f001 f9c7 	bl	800afc8 <rmw_get_zero_initialized_message_info>
 8009c3a:	f10d 0c08 	add.w	ip, sp, #8
 8009c3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c42:	46ae      	mov	lr, r5
 8009c44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c58:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8009c5c:	f04f 0800 	mov.w	r8, #0
 8009c60:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8009c64:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	462b      	mov	r3, r5
 8009c6c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8009c70:	9700      	str	r7, [sp, #0]
 8009c72:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8009c76:	4631      	mov	r1, r6
 8009c78:	f001 fedc 	bl	800ba34 <rmw_take_with_info>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	b9c0      	cbnz	r0, 8009cb2 <rcl_take+0xa6>
 8009c80:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8009c84:	f240 1291 	movw	r2, #401	@ 0x191
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	bf08      	it	eq
 8009c8c:	4613      	moveq	r3, r2
 8009c8e:	4618      	mov	r0, r3
 8009c90:	b024      	add	sp, #144	@ 0x90
 8009c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c96:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	b024      	add	sp, #144	@ 0x90
 8009c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca2:	230b      	movs	r3, #11
 8009ca4:	e7f3      	b.n	8009c8e <rcl_take+0x82>
 8009ca6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8009caa:	4618      	mov	r0, r3
 8009cac:	4770      	bx	lr
 8009cae:	ad14      	add	r5, sp, #80	@ 0x50
 8009cb0:	e7c0      	b.n	8009c34 <rcl_take+0x28>
 8009cb2:	f005 fc73 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	e7e9      	b.n	8009c8e <rcl_take+0x82>
 8009cba:	bf00      	nop

08009cbc <rcl_subscription_get_rmw_handle>:
 8009cbc:	b118      	cbz	r0, 8009cc6 <rcl_subscription_get_rmw_handle+0xa>
 8009cbe:	6800      	ldr	r0, [r0, #0]
 8009cc0:	b108      	cbz	r0, 8009cc6 <rcl_subscription_get_rmw_handle+0xa>
 8009cc2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8009cc6:	4770      	bx	lr

08009cc8 <rcl_subscription_is_valid>:
 8009cc8:	b130      	cbz	r0, 8009cd8 <rcl_subscription_is_valid+0x10>
 8009cca:	6800      	ldr	r0, [r0, #0]
 8009ccc:	b120      	cbz	r0, 8009cd8 <rcl_subscription_is_valid+0x10>
 8009cce:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8009cd2:	3800      	subs	r0, #0
 8009cd4:	bf18      	it	ne
 8009cd6:	2001      	movne	r0, #1
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop

08009cdc <_rclc_check_for_new_data>:
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d046      	beq.n	8009d6e <_rclc_check_for_new_data+0x92>
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	7802      	ldrb	r2, [r0, #0]
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2a0a      	cmp	r2, #10
 8009cea:	d842      	bhi.n	8009d72 <_rclc_check_for_new_data+0x96>
 8009cec:	e8df f002 	tbb	[pc, r2]
 8009cf0:	14181212 	.word	0x14181212
 8009cf4:	06060614 	.word	0x06060614
 8009cf8:	2e1a      	.short	0x2e1a
 8009cfa:	16          	.byte	0x16
 8009cfb:	00          	.byte	0x00
 8009cfc:	6a0a      	ldr	r2, [r1, #32]
 8009cfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009d00:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d04:	2000      	movs	r0, #0
 8009d06:	1a12      	subs	r2, r2, r0
 8009d08:	bf18      	it	ne
 8009d0a:	2201      	movne	r2, #1
 8009d0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009d10:	b004      	add	sp, #16
 8009d12:	bd10      	pop	{r4, pc}
 8009d14:	680a      	ldr	r2, [r1, #0]
 8009d16:	e7f2      	b.n	8009cfe <_rclc_check_for_new_data+0x22>
 8009d18:	698a      	ldr	r2, [r1, #24]
 8009d1a:	e7f0      	b.n	8009cfe <_rclc_check_for_new_data+0x22>
 8009d1c:	688a      	ldr	r2, [r1, #8]
 8009d1e:	e7ee      	b.n	8009cfe <_rclc_check_for_new_data+0x22>
 8009d20:	690a      	ldr	r2, [r1, #16]
 8009d22:	e7ec      	b.n	8009cfe <_rclc_check_for_new_data+0x22>
 8009d24:	685c      	ldr	r4, [r3, #4]
 8009d26:	4608      	mov	r0, r1
 8009d28:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009d2c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009d30:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009d34:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009d3e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8009d42:	f104 0110 	add.w	r1, r4, #16
 8009d46:	f007 fb0b 	bl	8011360 <rcl_action_client_wait_set_get_entities_ready>
 8009d4a:	e7e1      	b.n	8009d10 <_rclc_check_for_new_data+0x34>
 8009d4c:	685c      	ldr	r4, [r3, #4]
 8009d4e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8009d52:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009d56:	e9cd 3200 	strd	r3, r2, [sp]
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009d60:	f104 0220 	add.w	r2, r4, #32
 8009d64:	f104 0110 	add.w	r1, r4, #16
 8009d68:	f007 fd12 	bl	8011790 <rcl_action_server_wait_set_get_entities_ready>
 8009d6c:	e7d0      	b.n	8009d10 <_rclc_check_for_new_data+0x34>
 8009d6e:	200b      	movs	r0, #11
 8009d70:	4770      	bx	lr
 8009d72:	2001      	movs	r0, #1
 8009d74:	e7cc      	b.n	8009d10 <_rclc_check_for_new_data+0x34>
 8009d76:	bf00      	nop

08009d78 <_rclc_take_new_data>:
 8009d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7a:	b09b      	sub	sp, #108	@ 0x6c
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f000 8088 	beq.w	8009e92 <_rclc_take_new_data+0x11a>
 8009d82:	7803      	ldrb	r3, [r0, #0]
 8009d84:	4604      	mov	r4, r0
 8009d86:	2b0a      	cmp	r3, #10
 8009d88:	f200 8167 	bhi.w	800a05a <_rclc_take_new_data+0x2e2>
 8009d8c:	e8df f003 	tbb	[pc, r3]
 8009d90:	44152d2d 	.word	0x44152d2d
 8009d94:	19191944 	.word	0x19191944
 8009d98:	065a      	.short	0x065a
 8009d9a:	15          	.byte	0x15
 8009d9b:	00          	.byte	0x00
 8009d9c:	6840      	ldr	r0, [r0, #4]
 8009d9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 80b2 	bne.w	8009f0c <_rclc_take_new_data+0x194>
 8009da8:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f040 80e4 	bne.w	8009f7a <_rclc_take_new_data+0x202>
 8009db2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d16f      	bne.n	8009e9a <_rclc_take_new_data+0x122>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	b01b      	add	sp, #108	@ 0x6c
 8009dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009dc4:	6a0b      	ldr	r3, [r1, #32]
 8009dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f5      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009dce:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009dd2:	f104 0110 	add.w	r1, r4, #16
 8009dd6:	f006 f8e5 	bl	800ffa4 <rcl_take_request>
 8009dda:	4605      	mov	r5, r0
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d0ec      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009de0:	f240 2359 	movw	r3, #601	@ 0x259
 8009de4:	4298      	cmp	r0, r3
 8009de6:	d013      	beq.n	8009e10 <_rclc_take_new_data+0x98>
 8009de8:	e029      	b.n	8009e3e <_rclc_take_new_data+0xc6>
 8009dea:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009dec:	680b      	ldr	r3, [r1, #0]
 8009dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0e1      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009df6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	aa0a      	add	r2, sp, #40	@ 0x28
 8009dfe:	f7ff ff05 	bl	8009c0c <rcl_take>
 8009e02:	4605      	mov	r5, r0
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d0d9      	beq.n	8009dbc <_rclc_take_new_data+0x44>
 8009e08:	f240 1391 	movw	r3, #401	@ 0x191
 8009e0c:	4298      	cmp	r0, r3
 8009e0e:	d116      	bne.n	8009e3e <_rclc_take_new_data+0xc6>
 8009e10:	2300      	movs	r3, #0
 8009e12:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009e16:	e7d1      	b.n	8009dbc <_rclc_take_new_data+0x44>
 8009e18:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009e1a:	698b      	ldr	r3, [r1, #24]
 8009e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0ca      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009e24:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009e28:	f104 0110 	add.w	r1, r4, #16
 8009e2c:	f005 fb64 	bl	800f4f8 <rcl_take_response>
 8009e30:	4605      	mov	r5, r0
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0c1      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009e36:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009e3a:	4298      	cmp	r0, r3
 8009e3c:	d0be      	beq.n	8009dbc <_rclc_take_new_data+0x44>
 8009e3e:	f000 fedb 	bl	800abf8 <rcutils_reset_error>
 8009e42:	e7bb      	b.n	8009dbc <_rclc_take_new_data+0x44>
 8009e44:	6840      	ldr	r0, [r0, #4]
 8009e46:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d17d      	bne.n	8009f4a <_rclc_take_new_data+0x1d2>
 8009e4e:	69c3      	ldr	r3, [r0, #28]
 8009e50:	b11b      	cbz	r3, 8009e5a <_rclc_take_new_data+0xe2>
 8009e52:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d144      	bne.n	8009ee4 <_rclc_take_new_data+0x16c>
 8009e5a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f040 80ac 	bne.w	8009fbc <_rclc_take_new_data+0x244>
 8009e64:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0a6      	beq.n	8009dba <_rclc_take_new_data+0x42>
 8009e6c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009e6e:	a90a      	add	r1, sp, #40	@ 0x28
 8009e70:	3010      	adds	r0, #16
 8009e72:	f007 f94d 	bl	8011110 <rcl_action_take_result_response>
 8009e76:	4605      	mov	r5, r0
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d1e0      	bne.n	8009e3e <_rclc_take_new_data+0xc6>
 8009e7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e80:	6860      	ldr	r0, [r4, #4]
 8009e82:	f007 fda9 	bl	80119d8 <rclc_action_find_handle_by_result_request_sequence_number>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d098      	beq.n	8009dbc <_rclc_take_new_data+0x44>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009e90:	e794      	b.n	8009dbc <_rclc_take_new_data+0x44>
 8009e92:	250b      	movs	r5, #11
 8009e94:	4628      	mov	r0, r5
 8009e96:	b01b      	add	sp, #108	@ 0x6c
 8009e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9a:	ae04      	add	r6, sp, #16
 8009e9c:	aa0a      	add	r2, sp, #40	@ 0x28
 8009e9e:	3010      	adds	r0, #16
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	f007 fba9 	bl	80115f8 <rcl_action_take_cancel_request>
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d1c8      	bne.n	8009e3e <_rclc_take_new_data+0xc6>
 8009eac:	6860      	ldr	r0, [r4, #4]
 8009eae:	a90a      	add	r1, sp, #40	@ 0x28
 8009eb0:	f007 fd50 	bl	8011954 <rclc_action_find_goal_handle_by_uuid>
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f000 80bb 	beq.w	800a032 <_rclc_take_new_data+0x2ba>
 8009ebc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	f007 fcd1 	bl	8011868 <rcl_action_transition_goal_state>
 8009ec6:	2803      	cmp	r0, #3
 8009ec8:	4684      	mov	ip, r0
 8009eca:	f040 80a7 	bne.w	800a01c <_rclc_take_new_data+0x2a4>
 8009ece:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009ed0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ed6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009eda:	e884 0003 	stmia.w	r4, {r0, r1}
 8009ede:	f887 c008 	strb.w	ip, [r7, #8]
 8009ee2:	e76b      	b.n	8009dbc <_rclc_take_new_data+0x44>
 8009ee4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009ee6:	3010      	adds	r0, #16
 8009ee8:	f007 f992 	bl	8011210 <rcl_action_take_feedback>
 8009eec:	4605      	mov	r5, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d1a5      	bne.n	8009e3e <_rclc_take_new_data+0xc6>
 8009ef2:	6860      	ldr	r0, [r4, #4]
 8009ef4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009ef6:	f007 fd2d 	bl	8011954 <rclc_action_find_goal_handle_by_uuid>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f000 80a3 	beq.w	800a048 <_rclc_take_new_data+0x2d0>
 8009f02:	2201      	movs	r2, #1
 8009f04:	6860      	ldr	r0, [r4, #4]
 8009f06:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009f0a:	e7a6      	b.n	8009e5a <_rclc_take_new_data+0xe2>
 8009f0c:	f007 fcfc 	bl	8011908 <rclc_action_take_goal_handle>
 8009f10:	4606      	mov	r6, r0
 8009f12:	6860      	ldr	r0, [r4, #4]
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	f43f af47 	beq.w	8009da8 <_rclc_take_new_data+0x30>
 8009f1a:	6070      	str	r0, [r6, #4]
 8009f1c:	69f2      	ldr	r2, [r6, #28]
 8009f1e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009f22:	3010      	adds	r0, #16
 8009f24:	f007 fab0 	bl	8011488 <rcl_action_take_goal_request>
 8009f28:	4605      	mov	r5, r0
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f040 808e 	bne.w	800a04c <_rclc_take_new_data+0x2d4>
 8009f30:	69f7      	ldr	r7, [r6, #28]
 8009f32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009f34:	7235      	strb	r5, [r6, #8]
 8009f36:	f8c6 0009 	str.w	r0, [r6, #9]
 8009f3a:	f8c6 100d 	str.w	r1, [r6, #13]
 8009f3e:	6860      	ldr	r0, [r4, #4]
 8009f40:	f8c6 2011 	str.w	r2, [r6, #17]
 8009f44:	f8c6 3015 	str.w	r3, [r6, #21]
 8009f48:	e72e      	b.n	8009da8 <_rclc_take_new_data+0x30>
 8009f4a:	aa04      	add	r2, sp, #16
 8009f4c:	a90a      	add	r1, sp, #40	@ 0x28
 8009f4e:	3010      	adds	r0, #16
 8009f50:	f007 f866 	bl	8011020 <rcl_action_take_goal_response>
 8009f54:	4605      	mov	r5, r0
 8009f56:	2800      	cmp	r0, #0
 8009f58:	f47f af71 	bne.w	8009e3e <_rclc_take_new_data+0xc6>
 8009f5c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f60:	6860      	ldr	r0, [r4, #4]
 8009f62:	f007 fd27 	bl	80119b4 <rclc_action_find_handle_by_goal_request_sequence_number>
 8009f66:	b130      	cbz	r0, 8009f76 <_rclc_take_new_data+0x1fe>
 8009f68:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009f6c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009f70:	2201      	movs	r2, #1
 8009f72:	f880 2020 	strb.w	r2, [r0, #32]
 8009f76:	6860      	ldr	r0, [r4, #4]
 8009f78:	e769      	b.n	8009e4e <_rclc_take_new_data+0xd6>
 8009f7a:	aa04      	add	r2, sp, #16
 8009f7c:	3010      	adds	r0, #16
 8009f7e:	a90a      	add	r1, sp, #40	@ 0x28
 8009f80:	f007 fafa 	bl	8011578 <rcl_action_take_result_request>
 8009f84:	4605      	mov	r5, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f47f af59 	bne.w	8009e3e <_rclc_take_new_data+0xc6>
 8009f8c:	6860      	ldr	r0, [r4, #4]
 8009f8e:	a904      	add	r1, sp, #16
 8009f90:	f007 fce0 	bl	8011954 <rclc_action_find_goal_handle_by_uuid>
 8009f94:	4607      	mov	r7, r0
 8009f96:	b160      	cbz	r0, 8009fb2 <_rclc_take_new_data+0x23a>
 8009f98:	ad0a      	add	r5, sp, #40	@ 0x28
 8009f9a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fa0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009fa2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fa6:	f04f 0c02 	mov.w	ip, #2
 8009faa:	e886 0003 	stmia.w	r6, {r0, r1}
 8009fae:	f887 c008 	strb.w	ip, [r7, #8]
 8009fb2:	6860      	ldr	r0, [r4, #4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009fba:	e6fa      	b.n	8009db2 <_rclc_take_new_data+0x3a>
 8009fbc:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009fc0:	a90a      	add	r1, sp, #40	@ 0x28
 8009fc2:	3010      	adds	r0, #16
 8009fc4:	f007 f8e4 	bl	8011190 <rcl_action_take_cancel_response>
 8009fc8:	4605      	mov	r5, r0
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f47f af37 	bne.w	8009e3e <_rclc_take_new_data+0xc6>
 8009fd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009fd4:	6860      	ldr	r0, [r4, #4]
 8009fd6:	f007 fd11 	bl	80119fc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009fda:	4606      	mov	r6, r0
 8009fdc:	6860      	ldr	r0, [r4, #4]
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	f43f af40 	beq.w	8009e64 <_rclc_take_new_data+0xec>
 8009fe4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009fe6:	2701      	movs	r7, #1
 8009fe8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f43f af3a 	beq.w	8009e64 <_rclc_take_new_data+0xec>
 8009ff0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009ff2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009ff6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009ffa:	f007 fcab 	bl	8011954 <rclc_action_find_goal_handle_by_uuid>
 8009ffe:	b138      	cbz	r0, 800a010 <_rclc_take_new_data+0x298>
 800a000:	6860      	ldr	r0, [r4, #4]
 800a002:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a004:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800a008:	3501      	adds	r5, #1
 800a00a:	42ab      	cmp	r3, r5
 800a00c:	d8f0      	bhi.n	8009ff0 <_rclc_take_new_data+0x278>
 800a00e:	e729      	b.n	8009e64 <_rclc_take_new_data+0xec>
 800a010:	6860      	ldr	r0, [r4, #4]
 800a012:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a014:	3501      	adds	r5, #1
 800a016:	42ab      	cmp	r3, r5
 800a018:	d8ea      	bhi.n	8009ff0 <_rclc_take_new_data+0x278>
 800a01a:	e723      	b.n	8009e64 <_rclc_take_new_data+0xec>
 800a01c:	ab06      	add	r3, sp, #24
 800a01e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a020:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a024:	2103      	movs	r1, #3
 800a026:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a02a:	6860      	ldr	r0, [r4, #4]
 800a02c:	f007 fd5c 	bl	8011ae8 <rclc_action_server_goal_cancel_reject>
 800a030:	e6c4      	b.n	8009dbc <_rclc_take_new_data+0x44>
 800a032:	ab06      	add	r3, sp, #24
 800a034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a036:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a03a:	2102      	movs	r1, #2
 800a03c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800a040:	6860      	ldr	r0, [r4, #4]
 800a042:	f007 fd51 	bl	8011ae8 <rclc_action_server_goal_cancel_reject>
 800a046:	e6b9      	b.n	8009dbc <_rclc_take_new_data+0x44>
 800a048:	6860      	ldr	r0, [r4, #4]
 800a04a:	e706      	b.n	8009e5a <_rclc_take_new_data+0xe2>
 800a04c:	6860      	ldr	r0, [r4, #4]
 800a04e:	4631      	mov	r1, r6
 800a050:	f007 fc6a 	bl	8011928 <rclc_action_remove_used_goal_handle>
 800a054:	f000 fdd0 	bl	800abf8 <rcutils_reset_error>
 800a058:	e6b0      	b.n	8009dbc <_rclc_take_new_data+0x44>
 800a05a:	2501      	movs	r5, #1
 800a05c:	e6ae      	b.n	8009dbc <_rclc_take_new_data+0x44>
 800a05e:	bf00      	nop

0800a060 <_rclc_execute.part.0>:
 800a060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a062:	7803      	ldrb	r3, [r0, #0]
 800a064:	b087      	sub	sp, #28
 800a066:	4604      	mov	r4, r0
 800a068:	2b0a      	cmp	r3, #10
 800a06a:	f200 8136 	bhi.w	800a2da <_rclc_execute.part.0+0x27a>
 800a06e:	e8df f003 	tbb	[pc, r3]
 800a072:	435e      	.short	0x435e
 800a074:	06a1664f 	.word	0x06a1664f
 800a078:	6c1e0606 	.word	0x6c1e0606
 800a07c:	59          	.byte	0x59
 800a07d:	00          	.byte	0x00
 800a07e:	2b06      	cmp	r3, #6
 800a080:	f000 8122 	beq.w	800a2c8 <_rclc_execute.part.0+0x268>
 800a084:	2b07      	cmp	r3, #7
 800a086:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a088:	f040 8118 	bne.w	800a2bc <_rclc_execute.part.0+0x25c>
 800a08c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800a090:	6880      	ldr	r0, [r0, #8]
 800a092:	4798      	blx	r3
 800a094:	f104 0110 	add.w	r1, r4, #16
 800a098:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a09a:	6860      	ldr	r0, [r4, #4]
 800a09c:	f005 ffc2 	bl	8010024 <rcl_send_response>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d033      	beq.n	800a10c <_rclc_execute.part.0+0xac>
 800a0a4:	9005      	str	r0, [sp, #20]
 800a0a6:	f000 fda7 	bl	800abf8 <rcutils_reset_error>
 800a0aa:	9805      	ldr	r0, [sp, #20]
 800a0ac:	e02e      	b.n	800a10c <_rclc_execute.part.0+0xac>
 800a0ae:	6840      	ldr	r0, [r0, #4]
 800a0b0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	f000 8086 	beq.w	800a1c6 <_rclc_execute.part.0+0x166>
 800a0ba:	2600      	movs	r6, #0
 800a0bc:	2701      	movs	r7, #1
 800a0be:	e004      	b.n	800a0ca <_rclc_execute.part.0+0x6a>
 800a0c0:	f007 fbfc 	bl	80118bc <rclc_action_send_result_request>
 800a0c4:	b998      	cbnz	r0, 800a0ee <_rclc_execute.part.0+0x8e>
 800a0c6:	722f      	strb	r7, [r5, #8]
 800a0c8:	6860      	ldr	r0, [r4, #4]
 800a0ca:	f007 fca9 	bl	8011a20 <rclc_action_find_first_handle_with_goal_response>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d077      	beq.n	800a1c4 <_rclc_execute.part.0+0x164>
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800a0de:	f885 6020 	strb.w	r6, [r5, #32]
 800a0e2:	4798      	blx	r3
 800a0e4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1e8      	bne.n	800a0c0 <_rclc_execute.part.0+0x60>
 800a0ee:	6860      	ldr	r0, [r4, #4]
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f007 fc19 	bl	8011928 <rclc_action_remove_used_goal_handle>
 800a0f6:	e7e7      	b.n	800a0c8 <_rclc_execute.part.0+0x68>
 800a0f8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a0fc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800a100:	2d00      	cmp	r5, #0
 800a102:	f000 80c9 	beq.w	800a298 <_rclc_execute.part.0+0x238>
 800a106:	6880      	ldr	r0, [r0, #8]
 800a108:	4798      	blx	r3
 800a10a:	2000      	movs	r0, #0
 800a10c:	b007      	add	sp, #28
 800a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a110:	6840      	ldr	r0, [r0, #4]
 800a112:	f006 f845 	bl	80101a0 <rcl_timer_call>
 800a116:	f240 3321 	movw	r3, #801	@ 0x321
 800a11a:	4298      	cmp	r0, r3
 800a11c:	d004      	beq.n	800a128 <_rclc_execute.part.0+0xc8>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d0f4      	beq.n	800a10c <_rclc_execute.part.0+0xac>
 800a122:	e7bf      	b.n	800a0a4 <_rclc_execute.part.0+0x44>
 800a124:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a126:	4798      	blx	r3
 800a128:	2000      	movs	r0, #0
 800a12a:	b007      	add	sp, #28
 800a12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800a132:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a134:	b925      	cbnz	r5, 800a140 <_rclc_execute.part.0+0xe0>
 800a136:	4628      	mov	r0, r5
 800a138:	4798      	blx	r3
 800a13a:	4628      	mov	r0, r5
 800a13c:	e7e6      	b.n	800a10c <_rclc_execute.part.0+0xac>
 800a13e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a140:	68a0      	ldr	r0, [r4, #8]
 800a142:	4798      	blx	r3
 800a144:	2000      	movs	r0, #0
 800a146:	b007      	add	sp, #28
 800a148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a14a:	6840      	ldr	r0, [r0, #4]
 800a14c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800a150:	bb3b      	cbnz	r3, 800a1a2 <_rclc_execute.part.0+0x142>
 800a152:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d07b      	beq.n	800a252 <_rclc_execute.part.0+0x1f2>
 800a15a:	f640 0634 	movw	r6, #2100	@ 0x834
 800a15e:	2701      	movs	r7, #1
 800a160:	e007      	b.n	800a172 <_rclc_execute.part.0+0x112>
 800a162:	4628      	mov	r0, r5
 800a164:	f007 fc74 	bl	8011a50 <rclc_action_server_response_goal_request>
 800a168:	6860      	ldr	r0, [r4, #4]
 800a16a:	4629      	mov	r1, r5
 800a16c:	f007 fbdc 	bl	8011928 <rclc_action_remove_used_goal_handle>
 800a170:	6860      	ldr	r0, [r4, #4]
 800a172:	2100      	movs	r1, #0
 800a174:	f007 fc06 	bl	8011984 <rclc_action_find_first_handle_by_status>
 800a178:	4605      	mov	r5, r0
 800a17a:	2800      	cmp	r0, #0
 800a17c:	d066      	beq.n	800a24c <_rclc_execute.part.0+0x1ec>
 800a17e:	6863      	ldr	r3, [r4, #4]
 800a180:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	4798      	blx	r3
 800a186:	42b0      	cmp	r0, r6
 800a188:	f04f 0100 	mov.w	r1, #0
 800a18c:	d1e9      	bne.n	800a162 <_rclc_execute.part.0+0x102>
 800a18e:	2101      	movs	r1, #1
 800a190:	4628      	mov	r0, r5
 800a192:	f007 fc5d 	bl	8011a50 <rclc_action_server_response_goal_request>
 800a196:	722f      	strb	r7, [r5, #8]
 800a198:	e7ea      	b.n	800a170 <_rclc_execute.part.0+0x110>
 800a19a:	6848      	ldr	r0, [r1, #4]
 800a19c:	f007 fbc4 	bl	8011928 <rclc_action_remove_used_goal_handle>
 800a1a0:	6860      	ldr	r0, [r4, #4]
 800a1a2:	f007 fbfb 	bl	801199c <rclc_action_find_first_terminated_handle>
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d1f6      	bne.n	800a19a <_rclc_execute.part.0+0x13a>
 800a1ac:	6860      	ldr	r0, [r4, #4]
 800a1ae:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800a1b2:	e7ce      	b.n	800a152 <_rclc_execute.part.0+0xf2>
 800a1b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a1b6:	6880      	ldr	r0, [r0, #8]
 800a1b8:	f104 0110 	add.w	r1, r4, #16
 800a1bc:	4798      	blx	r3
 800a1be:	2000      	movs	r0, #0
 800a1c0:	b007      	add	sp, #28
 800a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c4:	6860      	ldr	r0, [r4, #4]
 800a1c6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a1ca:	b18b      	cbz	r3, 800a1f0 <_rclc_execute.part.0+0x190>
 800a1cc:	68c5      	ldr	r5, [r0, #12]
 800a1ce:	b32d      	cbz	r5, 800a21c <_rclc_execute.part.0+0x1bc>
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800a1d6:	b143      	cbz	r3, 800a1ea <_rclc_execute.part.0+0x18a>
 800a1d8:	69c3      	ldr	r3, [r0, #28]
 800a1da:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800a1de:	b123      	cbz	r3, 800a1ea <_rclc_execute.part.0+0x18a>
 800a1e0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a1e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	4798      	blx	r3
 800a1e8:	6860      	ldr	r0, [r4, #4]
 800a1ea:	682d      	ldr	r5, [r5, #0]
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	d1f0      	bne.n	800a1d2 <_rclc_execute.part.0+0x172>
 800a1f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a1f4:	b193      	cbz	r3, 800a21c <_rclc_execute.part.0+0x1bc>
 800a1f6:	68c5      	ldr	r5, [r0, #12]
 800a1f8:	b185      	cbz	r5, 800a21c <_rclc_execute.part.0+0x1bc>
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800a200:	b14b      	cbz	r3, 800a216 <_rclc_execute.part.0+0x1b6>
 800a202:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800a204:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800a208:	b12b      	cbz	r3, 800a216 <_rclc_execute.part.0+0x1b6>
 800a20a:	4628      	mov	r0, r5
 800a20c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800a210:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a212:	4798      	blx	r3
 800a214:	6860      	ldr	r0, [r4, #4]
 800a216:	682d      	ldr	r5, [r5, #0]
 800a218:	2d00      	cmp	r5, #0
 800a21a:	d1ef      	bne.n	800a1fc <_rclc_execute.part.0+0x19c>
 800a21c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a220:	2b00      	cmp	r3, #0
 800a222:	d081      	beq.n	800a128 <_rclc_execute.part.0+0xc8>
 800a224:	2700      	movs	r7, #0
 800a226:	e00b      	b.n	800a240 <_rclc_execute.part.0+0x1e0>
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a22c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a22e:	6a1e      	ldr	r6, [r3, #32]
 800a230:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a234:	47b0      	blx	r6
 800a236:	6860      	ldr	r0, [r4, #4]
 800a238:	4629      	mov	r1, r5
 800a23a:	f007 fb75 	bl	8011928 <rclc_action_remove_used_goal_handle>
 800a23e:	6860      	ldr	r0, [r4, #4]
 800a240:	f007 fbfa 	bl	8011a38 <rclc_action_find_first_handle_with_result_response>
 800a244:	4605      	mov	r5, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	d1ee      	bne.n	800a228 <_rclc_execute.part.0+0x1c8>
 800a24a:	e76d      	b.n	800a128 <_rclc_execute.part.0+0xc8>
 800a24c:	6860      	ldr	r0, [r4, #4]
 800a24e:	f880 5020 	strb.w	r5, [r0, #32]
 800a252:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a256:	2b00      	cmp	r3, #0
 800a258:	f43f af66 	beq.w	800a128 <_rclc_execute.part.0+0xc8>
 800a25c:	68c5      	ldr	r5, [r0, #12]
 800a25e:	b1b5      	cbz	r5, 800a28e <_rclc_execute.part.0+0x22e>
 800a260:	2602      	movs	r6, #2
 800a262:	e001      	b.n	800a268 <_rclc_execute.part.0+0x208>
 800a264:	682d      	ldr	r5, [r5, #0]
 800a266:	b195      	cbz	r5, 800a28e <_rclc_execute.part.0+0x22e>
 800a268:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d1f9      	bne.n	800a264 <_rclc_execute.part.0+0x204>
 800a270:	69c3      	ldr	r3, [r0, #28]
 800a272:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a274:	4628      	mov	r0, r5
 800a276:	4798      	blx	r3
 800a278:	4603      	mov	r3, r0
 800a27a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a27e:	4628      	mov	r0, r5
 800a280:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a284:	b163      	cbz	r3, 800a2a0 <_rclc_execute.part.0+0x240>
 800a286:	f007 fc03 	bl	8011a90 <rclc_action_server_goal_cancel_accept>
 800a28a:	6860      	ldr	r0, [r4, #4]
 800a28c:	e7ea      	b.n	800a264 <_rclc_execute.part.0+0x204>
 800a28e:	2300      	movs	r3, #0
 800a290:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a294:	4618      	mov	r0, r3
 800a296:	e739      	b.n	800a10c <_rclc_execute.part.0+0xac>
 800a298:	4628      	mov	r0, r5
 800a29a:	4798      	blx	r3
 800a29c:	4628      	mov	r0, r5
 800a29e:	e735      	b.n	800a10c <_rclc_execute.part.0+0xac>
 800a2a0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a2a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a2a6:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a2aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ae:	6860      	ldr	r0, [r4, #4]
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	f007 fc19 	bl	8011ae8 <rclc_action_server_goal_cancel_reject>
 800a2b6:	722e      	strb	r6, [r5, #8]
 800a2b8:	6860      	ldr	r0, [r4, #4]
 800a2ba:	e7d3      	b.n	800a264 <_rclc_execute.part.0+0x204>
 800a2bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a2be:	6880      	ldr	r0, [r0, #8]
 800a2c0:	4798      	blx	r3
 800a2c2:	f104 0110 	add.w	r1, r4, #16
 800a2c6:	e6e7      	b.n	800a098 <_rclc_execute.part.0+0x38>
 800a2c8:	f100 0110 	add.w	r1, r0, #16
 800a2cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a2ce:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a2d0:	6880      	ldr	r0, [r0, #8]
 800a2d2:	9105      	str	r1, [sp, #20]
 800a2d4:	4798      	blx	r3
 800a2d6:	9905      	ldr	r1, [sp, #20]
 800a2d8:	e6de      	b.n	800a098 <_rclc_execute.part.0+0x38>
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e716      	b.n	800a10c <_rclc_execute.part.0+0xac>
 800a2de:	bf00      	nop

0800a2e0 <rclc_executor_trigger_any>:
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d03f      	beq.n	800a364 <rclc_executor_trigger_any+0x84>
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	d03e      	beq.n	800a366 <rclc_executor_trigger_any+0x86>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d037      	beq.n	800a364 <rclc_executor_trigger_any+0x84>
 800a2f4:	b430      	push	{r4, r5}
 800a2f6:	f893 c000 	ldrb.w	ip, [r3]
 800a2fa:	f1bc 0f08 	cmp.w	ip, #8
 800a2fe:	d11e      	bne.n	800a33e <rclc_executor_trigger_any+0x5e>
 800a300:	685c      	ldr	r4, [r3, #4]
 800a302:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a304:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a308:	d105      	bne.n	800a316 <rclc_executor_trigger_any+0x36>
 800a30a:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a30e:	b910      	cbnz	r0, 800a316 <rclc_executor_trigger_any+0x36>
 800a310:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a314:	b128      	cbz	r0, 800a322 <rclc_executor_trigger_any+0x42>
 800a316:	bc30      	pop	{r4, r5}
 800a318:	4770      	bx	lr
 800a31a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1f9      	bne.n	800a316 <rclc_executor_trigger_any+0x36>
 800a322:	3201      	adds	r2, #1
 800a324:	4291      	cmp	r1, r2
 800a326:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a32a:	d018      	beq.n	800a35e <rclc_executor_trigger_any+0x7e>
 800a32c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a330:	2800      	cmp	r0, #0
 800a332:	d0f0      	beq.n	800a316 <rclc_executor_trigger_any+0x36>
 800a334:	f893 c000 	ldrb.w	ip, [r3]
 800a338:	f1bc 0f08 	cmp.w	ip, #8
 800a33c:	d0e0      	beq.n	800a300 <rclc_executor_trigger_any+0x20>
 800a33e:	f1bc 0f09 	cmp.w	ip, #9
 800a342:	d1ea      	bne.n	800a31a <rclc_executor_trigger_any+0x3a>
 800a344:	685c      	ldr	r4, [r3, #4]
 800a346:	6a25      	ldr	r5, [r4, #32]
 800a348:	2d00      	cmp	r5, #0
 800a34a:	d1e4      	bne.n	800a316 <rclc_executor_trigger_any+0x36>
 800a34c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a350:	2800      	cmp	r0, #0
 800a352:	d1e0      	bne.n	800a316 <rclc_executor_trigger_any+0x36>
 800a354:	3201      	adds	r2, #1
 800a356:	4291      	cmp	r1, r2
 800a358:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a35c:	d1e6      	bne.n	800a32c <rclc_executor_trigger_any+0x4c>
 800a35e:	2000      	movs	r0, #0
 800a360:	bc30      	pop	{r4, r5}
 800a362:	4770      	bx	lr
 800a364:	4770      	bx	lr
 800a366:	4608      	mov	r0, r1
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop

0800a36c <rclc_executor_get_zero_initialized_executor>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4903      	ldr	r1, [pc, #12]	@ (800a37c <rclc_executor_get_zero_initialized_executor+0x10>)
 800a370:	4604      	mov	r4, r0
 800a372:	2288      	movs	r2, #136	@ 0x88
 800a374:	f00c ffcf 	bl	8017316 <memcpy>
 800a378:	4620      	mov	r0, r4
 800a37a:	bd10      	pop	{r4, pc}
 800a37c:	080193a8 	.word	0x080193a8

0800a380 <rclc_executor_init>:
 800a380:	2800      	cmp	r0, #0
 800a382:	d05f      	beq.n	800a444 <rclc_executor_init+0xc4>
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	460c      	mov	r4, r1
 800a38a:	b0b0      	sub	sp, #192	@ 0xc0
 800a38c:	2900      	cmp	r1, #0
 800a38e:	d051      	beq.n	800a434 <rclc_executor_init+0xb4>
 800a390:	4605      	mov	r5, r0
 800a392:	4618      	mov	r0, r3
 800a394:	4616      	mov	r6, r2
 800a396:	461f      	mov	r7, r3
 800a398:	f000 fbf2 	bl	800ab80 <rcutils_allocator_is_valid>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d049      	beq.n	800a434 <rclc_executor_init+0xb4>
 800a3a0:	2e00      	cmp	r6, #0
 800a3a2:	d047      	beq.n	800a434 <rclc_executor_init+0xb4>
 800a3a4:	492c      	ldr	r1, [pc, #176]	@ (800a458 <rclc_executor_init+0xd8>)
 800a3a6:	2288      	movs	r2, #136	@ 0x88
 800a3a8:	a80e      	add	r0, sp, #56	@ 0x38
 800a3aa:	f00c ffb4 	bl	8017316 <memcpy>
 800a3ae:	a90e      	add	r1, sp, #56	@ 0x38
 800a3b0:	2288      	movs	r2, #136	@ 0x88
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f00c ffaf 	bl	8017316 <memcpy>
 800a3b8:	602c      	str	r4, [r5, #0]
 800a3ba:	4668      	mov	r0, sp
 800a3bc:	60ae      	str	r6, [r5, #8]
 800a3be:	466c      	mov	r4, sp
 800a3c0:	f006 f860 	bl	8010484 <rcl_get_zero_initialized_wait_set>
 800a3c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3c6:	f105 0c14 	add.w	ip, r5, #20
 800a3ca:	f8d7 8000 	ldr.w	r8, [r7]
 800a3ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3de:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a450 <rclc_executor_init+0xd0>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	f8cc 3000 	str.w	r3, [ip]
 800a3e8:	6939      	ldr	r1, [r7, #16]
 800a3ea:	612f      	str	r7, [r5, #16]
 800a3ec:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800a3f0:	01b0      	lsls	r0, r6, #6
 800a3f2:	47c0      	blx	r8
 800a3f4:	6068      	str	r0, [r5, #4]
 800a3f6:	b338      	cbz	r0, 800a448 <rclc_executor_init+0xc8>
 800a3f8:	2400      	movs	r4, #0
 800a3fa:	e000      	b.n	800a3fe <rclc_executor_init+0x7e>
 800a3fc:	6868      	ldr	r0, [r5, #4]
 800a3fe:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a402:	4631      	mov	r1, r6
 800a404:	3401      	adds	r4, #1
 800a406:	f000 fa73 	bl	800a8f0 <rclc_executor_handle_init>
 800a40a:	42a6      	cmp	r6, r4
 800a40c:	d1f6      	bne.n	800a3fc <rclc_executor_init+0x7c>
 800a40e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800a412:	f000 fa63 	bl	800a8dc <rclc_executor_handle_counters_zero_init>
 800a416:	4a11      	ldr	r2, [pc, #68]	@ (800a45c <rclc_executor_init+0xdc>)
 800a418:	686b      	ldr	r3, [r5, #4]
 800a41a:	2000      	movs	r0, #0
 800a41c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800a420:	b163      	cbz	r3, 800a43c <rclc_executor_init+0xbc>
 800a422:	692b      	ldr	r3, [r5, #16]
 800a424:	b153      	cbz	r3, 800a43c <rclc_executor_init+0xbc>
 800a426:	68ab      	ldr	r3, [r5, #8]
 800a428:	b143      	cbz	r3, 800a43c <rclc_executor_init+0xbc>
 800a42a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800a42e:	b030      	add	sp, #192	@ 0xc0
 800a430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a434:	200b      	movs	r0, #11
 800a436:	b030      	add	sp, #192	@ 0xc0
 800a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a43c:	4618      	mov	r0, r3
 800a43e:	b030      	add	sp, #192	@ 0xc0
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	200b      	movs	r0, #11
 800a446:	4770      	bx	lr
 800a448:	200a      	movs	r0, #10
 800a44a:	e7f4      	b.n	800a436 <rclc_executor_init+0xb6>
 800a44c:	f3af 8000 	nop.w
 800a450:	3b9aca00 	.word	0x3b9aca00
 800a454:	00000000 	.word	0x00000000
 800a458:	080193a8 	.word	0x080193a8
 800a45c:	0800a2e1 	.word	0x0800a2e1

0800a460 <rclc_executor_add_subscription>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	f89d e018 	ldrb.w	lr, [sp, #24]
 800a466:	b338      	cbz	r0, 800a4b8 <rclc_executor_add_subscription+0x58>
 800a468:	b331      	cbz	r1, 800a4b8 <rclc_executor_add_subscription+0x58>
 800a46a:	b32a      	cbz	r2, 800a4b8 <rclc_executor_add_subscription+0x58>
 800a46c:	b323      	cbz	r3, 800a4b8 <rclc_executor_add_subscription+0x58>
 800a46e:	4604      	mov	r4, r0
 800a470:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800a474:	42a8      	cmp	r0, r5
 800a476:	d301      	bcc.n	800a47c <rclc_executor_add_subscription+0x1c>
 800a478:	2001      	movs	r0, #1
 800a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47c:	6866      	ldr	r6, [r4, #4]
 800a47e:	0187      	lsls	r7, r0, #6
 800a480:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800a484:	2500      	movs	r5, #0
 800a486:	55f5      	strb	r5, [r6, r7]
 800a488:	3001      	adds	r0, #1
 800a48a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800a48e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800a492:	2301      	movs	r3, #1
 800a494:	f104 0514 	add.w	r5, r4, #20
 800a498:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800a49c:	f88c e001 	strb.w	lr, [ip, #1]
 800a4a0:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800a4a4:	60e0      	str	r0, [r4, #12]
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f006 f800 	bl	80104ac <rcl_wait_set_is_valid>
 800a4ac:	b930      	cbnz	r0, 800a4bc <rclc_executor_add_subscription+0x5c>
 800a4ae:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	200b      	movs	r0, #11
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f005 fffb 	bl	80104b8 <rcl_wait_set_fini>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d0f3      	beq.n	800a4ae <rclc_executor_add_subscription+0x4e>
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4c8 <rclc_executor_prepare>:
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d044      	beq.n	800a556 <rclc_executor_prepare+0x8e>
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ce:	f100 0514 	add.w	r5, r0, #20
 800a4d2:	b09b      	sub	sp, #108	@ 0x6c
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f005 ffe8 	bl	80104ac <rcl_wait_set_is_valid>
 800a4dc:	b110      	cbz	r0, 800a4e4 <rclc_executor_prepare+0x1c>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	b01b      	add	sp, #108	@ 0x6c
 800a4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f005 ffe7 	bl	80104b8 <rcl_wait_set_fini>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	d130      	bne.n	800a550 <rclc_executor_prepare+0x88>
 800a4ee:	a80c      	add	r0, sp, #48	@ 0x30
 800a4f0:	f005 ffc8 	bl	8010484 <rcl_get_zero_initialized_wait_set>
 800a4f4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a4f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a4fc:	46ae      	mov	lr, r5
 800a4fe:	6927      	ldr	r7, [r4, #16]
 800a500:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a504:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a508:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a50c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a510:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a514:	f8dc 3000 	ldr.w	r3, [ip]
 800a518:	f8ce 3000 	str.w	r3, [lr]
 800a51c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a51e:	ae04      	add	r6, sp, #16
 800a520:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6822      	ldr	r2, [r4, #0]
 800a526:	6033      	str	r3, [r6, #0]
 800a528:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a52a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a52c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a530:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a534:	e9cd 2100 	strd	r2, r1, [sp]
 800a538:	4628      	mov	r0, r5
 800a53a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a53c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a53e:	f006 fab9 	bl	8010ab4 <rcl_wait_set_init>
 800a542:	2800      	cmp	r0, #0
 800a544:	d0cc      	beq.n	800a4e0 <rclc_executor_prepare+0x18>
 800a546:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a548:	f000 fb56 	bl	800abf8 <rcutils_reset_error>
 800a54c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a54e:	e7c7      	b.n	800a4e0 <rclc_executor_prepare+0x18>
 800a550:	f000 fb52 	bl	800abf8 <rcutils_reset_error>
 800a554:	e7cb      	b.n	800a4ee <rclc_executor_prepare+0x26>
 800a556:	200b      	movs	r0, #11
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop

0800a55c <rclc_executor_spin_some.part.0>:
 800a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	f100 0614 	add.w	r6, r0, #20
 800a564:	b083      	sub	sp, #12
 800a566:	4691      	mov	r9, r2
 800a568:	4698      	mov	r8, r3
 800a56a:	4605      	mov	r5, r0
 800a56c:	f7ff ffac 	bl	800a4c8 <rclc_executor_prepare>
 800a570:	4630      	mov	r0, r6
 800a572:	f006 f86d 	bl	8010650 <rcl_wait_set_clear>
 800a576:	4607      	mov	r7, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	f040 80ed 	bne.w	800a758 <rclc_executor_spin_some.part.0+0x1fc>
 800a57e:	68ab      	ldr	r3, [r5, #8]
 800a580:	4604      	mov	r4, r0
 800a582:	b303      	cbz	r3, 800a5c6 <rclc_executor_spin_some.part.0+0x6a>
 800a584:	6869      	ldr	r1, [r5, #4]
 800a586:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a58a:	01a2      	lsls	r2, r4, #6
 800a58c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a590:	b1cb      	cbz	r3, 800a5c6 <rclc_executor_spin_some.part.0+0x6a>
 800a592:	5c8b      	ldrb	r3, [r1, r2]
 800a594:	2b0a      	cmp	r3, #10
 800a596:	f200 80d8 	bhi.w	800a74a <rclc_executor_spin_some.part.0+0x1ee>
 800a59a:	e8df f003 	tbb	[pc, r3]
 800a59e:	9c9c      	.short	0x9c9c
 800a5a0:	068c8ca7 	.word	0x068c8ca7
 800a5a4:	bdc90606 	.word	0xbdc90606
 800a5a8:	b2          	.byte	0xb2
 800a5a9:	00          	.byte	0x00
 800a5aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a5ae:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f006 fb94 	bl	8010ce0 <rcl_wait_set_add_service>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f040 8086 	bne.w	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a5be:	68ab      	ldr	r3, [r5, #8]
 800a5c0:	3401      	adds	r4, #1
 800a5c2:	429c      	cmp	r4, r3
 800a5c4:	d3de      	bcc.n	800a584 <rclc_executor_spin_some.part.0+0x28>
 800a5c6:	4643      	mov	r3, r8
 800a5c8:	464a      	mov	r2, r9
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f006 fbb4 	bl	8010d38 <rcl_wait>
 800a5d0:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 80c7 	beq.w	800a768 <rclc_executor_spin_some.part.0+0x20c>
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	f040 80b5 	bne.w	800a74a <rclc_executor_spin_some.part.0+0x1ee>
 800a5e0:	68ab      	ldr	r3, [r5, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 8159 	beq.w	800a89a <rclc_executor_spin_some.part.0+0x33e>
 800a5e8:	2400      	movs	r4, #0
 800a5ea:	46a0      	mov	r8, r4
 800a5ec:	f240 1991 	movw	r9, #401	@ 0x191
 800a5f0:	e00a      	b.n	800a608 <rclc_executor_spin_some.part.0+0xac>
 800a5f2:	f7ff fb73 	bl	8009cdc <_rclc_check_for_new_data>
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	b110      	cbz	r0, 800a600 <rclc_executor_spin_some.part.0+0xa4>
 800a5fa:	4548      	cmp	r0, r9
 800a5fc:	f040 80b2 	bne.w	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a600:	68ab      	ldr	r3, [r5, #8]
 800a602:	4598      	cmp	r8, r3
 800a604:	f080 8126 	bcs.w	800a854 <rclc_executor_spin_some.part.0+0x2f8>
 800a608:	686a      	ldr	r2, [r5, #4]
 800a60a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a60e:	4631      	mov	r1, r6
 800a610:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a614:	f108 0801 	add.w	r8, r8, #1
 800a618:	f1bc 0f00 	cmp.w	ip, #0
 800a61c:	d1e9      	bne.n	800a5f2 <rclc_executor_spin_some.part.0+0x96>
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a626:	4798      	blx	r3
 800a628:	2800      	cmp	r0, #0
 800a62a:	f000 809b 	beq.w	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a62e:	68ab      	ldr	r3, [r5, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 8097 	beq.w	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a636:	f04f 0800 	mov.w	r8, #0
 800a63a:	f240 1991 	movw	r9, #401	@ 0x191
 800a63e:	e009      	b.n	800a654 <rclc_executor_spin_some.part.0+0xf8>
 800a640:	f7ff fb9a 	bl	8009d78 <_rclc_take_new_data>
 800a644:	4604      	mov	r4, r0
 800a646:	b110      	cbz	r0, 800a64e <rclc_executor_spin_some.part.0+0xf2>
 800a648:	4548      	cmp	r0, r9
 800a64a:	f040 808b 	bne.w	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a64e:	68ab      	ldr	r3, [r5, #8]
 800a650:	4598      	cmp	r8, r3
 800a652:	d209      	bcs.n	800a668 <rclc_executor_spin_some.part.0+0x10c>
 800a654:	6868      	ldr	r0, [r5, #4]
 800a656:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a65a:	4631      	mov	r1, r6
 800a65c:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a660:	f108 0801 	add.w	r8, r8, #1
 800a664:	2a00      	cmp	r2, #0
 800a666:	d1eb      	bne.n	800a640 <rclc_executor_spin_some.part.0+0xe4>
 800a668:	2600      	movs	r6, #0
 800a66a:	b97b      	cbnz	r3, 800a68c <rclc_executor_spin_some.part.0+0x130>
 800a66c:	e07a      	b.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a66e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a672:	2a08      	cmp	r2, #8
 800a674:	f000 80fd 	beq.w	800a872 <rclc_executor_spin_some.part.0+0x316>
 800a678:	2a09      	cmp	r2, #9
 800a67a:	f000 80ef 	beq.w	800a85c <rclc_executor_spin_some.part.0+0x300>
 800a67e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a682:	b98a      	cbnz	r2, 800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a684:	3601      	adds	r6, #1
 800a686:	429e      	cmp	r6, r3
 800a688:	d262      	bcs.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a68a:	2400      	movs	r4, #0
 800a68c:	686a      	ldr	r2, [r5, #4]
 800a68e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a692:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a696:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a69a:	2900      	cmp	r1, #0
 800a69c:	d062      	beq.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a69e:	7841      	ldrb	r1, [r0, #1]
 800a6a0:	2900      	cmp	r1, #0
 800a6a2:	d0e4      	beq.n	800a66e <rclc_executor_spin_some.part.0+0x112>
 800a6a4:	2901      	cmp	r1, #1
 800a6a6:	d1ed      	bne.n	800a684 <rclc_executor_spin_some.part.0+0x128>
 800a6a8:	f7ff fcda 	bl	800a060 <_rclc_execute.part.0>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	f040 80b6 	bne.w	800a81e <rclc_executor_spin_some.part.0+0x2c2>
 800a6b2:	68ab      	ldr	r3, [r5, #8]
 800a6b4:	e7e6      	b.n	800a684 <rclc_executor_spin_some.part.0+0x128>
 800a6b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a6ba:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f006 fae2 	bl	8010c88 <rcl_wait_set_add_client>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f af7a 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a6ca:	9001      	str	r0, [sp, #4]
 800a6cc:	f000 fa94 	bl	800abf8 <rcutils_reset_error>
 800a6d0:	9801      	ldr	r0, [sp, #4]
 800a6d2:	4607      	mov	r7, r0
 800a6d4:	e03c      	b.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a6d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a6da:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f005 ff8a 	bl	80105f8 <rcl_wait_set_add_subscription>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f43f af6a 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a6ea:	e7ee      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a6ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a6f0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f006 fa97 	bl	8010c28 <rcl_wait_set_add_timer>
 800a6fa:	2800      	cmp	r0, #0
 800a6fc:	f43f af5f 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a700:	e7e3      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a702:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a706:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a70a:	4630      	mov	r0, r6
 800a70c:	f006 fa60 	bl	8010bd0 <rcl_wait_set_add_guard_condition>
 800a710:	2800      	cmp	r0, #0
 800a712:	f43f af54 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a716:	e7d8      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a718:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a71c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a720:	3110      	adds	r1, #16
 800a722:	4630      	mov	r0, r6
 800a724:	f006 ffe0 	bl	80116e8 <rcl_action_wait_set_add_action_server>
 800a728:	2800      	cmp	r0, #0
 800a72a:	f43f af48 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a72e:	e7cc      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a730:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a734:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a738:	3110      	adds	r1, #16
 800a73a:	2300      	movs	r3, #0
 800a73c:	4630      	mov	r0, r6
 800a73e:	f006 fdab 	bl	8011298 <rcl_action_wait_set_add_action_client>
 800a742:	2800      	cmp	r0, #0
 800a744:	f43f af3b 	beq.w	800a5be <rclc_executor_spin_some.part.0+0x62>
 800a748:	e7bf      	b.n	800a6ca <rclc_executor_spin_some.part.0+0x16e>
 800a74a:	f000 fa55 	bl	800abf8 <rcutils_reset_error>
 800a74e:	2701      	movs	r7, #1
 800a750:	4638      	mov	r0, r7
 800a752:	b003      	add	sp, #12
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	f000 fa4e 	bl	800abf8 <rcutils_reset_error>
 800a75c:	4638      	mov	r0, r7
 800a75e:	b003      	add	sp, #12
 800a760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a764:	4627      	mov	r7, r4
 800a766:	e7f3      	b.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a768:	68ab      	ldr	r3, [r5, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f000 8092 	beq.w	800a894 <rclc_executor_spin_some.part.0+0x338>
 800a770:	2400      	movs	r4, #0
 800a772:	46a0      	mov	r8, r4
 800a774:	f240 1991 	movw	r9, #401	@ 0x191
 800a778:	e008      	b.n	800a78c <rclc_executor_spin_some.part.0+0x230>
 800a77a:	f7ff faaf 	bl	8009cdc <_rclc_check_for_new_data>
 800a77e:	4604      	mov	r4, r0
 800a780:	b108      	cbz	r0, 800a786 <rclc_executor_spin_some.part.0+0x22a>
 800a782:	4548      	cmp	r0, r9
 800a784:	d1ee      	bne.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a786:	68ab      	ldr	r3, [r5, #8]
 800a788:	4598      	cmp	r8, r3
 800a78a:	d265      	bcs.n	800a858 <rclc_executor_spin_some.part.0+0x2fc>
 800a78c:	686a      	ldr	r2, [r5, #4]
 800a78e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a792:	4631      	mov	r1, r6
 800a794:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a798:	f108 0801 	add.w	r8, r8, #1
 800a79c:	f1bc 0f00 	cmp.w	ip, #0
 800a7a0:	d1eb      	bne.n	800a77a <rclc_executor_spin_some.part.0+0x21e>
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a7aa:	4798      	blx	r3
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	d0d9      	beq.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a7b0:	68ab      	ldr	r3, [r5, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0d6      	beq.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a7b6:	f04f 0800 	mov.w	r8, #0
 800a7ba:	f240 1991 	movw	r9, #401	@ 0x191
 800a7be:	f240 2a59 	movw	sl, #601	@ 0x259
 800a7c2:	e00e      	b.n	800a7e2 <rclc_executor_spin_some.part.0+0x286>
 800a7c4:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d033      	beq.n	800a834 <rclc_executor_spin_some.part.0+0x2d8>
 800a7cc:	2b09      	cmp	r3, #9
 800a7ce:	d028      	beq.n	800a822 <rclc_executor_spin_some.part.0+0x2c6>
 800a7d0:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a7d4:	b9fb      	cbnz	r3, 800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a7d6:	68ab      	ldr	r3, [r5, #8]
 800a7d8:	f108 0801 	add.w	r8, r8, #1
 800a7dc:	4598      	cmp	r8, r3
 800a7de:	d2b7      	bcs.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	6868      	ldr	r0, [r5, #4]
 800a7e4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a7e8:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a7ec:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0b7      	beq.n	800a764 <rclc_executor_spin_some.part.0+0x208>
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	f7ff fabf 	bl	8009d78 <_rclc_take_new_data>
 800a7fa:	b118      	cbz	r0, 800a804 <rclc_executor_spin_some.part.0+0x2a8>
 800a7fc:	4548      	cmp	r0, r9
 800a7fe:	d001      	beq.n	800a804 <rclc_executor_spin_some.part.0+0x2a8>
 800a800:	4550      	cmp	r0, sl
 800a802:	d10c      	bne.n	800a81e <rclc_executor_spin_some.part.0+0x2c2>
 800a804:	686b      	ldr	r3, [r5, #4]
 800a806:	eb13 000b 	adds.w	r0, r3, fp
 800a80a:	d021      	beq.n	800a850 <rclc_executor_spin_some.part.0+0x2f4>
 800a80c:	7842      	ldrb	r2, [r0, #1]
 800a80e:	2a00      	cmp	r2, #0
 800a810:	d0d8      	beq.n	800a7c4 <rclc_executor_spin_some.part.0+0x268>
 800a812:	2a01      	cmp	r2, #1
 800a814:	d1df      	bne.n	800a7d6 <rclc_executor_spin_some.part.0+0x27a>
 800a816:	f7ff fc23 	bl	800a060 <_rclc_execute.part.0>
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0db      	beq.n	800a7d6 <rclc_executor_spin_some.part.0+0x27a>
 800a81e:	4607      	mov	r7, r0
 800a820:	e796      	b.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a822:	6843      	ldr	r3, [r0, #4]
 800a824:	6a1a      	ldr	r2, [r3, #32]
 800a826:	2a00      	cmp	r2, #0
 800a828:	d1f5      	bne.n	800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a82a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0d1      	beq.n	800a7d6 <rclc_executor_spin_some.part.0+0x27a>
 800a832:	e7f0      	b.n	800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a834:	6843      	ldr	r3, [r0, #4]
 800a836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a838:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a83c:	d1eb      	bne.n	800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a83e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a842:	2a00      	cmp	r2, #0
 800a844:	d1e7      	bne.n	800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a846:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0c3      	beq.n	800a7d6 <rclc_executor_spin_some.part.0+0x27a>
 800a84e:	e7e2      	b.n	800a816 <rclc_executor_spin_some.part.0+0x2ba>
 800a850:	270b      	movs	r7, #11
 800a852:	e77d      	b.n	800a750 <rclc_executor_spin_some.part.0+0x1f4>
 800a854:	686a      	ldr	r2, [r5, #4]
 800a856:	e6e2      	b.n	800a61e <rclc_executor_spin_some.part.0+0xc2>
 800a858:	686a      	ldr	r2, [r5, #4]
 800a85a:	e7a2      	b.n	800a7a2 <rclc_executor_spin_some.part.0+0x246>
 800a85c:	6842      	ldr	r2, [r0, #4]
 800a85e:	6a11      	ldr	r1, [r2, #32]
 800a860:	2900      	cmp	r1, #0
 800a862:	f47f af21 	bne.w	800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a866:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	f43f af0a 	beq.w	800a684 <rclc_executor_spin_some.part.0+0x128>
 800a870:	e71a      	b.n	800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a872:	6842      	ldr	r2, [r0, #4]
 800a874:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a876:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a87a:	f47f af15 	bne.w	800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a87e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a882:	2900      	cmp	r1, #0
 800a884:	f47f af10 	bne.w	800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a888:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	f43f aef9 	beq.w	800a684 <rclc_executor_spin_some.part.0+0x128>
 800a892:	e709      	b.n	800a6a8 <rclc_executor_spin_some.part.0+0x14c>
 800a894:	686a      	ldr	r2, [r5, #4]
 800a896:	461c      	mov	r4, r3
 800a898:	e783      	b.n	800a7a2 <rclc_executor_spin_some.part.0+0x246>
 800a89a:	686a      	ldr	r2, [r5, #4]
 800a89c:	461c      	mov	r4, r3
 800a89e:	e6be      	b.n	800a61e <rclc_executor_spin_some.part.0+0xc2>

0800a8a0 <rclc_executor_spin>:
 800a8a0:	b1d0      	cbz	r0, 800a8d8 <rclc_executor_spin+0x38>
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	e9cd 2300 	strd	r2, r3, [sp]
 800a8b2:	f004 fe91 	bl	800f5d8 <rcl_context_is_valid>
 800a8b6:	4601      	mov	r1, r0
 800a8b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	b131      	cbz	r1, 800a8ce <rclc_executor_spin+0x2e>
 800a8c0:	f7ff fe4c 	bl	800a55c <rclc_executor_spin_some.part.0>
 800a8c4:	f030 0302 	bics.w	r3, r0, #2
 800a8c8:	d0ee      	beq.n	800a8a8 <rclc_executor_spin+0x8>
 800a8ca:	b002      	add	sp, #8
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	f000 f993 	bl	800abf8 <rcutils_reset_error>
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	b002      	add	sp, #8
 800a8d6:	bd10      	pop	{r4, pc}
 800a8d8:	200b      	movs	r0, #11
 800a8da:	4770      	bx	lr

0800a8dc <rclc_executor_handle_counters_zero_init>:
 800a8dc:	b130      	cbz	r0, 800a8ec <rclc_executor_handle_counters_zero_init+0x10>
 800a8de:	b508      	push	{r3, lr}
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	f00c fbf4 	bl	80170d0 <memset>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	bd08      	pop	{r3, pc}
 800a8ec:	200b      	movs	r0, #11
 800a8ee:	4770      	bx	lr

0800a8f0 <rclc_executor_handle_init>:
 800a8f0:	b168      	cbz	r0, 800a90e <rclc_executor_handle_init+0x1e>
 800a8f2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a918 <rclc_executor_handle_init+0x28>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	220b      	movs	r2, #11
 800a8fa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a8fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a902:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a906:	8002      	strh	r2, [r0, #0]
 800a908:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a90a:	4618      	mov	r0, r3
 800a90c:	4770      	bx	lr
 800a90e:	200b      	movs	r0, #11
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	f3af 8000 	nop.w
	...

0800a920 <rclc_support_init>:
 800a920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	b3b8      	cbz	r0, 800a998 <rclc_support_init+0x78>
 800a928:	461c      	mov	r4, r3
 800a92a:	b3ab      	cbz	r3, 800a998 <rclc_support_init+0x78>
 800a92c:	460f      	mov	r7, r1
 800a92e:	4690      	mov	r8, r2
 800a930:	4606      	mov	r6, r0
 800a932:	f005 f86d 	bl	800fa10 <rcl_get_zero_initialized_init_options>
 800a936:	f104 030c 	add.w	r3, r4, #12
 800a93a:	9005      	str	r0, [sp, #20]
 800a93c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a940:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a944:	a805      	add	r0, sp, #20
 800a946:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a94a:	f005 f863 	bl	800fa14 <rcl_init_options_init>
 800a94e:	4605      	mov	r5, r0
 800a950:	b9e0      	cbnz	r0, 800a98c <rclc_support_init+0x6c>
 800a952:	ad02      	add	r5, sp, #8
 800a954:	4628      	mov	r0, r5
 800a956:	f004 fe35 	bl	800f5c4 <rcl_get_zero_initialized_context>
 800a95a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a95e:	4633      	mov	r3, r6
 800a960:	e886 0003 	stmia.w	r6, {r0, r1}
 800a964:	aa05      	add	r2, sp, #20
 800a966:	4641      	mov	r1, r8
 800a968:	4638      	mov	r0, r7
 800a96a:	f004 ff4d 	bl	800f808 <rcl_init>
 800a96e:	4605      	mov	r5, r0
 800a970:	b9b8      	cbnz	r0, 800a9a2 <rclc_support_init+0x82>
 800a972:	60b4      	str	r4, [r6, #8]
 800a974:	4622      	mov	r2, r4
 800a976:	f106 010c 	add.w	r1, r6, #12
 800a97a:	2003      	movs	r0, #3
 800a97c:	f005 fb8c 	bl	8010098 <rcl_clock_init>
 800a980:	4605      	mov	r5, r0
 800a982:	b970      	cbnz	r0, 800a9a2 <rclc_support_init+0x82>
 800a984:	a805      	add	r0, sp, #20
 800a986:	f005 f8ab 	bl	800fae0 <rcl_init_options_fini>
 800a98a:	b108      	cbz	r0, 800a990 <rclc_support_init+0x70>
 800a98c:	f000 f934 	bl	800abf8 <rcutils_reset_error>
 800a990:	4628      	mov	r0, r5
 800a992:	b006      	add	sp, #24
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	250b      	movs	r5, #11
 800a99a:	4628      	mov	r0, r5
 800a99c:	b006      	add	sp, #24
 800a99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a2:	f000 f929 	bl	800abf8 <rcutils_reset_error>
 800a9a6:	a805      	add	r0, sp, #20
 800a9a8:	f005 f89a 	bl	800fae0 <rcl_init_options_fini>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0ef      	beq.n	800a990 <rclc_support_init+0x70>
 800a9b0:	e7ec      	b.n	800a98c <rclc_support_init+0x6c>
 800a9b2:	bf00      	nop

0800a9b4 <rclc_node_init_default>:
 800a9b4:	b3b8      	cbz	r0, 800aa26 <rclc_node_init_default+0x72>
 800a9b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ba:	460d      	mov	r5, r1
 800a9bc:	b0a1      	sub	sp, #132	@ 0x84
 800a9be:	b329      	cbz	r1, 800aa0c <rclc_node_init_default+0x58>
 800a9c0:	4616      	mov	r6, r2
 800a9c2:	b31a      	cbz	r2, 800aa0c <rclc_node_init_default+0x58>
 800a9c4:	461f      	mov	r7, r3
 800a9c6:	b30b      	cbz	r3, 800aa0c <rclc_node_init_default+0x58>
 800a9c8:	f10d 0810 	add.w	r8, sp, #16
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f7fe fcda 	bl	8009388 <rcl_get_zero_initialized_node>
 800a9d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a9d8:	f10d 0918 	add.w	r9, sp, #24
 800a9dc:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9e0:	4648      	mov	r0, r9
 800a9e2:	f7fe fe7b 	bl	80096dc <rcl_node_get_default_options>
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	f7fe fcce 	bl	8009388 <rcl_get_zero_initialized_node>
 800a9ec:	f8cd 9000 	str.w	r9, [sp]
 800a9f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	e884 0003 	stmia.w	r4, {r0, r1}
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7fe fccc 	bl	800939c <rcl_node_init>
 800aa04:	b930      	cbnz	r0, 800aa14 <rclc_node_init_default+0x60>
 800aa06:	b021      	add	sp, #132	@ 0x84
 800aa08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa0c:	200b      	movs	r0, #11
 800aa0e:	b021      	add	sp, #132	@ 0x84
 800aa10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa14:	9003      	str	r0, [sp, #12]
 800aa16:	f000 f8ef 	bl	800abf8 <rcutils_reset_error>
 800aa1a:	f000 f8ed 	bl	800abf8 <rcutils_reset_error>
 800aa1e:	9803      	ldr	r0, [sp, #12]
 800aa20:	b021      	add	sp, #132	@ 0x84
 800aa22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa26:	200b      	movs	r0, #11
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop

0800aa2c <rclc_publisher_init_best_effort>:
 800aa2c:	b368      	cbz	r0, 800aa8a <rclc_publisher_init_best_effort+0x5e>
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	460d      	mov	r5, r1
 800aa34:	b0a0      	sub	sp, #128	@ 0x80
 800aa36:	b321      	cbz	r1, 800aa82 <rclc_publisher_init_best_effort+0x56>
 800aa38:	4616      	mov	r6, r2
 800aa3a:	b312      	cbz	r2, 800aa82 <rclc_publisher_init_best_effort+0x56>
 800aa3c:	461f      	mov	r7, r3
 800aa3e:	b303      	cbz	r3, 800aa82 <rclc_publisher_init_best_effort+0x56>
 800aa40:	4604      	mov	r4, r0
 800aa42:	f7fe fe77 	bl	8009734 <rcl_get_zero_initialized_publisher>
 800aa46:	f10d 0810 	add.w	r8, sp, #16
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	4640      	mov	r0, r8
 800aa4e:	f7fe ff39 	bl	80098c4 <rcl_publisher_get_default_options>
 800aa52:	490f      	ldr	r1, [pc, #60]	@ (800aa90 <rclc_publisher_init_best_effort+0x64>)
 800aa54:	2250      	movs	r2, #80	@ 0x50
 800aa56:	4640      	mov	r0, r8
 800aa58:	f00c fc5d 	bl	8017316 <memcpy>
 800aa5c:	f8cd 8000 	str.w	r8, [sp]
 800aa60:	463b      	mov	r3, r7
 800aa62:	4632      	mov	r2, r6
 800aa64:	4629      	mov	r1, r5
 800aa66:	4620      	mov	r0, r4
 800aa68:	f7fe fe6a 	bl	8009740 <rcl_publisher_init>
 800aa6c:	b910      	cbnz	r0, 800aa74 <rclc_publisher_init_best_effort+0x48>
 800aa6e:	b020      	add	sp, #128	@ 0x80
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	9003      	str	r0, [sp, #12]
 800aa76:	f000 f8bf 	bl	800abf8 <rcutils_reset_error>
 800aa7a:	9803      	ldr	r0, [sp, #12]
 800aa7c:	b020      	add	sp, #128	@ 0x80
 800aa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa82:	200b      	movs	r0, #11
 800aa84:	b020      	add	sp, #128	@ 0x80
 800aa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8a:	200b      	movs	r0, #11
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	08019430 	.word	0x08019430

0800aa94 <rclc_subscription_init_default>:
 800aa94:	b368      	cbz	r0, 800aaf2 <rclc_subscription_init_default+0x5e>
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	b0a0      	sub	sp, #128	@ 0x80
 800aa9e:	b321      	cbz	r1, 800aaea <rclc_subscription_init_default+0x56>
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	b312      	cbz	r2, 800aaea <rclc_subscription_init_default+0x56>
 800aaa4:	461f      	mov	r7, r3
 800aaa6:	b303      	cbz	r3, 800aaea <rclc_subscription_init_default+0x56>
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	f7fe ff7f 	bl	80099ac <rcl_get_zero_initialized_subscription>
 800aaae:	f10d 0810 	add.w	r8, sp, #16
 800aab2:	6020      	str	r0, [r4, #0]
 800aab4:	4640      	mov	r0, r8
 800aab6:	f7ff f87b 	bl	8009bb0 <rcl_subscription_get_default_options>
 800aaba:	490f      	ldr	r1, [pc, #60]	@ (800aaf8 <rclc_subscription_init_default+0x64>)
 800aabc:	2250      	movs	r2, #80	@ 0x50
 800aabe:	4640      	mov	r0, r8
 800aac0:	f00c fc29 	bl	8017316 <memcpy>
 800aac4:	f8cd 8000 	str.w	r8, [sp]
 800aac8:	463b      	mov	r3, r7
 800aaca:	4632      	mov	r2, r6
 800aacc:	4629      	mov	r1, r5
 800aace:	4620      	mov	r0, r4
 800aad0:	f7fe ff72 	bl	80099b8 <rcl_subscription_init>
 800aad4:	b910      	cbnz	r0, 800aadc <rclc_subscription_init_default+0x48>
 800aad6:	b020      	add	sp, #128	@ 0x80
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	9003      	str	r0, [sp, #12]
 800aade:	f000 f88b 	bl	800abf8 <rcutils_reset_error>
 800aae2:	9803      	ldr	r0, [sp, #12]
 800aae4:	b020      	add	sp, #128	@ 0x80
 800aae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaea:	200b      	movs	r0, #11
 800aaec:	b020      	add	sp, #128	@ 0x80
 800aaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf2:	200b      	movs	r0, #11
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	08019480 	.word	0x08019480

0800aafc <__default_zero_allocate>:
 800aafc:	f00b b92a 	b.w	8015d54 <calloc>

0800ab00 <__default_reallocate>:
 800ab00:	f00b bae2 	b.w	80160c8 <realloc>

0800ab04 <__default_deallocate>:
 800ab04:	f00b b9be 	b.w	8015e84 <free>

0800ab08 <__default_allocate>:
 800ab08:	f00b b9b4 	b.w	8015e74 <malloc>

0800ab0c <rcutils_get_zero_initialized_allocator>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4c05      	ldr	r4, [pc, #20]	@ (800ab24 <rcutils_get_zero_initialized_allocator+0x18>)
 800ab10:	4686      	mov	lr, r0
 800ab12:	4684      	mov	ip, r0
 800ab14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	f8cc 3000 	str.w	r3, [ip]
 800ab20:	4670      	mov	r0, lr
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	080194d0 	.word	0x080194d0

0800ab28 <rcutils_set_default_allocator>:
 800ab28:	b1a8      	cbz	r0, 800ab56 <rcutils_set_default_allocator+0x2e>
 800ab2a:	6802      	ldr	r2, [r0, #0]
 800ab2c:	b1a2      	cbz	r2, 800ab58 <rcutils_set_default_allocator+0x30>
 800ab2e:	6841      	ldr	r1, [r0, #4]
 800ab30:	b1a1      	cbz	r1, 800ab5c <rcutils_set_default_allocator+0x34>
 800ab32:	b410      	push	{r4}
 800ab34:	68c4      	ldr	r4, [r0, #12]
 800ab36:	b164      	cbz	r4, 800ab52 <rcutils_set_default_allocator+0x2a>
 800ab38:	6880      	ldr	r0, [r0, #8]
 800ab3a:	b138      	cbz	r0, 800ab4c <rcutils_set_default_allocator+0x24>
 800ab3c:	4b08      	ldr	r3, [pc, #32]	@ (800ab60 <rcutils_set_default_allocator+0x38>)
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	2200      	movs	r2, #0
 800ab42:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ab46:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	4620      	mov	r0, r4
 800ab54:	e7fa      	b.n	800ab4c <rcutils_set_default_allocator+0x24>
 800ab56:	4770      	bx	lr
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4770      	bx	lr
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4770      	bx	lr
 800ab60:	2000001c 	.word	0x2000001c

0800ab64 <rcutils_get_default_allocator>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4c05      	ldr	r4, [pc, #20]	@ (800ab7c <rcutils_get_default_allocator+0x18>)
 800ab68:	4686      	mov	lr, r0
 800ab6a:	4684      	mov	ip, r0
 800ab6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	f8cc 3000 	str.w	r3, [ip]
 800ab78:	4670      	mov	r0, lr
 800ab7a:	bd10      	pop	{r4, pc}
 800ab7c:	2000001c 	.word	0x2000001c

0800ab80 <rcutils_allocator_is_valid>:
 800ab80:	b158      	cbz	r0, 800ab9a <rcutils_allocator_is_valid+0x1a>
 800ab82:	6803      	ldr	r3, [r0, #0]
 800ab84:	b143      	cbz	r3, 800ab98 <rcutils_allocator_is_valid+0x18>
 800ab86:	6843      	ldr	r3, [r0, #4]
 800ab88:	b133      	cbz	r3, 800ab98 <rcutils_allocator_is_valid+0x18>
 800ab8a:	68c3      	ldr	r3, [r0, #12]
 800ab8c:	b123      	cbz	r3, 800ab98 <rcutils_allocator_is_valid+0x18>
 800ab8e:	6880      	ldr	r0, [r0, #8]
 800ab90:	3800      	subs	r0, #0
 800ab92:	bf18      	it	ne
 800ab94:	2001      	movne	r0, #1
 800ab96:	4770      	bx	lr
 800ab98:	4618      	mov	r0, r3
 800ab9a:	4770      	bx	lr

0800ab9c <rcutils_get_env>:
 800ab9c:	b168      	cbz	r0, 800abba <rcutils_get_env+0x1e>
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	460c      	mov	r4, r1
 800aba2:	b129      	cbz	r1, 800abb0 <rcutils_get_env+0x14>
 800aba4:	f00b f904 	bl	8015db0 <getenv>
 800aba8:	b120      	cbz	r0, 800abb4 <rcutils_get_env+0x18>
 800abaa:	6020      	str	r0, [r4, #0]
 800abac:	2000      	movs	r0, #0
 800abae:	bd10      	pop	{r4, pc}
 800abb0:	4803      	ldr	r0, [pc, #12]	@ (800abc0 <rcutils_get_env+0x24>)
 800abb2:	bd10      	pop	{r4, pc}
 800abb4:	4b03      	ldr	r3, [pc, #12]	@ (800abc4 <rcutils_get_env+0x28>)
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	4803      	ldr	r0, [pc, #12]	@ (800abc8 <rcutils_get_env+0x2c>)
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	08019500 	.word	0x08019500
 800abc4:	08019e68 	.word	0x08019e68
 800abc8:	080194e4 	.word	0x080194e4

0800abcc <rcutils_get_error_string>:
 800abcc:	4b06      	ldr	r3, [pc, #24]	@ (800abe8 <rcutils_get_error_string+0x1c>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b13b      	cbz	r3, 800abe2 <rcutils_get_error_string+0x16>
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <rcutils_get_error_string+0x20>)
 800abd4:	781a      	ldrb	r2, [r3, #0]
 800abd6:	b90a      	cbnz	r2, 800abdc <rcutils_get_error_string+0x10>
 800abd8:	2201      	movs	r2, #1
 800abda:	701a      	strb	r2, [r3, #0]
 800abdc:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <rcutils_get_error_string+0x24>)
 800abde:	7818      	ldrb	r0, [r3, #0]
 800abe0:	4770      	bx	lr
 800abe2:	4b04      	ldr	r3, [pc, #16]	@ (800abf4 <rcutils_get_error_string+0x28>)
 800abe4:	7818      	ldrb	r0, [r3, #0]
 800abe6:	4770      	bx	lr
 800abe8:	20013018 	.word	0x20013018
 800abec:	20013031 	.word	0x20013031
 800abf0:	20013030 	.word	0x20013030
 800abf4:	0801951c 	.word	0x0801951c

0800abf8 <rcutils_reset_error>:
 800abf8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ac18 <rcutils_reset_error+0x20>
 800abfc:	4a08      	ldr	r2, [pc, #32]	@ (800ac20 <rcutils_reset_error+0x28>)
 800abfe:	4809      	ldr	r0, [pc, #36]	@ (800ac24 <rcutils_reset_error+0x2c>)
 800ac00:	4909      	ldr	r1, [pc, #36]	@ (800ac28 <rcutils_reset_error+0x30>)
 800ac02:	2300      	movs	r3, #0
 800ac04:	8013      	strh	r3, [r2, #0]
 800ac06:	ed82 7b02 	vstr	d7, [r2, #8]
 800ac0a:	4a08      	ldr	r2, [pc, #32]	@ (800ac2c <rcutils_reset_error+0x34>)
 800ac0c:	7003      	strb	r3, [r0, #0]
 800ac0e:	700b      	strb	r3, [r1, #0]
 800ac10:	7013      	strb	r3, [r2, #0]
 800ac12:	4770      	bx	lr
 800ac14:	f3af 8000 	nop.w
	...
 800ac20:	20013020 	.word	0x20013020
 800ac24:	20013031 	.word	0x20013031
 800ac28:	20013030 	.word	0x20013030
 800ac2c:	20013018 	.word	0x20013018

0800ac30 <rcutils_format_string_limit>:
 800ac30:	b40f      	push	{r0, r1, r2, r3}
 800ac32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac34:	b083      	sub	sp, #12
 800ac36:	ac08      	add	r4, sp, #32
 800ac38:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800ac3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac3e:	b34e      	cbz	r6, 800ac94 <rcutils_format_string_limit+0x64>
 800ac40:	a808      	add	r0, sp, #32
 800ac42:	f7ff ff9d 	bl	800ab80 <rcutils_allocator_is_valid>
 800ac46:	b328      	cbz	r0, 800ac94 <rcutils_format_string_limit+0x64>
 800ac48:	2100      	movs	r1, #0
 800ac4a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4608      	mov	r0, r1
 800ac50:	e9cd 3300 	strd	r3, r3, [sp]
 800ac54:	f000 f8f4 	bl	800ae40 <rcutils_vsnprintf>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	d01a      	beq.n	800ac94 <rcutils_format_string_limit+0x64>
 800ac5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac62:	1c47      	adds	r7, r0, #1
 800ac64:	429f      	cmp	r7, r3
 800ac66:	bf84      	itt	hi
 800ac68:	461f      	movhi	r7, r3
 800ac6a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800ac6e:	4638      	mov	r0, r7
 800ac70:	9b08      	ldr	r3, [sp, #32]
 800ac72:	4798      	blx	r3
 800ac74:	4604      	mov	r4, r0
 800ac76:	b168      	cbz	r0, 800ac94 <rcutils_format_string_limit+0x64>
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f000 f8df 	bl	800ae40 <rcutils_vsnprintf>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	db02      	blt.n	800ac8c <rcutils_format_string_limit+0x5c>
 800ac86:	2300      	movs	r3, #0
 800ac88:	5563      	strb	r3, [r4, r5]
 800ac8a:	e004      	b.n	800ac96 <rcutils_format_string_limit+0x66>
 800ac8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac8e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac90:	4620      	mov	r0, r4
 800ac92:	4798      	blx	r3
 800ac94:	2400      	movs	r4, #0
 800ac96:	4620      	mov	r0, r4
 800ac98:	b003      	add	sp, #12
 800ac9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ac9e:	b004      	add	sp, #16
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop

0800aca4 <rcutils_repl_str>:
 800aca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca8:	ed2d 8b02 	vpush	{d8}
 800acac:	b087      	sub	sp, #28
 800acae:	4680      	mov	r8, r0
 800acb0:	4608      	mov	r0, r1
 800acb2:	f8cd 8004 	str.w	r8, [sp, #4]
 800acb6:	ee08 2a10 	vmov	s16, r2
 800acba:	468a      	mov	sl, r1
 800acbc:	4699      	mov	r9, r3
 800acbe:	f7f5 fb07 	bl	80002d0 <strlen>
 800acc2:	2600      	movs	r6, #0
 800acc4:	4647      	mov	r7, r8
 800acc6:	9002      	str	r0, [sp, #8]
 800acc8:	46b3      	mov	fp, r6
 800acca:	2510      	movs	r5, #16
 800accc:	46b0      	mov	r8, r6
 800acce:	e01d      	b.n	800ad0c <rcutils_repl_str+0x68>
 800acd0:	f10b 0b01 	add.w	fp, fp, #1
 800acd4:	455e      	cmp	r6, fp
 800acd6:	d211      	bcs.n	800acfc <rcutils_repl_str+0x58>
 800acd8:	442e      	add	r6, r5
 800acda:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800acde:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ace2:	00b1      	lsls	r1, r6, #2
 800ace4:	4798      	blx	r3
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f000 8088 	beq.w	800adfc <rcutils_repl_str+0x158>
 800acec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800acf4:	4680      	mov	r8, r0
 800acf6:	bf28      	it	cs
 800acf8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800acfc:	9a01      	ldr	r2, [sp, #4]
 800acfe:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ad02:	1aa2      	subs	r2, r4, r2
 800ad04:	f843 2c04 	str.w	r2, [r3, #-4]
 800ad08:	9b02      	ldr	r3, [sp, #8]
 800ad0a:	18e7      	adds	r7, r4, r3
 800ad0c:	4651      	mov	r1, sl
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f00c fa05 	bl	801711e <strstr>
 800ad14:	4604      	mov	r4, r0
 800ad16:	4640      	mov	r0, r8
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	d1d9      	bne.n	800acd0 <rcutils_repl_str+0x2c>
 800ad1c:	46b8      	mov	r8, r7
 800ad1e:	4607      	mov	r7, r0
 800ad20:	4640      	mov	r0, r8
 800ad22:	f7f5 fad5 	bl	80002d0 <strlen>
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	eba8 0303 	sub.w	r3, r8, r3
 800ad2c:	181c      	adds	r4, r3, r0
 800ad2e:	9404      	str	r4, [sp, #16]
 800ad30:	f1bb 0f00 	cmp.w	fp, #0
 800ad34:	d04a      	beq.n	800adcc <rcutils_repl_str+0x128>
 800ad36:	ee18 0a10 	vmov	r0, s16
 800ad3a:	f7f5 fac9 	bl	80002d0 <strlen>
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ad44:	1ac3      	subs	r3, r0, r3
 800ad46:	fb0b 4303 	mla	r3, fp, r3, r4
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	9305      	str	r3, [sp, #20]
 800ad4e:	4606      	mov	r6, r0
 800ad50:	f8d9 3000 	ldr.w	r3, [r9]
 800ad54:	1c50      	adds	r0, r2, #1
 800ad56:	4798      	blx	r3
 800ad58:	9003      	str	r0, [sp, #12]
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d04f      	beq.n	800adfe <rcutils_repl_str+0x15a>
 800ad5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	4641      	mov	r1, r8
 800ad66:	f00c fad6 	bl	8017316 <memcpy>
 800ad6a:	683d      	ldr	r5, [r7, #0]
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	9701      	str	r7, [sp, #4]
 800ad70:	46ba      	mov	sl, r7
 800ad72:	441d      	add	r5, r3
 800ad74:	9f02      	ldr	r7, [sp, #8]
 800ad76:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad7a:	2401      	movs	r4, #1
 800ad7c:	46d1      	mov	r9, sl
 800ad7e:	ee18 aa10 	vmov	sl, s16
 800ad82:	e00a      	b.n	800ad9a <rcutils_repl_str+0xf6>
 800ad84:	f8d9 5000 	ldr.w	r5, [r9]
 800ad88:	1aaa      	subs	r2, r5, r2
 800ad8a:	1885      	adds	r5, r0, r2
 800ad8c:	f00c fac3 	bl	8017316 <memcpy>
 800ad90:	45a3      	cmp	fp, r4
 800ad92:	f104 0201 	add.w	r2, r4, #1
 800ad96:	d935      	bls.n	800ae04 <rcutils_repl_str+0x160>
 800ad98:	4614      	mov	r4, r2
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	4651      	mov	r1, sl
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f00c fab9 	bl	8017316 <memcpy>
 800ada4:	f859 2b04 	ldr.w	r2, [r9], #4
 800ada8:	45a3      	cmp	fp, r4
 800adaa:	443a      	add	r2, r7
 800adac:	eb05 0006 	add.w	r0, r5, r6
 800adb0:	eb08 0102 	add.w	r1, r8, r2
 800adb4:	d1e6      	bne.n	800ad84 <rcutils_repl_str+0xe0>
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	1a9a      	subs	r2, r3, r2
 800adba:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800adbe:	f00c faaa 	bl	8017316 <memcpy>
 800adc2:	9a03      	ldr	r2, [sp, #12]
 800adc4:	9905      	ldr	r1, [sp, #20]
 800adc6:	2300      	movs	r3, #0
 800adc8:	5453      	strb	r3, [r2, r1]
 800adca:	e00b      	b.n	800ade4 <rcutils_repl_str+0x140>
 800adcc:	4620      	mov	r0, r4
 800adce:	f8d9 3000 	ldr.w	r3, [r9]
 800add2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800add6:	3001      	adds	r0, #1
 800add8:	4798      	blx	r3
 800adda:	9003      	str	r0, [sp, #12]
 800addc:	b110      	cbz	r0, 800ade4 <rcutils_repl_str+0x140>
 800adde:	9901      	ldr	r1, [sp, #4]
 800ade0:	f00c fa91 	bl	8017306 <strcpy>
 800ade4:	4638      	mov	r0, r7
 800ade6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800adea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800adee:	4798      	blx	r3
 800adf0:	9803      	ldr	r0, [sp, #12]
 800adf2:	b007      	add	sp, #28
 800adf4:	ecbd 8b02 	vpop	{d8}
 800adf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adfc:	4647      	mov	r7, r8
 800adfe:	2300      	movs	r3, #0
 800ae00:	9303      	str	r3, [sp, #12]
 800ae02:	e7ef      	b.n	800ade4 <rcutils_repl_str+0x140>
 800ae04:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800ae08:	e7db      	b.n	800adc2 <rcutils_repl_str+0x11e>
 800ae0a:	bf00      	nop

0800ae0c <rcutils_snprintf>:
 800ae0c:	b40c      	push	{r2, r3}
 800ae0e:	b530      	push	{r4, r5, lr}
 800ae10:	b083      	sub	sp, #12
 800ae12:	ab06      	add	r3, sp, #24
 800ae14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	b152      	cbz	r2, 800ae32 <rcutils_snprintf+0x26>
 800ae1c:	b138      	cbz	r0, 800ae2e <rcutils_snprintf+0x22>
 800ae1e:	b141      	cbz	r1, 800ae32 <rcutils_snprintf+0x26>
 800ae20:	f00c f88a 	bl	8016f38 <vsniprintf>
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae2a:	b002      	add	sp, #8
 800ae2c:	4770      	bx	lr
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d0f6      	beq.n	800ae20 <rcutils_snprintf+0x14>
 800ae32:	f00c fa3b 	bl	80172ac <__errno>
 800ae36:	2316      	movs	r3, #22
 800ae38:	6003      	str	r3, [r0, #0]
 800ae3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae3e:	e7f1      	b.n	800ae24 <rcutils_snprintf+0x18>

0800ae40 <rcutils_vsnprintf>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	b13a      	cbz	r2, 800ae54 <rcutils_vsnprintf+0x14>
 800ae44:	b120      	cbz	r0, 800ae50 <rcutils_vsnprintf+0x10>
 800ae46:	b129      	cbz	r1, 800ae54 <rcutils_vsnprintf+0x14>
 800ae48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae4c:	f00c b874 	b.w	8016f38 <vsniprintf>
 800ae50:	2900      	cmp	r1, #0
 800ae52:	d0f9      	beq.n	800ae48 <rcutils_vsnprintf+0x8>
 800ae54:	f00c fa2a 	bl	80172ac <__errno>
 800ae58:	2316      	movs	r3, #22
 800ae5a:	6003      	str	r3, [r0, #0]
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	bf00      	nop

0800ae64 <rcutils_strdup>:
 800ae64:	b084      	sub	sp, #16
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	ac07      	add	r4, sp, #28
 800ae6c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ae70:	4605      	mov	r5, r0
 800ae72:	b1b0      	cbz	r0, 800aea2 <rcutils_strdup+0x3e>
 800ae74:	f7f5 fa2c 	bl	80002d0 <strlen>
 800ae78:	1c42      	adds	r2, r0, #1
 800ae7a:	9b07      	ldr	r3, [sp, #28]
 800ae7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae7e:	9201      	str	r2, [sp, #4]
 800ae80:	4606      	mov	r6, r0
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
 800ae86:	4604      	mov	r4, r0
 800ae88:	b128      	cbz	r0, 800ae96 <rcutils_strdup+0x32>
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f00c fa42 	bl	8017316 <memcpy>
 800ae92:	2300      	movs	r3, #0
 800ae94:	55a3      	strb	r3, [r4, r6]
 800ae96:	4620      	mov	r0, r4
 800ae98:	b002      	add	sp, #8
 800ae9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae9e:	b004      	add	sp, #16
 800aea0:	4770      	bx	lr
 800aea2:	4604      	mov	r4, r0
 800aea4:	e7f7      	b.n	800ae96 <rcutils_strdup+0x32>
 800aea6:	bf00      	nop

0800aea8 <rcutils_strndup>:
 800aea8:	b082      	sub	sp, #8
 800aeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeac:	ac06      	add	r4, sp, #24
 800aeae:	e884 000c 	stmia.w	r4, {r2, r3}
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b188      	cbz	r0, 800aeda <rcutils_strndup+0x32>
 800aeb6:	1c4f      	adds	r7, r1, #1
 800aeb8:	460e      	mov	r6, r1
 800aeba:	4638      	mov	r0, r7
 800aebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aebe:	4790      	blx	r2
 800aec0:	4604      	mov	r4, r0
 800aec2:	b128      	cbz	r0, 800aed0 <rcutils_strndup+0x28>
 800aec4:	463a      	mov	r2, r7
 800aec6:	4629      	mov	r1, r5
 800aec8:	f00c fa25 	bl	8017316 <memcpy>
 800aecc:	2300      	movs	r3, #0
 800aece:	55a3      	strb	r3, [r4, r6]
 800aed0:	4620      	mov	r0, r4
 800aed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aed6:	b002      	add	sp, #8
 800aed8:	4770      	bx	lr
 800aeda:	4604      	mov	r4, r0
 800aedc:	e7f8      	b.n	800aed0 <rcutils_strndup+0x28>
 800aede:	bf00      	nop

0800aee0 <rcutils_system_time_now>:
 800aee0:	b308      	cbz	r0, 800af26 <rcutils_system_time_now+0x46>
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	4604      	mov	r4, r0
 800aee8:	4669      	mov	r1, sp
 800aeea:	2001      	movs	r0, #1
 800aeec:	f7f7 fa00 	bl	80022f0 <clock_gettime>
 800aef0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	db13      	blt.n	800af20 <rcutils_system_time_now+0x40>
 800aef8:	9902      	ldr	r1, [sp, #8]
 800aefa:	2900      	cmp	r1, #0
 800aefc:	db0d      	blt.n	800af1a <rcutils_system_time_now+0x3a>
 800aefe:	4e0b      	ldr	r6, [pc, #44]	@ (800af2c <rcutils_system_time_now+0x4c>)
 800af00:	fba3 3206 	umull	r3, r2, r3, r6
 800af04:	185b      	adds	r3, r3, r1
 800af06:	fb06 2205 	mla	r2, r6, r5, r2
 800af0a:	f04f 0000 	mov.w	r0, #0
 800af0e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800af12:	e9c4 3200 	strd	r3, r2, [r4]
 800af16:	b004      	add	sp, #16
 800af18:	bd70      	pop	{r4, r5, r6, pc}
 800af1a:	ea53 0205 	orrs.w	r2, r3, r5
 800af1e:	d1ee      	bne.n	800aefe <rcutils_system_time_now+0x1e>
 800af20:	2002      	movs	r0, #2
 800af22:	b004      	add	sp, #16
 800af24:	bd70      	pop	{r4, r5, r6, pc}
 800af26:	200b      	movs	r0, #11
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	3b9aca00 	.word	0x3b9aca00

0800af30 <rcutils_steady_time_now>:
 800af30:	b308      	cbz	r0, 800af76 <rcutils_steady_time_now+0x46>
 800af32:	b570      	push	{r4, r5, r6, lr}
 800af34:	b084      	sub	sp, #16
 800af36:	4604      	mov	r4, r0
 800af38:	4669      	mov	r1, sp
 800af3a:	2000      	movs	r0, #0
 800af3c:	f7f7 f9d8 	bl	80022f0 <clock_gettime>
 800af40:	e9dd 3500 	ldrd	r3, r5, [sp]
 800af44:	2d00      	cmp	r5, #0
 800af46:	db13      	blt.n	800af70 <rcutils_steady_time_now+0x40>
 800af48:	9902      	ldr	r1, [sp, #8]
 800af4a:	2900      	cmp	r1, #0
 800af4c:	db0d      	blt.n	800af6a <rcutils_steady_time_now+0x3a>
 800af4e:	4e0b      	ldr	r6, [pc, #44]	@ (800af7c <rcutils_steady_time_now+0x4c>)
 800af50:	fba3 3206 	umull	r3, r2, r3, r6
 800af54:	185b      	adds	r3, r3, r1
 800af56:	fb06 2205 	mla	r2, r6, r5, r2
 800af5a:	f04f 0000 	mov.w	r0, #0
 800af5e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800af62:	e9c4 3200 	strd	r3, r2, [r4]
 800af66:	b004      	add	sp, #16
 800af68:	bd70      	pop	{r4, r5, r6, pc}
 800af6a:	ea53 0205 	orrs.w	r2, r3, r5
 800af6e:	d1ee      	bne.n	800af4e <rcutils_steady_time_now+0x1e>
 800af70:	2002      	movs	r0, #2
 800af72:	b004      	add	sp, #16
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	200b      	movs	r0, #11
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	3b9aca00 	.word	0x3b9aca00

0800af80 <rmw_get_default_publisher_options>:
 800af80:	2200      	movs	r2, #0
 800af82:	6002      	str	r2, [r0, #0]
 800af84:	7102      	strb	r2, [r0, #4]
 800af86:	4770      	bx	lr

0800af88 <rmw_subscription_content_filter_options_fini>:
 800af88:	b1b0      	cbz	r0, 800afb8 <rmw_subscription_content_filter_options_fini+0x30>
 800af8a:	b538      	push	{r3, r4, r5, lr}
 800af8c:	4604      	mov	r4, r0
 800af8e:	4608      	mov	r0, r1
 800af90:	460d      	mov	r5, r1
 800af92:	f7ff fdf5 	bl	800ab80 <rcutils_allocator_is_valid>
 800af96:	b168      	cbz	r0, 800afb4 <rmw_subscription_content_filter_options_fini+0x2c>
 800af98:	6820      	ldr	r0, [r4, #0]
 800af9a:	b120      	cbz	r0, 800afa6 <rmw_subscription_content_filter_options_fini+0x1e>
 800af9c:	686b      	ldr	r3, [r5, #4]
 800af9e:	6929      	ldr	r1, [r5, #16]
 800afa0:	4798      	blx	r3
 800afa2:	2300      	movs	r3, #0
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	1d20      	adds	r0, r4, #4
 800afa8:	f006 fe72 	bl	8011c90 <rcutils_string_array_fini>
 800afac:	3800      	subs	r0, #0
 800afae:	bf18      	it	ne
 800afb0:	2001      	movne	r0, #1
 800afb2:	bd38      	pop	{r3, r4, r5, pc}
 800afb4:	200b      	movs	r0, #11
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	200b      	movs	r0, #11
 800afba:	4770      	bx	lr

0800afbc <rmw_get_default_subscription_options>:
 800afbc:	2200      	movs	r2, #0
 800afbe:	e9c0 2200 	strd	r2, r2, [r0]
 800afc2:	6082      	str	r2, [r0, #8]
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop

0800afc8 <rmw_get_zero_initialized_message_info>:
 800afc8:	b510      	push	{r4, lr}
 800afca:	2240      	movs	r2, #64	@ 0x40
 800afcc:	4604      	mov	r4, r0
 800afce:	2100      	movs	r1, #0
 800afd0:	f00c f87e 	bl	80170d0 <memset>
 800afd4:	4620      	mov	r0, r4
 800afd6:	bd10      	pop	{r4, pc}

0800afd8 <rmw_validate_namespace_with_size>:
 800afd8:	b340      	cbz	r0, 800b02c <rmw_validate_namespace_with_size+0x54>
 800afda:	b570      	push	{r4, r5, r6, lr}
 800afdc:	4614      	mov	r4, r2
 800afde:	b0c2      	sub	sp, #264	@ 0x108
 800afe0:	b332      	cbz	r2, 800b030 <rmw_validate_namespace_with_size+0x58>
 800afe2:	2901      	cmp	r1, #1
 800afe4:	460d      	mov	r5, r1
 800afe6:	461e      	mov	r6, r3
 800afe8:	d102      	bne.n	800aff0 <rmw_validate_namespace_with_size+0x18>
 800afea:	7803      	ldrb	r3, [r0, #0]
 800afec:	2b2f      	cmp	r3, #47	@ 0x2f
 800afee:	d012      	beq.n	800b016 <rmw_validate_namespace_with_size+0x3e>
 800aff0:	aa01      	add	r2, sp, #4
 800aff2:	4669      	mov	r1, sp
 800aff4:	f007 f848 	bl	8012088 <rmw_validate_full_topic_name>
 800aff8:	b978      	cbnz	r0, 800b01a <rmw_validate_namespace_with_size+0x42>
 800affa:	9b00      	ldr	r3, [sp, #0]
 800affc:	b14b      	cbz	r3, 800b012 <rmw_validate_namespace_with_size+0x3a>
 800affe:	2b07      	cmp	r3, #7
 800b000:	d007      	beq.n	800b012 <rmw_validate_namespace_with_size+0x3a>
 800b002:	1e5a      	subs	r2, r3, #1
 800b004:	2a05      	cmp	r2, #5
 800b006:	d82b      	bhi.n	800b060 <rmw_validate_namespace_with_size+0x88>
 800b008:	e8df f002 	tbb	[pc, r2]
 800b00c:	1e212427 	.word	0x1e212427
 800b010:	141b      	.short	0x141b
 800b012:	2df5      	cmp	r5, #245	@ 0xf5
 800b014:	d803      	bhi.n	800b01e <rmw_validate_namespace_with_size+0x46>
 800b016:	2000      	movs	r0, #0
 800b018:	6020      	str	r0, [r4, #0]
 800b01a:	b042      	add	sp, #264	@ 0x108
 800b01c:	bd70      	pop	{r4, r5, r6, pc}
 800b01e:	2307      	movs	r3, #7
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	2e00      	cmp	r6, #0
 800b024:	d0f9      	beq.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b026:	23f4      	movs	r3, #244	@ 0xf4
 800b028:	6033      	str	r3, [r6, #0]
 800b02a:	e7f6      	b.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b02c:	200b      	movs	r0, #11
 800b02e:	4770      	bx	lr
 800b030:	200b      	movs	r0, #11
 800b032:	e7f2      	b.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b034:	2306      	movs	r3, #6
 800b036:	6023      	str	r3, [r4, #0]
 800b038:	2e00      	cmp	r6, #0
 800b03a:	d0ee      	beq.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b03c:	9b01      	ldr	r3, [sp, #4]
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	e7eb      	b.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b042:	2305      	movs	r3, #5
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	e7f7      	b.n	800b038 <rmw_validate_namespace_with_size+0x60>
 800b048:	2304      	movs	r3, #4
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	e7f4      	b.n	800b038 <rmw_validate_namespace_with_size+0x60>
 800b04e:	2303      	movs	r3, #3
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	e7f1      	b.n	800b038 <rmw_validate_namespace_with_size+0x60>
 800b054:	2302      	movs	r3, #2
 800b056:	6023      	str	r3, [r4, #0]
 800b058:	e7ee      	b.n	800b038 <rmw_validate_namespace_with_size+0x60>
 800b05a:	2301      	movs	r3, #1
 800b05c:	6023      	str	r3, [r4, #0]
 800b05e:	e7eb      	b.n	800b038 <rmw_validate_namespace_with_size+0x60>
 800b060:	4a03      	ldr	r2, [pc, #12]	@ (800b070 <rmw_validate_namespace_with_size+0x98>)
 800b062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b066:	a802      	add	r0, sp, #8
 800b068:	f7ff fed0 	bl	800ae0c <rcutils_snprintf>
 800b06c:	2001      	movs	r0, #1
 800b06e:	e7d4      	b.n	800b01a <rmw_validate_namespace_with_size+0x42>
 800b070:	08019520 	.word	0x08019520

0800b074 <rmw_validate_namespace>:
 800b074:	b168      	cbz	r0, 800b092 <rmw_validate_namespace+0x1e>
 800b076:	b570      	push	{r4, r5, r6, lr}
 800b078:	460d      	mov	r5, r1
 800b07a:	4616      	mov	r6, r2
 800b07c:	4604      	mov	r4, r0
 800b07e:	f7f5 f927 	bl	80002d0 <strlen>
 800b082:	4633      	mov	r3, r6
 800b084:	4601      	mov	r1, r0
 800b086:	462a      	mov	r2, r5
 800b088:	4620      	mov	r0, r4
 800b08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b08e:	f7ff bfa3 	b.w	800afd8 <rmw_validate_namespace_with_size>
 800b092:	200b      	movs	r0, #11
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop

0800b098 <rmw_namespace_validation_result_string>:
 800b098:	2807      	cmp	r0, #7
 800b09a:	bf9a      	itte	ls
 800b09c:	4b02      	ldrls	r3, [pc, #8]	@ (800b0a8 <rmw_namespace_validation_result_string+0x10>)
 800b09e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b0a2:	4802      	ldrhi	r0, [pc, #8]	@ (800b0ac <rmw_namespace_validation_result_string+0x14>)
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	08019718 	.word	0x08019718
 800b0ac:	08019570 	.word	0x08019570

0800b0b0 <rmw_validate_node_name>:
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	d03b      	beq.n	800b12c <rmw_validate_node_name+0x7c>
 800b0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b8:	460d      	mov	r5, r1
 800b0ba:	2900      	cmp	r1, #0
 800b0bc:	d038      	beq.n	800b130 <rmw_validate_node_name+0x80>
 800b0be:	4616      	mov	r6, r2
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	f7f5 f905 	bl	80002d0 <strlen>
 800b0c6:	b1e0      	cbz	r0, 800b102 <rmw_validate_node_name+0x52>
 800b0c8:	1e63      	subs	r3, r4, #1
 800b0ca:	eb03 0800 	add.w	r8, r3, r0
 800b0ce:	f1c4 0101 	rsb	r1, r4, #1
 800b0d2:	18cf      	adds	r7, r1, r3
 800b0d4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800b0d8:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800b0dc:	f02e 0c20 	bic.w	ip, lr, #32
 800b0e0:	2a09      	cmp	r2, #9
 800b0e2:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800b0e6:	d914      	bls.n	800b112 <rmw_validate_node_name+0x62>
 800b0e8:	f1bc 0f19 	cmp.w	ip, #25
 800b0ec:	d911      	bls.n	800b112 <rmw_validate_node_name+0x62>
 800b0ee:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800b0f2:	d00e      	beq.n	800b112 <rmw_validate_node_name+0x62>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	b106      	cbz	r6, 800b0fc <rmw_validate_node_name+0x4c>
 800b0fa:	6037      	str	r7, [r6, #0]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b102:	2301      	movs	r3, #1
 800b104:	602b      	str	r3, [r5, #0]
 800b106:	2e00      	cmp	r6, #0
 800b108:	d0f8      	beq.n	800b0fc <rmw_validate_node_name+0x4c>
 800b10a:	2000      	movs	r0, #0
 800b10c:	6030      	str	r0, [r6, #0]
 800b10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b112:	4543      	cmp	r3, r8
 800b114:	d1dd      	bne.n	800b0d2 <rmw_validate_node_name+0x22>
 800b116:	7822      	ldrb	r2, [r4, #0]
 800b118:	4b0d      	ldr	r3, [pc, #52]	@ (800b150 <rmw_validate_node_name+0xa0>)
 800b11a:	5cd3      	ldrb	r3, [r2, r3]
 800b11c:	f013 0304 	ands.w	r3, r3, #4
 800b120:	d110      	bne.n	800b144 <rmw_validate_node_name+0x94>
 800b122:	28ff      	cmp	r0, #255	@ 0xff
 800b124:	d806      	bhi.n	800b134 <rmw_validate_node_name+0x84>
 800b126:	602b      	str	r3, [r5, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	e7e8      	b.n	800b0fe <rmw_validate_node_name+0x4e>
 800b12c:	200b      	movs	r0, #11
 800b12e:	4770      	bx	lr
 800b130:	200b      	movs	r0, #11
 800b132:	e7e4      	b.n	800b0fe <rmw_validate_node_name+0x4e>
 800b134:	2204      	movs	r2, #4
 800b136:	602a      	str	r2, [r5, #0]
 800b138:	2e00      	cmp	r6, #0
 800b13a:	d0df      	beq.n	800b0fc <rmw_validate_node_name+0x4c>
 800b13c:	22fe      	movs	r2, #254	@ 0xfe
 800b13e:	6032      	str	r2, [r6, #0]
 800b140:	4618      	mov	r0, r3
 800b142:	e7dc      	b.n	800b0fe <rmw_validate_node_name+0x4e>
 800b144:	2303      	movs	r3, #3
 800b146:	602b      	str	r3, [r5, #0]
 800b148:	2e00      	cmp	r6, #0
 800b14a:	d1de      	bne.n	800b10a <rmw_validate_node_name+0x5a>
 800b14c:	e7d6      	b.n	800b0fc <rmw_validate_node_name+0x4c>
 800b14e:	bf00      	nop
 800b150:	08019fa3 	.word	0x08019fa3

0800b154 <rmw_node_name_validation_result_string>:
 800b154:	2804      	cmp	r0, #4
 800b156:	bf9a      	itte	ls
 800b158:	4b02      	ldrls	r3, [pc, #8]	@ (800b164 <rmw_node_name_validation_result_string+0x10>)
 800b15a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800b15e:	4802      	ldrhi	r0, [pc, #8]	@ (800b168 <rmw_node_name_validation_result_string+0x14>)
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	08019824 	.word	0x08019824
 800b168:	08019738 	.word	0x08019738

0800b16c <rmw_uros_set_custom_transport>:
 800b16c:	b470      	push	{r4, r5, r6}
 800b16e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b172:	b162      	cbz	r2, 800b18e <rmw_uros_set_custom_transport+0x22>
 800b174:	b15b      	cbz	r3, 800b18e <rmw_uros_set_custom_transport+0x22>
 800b176:	b155      	cbz	r5, 800b18e <rmw_uros_set_custom_transport+0x22>
 800b178:	b14e      	cbz	r6, 800b18e <rmw_uros_set_custom_transport+0x22>
 800b17a:	4c06      	ldr	r4, [pc, #24]	@ (800b194 <rmw_uros_set_custom_transport+0x28>)
 800b17c:	7020      	strb	r0, [r4, #0]
 800b17e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b182:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b186:	6166      	str	r6, [r4, #20]
 800b188:	2000      	movs	r0, #0
 800b18a:	bc70      	pop	{r4, r5, r6}
 800b18c:	4770      	bx	lr
 800b18e:	200b      	movs	r0, #11
 800b190:	bc70      	pop	{r4, r5, r6}
 800b192:	4770      	bx	lr
 800b194:	20013034 	.word	0x20013034

0800b198 <create_node>:
 800b198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b19c:	b083      	sub	sp, #12
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d05f      	beq.n	800b262 <create_node+0xca>
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	4835      	ldr	r0, [pc, #212]	@ (800b27c <create_node+0xe4>)
 800b1a6:	460f      	mov	r7, r1
 800b1a8:	4690      	mov	r8, r2
 800b1aa:	461d      	mov	r5, r3
 800b1ac:	f006 ffe2 	bl	8012174 <get_memory>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d056      	beq.n	800b262 <create_node+0xca>
 800b1b4:	6884      	ldr	r4, [r0, #8]
 800b1b6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800b1b8:	6123      	str	r3, [r4, #16]
 800b1ba:	f007 f843 	bl	8012244 <rmw_get_implementation_identifier>
 800b1be:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800b1c2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800b1c6:	f8c4 9020 	str.w	r9, [r4, #32]
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	f7f5 f880 	bl	80002d0 <strlen>
 800b1d0:	1c42      	adds	r2, r0, #1
 800b1d2:	2a3c      	cmp	r2, #60	@ 0x3c
 800b1d4:	f104 0518 	add.w	r5, r4, #24
 800b1d8:	d840      	bhi.n	800b25c <create_node+0xc4>
 800b1da:	4648      	mov	r0, r9
 800b1dc:	4631      	mov	r1, r6
 800b1de:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800b1e2:	f00c f898 	bl	8017316 <memcpy>
 800b1e6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	f7f5 f870 	bl	80002d0 <strlen>
 800b1f0:	1c42      	adds	r2, r0, #1
 800b1f2:	2a3c      	cmp	r2, #60	@ 0x3c
 800b1f4:	d832      	bhi.n	800b25c <create_node+0xc4>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4648      	mov	r0, r9
 800b1fa:	f00c f88c 	bl	8017316 <memcpy>
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b204:	2101      	movs	r1, #1
 800b206:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800b20a:	1842      	adds	r2, r0, r1
 800b20c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800b210:	f001 fb84 	bl	800c91c <uxr_object_id>
 800b214:	6160      	str	r0, [r4, #20]
 800b216:	783b      	ldrb	r3, [r7, #0]
 800b218:	2b2f      	cmp	r3, #47	@ 0x2f
 800b21a:	d127      	bne.n	800b26c <create_node+0xd4>
 800b21c:	787b      	ldrb	r3, [r7, #1]
 800b21e:	bb2b      	cbnz	r3, 800b26c <create_node+0xd4>
 800b220:	4a17      	ldr	r2, [pc, #92]	@ (800b280 <create_node+0xe8>)
 800b222:	4818      	ldr	r0, [pc, #96]	@ (800b284 <create_node+0xec>)
 800b224:	4633      	mov	r3, r6
 800b226:	213c      	movs	r1, #60	@ 0x3c
 800b228:	f00b fdc4 	bl	8016db4 <sniprintf>
 800b22c:	6920      	ldr	r0, [r4, #16]
 800b22e:	4915      	ldr	r1, [pc, #84]	@ (800b284 <create_node+0xec>)
 800b230:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800b234:	9100      	str	r1, [sp, #0]
 800b236:	2106      	movs	r1, #6
 800b238:	9101      	str	r1, [sp, #4]
 800b23a:	6811      	ldr	r1, [r2, #0]
 800b23c:	6962      	ldr	r2, [r4, #20]
 800b23e:	fa1f f388 	uxth.w	r3, r8
 800b242:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b246:	f001 f9b3 	bl	800c5b0 <uxr_buffer_create_participant_bin>
 800b24a:	4602      	mov	r2, r0
 800b24c:	6920      	ldr	r0, [r4, #16]
 800b24e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b252:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b256:	f000 ff19 	bl	800c08c <run_xrce_session>
 800b25a:	b918      	cbnz	r0, 800b264 <create_node+0xcc>
 800b25c:	4628      	mov	r0, r5
 800b25e:	f000 fda3 	bl	800bda8 <rmw_uxrce_fini_node_memory>
 800b262:	2500      	movs	r5, #0
 800b264:	4628      	mov	r0, r5
 800b266:	b003      	add	sp, #12
 800b268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b26c:	4a06      	ldr	r2, [pc, #24]	@ (800b288 <create_node+0xf0>)
 800b26e:	9600      	str	r6, [sp, #0]
 800b270:	463b      	mov	r3, r7
 800b272:	213c      	movs	r1, #60	@ 0x3c
 800b274:	4803      	ldr	r0, [pc, #12]	@ (800b284 <create_node+0xec>)
 800b276:	f00b fd9d 	bl	8016db4 <sniprintf>
 800b27a:	e7d7      	b.n	800b22c <create_node+0x94>
 800b27c:	2001795c 	.word	0x2001795c
 800b280:	0801986c 	.word	0x0801986c
 800b284:	20013050 	.word	0x20013050
 800b288:	080192ec 	.word	0x080192ec

0800b28c <rmw_create_node>:
 800b28c:	b199      	cbz	r1, 800b2b6 <rmw_create_node+0x2a>
 800b28e:	780b      	ldrb	r3, [r1, #0]
 800b290:	468c      	mov	ip, r1
 800b292:	b183      	cbz	r3, 800b2b6 <rmw_create_node+0x2a>
 800b294:	b410      	push	{r4}
 800b296:	4614      	mov	r4, r2
 800b298:	b14a      	cbz	r2, 800b2ae <rmw_create_node+0x22>
 800b29a:	7813      	ldrb	r3, [r2, #0]
 800b29c:	b13b      	cbz	r3, 800b2ae <rmw_create_node+0x22>
 800b29e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4660      	mov	r0, ip
 800b2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2aa:	f7ff bf75 	b.w	800b198 <create_node>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop

0800b2bc <rmw_destroy_node>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	b328      	cbz	r0, 800b30c <rmw_destroy_node+0x50>
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	6800      	ldr	r0, [r0, #0]
 800b2c4:	b120      	cbz	r0, 800b2d0 <rmw_destroy_node+0x14>
 800b2c6:	4b36      	ldr	r3, [pc, #216]	@ (800b3a0 <rmw_destroy_node+0xe4>)
 800b2c8:	6819      	ldr	r1, [r3, #0]
 800b2ca:	f7f4 ffa1 	bl	8000210 <strcmp>
 800b2ce:	b9e8      	cbnz	r0, 800b30c <rmw_destroy_node+0x50>
 800b2d0:	687d      	ldr	r5, [r7, #4]
 800b2d2:	b1dd      	cbz	r5, 800b30c <rmw_destroy_node+0x50>
 800b2d4:	4b33      	ldr	r3, [pc, #204]	@ (800b3a4 <rmw_destroy_node+0xe8>)
 800b2d6:	681c      	ldr	r4, [r3, #0]
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	d05f      	beq.n	800b39c <rmw_destroy_node+0xe0>
 800b2dc:	2600      	movs	r6, #0
 800b2de:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b2e2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	d013      	beq.n	800b312 <rmw_destroy_node+0x56>
 800b2ea:	2c00      	cmp	r4, #0
 800b2ec:	d1f7      	bne.n	800b2de <rmw_destroy_node+0x22>
 800b2ee:	4b2e      	ldr	r3, [pc, #184]	@ (800b3a8 <rmw_destroy_node+0xec>)
 800b2f0:	681c      	ldr	r4, [r3, #0]
 800b2f2:	b1c4      	cbz	r4, 800b326 <rmw_destroy_node+0x6a>
 800b2f4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b2f8:	6a0b      	ldr	r3, [r1, #32]
 800b2fa:	429d      	cmp	r5, r3
 800b2fc:	d1f9      	bne.n	800b2f2 <rmw_destroy_node+0x36>
 800b2fe:	317c      	adds	r1, #124	@ 0x7c
 800b300:	4638      	mov	r0, r7
 800b302:	f000 fb37 	bl	800b974 <rmw_destroy_subscription>
 800b306:	2801      	cmp	r0, #1
 800b308:	4606      	mov	r6, r0
 800b30a:	d1f2      	bne.n	800b2f2 <rmw_destroy_node+0x36>
 800b30c:	2601      	movs	r6, #1
 800b30e:	4630      	mov	r0, r6
 800b310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b312:	3184      	adds	r1, #132	@ 0x84
 800b314:	4638      	mov	r0, r7
 800b316:	f000 f9a5 	bl	800b664 <rmw_destroy_publisher>
 800b31a:	2801      	cmp	r0, #1
 800b31c:	4606      	mov	r6, r0
 800b31e:	d0f5      	beq.n	800b30c <rmw_destroy_node+0x50>
 800b320:	2c00      	cmp	r4, #0
 800b322:	d1dc      	bne.n	800b2de <rmw_destroy_node+0x22>
 800b324:	e7e3      	b.n	800b2ee <rmw_destroy_node+0x32>
 800b326:	4b21      	ldr	r3, [pc, #132]	@ (800b3ac <rmw_destroy_node+0xf0>)
 800b328:	681c      	ldr	r4, [r3, #0]
 800b32a:	b16c      	cbz	r4, 800b348 <rmw_destroy_node+0x8c>
 800b32c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b330:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b332:	429d      	cmp	r5, r3
 800b334:	d1f9      	bne.n	800b32a <rmw_destroy_node+0x6e>
 800b336:	317c      	adds	r1, #124	@ 0x7c
 800b338:	4638      	mov	r0, r7
 800b33a:	f000 f9e5 	bl	800b708 <rmw_destroy_service>
 800b33e:	2801      	cmp	r0, #1
 800b340:	4606      	mov	r6, r0
 800b342:	d0e3      	beq.n	800b30c <rmw_destroy_node+0x50>
 800b344:	2c00      	cmp	r4, #0
 800b346:	d1f1      	bne.n	800b32c <rmw_destroy_node+0x70>
 800b348:	4b19      	ldr	r3, [pc, #100]	@ (800b3b0 <rmw_destroy_node+0xf4>)
 800b34a:	681c      	ldr	r4, [r3, #0]
 800b34c:	b16c      	cbz	r4, 800b36a <rmw_destroy_node+0xae>
 800b34e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800b352:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800b354:	429d      	cmp	r5, r3
 800b356:	d1f9      	bne.n	800b34c <rmw_destroy_node+0x90>
 800b358:	317c      	adds	r1, #124	@ 0x7c
 800b35a:	4638      	mov	r0, r7
 800b35c:	f006 ff2e 	bl	80121bc <rmw_destroy_client>
 800b360:	2801      	cmp	r0, #1
 800b362:	4606      	mov	r6, r0
 800b364:	d0d2      	beq.n	800b30c <rmw_destroy_node+0x50>
 800b366:	2c00      	cmp	r4, #0
 800b368:	d1f1      	bne.n	800b34e <rmw_destroy_node+0x92>
 800b36a:	6928      	ldr	r0, [r5, #16]
 800b36c:	696a      	ldr	r2, [r5, #20]
 800b36e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b372:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b376:	6819      	ldr	r1, [r3, #0]
 800b378:	f001 f8ce 	bl	800c518 <uxr_buffer_delete_entity>
 800b37c:	4602      	mov	r2, r0
 800b37e:	6928      	ldr	r0, [r5, #16]
 800b380:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b384:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b388:	f000 fe80 	bl	800c08c <run_xrce_session>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	bf08      	it	eq
 800b390:	2602      	moveq	r6, #2
 800b392:	4638      	mov	r0, r7
 800b394:	f000 fd08 	bl	800bda8 <rmw_uxrce_fini_node_memory>
 800b398:	4630      	mov	r0, r6
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b39c:	4626      	mov	r6, r4
 800b39e:	e7a6      	b.n	800b2ee <rmw_destroy_node+0x32>
 800b3a0:	08019bcc 	.word	0x08019bcc
 800b3a4:	2001796c 	.word	0x2001796c
 800b3a8:	200179ac 	.word	0x200179ac
 800b3ac:	2001797c 	.word	0x2001797c
 800b3b0:	2001308c 	.word	0x2001308c

0800b3b4 <rmw_node_get_graph_guard_condition>:
 800b3b4:	6843      	ldr	r3, [r0, #4]
 800b3b6:	6918      	ldr	r0, [r3, #16]
 800b3b8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <flush_session>:
 800b3c0:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b3c2:	f002 b8e9 	b.w	800d598 <uxr_run_session_until_confirm_delivery>
 800b3c6:	bf00      	nop

0800b3c8 <rmw_publish>:
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d053      	beq.n	800b474 <rmw_publish+0xac>
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	460d      	mov	r5, r1
 800b3d0:	b08e      	sub	sp, #56	@ 0x38
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	d04b      	beq.n	800b46e <rmw_publish+0xa6>
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	f000 fed7 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d045      	beq.n	800b46e <rmw_publish+0xa6>
 800b3e2:	6866      	ldr	r6, [r4, #4]
 800b3e4:	2e00      	cmp	r6, #0
 800b3e6:	d042      	beq.n	800b46e <rmw_publish+0xa6>
 800b3e8:	69b4      	ldr	r4, [r6, #24]
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	6923      	ldr	r3, [r4, #16]
 800b3ee:	4798      	blx	r3
 800b3f0:	69f3      	ldr	r3, [r6, #28]
 800b3f2:	9005      	str	r0, [sp, #20]
 800b3f4:	b113      	cbz	r3, 800b3fc <rmw_publish+0x34>
 800b3f6:	a805      	add	r0, sp, #20
 800b3f8:	4798      	blx	r3
 800b3fa:	9805      	ldr	r0, [sp, #20]
 800b3fc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	9000      	str	r0, [sp, #0]
 800b404:	6972      	ldr	r2, [r6, #20]
 800b406:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b408:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b40c:	ab06      	add	r3, sp, #24
 800b40e:	f002 feaf 	bl	800e170 <uxr_prepare_output_stream>
 800b412:	b1d8      	cbz	r0, 800b44c <rmw_publish+0x84>
 800b414:	68a3      	ldr	r3, [r4, #8]
 800b416:	a906      	add	r1, sp, #24
 800b418:	4628      	mov	r0, r5
 800b41a:	4798      	blx	r3
 800b41c:	6a33      	ldr	r3, [r6, #32]
 800b41e:	4604      	mov	r4, r0
 800b420:	b10b      	cbz	r3, 800b426 <rmw_publish+0x5e>
 800b422:	a806      	add	r0, sp, #24
 800b424:	4798      	blx	r3
 800b426:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b430:	d022      	beq.n	800b478 <rmw_publish+0xb0>
 800b432:	6918      	ldr	r0, [r3, #16]
 800b434:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b436:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b43a:	f002 f8ad 	bl	800d598 <uxr_run_session_until_confirm_delivery>
 800b43e:	4020      	ands	r0, r4
 800b440:	b2c4      	uxtb	r4, r0
 800b442:	f084 0001 	eor.w	r0, r4, #1
 800b446:	b2c0      	uxtb	r0, r0
 800b448:	b00e      	add	sp, #56	@ 0x38
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b450:	6918      	ldr	r0, [r3, #16]
 800b452:	9b05      	ldr	r3, [sp, #20]
 800b454:	9300      	str	r3, [sp, #0]
 800b456:	4b0b      	ldr	r3, [pc, #44]	@ (800b484 <rmw_publish+0xbc>)
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	9602      	str	r6, [sp, #8]
 800b45c:	6972      	ldr	r2, [r6, #20]
 800b45e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b460:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b464:	ab06      	add	r3, sp, #24
 800b466:	f002 feb3 	bl	800e1d0 <uxr_prepare_output_stream_fragmented>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d1d2      	bne.n	800b414 <rmw_publish+0x4c>
 800b46e:	2001      	movs	r0, #1
 800b470:	b00e      	add	sp, #56	@ 0x38
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	2001      	movs	r0, #1
 800b476:	4770      	bx	lr
 800b478:	6918      	ldr	r0, [r3, #16]
 800b47a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b47e:	f001 fccb 	bl	800ce18 <uxr_flash_output_streams>
 800b482:	e7de      	b.n	800b442 <rmw_publish+0x7a>
 800b484:	0800b3c1 	.word	0x0800b3c1

0800b488 <rmw_create_publisher>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	b087      	sub	sp, #28
 800b48e:	2800      	cmp	r0, #0
 800b490:	f000 80cc 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b494:	460e      	mov	r6, r1
 800b496:	2900      	cmp	r1, #0
 800b498:	f000 80c8 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b49c:	4604      	mov	r4, r0
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	4615      	mov	r5, r2
 800b4a2:	4698      	mov	r8, r3
 800b4a4:	f000 fe72 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	f000 80bf 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b4ae:	2d00      	cmp	r5, #0
 800b4b0:	f000 80bc 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b4b4:	782b      	ldrb	r3, [r5, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80b8 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b4bc:	f1b8 0f00 	cmp.w	r8, #0
 800b4c0:	f000 80b4 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b4c4:	485c      	ldr	r0, [pc, #368]	@ (800b638 <rmw_create_publisher+0x1b0>)
 800b4c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b4ca:	f006 fe53 	bl	8012174 <get_memory>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f000 80ac 	beq.w	800b62c <rmw_create_publisher+0x1a4>
 800b4d4:	6884      	ldr	r4, [r0, #8]
 800b4d6:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b4da:	f006 feb3 	bl	8012244 <rmw_get_implementation_identifier>
 800b4de:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b4e2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b4e6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f7f4 fef0 	bl	80002d0 <strlen>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	283c      	cmp	r0, #60	@ 0x3c
 800b4f4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b4f8:	f200 8091 	bhi.w	800b61e <rmw_create_publisher+0x196>
 800b4fc:	4a4f      	ldr	r2, [pc, #316]	@ (800b63c <rmw_create_publisher+0x1b4>)
 800b4fe:	462b      	mov	r3, r5
 800b500:	213c      	movs	r1, #60	@ 0x3c
 800b502:	4650      	mov	r0, sl
 800b504:	f00b fc56 	bl	8016db4 <sniprintf>
 800b508:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b50c:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b50e:	4641      	mov	r1, r8
 800b510:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b514:	2250      	movs	r2, #80	@ 0x50
 800b516:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b51a:	f00b fefc 	bl	8017316 <memcpy>
 800b51e:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b522:	4947      	ldr	r1, [pc, #284]	@ (800b640 <rmw_create_publisher+0x1b8>)
 800b524:	2b02      	cmp	r3, #2
 800b526:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b52a:	bf0c      	ite	eq
 800b52c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b530:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b534:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b536:	2300      	movs	r3, #0
 800b538:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b53c:	4630      	mov	r0, r6
 800b53e:	f000 fe33 	bl	800c1a8 <get_message_typesupport_handle>
 800b542:	2800      	cmp	r0, #0
 800b544:	d06b      	beq.n	800b61e <rmw_create_publisher+0x196>
 800b546:	6842      	ldr	r2, [r0, #4]
 800b548:	61a2      	str	r2, [r4, #24]
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d067      	beq.n	800b61e <rmw_create_publisher+0x196>
 800b54e:	4629      	mov	r1, r5
 800b550:	4643      	mov	r3, r8
 800b552:	4648      	mov	r0, r9
 800b554:	f007 f904 	bl	8012760 <create_topic>
 800b558:	6260      	str	r0, [r4, #36]	@ 0x24
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d063      	beq.n	800b626 <rmw_create_publisher+0x19e>
 800b55e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b566:	2103      	movs	r1, #3
 800b568:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b56c:	1c42      	adds	r2, r0, #1
 800b56e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b572:	f001 f9d3 	bl	800c91c <uxr_object_id>
 800b576:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b57a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b57e:	6120      	str	r0, [r4, #16]
 800b580:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b584:	6910      	ldr	r0, [r2, #16]
 800b586:	2506      	movs	r5, #6
 800b588:	9500      	str	r5, [sp, #0]
 800b58a:	6819      	ldr	r1, [r3, #0]
 800b58c:	6922      	ldr	r2, [r4, #16]
 800b58e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b592:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b596:	f001 f873 	bl	800c680 <uxr_buffer_create_publisher_bin>
 800b59a:	4602      	mov	r2, r0
 800b59c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b5a0:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b5a4:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b5a8:	f000 fd70 	bl	800c08c <run_xrce_session>
 800b5ac:	b3b8      	cbz	r0, 800b61e <rmw_create_publisher+0x196>
 800b5ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5b6:	2105      	movs	r1, #5
 800b5b8:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b5bc:	1c42      	adds	r2, r0, #1
 800b5be:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b5c2:	f001 f9ab 	bl	800c91c <uxr_object_id>
 800b5c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b5ca:	6160      	str	r0, [r4, #20]
 800b5cc:	691e      	ldr	r6, [r3, #16]
 800b5ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5d2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b5d6:	f10d 0a10 	add.w	sl, sp, #16
 800b5da:	4641      	mov	r1, r8
 800b5dc:	4650      	mov	r0, sl
 800b5de:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b5e2:	f000 fd6f 	bl	800c0c4 <convert_qos_profile>
 800b5e6:	9503      	str	r5, [sp, #12]
 800b5e8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b5ec:	9001      	str	r0, [sp, #4]
 800b5ee:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b5f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b5fc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b600:	f8d8 1000 	ldr.w	r1, [r8]
 800b604:	4630      	mov	r0, r6
 800b606:	f001 f89b 	bl	800c740 <uxr_buffer_create_datawriter_bin>
 800b60a:	4602      	mov	r2, r0
 800b60c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b610:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b614:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b618:	f000 fd38 	bl	800c08c <run_xrce_session>
 800b61c:	b938      	cbnz	r0, 800b62e <rmw_create_publisher+0x1a6>
 800b61e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b620:	b108      	cbz	r0, 800b626 <rmw_create_publisher+0x19e>
 800b622:	f000 fc31 	bl	800be88 <rmw_uxrce_fini_topic_memory>
 800b626:	4638      	mov	r0, r7
 800b628:	f000 fbd6 	bl	800bdd8 <rmw_uxrce_fini_publisher_memory>
 800b62c:	2700      	movs	r7, #0
 800b62e:	4638      	mov	r0, r7
 800b630:	b007      	add	sp, #28
 800b632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b636:	bf00      	nop
 800b638:	2001796c 	.word	0x2001796c
 800b63c:	0801986c 	.word	0x0801986c
 800b640:	08019838 	.word	0x08019838

0800b644 <rmw_publisher_get_actual_qos>:
 800b644:	b150      	cbz	r0, 800b65c <rmw_publisher_get_actual_qos+0x18>
 800b646:	b508      	push	{r3, lr}
 800b648:	460b      	mov	r3, r1
 800b64a:	b149      	cbz	r1, 800b660 <rmw_publisher_get_actual_qos+0x1c>
 800b64c:	6841      	ldr	r1, [r0, #4]
 800b64e:	2250      	movs	r2, #80	@ 0x50
 800b650:	3128      	adds	r1, #40	@ 0x28
 800b652:	4618      	mov	r0, r3
 800b654:	f00b fe5f 	bl	8017316 <memcpy>
 800b658:	2000      	movs	r0, #0
 800b65a:	bd08      	pop	{r3, pc}
 800b65c:	200b      	movs	r0, #11
 800b65e:	4770      	bx	lr
 800b660:	200b      	movs	r0, #11
 800b662:	bd08      	pop	{r3, pc}

0800b664 <rmw_destroy_publisher>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	b128      	cbz	r0, 800b674 <rmw_destroy_publisher+0x10>
 800b668:	4604      	mov	r4, r0
 800b66a:	6800      	ldr	r0, [r0, #0]
 800b66c:	460d      	mov	r5, r1
 800b66e:	f000 fd8d 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b672:	b910      	cbnz	r0, 800b67a <rmw_destroy_publisher+0x16>
 800b674:	2401      	movs	r4, #1
 800b676:	4620      	mov	r0, r4
 800b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0f9      	beq.n	800b674 <rmw_destroy_publisher+0x10>
 800b680:	2d00      	cmp	r5, #0
 800b682:	d0f7      	beq.n	800b674 <rmw_destroy_publisher+0x10>
 800b684:	6828      	ldr	r0, [r5, #0]
 800b686:	f000 fd81 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d0f2      	beq.n	800b674 <rmw_destroy_publisher+0x10>
 800b68e:	686c      	ldr	r4, [r5, #4]
 800b690:	2c00      	cmp	r4, #0
 800b692:	d0ef      	beq.n	800b674 <rmw_destroy_publisher+0x10>
 800b694:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b696:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b69a:	f007 f8b1 	bl	8012800 <destroy_topic>
 800b69e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b6a2:	6962      	ldr	r2, [r4, #20]
 800b6a4:	6918      	ldr	r0, [r3, #16]
 800b6a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b6aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6ae:	6819      	ldr	r1, [r3, #0]
 800b6b0:	f000 ff32 	bl	800c518 <uxr_buffer_delete_entity>
 800b6b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b6b8:	6922      	ldr	r2, [r4, #16]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	6809      	ldr	r1, [r1, #0]
 800b6c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b6c8:	f000 ff26 	bl	800c518 <uxr_buffer_delete_entity>
 800b6cc:	693e      	ldr	r6, [r7, #16]
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b6d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b6d8:	4604      	mov	r4, r0
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f000 fcd6 	bl	800c08c <run_xrce_session>
 800b6e0:	693e      	ldr	r6, [r7, #16]
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b6e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f000 fccc 	bl	800c08c <run_xrce_session>
 800b6f4:	b12c      	cbz	r4, 800b702 <rmw_destroy_publisher+0x9e>
 800b6f6:	b120      	cbz	r0, 800b702 <rmw_destroy_publisher+0x9e>
 800b6f8:	2400      	movs	r4, #0
 800b6fa:	4628      	mov	r0, r5
 800b6fc:	f000 fb6c 	bl	800bdd8 <rmw_uxrce_fini_publisher_memory>
 800b700:	e7b9      	b.n	800b676 <rmw_destroy_publisher+0x12>
 800b702:	2402      	movs	r4, #2
 800b704:	e7f9      	b.n	800b6fa <rmw_destroy_publisher+0x96>
 800b706:	bf00      	nop

0800b708 <rmw_destroy_service>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	b128      	cbz	r0, 800b718 <rmw_destroy_service+0x10>
 800b70c:	4604      	mov	r4, r0
 800b70e:	6800      	ldr	r0, [r0, #0]
 800b710:	460d      	mov	r5, r1
 800b712:	f000 fd3b 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b716:	b910      	cbnz	r0, 800b71e <rmw_destroy_service+0x16>
 800b718:	2401      	movs	r4, #1
 800b71a:	4620      	mov	r0, r4
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
 800b71e:	6863      	ldr	r3, [r4, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d0f9      	beq.n	800b718 <rmw_destroy_service+0x10>
 800b724:	2d00      	cmp	r5, #0
 800b726:	d0f7      	beq.n	800b718 <rmw_destroy_service+0x10>
 800b728:	6828      	ldr	r0, [r5, #0]
 800b72a:	f000 fd2f 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d0f2      	beq.n	800b718 <rmw_destroy_service+0x10>
 800b732:	686e      	ldr	r6, [r5, #4]
 800b734:	2e00      	cmp	r6, #0
 800b736:	d0ef      	beq.n	800b718 <rmw_destroy_service+0x10>
 800b738:	6864      	ldr	r4, [r4, #4]
 800b73a:	6932      	ldr	r2, [r6, #16]
 800b73c:	6920      	ldr	r0, [r4, #16]
 800b73e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b742:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b746:	6819      	ldr	r1, [r3, #0]
 800b748:	f001 f952 	bl	800c9f0 <uxr_buffer_cancel_data>
 800b74c:	4602      	mov	r2, r0
 800b74e:	6920      	ldr	r0, [r4, #16]
 800b750:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b754:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b758:	f000 fc98 	bl	800c08c <run_xrce_session>
 800b75c:	6920      	ldr	r0, [r4, #16]
 800b75e:	6932      	ldr	r2, [r6, #16]
 800b760:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b764:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b768:	6819      	ldr	r1, [r3, #0]
 800b76a:	f000 fed5 	bl	800c518 <uxr_buffer_delete_entity>
 800b76e:	4602      	mov	r2, r0
 800b770:	6920      	ldr	r0, [r4, #16]
 800b772:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b776:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b77a:	f000 fc87 	bl	800c08c <run_xrce_session>
 800b77e:	2800      	cmp	r0, #0
 800b780:	4628      	mov	r0, r5
 800b782:	bf14      	ite	ne
 800b784:	2400      	movne	r4, #0
 800b786:	2402      	moveq	r4, #2
 800b788:	f000 fb52 	bl	800be30 <rmw_uxrce_fini_service_memory>
 800b78c:	e7c5      	b.n	800b71a <rmw_destroy_service+0x12>
 800b78e:	bf00      	nop

0800b790 <rmw_create_subscription>:
 800b790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b794:	b08d      	sub	sp, #52	@ 0x34
 800b796:	2800      	cmp	r0, #0
 800b798:	f000 80d1 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b79c:	460e      	mov	r6, r1
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	f000 80cd 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	6800      	ldr	r0, [r0, #0]
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	4698      	mov	r8, r3
 800b7ac:	f000 fcee 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	f000 80c4 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	f000 80c1 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b7bc:	782b      	ldrb	r3, [r5, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 80bd 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b7c4:	f1b8 0f00 	cmp.w	r8, #0
 800b7c8:	f000 80b9 	beq.w	800b93e <rmw_create_subscription+0x1ae>
 800b7cc:	485e      	ldr	r0, [pc, #376]	@ (800b948 <rmw_create_subscription+0x1b8>)
 800b7ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b7d2:	f006 fccf 	bl	8012174 <get_memory>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f000 80b1 	beq.w	800b940 <rmw_create_subscription+0x1b0>
 800b7de:	6887      	ldr	r7, [r0, #8]
 800b7e0:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800b7e4:	f006 fd2e 	bl	8012244 <rmw_get_implementation_identifier>
 800b7e8:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800b7ec:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800b7ee:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f7f4 fd6c 	bl	80002d0 <strlen>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	283c      	cmp	r0, #60	@ 0x3c
 800b7fc:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800b800:	f200 8096 	bhi.w	800b930 <rmw_create_subscription+0x1a0>
 800b804:	4a51      	ldr	r2, [pc, #324]	@ (800b94c <rmw_create_subscription+0x1bc>)
 800b806:	462b      	mov	r3, r5
 800b808:	213c      	movs	r1, #60	@ 0x3c
 800b80a:	4650      	mov	r0, sl
 800b80c:	f00b fad2 	bl	8016db4 <sniprintf>
 800b810:	4641      	mov	r1, r8
 800b812:	f8c7 9020 	str.w	r9, [r7, #32]
 800b816:	2250      	movs	r2, #80	@ 0x50
 800b818:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800b81c:	f00b fd7b 	bl	8017316 <memcpy>
 800b820:	494b      	ldr	r1, [pc, #300]	@ (800b950 <rmw_create_subscription+0x1c0>)
 800b822:	4630      	mov	r0, r6
 800b824:	f000 fcc0 	bl	800c1a8 <get_message_typesupport_handle>
 800b828:	2800      	cmp	r0, #0
 800b82a:	f000 8081 	beq.w	800b930 <rmw_create_subscription+0x1a0>
 800b82e:	6842      	ldr	r2, [r0, #4]
 800b830:	61ba      	str	r2, [r7, #24]
 800b832:	2a00      	cmp	r2, #0
 800b834:	d07c      	beq.n	800b930 <rmw_create_subscription+0x1a0>
 800b836:	4629      	mov	r1, r5
 800b838:	4643      	mov	r3, r8
 800b83a:	4648      	mov	r0, r9
 800b83c:	f006 ff90 	bl	8012760 <create_topic>
 800b840:	61f8      	str	r0, [r7, #28]
 800b842:	2800      	cmp	r0, #0
 800b844:	d078      	beq.n	800b938 <rmw_create_subscription+0x1a8>
 800b846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b84a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b84e:	2104      	movs	r1, #4
 800b850:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800b854:	1c42      	adds	r2, r0, #1
 800b856:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800b85a:	f001 f85f 	bl	800c91c <uxr_object_id>
 800b85e:	6138      	str	r0, [r7, #16]
 800b860:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b864:	2506      	movs	r5, #6
 800b866:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800b86a:	9500      	str	r5, [sp, #0]
 800b86c:	6819      	ldr	r1, [r3, #0]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b874:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b878:	f000 ff32 	bl	800c6e0 <uxr_buffer_create_subscriber_bin>
 800b87c:	4602      	mov	r2, r0
 800b87e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b882:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b886:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b88a:	f000 fbff 	bl	800c08c <run_xrce_session>
 800b88e:	2800      	cmp	r0, #0
 800b890:	d04e      	beq.n	800b930 <rmw_create_subscription+0x1a0>
 800b892:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b89a:	4629      	mov	r1, r5
 800b89c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800b8a0:	1c42      	adds	r2, r0, #1
 800b8a2:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800b8a6:	f001 f839 	bl	800c91c <uxr_object_id>
 800b8aa:	ae08      	add	r6, sp, #32
 800b8ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	6178      	str	r0, [r7, #20]
 800b8b4:	4641      	mov	r1, r8
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800b8bc:	9305      	str	r3, [sp, #20]
 800b8be:	f000 fc01 	bl	800c0c4 <convert_qos_profile>
 800b8c2:	9503      	str	r5, [sp, #12]
 800b8c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b8c8:	9b05      	ldr	r3, [sp, #20]
 800b8ca:	9001      	str	r0, [sp, #4]
 800b8cc:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800b8d8:	f8db 1000 	ldr.w	r1, [fp]
 800b8dc:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800b8e0:	f000 ffa4 	bl	800c82c <uxr_buffer_create_datareader_bin>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b8ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b8ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b8f2:	f000 fbcb 	bl	800c08c <run_xrce_session>
 800b8f6:	b1d8      	cbz	r0, 800b930 <rmw_create_subscription+0x1a0>
 800b8f8:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b8fc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b900:	2b02      	cmp	r3, #2
 800b902:	bf0c      	ite	eq
 800b904:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800b908:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800b90c:	9307      	str	r3, [sp, #28]
 800b90e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800b912:	2200      	movs	r2, #0
 800b914:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800b918:	ab0a      	add	r3, sp, #40	@ 0x28
 800b91a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	6809      	ldr	r1, [r1, #0]
 800b926:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b92a:	f001 f827 	bl	800c97c <uxr_buffer_request_data>
 800b92e:	e007      	b.n	800b940 <rmw_create_subscription+0x1b0>
 800b930:	69f8      	ldr	r0, [r7, #28]
 800b932:	b108      	cbz	r0, 800b938 <rmw_create_subscription+0x1a8>
 800b934:	f000 faa8 	bl	800be88 <rmw_uxrce_fini_topic_memory>
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fa63 	bl	800be04 <rmw_uxrce_fini_subscription_memory>
 800b93e:	2400      	movs	r4, #0
 800b940:	4620      	mov	r0, r4
 800b942:	b00d      	add	sp, #52	@ 0x34
 800b944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b948:	200179ac 	.word	0x200179ac
 800b94c:	0801986c 	.word	0x0801986c
 800b950:	08019838 	.word	0x08019838

0800b954 <rmw_subscription_get_actual_qos>:
 800b954:	b150      	cbz	r0, 800b96c <rmw_subscription_get_actual_qos+0x18>
 800b956:	b508      	push	{r3, lr}
 800b958:	460b      	mov	r3, r1
 800b95a:	b149      	cbz	r1, 800b970 <rmw_subscription_get_actual_qos+0x1c>
 800b95c:	6841      	ldr	r1, [r0, #4]
 800b95e:	2250      	movs	r2, #80	@ 0x50
 800b960:	3128      	adds	r1, #40	@ 0x28
 800b962:	4618      	mov	r0, r3
 800b964:	f00b fcd7 	bl	8017316 <memcpy>
 800b968:	2000      	movs	r0, #0
 800b96a:	bd08      	pop	{r3, pc}
 800b96c:	200b      	movs	r0, #11
 800b96e:	4770      	bx	lr
 800b970:	200b      	movs	r0, #11
 800b972:	bd08      	pop	{r3, pc}

0800b974 <rmw_destroy_subscription>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	b128      	cbz	r0, 800b984 <rmw_destroy_subscription+0x10>
 800b978:	4604      	mov	r4, r0
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	460d      	mov	r5, r1
 800b97e:	f000 fc05 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b982:	b910      	cbnz	r0, 800b98a <rmw_destroy_subscription+0x16>
 800b984:	2401      	movs	r4, #1
 800b986:	4620      	mov	r0, r4
 800b988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b98a:	6863      	ldr	r3, [r4, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0f9      	beq.n	800b984 <rmw_destroy_subscription+0x10>
 800b990:	2d00      	cmp	r5, #0
 800b992:	d0f7      	beq.n	800b984 <rmw_destroy_subscription+0x10>
 800b994:	6828      	ldr	r0, [r5, #0]
 800b996:	f000 fbf9 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0f2      	beq.n	800b984 <rmw_destroy_subscription+0x10>
 800b99e:	686c      	ldr	r4, [r5, #4]
 800b9a0:	2c00      	cmp	r4, #0
 800b9a2:	d0ef      	beq.n	800b984 <rmw_destroy_subscription+0x10>
 800b9a4:	6a26      	ldr	r6, [r4, #32]
 800b9a6:	6962      	ldr	r2, [r4, #20]
 800b9a8:	6930      	ldr	r0, [r6, #16]
 800b9aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b9ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b9b2:	6819      	ldr	r1, [r3, #0]
 800b9b4:	f001 f81c 	bl	800c9f0 <uxr_buffer_cancel_data>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	6930      	ldr	r0, [r6, #16]
 800b9bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b9c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b9c4:	f000 fb62 	bl	800c08c <run_xrce_session>
 800b9c8:	69e0      	ldr	r0, [r4, #28]
 800b9ca:	f006 ff19 	bl	8012800 <destroy_topic>
 800b9ce:	6a23      	ldr	r3, [r4, #32]
 800b9d0:	6962      	ldr	r2, [r4, #20]
 800b9d2:	6918      	ldr	r0, [r3, #16]
 800b9d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b9d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b9dc:	6819      	ldr	r1, [r3, #0]
 800b9de:	f000 fd9b 	bl	800c518 <uxr_buffer_delete_entity>
 800b9e2:	6a23      	ldr	r3, [r4, #32]
 800b9e4:	6922      	ldr	r2, [r4, #16]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	6809      	ldr	r1, [r1, #0]
 800b9f0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b9f4:	f000 fd90 	bl	800c518 <uxr_buffer_delete_entity>
 800b9f8:	6937      	ldr	r7, [r6, #16]
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ba00:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ba04:	4604      	mov	r4, r0
 800ba06:	4638      	mov	r0, r7
 800ba08:	f000 fb40 	bl	800c08c <run_xrce_session>
 800ba0c:	6936      	ldr	r6, [r6, #16]
 800ba0e:	4622      	mov	r2, r4
 800ba10:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ba14:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ba18:	4604      	mov	r4, r0
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f000 fb36 	bl	800c08c <run_xrce_session>
 800ba20:	b12c      	cbz	r4, 800ba2e <rmw_destroy_subscription+0xba>
 800ba22:	b120      	cbz	r0, 800ba2e <rmw_destroy_subscription+0xba>
 800ba24:	2400      	movs	r4, #0
 800ba26:	4628      	mov	r0, r5
 800ba28:	f000 f9ec 	bl	800be04 <rmw_uxrce_fini_subscription_memory>
 800ba2c:	e7ab      	b.n	800b986 <rmw_destroy_subscription+0x12>
 800ba2e:	2402      	movs	r4, #2
 800ba30:	e7f9      	b.n	800ba26 <rmw_destroy_subscription+0xb2>
 800ba32:	bf00      	nop

0800ba34 <rmw_take_with_info>:
 800ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba36:	4604      	mov	r4, r0
 800ba38:	6800      	ldr	r0, [r0, #0]
 800ba3a:	b089      	sub	sp, #36	@ 0x24
 800ba3c:	460f      	mov	r7, r1
 800ba3e:	4615      	mov	r5, r2
 800ba40:	b128      	cbz	r0, 800ba4e <rmw_take_with_info+0x1a>
 800ba42:	4b24      	ldr	r3, [pc, #144]	@ (800bad4 <rmw_take_with_info+0xa0>)
 800ba44:	6819      	ldr	r1, [r3, #0]
 800ba46:	f7f4 fbe3 	bl	8000210 <strcmp>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d13e      	bne.n	800bacc <rmw_take_with_info+0x98>
 800ba4e:	b305      	cbz	r5, 800ba92 <rmw_take_with_info+0x5e>
 800ba50:	6864      	ldr	r4, [r4, #4]
 800ba52:	2300      	movs	r3, #0
 800ba54:	702b      	strb	r3, [r5, #0]
 800ba56:	f000 fa9b 	bl	800bf90 <rmw_uxrce_clean_expired_static_input_buffer>
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f000 fa70 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ba60:	4606      	mov	r6, r0
 800ba62:	b1f0      	cbz	r0, 800baa2 <rmw_take_with_info+0x6e>
 800ba64:	6881      	ldr	r1, [r0, #8]
 800ba66:	4668      	mov	r0, sp
 800ba68:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800ba6c:	3110      	adds	r1, #16
 800ba6e:	f000 fc8b 	bl	800c388 <ucdr_init_buffer>
 800ba72:	69a3      	ldr	r3, [r4, #24]
 800ba74:	4639      	mov	r1, r7
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	4668      	mov	r0, sp
 800ba7a:	4798      	blx	r3
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4604      	mov	r4, r0
 800ba80:	4815      	ldr	r0, [pc, #84]	@ (800bad8 <rmw_take_with_info+0xa4>)
 800ba82:	f006 fb87 	bl	8012194 <put_memory>
 800ba86:	702c      	strb	r4, [r5, #0]
 800ba88:	f084 0001 	eor.w	r0, r4, #1
 800ba8c:	b2c0      	uxtb	r0, r0
 800ba8e:	b009      	add	sp, #36	@ 0x24
 800ba90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba92:	6864      	ldr	r4, [r4, #4]
 800ba94:	f000 fa7c 	bl	800bf90 <rmw_uxrce_clean_expired_static_input_buffer>
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fa51 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 800ba9e:	4605      	mov	r5, r0
 800baa0:	b910      	cbnz	r0, 800baa8 <rmw_take_with_info+0x74>
 800baa2:	2001      	movs	r0, #1
 800baa4:	b009      	add	sp, #36	@ 0x24
 800baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baa8:	68a9      	ldr	r1, [r5, #8]
 800baaa:	4668      	mov	r0, sp
 800baac:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 800bab0:	3110      	adds	r1, #16
 800bab2:	f000 fc69 	bl	800c388 <ucdr_init_buffer>
 800bab6:	69a3      	ldr	r3, [r4, #24]
 800bab8:	4639      	mov	r1, r7
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	4668      	mov	r0, sp
 800babe:	4798      	blx	r3
 800bac0:	4629      	mov	r1, r5
 800bac2:	4604      	mov	r4, r0
 800bac4:	4804      	ldr	r0, [pc, #16]	@ (800bad8 <rmw_take_with_info+0xa4>)
 800bac6:	f006 fb65 	bl	8012194 <put_memory>
 800baca:	e7dd      	b.n	800ba88 <rmw_take_with_info+0x54>
 800bacc:	200c      	movs	r0, #12
 800bace:	b009      	add	sp, #36	@ 0x24
 800bad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bad2:	bf00      	nop
 800bad4:	08019bcc 	.word	0x08019bcc
 800bad8:	2001799c 	.word	0x2001799c

0800badc <rmw_uxrce_init_service_memory>:
 800badc:	b1e2      	cbz	r2, 800bb18 <rmw_uxrce_init_service_memory+0x3c>
 800bade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae2:	7b05      	ldrb	r5, [r0, #12]
 800bae4:	4606      	mov	r6, r0
 800bae6:	b9ad      	cbnz	r5, 800bb14 <rmw_uxrce_init_service_memory+0x38>
 800bae8:	23c8      	movs	r3, #200	@ 0xc8
 800baea:	e9c0 5500 	strd	r5, r5, [r0]
 800baee:	6083      	str	r3, [r0, #8]
 800baf0:	f240 1301 	movw	r3, #257	@ 0x101
 800baf4:	4617      	mov	r7, r2
 800baf6:	8183      	strh	r3, [r0, #12]
 800baf8:	460c      	mov	r4, r1
 800bafa:	46a8      	mov	r8, r5
 800bafc:	4621      	mov	r1, r4
 800bafe:	4630      	mov	r0, r6
 800bb00:	3501      	adds	r5, #1
 800bb02:	f006 fb47 	bl	8012194 <put_memory>
 800bb06:	42af      	cmp	r7, r5
 800bb08:	60a4      	str	r4, [r4, #8]
 800bb0a:	f884 800c 	strb.w	r8, [r4, #12]
 800bb0e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bb12:	d1f3      	bne.n	800bafc <rmw_uxrce_init_service_memory+0x20>
 800bb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop

0800bb1c <rmw_uxrce_init_client_memory>:
 800bb1c:	b1e2      	cbz	r2, 800bb58 <rmw_uxrce_init_client_memory+0x3c>
 800bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb22:	7b05      	ldrb	r5, [r0, #12]
 800bb24:	4606      	mov	r6, r0
 800bb26:	b9ad      	cbnz	r5, 800bb54 <rmw_uxrce_init_client_memory+0x38>
 800bb28:	23c8      	movs	r3, #200	@ 0xc8
 800bb2a:	e9c0 5500 	strd	r5, r5, [r0]
 800bb2e:	6083      	str	r3, [r0, #8]
 800bb30:	f240 1301 	movw	r3, #257	@ 0x101
 800bb34:	4617      	mov	r7, r2
 800bb36:	8183      	strh	r3, [r0, #12]
 800bb38:	460c      	mov	r4, r1
 800bb3a:	46a8      	mov	r8, r5
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4630      	mov	r0, r6
 800bb40:	3501      	adds	r5, #1
 800bb42:	f006 fb27 	bl	8012194 <put_memory>
 800bb46:	42af      	cmp	r7, r5
 800bb48:	60a4      	str	r4, [r4, #8]
 800bb4a:	f884 800c 	strb.w	r8, [r4, #12]
 800bb4e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800bb52:	d1f3      	bne.n	800bb3c <rmw_uxrce_init_client_memory+0x20>
 800bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop

0800bb5c <rmw_uxrce_init_publisher_memory>:
 800bb5c:	b1e2      	cbz	r2, 800bb98 <rmw_uxrce_init_publisher_memory+0x3c>
 800bb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb62:	7b05      	ldrb	r5, [r0, #12]
 800bb64:	4606      	mov	r6, r0
 800bb66:	b9ad      	cbnz	r5, 800bb94 <rmw_uxrce_init_publisher_memory+0x38>
 800bb68:	23d8      	movs	r3, #216	@ 0xd8
 800bb6a:	e9c0 5500 	strd	r5, r5, [r0]
 800bb6e:	6083      	str	r3, [r0, #8]
 800bb70:	f240 1301 	movw	r3, #257	@ 0x101
 800bb74:	4617      	mov	r7, r2
 800bb76:	8183      	strh	r3, [r0, #12]
 800bb78:	460c      	mov	r4, r1
 800bb7a:	46a8      	mov	r8, r5
 800bb7c:	4621      	mov	r1, r4
 800bb7e:	4630      	mov	r0, r6
 800bb80:	3501      	adds	r5, #1
 800bb82:	f006 fb07 	bl	8012194 <put_memory>
 800bb86:	42af      	cmp	r7, r5
 800bb88:	60a4      	str	r4, [r4, #8]
 800bb8a:	f884 800c 	strb.w	r8, [r4, #12]
 800bb8e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bb92:	d1f3      	bne.n	800bb7c <rmw_uxrce_init_publisher_memory+0x20>
 800bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop

0800bb9c <rmw_uxrce_init_subscription_memory>:
 800bb9c:	b1e2      	cbz	r2, 800bbd8 <rmw_uxrce_init_subscription_memory+0x3c>
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	7b05      	ldrb	r5, [r0, #12]
 800bba4:	4606      	mov	r6, r0
 800bba6:	b9ad      	cbnz	r5, 800bbd4 <rmw_uxrce_init_subscription_memory+0x38>
 800bba8:	23d8      	movs	r3, #216	@ 0xd8
 800bbaa:	e9c0 5500 	strd	r5, r5, [r0]
 800bbae:	6083      	str	r3, [r0, #8]
 800bbb0:	f240 1301 	movw	r3, #257	@ 0x101
 800bbb4:	4617      	mov	r7, r2
 800bbb6:	8183      	strh	r3, [r0, #12]
 800bbb8:	460c      	mov	r4, r1
 800bbba:	46a8      	mov	r8, r5
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	f006 fae7 	bl	8012194 <put_memory>
 800bbc6:	42af      	cmp	r7, r5
 800bbc8:	60a4      	str	r4, [r4, #8]
 800bbca:	f884 800c 	strb.w	r8, [r4, #12]
 800bbce:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800bbd2:	d1f3      	bne.n	800bbbc <rmw_uxrce_init_subscription_memory+0x20>
 800bbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop

0800bbdc <rmw_uxrce_init_node_memory>:
 800bbdc:	b1e2      	cbz	r2, 800bc18 <rmw_uxrce_init_node_memory+0x3c>
 800bbde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe2:	7b05      	ldrb	r5, [r0, #12]
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	b9ad      	cbnz	r5, 800bc14 <rmw_uxrce_init_node_memory+0x38>
 800bbe8:	23a4      	movs	r3, #164	@ 0xa4
 800bbea:	e9c0 5500 	strd	r5, r5, [r0]
 800bbee:	6083      	str	r3, [r0, #8]
 800bbf0:	f240 1301 	movw	r3, #257	@ 0x101
 800bbf4:	4617      	mov	r7, r2
 800bbf6:	8183      	strh	r3, [r0, #12]
 800bbf8:	460c      	mov	r4, r1
 800bbfa:	46a8      	mov	r8, r5
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	4630      	mov	r0, r6
 800bc00:	3501      	adds	r5, #1
 800bc02:	f006 fac7 	bl	8012194 <put_memory>
 800bc06:	42af      	cmp	r7, r5
 800bc08:	60a4      	str	r4, [r4, #8]
 800bc0a:	f884 800c 	strb.w	r8, [r4, #12]
 800bc0e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800bc12:	d1f3      	bne.n	800bbfc <rmw_uxrce_init_node_memory+0x20>
 800bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop

0800bc1c <rmw_uxrce_init_session_memory>:
 800bc1c:	b1ea      	cbz	r2, 800bc5a <rmw_uxrce_init_session_memory+0x3e>
 800bc1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc22:	7b05      	ldrb	r5, [r0, #12]
 800bc24:	4606      	mov	r6, r0
 800bc26:	b9b5      	cbnz	r5, 800bc56 <rmw_uxrce_init_session_memory+0x3a>
 800bc28:	e9c0 5500 	strd	r5, r5, [r0]
 800bc2c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800bc30:	f240 1301 	movw	r3, #257	@ 0x101
 800bc34:	4617      	mov	r7, r2
 800bc36:	f8c0 8008 	str.w	r8, [r0, #8]
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	8183      	strh	r3, [r0, #12]
 800bc3e:	46a9      	mov	r9, r5
 800bc40:	4621      	mov	r1, r4
 800bc42:	4630      	mov	r0, r6
 800bc44:	3501      	adds	r5, #1
 800bc46:	f006 faa5 	bl	8012194 <put_memory>
 800bc4a:	42af      	cmp	r7, r5
 800bc4c:	60a4      	str	r4, [r4, #8]
 800bc4e:	f884 900c 	strb.w	r9, [r4, #12]
 800bc52:	4444      	add	r4, r8
 800bc54:	d1f4      	bne.n	800bc40 <rmw_uxrce_init_session_memory+0x24>
 800bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	4770      	bx	lr

0800bc5c <rmw_uxrce_init_topic_memory>:
 800bc5c:	b1e2      	cbz	r2, 800bc98 <rmw_uxrce_init_topic_memory+0x3c>
 800bc5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc62:	7b05      	ldrb	r5, [r0, #12]
 800bc64:	4606      	mov	r6, r0
 800bc66:	b9ad      	cbnz	r5, 800bc94 <rmw_uxrce_init_topic_memory+0x38>
 800bc68:	231c      	movs	r3, #28
 800bc6a:	e9c0 5500 	strd	r5, r5, [r0]
 800bc6e:	6083      	str	r3, [r0, #8]
 800bc70:	f240 1301 	movw	r3, #257	@ 0x101
 800bc74:	4617      	mov	r7, r2
 800bc76:	8183      	strh	r3, [r0, #12]
 800bc78:	460c      	mov	r4, r1
 800bc7a:	46a8      	mov	r8, r5
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4630      	mov	r0, r6
 800bc80:	3501      	adds	r5, #1
 800bc82:	f006 fa87 	bl	8012194 <put_memory>
 800bc86:	42af      	cmp	r7, r5
 800bc88:	60a4      	str	r4, [r4, #8]
 800bc8a:	f884 800c 	strb.w	r8, [r4, #12]
 800bc8e:	f104 041c 	add.w	r4, r4, #28
 800bc92:	d1f3      	bne.n	800bc7c <rmw_uxrce_init_topic_memory+0x20>
 800bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop

0800bc9c <rmw_uxrce_init_static_input_buffer_memory>:
 800bc9c:	b1ea      	cbz	r2, 800bcda <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800bc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca2:	7b05      	ldrb	r5, [r0, #12]
 800bca4:	4606      	mov	r6, r0
 800bca6:	b9b5      	cbnz	r5, 800bcd6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800bca8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800bcac:	e9c0 5500 	strd	r5, r5, [r0]
 800bcb0:	6083      	str	r3, [r0, #8]
 800bcb2:	f240 1301 	movw	r3, #257	@ 0x101
 800bcb6:	4617      	mov	r7, r2
 800bcb8:	8183      	strh	r3, [r0, #12]
 800bcba:	460c      	mov	r4, r1
 800bcbc:	46a8      	mov	r8, r5
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	3501      	adds	r5, #1
 800bcc4:	f006 fa66 	bl	8012194 <put_memory>
 800bcc8:	42af      	cmp	r7, r5
 800bcca:	60a4      	str	r4, [r4, #8]
 800bccc:	f884 800c 	strb.w	r8, [r4, #12]
 800bcd0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800bcd4:	d1f3      	bne.n	800bcbe <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800bcd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcda:	4770      	bx	lr

0800bcdc <rmw_uxrce_init_init_options_impl_memory>:
 800bcdc:	b1e2      	cbz	r2, 800bd18 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800bcde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce2:	7b05      	ldrb	r5, [r0, #12]
 800bce4:	4606      	mov	r6, r0
 800bce6:	b9ad      	cbnz	r5, 800bd14 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800bce8:	232c      	movs	r3, #44	@ 0x2c
 800bcea:	e9c0 5500 	strd	r5, r5, [r0]
 800bcee:	6083      	str	r3, [r0, #8]
 800bcf0:	f240 1301 	movw	r3, #257	@ 0x101
 800bcf4:	4617      	mov	r7, r2
 800bcf6:	8183      	strh	r3, [r0, #12]
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	46a8      	mov	r8, r5
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4630      	mov	r0, r6
 800bd00:	3501      	adds	r5, #1
 800bd02:	f006 fa47 	bl	8012194 <put_memory>
 800bd06:	42af      	cmp	r7, r5
 800bd08:	60a4      	str	r4, [r4, #8]
 800bd0a:	f884 800c 	strb.w	r8, [r4, #12]
 800bd0e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800bd12:	d1f3      	bne.n	800bcfc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop

0800bd1c <rmw_uxrce_init_wait_set_memory>:
 800bd1c:	b1e2      	cbz	r2, 800bd58 <rmw_uxrce_init_wait_set_memory+0x3c>
 800bd1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd22:	7b05      	ldrb	r5, [r0, #12]
 800bd24:	4606      	mov	r6, r0
 800bd26:	b9ad      	cbnz	r5, 800bd54 <rmw_uxrce_init_wait_set_memory+0x38>
 800bd28:	231c      	movs	r3, #28
 800bd2a:	e9c0 5500 	strd	r5, r5, [r0]
 800bd2e:	6083      	str	r3, [r0, #8]
 800bd30:	f240 1301 	movw	r3, #257	@ 0x101
 800bd34:	4617      	mov	r7, r2
 800bd36:	8183      	strh	r3, [r0, #12]
 800bd38:	460c      	mov	r4, r1
 800bd3a:	46a8      	mov	r8, r5
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	4630      	mov	r0, r6
 800bd40:	3501      	adds	r5, #1
 800bd42:	f006 fa27 	bl	8012194 <put_memory>
 800bd46:	42af      	cmp	r7, r5
 800bd48:	60a4      	str	r4, [r4, #8]
 800bd4a:	f884 800c 	strb.w	r8, [r4, #12]
 800bd4e:	f104 041c 	add.w	r4, r4, #28
 800bd52:	d1f3      	bne.n	800bd3c <rmw_uxrce_init_wait_set_memory+0x20>
 800bd54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop

0800bd5c <rmw_uxrce_init_guard_condition_memory>:
 800bd5c:	b1e2      	cbz	r2, 800bd98 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800bd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd62:	7b05      	ldrb	r5, [r0, #12]
 800bd64:	4606      	mov	r6, r0
 800bd66:	b9ad      	cbnz	r5, 800bd94 <rmw_uxrce_init_guard_condition_memory+0x38>
 800bd68:	2320      	movs	r3, #32
 800bd6a:	e9c0 5500 	strd	r5, r5, [r0]
 800bd6e:	6083      	str	r3, [r0, #8]
 800bd70:	f240 1301 	movw	r3, #257	@ 0x101
 800bd74:	4617      	mov	r7, r2
 800bd76:	8183      	strh	r3, [r0, #12]
 800bd78:	460c      	mov	r4, r1
 800bd7a:	46a8      	mov	r8, r5
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4630      	mov	r0, r6
 800bd80:	3501      	adds	r5, #1
 800bd82:	f006 fa07 	bl	8012194 <put_memory>
 800bd86:	42af      	cmp	r7, r5
 800bd88:	60a4      	str	r4, [r4, #8]
 800bd8a:	f884 800c 	strb.w	r8, [r4, #12]
 800bd8e:	f104 0420 	add.w	r4, r4, #32
 800bd92:	d1f3      	bne.n	800bd7c <rmw_uxrce_init_guard_condition_memory+0x20>
 800bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop

0800bd9c <rmw_uxrce_fini_session_memory>:
 800bd9c:	4601      	mov	r1, r0
 800bd9e:	4801      	ldr	r0, [pc, #4]	@ (800bda4 <rmw_uxrce_fini_session_memory+0x8>)
 800bda0:	f006 b9f8 	b.w	8012194 <put_memory>
 800bda4:	2001798c 	.word	0x2001798c

0800bda8 <rmw_uxrce_fini_node_memory>:
 800bda8:	b538      	push	{r3, r4, r5, lr}
 800bdaa:	4604      	mov	r4, r0
 800bdac:	6800      	ldr	r0, [r0, #0]
 800bdae:	b128      	cbz	r0, 800bdbc <rmw_uxrce_fini_node_memory+0x14>
 800bdb0:	4b07      	ldr	r3, [pc, #28]	@ (800bdd0 <rmw_uxrce_fini_node_memory+0x28>)
 800bdb2:	6819      	ldr	r1, [r3, #0]
 800bdb4:	f7f4 fa2c 	bl	8000210 <strcmp>
 800bdb8:	b940      	cbnz	r0, 800bdcc <rmw_uxrce_fini_node_memory+0x24>
 800bdba:	6020      	str	r0, [r4, #0]
 800bdbc:	6861      	ldr	r1, [r4, #4]
 800bdbe:	b129      	cbz	r1, 800bdcc <rmw_uxrce_fini_node_memory+0x24>
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	4804      	ldr	r0, [pc, #16]	@ (800bdd4 <rmw_uxrce_fini_node_memory+0x2c>)
 800bdc4:	610d      	str	r5, [r1, #16]
 800bdc6:	f006 f9e5 	bl	8012194 <put_memory>
 800bdca:	6065      	str	r5, [r4, #4]
 800bdcc:	bd38      	pop	{r3, r4, r5, pc}
 800bdce:	bf00      	nop
 800bdd0:	08019bcc 	.word	0x08019bcc
 800bdd4:	2001795c 	.word	0x2001795c

0800bdd8 <rmw_uxrce_fini_publisher_memory>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
 800bddc:	6800      	ldr	r0, [r0, #0]
 800bdde:	b128      	cbz	r0, 800bdec <rmw_uxrce_fini_publisher_memory+0x14>
 800bde0:	4b06      	ldr	r3, [pc, #24]	@ (800bdfc <rmw_uxrce_fini_publisher_memory+0x24>)
 800bde2:	6819      	ldr	r1, [r3, #0]
 800bde4:	f7f4 fa14 	bl	8000210 <strcmp>
 800bde8:	b938      	cbnz	r0, 800bdfa <rmw_uxrce_fini_publisher_memory+0x22>
 800bdea:	6020      	str	r0, [r4, #0]
 800bdec:	6861      	ldr	r1, [r4, #4]
 800bdee:	b121      	cbz	r1, 800bdfa <rmw_uxrce_fini_publisher_memory+0x22>
 800bdf0:	4803      	ldr	r0, [pc, #12]	@ (800be00 <rmw_uxrce_fini_publisher_memory+0x28>)
 800bdf2:	f006 f9cf 	bl	8012194 <put_memory>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6063      	str	r3, [r4, #4]
 800bdfa:	bd10      	pop	{r4, pc}
 800bdfc:	08019bcc 	.word	0x08019bcc
 800be00:	2001796c 	.word	0x2001796c

0800be04 <rmw_uxrce_fini_subscription_memory>:
 800be04:	b510      	push	{r4, lr}
 800be06:	4604      	mov	r4, r0
 800be08:	6800      	ldr	r0, [r0, #0]
 800be0a:	b128      	cbz	r0, 800be18 <rmw_uxrce_fini_subscription_memory+0x14>
 800be0c:	4b06      	ldr	r3, [pc, #24]	@ (800be28 <rmw_uxrce_fini_subscription_memory+0x24>)
 800be0e:	6819      	ldr	r1, [r3, #0]
 800be10:	f7f4 f9fe 	bl	8000210 <strcmp>
 800be14:	b938      	cbnz	r0, 800be26 <rmw_uxrce_fini_subscription_memory+0x22>
 800be16:	6020      	str	r0, [r4, #0]
 800be18:	6861      	ldr	r1, [r4, #4]
 800be1a:	b121      	cbz	r1, 800be26 <rmw_uxrce_fini_subscription_memory+0x22>
 800be1c:	4803      	ldr	r0, [pc, #12]	@ (800be2c <rmw_uxrce_fini_subscription_memory+0x28>)
 800be1e:	f006 f9b9 	bl	8012194 <put_memory>
 800be22:	2300      	movs	r3, #0
 800be24:	6063      	str	r3, [r4, #4]
 800be26:	bd10      	pop	{r4, pc}
 800be28:	08019bcc 	.word	0x08019bcc
 800be2c:	200179ac 	.word	0x200179ac

0800be30 <rmw_uxrce_fini_service_memory>:
 800be30:	b510      	push	{r4, lr}
 800be32:	4604      	mov	r4, r0
 800be34:	6800      	ldr	r0, [r0, #0]
 800be36:	b128      	cbz	r0, 800be44 <rmw_uxrce_fini_service_memory+0x14>
 800be38:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <rmw_uxrce_fini_service_memory+0x24>)
 800be3a:	6819      	ldr	r1, [r3, #0]
 800be3c:	f7f4 f9e8 	bl	8000210 <strcmp>
 800be40:	b938      	cbnz	r0, 800be52 <rmw_uxrce_fini_service_memory+0x22>
 800be42:	6020      	str	r0, [r4, #0]
 800be44:	6861      	ldr	r1, [r4, #4]
 800be46:	b121      	cbz	r1, 800be52 <rmw_uxrce_fini_service_memory+0x22>
 800be48:	4803      	ldr	r0, [pc, #12]	@ (800be58 <rmw_uxrce_fini_service_memory+0x28>)
 800be4a:	f006 f9a3 	bl	8012194 <put_memory>
 800be4e:	2300      	movs	r3, #0
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	bd10      	pop	{r4, pc}
 800be54:	08019bcc 	.word	0x08019bcc
 800be58:	2001797c 	.word	0x2001797c

0800be5c <rmw_uxrce_fini_client_memory>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	4604      	mov	r4, r0
 800be60:	6800      	ldr	r0, [r0, #0]
 800be62:	b128      	cbz	r0, 800be70 <rmw_uxrce_fini_client_memory+0x14>
 800be64:	4b06      	ldr	r3, [pc, #24]	@ (800be80 <rmw_uxrce_fini_client_memory+0x24>)
 800be66:	6819      	ldr	r1, [r3, #0]
 800be68:	f7f4 f9d2 	bl	8000210 <strcmp>
 800be6c:	b938      	cbnz	r0, 800be7e <rmw_uxrce_fini_client_memory+0x22>
 800be6e:	6020      	str	r0, [r4, #0]
 800be70:	6861      	ldr	r1, [r4, #4]
 800be72:	b121      	cbz	r1, 800be7e <rmw_uxrce_fini_client_memory+0x22>
 800be74:	4803      	ldr	r0, [pc, #12]	@ (800be84 <rmw_uxrce_fini_client_memory+0x28>)
 800be76:	f006 f98d 	bl	8012194 <put_memory>
 800be7a:	2300      	movs	r3, #0
 800be7c:	6063      	str	r3, [r4, #4]
 800be7e:	bd10      	pop	{r4, pc}
 800be80:	08019bcc 	.word	0x08019bcc
 800be84:	2001308c 	.word	0x2001308c

0800be88 <rmw_uxrce_fini_topic_memory>:
 800be88:	b510      	push	{r4, lr}
 800be8a:	4604      	mov	r4, r0
 800be8c:	4621      	mov	r1, r4
 800be8e:	4803      	ldr	r0, [pc, #12]	@ (800be9c <rmw_uxrce_fini_topic_memory+0x14>)
 800be90:	f006 f980 	bl	8012194 <put_memory>
 800be94:	2300      	movs	r3, #0
 800be96:	61a3      	str	r3, [r4, #24]
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop
 800be9c:	200179bc 	.word	0x200179bc

0800bea0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bea0:	b082      	sub	sp, #8
 800bea2:	b530      	push	{r4, r5, lr}
 800bea4:	4925      	ldr	r1, [pc, #148]	@ (800bf3c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bea6:	680d      	ldr	r5, [r1, #0]
 800bea8:	ac03      	add	r4, sp, #12
 800beaa:	e884 000c 	stmia.w	r4, {r2, r3}
 800beae:	461c      	mov	r4, r3
 800beb0:	2d00      	cmp	r5, #0
 800beb2:	d041      	beq.n	800bf38 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800beb4:	462b      	mov	r3, r5
 800beb6:	2100      	movs	r1, #0
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bec0:	4290      	cmp	r0, r2
 800bec2:	bf08      	it	eq
 800bec4:	3101      	addeq	r1, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f6      	bne.n	800beb8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800beca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d029      	beq.n	800bf26 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800bed2:	d907      	bls.n	800bee4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d005      	beq.n	800bee4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800bed8:	2100      	movs	r1, #0
 800beda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bede:	4608      	mov	r0, r1
 800bee0:	b002      	add	sp, #8
 800bee2:	4770      	bx	lr
 800bee4:	b314      	cbz	r4, 800bf2c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bee6:	428c      	cmp	r4, r1
 800bee8:	d820      	bhi.n	800bf2c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800beea:	2d00      	cmp	r5, #0
 800beec:	d0f4      	beq.n	800bed8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800beee:	2100      	movs	r1, #0
 800bef0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800bef4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bef8:	e002      	b.n	800bf00 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800befa:	686d      	ldr	r5, [r5, #4]
 800befc:	2d00      	cmp	r5, #0
 800befe:	d0ec      	beq.n	800beda <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bf00:	68ab      	ldr	r3, [r5, #8]
 800bf02:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bf06:	4290      	cmp	r0, r2
 800bf08:	d1f7      	bne.n	800befa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bf0a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bf0e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bf12:	4562      	cmp	r2, ip
 800bf14:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bf18:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bf1c:	daed      	bge.n	800befa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bf1e:	4694      	mov	ip, r2
 800bf20:	461c      	mov	r4, r3
 800bf22:	4629      	mov	r1, r5
 800bf24:	e7e9      	b.n	800befa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bf26:	b10c      	cbz	r4, 800bf2c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bf28:	428c      	cmp	r4, r1
 800bf2a:	d9d5      	bls.n	800bed8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bf2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf30:	4802      	ldr	r0, [pc, #8]	@ (800bf3c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bf32:	b002      	add	sp, #8
 800bf34:	f006 b91e 	b.w	8012174 <get_memory>
 800bf38:	4629      	mov	r1, r5
 800bf3a:	e7c6      	b.n	800beca <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bf3c:	2001799c 	.word	0x2001799c

0800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800bf40:	4b11      	ldr	r3, [pc, #68]	@ (800bf88 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	b530      	push	{r4, r5, lr}
 800bf46:	b1e3      	cbz	r3, 800bf82 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800bf48:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800bf4c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800bf50:	2400      	movs	r4, #0
 800bf52:	e001      	b.n	800bf58 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	b193      	cbz	r3, 800bf7e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800bf58:	689a      	ldr	r2, [r3, #8]
 800bf5a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800bf5e:	4288      	cmp	r0, r1
 800bf60:	d1f8      	bne.n	800bf54 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bf62:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800bf66:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800bf6a:	4571      	cmp	r1, lr
 800bf6c:	eb72 050c 	sbcs.w	r5, r2, ip
 800bf70:	daf0      	bge.n	800bf54 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800bf72:	461c      	mov	r4, r3
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	468e      	mov	lr, r1
 800bf78:	4694      	mov	ip, r2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1ec      	bne.n	800bf58 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800bf7e:	4620      	mov	r0, r4
 800bf80:	bd30      	pop	{r4, r5, pc}
 800bf82:	461c      	mov	r4, r3
 800bf84:	4620      	mov	r0, r4
 800bf86:	bd30      	pop	{r4, r5, pc}
 800bf88:	2001799c 	.word	0x2001799c
 800bf8c:	00000000 	.word	0x00000000

0800bf90 <rmw_uxrce_clean_expired_static_input_buffer>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4b3c      	ldr	r3, [pc, #240]	@ (800c088 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800bf96:	ed2d 8b06 	vpush	{d8-d10}
 800bf9a:	681f      	ldr	r7, [r3, #0]
 800bf9c:	b08d      	sub	sp, #52	@ 0x34
 800bf9e:	f006 ff51 	bl	8012e44 <rmw_uros_epoch_nanos>
 800bfa2:	2f00      	cmp	r7, #0
 800bfa4:	d05d      	beq.n	800c062 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800bfa6:	46b8      	mov	r8, r7
 800bfa8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c070 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800bfac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800bfb0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c078 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800bfba:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c080 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800bfbe:	4681      	mov	r9, r0
 800bfc0:	468a      	mov	sl, r1
 800bfc2:	ac04      	add	r4, sp, #16
 800bfc4:	d03f      	beq.n	800c046 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bfc6:	2b05      	cmp	r3, #5
 800bfc8:	d044      	beq.n	800c054 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d03b      	beq.n	800c046 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800bfce:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bfd2:	ed8d ab06 	vstr	d10, [sp, #24]
 800bfd6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800bfda:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800bfde:	ab08      	add	r3, sp, #32
 800bfe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfe2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800bfe6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bfea:	f005 ffc9 	bl	8011f80 <rmw_time_equal>
 800bfee:	b118      	cbz	r0, 800bff8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800bff0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800bff4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bff8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bffc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c000:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c004:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c008:	f006 f80e 	bl	8012028 <rmw_time_total_nsec>
 800c00c:	1830      	adds	r0, r6, r0
 800c00e:	eb47 0101 	adc.w	r1, r7, r1
 800c012:	4548      	cmp	r0, r9
 800c014:	eb71 030a 	sbcs.w	r3, r1, sl
 800c018:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c01c:	db05      	blt.n	800c02a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c01e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c022:	4591      	cmp	r9, r2
 800c024:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c028:	da03      	bge.n	800c032 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c02a:	4817      	ldr	r0, [pc, #92]	@ (800c088 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c02c:	4641      	mov	r1, r8
 800c02e:	f006 f8b1 	bl	8012194 <put_memory>
 800c032:	f1bb 0f00 	cmp.w	fp, #0
 800c036:	d014      	beq.n	800c062 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c038:	46d8      	mov	r8, fp
 800c03a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c03e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c042:	2b04      	cmp	r3, #4
 800c044:	d1bf      	bne.n	800bfc6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c046:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c04a:	3340      	adds	r3, #64	@ 0x40
 800c04c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c04e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c052:	e7c0      	b.n	800bfd6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c054:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c058:	3348      	adds	r3, #72	@ 0x48
 800c05a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c05c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c060:	e7b9      	b.n	800bfd6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c062:	b00d      	add	sp, #52	@ 0x34
 800c064:	ecbd 8b06 	vpop	{d8-d10}
 800c068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06c:	f3af 8000 	nop.w
	...
 800c078:	00000001 	.word	0x00000001
 800c07c:	00000000 	.word	0x00000000
 800c080:	0000001e 	.word	0x0000001e
 800c084:	00000000 	.word	0x00000000
 800c088:	2001799c 	.word	0x2001799c

0800c08c <run_xrce_session>:
 800c08c:	b510      	push	{r4, lr}
 800c08e:	788c      	ldrb	r4, [r1, #2]
 800c090:	b086      	sub	sp, #24
 800c092:	2c01      	cmp	r4, #1
 800c094:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c098:	d00c      	beq.n	800c0b4 <run_xrce_session+0x28>
 800c09a:	4619      	mov	r1, r3
 800c09c:	2301      	movs	r3, #1
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	f10d 020e 	add.w	r2, sp, #14
 800c0a4:	f10d 0317 	add.w	r3, sp, #23
 800c0a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c0ac:	f001 fa9a 	bl	800d5e4 <uxr_run_session_until_all_status>
 800c0b0:	b006      	add	sp, #24
 800c0b2:	bd10      	pop	{r4, pc}
 800c0b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c0b8:	f000 feae 	bl	800ce18 <uxr_flash_output_streams>
 800c0bc:	4620      	mov	r0, r4
 800c0be:	b006      	add	sp, #24
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	bf00      	nop

0800c0c4 <convert_qos_profile>:
 800c0c4:	7a4a      	ldrb	r2, [r1, #9]
 800c0c6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c0ca:	2a02      	cmp	r2, #2
 800c0cc:	bf18      	it	ne
 800c0ce:	2200      	movne	r2, #0
 800c0d0:	7002      	strb	r2, [r0, #0]
 800c0d2:	780a      	ldrb	r2, [r1, #0]
 800c0d4:	8889      	ldrh	r1, [r1, #4]
 800c0d6:	8081      	strh	r1, [r0, #4]
 800c0d8:	f1ac 0c02 	sub.w	ip, ip, #2
 800c0dc:	f1a2 0202 	sub.w	r2, r2, #2
 800c0e0:	fabc fc8c 	clz	ip, ip
 800c0e4:	fab2 f282 	clz	r2, r2
 800c0e8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c0ec:	0952      	lsrs	r2, r2, #5
 800c0ee:	f880 c001 	strb.w	ip, [r0, #1]
 800c0f2:	7082      	strb	r2, [r0, #2]
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop

0800c0f8 <generate_type_name>:
 800c0f8:	b530      	push	{r4, r5, lr}
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	700b      	strb	r3, [r1, #0]
 800c0fe:	6803      	ldr	r3, [r0, #0]
 800c100:	b087      	sub	sp, #28
 800c102:	4614      	mov	r4, r2
 800c104:	b1d3      	cbz	r3, 800c13c <generate_type_name+0x44>
 800c106:	4a0f      	ldr	r2, [pc, #60]	@ (800c144 <generate_type_name+0x4c>)
 800c108:	4615      	mov	r5, r2
 800c10a:	9203      	str	r2, [sp, #12]
 800c10c:	9500      	str	r5, [sp, #0]
 800c10e:	6842      	ldr	r2, [r0, #4]
 800c110:	480d      	ldr	r0, [pc, #52]	@ (800c148 <generate_type_name+0x50>)
 800c112:	9001      	str	r0, [sp, #4]
 800c114:	4608      	mov	r0, r1
 800c116:	490d      	ldr	r1, [pc, #52]	@ (800c14c <generate_type_name+0x54>)
 800c118:	9204      	str	r2, [sp, #16]
 800c11a:	9105      	str	r1, [sp, #20]
 800c11c:	9102      	str	r1, [sp, #8]
 800c11e:	4a0c      	ldr	r2, [pc, #48]	@ (800c150 <generate_type_name+0x58>)
 800c120:	4621      	mov	r1, r4
 800c122:	f00a fe47 	bl	8016db4 <sniprintf>
 800c126:	2800      	cmp	r0, #0
 800c128:	db05      	blt.n	800c136 <generate_type_name+0x3e>
 800c12a:	4284      	cmp	r4, r0
 800c12c:	bfd4      	ite	le
 800c12e:	2000      	movle	r0, #0
 800c130:	2001      	movgt	r0, #1
 800c132:	b007      	add	sp, #28
 800c134:	bd30      	pop	{r4, r5, pc}
 800c136:	2000      	movs	r0, #0
 800c138:	b007      	add	sp, #28
 800c13a:	bd30      	pop	{r4, r5, pc}
 800c13c:	4b05      	ldr	r3, [pc, #20]	@ (800c154 <generate_type_name+0x5c>)
 800c13e:	4a01      	ldr	r2, [pc, #4]	@ (800c144 <generate_type_name+0x4c>)
 800c140:	461d      	mov	r5, r3
 800c142:	e7e2      	b.n	800c10a <generate_type_name+0x12>
 800c144:	0801985c 	.word	0x0801985c
 800c148:	08019874 	.word	0x08019874
 800c14c:	08019870 	.word	0x08019870
 800c150:	08019860 	.word	0x08019860
 800c154:	08019e68 	.word	0x08019e68

0800c158 <generate_topic_name>:
 800c158:	b510      	push	{r4, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	4614      	mov	r4, r2
 800c15e:	9000      	str	r0, [sp, #0]
 800c160:	4b08      	ldr	r3, [pc, #32]	@ (800c184 <generate_topic_name+0x2c>)
 800c162:	4a09      	ldr	r2, [pc, #36]	@ (800c188 <generate_topic_name+0x30>)
 800c164:	4608      	mov	r0, r1
 800c166:	4621      	mov	r1, r4
 800c168:	f00a fe24 	bl	8016db4 <sniprintf>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	db05      	blt.n	800c17c <generate_topic_name+0x24>
 800c170:	4284      	cmp	r4, r0
 800c172:	bfd4      	ite	le
 800c174:	2000      	movle	r0, #0
 800c176:	2001      	movgt	r0, #1
 800c178:	b002      	add	sp, #8
 800c17a:	bd10      	pop	{r4, pc}
 800c17c:	2000      	movs	r0, #0
 800c17e:	b002      	add	sp, #8
 800c180:	bd10      	pop	{r4, pc}
 800c182:	bf00      	nop
 800c184:	08019878 	.word	0x08019878
 800c188:	080192e4 	.word	0x080192e4

0800c18c <is_uxrce_rmw_identifier_valid>:
 800c18c:	b510      	push	{r4, lr}
 800c18e:	4604      	mov	r4, r0
 800c190:	b140      	cbz	r0, 800c1a4 <is_uxrce_rmw_identifier_valid+0x18>
 800c192:	f006 f857 	bl	8012244 <rmw_get_implementation_identifier>
 800c196:	4601      	mov	r1, r0
 800c198:	4620      	mov	r0, r4
 800c19a:	f7f4 f839 	bl	8000210 <strcmp>
 800c19e:	fab0 f080 	clz	r0, r0
 800c1a2:	0940      	lsrs	r0, r0, #5
 800c1a4:	bd10      	pop	{r4, pc}
 800c1a6:	bf00      	nop

0800c1a8 <get_message_typesupport_handle>:
 800c1a8:	6883      	ldr	r3, [r0, #8]
 800c1aa:	4718      	bx	r3

0800c1ac <get_message_typesupport_handle_function>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	6800      	ldr	r0, [r0, #0]
 800c1b2:	f7f4 f82d 	bl	8000210 <strcmp>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	bf0c      	ite	eq
 800c1ba:	4620      	moveq	r0, r4
 800c1bc:	2000      	movne	r0, #0
 800c1be:	bd10      	pop	{r4, pc}

0800c1c0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c1c0:	4b04      	ldr	r3, [pc, #16]	@ (800c1d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	b10a      	cbz	r2, 800c1ca <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800c1c6:	4803      	ldr	r0, [pc, #12]	@ (800c1d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c1c8:	4770      	bx	lr
 800c1ca:	4a03      	ldr	r2, [pc, #12]	@ (800c1d8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800c1cc:	4801      	ldr	r0, [pc, #4]	@ (800c1d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c1ce:	6812      	ldr	r2, [r2, #0]
 800c1d0:	601a      	str	r2, [r3, #0]
 800c1d2:	4770      	bx	lr
 800c1d4:	20000038 	.word	0x20000038
 800c1d8:	200000b4 	.word	0x200000b4

0800c1dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c1dc:	4a02      	ldr	r2, [pc, #8]	@ (800c1e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800c1de:	4b03      	ldr	r3, [pc, #12]	@ (800c1ec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800c1e0:	6812      	ldr	r2, [r2, #0]
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	200000b4 	.word	0x200000b4
 800c1ec:	20000038 	.word	0x20000038

0800c1f0 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800c1f0:	f006 be64 	b.w	8012ebc <std_msgs__msg__String__init>

0800c1f4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800c1f4:	f006 be74 	b.w	8012ee0 <std_msgs__msg__String__fini>

0800c1f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c1f8:	4b04      	ldr	r3, [pc, #16]	@ (800c20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	b10a      	cbz	r2, 800c202 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800c1fe:	4803      	ldr	r0, [pc, #12]	@ (800c20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c200:	4770      	bx	lr
 800c202:	4a03      	ldr	r2, [pc, #12]	@ (800c210 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800c204:	4801      	ldr	r0, [pc, #4]	@ (800c20c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	4770      	bx	lr
 800c20c:	20000080 	.word	0x20000080
 800c210:	200000b8 	.word	0x200000b8

0800c214 <_String__max_serialized_size>:
 800c214:	2000      	movs	r0, #0
 800c216:	4770      	bx	lr

0800c218 <_String__cdr_serialize>:
 800c218:	b1c0      	cbz	r0, 800c24c <_String__cdr_serialize+0x34>
 800c21a:	b570      	push	{r4, r5, r6, lr}
 800c21c:	6806      	ldr	r6, [r0, #0]
 800c21e:	460d      	mov	r5, r1
 800c220:	4604      	mov	r4, r0
 800c222:	b156      	cbz	r6, 800c23a <_String__cdr_serialize+0x22>
 800c224:	4630      	mov	r0, r6
 800c226:	f7f4 f853 	bl	80002d0 <strlen>
 800c22a:	4631      	mov	r1, r6
 800c22c:	6060      	str	r0, [r4, #4]
 800c22e:	1c42      	adds	r2, r0, #1
 800c230:	4628      	mov	r0, r5
 800c232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c236:	f000 b917 	b.w	800c468 <ucdr_serialize_sequence_char>
 800c23a:	4630      	mov	r0, r6
 800c23c:	6060      	str	r0, [r4, #4]
 800c23e:	4632      	mov	r2, r6
 800c240:	4631      	mov	r1, r6
 800c242:	4628      	mov	r0, r5
 800c244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c248:	f000 b90e 	b.w	800c468 <ucdr_serialize_sequence_char>
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop

0800c250 <get_serialized_size_std_msgs__msg__String>:
 800c250:	b510      	push	{r4, lr}
 800c252:	4604      	mov	r4, r0
 800c254:	b138      	cbz	r0, 800c266 <get_serialized_size_std_msgs__msg__String+0x16>
 800c256:	460b      	mov	r3, r1
 800c258:	4618      	mov	r0, r3
 800c25a:	2104      	movs	r1, #4
 800c25c:	f000 f898 	bl	800c390 <ucdr_alignment>
 800c260:	6863      	ldr	r3, [r4, #4]
 800c262:	3305      	adds	r3, #5
 800c264:	4418      	add	r0, r3
 800c266:	bd10      	pop	{r4, pc}

0800c268 <_String__cdr_deserialize>:
 800c268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c26a:	460c      	mov	r4, r1
 800c26c:	b083      	sub	sp, #12
 800c26e:	b1a1      	cbz	r1, 800c29a <_String__cdr_deserialize+0x32>
 800c270:	688f      	ldr	r7, [r1, #8]
 800c272:	6809      	ldr	r1, [r1, #0]
 800c274:	ab01      	add	r3, sp, #4
 800c276:	463a      	mov	r2, r7
 800c278:	4606      	mov	r6, r0
 800c27a:	f000 f907 	bl	800c48c <ucdr_deserialize_sequence_char>
 800c27e:	9b01      	ldr	r3, [sp, #4]
 800c280:	4605      	mov	r5, r0
 800c282:	b920      	cbnz	r0, 800c28e <_String__cdr_deserialize+0x26>
 800c284:	429f      	cmp	r7, r3
 800c286:	d30c      	bcc.n	800c2a2 <_String__cdr_deserialize+0x3a>
 800c288:	4628      	mov	r0, r5
 800c28a:	b003      	add	sp, #12
 800c28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28e:	b103      	cbz	r3, 800c292 <_String__cdr_deserialize+0x2a>
 800c290:	3b01      	subs	r3, #1
 800c292:	4628      	mov	r0, r5
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	b003      	add	sp, #12
 800c298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29a:	460d      	mov	r5, r1
 800c29c:	4628      	mov	r0, r5
 800c29e:	b003      	add	sp, #12
 800c2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	75b0      	strb	r0, [r6, #22]
 800c2a6:	7571      	strb	r1, [r6, #21]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	6065      	str	r5, [r4, #4]
 800c2ac:	f000 f886 	bl	800c3bc <ucdr_align_to>
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	9901      	ldr	r1, [sp, #4]
 800c2b4:	f000 f8b8 	bl	800c428 <ucdr_advance_buffer>
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	b003      	add	sp, #12
 800c2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2be:	bf00      	nop

0800c2c0 <_String__get_serialized_size>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	b130      	cbz	r0, 800c2d4 <_String__get_serialized_size+0x14>
 800c2c6:	2104      	movs	r1, #4
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	f000 f861 	bl	800c390 <ucdr_alignment>
 800c2ce:	6863      	ldr	r3, [r4, #4]
 800c2d0:	3305      	adds	r3, #5
 800c2d2:	4418      	add	r0, r3
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	bf00      	nop

0800c2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800c2d8:	4800      	ldr	r0, [pc, #0]	@ (800c2dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800c2da:	4770      	bx	lr
 800c2dc:	2000008c 	.word	0x2000008c

0800c2e0 <ucdr_check_buffer_available_for>:
 800c2e0:	7d83      	ldrb	r3, [r0, #22]
 800c2e2:	b93b      	cbnz	r3, 800c2f4 <ucdr_check_buffer_available_for+0x14>
 800c2e4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c2e8:	4419      	add	r1, r3
 800c2ea:	4288      	cmp	r0, r1
 800c2ec:	bf34      	ite	cc
 800c2ee:	2000      	movcc	r0, #0
 800c2f0:	2001      	movcs	r0, #1
 800c2f2:	4770      	bx	lr
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	4770      	bx	lr

0800c2f8 <ucdr_check_final_buffer_behavior>:
 800c2f8:	7d83      	ldrb	r3, [r0, #22]
 800c2fa:	b943      	cbnz	r3, 800c30e <ucdr_check_final_buffer_behavior+0x16>
 800c2fc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c300:	4291      	cmp	r1, r2
 800c302:	b510      	push	{r4, lr}
 800c304:	4604      	mov	r4, r0
 800c306:	d205      	bcs.n	800c314 <ucdr_check_final_buffer_behavior+0x1c>
 800c308:	2301      	movs	r3, #1
 800c30a:	4618      	mov	r0, r3
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	2300      	movs	r3, #0
 800c310:	4618      	mov	r0, r3
 800c312:	4770      	bx	lr
 800c314:	6982      	ldr	r2, [r0, #24]
 800c316:	b13a      	cbz	r2, 800c328 <ucdr_check_final_buffer_behavior+0x30>
 800c318:	69c1      	ldr	r1, [r0, #28]
 800c31a:	4790      	blx	r2
 800c31c:	f080 0301 	eor.w	r3, r0, #1
 800c320:	b2db      	uxtb	r3, r3
 800c322:	75a0      	strb	r0, [r4, #22]
 800c324:	4618      	mov	r0, r3
 800c326:	bd10      	pop	{r4, pc}
 800c328:	2001      	movs	r0, #1
 800c32a:	75a0      	strb	r0, [r4, #22]
 800c32c:	e7fa      	b.n	800c324 <ucdr_check_final_buffer_behavior+0x2c>
 800c32e:	bf00      	nop

0800c330 <ucdr_set_on_full_buffer_callback>:
 800c330:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop

0800c338 <ucdr_init_buffer_origin_offset_endian>:
 800c338:	b410      	push	{r4}
 800c33a:	9c01      	ldr	r4, [sp, #4]
 800c33c:	6001      	str	r1, [r0, #0]
 800c33e:	440a      	add	r2, r1
 800c340:	6042      	str	r2, [r0, #4]
 800c342:	190a      	adds	r2, r1, r4
 800c344:	441c      	add	r4, r3
 800c346:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c34a:	6082      	str	r2, [r0, #8]
 800c34c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c350:	7503      	strb	r3, [r0, #20]
 800c352:	2200      	movs	r2, #0
 800c354:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c35c:	7542      	strb	r2, [r0, #21]
 800c35e:	7582      	strb	r2, [r0, #22]
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop

0800c364 <ucdr_init_buffer_origin_offset>:
 800c364:	b510      	push	{r4, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	9c04      	ldr	r4, [sp, #16]
 800c36a:	9400      	str	r4, [sp, #0]
 800c36c:	2401      	movs	r4, #1
 800c36e:	9401      	str	r4, [sp, #4]
 800c370:	f7ff ffe2 	bl	800c338 <ucdr_init_buffer_origin_offset_endian>
 800c374:	b002      	add	sp, #8
 800c376:	bd10      	pop	{r4, pc}

0800c378 <ucdr_init_buffer_origin>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	2400      	movs	r4, #0
 800c37e:	9400      	str	r4, [sp, #0]
 800c380:	f7ff fff0 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800c384:	b002      	add	sp, #8
 800c386:	bd10      	pop	{r4, pc}

0800c388 <ucdr_init_buffer>:
 800c388:	2300      	movs	r3, #0
 800c38a:	f7ff bff5 	b.w	800c378 <ucdr_init_buffer_origin>
 800c38e:	bf00      	nop

0800c390 <ucdr_alignment>:
 800c390:	fbb0 f3f1 	udiv	r3, r0, r1
 800c394:	fb03 0011 	mls	r0, r3, r1, r0
 800c398:	1a08      	subs	r0, r1, r0
 800c39a:	3901      	subs	r1, #1
 800c39c:	4008      	ands	r0, r1
 800c39e:	4770      	bx	lr

0800c3a0 <ucdr_buffer_alignment>:
 800c3a0:	7d43      	ldrb	r3, [r0, #21]
 800c3a2:	428b      	cmp	r3, r1
 800c3a4:	d208      	bcs.n	800c3b8 <ucdr_buffer_alignment+0x18>
 800c3a6:	6900      	ldr	r0, [r0, #16]
 800c3a8:	fbb0 f3f1 	udiv	r3, r0, r1
 800c3ac:	fb01 0013 	mls	r0, r1, r3, r0
 800c3b0:	1a08      	subs	r0, r1, r0
 800c3b2:	3901      	subs	r1, #1
 800c3b4:	4008      	ands	r0, r1
 800c3b6:	4770      	bx	lr
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	4770      	bx	lr

0800c3bc <ucdr_align_to>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	f7ff ffed 	bl	800c3a0 <ucdr_buffer_alignment>
 800c3c6:	68a3      	ldr	r3, [r4, #8]
 800c3c8:	6921      	ldr	r1, [r4, #16]
 800c3ca:	7565      	strb	r5, [r4, #21]
 800c3cc:	181a      	adds	r2, r3, r0
 800c3ce:	6863      	ldr	r3, [r4, #4]
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	4408      	add	r0, r1
 800c3d4:	bf28      	it	cs
 800c3d6:	4613      	movcs	r3, r2
 800c3d8:	6120      	str	r0, [r4, #16]
 800c3da:	60a3      	str	r3, [r4, #8]
 800c3dc:	bd38      	pop	{r3, r4, r5, pc}
 800c3de:	bf00      	nop

0800c3e0 <ucdr_buffer_length>:
 800c3e0:	6882      	ldr	r2, [r0, #8]
 800c3e2:	6800      	ldr	r0, [r0, #0]
 800c3e4:	1a10      	subs	r0, r2, r0
 800c3e6:	4770      	bx	lr

0800c3e8 <ucdr_buffer_remaining>:
 800c3e8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c3ec:	1a10      	subs	r0, r2, r0
 800c3ee:	4770      	bx	lr

0800c3f0 <ucdr_check_final_buffer_behavior_array>:
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	7d83      	ldrb	r3, [r0, #22]
 800c3f4:	b963      	cbnz	r3, 800c410 <ucdr_check_final_buffer_behavior_array+0x20>
 800c3f6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	d308      	bcc.n	800c414 <ucdr_check_final_buffer_behavior_array+0x24>
 800c402:	b139      	cbz	r1, 800c414 <ucdr_check_final_buffer_behavior_array+0x24>
 800c404:	6983      	ldr	r3, [r0, #24]
 800c406:	b163      	cbz	r3, 800c422 <ucdr_check_final_buffer_behavior_array+0x32>
 800c408:	69c1      	ldr	r1, [r0, #28]
 800c40a:	4798      	blx	r3
 800c40c:	75a0      	strb	r0, [r4, #22]
 800c40e:	b108      	cbz	r0, 800c414 <ucdr_check_final_buffer_behavior_array+0x24>
 800c410:	2000      	movs	r0, #0
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	4620      	mov	r0, r4
 800c416:	f7ff ffe7 	bl	800c3e8 <ucdr_buffer_remaining>
 800c41a:	42a8      	cmp	r0, r5
 800c41c:	bf28      	it	cs
 800c41e:	4628      	movcs	r0, r5
 800c420:	bd38      	pop	{r3, r4, r5, pc}
 800c422:	2301      	movs	r3, #1
 800c424:	7583      	strb	r3, [r0, #22]
 800c426:	e7f3      	b.n	800c410 <ucdr_check_final_buffer_behavior_array+0x20>

0800c428 <ucdr_advance_buffer>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	460d      	mov	r5, r1
 800c42e:	f7ff ff57 	bl	800c2e0 <ucdr_check_buffer_available_for>
 800c432:	b178      	cbz	r0, 800c454 <ucdr_advance_buffer+0x2c>
 800c434:	6923      	ldr	r3, [r4, #16]
 800c436:	68a2      	ldr	r2, [r4, #8]
 800c438:	442b      	add	r3, r5
 800c43a:	6123      	str	r3, [r4, #16]
 800c43c:	2301      	movs	r3, #1
 800c43e:	442a      	add	r2, r5
 800c440:	7563      	strb	r3, [r4, #21]
 800c442:	60a2      	str	r2, [r4, #8]
 800c444:	bd38      	pop	{r3, r4, r5, pc}
 800c446:	68a2      	ldr	r2, [r4, #8]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	4402      	add	r2, r0
 800c44c:	4403      	add	r3, r0
 800c44e:	1a2d      	subs	r5, r5, r0
 800c450:	60a2      	str	r2, [r4, #8]
 800c452:	6123      	str	r3, [r4, #16]
 800c454:	4629      	mov	r1, r5
 800c456:	2201      	movs	r2, #1
 800c458:	4620      	mov	r0, r4
 800c45a:	f7ff ffc9 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 800c45e:	2800      	cmp	r0, #0
 800c460:	d1f1      	bne.n	800c446 <ucdr_advance_buffer+0x1e>
 800c462:	2301      	movs	r3, #1
 800c464:	7563      	strb	r3, [r4, #21]
 800c466:	bd38      	pop	{r3, r4, r5, pc}

0800c468 <ucdr_serialize_sequence_char>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	4615      	mov	r5, r2
 800c46c:	460e      	mov	r6, r1
 800c46e:	7d01      	ldrb	r1, [r0, #20]
 800c470:	4604      	mov	r4, r0
 800c472:	f007 f941 	bl	80136f8 <ucdr_serialize_endian_uint32_t>
 800c476:	b90d      	cbnz	r5, 800c47c <ucdr_serialize_sequence_char+0x14>
 800c478:	2001      	movs	r0, #1
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	7d21      	ldrb	r1, [r4, #20]
 800c47e:	462b      	mov	r3, r5
 800c480:	4632      	mov	r2, r6
 800c482:	4620      	mov	r0, r4
 800c484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c488:	f006 bd2e 	b.w	8012ee8 <ucdr_serialize_endian_array_char>

0800c48c <ucdr_deserialize_sequence_char>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	461d      	mov	r5, r3
 800c492:	4616      	mov	r6, r2
 800c494:	460f      	mov	r7, r1
 800c496:	461a      	mov	r2, r3
 800c498:	7d01      	ldrb	r1, [r0, #20]
 800c49a:	4604      	mov	r4, r0
 800c49c:	f007 fa54 	bl	8013948 <ucdr_deserialize_endian_uint32_t>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	429e      	cmp	r6, r3
 800c4a4:	bf3c      	itt	cc
 800c4a6:	2201      	movcc	r2, #1
 800c4a8:	75a2      	strbcc	r2, [r4, #22]
 800c4aa:	b913      	cbnz	r3, 800c4b2 <ucdr_deserialize_sequence_char+0x26>
 800c4ac:	2001      	movs	r0, #1
 800c4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b2:	7d21      	ldrb	r1, [r4, #20]
 800c4b4:	463a      	mov	r2, r7
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4bc:	f006 bd46 	b.w	8012f4c <ucdr_deserialize_endian_array_char>

0800c4c0 <ucdr_serialize_sequence_uint8_t>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	4615      	mov	r5, r2
 800c4c4:	460e      	mov	r6, r1
 800c4c6:	7d01      	ldrb	r1, [r0, #20]
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	f007 f915 	bl	80136f8 <ucdr_serialize_endian_uint32_t>
 800c4ce:	b90d      	cbnz	r5, 800c4d4 <ucdr_serialize_sequence_uint8_t+0x14>
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}
 800c4d4:	7d21      	ldrb	r1, [r4, #20]
 800c4d6:	462b      	mov	r3, r5
 800c4d8:	4632      	mov	r2, r6
 800c4da:	4620      	mov	r0, r4
 800c4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4e0:	f006 bd98 	b.w	8013014 <ucdr_serialize_endian_array_uint8_t>

0800c4e4 <ucdr_deserialize_sequence_uint8_t>:
 800c4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e8:	461d      	mov	r5, r3
 800c4ea:	4616      	mov	r6, r2
 800c4ec:	460f      	mov	r7, r1
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	7d01      	ldrb	r1, [r0, #20]
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	f007 fa28 	bl	8013948 <ucdr_deserialize_endian_uint32_t>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	429e      	cmp	r6, r3
 800c4fc:	bf3c      	itt	cc
 800c4fe:	2201      	movcc	r2, #1
 800c500:	75a2      	strbcc	r2, [r4, #22]
 800c502:	b913      	cbnz	r3, 800c50a <ucdr_deserialize_sequence_uint8_t+0x26>
 800c504:	2001      	movs	r0, #1
 800c506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c50a:	7d21      	ldrb	r1, [r4, #20]
 800c50c:	463a      	mov	r2, r7
 800c50e:	4620      	mov	r0, r4
 800c510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c514:	f006 bde2 	b.w	80130dc <ucdr_deserialize_endian_array_uint8_t>

0800c518 <uxr_buffer_delete_entity>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	2300      	movs	r3, #0
 800c51c:	b08e      	sub	sp, #56	@ 0x38
 800c51e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c522:	2303      	movs	r3, #3
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	2204      	movs	r2, #4
 800c528:	ab06      	add	r3, sp, #24
 800c52a:	4604      	mov	r4, r0
 800c52c:	9103      	str	r1, [sp, #12]
 800c52e:	f001 fa81 	bl	800da34 <uxr_prepare_stream_to_write_submessage>
 800c532:	b918      	cbnz	r0, 800c53c <uxr_buffer_delete_entity+0x24>
 800c534:	4604      	mov	r4, r0
 800c536:	4620      	mov	r0, r4
 800c538:	b00e      	add	sp, #56	@ 0x38
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	9902      	ldr	r1, [sp, #8]
 800c53e:	aa05      	add	r2, sp, #20
 800c540:	4620      	mov	r0, r4
 800c542:	f001 fbad 	bl	800dca0 <uxr_init_base_object_request>
 800c546:	a905      	add	r1, sp, #20
 800c548:	4604      	mov	r4, r0
 800c54a:	a806      	add	r0, sp, #24
 800c54c:	f002 fdfe 	bl	800f14c <uxr_serialize_DELETE_Payload>
 800c550:	4620      	mov	r0, r4
 800c552:	b00e      	add	sp, #56	@ 0x38
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop

0800c558 <uxr_common_create_entity>:
 800c558:	b510      	push	{r4, lr}
 800c55a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c55e:	b08c      	sub	sp, #48	@ 0x30
 800c560:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c564:	f1bc 0f01 	cmp.w	ip, #1
 800c568:	bf0c      	ite	eq
 800c56a:	f003 0201 	andeq.w	r2, r3, #1
 800c56e:	2200      	movne	r2, #0
 800c570:	330e      	adds	r3, #14
 800c572:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c576:	9101      	str	r1, [sp, #4]
 800c578:	441a      	add	r2, r3
 800c57a:	2301      	movs	r3, #1
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	9903      	ldr	r1, [sp, #12]
 800c580:	ab04      	add	r3, sp, #16
 800c582:	b292      	uxth	r2, r2
 800c584:	4604      	mov	r4, r0
 800c586:	f001 fa55 	bl	800da34 <uxr_prepare_stream_to_write_submessage>
 800c58a:	b918      	cbnz	r0, 800c594 <uxr_common_create_entity+0x3c>
 800c58c:	4604      	mov	r4, r0
 800c58e:	4620      	mov	r0, r4
 800c590:	b00c      	add	sp, #48	@ 0x30
 800c592:	bd10      	pop	{r4, pc}
 800c594:	9902      	ldr	r1, [sp, #8]
 800c596:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 fb81 	bl	800dca0 <uxr_init_base_object_request>
 800c59e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	a804      	add	r0, sp, #16
 800c5a4:	f002 fd2e 	bl	800f004 <uxr_serialize_CREATE_Payload>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	b00c      	add	sp, #48	@ 0x30
 800c5ac:	bd10      	pop	{r4, pc}
 800c5ae:	bf00      	nop

0800c5b0 <uxr_buffer_create_participant_bin>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c5b6:	ac11      	add	r4, sp, #68	@ 0x44
 800c5b8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c5c2:	7223      	strb	r3, [r4, #8]
 800c5c4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c5c6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4605      	mov	r5, r0
 800c5d0:	7122      	strb	r2, [r4, #4]
 800c5d2:	f88d 1014 	strb.w	r1, [sp, #20]
 800c5d6:	b1cb      	cbz	r3, 800c60c <uxr_buffer_create_participant_bin+0x5c>
 800c5d8:	f88d 201c 	strb.w	r2, [sp, #28]
 800c5dc:	9308      	str	r3, [sp, #32]
 800c5de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5e2:	a915      	add	r1, sp, #84	@ 0x54
 800c5e4:	a809      	add	r0, sp, #36	@ 0x24
 800c5e6:	f7ff fecf 	bl	800c388 <ucdr_init_buffer>
 800c5ea:	a905      	add	r1, sp, #20
 800c5ec:	a809      	add	r0, sp, #36	@ 0x24
 800c5ee:	f002 f8eb 	bl	800e7c8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c5f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5f4:	9600      	str	r6, [sp, #0]
 800c5f6:	9401      	str	r4, [sp, #4]
 800c5f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c5fc:	60e3      	str	r3, [r4, #12]
 800c5fe:	4628      	mov	r0, r5
 800c600:	b29b      	uxth	r3, r3
 800c602:	f7ff ffa9 	bl	800c558 <uxr_common_create_entity>
 800c606:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c60a:	bd70      	pop	{r4, r5, r6, pc}
 800c60c:	f88d 301c 	strb.w	r3, [sp, #28]
 800c610:	e7e5      	b.n	800c5de <uxr_buffer_create_participant_bin+0x2e>
 800c612:	bf00      	nop

0800c614 <uxr_buffer_create_topic_bin>:
 800c614:	b570      	push	{r4, r5, r6, lr}
 800c616:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c61a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c61e:	9105      	str	r1, [sp, #20]
 800c620:	4605      	mov	r5, r0
 800c622:	a997      	add	r1, sp, #604	@ 0x25c
 800c624:	4618      	mov	r0, r3
 800c626:	2302      	movs	r3, #2
 800c628:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c62c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c630:	f000 f996 	bl	800c960 <uxr_object_id_to_raw>
 800c634:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c636:	9306      	str	r3, [sp, #24]
 800c638:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c63a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c63c:	2303      	movs	r3, #3
 800c63e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c642:	2301      	movs	r3, #1
 800c644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c648:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c64c:	a917      	add	r1, sp, #92	@ 0x5c
 800c64e:	2300      	movs	r3, #0
 800c650:	a80b      	add	r0, sp, #44	@ 0x2c
 800c652:	f88d 301c 	strb.w	r3, [sp, #28]
 800c656:	f7ff fe97 	bl	800c388 <ucdr_init_buffer>
 800c65a:	a906      	add	r1, sp, #24
 800c65c:	a80b      	add	r0, sp, #44	@ 0x2c
 800c65e:	f002 f8d5 	bl	800e80c <uxr_serialize_OBJK_Topic_Binary>
 800c662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c664:	9316      	str	r3, [sp, #88]	@ 0x58
 800c666:	ac13      	add	r4, sp, #76	@ 0x4c
 800c668:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c66c:	9600      	str	r6, [sp, #0]
 800c66e:	9401      	str	r4, [sp, #4]
 800c670:	b29b      	uxth	r3, r3
 800c672:	4628      	mov	r0, r5
 800c674:	f7ff ff70 	bl	800c558 <uxr_common_create_entity>
 800c678:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c67c:	bd70      	pop	{r4, r5, r6, pc}
 800c67e:	bf00      	nop

0800c680 <uxr_buffer_create_publisher_bin>:
 800c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c682:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c686:	4605      	mov	r5, r0
 800c688:	9105      	str	r1, [sp, #20]
 800c68a:	4618      	mov	r0, r3
 800c68c:	2603      	movs	r6, #3
 800c68e:	a992      	add	r1, sp, #584	@ 0x248
 800c690:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c694:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c698:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c69c:	f000 f960 	bl	800c960 <uxr_object_id_to_raw>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6a6:	a912      	add	r1, sp, #72	@ 0x48
 800c6a8:	a806      	add	r0, sp, #24
 800c6aa:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c6ae:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c6b2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c6b6:	f7ff fe67 	bl	800c388 <ucdr_init_buffer>
 800c6ba:	a993      	add	r1, sp, #588	@ 0x24c
 800c6bc:	a806      	add	r0, sp, #24
 800c6be:	f002 f959 	bl	800e974 <uxr_serialize_OBJK_Publisher_Binary>
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6c4:	9311      	str	r3, [sp, #68]	@ 0x44
 800c6c6:	ac0e      	add	r4, sp, #56	@ 0x38
 800c6c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c6cc:	9700      	str	r7, [sp, #0]
 800c6ce:	9401      	str	r4, [sp, #4]
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	f7ff ff40 	bl	800c558 <uxr_common_create_entity>
 800c6d8:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6de:	bf00      	nop

0800c6e0 <uxr_buffer_create_subscriber_bin>:
 800c6e0:	b570      	push	{r4, r5, r6, lr}
 800c6e2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800c6e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c6ea:	9105      	str	r1, [sp, #20]
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	a992      	add	r1, sp, #584	@ 0x248
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	2304      	movs	r3, #4
 800c6f4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800c6f8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800c6fc:	f000 f930 	bl	800c960 <uxr_object_id_to_raw>
 800c700:	2300      	movs	r3, #0
 800c702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c706:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c70a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c70e:	a912      	add	r1, sp, #72	@ 0x48
 800c710:	2303      	movs	r3, #3
 800c712:	a806      	add	r0, sp, #24
 800c714:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800c718:	f7ff fe36 	bl	800c388 <ucdr_init_buffer>
 800c71c:	a993      	add	r1, sp, #588	@ 0x24c
 800c71e:	a806      	add	r0, sp, #24
 800c720:	f002 f9d8 	bl	800ead4 <uxr_serialize_OBJK_Subscriber_Binary>
 800c724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c726:	9311      	str	r3, [sp, #68]	@ 0x44
 800c728:	ac0e      	add	r4, sp, #56	@ 0x38
 800c72a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c72e:	9600      	str	r6, [sp, #0]
 800c730:	9401      	str	r4, [sp, #4]
 800c732:	b29b      	uxth	r3, r3
 800c734:	4628      	mov	r0, r5
 800c736:	f7ff ff0f 	bl	800c558 <uxr_common_create_entity>
 800c73a:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800c73e:	bd70      	pop	{r4, r5, r6, pc}

0800c740 <uxr_buffer_create_datawriter_bin>:
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c744:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c748:	ac1d      	add	r4, sp, #116	@ 0x74
 800c74a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c74e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c752:	9105      	str	r1, [sp, #20]
 800c754:	4606      	mov	r6, r0
 800c756:	a9a1      	add	r1, sp, #644	@ 0x284
 800c758:	4618      	mov	r0, r3
 800c75a:	2305      	movs	r3, #5
 800c75c:	7123      	strb	r3, [r4, #4]
 800c75e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c762:	2703      	movs	r7, #3
 800c764:	f000 f8fc 	bl	800c960 <uxr_object_id_to_raw>
 800c768:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c76a:	7227      	strb	r7, [r4, #8]
 800c76c:	a90e      	add	r1, sp, #56	@ 0x38
 800c76e:	f000 f8f7 	bl	800c960 <uxr_object_id_to_raw>
 800c772:	2300      	movs	r3, #0
 800c774:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c778:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c77c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c780:	3d00      	subs	r5, #0
 800c782:	bf18      	it	ne
 800c784:	2501      	movne	r5, #1
 800c786:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c78a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c78e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c792:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c796:	2301      	movs	r3, #1
 800c798:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c79c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c7a0:	bb8a      	cbnz	r2, 800c806 <uxr_buffer_create_datawriter_bin+0xc6>
 800c7a2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c7a6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c7aa:	f04f 0c13 	mov.w	ip, #19
 800c7ae:	250b      	movs	r5, #11
 800c7b0:	2221      	movs	r2, #33	@ 0x21
 800c7b2:	2111      	movs	r1, #17
 800c7b4:	2009      	movs	r0, #9
 800c7b6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800c7ba:	b923      	cbnz	r3, 800c7c6 <uxr_buffer_create_datawriter_bin+0x86>
 800c7bc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c7c0:	4672      	mov	r2, lr
 800c7c2:	4661      	mov	r1, ip
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d025      	beq.n	800c81a <uxr_buffer_create_datawriter_bin+0xda>
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d029      	beq.n	800c826 <uxr_buffer_create_datawriter_bin+0xe6>
 800c7d2:	b32b      	cbz	r3, 800c820 <uxr_buffer_create_datawriter_bin+0xe0>
 800c7d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7d8:	a921      	add	r1, sp, #132	@ 0x84
 800c7da:	a806      	add	r0, sp, #24
 800c7dc:	f7ff fdd4 	bl	800c388 <ucdr_init_buffer>
 800c7e0:	a90e      	add	r1, sp, #56	@ 0x38
 800c7e2:	a806      	add	r0, sp, #24
 800c7e4:	f002 fa28 	bl	800ec38 <uxr_serialize_OBJK_DataWriter_Binary>
 800c7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ea:	f8cd 8000 	str.w	r8, [sp]
 800c7ee:	9401      	str	r4, [sp, #4]
 800c7f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c7f4:	60e3      	str	r3, [r4, #12]
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	f7ff fead 	bl	800c558 <uxr_common_create_entity>
 800c7fe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c806:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c80a:	f04f 0c12 	mov.w	ip, #18
 800c80e:	250a      	movs	r5, #10
 800c810:	2220      	movs	r2, #32
 800c812:	2110      	movs	r1, #16
 800c814:	2008      	movs	r0, #8
 800c816:	2702      	movs	r7, #2
 800c818:	e7cd      	b.n	800c7b6 <uxr_buffer_create_datawriter_bin+0x76>
 800c81a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c81e:	e7d9      	b.n	800c7d4 <uxr_buffer_create_datawriter_bin+0x94>
 800c820:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c824:	e7d6      	b.n	800c7d4 <uxr_buffer_create_datawriter_bin+0x94>
 800c826:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c82a:	e7d3      	b.n	800c7d4 <uxr_buffer_create_datawriter_bin+0x94>

0800c82c <uxr_buffer_create_datareader_bin>:
 800c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c830:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c834:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c836:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c83a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800c83e:	9105      	str	r1, [sp, #20]
 800c840:	4606      	mov	r6, r0
 800c842:	a9a3      	add	r1, sp, #652	@ 0x28c
 800c844:	4618      	mov	r0, r3
 800c846:	2306      	movs	r3, #6
 800c848:	7123      	strb	r3, [r4, #4]
 800c84a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800c84e:	2703      	movs	r7, #3
 800c850:	f000 f886 	bl	800c960 <uxr_object_id_to_raw>
 800c854:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800c856:	7227      	strb	r7, [r4, #8]
 800c858:	a90e      	add	r1, sp, #56	@ 0x38
 800c85a:	f000 f881 	bl	800c960 <uxr_object_id_to_raw>
 800c85e:	2300      	movs	r3, #0
 800c860:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c864:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800c868:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800c86c:	3d00      	subs	r5, #0
 800c86e:	bf18      	it	ne
 800c870:	2501      	movne	r5, #1
 800c872:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c876:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c87a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c87e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c882:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c886:	2301      	movs	r3, #1
 800c888:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c88c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c890:	bb8a      	cbnz	r2, 800c8f6 <uxr_buffer_create_datareader_bin+0xca>
 800c892:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c896:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c89a:	f04f 0c13 	mov.w	ip, #19
 800c89e:	250b      	movs	r5, #11
 800c8a0:	2221      	movs	r2, #33	@ 0x21
 800c8a2:	2111      	movs	r1, #17
 800c8a4:	2009      	movs	r0, #9
 800c8a6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800c8aa:	b923      	cbnz	r3, 800c8b6 <uxr_buffer_create_datareader_bin+0x8a>
 800c8ac:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c8b0:	4672      	mov	r2, lr
 800c8b2:	4661      	mov	r1, ip
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d025      	beq.n	800c90a <uxr_buffer_create_datareader_bin+0xde>
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d029      	beq.n	800c916 <uxr_buffer_create_datareader_bin+0xea>
 800c8c2:	b32b      	cbz	r3, 800c910 <uxr_buffer_create_datareader_bin+0xe4>
 800c8c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8c8:	a923      	add	r1, sp, #140	@ 0x8c
 800c8ca:	a806      	add	r0, sp, #24
 800c8cc:	f7ff fd5c 	bl	800c388 <ucdr_init_buffer>
 800c8d0:	a90e      	add	r1, sp, #56	@ 0x38
 800c8d2:	a806      	add	r0, sp, #24
 800c8d4:	f002 f974 	bl	800ebc0 <uxr_serialize_OBJK_DataReader_Binary>
 800c8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8da:	f8cd 8000 	str.w	r8, [sp]
 800c8de:	9401      	str	r4, [sp, #4]
 800c8e0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c8e4:	60e3      	str	r3, [r4, #12]
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	f7ff fe35 	bl	800c558 <uxr_common_create_entity>
 800c8ee:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c8fa:	f04f 0c12 	mov.w	ip, #18
 800c8fe:	250a      	movs	r5, #10
 800c900:	2220      	movs	r2, #32
 800c902:	2110      	movs	r1, #16
 800c904:	2008      	movs	r0, #8
 800c906:	2702      	movs	r7, #2
 800c908:	e7cd      	b.n	800c8a6 <uxr_buffer_create_datareader_bin+0x7a>
 800c90a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c90e:	e7d9      	b.n	800c8c4 <uxr_buffer_create_datareader_bin+0x98>
 800c910:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c914:	e7d6      	b.n	800c8c4 <uxr_buffer_create_datareader_bin+0x98>
 800c916:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c91a:	e7d3      	b.n	800c8c4 <uxr_buffer_create_datareader_bin+0x98>

0800c91c <uxr_object_id>:
 800c91c:	b082      	sub	sp, #8
 800c91e:	2300      	movs	r3, #0
 800c920:	f88d 1006 	strb.w	r1, [sp, #6]
 800c924:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c928:	f360 030f 	bfi	r3, r0, #0, #16
 800c92c:	f362 431f 	bfi	r3, r2, #16, #16
 800c930:	4618      	mov	r0, r3
 800c932:	b002      	add	sp, #8
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop

0800c938 <uxr_object_id_from_raw>:
 800c938:	7843      	ldrb	r3, [r0, #1]
 800c93a:	7801      	ldrb	r1, [r0, #0]
 800c93c:	b082      	sub	sp, #8
 800c93e:	f003 020f 	and.w	r2, r3, #15
 800c942:	f88d 2006 	strb.w	r2, [sp, #6]
 800c946:	091b      	lsrs	r3, r3, #4
 800c948:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c94c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c950:	2000      	movs	r0, #0
 800c952:	f363 000f 	bfi	r0, r3, #0, #16
 800c956:	f362 401f 	bfi	r0, r2, #16, #16
 800c95a:	b002      	add	sp, #8
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop

0800c960 <uxr_object_id_to_raw>:
 800c960:	4602      	mov	r2, r0
 800c962:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c966:	b082      	sub	sp, #8
 800c968:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c96c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c970:	f881 c000 	strb.w	ip, [r1]
 800c974:	7048      	strb	r0, [r1, #1]
 800c976:	b002      	add	sp, #8
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop

0800c97c <uxr_buffer_request_data>:
 800c97c:	b530      	push	{r4, r5, lr}
 800c97e:	b095      	sub	sp, #84	@ 0x54
 800c980:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c984:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800c986:	9303      	str	r3, [sp, #12]
 800c988:	2200      	movs	r2, #0
 800c98a:	2d00      	cmp	r5, #0
 800c98c:	bf14      	ite	ne
 800c98e:	2101      	movne	r1, #1
 800c990:	4611      	moveq	r1, r2
 800c992:	4604      	mov	r4, r0
 800c994:	f88d 301c 	strb.w	r3, [sp, #28]
 800c998:	f88d 201d 	strb.w	r2, [sp, #29]
 800c99c:	f88d 201e 	strb.w	r2, [sp, #30]
 800c9a0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800c9a4:	d021      	beq.n	800c9ea <uxr_buffer_request_data+0x6e>
 800c9a6:	682a      	ldr	r2, [r5, #0]
 800c9a8:	686b      	ldr	r3, [r5, #4]
 800c9aa:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800c9ae:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800c9b2:	2210      	movs	r2, #16
 800c9b4:	2308      	movs	r3, #8
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	e9cd 3100 	strd	r3, r1, [sp]
 800c9bc:	4620      	mov	r0, r4
 800c9be:	9905      	ldr	r1, [sp, #20]
 800c9c0:	ab0c      	add	r3, sp, #48	@ 0x30
 800c9c2:	f001 f837 	bl	800da34 <uxr_prepare_stream_to_write_submessage>
 800c9c6:	b918      	cbnz	r0, 800c9d0 <uxr_buffer_request_data+0x54>
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	b015      	add	sp, #84	@ 0x54
 800c9ce:	bd30      	pop	{r4, r5, pc}
 800c9d0:	9904      	ldr	r1, [sp, #16]
 800c9d2:	aa06      	add	r2, sp, #24
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f001 f963 	bl	800dca0 <uxr_init_base_object_request>
 800c9da:	a906      	add	r1, sp, #24
 800c9dc:	4604      	mov	r4, r0
 800c9de:	a80c      	add	r0, sp, #48	@ 0x30
 800c9e0:	f002 fc5e 	bl	800f2a0 <uxr_serialize_READ_DATA_Payload>
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	b015      	add	sp, #84	@ 0x54
 800c9e8:	bd30      	pop	{r4, r5, pc}
 800c9ea:	2208      	movs	r2, #8
 800c9ec:	e7e2      	b.n	800c9b4 <uxr_buffer_request_data+0x38>
 800c9ee:	bf00      	nop

0800c9f0 <uxr_buffer_cancel_data>:
 800c9f0:	b510      	push	{r4, lr}
 800c9f2:	b094      	sub	sp, #80	@ 0x50
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	9202      	str	r2, [sp, #8]
 800c9f8:	9205      	str	r2, [sp, #20]
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ca02:	f88d 301e 	strb.w	r3, [sp, #30]
 800ca06:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ca0a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ca0e:	2308      	movs	r3, #8
 800ca10:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	2210      	movs	r2, #16
 800ca18:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	9103      	str	r1, [sp, #12]
 800ca1e:	f001 f809 	bl	800da34 <uxr_prepare_stream_to_write_submessage>
 800ca22:	b918      	cbnz	r0, 800ca2c <uxr_buffer_cancel_data+0x3c>
 800ca24:	4604      	mov	r4, r0
 800ca26:	4620      	mov	r0, r4
 800ca28:	b014      	add	sp, #80	@ 0x50
 800ca2a:	bd10      	pop	{r4, pc}
 800ca2c:	9905      	ldr	r1, [sp, #20]
 800ca2e:	aa06      	add	r2, sp, #24
 800ca30:	4620      	mov	r0, r4
 800ca32:	f001 f935 	bl	800dca0 <uxr_init_base_object_request>
 800ca36:	a906      	add	r1, sp, #24
 800ca38:	4604      	mov	r4, r0
 800ca3a:	a80c      	add	r0, sp, #48	@ 0x30
 800ca3c:	f002 fc30 	bl	800f2a0 <uxr_serialize_READ_DATA_Payload>
 800ca40:	4620      	mov	r0, r4
 800ca42:	b014      	add	sp, #80	@ 0x50
 800ca44:	bd10      	pop	{r4, pc}
 800ca46:	bf00      	nop

0800ca48 <read_submessage_format>:
 800ca48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca4c:	b095      	sub	sp, #84	@ 0x54
 800ca4e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ca52:	b113      	cbz	r3, 800ca5a <read_submessage_format+0x12>
 800ca54:	b015      	add	sp, #84	@ 0x54
 800ca56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ca62:	4607      	mov	r7, r0
 800ca64:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ca66:	9004      	str	r0, [sp, #16]
 800ca68:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ca6a:	9005      	str	r0, [sp, #20]
 800ca6c:	1a52      	subs	r2, r2, r1
 800ca6e:	a80c      	add	r0, sp, #48	@ 0x30
 800ca70:	4699      	mov	r9, r3
 800ca72:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ca76:	f7ff fc87 	bl	800c388 <ucdr_init_buffer>
 800ca7a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ca7e:	a80c      	add	r0, sp, #48	@ 0x30
 800ca80:	f7ff fc56 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800ca84:	69e2      	ldr	r2, [r4, #28]
 800ca86:	b19a      	cbz	r2, 800cab0 <read_submessage_format+0x68>
 800ca88:	f1b8 0f07 	cmp.w	r8, #7
 800ca8c:	f882 9014 	strb.w	r9, [r2, #20]
 800ca90:	d040      	beq.n	800cb14 <read_submessage_format+0xcc>
 800ca92:	f1b8 0f08 	cmp.w	r8, #8
 800ca96:	d02e      	beq.n	800caf6 <read_submessage_format+0xae>
 800ca98:	f1b8 0f06 	cmp.w	r8, #6
 800ca9c:	d011      	beq.n	800cac2 <read_submessage_format+0x7a>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	7513      	strb	r3, [r2, #20]
 800caa2:	4629      	mov	r1, r5
 800caa4:	4620      	mov	r0, r4
 800caa6:	f7ff fcbf 	bl	800c428 <ucdr_advance_buffer>
 800caaa:	b015      	add	sp, #84	@ 0x54
 800caac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cab0:	f1b8 0f07 	cmp.w	r8, #7
 800cab4:	d02e      	beq.n	800cb14 <read_submessage_format+0xcc>
 800cab6:	f1b8 0f08 	cmp.w	r8, #8
 800caba:	d01c      	beq.n	800caf6 <read_submessage_format+0xae>
 800cabc:	f1b8 0f06 	cmp.w	r8, #6
 800cac0:	d1ef      	bne.n	800caa2 <read_submessage_format+0x5a>
 800cac2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	d011      	beq.n	800caf0 <read_submessage_format+0xa8>
 800cacc:	ab0c      	add	r3, sp, #48	@ 0x30
 800cace:	e9cd 3500 	strd	r3, r5, [sp]
 800cad2:	2306      	movs	r3, #6
 800cad4:	f88d 3016 	strb.w	r3, [sp, #22]
 800cad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cadc:	9302      	str	r3, [sp, #8]
 800cade:	4632      	mov	r2, r6
 800cae0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800cae4:	4638      	mov	r0, r7
 800cae6:	47c0      	blx	r8
 800cae8:	2301      	movs	r3, #1
 800caea:	69e2      	ldr	r2, [r4, #28]
 800caec:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	d1d4      	bne.n	800ca9e <read_submessage_format+0x56>
 800caf4:	e7d5      	b.n	800caa2 <read_submessage_format+0x5a>
 800caf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d0f8      	beq.n	800caf0 <read_submessage_format+0xa8>
 800cafe:	a906      	add	r1, sp, #24
 800cb00:	a80c      	add	r0, sp, #48	@ 0x30
 800cb02:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cb06:	f002 fc91 	bl	800f42c <uxr_deserialize_SampleIdentity>
 800cb0a:	b9a0      	cbnz	r0, 800cb36 <read_submessage_format+0xee>
 800cb0c:	69e2      	ldr	r2, [r4, #28]
 800cb0e:	2a00      	cmp	r2, #0
 800cb10:	d1c5      	bne.n	800ca9e <read_submessage_format+0x56>
 800cb12:	e7c6      	b.n	800caa2 <read_submessage_format+0x5a>
 800cb14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb18:	b13b      	cbz	r3, 800cb2a <read_submessage_format+0xe2>
 800cb1a:	a906      	add	r1, sp, #24
 800cb1c:	a80c      	add	r0, sp, #48	@ 0x30
 800cb1e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800cb22:	f002 f957 	bl	800edd4 <uxr_deserialize_BaseObjectRequest>
 800cb26:	bb60      	cbnz	r0, 800cb82 <read_submessage_format+0x13a>
 800cb28:	69e2      	ldr	r2, [r4, #28]
 800cb2a:	68a3      	ldr	r3, [r4, #8]
 800cb2c:	442b      	add	r3, r5
 800cb2e:	60a3      	str	r3, [r4, #8]
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d1b4      	bne.n	800ca9e <read_submessage_format+0x56>
 800cb34:	e7b5      	b.n	800caa2 <read_submessage_format+0x5a>
 800cb36:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800cb3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb3c:	1a52      	subs	r2, r2, r1
 800cb3e:	eba8 0803 	sub.w	r8, r8, r3
 800cb42:	a80c      	add	r0, sp, #48	@ 0x30
 800cb44:	f7ff fc20 	bl	800c388 <ucdr_init_buffer>
 800cb48:	44a8      	add	r8, r5
 800cb4a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cb4e:	a80c      	add	r0, sp, #48	@ 0x30
 800cb50:	f7ff fbee 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800cb54:	fa1f f888 	uxth.w	r8, r8
 800cb58:	ab0c      	add	r3, sp, #48	@ 0x30
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	f8cd 8004 	str.w	r8, [sp, #4]
 800cb60:	2108      	movs	r1, #8
 800cb62:	f88d 1016 	strb.w	r1, [sp, #22]
 800cb66:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800cb6a:	9102      	str	r1, [sp, #8]
 800cb6c:	ab06      	add	r3, sp, #24
 800cb6e:	4632      	mov	r2, r6
 800cb70:	9905      	ldr	r1, [sp, #20]
 800cb72:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800cb76:	4638      	mov	r0, r7
 800cb78:	47b0      	blx	r6
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cb80:	e7c4      	b.n	800cb0c <read_submessage_format+0xc4>
 800cb82:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800cb86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb88:	1a52      	subs	r2, r2, r1
 800cb8a:	a80c      	add	r0, sp, #48	@ 0x30
 800cb8c:	eba8 0803 	sub.w	r8, r8, r3
 800cb90:	f7ff fbfa 	bl	800c388 <ucdr_init_buffer>
 800cb94:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800cb98:	a80c      	add	r0, sp, #48	@ 0x30
 800cb9a:	f7ff fbc9 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800cb9e:	ab0c      	add	r3, sp, #48	@ 0x30
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800cba6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800cbaa:	44a8      	add	r8, r5
 800cbac:	fa1f f888 	uxth.w	r8, r8
 800cbb0:	f8cd 8004 	str.w	r8, [sp, #4]
 800cbb4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800cbb8:	2107      	movs	r1, #7
 800cbba:	f88d 1016 	strb.w	r1, [sp, #22]
 800cbbe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800cbc2:	9102      	str	r1, [sp, #8]
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800cbcc:	9905      	ldr	r1, [sp, #20]
 800cbce:	4638      	mov	r0, r7
 800cbd0:	47b0      	blx	r6
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800cbd8:	e7a6      	b.n	800cb28 <read_submessage_format+0xe0>
 800cbda:	bf00      	nop

0800cbdc <on_get_fragmentation_info>:
 800cbdc:	b500      	push	{lr}
 800cbde:	b08b      	sub	sp, #44	@ 0x2c
 800cbe0:	4601      	mov	r1, r0
 800cbe2:	2204      	movs	r2, #4
 800cbe4:	a802      	add	r0, sp, #8
 800cbe6:	f7ff fbcf 	bl	800c388 <ucdr_init_buffer>
 800cbea:	f10d 0305 	add.w	r3, sp, #5
 800cbee:	f10d 0206 	add.w	r2, sp, #6
 800cbf2:	a901      	add	r1, sp, #4
 800cbf4:	a802      	add	r0, sp, #8
 800cbf6:	f001 f9d5 	bl	800dfa4 <uxr_read_submessage_header>
 800cbfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cbfe:	2b0d      	cmp	r3, #13
 800cc00:	d003      	beq.n	800cc0a <on_get_fragmentation_info+0x2e>
 800cc02:	2000      	movs	r0, #0
 800cc04:	b00b      	add	sp, #44	@ 0x2c
 800cc06:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc0e:	f013 0f02 	tst.w	r3, #2
 800cc12:	bf14      	ite	ne
 800cc14:	2002      	movne	r0, #2
 800cc16:	2001      	moveq	r0, #1
 800cc18:	b00b      	add	sp, #44	@ 0x2c
 800cc1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc1e:	bf00      	nop

0800cc20 <read_submessage_get_info>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	2500      	movs	r5, #0
 800cc24:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800cc28:	4604      	mov	r4, r0
 800cc2a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800cc2e:	460e      	mov	r6, r1
 800cc30:	a810      	add	r0, sp, #64	@ 0x40
 800cc32:	4629      	mov	r1, r5
 800cc34:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800cc38:	f00a fa4a 	bl	80170d0 <memset>
 800cc3c:	a903      	add	r1, sp, #12
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f002 fa70 	bl	800f124 <uxr_deserialize_GET_INFO_Payload>
 800cc44:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800cc48:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f001 f81f 	bl	800dc90 <uxr_session_header_offset>
 800cc52:	462b      	mov	r3, r5
 800cc54:	9000      	str	r0, [sp, #0]
 800cc56:	220c      	movs	r2, #12
 800cc58:	a905      	add	r1, sp, #20
 800cc5a:	a808      	add	r0, sp, #32
 800cc5c:	f7ff fb82 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800cc60:	a910      	add	r1, sp, #64	@ 0x40
 800cc62:	a808      	add	r0, sp, #32
 800cc64:	f002 fad0 	bl	800f208 <uxr_serialize_INFO_Payload>
 800cc68:	9b08      	ldr	r3, [sp, #32]
 800cc6a:	462a      	mov	r2, r5
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f000 ffb8 	bl	800dbe4 <uxr_stamp_session_header>
 800cc74:	a808      	add	r0, sp, #32
 800cc76:	f7ff fbb3 	bl	800c3e0 <ucdr_buffer_length>
 800cc7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	a905      	add	r1, sp, #20
 800cc80:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cc84:	47a0      	blx	r4
 800cc86:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}

0800cc8c <write_submessage_acknack.isra.0>:
 800cc8c:	b570      	push	{r4, r5, r6, lr}
 800cc8e:	b092      	sub	sp, #72	@ 0x48
 800cc90:	4605      	mov	r5, r0
 800cc92:	460e      	mov	r6, r1
 800cc94:	4614      	mov	r4, r2
 800cc96:	f000 fffb 	bl	800dc90 <uxr_session_header_offset>
 800cc9a:	a905      	add	r1, sp, #20
 800cc9c:	9000      	str	r0, [sp, #0]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	a80a      	add	r0, sp, #40	@ 0x28
 800cca2:	2211      	movs	r2, #17
 800cca4:	f7ff fb5e 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800cca8:	2218      	movs	r2, #24
 800ccaa:	fb02 5404 	mla	r4, r2, r4, r5
 800ccae:	2300      	movs	r3, #0
 800ccb0:	2205      	movs	r2, #5
 800ccb2:	3450      	adds	r4, #80	@ 0x50
 800ccb4:	210a      	movs	r1, #10
 800ccb6:	a80a      	add	r0, sp, #40	@ 0x28
 800ccb8:	f001 f95a 	bl	800df70 <uxr_buffer_submessage_header>
 800ccbc:	a903      	add	r1, sp, #12
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f007 fc40 	bl	8014544 <uxr_compute_acknack>
 800ccc4:	ba40      	rev16	r0, r0
 800ccc6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ccca:	a903      	add	r1, sp, #12
 800cccc:	a80a      	add	r0, sp, #40	@ 0x28
 800ccce:	f88d 6010 	strb.w	r6, [sp, #16]
 800ccd2:	f002 fb09 	bl	800f2e8 <uxr_serialize_ACKNACK_Payload>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f000 ff81 	bl	800dbe4 <uxr_stamp_session_header>
 800cce2:	a80a      	add	r0, sp, #40	@ 0x28
 800cce4:	f7ff fb7c 	bl	800c3e0 <ucdr_buffer_length>
 800cce8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ccea:	4602      	mov	r2, r0
 800ccec:	a905      	add	r1, sp, #20
 800ccee:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ccf2:	47a0      	blx	r4
 800ccf4:	b012      	add	sp, #72	@ 0x48
 800ccf6:	bd70      	pop	{r4, r5, r6, pc}

0800ccf8 <uxr_init_session>:
 800ccf8:	b510      	push	{r4, lr}
 800ccfa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800cd30 <uxr_init_session+0x38>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800cd04:	4604      	mov	r4, r0
 800cd06:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800cd0a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800cd0e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800cd12:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800cd16:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800cd1a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800cd1e:	2181      	movs	r1, #129	@ 0x81
 800cd20:	f000 fecc 	bl	800dabc <uxr_init_session_info>
 800cd24:	f104 0008 	add.w	r0, r4, #8
 800cd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd2c:	f001 b83c 	b.w	800dda8 <uxr_init_stream_storage>
	...

0800cd38 <uxr_set_status_callback>:
 800cd38:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop

0800cd40 <uxr_set_topic_callback>:
 800cd40:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <uxr_set_request_callback>:
 800cd48:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <uxr_set_reply_callback>:
 800cd50:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop

0800cd58 <uxr_create_output_best_effort_stream>:
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	e9cd 2100 	strd	r2, r1, [sp]
 800cd60:	4604      	mov	r4, r0
 800cd62:	f000 ff95 	bl	800dc90 <uxr_session_header_offset>
 800cd66:	e9dd 2100 	ldrd	r2, r1, [sp]
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	f104 0008 	add.w	r0, r4, #8
 800cd70:	b004      	add	sp, #16
 800cd72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd76:	f001 b861 	b.w	800de3c <uxr_add_output_best_effort_buffer>
 800cd7a:	bf00      	nop

0800cd7c <uxr_create_output_reliable_stream>:
 800cd7c:	b510      	push	{r4, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800cd84:	4604      	mov	r4, r0
 800cd86:	9303      	str	r3, [sp, #12]
 800cd88:	f000 ff82 	bl	800dc90 <uxr_session_header_offset>
 800cd8c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800cd90:	9000      	str	r0, [sp, #0]
 800cd92:	9905      	ldr	r1, [sp, #20]
 800cd94:	f104 0008 	add.w	r0, r4, #8
 800cd98:	f001 f864 	bl	800de64 <uxr_add_output_reliable_buffer>
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	b2c3      	uxtb	r3, r0
 800cda0:	f363 0207 	bfi	r2, r3, #0, #8
 800cda4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cda8:	f363 220f 	bfi	r2, r3, #8, #8
 800cdac:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdb0:	f363 4217 	bfi	r2, r3, #16, #8
 800cdb4:	0e03      	lsrs	r3, r0, #24
 800cdb6:	f363 621f 	bfi	r2, r3, #24, #8
 800cdba:	4610      	mov	r0, r2
 800cdbc:	b008      	add	sp, #32
 800cdbe:	bd10      	pop	{r4, pc}

0800cdc0 <uxr_create_input_best_effort_stream>:
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	3008      	adds	r0, #8
 800cdc4:	b002      	add	sp, #8
 800cdc6:	f001 b867 	b.w	800de98 <uxr_add_input_best_effort_buffer>
 800cdca:	bf00      	nop

0800cdcc <uxr_create_input_reliable_stream>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	4c0b      	ldr	r4, [pc, #44]	@ (800ce00 <uxr_create_input_reliable_stream+0x34>)
 800cdd2:	9400      	str	r4, [sp, #0]
 800cdd4:	3008      	adds	r0, #8
 800cdd6:	f001 f875 	bl	800dec4 <uxr_add_input_reliable_buffer>
 800cdda:	2200      	movs	r2, #0
 800cddc:	b2c3      	uxtb	r3, r0
 800cdde:	f363 0207 	bfi	r2, r3, #0, #8
 800cde2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800cde6:	f363 220f 	bfi	r2, r3, #8, #8
 800cdea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800cdee:	f363 4217 	bfi	r2, r3, #16, #8
 800cdf2:	0e03      	lsrs	r3, r0, #24
 800cdf4:	f363 621f 	bfi	r2, r3, #24, #8
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	b004      	add	sp, #16
 800cdfc:	bd10      	pop	{r4, pc}
 800cdfe:	bf00      	nop
 800ce00:	0800cbdd 	.word	0x0800cbdd

0800ce04 <uxr_epoch_nanos>:
 800ce04:	b510      	push	{r4, lr}
 800ce06:	4604      	mov	r4, r0
 800ce08:	f001 f912 	bl	800e030 <uxr_nanos>
 800ce0c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ce10:	1ac0      	subs	r0, r0, r3
 800ce12:	eb61 0102 	sbc.w	r1, r1, r2
 800ce16:	bd10      	pop	{r4, pc}

0800ce18 <uxr_flash_output_streams>:
 800ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	7e03      	ldrb	r3, [r0, #24]
 800ce1e:	b084      	sub	sp, #16
 800ce20:	4604      	mov	r4, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d035      	beq.n	800ce92 <uxr_flash_output_streams+0x7a>
 800ce26:	f04f 0900 	mov.w	r9, #0
 800ce2a:	4648      	mov	r0, r9
 800ce2c:	f10d 0802 	add.w	r8, sp, #2
 800ce30:	af03      	add	r7, sp, #12
 800ce32:	ae02      	add	r6, sp, #8
 800ce34:	e006      	b.n	800ce44 <uxr_flash_output_streams+0x2c>
 800ce36:	7e23      	ldrb	r3, [r4, #24]
 800ce38:	f109 0901 	add.w	r9, r9, #1
 800ce3c:	fa5f f089 	uxtb.w	r0, r9
 800ce40:	4283      	cmp	r3, r0
 800ce42:	d926      	bls.n	800ce92 <uxr_flash_output_streams+0x7a>
 800ce44:	2201      	movs	r2, #1
 800ce46:	4611      	mov	r1, r2
 800ce48:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ce4c:	f000 ff58 	bl	800dd00 <uxr_stream_id>
 800ce50:	3508      	adds	r5, #8
 800ce52:	4684      	mov	ip, r0
 800ce54:	4643      	mov	r3, r8
 800ce56:	463a      	mov	r2, r7
 800ce58:	4631      	mov	r1, r6
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f8cd c004 	str.w	ip, [sp, #4]
 800ce60:	f007 fbf6 	bl	8014650 <uxr_prepare_best_effort_buffer_to_send>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d0e6      	beq.n	800ce36 <uxr_flash_output_streams+0x1e>
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ce6e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ce72:	4620      	mov	r0, r4
 800ce74:	f000 feb6 	bl	800dbe4 <uxr_stamp_session_header>
 800ce78:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ce7a:	9a03      	ldr	r2, [sp, #12]
 800ce7c:	685d      	ldr	r5, [r3, #4]
 800ce7e:	6818      	ldr	r0, [r3, #0]
 800ce80:	9902      	ldr	r1, [sp, #8]
 800ce82:	47a8      	blx	r5
 800ce84:	f109 0901 	add.w	r9, r9, #1
 800ce88:	7e23      	ldrb	r3, [r4, #24]
 800ce8a:	fa5f f089 	uxtb.w	r0, r9
 800ce8e:	4283      	cmp	r3, r0
 800ce90:	d8d8      	bhi.n	800ce44 <uxr_flash_output_streams+0x2c>
 800ce92:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ce96:	b38b      	cbz	r3, 800cefc <uxr_flash_output_streams+0xe4>
 800ce98:	f04f 0900 	mov.w	r9, #0
 800ce9c:	f10d 0802 	add.w	r8, sp, #2
 800cea0:	af03      	add	r7, sp, #12
 800cea2:	ae02      	add	r6, sp, #8
 800cea4:	4648      	mov	r0, r9
 800cea6:	2201      	movs	r2, #1
 800cea8:	2102      	movs	r1, #2
 800ceaa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ceae:	f000 ff27 	bl	800dd00 <uxr_stream_id>
 800ceb2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ceb6:	3520      	adds	r5, #32
 800ceb8:	9001      	str	r0, [sp, #4]
 800ceba:	e00d      	b.n	800ced8 <uxr_flash_output_streams+0xc0>
 800cebc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800cec0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800cec4:	9b02      	ldr	r3, [sp, #8]
 800cec6:	f000 fe8d 	bl	800dbe4 <uxr_stamp_session_header>
 800ceca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cecc:	9a03      	ldr	r2, [sp, #12]
 800cece:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ced2:	9902      	ldr	r1, [sp, #8]
 800ced4:	6818      	ldr	r0, [r3, #0]
 800ced6:	47d0      	blx	sl
 800ced8:	4643      	mov	r3, r8
 800ceda:	463a      	mov	r2, r7
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	f007 fdd4 	bl	8014a8c <uxr_prepare_next_reliable_buffer_to_send>
 800cee4:	4603      	mov	r3, r0
 800cee6:	4620      	mov	r0, r4
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1e7      	bne.n	800cebc <uxr_flash_output_streams+0xa4>
 800ceec:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800cef0:	f109 0901 	add.w	r9, r9, #1
 800cef4:	fa5f f089 	uxtb.w	r0, r9
 800cef8:	4283      	cmp	r3, r0
 800cefa:	d8d4      	bhi.n	800cea6 <uxr_flash_output_streams+0x8e>
 800cefc:	b004      	add	sp, #16
 800cefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf02:	bf00      	nop

0800cf04 <read_submessage_info>:
 800cf04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf08:	460d      	mov	r5, r1
 800cf0a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800cf0e:	4669      	mov	r1, sp
 800cf10:	4607      	mov	r7, r0
 800cf12:	4628      	mov	r0, r5
 800cf14:	f002 f814 	bl	800ef40 <uxr_deserialize_BaseObjectReply>
 800cf18:	a902      	add	r1, sp, #8
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800cf22:	f006 f923 	bl	801316c <ucdr_deserialize_bool>
 800cf26:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cf2a:	4004      	ands	r4, r0
 800cf2c:	b2e4      	uxtb	r4, r4
 800cf2e:	b95b      	cbnz	r3, 800cf48 <read_submessage_info+0x44>
 800cf30:	a987      	add	r1, sp, #540	@ 0x21c
 800cf32:	4628      	mov	r0, r5
 800cf34:	f006 f91a 	bl	801316c <ucdr_deserialize_bool>
 800cf38:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800cf3c:	4606      	mov	r6, r0
 800cf3e:	b94b      	cbnz	r3, 800cf54 <read_submessage_info+0x50>
 800cf40:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	a903      	add	r1, sp, #12
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f001 fea0 	bl	800ec90 <uxr_deserialize_ObjectVariant>
 800cf50:	4004      	ands	r4, r0
 800cf52:	e7ed      	b.n	800cf30 <read_submessage_info+0x2c>
 800cf54:	a988      	add	r1, sp, #544	@ 0x220
 800cf56:	4628      	mov	r0, r5
 800cf58:	f006 f936 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800cf5c:	4234      	tst	r4, r6
 800cf5e:	d0ef      	beq.n	800cf40 <read_submessage_info+0x3c>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d0ed      	beq.n	800cf40 <read_submessage_info+0x3c>
 800cf64:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800cf68:	2b0d      	cmp	r3, #13
 800cf6a:	d1e9      	bne.n	800cf40 <read_submessage_info+0x3c>
 800cf6c:	a98a      	add	r1, sp, #552	@ 0x228
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f006 fed0 	bl	8013d14 <ucdr_deserialize_int16_t>
 800cf74:	b140      	cbz	r0, 800cf88 <read_submessage_info+0x84>
 800cf76:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	dd07      	ble.n	800cf8e <read_submessage_info+0x8a>
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	bf14      	ite	ne
 800cf84:	2001      	movne	r0, #1
 800cf86:	2002      	moveq	r0, #2
 800cf88:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800cf8c:	e7d8      	b.n	800cf40 <read_submessage_info+0x3c>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e7fa      	b.n	800cf88 <read_submessage_info+0x84>
 800cf92:	bf00      	nop

0800cf94 <read_submessage_list>:
 800cf94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf98:	b097      	sub	sp, #92	@ 0x5c
 800cf9a:	4ec1      	ldr	r6, [pc, #772]	@ (800d2a0 <read_submessage_list+0x30c>)
 800cf9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	f04f 0801 	mov.w	r8, #1
 800cfa6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800cfaa:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfac:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f000 fff7 	bl	800dfa4 <uxr_read_submessage_header>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f000 813e 	beq.w	800d238 <read_submessage_list+0x2a4>
 800cfbc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800cfc0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800cfc4:	3b02      	subs	r3, #2
 800cfc6:	2b0d      	cmp	r3, #13
 800cfc8:	d8ed      	bhi.n	800cfa6 <read_submessage_list+0x12>
 800cfca:	a101      	add	r1, pc, #4	@ (adr r1, 800cfd0 <read_submessage_list+0x3c>)
 800cfcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfd0:	0800d22f 	.word	0x0800d22f
 800cfd4:	0800cfa7 	.word	0x0800cfa7
 800cfd8:	0800d21f 	.word	0x0800d21f
 800cfdc:	0800d1bd 	.word	0x0800d1bd
 800cfe0:	0800d1b3 	.word	0x0800d1b3
 800cfe4:	0800cfa7 	.word	0x0800cfa7
 800cfe8:	0800cfa7 	.word	0x0800cfa7
 800cfec:	0800d113 	.word	0x0800d113
 800cff0:	0800d0a3 	.word	0x0800d0a3
 800cff4:	0800d063 	.word	0x0800d063
 800cff8:	0800cfa7 	.word	0x0800cfa7
 800cffc:	0800cfa7 	.word	0x0800cfa7
 800d000:	0800cfa7 	.word	0x0800cfa7
 800d004:	0800d009 	.word	0x0800d009
 800d008:	a910      	add	r1, sp, #64	@ 0x40
 800d00a:	4628      	mov	r0, r5
 800d00c:	f002 f9bc 	bl	800f388 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d010:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d014:	f1b9 0f00 	cmp.w	r9, #0
 800d018:	f000 8116 	beq.w	800d248 <read_submessage_list+0x2b4>
 800d01c:	f001 f808 	bl	800e030 <uxr_nanos>
 800d020:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d022:	4602      	mov	r2, r0
 800d024:	460b      	mov	r3, r1
 800d026:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d028:	2100      	movs	r1, #0
 800d02a:	468c      	mov	ip, r1
 800d02c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d030:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d034:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d036:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d038:	468c      	mov	ip, r1
 800d03a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d03e:	46e2      	mov	sl, ip
 800d040:	46bc      	mov	ip, r7
 800d042:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d046:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d04a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d04e:	e9cd 7100 	strd	r7, r1, [sp]
 800d052:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d056:	9106      	str	r1, [sp, #24]
 800d058:	4620      	mov	r0, r4
 800d05a:	47c8      	blx	r9
 800d05c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d060:	e7a1      	b.n	800cfa6 <read_submessage_list+0x12>
 800d062:	a910      	add	r1, sp, #64	@ 0x40
 800d064:	4628      	mov	r0, r5
 800d066:	f002 f97d 	bl	800f364 <uxr_deserialize_HEARTBEAT_Payload>
 800d06a:	2100      	movs	r1, #0
 800d06c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d070:	f000 fe70 	bl	800dd54 <uxr_stream_id_from_raw>
 800d074:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d078:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d07a:	4639      	mov	r1, r7
 800d07c:	f104 0008 	add.w	r0, r4, #8
 800d080:	f000 ff56 	bl	800df30 <uxr_get_input_reliable_stream>
 800d084:	2800      	cmp	r0, #0
 800d086:	d08e      	beq.n	800cfa6 <read_submessage_list+0x12>
 800d088:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d08c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d090:	f007 fa4c 	bl	801452c <uxr_process_heartbeat>
 800d094:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d098:	463a      	mov	r2, r7
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7ff fdf6 	bl	800cc8c <write_submessage_acknack.isra.0>
 800d0a0:	e781      	b.n	800cfa6 <read_submessage_list+0x12>
 800d0a2:	a910      	add	r1, sp, #64	@ 0x40
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f002 f935 	bl	800f314 <uxr_deserialize_ACKNACK_Payload>
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d0b0:	f000 fe50 	bl	800dd54 <uxr_stream_id_from_raw>
 800d0b4:	900d      	str	r0, [sp, #52]	@ 0x34
 800d0b6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d0ba:	f104 0008 	add.w	r0, r4, #8
 800d0be:	f000 ff23 	bl	800df08 <uxr_get_output_reliable_stream>
 800d0c2:	4607      	mov	r7, r0
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	f43f af6e 	beq.w	800cfa6 <read_submessage_list+0x12>
 800d0ca:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d0ce:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d0d2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d0d6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d0da:	b289      	uxth	r1, r1
 800d0dc:	f007 fd80 	bl	8014be0 <uxr_process_acknack>
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f007 fd3d 	bl	8014b60 <uxr_begin_output_nack_buffer_it>
 800d0e6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d0ea:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d0ee:	e006      	b.n	800d0fe <read_submessage_list+0x16a>
 800d0f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d0f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d0f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	47c8      	blx	r9
 800d0fe:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d102:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d104:	4651      	mov	r1, sl
 800d106:	4638      	mov	r0, r7
 800d108:	f007 fd2c 	bl	8014b64 <uxr_next_reliable_nack_buffer_to_send>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d1ef      	bne.n	800d0f0 <read_submessage_list+0x15c>
 800d110:	e749      	b.n	800cfa6 <read_submessage_list+0x12>
 800d112:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d116:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d11a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d11e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d122:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d126:	4651      	mov	r1, sl
 800d128:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d12c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d130:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d134:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d138:	4628      	mov	r0, r5
 800d13a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d13e:	f001 fe49 	bl	800edd4 <uxr_deserialize_BaseObjectRequest>
 800d142:	4650      	mov	r0, sl
 800d144:	a90f      	add	r1, sp, #60	@ 0x3c
 800d146:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d14a:	f000 fdc7 	bl	800dcdc <uxr_parse_base_object_request>
 800d14e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d152:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d154:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d158:	9110      	str	r1, [sp, #64]	@ 0x40
 800d15a:	3f04      	subs	r7, #4
 800d15c:	f009 090e 	and.w	r9, r9, #14
 800d160:	b2bf      	uxth	r7, r7
 800d162:	f1bb 0f00 	cmp.w	fp, #0
 800d166:	d006      	beq.n	800d176 <read_submessage_list+0x1e2>
 800d168:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	4652      	mov	r2, sl
 800d170:	2300      	movs	r3, #0
 800d172:	4620      	mov	r0, r4
 800d174:	47d8      	blx	fp
 800d176:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d178:	b16a      	cbz	r2, 800d196 <read_submessage_list+0x202>
 800d17a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d17c:	2100      	movs	r1, #0
 800d17e:	3802      	subs	r0, #2
 800d180:	e002      	b.n	800d188 <read_submessage_list+0x1f4>
 800d182:	3101      	adds	r1, #1
 800d184:	4291      	cmp	r1, r2
 800d186:	d006      	beq.n	800d196 <read_submessage_list+0x202>
 800d188:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d18c:	4553      	cmp	r3, sl
 800d18e:	d1f8      	bne.n	800d182 <read_submessage_list+0x1ee>
 800d190:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d192:	2200      	movs	r2, #0
 800d194:	545a      	strb	r2, [r3, r1]
 800d196:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d19a:	9102      	str	r1, [sp, #8]
 800d19c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d19e:	9101      	str	r1, [sp, #4]
 800d1a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d1a2:	9100      	str	r1, [sp, #0]
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4629      	mov	r1, r5
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f7ff fc4c 	bl	800ca48 <read_submessage_format>
 800d1b0:	e6f9      	b.n	800cfa6 <read_submessage_list+0x12>
 800d1b2:	4629      	mov	r1, r5
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7ff fea5 	bl	800cf04 <read_submessage_info>
 800d1ba:	e6f4      	b.n	800cfa6 <read_submessage_list+0x12>
 800d1bc:	2a00      	cmp	r2, #0
 800d1be:	d03e      	beq.n	800d23e <read_submessage_list+0x2aa>
 800d1c0:	a910      	add	r1, sp, #64	@ 0x40
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f002 f802 	bl	800f1cc <uxr_deserialize_STATUS_Payload>
 800d1c8:	a90e      	add	r1, sp, #56	@ 0x38
 800d1ca:	aa0d      	add	r2, sp, #52	@ 0x34
 800d1cc:	a810      	add	r0, sp, #64	@ 0x40
 800d1ce:	f000 fd85 	bl	800dcdc <uxr_parse_base_object_request>
 800d1d2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d1d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d1d8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d1dc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d1e0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d1e2:	f1ba 0f00 	cmp.w	sl, #0
 800d1e6:	d006      	beq.n	800d1f6 <read_submessage_list+0x262>
 800d1e8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	463a      	mov	r2, r7
 800d1f0:	464b      	mov	r3, r9
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	47d0      	blx	sl
 800d1f6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	f43f aed4 	beq.w	800cfa6 <read_submessage_list+0x12>
 800d1fe:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d200:	2100      	movs	r1, #0
 800d202:	3802      	subs	r0, #2
 800d204:	e003      	b.n	800d20e <read_submessage_list+0x27a>
 800d206:	3101      	adds	r1, #1
 800d208:	4291      	cmp	r1, r2
 800d20a:	f43f aecc 	beq.w	800cfa6 <read_submessage_list+0x12>
 800d20e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d212:	42bb      	cmp	r3, r7
 800d214:	d1f7      	bne.n	800d206 <read_submessage_list+0x272>
 800d216:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d218:	f803 9001 	strb.w	r9, [r3, r1]
 800d21c:	e6c3      	b.n	800cfa6 <read_submessage_list+0x12>
 800d21e:	2a00      	cmp	r2, #0
 800d220:	f47f aec1 	bne.w	800cfa6 <read_submessage_list+0x12>
 800d224:	4629      	mov	r1, r5
 800d226:	4620      	mov	r0, r4
 800d228:	f000 fc9e 	bl	800db68 <uxr_read_create_session_status>
 800d22c:	e6bb      	b.n	800cfa6 <read_submessage_list+0x12>
 800d22e:	4629      	mov	r1, r5
 800d230:	4620      	mov	r0, r4
 800d232:	f7ff fcf5 	bl	800cc20 <read_submessage_get_info>
 800d236:	e6b6      	b.n	800cfa6 <read_submessage_list+0x12>
 800d238:	b017      	add	sp, #92	@ 0x5c
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	4629      	mov	r1, r5
 800d240:	4620      	mov	r0, r4
 800d242:	f000 fc9d 	bl	800db80 <uxr_read_delete_session_status>
 800d246:	e6ae      	b.n	800cfa6 <read_submessage_list+0x12>
 800d248:	f000 fef2 	bl	800e030 <uxr_nanos>
 800d24c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d24e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d250:	464f      	mov	r7, r9
 800d252:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d256:	1812      	adds	r2, r2, r0
 800d258:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d25a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d25c:	eb47 0101 	adc.w	r1, r7, r1
 800d260:	464f      	mov	r7, r9
 800d262:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d266:	463b      	mov	r3, r7
 800d268:	4684      	mov	ip, r0
 800d26a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d26e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d272:	eb1c 0c00 	adds.w	ip, ip, r0
 800d276:	464f      	mov	r7, r9
 800d278:	eb43 0307 	adc.w	r3, r3, r7
 800d27c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d280:	eb61 0303 	sbc.w	r3, r1, r3
 800d284:	0fda      	lsrs	r2, r3, #31
 800d286:	eb12 020c 	adds.w	r2, r2, ip
 800d28a:	f143 0300 	adc.w	r3, r3, #0
 800d28e:	0852      	lsrs	r2, r2, #1
 800d290:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d294:	105b      	asrs	r3, r3, #1
 800d296:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d29a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d29e:	e6dd      	b.n	800d05c <read_submessage_list+0xc8>
 800d2a0:	3b9aca00 	.word	0x3b9aca00

0800d2a4 <listen_message_reliably>:
 800d2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a8:	1e0b      	subs	r3, r1, #0
 800d2aa:	b09d      	sub	sp, #116	@ 0x74
 800d2ac:	bfb8      	it	lt
 800d2ae:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d2b2:	4680      	mov	r8, r0
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	f000 fea1 	bl	800dffc <uxr_millis>
 800d2ba:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d2be:	4681      	mov	r9, r0
 800d2c0:	2a00      	cmp	r2, #0
 800d2c2:	f000 80a1 	beq.w	800d408 <listen_message_reliably+0x164>
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d2cc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d2d0:	9303      	str	r3, [sp, #12]
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	460f      	mov	r7, r1
 800d2d6:	e00f      	b.n	800d2f8 <listen_message_reliably+0x54>
 800d2d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d2dc:	9903      	ldr	r1, [sp, #12]
 800d2de:	455a      	cmp	r2, fp
 800d2e0:	f106 0601 	add.w	r6, r6, #1
 800d2e4:	eb73 0101 	sbcs.w	r1, r3, r1
 800d2e8:	b2f0      	uxtb	r0, r6
 800d2ea:	da01      	bge.n	800d2f0 <listen_message_reliably+0x4c>
 800d2ec:	4693      	mov	fp, r2
 800d2ee:	9303      	str	r3, [sp, #12]
 800d2f0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d2f4:	4283      	cmp	r3, r0
 800d2f6:	d960      	bls.n	800d3ba <listen_message_reliably+0x116>
 800d2f8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d2fc:	2102      	movs	r1, #2
 800d2fe:	2201      	movs	r2, #1
 800d300:	f000 fcfe 	bl	800dd00 <uxr_stream_id>
 800d304:	00e4      	lsls	r4, r4, #3
 800d306:	f104 0520 	add.w	r5, r4, #32
 800d30a:	4445      	add	r5, r8
 800d30c:	4601      	mov	r1, r0
 800d30e:	463b      	mov	r3, r7
 800d310:	464a      	mov	r2, r9
 800d312:	4628      	mov	r0, r5
 800d314:	9109      	str	r1, [sp, #36]	@ 0x24
 800d316:	f007 fbf9 	bl	8014b0c <uxr_update_output_stream_heartbeat_timestamp>
 800d31a:	eb08 0304 	add.w	r3, r8, r4
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0da      	beq.n	800d2d8 <listen_message_reliably+0x34>
 800d322:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d326:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d32a:	9304      	str	r3, [sp, #16]
 800d32c:	4640      	mov	r0, r8
 800d32e:	f000 fcaf 	bl	800dc90 <uxr_session_header_offset>
 800d332:	3501      	adds	r5, #1
 800d334:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d338:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d33c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d340:	2300      	movs	r3, #0
 800d342:	2211      	movs	r2, #17
 800d344:	9000      	str	r0, [sp, #0]
 800d346:	a90c      	add	r1, sp, #48	@ 0x30
 800d348:	4650      	mov	r0, sl
 800d34a:	f7ff f80b 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800d34e:	2300      	movs	r3, #0
 800d350:	2205      	movs	r2, #5
 800d352:	210b      	movs	r1, #11
 800d354:	4650      	mov	r0, sl
 800d356:	f000 fe0b 	bl	800df70 <uxr_buffer_submessage_header>
 800d35a:	8968      	ldrh	r0, [r5, #10]
 800d35c:	2101      	movs	r1, #1
 800d35e:	f007 fc97 	bl	8014c90 <uxr_seq_num_add>
 800d362:	892b      	ldrh	r3, [r5, #8]
 800d364:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d368:	4602      	mov	r2, r0
 800d36a:	9b04      	ldr	r3, [sp, #16]
 800d36c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d370:	a90a      	add	r1, sp, #40	@ 0x28
 800d372:	4650      	mov	r0, sl
 800d374:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d378:	f001 ffe0 	bl	800f33c <uxr_serialize_HEARTBEAT_Payload>
 800d37c:	2200      	movs	r2, #0
 800d37e:	4611      	mov	r1, r2
 800d380:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d382:	4640      	mov	r0, r8
 800d384:	f000 fc2e 	bl	800dbe4 <uxr_stamp_session_header>
 800d388:	4650      	mov	r0, sl
 800d38a:	f7ff f829 	bl	800c3e0 <ucdr_buffer_length>
 800d38e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d392:	4602      	mov	r2, r0
 800d394:	a90c      	add	r1, sp, #48	@ 0x30
 800d396:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d39a:	4444      	add	r4, r8
 800d39c:	47a8      	blx	r5
 800d39e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d3a2:	9903      	ldr	r1, [sp, #12]
 800d3a4:	455a      	cmp	r2, fp
 800d3a6:	f106 0601 	add.w	r6, r6, #1
 800d3aa:	eb73 0101 	sbcs.w	r1, r3, r1
 800d3ae:	b2f0      	uxtb	r0, r6
 800d3b0:	db9c      	blt.n	800d2ec <listen_message_reliably+0x48>
 800d3b2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d3b6:	4283      	cmp	r3, r0
 800d3b8:	d89e      	bhi.n	800d2f8 <listen_message_reliably+0x54>
 800d3ba:	9a03      	ldr	r2, [sp, #12]
 800d3bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	bf08      	it	eq
 800d3c4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800d3c8:	d01e      	beq.n	800d408 <listen_message_reliably+0x164>
 800d3ca:	ebab 0309 	sub.w	r3, fp, r9
 800d3ce:	9905      	ldr	r1, [sp, #20]
 800d3d0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	bf08      	it	eq
 800d3d8:	2301      	moveq	r3, #1
 800d3da:	4299      	cmp	r1, r3
 800d3dc:	bfa8      	it	ge
 800d3de:	4619      	movge	r1, r3
 800d3e0:	6894      	ldr	r4, [r2, #8]
 800d3e2:	6810      	ldr	r0, [r2, #0]
 800d3e4:	4689      	mov	r9, r1
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	aa08      	add	r2, sp, #32
 800d3ea:	a907      	add	r1, sp, #28
 800d3ec:	47a0      	blx	r4
 800d3ee:	b968      	cbnz	r0, 800d40c <listen_message_reliably+0x168>
 800d3f0:	9b05      	ldr	r3, [sp, #20]
 800d3f2:	eba3 0309 	sub.w	r3, r3, r9
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	9305      	str	r3, [sp, #20]
 800d3fa:	f73f af5c 	bgt.w	800d2b6 <listen_message_reliably+0x12>
 800d3fe:	4604      	mov	r4, r0
 800d400:	4620      	mov	r0, r4
 800d402:	b01d      	add	sp, #116	@ 0x74
 800d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d408:	9b05      	ldr	r3, [sp, #20]
 800d40a:	e7e0      	b.n	800d3ce <listen_message_reliably+0x12a>
 800d40c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d410:	4604      	mov	r4, r0
 800d412:	a80c      	add	r0, sp, #48	@ 0x30
 800d414:	f7fe ffb8 	bl	800c388 <ucdr_init_buffer>
 800d418:	2500      	movs	r5, #0
 800d41a:	f10d 031a 	add.w	r3, sp, #26
 800d41e:	aa06      	add	r2, sp, #24
 800d420:	a90c      	add	r1, sp, #48	@ 0x30
 800d422:	4640      	mov	r0, r8
 800d424:	f88d 5018 	strb.w	r5, [sp, #24]
 800d428:	f000 fbf0 	bl	800dc0c <uxr_read_session_header>
 800d42c:	b918      	cbnz	r0, 800d436 <listen_message_reliably+0x192>
 800d42e:	4620      	mov	r0, r4
 800d430:	b01d      	add	sp, #116	@ 0x74
 800d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d436:	4629      	mov	r1, r5
 800d438:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d43c:	f000 fc8a 	bl	800dd54 <uxr_stream_id_from_raw>
 800d440:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d444:	2d01      	cmp	r5, #1
 800d446:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d44a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d44e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d452:	d04b      	beq.n	800d4ec <listen_message_reliably+0x248>
 800d454:	2d02      	cmp	r5, #2
 800d456:	d00f      	beq.n	800d478 <listen_message_reliably+0x1d4>
 800d458:	2d00      	cmp	r5, #0
 800d45a:	d1e8      	bne.n	800d42e <listen_message_reliably+0x18a>
 800d45c:	4629      	mov	r1, r5
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 fc78 	bl	800dd54 <uxr_stream_id_from_raw>
 800d464:	a90c      	add	r1, sp, #48	@ 0x30
 800d466:	4602      	mov	r2, r0
 800d468:	4640      	mov	r0, r8
 800d46a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d46c:	f7ff fd92 	bl	800cf94 <read_submessage_list>
 800d470:	4620      	mov	r0, r4
 800d472:	b01d      	add	sp, #116	@ 0x74
 800d474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d478:	4631      	mov	r1, r6
 800d47a:	f108 0008 	add.w	r0, r8, #8
 800d47e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d482:	f000 fd55 	bl	800df30 <uxr_get_input_reliable_stream>
 800d486:	4607      	mov	r7, r0
 800d488:	b338      	cbz	r0, 800d4da <listen_message_reliably+0x236>
 800d48a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d48c:	9203      	str	r2, [sp, #12]
 800d48e:	a80c      	add	r0, sp, #48	@ 0x30
 800d490:	f7fe ffaa 	bl	800c3e8 <ucdr_buffer_remaining>
 800d494:	4603      	mov	r3, r0
 800d496:	f10d 0019 	add.w	r0, sp, #25
 800d49a:	9000      	str	r0, [sp, #0]
 800d49c:	9a03      	ldr	r2, [sp, #12]
 800d49e:	4651      	mov	r1, sl
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f006 ff49 	bl	8014338 <uxr_receive_reliable_message>
 800d4a6:	b1c0      	cbz	r0, 800d4da <listen_message_reliably+0x236>
 800d4a8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d4ac:	b393      	cbz	r3, 800d514 <listen_message_reliably+0x270>
 800d4ae:	ad14      	add	r5, sp, #80	@ 0x50
 800d4b0:	f04f 0a02 	mov.w	sl, #2
 800d4b4:	e00a      	b.n	800d4cc <listen_message_reliably+0x228>
 800d4b6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d4ba:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d4be:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d4c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	f7ff fd64 	bl	800cf94 <read_submessage_list>
 800d4cc:	2204      	movs	r2, #4
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4638      	mov	r0, r7
 800d4d2:	f006 ffb1 	bl	8014438 <uxr_next_input_reliable_buffer_available>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d1ed      	bne.n	800d4b6 <listen_message_reliably+0x212>
 800d4da:	4640      	mov	r0, r8
 800d4dc:	4632      	mov	r2, r6
 800d4de:	4649      	mov	r1, r9
 800d4e0:	f7ff fbd4 	bl	800cc8c <write_submessage_acknack.isra.0>
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	b01d      	add	sp, #116	@ 0x74
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	f108 0008 	add.w	r0, r8, #8
 800d4f2:	f000 fd13 	bl	800df1c <uxr_get_input_best_effort_stream>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d099      	beq.n	800d42e <listen_message_reliably+0x18a>
 800d4fa:	4651      	mov	r1, sl
 800d4fc:	f006 fe88 	bl	8014210 <uxr_receive_best_effort_message>
 800d500:	2800      	cmp	r0, #0
 800d502:	d094      	beq.n	800d42e <listen_message_reliably+0x18a>
 800d504:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d508:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d50a:	a90c      	add	r1, sp, #48	@ 0x30
 800d50c:	4640      	mov	r0, r8
 800d50e:	f7ff fd41 	bl	800cf94 <read_submessage_list>
 800d512:	e78c      	b.n	800d42e <listen_message_reliably+0x18a>
 800d514:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800d518:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d51a:	a90c      	add	r1, sp, #48	@ 0x30
 800d51c:	4640      	mov	r0, r8
 800d51e:	f7ff fd39 	bl	800cf94 <read_submessage_list>
 800d522:	e7c4      	b.n	800d4ae <listen_message_reliably+0x20a>

0800d524 <uxr_run_session_timeout>:
 800d524:	b570      	push	{r4, r5, r6, lr}
 800d526:	4604      	mov	r4, r0
 800d528:	460d      	mov	r5, r1
 800d52a:	f000 fd67 	bl	800dffc <uxr_millis>
 800d52e:	4606      	mov	r6, r0
 800d530:	4620      	mov	r0, r4
 800d532:	f7ff fc71 	bl	800ce18 <uxr_flash_output_streams>
 800d536:	4629      	mov	r1, r5
 800d538:	4620      	mov	r0, r4
 800d53a:	f7ff feb3 	bl	800d2a4 <listen_message_reliably>
 800d53e:	f000 fd5d 	bl	800dffc <uxr_millis>
 800d542:	1b83      	subs	r3, r0, r6
 800d544:	1ae9      	subs	r1, r5, r3
 800d546:	2900      	cmp	r1, #0
 800d548:	dcf6      	bgt.n	800d538 <uxr_run_session_timeout+0x14>
 800d54a:	f104 0008 	add.w	r0, r4, #8
 800d54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d552:	f000 bcf7 	b.w	800df44 <uxr_output_streams_confirmed>
 800d556:	bf00      	nop

0800d558 <uxr_run_session_until_data>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	f000 fd4d 	bl	800dffc <uxr_millis>
 800d562:	4606      	mov	r6, r0
 800d564:	4620      	mov	r0, r4
 800d566:	f7ff fc57 	bl	800ce18 <uxr_flash_output_streams>
 800d56a:	2300      	movs	r3, #0
 800d56c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800d570:	4629      	mov	r1, r5
 800d572:	e005      	b.n	800d580 <uxr_run_session_until_data+0x28>
 800d574:	f000 fd42 	bl	800dffc <uxr_millis>
 800d578:	1b83      	subs	r3, r0, r6
 800d57a:	1ae9      	subs	r1, r5, r3
 800d57c:	2900      	cmp	r1, #0
 800d57e:	dd07      	ble.n	800d590 <uxr_run_session_until_data+0x38>
 800d580:	4620      	mov	r0, r4
 800d582:	f7ff fe8f 	bl	800d2a4 <listen_message_reliably>
 800d586:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d0f2      	beq.n	800d574 <uxr_run_session_until_data+0x1c>
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800d594:	bd70      	pop	{r4, r5, r6, pc}
 800d596:	bf00      	nop

0800d598 <uxr_run_session_until_confirm_delivery>:
 800d598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d59c:	4606      	mov	r6, r0
 800d59e:	460d      	mov	r5, r1
 800d5a0:	f000 fd2c 	bl	800dffc <uxr_millis>
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f7ff fc36 	bl	800ce18 <uxr_flash_output_streams>
 800d5ac:	2d00      	cmp	r5, #0
 800d5ae:	f106 0808 	add.w	r8, r6, #8
 800d5b2:	bfa8      	it	ge
 800d5b4:	462c      	movge	r4, r5
 800d5b6:	da07      	bge.n	800d5c8 <uxr_run_session_until_confirm_delivery+0x30>
 800d5b8:	e00e      	b.n	800d5d8 <uxr_run_session_until_confirm_delivery+0x40>
 800d5ba:	f7ff fe73 	bl	800d2a4 <listen_message_reliably>
 800d5be:	f000 fd1d 	bl	800dffc <uxr_millis>
 800d5c2:	1bc3      	subs	r3, r0, r7
 800d5c4:	1aec      	subs	r4, r5, r3
 800d5c6:	d407      	bmi.n	800d5d8 <uxr_run_session_until_confirm_delivery+0x40>
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	f000 fcbb 	bl	800df44 <uxr_output_streams_confirmed>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d0f0      	beq.n	800d5ba <uxr_run_session_until_confirm_delivery+0x22>
 800d5d8:	4640      	mov	r0, r8
 800d5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5de:	f000 bcb1 	b.w	800df44 <uxr_output_streams_confirmed>
 800d5e2:	bf00      	nop

0800d5e4 <uxr_run_session_until_all_status>:
 800d5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e8:	9c08      	ldr	r4, [sp, #32]
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	4691      	mov	r9, r2
 800d5f0:	461d      	mov	r5, r3
 800d5f2:	f7ff fc11 	bl	800ce18 <uxr_flash_output_streams>
 800d5f6:	b124      	cbz	r4, 800d602 <uxr_run_session_until_all_status+0x1e>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	21ff      	movs	r1, #255	@ 0xff
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f009 fd67 	bl	80170d0 <memset>
 800d602:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800d606:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d608:	f000 fcf8 	bl	800dffc <uxr_millis>
 800d60c:	3d01      	subs	r5, #1
 800d60e:	f1a9 0902 	sub.w	r9, r9, #2
 800d612:	4680      	mov	r8, r0
 800d614:	4639      	mov	r1, r7
 800d616:	4630      	mov	r0, r6
 800d618:	f7ff fe44 	bl	800d2a4 <listen_message_reliably>
 800d61c:	f000 fcee 	bl	800dffc <uxr_millis>
 800d620:	eba0 0008 	sub.w	r0, r0, r8
 800d624:	1a39      	subs	r1, r7, r0
 800d626:	b344      	cbz	r4, 800d67a <uxr_run_session_until_all_status+0x96>
 800d628:	4628      	mov	r0, r5
 800d62a:	46ac      	mov	ip, r5
 800d62c:	2301      	movs	r3, #1
 800d62e:	e002      	b.n	800d636 <uxr_run_session_until_all_status+0x52>
 800d630:	42a3      	cmp	r3, r4
 800d632:	d20d      	bcs.n	800d650 <uxr_run_session_until_all_status+0x6c>
 800d634:	3301      	adds	r3, #1
 800d636:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800d63a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800d63e:	d1f7      	bne.n	800d630 <uxr_run_session_until_all_status+0x4c>
 800d640:	42a3      	cmp	r3, r4
 800d642:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800d646:	d213      	bcs.n	800d670 <uxr_run_session_until_all_status+0x8c>
 800d648:	2a00      	cmp	r2, #0
 800d64a:	d0f3      	beq.n	800d634 <uxr_run_session_until_all_status+0x50>
 800d64c:	2900      	cmp	r1, #0
 800d64e:	dce2      	bgt.n	800d616 <uxr_run_session_until_all_status+0x32>
 800d650:	2300      	movs	r3, #0
 800d652:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800d654:	442c      	add	r4, r5
 800d656:	e001      	b.n	800d65c <uxr_run_session_until_all_status+0x78>
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d812      	bhi.n	800d682 <uxr_run_session_until_all_status+0x9e>
 800d65c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d660:	4284      	cmp	r4, r0
 800d662:	d1f9      	bne.n	800d658 <uxr_run_session_until_all_status+0x74>
 800d664:	2b01      	cmp	r3, #1
 800d666:	bf8c      	ite	hi
 800d668:	2000      	movhi	r0, #0
 800d66a:	2001      	movls	r0, #1
 800d66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d670:	2900      	cmp	r1, #0
 800d672:	dded      	ble.n	800d650 <uxr_run_session_until_all_status+0x6c>
 800d674:	2a00      	cmp	r2, #0
 800d676:	d1ce      	bne.n	800d616 <uxr_run_session_until_all_status+0x32>
 800d678:	e7ea      	b.n	800d650 <uxr_run_session_until_all_status+0x6c>
 800d67a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800d67c:	2001      	movs	r0, #1
 800d67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d682:	2000      	movs	r0, #0
 800d684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d688 <wait_session_status>:
 800d688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d68c:	4604      	mov	r4, r0
 800d68e:	b09d      	sub	sp, #116	@ 0x74
 800d690:	20ff      	movs	r0, #255	@ 0xff
 800d692:	7160      	strb	r0, [r4, #5]
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 80b6 	beq.w	800d808 <wait_session_status+0x180>
 800d69c:	468a      	mov	sl, r1
 800d69e:	4691      	mov	r9, r2
 800d6a0:	f04f 0b00 	mov.w	fp, #0
 800d6a4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d6a6:	464a      	mov	r2, r9
 800d6a8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d6ac:	4651      	mov	r1, sl
 800d6ae:	47a8      	blx	r5
 800d6b0:	f000 fca4 	bl	800dffc <uxr_millis>
 800d6b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	e009      	b.n	800d6d0 <wait_session_status+0x48>
 800d6bc:	f000 fc9e 	bl	800dffc <uxr_millis>
 800d6c0:	1b40      	subs	r0, r0, r5
 800d6c2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	dd40      	ble.n	800d74c <wait_session_status+0xc4>
 800d6ca:	7960      	ldrb	r0, [r4, #5]
 800d6cc:	28ff      	cmp	r0, #255	@ 0xff
 800d6ce:	d145      	bne.n	800d75c <wait_session_status+0xd4>
 800d6d0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d6d2:	a908      	add	r1, sp, #32
 800d6d4:	6896      	ldr	r6, [r2, #8]
 800d6d6:	6810      	ldr	r0, [r2, #0]
 800d6d8:	aa09      	add	r2, sp, #36	@ 0x24
 800d6da:	47b0      	blx	r6
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d0ed      	beq.n	800d6bc <wait_session_status+0x34>
 800d6e0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d6e4:	a80c      	add	r0, sp, #48	@ 0x30
 800d6e6:	f7fe fe4f 	bl	800c388 <ucdr_init_buffer>
 800d6ea:	2600      	movs	r6, #0
 800d6ec:	f10d 031e 	add.w	r3, sp, #30
 800d6f0:	aa07      	add	r2, sp, #28
 800d6f2:	a90c      	add	r1, sp, #48	@ 0x30
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f88d 601c 	strb.w	r6, [sp, #28]
 800d6fa:	f000 fa87 	bl	800dc0c <uxr_read_session_header>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d0dc      	beq.n	800d6bc <wait_session_status+0x34>
 800d702:	4631      	mov	r1, r6
 800d704:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d708:	f000 fb24 	bl	800dd54 <uxr_stream_id_from_raw>
 800d70c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d710:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d714:	9302      	str	r3, [sp, #8]
 800d716:	2f01      	cmp	r7, #1
 800d718:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d71c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d720:	d05c      	beq.n	800d7dc <wait_session_status+0x154>
 800d722:	2f02      	cmp	r7, #2
 800d724:	d020      	beq.n	800d768 <wait_session_status+0xe0>
 800d726:	2f00      	cmp	r7, #0
 800d728:	d1c8      	bne.n	800d6bc <wait_session_status+0x34>
 800d72a:	4639      	mov	r1, r7
 800d72c:	4638      	mov	r0, r7
 800d72e:	f000 fb11 	bl	800dd54 <uxr_stream_id_from_raw>
 800d732:	a90c      	add	r1, sp, #48	@ 0x30
 800d734:	4602      	mov	r2, r0
 800d736:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d738:	4620      	mov	r0, r4
 800d73a:	f7ff fc2b 	bl	800cf94 <read_submessage_list>
 800d73e:	f000 fc5d 	bl	800dffc <uxr_millis>
 800d742:	1b40      	subs	r0, r0, r5
 800d744:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d748:	2b00      	cmp	r3, #0
 800d74a:	dcbe      	bgt.n	800d6ca <wait_session_status+0x42>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	7960      	ldrb	r0, [r4, #5]
 800d750:	f10b 0b01 	add.w	fp, fp, #1
 800d754:	455b      	cmp	r3, fp
 800d756:	d001      	beq.n	800d75c <wait_session_status+0xd4>
 800d758:	28ff      	cmp	r0, #255	@ 0xff
 800d75a:	d0a3      	beq.n	800d6a4 <wait_session_status+0x1c>
 800d75c:	38ff      	subs	r0, #255	@ 0xff
 800d75e:	bf18      	it	ne
 800d760:	2001      	movne	r0, #1
 800d762:	b01d      	add	sp, #116	@ 0x74
 800d764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d768:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d76c:	9304      	str	r3, [sp, #16]
 800d76e:	4631      	mov	r1, r6
 800d770:	f104 0008 	add.w	r0, r4, #8
 800d774:	f000 fbdc 	bl	800df30 <uxr_get_input_reliable_stream>
 800d778:	4680      	mov	r8, r0
 800d77a:	b348      	cbz	r0, 800d7d0 <wait_session_status+0x148>
 800d77c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d77e:	9205      	str	r2, [sp, #20]
 800d780:	a80c      	add	r0, sp, #48	@ 0x30
 800d782:	f7fe fe31 	bl	800c3e8 <ucdr_buffer_remaining>
 800d786:	4603      	mov	r3, r0
 800d788:	f10d 001d 	add.w	r0, sp, #29
 800d78c:	9000      	str	r0, [sp, #0]
 800d78e:	9a05      	ldr	r2, [sp, #20]
 800d790:	9902      	ldr	r1, [sp, #8]
 800d792:	4640      	mov	r0, r8
 800d794:	f006 fdd0 	bl	8014338 <uxr_receive_reliable_message>
 800d798:	b1d0      	cbz	r0, 800d7d0 <wait_session_status+0x148>
 800d79a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d03a      	beq.n	800d818 <wait_session_status+0x190>
 800d7a2:	9f04      	ldr	r7, [sp, #16]
 800d7a4:	e00a      	b.n	800d7bc <wait_session_status+0x134>
 800d7a6:	f04f 0302 	mov.w	r3, #2
 800d7aa:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d7ae:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d7b2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d7b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7b8:	f7ff fbec 	bl	800cf94 <read_submessage_list>
 800d7bc:	a914      	add	r1, sp, #80	@ 0x50
 800d7be:	2204      	movs	r2, #4
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	f006 fe39 	bl	8014438 <uxr_next_input_reliable_buffer_available>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	a914      	add	r1, sp, #80	@ 0x50
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1ea      	bne.n	800d7a6 <wait_session_status+0x11e>
 800d7d0:	9904      	ldr	r1, [sp, #16]
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	4620      	mov	r0, r4
 800d7d6:	f7ff fa59 	bl	800cc8c <write_submessage_acknack.isra.0>
 800d7da:	e76f      	b.n	800d6bc <wait_session_status+0x34>
 800d7dc:	4631      	mov	r1, r6
 800d7de:	f104 0008 	add.w	r0, r4, #8
 800d7e2:	f000 fb9b 	bl	800df1c <uxr_get_input_best_effort_stream>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f43f af68 	beq.w	800d6bc <wait_session_status+0x34>
 800d7ec:	9902      	ldr	r1, [sp, #8]
 800d7ee:	f006 fd0f 	bl	8014210 <uxr_receive_best_effort_message>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f43f af62 	beq.w	800d6bc <wait_session_status+0x34>
 800d7f8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d7fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d7fe:	a90c      	add	r1, sp, #48	@ 0x30
 800d800:	4620      	mov	r0, r4
 800d802:	f7ff fbc7 	bl	800cf94 <read_submessage_list>
 800d806:	e759      	b.n	800d6bc <wait_session_status+0x34>
 800d808:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d80a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d80e:	47a0      	blx	r4
 800d810:	2001      	movs	r0, #1
 800d812:	b01d      	add	sp, #116	@ 0x74
 800d814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d818:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d81c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d81e:	a90c      	add	r1, sp, #48	@ 0x30
 800d820:	4620      	mov	r0, r4
 800d822:	f7ff fbb7 	bl	800cf94 <read_submessage_list>
 800d826:	e7bc      	b.n	800d7a2 <wait_session_status+0x11a>

0800d828 <uxr_delete_session_retries>:
 800d828:	b530      	push	{r4, r5, lr}
 800d82a:	b08f      	sub	sp, #60	@ 0x3c
 800d82c:	4604      	mov	r4, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	f000 fa2e 	bl	800dc90 <uxr_session_header_offset>
 800d834:	2300      	movs	r3, #0
 800d836:	2210      	movs	r2, #16
 800d838:	9000      	str	r0, [sp, #0]
 800d83a:	a902      	add	r1, sp, #8
 800d83c:	a806      	add	r0, sp, #24
 800d83e:	f7fe fd91 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800d842:	a906      	add	r1, sp, #24
 800d844:	4620      	mov	r0, r4
 800d846:	f000 f973 	bl	800db30 <uxr_buffer_delete_session>
 800d84a:	2200      	movs	r2, #0
 800d84c:	4611      	mov	r1, r2
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	4620      	mov	r0, r4
 800d852:	f000 f9c7 	bl	800dbe4 <uxr_stamp_session_header>
 800d856:	a806      	add	r0, sp, #24
 800d858:	f7fe fdc2 	bl	800c3e0 <ucdr_buffer_length>
 800d85c:	462b      	mov	r3, r5
 800d85e:	4602      	mov	r2, r0
 800d860:	a902      	add	r1, sp, #8
 800d862:	4620      	mov	r0, r4
 800d864:	f7ff ff10 	bl	800d688 <wait_session_status>
 800d868:	b118      	cbz	r0, 800d872 <uxr_delete_session_retries+0x4a>
 800d86a:	7960      	ldrb	r0, [r4, #5]
 800d86c:	fab0 f080 	clz	r0, r0
 800d870:	0940      	lsrs	r0, r0, #5
 800d872:	b00f      	add	sp, #60	@ 0x3c
 800d874:	bd30      	pop	{r4, r5, pc}
 800d876:	bf00      	nop

0800d878 <uxr_create_session>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	f100 0b08 	add.w	fp, r0, #8
 800d880:	b0ab      	sub	sp, #172	@ 0xac
 800d882:	4604      	mov	r4, r0
 800d884:	4658      	mov	r0, fp
 800d886:	f000 fa99 	bl	800ddbc <uxr_reset_stream_storage>
 800d88a:	4620      	mov	r0, r4
 800d88c:	f000 fa00 	bl	800dc90 <uxr_session_header_offset>
 800d890:	2300      	movs	r3, #0
 800d892:	9000      	str	r0, [sp, #0]
 800d894:	221c      	movs	r2, #28
 800d896:	a90b      	add	r1, sp, #44	@ 0x2c
 800d898:	a812      	add	r0, sp, #72	@ 0x48
 800d89a:	f7fe fd63 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800d89e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8a0:	8a1a      	ldrh	r2, [r3, #16]
 800d8a2:	3a04      	subs	r2, #4
 800d8a4:	b292      	uxth	r2, r2
 800d8a6:	a912      	add	r1, sp, #72	@ 0x48
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f000 f917 	bl	800dadc <uxr_buffer_create_session>
 800d8ae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 f983 	bl	800dbbc <uxr_stamp_create_session_header>
 800d8b6:	a812      	add	r0, sp, #72	@ 0x48
 800d8b8:	f7fe fd92 	bl	800c3e0 <ucdr_buffer_length>
 800d8bc:	23ff      	movs	r3, #255	@ 0xff
 800d8be:	7163      	strb	r3, [r4, #5]
 800d8c0:	230a      	movs	r3, #10
 800d8c2:	46da      	mov	sl, fp
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	4683      	mov	fp, r0
 800d8c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d8ca:	465a      	mov	r2, fp
 800d8cc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d8d0:	a90b      	add	r1, sp, #44	@ 0x2c
 800d8d2:	47a8      	blx	r5
 800d8d4:	f000 fb92 	bl	800dffc <uxr_millis>
 800d8d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d8dc:	4605      	mov	r5, r0
 800d8de:	e009      	b.n	800d8f4 <uxr_create_session+0x7c>
 800d8e0:	f000 fb8c 	bl	800dffc <uxr_millis>
 800d8e4:	1b40      	subs	r0, r0, r5
 800d8e6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	7962      	ldrb	r2, [r4, #5]
 800d8ee:	dd38      	ble.n	800d962 <uxr_create_session+0xea>
 800d8f0:	2aff      	cmp	r2, #255	@ 0xff
 800d8f2:	d13c      	bne.n	800d96e <uxr_create_session+0xf6>
 800d8f4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d8f6:	a907      	add	r1, sp, #28
 800d8f8:	6896      	ldr	r6, [r2, #8]
 800d8fa:	6810      	ldr	r0, [r2, #0]
 800d8fc:	aa08      	add	r2, sp, #32
 800d8fe:	47b0      	blx	r6
 800d900:	2800      	cmp	r0, #0
 800d902:	d0ed      	beq.n	800d8e0 <uxr_create_session+0x68>
 800d904:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d908:	a81a      	add	r0, sp, #104	@ 0x68
 800d90a:	f7fe fd3d 	bl	800c388 <ucdr_init_buffer>
 800d90e:	2600      	movs	r6, #0
 800d910:	f10d 031a 	add.w	r3, sp, #26
 800d914:	aa06      	add	r2, sp, #24
 800d916:	a91a      	add	r1, sp, #104	@ 0x68
 800d918:	4620      	mov	r0, r4
 800d91a:	f88d 6018 	strb.w	r6, [sp, #24]
 800d91e:	f000 f975 	bl	800dc0c <uxr_read_session_header>
 800d922:	2800      	cmp	r0, #0
 800d924:	d0dc      	beq.n	800d8e0 <uxr_create_session+0x68>
 800d926:	4631      	mov	r1, r6
 800d928:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d92c:	f000 fa12 	bl	800dd54 <uxr_stream_id_from_raw>
 800d930:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d934:	2e01      	cmp	r6, #1
 800d936:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d93a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d93e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d942:	d053      	beq.n	800d9ec <uxr_create_session+0x174>
 800d944:	2e02      	cmp	r6, #2
 800d946:	d018      	beq.n	800d97a <uxr_create_session+0x102>
 800d948:	2e00      	cmp	r6, #0
 800d94a:	d1c9      	bne.n	800d8e0 <uxr_create_session+0x68>
 800d94c:	4631      	mov	r1, r6
 800d94e:	4630      	mov	r0, r6
 800d950:	f000 fa00 	bl	800dd54 <uxr_stream_id_from_raw>
 800d954:	a91a      	add	r1, sp, #104	@ 0x68
 800d956:	4602      	mov	r2, r0
 800d958:	900a      	str	r0, [sp, #40]	@ 0x28
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7ff fb1a 	bl	800cf94 <read_submessage_list>
 800d960:	e7be      	b.n	800d8e0 <uxr_create_session+0x68>
 800d962:	9b03      	ldr	r3, [sp, #12]
 800d964:	3b01      	subs	r3, #1
 800d966:	9303      	str	r3, [sp, #12]
 800d968:	d001      	beq.n	800d96e <uxr_create_session+0xf6>
 800d96a:	2aff      	cmp	r2, #255	@ 0xff
 800d96c:	d0ac      	beq.n	800d8c8 <uxr_create_session+0x50>
 800d96e:	2a00      	cmp	r2, #0
 800d970:	d051      	beq.n	800da16 <uxr_create_session+0x19e>
 800d972:	2000      	movs	r0, #0
 800d974:	b02b      	add	sp, #172	@ 0xac
 800d976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d97a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d97e:	9304      	str	r3, [sp, #16]
 800d980:	4639      	mov	r1, r7
 800d982:	4650      	mov	r0, sl
 800d984:	f000 fad4 	bl	800df30 <uxr_get_input_reliable_stream>
 800d988:	4680      	mov	r8, r0
 800d98a:	b348      	cbz	r0, 800d9e0 <uxr_create_session+0x168>
 800d98c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d98e:	9205      	str	r2, [sp, #20]
 800d990:	a81a      	add	r0, sp, #104	@ 0x68
 800d992:	f7fe fd29 	bl	800c3e8 <ucdr_buffer_remaining>
 800d996:	4603      	mov	r3, r0
 800d998:	f10d 0019 	add.w	r0, sp, #25
 800d99c:	9000      	str	r0, [sp, #0]
 800d99e:	9a05      	ldr	r2, [sp, #20]
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	f006 fcc8 	bl	8014338 <uxr_receive_reliable_message>
 800d9a8:	b1d0      	cbz	r0, 800d9e0 <uxr_create_session+0x168>
 800d9aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d038      	beq.n	800da24 <uxr_create_session+0x1ac>
 800d9b2:	9e04      	ldr	r6, [sp, #16]
 800d9b4:	e00a      	b.n	800d9cc <uxr_create_session+0x154>
 800d9b6:	f04f 0302 	mov.w	r3, #2
 800d9ba:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d9be:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d9c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d9c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9c8:	f7ff fae4 	bl	800cf94 <read_submessage_list>
 800d9cc:	a922      	add	r1, sp, #136	@ 0x88
 800d9ce:	2204      	movs	r2, #4
 800d9d0:	4640      	mov	r0, r8
 800d9d2:	f006 fd31 	bl	8014438 <uxr_next_input_reliable_buffer_available>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	a922      	add	r1, sp, #136	@ 0x88
 800d9da:	4620      	mov	r0, r4
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d1ea      	bne.n	800d9b6 <uxr_create_session+0x13e>
 800d9e0:	9904      	ldr	r1, [sp, #16]
 800d9e2:	463a      	mov	r2, r7
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7ff f951 	bl	800cc8c <write_submessage_acknack.isra.0>
 800d9ea:	e779      	b.n	800d8e0 <uxr_create_session+0x68>
 800d9ec:	4639      	mov	r1, r7
 800d9ee:	4650      	mov	r0, sl
 800d9f0:	f000 fa94 	bl	800df1c <uxr_get_input_best_effort_stream>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	f43f af73 	beq.w	800d8e0 <uxr_create_session+0x68>
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	f006 fc08 	bl	8014210 <uxr_receive_best_effort_message>
 800da00:	2800      	cmp	r0, #0
 800da02:	f43f af6d 	beq.w	800d8e0 <uxr_create_session+0x68>
 800da06:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da0c:	a91a      	add	r1, sp, #104	@ 0x68
 800da0e:	4620      	mov	r0, r4
 800da10:	f7ff fac0 	bl	800cf94 <read_submessage_list>
 800da14:	e764      	b.n	800d8e0 <uxr_create_session+0x68>
 800da16:	4650      	mov	r0, sl
 800da18:	f000 f9d0 	bl	800ddbc <uxr_reset_stream_storage>
 800da1c:	2001      	movs	r0, #1
 800da1e:	b02b      	add	sp, #172	@ 0xac
 800da20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da24:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800da28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da2a:	a91a      	add	r1, sp, #104	@ 0x68
 800da2c:	4620      	mov	r0, r4
 800da2e:	f7ff fab1 	bl	800cf94 <read_submessage_list>
 800da32:	e7be      	b.n	800d9b2 <uxr_create_session+0x13a>

0800da34 <uxr_prepare_stream_to_write_submessage>:
 800da34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	b082      	sub	sp, #8
 800da3a:	4682      	mov	sl, r0
 800da3c:	4610      	mov	r0, r2
 800da3e:	4615      	mov	r5, r2
 800da40:	461e      	mov	r6, r3
 800da42:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800da46:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800da4a:	9101      	str	r1, [sp, #4]
 800da4c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800da50:	f000 face 	bl	800dff0 <uxr_submessage_padding>
 800da54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da58:	f105 0904 	add.w	r9, r5, #4
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	4481      	add	r9, r0
 800da60:	d01d      	beq.n	800da9e <uxr_prepare_stream_to_write_submessage+0x6a>
 800da62:	2b02      	cmp	r3, #2
 800da64:	d116      	bne.n	800da94 <uxr_prepare_stream_to_write_submessage+0x60>
 800da66:	4621      	mov	r1, r4
 800da68:	f10a 0008 	add.w	r0, sl, #8
 800da6c:	f000 fa4c 	bl	800df08 <uxr_get_output_reliable_stream>
 800da70:	4604      	mov	r4, r0
 800da72:	b158      	cbz	r0, 800da8c <uxr_prepare_stream_to_write_submessage+0x58>
 800da74:	4649      	mov	r1, r9
 800da76:	4632      	mov	r2, r6
 800da78:	f006 fe9a 	bl	80147b0 <uxr_prepare_reliable_buffer_to_write>
 800da7c:	4604      	mov	r4, r0
 800da7e:	b12c      	cbz	r4, 800da8c <uxr_prepare_stream_to_write_submessage+0x58>
 800da80:	4643      	mov	r3, r8
 800da82:	b2aa      	uxth	r2, r5
 800da84:	4639      	mov	r1, r7
 800da86:	4630      	mov	r0, r6
 800da88:	f000 fa72 	bl	800df70 <uxr_buffer_submessage_header>
 800da8c:	4620      	mov	r0, r4
 800da8e:	b002      	add	sp, #8
 800da90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da94:	2400      	movs	r4, #0
 800da96:	4620      	mov	r0, r4
 800da98:	b002      	add	sp, #8
 800da9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9e:	4621      	mov	r1, r4
 800daa0:	f10a 0008 	add.w	r0, sl, #8
 800daa4:	f000 fa28 	bl	800def8 <uxr_get_output_best_effort_stream>
 800daa8:	4604      	mov	r4, r0
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0ee      	beq.n	800da8c <uxr_prepare_stream_to_write_submessage+0x58>
 800daae:	4649      	mov	r1, r9
 800dab0:	4632      	mov	r2, r6
 800dab2:	f006 fdad 	bl	8014610 <uxr_prepare_best_effort_buffer_to_write>
 800dab6:	4604      	mov	r4, r0
 800dab8:	e7e1      	b.n	800da7e <uxr_prepare_stream_to_write_submessage+0x4a>
 800daba:	bf00      	nop

0800dabc <uxr_init_session_info>:
 800dabc:	0e13      	lsrs	r3, r2, #24
 800dabe:	7043      	strb	r3, [r0, #1]
 800dac0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800dac4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dac8:	7001      	strb	r1, [r0, #0]
 800daca:	70c3      	strb	r3, [r0, #3]
 800dacc:	2109      	movs	r1, #9
 800dace:	23ff      	movs	r3, #255	@ 0xff
 800dad0:	f880 c002 	strb.w	ip, [r0, #2]
 800dad4:	7102      	strb	r2, [r0, #4]
 800dad6:	80c1      	strh	r1, [r0, #6]
 800dad8:	7143      	strb	r3, [r0, #5]
 800dada:	4770      	bx	lr

0800dadc <uxr_buffer_create_session>:
 800dadc:	b530      	push	{r4, r5, lr}
 800dade:	b089      	sub	sp, #36	@ 0x24
 800dae0:	2300      	movs	r3, #0
 800dae2:	4d12      	ldr	r5, [pc, #72]	@ (800db2c <uxr_buffer_create_session+0x50>)
 800dae4:	9307      	str	r3, [sp, #28]
 800dae6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800daea:	2201      	movs	r2, #1
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	80c2      	strh	r2, [r0, #6]
 800daf0:	f88d 2004 	strb.w	r2, [sp, #4]
 800daf4:	682a      	ldr	r2, [r5, #0]
 800daf6:	9200      	str	r2, [sp, #0]
 800daf8:	88aa      	ldrh	r2, [r5, #4]
 800dafa:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dafe:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800db02:	9202      	str	r2, [sp, #8]
 800db04:	460c      	mov	r4, r1
 800db06:	7802      	ldrb	r2, [r0, #0]
 800db08:	9303      	str	r3, [sp, #12]
 800db0a:	4619      	mov	r1, r3
 800db0c:	f88d 200c 	strb.w	r2, [sp, #12]
 800db10:	4620      	mov	r0, r4
 800db12:	2210      	movs	r2, #16
 800db14:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800db18:	9306      	str	r3, [sp, #24]
 800db1a:	f000 fa29 	bl	800df70 <uxr_buffer_submessage_header>
 800db1e:	4669      	mov	r1, sp
 800db20:	4620      	mov	r0, r4
 800db22:	f001 fa6d 	bl	800f000 <uxr_serialize_CREATE_CLIENT_Payload>
 800db26:	b009      	add	sp, #36	@ 0x24
 800db28:	bd30      	pop	{r4, r5, pc}
 800db2a:	bf00      	nop
 800db2c:	0801929c 	.word	0x0801929c

0800db30 <uxr_buffer_delete_session>:
 800db30:	b510      	push	{r4, lr}
 800db32:	4b0c      	ldr	r3, [pc, #48]	@ (800db64 <uxr_buffer_delete_session+0x34>)
 800db34:	b082      	sub	sp, #8
 800db36:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800db3a:	f8ad c006 	strh.w	ip, [sp, #6]
 800db3e:	460c      	mov	r4, r1
 800db40:	2202      	movs	r2, #2
 800db42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db46:	80c2      	strh	r2, [r0, #6]
 800db48:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db4c:	2204      	movs	r2, #4
 800db4e:	2300      	movs	r3, #0
 800db50:	2103      	movs	r1, #3
 800db52:	4620      	mov	r0, r4
 800db54:	f000 fa0c 	bl	800df70 <uxr_buffer_submessage_header>
 800db58:	a901      	add	r1, sp, #4
 800db5a:	4620      	mov	r0, r4
 800db5c:	f001 faf6 	bl	800f14c <uxr_serialize_DELETE_Payload>
 800db60:	b002      	add	sp, #8
 800db62:	bd10      	pop	{r4, pc}
 800db64:	0801929c 	.word	0x0801929c

0800db68 <uxr_read_create_session_status>:
 800db68:	b510      	push	{r4, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	4604      	mov	r4, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	a901      	add	r1, sp, #4
 800db72:	f001 fafb 	bl	800f16c <uxr_deserialize_STATUS_AGENT_Payload>
 800db76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db7a:	7163      	strb	r3, [r4, #5]
 800db7c:	b008      	add	sp, #32
 800db7e:	bd10      	pop	{r4, pc}

0800db80 <uxr_read_delete_session_status>:
 800db80:	b510      	push	{r4, lr}
 800db82:	4604      	mov	r4, r0
 800db84:	b084      	sub	sp, #16
 800db86:	4608      	mov	r0, r1
 800db88:	a902      	add	r1, sp, #8
 800db8a:	f001 fb1f 	bl	800f1cc <uxr_deserialize_STATUS_Payload>
 800db8e:	88e3      	ldrh	r3, [r4, #6]
 800db90:	2b02      	cmp	r3, #2
 800db92:	d001      	beq.n	800db98 <uxr_read_delete_session_status+0x18>
 800db94:	b004      	add	sp, #16
 800db96:	bd10      	pop	{r4, pc}
 800db98:	f10d 000a 	add.w	r0, sp, #10
 800db9c:	f7fe fecc 	bl	800c938 <uxr_object_id_from_raw>
 800dba0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800dba4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800dba8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	bf04      	itt	eq
 800dbb2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800dbb6:	7163      	strbeq	r3, [r4, #5]
 800dbb8:	b004      	add	sp, #16
 800dbba:	bd10      	pop	{r4, pc}

0800dbbc <uxr_stamp_create_session_header>:
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	2208      	movs	r2, #8
 800dbc0:	b08a      	sub	sp, #40	@ 0x28
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	eb0d 0002 	add.w	r0, sp, r2
 800dbc8:	f7fe fbde 	bl	800c388 <ucdr_init_buffer>
 800dbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd0:	9400      	str	r4, [sp, #0]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800dbda:	a802      	add	r0, sp, #8
 800dbdc:	f000 fbc2 	bl	800e364 <uxr_serialize_message_header>
 800dbe0:	b00a      	add	sp, #40	@ 0x28
 800dbe2:	bd10      	pop	{r4, pc}

0800dbe4 <uxr_stamp_session_header>:
 800dbe4:	b530      	push	{r4, r5, lr}
 800dbe6:	b08d      	sub	sp, #52	@ 0x34
 800dbe8:	4604      	mov	r4, r0
 800dbea:	460d      	mov	r5, r1
 800dbec:	9203      	str	r2, [sp, #12]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	a804      	add	r0, sp, #16
 800dbf2:	2208      	movs	r2, #8
 800dbf4:	f7fe fbc8 	bl	800c388 <ucdr_init_buffer>
 800dbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	9400      	str	r4, [sp, #0]
 800dc00:	462a      	mov	r2, r5
 800dc02:	a804      	add	r0, sp, #16
 800dc04:	f000 fbae 	bl	800e364 <uxr_serialize_message_header>
 800dc08:	b00d      	add	sp, #52	@ 0x34
 800dc0a:	bd30      	pop	{r4, r5, pc}

0800dc0c <uxr_read_session_header>:
 800dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc10:	4607      	mov	r7, r0
 800dc12:	b084      	sub	sp, #16
 800dc14:	4608      	mov	r0, r1
 800dc16:	460c      	mov	r4, r1
 800dc18:	4615      	mov	r5, r2
 800dc1a:	461e      	mov	r6, r3
 800dc1c:	f7fe fbe4 	bl	800c3e8 <ucdr_buffer_remaining>
 800dc20:	2808      	cmp	r0, #8
 800dc22:	d803      	bhi.n	800dc2c <uxr_read_session_header+0x20>
 800dc24:	2000      	movs	r0, #0
 800dc26:	b004      	add	sp, #16
 800dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc2c:	f10d 080c 	add.w	r8, sp, #12
 800dc30:	4633      	mov	r3, r6
 800dc32:	462a      	mov	r2, r5
 800dc34:	f8cd 8000 	str.w	r8, [sp]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f10d 010b 	add.w	r1, sp, #11
 800dc3e:	f000 fbaf 	bl	800e3a0 <uxr_deserialize_message_header>
 800dc42:	783a      	ldrb	r2, [r7, #0]
 800dc44:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d1eb      	bne.n	800dc24 <uxr_read_session_header+0x18>
 800dc4c:	061b      	lsls	r3, r3, #24
 800dc4e:	d41c      	bmi.n	800dc8a <uxr_read_session_header+0x7e>
 800dc50:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dc54:	787b      	ldrb	r3, [r7, #1]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d003      	beq.n	800dc62 <uxr_read_session_header+0x56>
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	f080 0001 	eor.w	r0, r0, #1
 800dc60:	e7e1      	b.n	800dc26 <uxr_read_session_header+0x1a>
 800dc62:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800dc66:	78bb      	ldrb	r3, [r7, #2]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	f107 0102 	add.w	r1, r7, #2
 800dc6e:	d1f4      	bne.n	800dc5a <uxr_read_session_header+0x4e>
 800dc70:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800dc74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d1ee      	bne.n	800dc5a <uxr_read_session_header+0x4e>
 800dc7c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800dc80:	784b      	ldrb	r3, [r1, #1]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d1e9      	bne.n	800dc5a <uxr_read_session_header+0x4e>
 800dc86:	2000      	movs	r0, #0
 800dc88:	e7e8      	b.n	800dc5c <uxr_read_session_header+0x50>
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	e7cb      	b.n	800dc26 <uxr_read_session_header+0x1a>
 800dc8e:	bf00      	nop

0800dc90 <uxr_session_header_offset>:
 800dc90:	f990 3000 	ldrsb.w	r3, [r0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	bfac      	ite	ge
 800dc98:	2008      	movge	r0, #8
 800dc9a:	2004      	movlt	r0, #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop

0800dca0 <uxr_init_base_object_request>:
 800dca0:	b510      	push	{r4, lr}
 800dca2:	88c3      	ldrh	r3, [r0, #6]
 800dca4:	b082      	sub	sp, #8
 800dca6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800dcaa:	9101      	str	r1, [sp, #4]
 800dcac:	f1a3 010a 	sub.w	r1, r3, #10
 800dcb0:	b289      	uxth	r1, r1
 800dcb2:	42a1      	cmp	r1, r4
 800dcb4:	d80e      	bhi.n	800dcd4 <uxr_init_base_object_request+0x34>
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	b29c      	uxth	r4, r3
 800dcba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	80c4      	strh	r4, [r0, #6]
 800dcc2:	9801      	ldr	r0, [sp, #4]
 800dcc4:	7011      	strb	r1, [r2, #0]
 800dcc6:	7053      	strb	r3, [r2, #1]
 800dcc8:	1c91      	adds	r1, r2, #2
 800dcca:	f7fe fe49 	bl	800c960 <uxr_object_id_to_raw>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	b002      	add	sp, #8
 800dcd2:	bd10      	pop	{r4, pc}
 800dcd4:	230a      	movs	r3, #10
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	461c      	mov	r4, r3
 800dcda:	e7f1      	b.n	800dcc0 <uxr_init_base_object_request+0x20>

0800dcdc <uxr_parse_base_object_request>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	4604      	mov	r4, r0
 800dce0:	3002      	adds	r0, #2
 800dce2:	460d      	mov	r5, r1
 800dce4:	4616      	mov	r6, r2
 800dce6:	f7fe fe27 	bl	800c938 <uxr_object_id_from_raw>
 800dcea:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800dcee:	8028      	strh	r0, [r5, #0]
 800dcf0:	806b      	strh	r3, [r5, #2]
 800dcf2:	7822      	ldrb	r2, [r4, #0]
 800dcf4:	7863      	ldrb	r3, [r4, #1]
 800dcf6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800dcfa:	8033      	strh	r3, [r6, #0]
 800dcfc:	bd70      	pop	{r4, r5, r6, pc}
 800dcfe:	bf00      	nop

0800dd00 <uxr_stream_id>:
 800dd00:	2901      	cmp	r1, #1
 800dd02:	b082      	sub	sp, #8
 800dd04:	d01d      	beq.n	800dd42 <uxr_stream_id+0x42>
 800dd06:	2902      	cmp	r1, #2
 800dd08:	f04f 0c00 	mov.w	ip, #0
 800dd0c:	d01e      	beq.n	800dd4c <uxr_stream_id+0x4c>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f36c 0307 	bfi	r3, ip, #0, #8
 800dd14:	f360 230f 	bfi	r3, r0, #8, #8
 800dd18:	f361 4317 	bfi	r3, r1, #16, #8
 800dd1c:	f362 631f 	bfi	r3, r2, #24, #8
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	2000      	movs	r0, #0
 800dd24:	f362 0007 	bfi	r0, r2, #0, #8
 800dd28:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd2c:	f362 200f 	bfi	r0, r2, #8, #8
 800dd30:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd34:	f362 4017 	bfi	r0, r2, #16, #8
 800dd38:	0e1b      	lsrs	r3, r3, #24
 800dd3a:	f363 601f 	bfi	r0, r3, #24, #8
 800dd3e:	b002      	add	sp, #8
 800dd40:	4770      	bx	lr
 800dd42:	f100 0c01 	add.w	ip, r0, #1
 800dd46:	fa5f fc8c 	uxtb.w	ip, ip
 800dd4a:	e7e0      	b.n	800dd0e <uxr_stream_id+0xe>
 800dd4c:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800dd50:	e7dd      	b.n	800dd0e <uxr_stream_id+0xe>
 800dd52:	bf00      	nop

0800dd54 <uxr_stream_id_from_raw>:
 800dd54:	b082      	sub	sp, #8
 800dd56:	b130      	cbz	r0, 800dd66 <uxr_stream_id_from_raw+0x12>
 800dd58:	0603      	lsls	r3, r0, #24
 800dd5a:	d420      	bmi.n	800dd9e <uxr_stream_id_from_raw+0x4a>
 800dd5c:	1e42      	subs	r2, r0, #1
 800dd5e:	b2d2      	uxtb	r2, r2
 800dd60:	f04f 0c01 	mov.w	ip, #1
 800dd64:	e001      	b.n	800dd6a <uxr_stream_id_from_raw+0x16>
 800dd66:	4684      	mov	ip, r0
 800dd68:	4602      	mov	r2, r0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f360 0307 	bfi	r3, r0, #0, #8
 800dd70:	f362 230f 	bfi	r3, r2, #8, #8
 800dd74:	f36c 4317 	bfi	r3, ip, #16, #8
 800dd78:	f361 631f 	bfi	r3, r1, #24, #8
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	2000      	movs	r0, #0
 800dd80:	f362 0007 	bfi	r0, r2, #0, #8
 800dd84:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd88:	f362 200f 	bfi	r0, r2, #8, #8
 800dd8c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800dd90:	f362 4017 	bfi	r0, r2, #16, #8
 800dd94:	0e1b      	lsrs	r3, r3, #24
 800dd96:	f363 601f 	bfi	r0, r3, #24, #8
 800dd9a:	b002      	add	sp, #8
 800dd9c:	4770      	bx	lr
 800dd9e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800dda2:	f04f 0c02 	mov.w	ip, #2
 800dda6:	e7e0      	b.n	800dd6a <uxr_stream_id_from_raw+0x16>

0800dda8 <uxr_init_stream_storage>:
 800dda8:	2300      	movs	r3, #0
 800ddaa:	7403      	strb	r3, [r0, #16]
 800ddac:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800ddb0:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800ddb4:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop

0800ddbc <uxr_reset_stream_storage>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	7c03      	ldrb	r3, [r0, #16]
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	b153      	cbz	r3, 800ddda <uxr_reset_stream_storage+0x1e>
 800ddc4:	4606      	mov	r6, r0
 800ddc6:	2500      	movs	r5, #0
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f006 fc1b 	bl	8014604 <uxr_reset_output_best_effort_stream>
 800ddce:	7c23      	ldrb	r3, [r4, #16]
 800ddd0:	3501      	adds	r5, #1
 800ddd2:	42ab      	cmp	r3, r5
 800ddd4:	f106 0610 	add.w	r6, r6, #16
 800ddd8:	d8f6      	bhi.n	800ddc8 <uxr_reset_stream_storage+0xc>
 800ddda:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ddde:	b163      	cbz	r3, 800ddfa <uxr_reset_stream_storage+0x3e>
 800dde0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dde4:	2500      	movs	r5, #0
 800dde6:	4630      	mov	r0, r6
 800dde8:	f006 fa0e 	bl	8014208 <uxr_reset_input_best_effort_stream>
 800ddec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	42ab      	cmp	r3, r5
 800ddf4:	f106 0602 	add.w	r6, r6, #2
 800ddf8:	d8f5      	bhi.n	800dde6 <uxr_reset_stream_storage+0x2a>
 800ddfa:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ddfe:	b163      	cbz	r3, 800de1a <uxr_reset_stream_storage+0x5e>
 800de00:	f104 0618 	add.w	r6, r4, #24
 800de04:	2500      	movs	r5, #0
 800de06:	4630      	mov	r0, r6
 800de08:	f006 fca8 	bl	801475c <uxr_reset_output_reliable_stream>
 800de0c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800de10:	3501      	adds	r5, #1
 800de12:	42ab      	cmp	r3, r5
 800de14:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800de18:	d8f5      	bhi.n	800de06 <uxr_reset_stream_storage+0x4a>
 800de1a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de1e:	b163      	cbz	r3, 800de3a <uxr_reset_stream_storage+0x7e>
 800de20:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800de24:	2500      	movs	r5, #0
 800de26:	4630      	mov	r0, r6
 800de28:	f006 fa62 	bl	80142f0 <uxr_reset_input_reliable_stream>
 800de2c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800de30:	3501      	adds	r5, #1
 800de32:	42ab      	cmp	r3, r5
 800de34:	f106 0618 	add.w	r6, r6, #24
 800de38:	d8f5      	bhi.n	800de26 <uxr_reset_stream_storage+0x6a>
 800de3a:	bd70      	pop	{r4, r5, r6, pc}

0800de3c <uxr_add_output_best_effort_buffer>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	7c04      	ldrb	r4, [r0, #16]
 800de40:	f104 0c01 	add.w	ip, r4, #1
 800de44:	b082      	sub	sp, #8
 800de46:	f880 c010 	strb.w	ip, [r0, #16]
 800de4a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800de4e:	f006 fbcf 	bl	80145f0 <uxr_init_output_best_effort_stream>
 800de52:	2201      	movs	r2, #1
 800de54:	4611      	mov	r1, r2
 800de56:	4620      	mov	r0, r4
 800de58:	b002      	add	sp, #8
 800de5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de5e:	f7ff bf4f 	b.w	800dd00 <uxr_stream_id>
 800de62:	bf00      	nop

0800de64 <uxr_add_output_reliable_buffer>:
 800de64:	b510      	push	{r4, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	4684      	mov	ip, r0
 800de6a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800de6e:	9000      	str	r0, [sp, #0]
 800de70:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800de74:	2028      	movs	r0, #40	@ 0x28
 800de76:	fb00 c004 	mla	r0, r0, r4, ip
 800de7a:	f104 0e01 	add.w	lr, r4, #1
 800de7e:	3018      	adds	r0, #24
 800de80:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800de84:	f006 fc32 	bl	80146ec <uxr_init_output_reliable_stream>
 800de88:	2201      	movs	r2, #1
 800de8a:	2102      	movs	r1, #2
 800de8c:	4620      	mov	r0, r4
 800de8e:	b004      	add	sp, #16
 800de90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de94:	f7ff bf34 	b.w	800dd00 <uxr_stream_id>

0800de98 <uxr_add_input_best_effort_buffer>:
 800de98:	b510      	push	{r4, lr}
 800de9a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800de9e:	4603      	mov	r3, r0
 800dea0:	1c62      	adds	r2, r4, #1
 800dea2:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800dea6:	b082      	sub	sp, #8
 800dea8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800deac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deb0:	f006 f9a6 	bl	8014200 <uxr_init_input_best_effort_stream>
 800deb4:	2200      	movs	r2, #0
 800deb6:	2101      	movs	r1, #1
 800deb8:	4620      	mov	r0, r4
 800deba:	b002      	add	sp, #8
 800debc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dec0:	f7ff bf1e 	b.w	800dd00 <uxr_stream_id>

0800dec4 <uxr_add_input_reliable_buffer>:
 800dec4:	b510      	push	{r4, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	4684      	mov	ip, r0
 800deca:	9806      	ldr	r0, [sp, #24]
 800decc:	9000      	str	r0, [sp, #0]
 800dece:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ded2:	2018      	movs	r0, #24
 800ded4:	fb00 c004 	mla	r0, r0, r4, ip
 800ded8:	f104 0e01 	add.w	lr, r4, #1
 800dedc:	3048      	adds	r0, #72	@ 0x48
 800dede:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800dee2:	f006 f9d9 	bl	8014298 <uxr_init_input_reliable_stream>
 800dee6:	2200      	movs	r2, #0
 800dee8:	2102      	movs	r1, #2
 800deea:	4620      	mov	r0, r4
 800deec:	b004      	add	sp, #16
 800deee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800def2:	f7ff bf05 	b.w	800dd00 <uxr_stream_id>
 800def6:	bf00      	nop

0800def8 <uxr_get_output_best_effort_stream>:
 800def8:	7c03      	ldrb	r3, [r0, #16]
 800defa:	428b      	cmp	r3, r1
 800defc:	bf8c      	ite	hi
 800defe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800df02:	2000      	movls	r0, #0
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop

0800df08 <uxr_get_output_reliable_stream>:
 800df08:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800df0c:	428b      	cmp	r3, r1
 800df0e:	bf83      	ittte	hi
 800df10:	2328      	movhi	r3, #40	@ 0x28
 800df12:	fb03 0001 	mlahi	r0, r3, r1, r0
 800df16:	3018      	addhi	r0, #24
 800df18:	2000      	movls	r0, #0
 800df1a:	4770      	bx	lr

0800df1c <uxr_get_input_best_effort_stream>:
 800df1c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800df20:	428b      	cmp	r3, r1
 800df22:	bf86      	itte	hi
 800df24:	3121      	addhi	r1, #33	@ 0x21
 800df26:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800df2a:	2000      	movls	r0, #0
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop

0800df30 <uxr_get_input_reliable_stream>:
 800df30:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800df34:	428b      	cmp	r3, r1
 800df36:	bf83      	ittte	hi
 800df38:	2318      	movhi	r3, #24
 800df3a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800df3e:	3048      	addhi	r0, #72	@ 0x48
 800df40:	2000      	movls	r0, #0
 800df42:	4770      	bx	lr

0800df44 <uxr_output_streams_confirmed>:
 800df44:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800df48:	b183      	cbz	r3, 800df6c <uxr_output_streams_confirmed+0x28>
 800df4a:	b570      	push	{r4, r5, r6, lr}
 800df4c:	4606      	mov	r6, r0
 800df4e:	f100 0518 	add.w	r5, r0, #24
 800df52:	2400      	movs	r4, #0
 800df54:	e001      	b.n	800df5a <uxr_output_streams_confirmed+0x16>
 800df56:	3528      	adds	r5, #40	@ 0x28
 800df58:	b138      	cbz	r0, 800df6a <uxr_output_streams_confirmed+0x26>
 800df5a:	4628      	mov	r0, r5
 800df5c:	f006 fe6e 	bl	8014c3c <uxr_is_output_up_to_date>
 800df60:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800df64:	3401      	adds	r4, #1
 800df66:	42a3      	cmp	r3, r4
 800df68:	d8f5      	bhi.n	800df56 <uxr_output_streams_confirmed+0x12>
 800df6a:	bd70      	pop	{r4, r5, r6, pc}
 800df6c:	2001      	movs	r0, #1
 800df6e:	4770      	bx	lr

0800df70 <uxr_buffer_submessage_header>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	4604      	mov	r4, r0
 800df74:	460e      	mov	r6, r1
 800df76:	2104      	movs	r1, #4
 800df78:	4615      	mov	r5, r2
 800df7a:	461f      	mov	r7, r3
 800df7c:	f7fe fa1e 	bl	800c3bc <ucdr_align_to>
 800df80:	2301      	movs	r3, #1
 800df82:	ea47 0203 	orr.w	r2, r7, r3
 800df86:	4631      	mov	r1, r6
 800df88:	7523      	strb	r3, [r4, #20]
 800df8a:	4620      	mov	r0, r4
 800df8c:	462b      	mov	r3, r5
 800df8e:	f000 fa27 	bl	800e3e0 <uxr_serialize_submessage_header>
 800df92:	4620      	mov	r0, r4
 800df94:	f7fe fa28 	bl	800c3e8 <ucdr_buffer_remaining>
 800df98:	42a8      	cmp	r0, r5
 800df9a:	bf34      	ite	cc
 800df9c:	2000      	movcc	r0, #0
 800df9e:	2001      	movcs	r0, #1
 800dfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfa2:	bf00      	nop

0800dfa4 <uxr_read_submessage_header>:
 800dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa8:	4604      	mov	r4, r0
 800dfaa:	460d      	mov	r5, r1
 800dfac:	2104      	movs	r1, #4
 800dfae:	4616      	mov	r6, r2
 800dfb0:	4698      	mov	r8, r3
 800dfb2:	f7fe fa03 	bl	800c3bc <ucdr_align_to>
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f7fe fa16 	bl	800c3e8 <ucdr_buffer_remaining>
 800dfbc:	2803      	cmp	r0, #3
 800dfbe:	bf8c      	ite	hi
 800dfc0:	2701      	movhi	r7, #1
 800dfc2:	2700      	movls	r7, #0
 800dfc4:	d802      	bhi.n	800dfcc <uxr_read_submessage_header+0x28>
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	4633      	mov	r3, r6
 800dfce:	4642      	mov	r2, r8
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	4629      	mov	r1, r5
 800dfd4:	f000 fa18 	bl	800e408 <uxr_deserialize_submessage_header>
 800dfd8:	f898 3000 	ldrb.w	r3, [r8]
 800dfdc:	f003 0201 	and.w	r2, r3, #1
 800dfe0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800dfe4:	f888 3000 	strb.w	r3, [r8]
 800dfe8:	7522      	strb	r2, [r4, #20]
 800dfea:	4638      	mov	r0, r7
 800dfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dff0 <uxr_submessage_padding>:
 800dff0:	f010 0003 	ands.w	r0, r0, #3
 800dff4:	bf18      	it	ne
 800dff6:	f1c0 0004 	rsbne	r0, r0, #4
 800dffa:	4770      	bx	lr

0800dffc <uxr_millis>:
 800dffc:	b510      	push	{r4, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	4669      	mov	r1, sp
 800e002:	2001      	movs	r0, #1
 800e004:	f7f4 f974 	bl	80022f0 <clock_gettime>
 800e008:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e00c:	4906      	ldr	r1, [pc, #24]	@ (800e028 <uxr_millis+0x2c>)
 800e00e:	fba0 0301 	umull	r0, r3, r0, r1
 800e012:	1900      	adds	r0, r0, r4
 800e014:	fb01 3102 	mla	r1, r1, r2, r3
 800e018:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e01c:	4a03      	ldr	r2, [pc, #12]	@ (800e02c <uxr_millis+0x30>)
 800e01e:	2300      	movs	r3, #0
 800e020:	f7f2 fdf2 	bl	8000c08 <__aeabi_ldivmod>
 800e024:	b004      	add	sp, #16
 800e026:	bd10      	pop	{r4, pc}
 800e028:	3b9aca00 	.word	0x3b9aca00
 800e02c:	000f4240 	.word	0x000f4240

0800e030 <uxr_nanos>:
 800e030:	b510      	push	{r4, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	4669      	mov	r1, sp
 800e036:	2001      	movs	r0, #1
 800e038:	f7f4 f95a 	bl	80022f0 <clock_gettime>
 800e03c:	4a06      	ldr	r2, [pc, #24]	@ (800e058 <uxr_nanos+0x28>)
 800e03e:	9800      	ldr	r0, [sp, #0]
 800e040:	9902      	ldr	r1, [sp, #8]
 800e042:	9c01      	ldr	r4, [sp, #4]
 800e044:	fba0 0302 	umull	r0, r3, r0, r2
 800e048:	1840      	adds	r0, r0, r1
 800e04a:	fb02 3304 	mla	r3, r2, r4, r3
 800e04e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e052:	b004      	add	sp, #16
 800e054:	bd10      	pop	{r4, pc}
 800e056:	bf00      	nop
 800e058:	3b9aca00 	.word	0x3b9aca00

0800e05c <on_full_output_buffer_fragmented>:
 800e05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e060:	460c      	mov	r4, r1
 800e062:	b08a      	sub	sp, #40	@ 0x28
 800e064:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e068:	4606      	mov	r6, r0
 800e06a:	f104 0008 	add.w	r0, r4, #8
 800e06e:	f7ff ff4b 	bl	800df08 <uxr_get_output_reliable_stream>
 800e072:	4605      	mov	r5, r0
 800e074:	f006 fdec 	bl	8014c50 <get_available_free_slots>
 800e078:	b968      	cbnz	r0, 800e096 <on_full_output_buffer_fragmented+0x3a>
 800e07a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e07e:	4620      	mov	r0, r4
 800e080:	4798      	blx	r3
 800e082:	b918      	cbnz	r0, 800e08c <on_full_output_buffer_fragmented+0x30>
 800e084:	2001      	movs	r0, #1
 800e086:	b00a      	add	sp, #40	@ 0x28
 800e088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e08c:	4628      	mov	r0, r5
 800e08e:	f006 fddf 	bl	8014c50 <get_available_free_slots>
 800e092:	2800      	cmp	r0, #0
 800e094:	d0f6      	beq.n	800e084 <on_full_output_buffer_fragmented+0x28>
 800e096:	8929      	ldrh	r1, [r5, #8]
 800e098:	89eb      	ldrh	r3, [r5, #14]
 800e09a:	7b28      	ldrb	r0, [r5, #12]
 800e09c:	686a      	ldr	r2, [r5, #4]
 800e09e:	fbb2 f8f1 	udiv	r8, r2, r1
 800e0a2:	fbb3 f2f1 	udiv	r2, r3, r1
 800e0a6:	fb01 3112 	mls	r1, r1, r2, r3
 800e0aa:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e0ae:	b289      	uxth	r1, r1
 800e0b0:	fb08 f101 	mul.w	r1, r8, r1
 800e0b4:	30fc      	adds	r0, #252	@ 0xfc
 800e0b6:	f1a8 0804 	sub.w	r8, r8, #4
 800e0ba:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e0be:	4440      	add	r0, r8
 800e0c0:	b287      	uxth	r7, r0
 800e0c2:	1bdb      	subs	r3, r3, r7
 800e0c4:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	3104      	adds	r1, #4
 800e0cc:	4419      	add	r1, r3
 800e0ce:	4642      	mov	r2, r8
 800e0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	a802      	add	r0, sp, #8
 800e0d8:	2300      	movs	r3, #0
 800e0da:	f7fe f943 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800e0de:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e0e2:	f102 0308 	add.w	r3, r2, #8
 800e0e6:	4543      	cmp	r3, r8
 800e0e8:	d928      	bls.n	800e13c <on_full_output_buffer_fragmented+0xe0>
 800e0ea:	463a      	mov	r2, r7
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	210d      	movs	r1, #13
 800e0f0:	a802      	add	r0, sp, #8
 800e0f2:	f7ff ff3d 	bl	800df70 <uxr_buffer_submessage_header>
 800e0f6:	8929      	ldrh	r1, [r5, #8]
 800e0f8:	89eb      	ldrh	r3, [r5, #14]
 800e0fa:	fbb3 f2f1 	udiv	r2, r3, r1
 800e0fe:	fb01 3312 	mls	r3, r1, r2, r3
 800e102:	b29b      	uxth	r3, r3
 800e104:	686a      	ldr	r2, [r5, #4]
 800e106:	fbb2 f2f1 	udiv	r2, r2, r1
 800e10a:	fb02 f303 	mul.w	r3, r2, r3
 800e10e:	682a      	ldr	r2, [r5, #0]
 800e110:	f842 8003 	str.w	r8, [r2, r3]
 800e114:	89e8      	ldrh	r0, [r5, #14]
 800e116:	2101      	movs	r1, #1
 800e118:	f006 fdba 	bl	8014c90 <uxr_seq_num_add>
 800e11c:	9904      	ldr	r1, [sp, #16]
 800e11e:	9a03      	ldr	r2, [sp, #12]
 800e120:	81e8      	strh	r0, [r5, #14]
 800e122:	1a52      	subs	r2, r2, r1
 800e124:	4630      	mov	r0, r6
 800e126:	f7fe f92f 	bl	800c388 <ucdr_init_buffer>
 800e12a:	4630      	mov	r0, r6
 800e12c:	490f      	ldr	r1, [pc, #60]	@ (800e16c <on_full_output_buffer_fragmented+0x110>)
 800e12e:	4622      	mov	r2, r4
 800e130:	f7fe f8fe 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800e134:	2000      	movs	r0, #0
 800e136:	b00a      	add	sp, #40	@ 0x28
 800e138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13c:	b292      	uxth	r2, r2
 800e13e:	2302      	movs	r3, #2
 800e140:	210d      	movs	r1, #13
 800e142:	a802      	add	r0, sp, #8
 800e144:	f7ff ff14 	bl	800df70 <uxr_buffer_submessage_header>
 800e148:	8928      	ldrh	r0, [r5, #8]
 800e14a:	89eb      	ldrh	r3, [r5, #14]
 800e14c:	fbb3 f1f0 	udiv	r1, r3, r0
 800e150:	fb00 3311 	mls	r3, r0, r1, r3
 800e154:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e158:	6869      	ldr	r1, [r5, #4]
 800e15a:	fbb1 f1f0 	udiv	r1, r1, r0
 800e15e:	b29b      	uxth	r3, r3
 800e160:	fb01 f303 	mul.w	r3, r1, r3
 800e164:	6829      	ldr	r1, [r5, #0]
 800e166:	3208      	adds	r2, #8
 800e168:	50ca      	str	r2, [r1, r3]
 800e16a:	e7d3      	b.n	800e114 <on_full_output_buffer_fragmented+0xb8>
 800e16c:	0800e05d 	.word	0x0800e05d

0800e170 <uxr_prepare_output_stream>:
 800e170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e172:	b087      	sub	sp, #28
 800e174:	2707      	movs	r7, #7
 800e176:	9202      	str	r2, [sp, #8]
 800e178:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e17a:	9103      	str	r1, [sp, #12]
 800e17c:	2500      	movs	r5, #0
 800e17e:	3204      	adds	r2, #4
 800e180:	e9cd 7500 	strd	r7, r5, [sp]
 800e184:	461c      	mov	r4, r3
 800e186:	4606      	mov	r6, r0
 800e188:	f7ff fc54 	bl	800da34 <uxr_prepare_stream_to_write_submessage>
 800e18c:	f080 0201 	eor.w	r2, r0, #1
 800e190:	b2d2      	uxtb	r2, r2
 800e192:	75a2      	strb	r2, [r4, #22]
 800e194:	b112      	cbz	r2, 800e19c <uxr_prepare_output_stream+0x2c>
 800e196:	4628      	mov	r0, r5
 800e198:	b007      	add	sp, #28
 800e19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e19c:	aa05      	add	r2, sp, #20
 800e19e:	9902      	ldr	r1, [sp, #8]
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff fd7d 	bl	800dca0 <uxr_init_base_object_request>
 800e1a6:	a905      	add	r1, sp, #20
 800e1a8:	4605      	mov	r5, r0
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f001 f88c 	bl	800f2c8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e1b0:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e1b4:	69a6      	ldr	r6, [r4, #24]
 800e1b6:	69e7      	ldr	r7, [r4, #28]
 800e1b8:	1a52      	subs	r2, r2, r1
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	f7fe f8e4 	bl	800c388 <ucdr_init_buffer>
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	463a      	mov	r2, r7
 800e1c4:	4631      	mov	r1, r6
 800e1c6:	f7fe f8b3 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	b007      	add	sp, #28
 800e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1d0 <uxr_prepare_output_stream_fragmented>:
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	b091      	sub	sp, #68	@ 0x44
 800e1d6:	4605      	mov	r5, r0
 800e1d8:	9105      	str	r1, [sp, #20]
 800e1da:	3008      	adds	r0, #8
 800e1dc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e1e0:	461e      	mov	r6, r3
 800e1e2:	9204      	str	r2, [sp, #16]
 800e1e4:	f7ff fe90 	bl	800df08 <uxr_get_output_reliable_stream>
 800e1e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	f000 8091 	beq.w	800e314 <uxr_prepare_output_stream_fragmented+0x144>
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f000 808d 	beq.w	800e314 <uxr_prepare_output_stream_fragmented+0x144>
 800e1fa:	f006 fd29 	bl	8014c50 <get_available_free_slots>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f000 8083 	beq.w	800e30a <uxr_prepare_output_stream_fragmented+0x13a>
 800e204:	8922      	ldrh	r2, [r4, #8]
 800e206:	89e7      	ldrh	r7, [r4, #14]
 800e208:	fbb7 f9f2 	udiv	r9, r7, r2
 800e20c:	fb02 7919 	mls	r9, r2, r9, r7
 800e210:	fa1f f989 	uxth.w	r9, r9
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	fbb3 f2f2 	udiv	r2, r3, r2
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	9203      	str	r2, [sp, #12]
 800e21e:	fb02 f909 	mul.w	r9, r2, r9
 800e222:	f109 0904 	add.w	r9, r9, #4
 800e226:	4499      	add	r9, r3
 800e228:	7b23      	ldrb	r3, [r4, #12]
 800e22a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e22e:	4543      	cmp	r3, r8
 800e230:	f1a2 0b04 	sub.w	fp, r2, #4
 800e234:	d37a      	bcc.n	800e32c <uxr_prepare_output_stream_fragmented+0x15c>
 800e236:	f1ab 0a04 	sub.w	sl, fp, #4
 800e23a:	ebaa 0a03 	sub.w	sl, sl, r3
 800e23e:	465a      	mov	r2, fp
 800e240:	2300      	movs	r3, #0
 800e242:	4649      	mov	r1, r9
 800e244:	a808      	add	r0, sp, #32
 800e246:	f8cd 8000 	str.w	r8, [sp]
 800e24a:	f7fe f88b 	bl	800c364 <ucdr_init_buffer_origin_offset>
 800e24e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e250:	fa1f fa8a 	uxth.w	sl, sl
 800e254:	4652      	mov	r2, sl
 800e256:	f103 0a08 	add.w	sl, r3, #8
 800e25a:	45da      	cmp	sl, fp
 800e25c:	bf34      	ite	cc
 800e25e:	2302      	movcc	r3, #2
 800e260:	2300      	movcs	r3, #0
 800e262:	210d      	movs	r1, #13
 800e264:	a808      	add	r0, sp, #32
 800e266:	f7ff fe83 	bl	800df70 <uxr_buffer_submessage_header>
 800e26a:	8921      	ldrh	r1, [r4, #8]
 800e26c:	fbb7 f2f1 	udiv	r2, r7, r1
 800e270:	fb01 7212 	mls	r2, r1, r2, r7
 800e274:	b292      	uxth	r2, r2
 800e276:	6863      	ldr	r3, [r4, #4]
 800e278:	fbb3 f3f1 	udiv	r3, r3, r1
 800e27c:	fb02 f303 	mul.w	r3, r2, r3
 800e280:	6822      	ldr	r2, [r4, #0]
 800e282:	4638      	mov	r0, r7
 800e284:	f842 b003 	str.w	fp, [r2, r3]
 800e288:	2101      	movs	r1, #1
 800e28a:	f006 fd01 	bl	8014c90 <uxr_seq_num_add>
 800e28e:	9b03      	ldr	r3, [sp, #12]
 800e290:	f108 0104 	add.w	r1, r8, #4
 800e294:	f1a3 0208 	sub.w	r2, r3, #8
 800e298:	eba2 0208 	sub.w	r2, r2, r8
 800e29c:	4449      	add	r1, r9
 800e29e:	4607      	mov	r7, r0
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f7fe f871 	bl	800c388 <ucdr_init_buffer>
 800e2a6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e2a8:	81e7      	strh	r7, [r4, #14]
 800e2aa:	1d1a      	adds	r2, r3, #4
 800e2ac:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e2b0:	bf28      	it	cs
 800e2b2:	2200      	movcs	r2, #0
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	b292      	uxth	r2, r2
 800e2b8:	2107      	movs	r1, #7
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	f7ff fe58 	bl	800df70 <uxr_buffer_submessage_header>
 800e2c0:	9904      	ldr	r1, [sp, #16]
 800e2c2:	aa07      	add	r2, sp, #28
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f7ff fceb 	bl	800dca0 <uxr_init_base_object_request>
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	b318      	cbz	r0, 800e316 <uxr_prepare_output_stream_fragmented+0x146>
 800e2ce:	a907      	add	r1, sp, #28
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f000 fff9 	bl	800f2c8 <uxr_serialize_WRITE_DATA_Payload_Data>
 800e2d6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e2da:	4630      	mov	r0, r6
 800e2dc:	1a52      	subs	r2, r2, r1
 800e2de:	f7fe f853 	bl	800c388 <ucdr_init_buffer>
 800e2e2:	9b05      	ldr	r3, [sp, #20]
 800e2e4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e2e8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e2ea:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e2ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e2f0:	491b      	ldr	r1, [pc, #108]	@ (800e360 <uxr_prepare_output_stream_fragmented+0x190>)
 800e2f2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e2fc:	462a      	mov	r2, r5
 800e2fe:	f7fe f817 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 800e302:	4620      	mov	r0, r4
 800e304:	b011      	add	sp, #68	@ 0x44
 800e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e30c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e30e:	4628      	mov	r0, r5
 800e310:	4798      	blx	r3
 800e312:	b920      	cbnz	r0, 800e31e <uxr_prepare_output_stream_fragmented+0x14e>
 800e314:	2400      	movs	r4, #0
 800e316:	4620      	mov	r0, r4
 800e318:	b011      	add	sp, #68	@ 0x44
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	4620      	mov	r0, r4
 800e320:	f006 fc96 	bl	8014c50 <get_available_free_slots>
 800e324:	2800      	cmp	r0, #0
 800e326:	f47f af6d 	bne.w	800e204 <uxr_prepare_output_stream_fragmented+0x34>
 800e32a:	e7f3      	b.n	800e314 <uxr_prepare_output_stream_fragmented+0x144>
 800e32c:	4638      	mov	r0, r7
 800e32e:	2101      	movs	r1, #1
 800e330:	f006 fcae 	bl	8014c90 <uxr_seq_num_add>
 800e334:	8921      	ldrh	r1, [r4, #8]
 800e336:	fbb0 f2f1 	udiv	r2, r0, r1
 800e33a:	fb01 0912 	mls	r9, r1, r2, r0
 800e33e:	fa1f f289 	uxth.w	r2, r9
 800e342:	6863      	ldr	r3, [r4, #4]
 800e344:	fbb3 f9f1 	udiv	r9, r3, r1
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	fb02 f909 	mul.w	r9, r2, r9
 800e34e:	f109 0904 	add.w	r9, r9, #4
 800e352:	4499      	add	r9, r3
 800e354:	4607      	mov	r7, r0
 800e356:	7b23      	ldrb	r3, [r4, #12]
 800e358:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e35c:	e76b      	b.n	800e236 <uxr_prepare_output_stream_fragmented+0x66>
 800e35e:	bf00      	nop
 800e360:	0800e05d 	.word	0x0800e05d

0800e364 <uxr_serialize_message_header>:
 800e364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e366:	b083      	sub	sp, #12
 800e368:	4616      	mov	r6, r2
 800e36a:	4604      	mov	r4, r0
 800e36c:	9301      	str	r3, [sp, #4]
 800e36e:	460d      	mov	r5, r1
 800e370:	9f08      	ldr	r7, [sp, #32]
 800e372:	f004 ff13 	bl	801319c <ucdr_serialize_uint8_t>
 800e376:	4631      	mov	r1, r6
 800e378:	4620      	mov	r0, r4
 800e37a:	f004 ff0f 	bl	801319c <ucdr_serialize_uint8_t>
 800e37e:	9a01      	ldr	r2, [sp, #4]
 800e380:	2101      	movs	r1, #1
 800e382:	4620      	mov	r0, r4
 800e384:	f004 ffb6 	bl	80132f4 <ucdr_serialize_endian_uint16_t>
 800e388:	062b      	lsls	r3, r5, #24
 800e38a:	d501      	bpl.n	800e390 <uxr_serialize_message_header+0x2c>
 800e38c:	b003      	add	sp, #12
 800e38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e390:	2204      	movs	r2, #4
 800e392:	4639      	mov	r1, r7
 800e394:	4620      	mov	r0, r4
 800e396:	b003      	add	sp, #12
 800e398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e39c:	f004 be08 	b.w	8012fb0 <ucdr_serialize_array_uint8_t>

0800e3a0 <uxr_deserialize_message_header>:
 800e3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	4616      	mov	r6, r2
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	460d      	mov	r5, r1
 800e3ac:	9f08      	ldr	r7, [sp, #32]
 800e3ae:	f004 ff0b 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e3b2:	4631      	mov	r1, r6
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f004 ff07 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e3ba:	9a01      	ldr	r2, [sp, #4]
 800e3bc:	2101      	movs	r1, #1
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f005 f88c 	bl	80134dc <ucdr_deserialize_endian_uint16_t>
 800e3c4:	f995 3000 	ldrsb.w	r3, [r5]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	da01      	bge.n	800e3d0 <uxr_deserialize_message_header+0x30>
 800e3cc:	b003      	add	sp, #12
 800e3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	4639      	mov	r1, r7
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	b003      	add	sp, #12
 800e3d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e3dc:	f004 be4c 	b.w	8013078 <ucdr_deserialize_array_uint8_t>

0800e3e0 <uxr_serialize_submessage_header>:
 800e3e0:	b530      	push	{r4, r5, lr}
 800e3e2:	b083      	sub	sp, #12
 800e3e4:	4615      	mov	r5, r2
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	f004 fed7 	bl	801319c <ucdr_serialize_uint8_t>
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f004 fed3 	bl	801319c <ucdr_serialize_uint8_t>
 800e3f6:	9a01      	ldr	r2, [sp, #4]
 800e3f8:	2101      	movs	r1, #1
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	b003      	add	sp, #12
 800e3fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e402:	f004 bf77 	b.w	80132f4 <ucdr_serialize_endian_uint16_t>
 800e406:	bf00      	nop

0800e408 <uxr_deserialize_submessage_header>:
 800e408:	b530      	push	{r4, r5, lr}
 800e40a:	b083      	sub	sp, #12
 800e40c:	4615      	mov	r5, r2
 800e40e:	4604      	mov	r4, r0
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	f004 fed9 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e416:	4629      	mov	r1, r5
 800e418:	4620      	mov	r0, r4
 800e41a:	f004 fed5 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e41e:	9a01      	ldr	r2, [sp, #4]
 800e420:	2101      	movs	r1, #1
 800e422:	4620      	mov	r0, r4
 800e424:	b003      	add	sp, #12
 800e426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e42a:	f005 b857 	b.w	80134dc <ucdr_deserialize_endian_uint16_t>
 800e42e:	bf00      	nop

0800e430 <uxr_serialize_CLIENT_Representation>:
 800e430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e434:	2204      	movs	r2, #4
 800e436:	460e      	mov	r6, r1
 800e438:	4605      	mov	r5, r0
 800e43a:	f004 fdb9 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e43e:	2202      	movs	r2, #2
 800e440:	4607      	mov	r7, r0
 800e442:	1d31      	adds	r1, r6, #4
 800e444:	4628      	mov	r0, r5
 800e446:	f004 fdb3 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e44a:	4038      	ands	r0, r7
 800e44c:	2202      	movs	r2, #2
 800e44e:	1db1      	adds	r1, r6, #6
 800e450:	b2c7      	uxtb	r7, r0
 800e452:	4628      	mov	r0, r5
 800e454:	f004 fdac 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e458:	2204      	movs	r2, #4
 800e45a:	4007      	ands	r7, r0
 800e45c:	f106 0108 	add.w	r1, r6, #8
 800e460:	4628      	mov	r0, r5
 800e462:	f004 fda5 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e466:	7b31      	ldrb	r1, [r6, #12]
 800e468:	4007      	ands	r7, r0
 800e46a:	4628      	mov	r0, r5
 800e46c:	f004 fe96 	bl	801319c <ucdr_serialize_uint8_t>
 800e470:	7b71      	ldrb	r1, [r6, #13]
 800e472:	4007      	ands	r7, r0
 800e474:	4628      	mov	r0, r5
 800e476:	f004 fe63 	bl	8013140 <ucdr_serialize_bool>
 800e47a:	7b73      	ldrb	r3, [r6, #13]
 800e47c:	ea07 0800 	and.w	r8, r7, r0
 800e480:	b93b      	cbnz	r3, 800e492 <uxr_serialize_CLIENT_Representation+0x62>
 800e482:	8bb1      	ldrh	r1, [r6, #28]
 800e484:	4628      	mov	r0, r5
 800e486:	f004 feb5 	bl	80131f4 <ucdr_serialize_uint16_t>
 800e48a:	ea08 0000 	and.w	r0, r8, r0
 800e48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e492:	6931      	ldr	r1, [r6, #16]
 800e494:	4628      	mov	r0, r5
 800e496:	f005 f897 	bl	80135c8 <ucdr_serialize_uint32_t>
 800e49a:	6933      	ldr	r3, [r6, #16]
 800e49c:	b1e3      	cbz	r3, 800e4d8 <uxr_serialize_CLIENT_Representation+0xa8>
 800e49e:	b1c0      	cbz	r0, 800e4d2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e4a0:	4637      	mov	r7, r6
 800e4a2:	f04f 0900 	mov.w	r9, #0
 800e4a6:	e001      	b.n	800e4ac <uxr_serialize_CLIENT_Representation+0x7c>
 800e4a8:	3708      	adds	r7, #8
 800e4aa:	b194      	cbz	r4, 800e4d2 <uxr_serialize_CLIENT_Representation+0xa2>
 800e4ac:	6979      	ldr	r1, [r7, #20]
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f005 fdcc 	bl	801404c <ucdr_serialize_string>
 800e4b4:	69b9      	ldr	r1, [r7, #24]
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f005 fdc7 	bl	801404c <ucdr_serialize_string>
 800e4be:	6933      	ldr	r3, [r6, #16]
 800e4c0:	f109 0901 	add.w	r9, r9, #1
 800e4c4:	4004      	ands	r4, r0
 800e4c6:	4599      	cmp	r9, r3
 800e4c8:	b2e4      	uxtb	r4, r4
 800e4ca:	d3ed      	bcc.n	800e4a8 <uxr_serialize_CLIENT_Representation+0x78>
 800e4cc:	ea08 0804 	and.w	r8, r8, r4
 800e4d0:	e7d7      	b.n	800e482 <uxr_serialize_CLIENT_Representation+0x52>
 800e4d2:	f04f 0800 	mov.w	r8, #0
 800e4d6:	e7d4      	b.n	800e482 <uxr_serialize_CLIENT_Representation+0x52>
 800e4d8:	ea08 0800 	and.w	r8, r8, r0
 800e4dc:	e7d1      	b.n	800e482 <uxr_serialize_CLIENT_Representation+0x52>
 800e4de:	bf00      	nop

0800e4e0 <uxr_deserialize_CLIENT_Representation>:
 800e4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4e4:	2204      	movs	r2, #4
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	4605      	mov	r5, r0
 800e4ea:	f004 fdc5 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800e4ee:	2202      	movs	r2, #2
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	1d21      	adds	r1, r4, #4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f004 fdbf 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800e4fa:	4038      	ands	r0, r7
 800e4fc:	2202      	movs	r2, #2
 800e4fe:	1da1      	adds	r1, r4, #6
 800e500:	b2c6      	uxtb	r6, r0
 800e502:	4628      	mov	r0, r5
 800e504:	f004 fdb8 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800e508:	2204      	movs	r2, #4
 800e50a:	4006      	ands	r6, r0
 800e50c:	f104 0108 	add.w	r1, r4, #8
 800e510:	4628      	mov	r0, r5
 800e512:	f004 fdb1 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800e516:	f104 010c 	add.w	r1, r4, #12
 800e51a:	4006      	ands	r6, r0
 800e51c:	4628      	mov	r0, r5
 800e51e:	f004 fe53 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e522:	f104 010d 	add.w	r1, r4, #13
 800e526:	ea06 0700 	and.w	r7, r6, r0
 800e52a:	4628      	mov	r0, r5
 800e52c:	f004 fe1e 	bl	801316c <ucdr_deserialize_bool>
 800e530:	7b63      	ldrb	r3, [r4, #13]
 800e532:	4007      	ands	r7, r0
 800e534:	b93b      	cbnz	r3, 800e546 <uxr_deserialize_CLIENT_Representation+0x66>
 800e536:	f104 011c 	add.w	r1, r4, #28
 800e53a:	4628      	mov	r0, r5
 800e53c:	f004 ff5a 	bl	80133f4 <ucdr_deserialize_uint16_t>
 800e540:	4038      	ands	r0, r7
 800e542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e546:	f104 0110 	add.w	r1, r4, #16
 800e54a:	4628      	mov	r0, r5
 800e54c:	f005 f96c 	bl	8013828 <ucdr_deserialize_uint32_t>
 800e550:	6923      	ldr	r3, [r4, #16]
 800e552:	2b01      	cmp	r3, #1
 800e554:	d903      	bls.n	800e55e <uxr_deserialize_CLIENT_Representation+0x7e>
 800e556:	2301      	movs	r3, #1
 800e558:	75ab      	strb	r3, [r5, #22]
 800e55a:	2700      	movs	r7, #0
 800e55c:	e7eb      	b.n	800e536 <uxr_deserialize_CLIENT_Representation+0x56>
 800e55e:	b30b      	cbz	r3, 800e5a4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e560:	2800      	cmp	r0, #0
 800e562:	d0fa      	beq.n	800e55a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e564:	46a0      	mov	r8, r4
 800e566:	f04f 0900 	mov.w	r9, #0
 800e56a:	e001      	b.n	800e570 <uxr_deserialize_CLIENT_Representation+0x90>
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	d0f4      	beq.n	800e55a <uxr_deserialize_CLIENT_Representation+0x7a>
 800e570:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e578:	4628      	mov	r0, r5
 800e57a:	f005 fd77 	bl	801406c <ucdr_deserialize_string>
 800e57e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e582:	4606      	mov	r6, r0
 800e584:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800e588:	4628      	mov	r0, r5
 800e58a:	f005 fd6f 	bl	801406c <ucdr_deserialize_string>
 800e58e:	6923      	ldr	r3, [r4, #16]
 800e590:	f109 0901 	add.w	r9, r9, #1
 800e594:	4006      	ands	r6, r0
 800e596:	4599      	cmp	r9, r3
 800e598:	f108 0808 	add.w	r8, r8, #8
 800e59c:	b2f6      	uxtb	r6, r6
 800e59e:	d3e5      	bcc.n	800e56c <uxr_deserialize_CLIENT_Representation+0x8c>
 800e5a0:	4037      	ands	r7, r6
 800e5a2:	e7c8      	b.n	800e536 <uxr_deserialize_CLIENT_Representation+0x56>
 800e5a4:	4007      	ands	r7, r0
 800e5a6:	e7c6      	b.n	800e536 <uxr_deserialize_CLIENT_Representation+0x56>

0800e5a8 <uxr_serialize_AGENT_Representation>:
 800e5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ac:	2204      	movs	r2, #4
 800e5ae:	460f      	mov	r7, r1
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	f004 fcfd 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	1d39      	adds	r1, r7, #4
 800e5bc:	4628      	mov	r0, r5
 800e5be:	f004 fcf7 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e5c2:	4020      	ands	r0, r4
 800e5c4:	2202      	movs	r2, #2
 800e5c6:	1db9      	adds	r1, r7, #6
 800e5c8:	b2c4      	uxtb	r4, r0
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f004 fcf0 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e5d0:	7a39      	ldrb	r1, [r7, #8]
 800e5d2:	4004      	ands	r4, r0
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	f004 fdb3 	bl	8013140 <ucdr_serialize_bool>
 800e5da:	7a3b      	ldrb	r3, [r7, #8]
 800e5dc:	ea00 0804 	and.w	r8, r0, r4
 800e5e0:	b913      	cbnz	r3, 800e5e8 <uxr_serialize_AGENT_Representation+0x40>
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e8:	68f9      	ldr	r1, [r7, #12]
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f004 ffec 	bl	80135c8 <ucdr_serialize_uint32_t>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	b303      	cbz	r3, 800e636 <uxr_serialize_AGENT_Representation+0x8e>
 800e5f4:	b1d0      	cbz	r0, 800e62c <uxr_serialize_AGENT_Representation+0x84>
 800e5f6:	463e      	mov	r6, r7
 800e5f8:	f04f 0900 	mov.w	r9, #0
 800e5fc:	e001      	b.n	800e602 <uxr_serialize_AGENT_Representation+0x5a>
 800e5fe:	3608      	adds	r6, #8
 800e600:	b1a4      	cbz	r4, 800e62c <uxr_serialize_AGENT_Representation+0x84>
 800e602:	6931      	ldr	r1, [r6, #16]
 800e604:	4628      	mov	r0, r5
 800e606:	f005 fd21 	bl	801404c <ucdr_serialize_string>
 800e60a:	6971      	ldr	r1, [r6, #20]
 800e60c:	4604      	mov	r4, r0
 800e60e:	4628      	mov	r0, r5
 800e610:	f005 fd1c 	bl	801404c <ucdr_serialize_string>
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f109 0901 	add.w	r9, r9, #1
 800e61a:	4004      	ands	r4, r0
 800e61c:	4599      	cmp	r9, r3
 800e61e:	b2e4      	uxtb	r4, r4
 800e620:	d3ed      	bcc.n	800e5fe <uxr_serialize_AGENT_Representation+0x56>
 800e622:	ea08 0804 	and.w	r8, r8, r4
 800e626:	4640      	mov	r0, r8
 800e628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e62c:	f04f 0800 	mov.w	r8, #0
 800e630:	4640      	mov	r0, r8
 800e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e636:	ea08 0800 	and.w	r8, r8, r0
 800e63a:	e7d2      	b.n	800e5e2 <uxr_serialize_AGENT_Representation+0x3a>

0800e63c <uxr_serialize_DATAWRITER_Representation>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	460d      	mov	r5, r1
 800e640:	7809      	ldrb	r1, [r1, #0]
 800e642:	4606      	mov	r6, r0
 800e644:	f004 fdaa 	bl	801319c <ucdr_serialize_uint8_t>
 800e648:	4604      	mov	r4, r0
 800e64a:	b130      	cbz	r0, 800e65a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e64c:	782b      	ldrb	r3, [r5, #0]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d00c      	beq.n	800e66c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e652:	2b03      	cmp	r3, #3
 800e654:	d010      	beq.n	800e678 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800e656:	2b01      	cmp	r3, #1
 800e658:	d008      	beq.n	800e66c <uxr_serialize_DATAWRITER_Representation+0x30>
 800e65a:	2202      	movs	r2, #2
 800e65c:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e660:	4630      	mov	r0, r6
 800e662:	f004 fca5 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e666:	4020      	ands	r0, r4
 800e668:	b2c0      	uxtb	r0, r0
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	6869      	ldr	r1, [r5, #4]
 800e66e:	4630      	mov	r0, r6
 800e670:	f005 fcec 	bl	801404c <ucdr_serialize_string>
 800e674:	4604      	mov	r4, r0
 800e676:	e7f0      	b.n	800e65a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e678:	4629      	mov	r1, r5
 800e67a:	4630      	mov	r0, r6
 800e67c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800e680:	3104      	adds	r1, #4
 800e682:	f7fd ff1d 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800e686:	4604      	mov	r4, r0
 800e688:	e7e7      	b.n	800e65a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800e68a:	bf00      	nop

0800e68c <uxr_serialize_ObjectVariant.part.0>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	780b      	ldrb	r3, [r1, #0]
 800e690:	3b01      	subs	r3, #1
 800e692:	460c      	mov	r4, r1
 800e694:	4605      	mov	r5, r0
 800e696:	2b0d      	cmp	r3, #13
 800e698:	d854      	bhi.n	800e744 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e69a:	e8df f003 	tbb	[pc, r3]
 800e69e:	0730      	.short	0x0730
 800e6a0:	07071b1b 	.word	0x07071b1b
 800e6a4:	0c530707 	.word	0x0c530707
 800e6a8:	494e0c0c 	.word	0x494e0c0c
 800e6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b0:	3104      	adds	r1, #4
 800e6b2:	f7ff bfc3 	b.w	800e63c <uxr_serialize_DATAWRITER_Representation>
 800e6b6:	7909      	ldrb	r1, [r1, #4]
 800e6b8:	f004 fd70 	bl	801319c <ucdr_serialize_uint8_t>
 800e6bc:	b1e8      	cbz	r0, 800e6fa <uxr_serialize_ObjectVariant.part.0+0x6e>
 800e6be:	7923      	ldrb	r3, [r4, #4]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d001      	beq.n	800e6c8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d13d      	bne.n	800e744 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e6c8:	68a1      	ldr	r1, [r4, #8]
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6d0:	f005 bcbc 	b.w	801404c <ucdr_serialize_string>
 800e6d4:	7909      	ldrb	r1, [r1, #4]
 800e6d6:	f004 fd61 	bl	801319c <ucdr_serialize_uint8_t>
 800e6da:	4606      	mov	r6, r0
 800e6dc:	b120      	cbz	r0, 800e6e8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e6de:	7923      	ldrb	r3, [r4, #4]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d039      	beq.n	800e758 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e6e4:	2b03      	cmp	r3, #3
 800e6e6:	d02f      	beq.n	800e748 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e6e8:	2202      	movs	r2, #2
 800e6ea:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f004 fc5e 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800e6f4:	4030      	ands	r0, r6
 800e6f6:	b2c0      	uxtb	r0, r0
 800e6f8:	bd70      	pop	{r4, r5, r6, pc}
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	bd70      	pop	{r4, r5, r6, pc}
 800e6fe:	7909      	ldrb	r1, [r1, #4]
 800e700:	f004 fd4c 	bl	801319c <ucdr_serialize_uint8_t>
 800e704:	4606      	mov	r6, r0
 800e706:	b158      	cbz	r0, 800e720 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e708:	7923      	ldrb	r3, [r4, #4]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d003      	beq.n	800e716 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d028      	beq.n	800e764 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e712:	2b01      	cmp	r3, #1
 800e714:	d104      	bne.n	800e720 <uxr_serialize_ObjectVariant.part.0+0x94>
 800e716:	68a1      	ldr	r1, [r4, #8]
 800e718:	4628      	mov	r0, r5
 800e71a:	f005 fc97 	bl	801404c <ucdr_serialize_string>
 800e71e:	4606      	mov	r6, r0
 800e720:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e724:	4628      	mov	r0, r5
 800e726:	f005 fa75 	bl	8013c14 <ucdr_serialize_int16_t>
 800e72a:	4030      	ands	r0, r6
 800e72c:	b2c0      	uxtb	r0, r0
 800e72e:	bd70      	pop	{r4, r5, r6, pc}
 800e730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e734:	3104      	adds	r1, #4
 800e736:	f7ff be7b 	b.w	800e430 <uxr_serialize_CLIENT_Representation>
 800e73a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e73e:	3104      	adds	r1, #4
 800e740:	f7ff bf32 	b.w	800e5a8 <uxr_serialize_AGENT_Representation>
 800e744:	2001      	movs	r0, #1
 800e746:	bd70      	pop	{r4, r5, r6, pc}
 800e748:	68a2      	ldr	r2, [r4, #8]
 800e74a:	f104 010c 	add.w	r1, r4, #12
 800e74e:	4628      	mov	r0, r5
 800e750:	f7fd feb6 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800e754:	4606      	mov	r6, r0
 800e756:	e7c7      	b.n	800e6e8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e758:	68a1      	ldr	r1, [r4, #8]
 800e75a:	4628      	mov	r0, r5
 800e75c:	f005 fc76 	bl	801404c <ucdr_serialize_string>
 800e760:	4606      	mov	r6, r0
 800e762:	e7c1      	b.n	800e6e8 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e764:	68a2      	ldr	r2, [r4, #8]
 800e766:	f104 010c 	add.w	r1, r4, #12
 800e76a:	4628      	mov	r0, r5
 800e76c:	f7fd fea8 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800e770:	4606      	mov	r6, r0
 800e772:	e7d5      	b.n	800e720 <uxr_serialize_ObjectVariant.part.0+0x94>

0800e774 <uxr_deserialize_DATAWRITER_Representation>:
 800e774:	b570      	push	{r4, r5, r6, lr}
 800e776:	4606      	mov	r6, r0
 800e778:	460d      	mov	r5, r1
 800e77a:	f004 fd25 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800e77e:	4604      	mov	r4, r0
 800e780:	b130      	cbz	r0, 800e790 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e782:	782b      	ldrb	r3, [r5, #0]
 800e784:	2b02      	cmp	r3, #2
 800e786:	d00c      	beq.n	800e7a2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e788:	2b03      	cmp	r3, #3
 800e78a:	d012      	beq.n	800e7b2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d008      	beq.n	800e7a2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e790:	2202      	movs	r2, #2
 800e792:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e796:	4630      	mov	r0, r6
 800e798:	f004 fc6e 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800e79c:	4020      	ands	r0, r4
 800e79e:	b2c0      	uxtb	r0, r0
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	6869      	ldr	r1, [r5, #4]
 800e7a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f005 fc5f 	bl	801406c <ucdr_deserialize_string>
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	e7ee      	b.n	800e790 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e7b2:	1d2b      	adds	r3, r5, #4
 800e7b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e7b8:	f105 0108 	add.w	r1, r5, #8
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7fd fe91 	bl	800c4e4 <ucdr_deserialize_sequence_uint8_t>
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	e7e4      	b.n	800e790 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e7c6:	bf00      	nop

0800e7c8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	7809      	ldrb	r1, [r1, #0]
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	f004 fcb6 	bl	8013140 <ucdr_serialize_bool>
 800e7d4:	782b      	ldrb	r3, [r5, #0]
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	b94b      	cbnz	r3, 800e7ee <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e7da:	7a29      	ldrb	r1, [r5, #8]
 800e7dc:	4630      	mov	r0, r6
 800e7de:	f004 fcaf 	bl	8013140 <ucdr_serialize_bool>
 800e7e2:	7a2b      	ldrb	r3, [r5, #8]
 800e7e4:	4004      	ands	r4, r0
 800e7e6:	b2e4      	uxtb	r4, r4
 800e7e8:	b943      	cbnz	r3, 800e7fc <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
 800e7ee:	6869      	ldr	r1, [r5, #4]
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f005 fc2b 	bl	801404c <ucdr_serialize_string>
 800e7f6:	4004      	ands	r4, r0
 800e7f8:	b2e4      	uxtb	r4, r4
 800e7fa:	e7ee      	b.n	800e7da <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e7fc:	68e9      	ldr	r1, [r5, #12]
 800e7fe:	4630      	mov	r0, r6
 800e800:	f005 fc24 	bl	801404c <ucdr_serialize_string>
 800e804:	4004      	ands	r4, r0
 800e806:	4620      	mov	r0, r4
 800e808:	bd70      	pop	{r4, r5, r6, pc}
 800e80a:	bf00      	nop

0800e80c <uxr_serialize_OBJK_Topic_Binary>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	460d      	mov	r5, r1
 800e810:	6809      	ldr	r1, [r1, #0]
 800e812:	4606      	mov	r6, r0
 800e814:	f005 fc1a 	bl	801404c <ucdr_serialize_string>
 800e818:	7929      	ldrb	r1, [r5, #4]
 800e81a:	4604      	mov	r4, r0
 800e81c:	4630      	mov	r0, r6
 800e81e:	f004 fc8f 	bl	8013140 <ucdr_serialize_bool>
 800e822:	792b      	ldrb	r3, [r5, #4]
 800e824:	4004      	ands	r4, r0
 800e826:	b2e4      	uxtb	r4, r4
 800e828:	b943      	cbnz	r3, 800e83c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e82a:	7b29      	ldrb	r1, [r5, #12]
 800e82c:	4630      	mov	r0, r6
 800e82e:	f004 fc87 	bl	8013140 <ucdr_serialize_bool>
 800e832:	7b2b      	ldrb	r3, [r5, #12]
 800e834:	4004      	ands	r4, r0
 800e836:	b93b      	cbnz	r3, 800e848 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e838:	4620      	mov	r0, r4
 800e83a:	bd70      	pop	{r4, r5, r6, pc}
 800e83c:	68a9      	ldr	r1, [r5, #8]
 800e83e:	4630      	mov	r0, r6
 800e840:	f005 fc04 	bl	801404c <ucdr_serialize_string>
 800e844:	4004      	ands	r4, r0
 800e846:	e7f0      	b.n	800e82a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e848:	6929      	ldr	r1, [r5, #16]
 800e84a:	4630      	mov	r0, r6
 800e84c:	f005 fbfe 	bl	801404c <ucdr_serialize_string>
 800e850:	4004      	ands	r4, r0
 800e852:	b2e4      	uxtb	r4, r4
 800e854:	4620      	mov	r0, r4
 800e856:	bd70      	pop	{r4, r5, r6, pc}

0800e858 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	460c      	mov	r4, r1
 800e85e:	7809      	ldrb	r1, [r1, #0]
 800e860:	4606      	mov	r6, r0
 800e862:	f004 fc6d 	bl	8013140 <ucdr_serialize_bool>
 800e866:	7823      	ldrb	r3, [r4, #0]
 800e868:	4605      	mov	r5, r0
 800e86a:	b96b      	cbnz	r3, 800e888 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e86c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e870:	4630      	mov	r0, r6
 800e872:	f004 fc65 	bl	8013140 <ucdr_serialize_bool>
 800e876:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e87a:	4005      	ands	r5, r0
 800e87c:	b2ed      	uxtb	r5, r5
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d169      	bne.n	800e956 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e882:	4628      	mov	r0, r5
 800e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e888:	6861      	ldr	r1, [r4, #4]
 800e88a:	4630      	mov	r0, r6
 800e88c:	f004 fe9c 	bl	80135c8 <ucdr_serialize_uint32_t>
 800e890:	6863      	ldr	r3, [r4, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d06b      	beq.n	800e96e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e896:	2800      	cmp	r0, #0
 800e898:	d067      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e89a:	68a1      	ldr	r1, [r4, #8]
 800e89c:	4630      	mov	r0, r6
 800e89e:	f005 fbd5 	bl	801404c <ucdr_serialize_string>
 800e8a2:	6863      	ldr	r3, [r4, #4]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d953      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d05e      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8ac:	68e1      	ldr	r1, [r4, #12]
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f005 fbcc 	bl	801404c <ucdr_serialize_string>
 800e8b4:	6863      	ldr	r3, [r4, #4]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d94a      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8ba:	2800      	cmp	r0, #0
 800e8bc:	d055      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8be:	6921      	ldr	r1, [r4, #16]
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	f005 fbc3 	bl	801404c <ucdr_serialize_string>
 800e8c6:	6863      	ldr	r3, [r4, #4]
 800e8c8:	2b03      	cmp	r3, #3
 800e8ca:	d941      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d04c      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8d0:	6961      	ldr	r1, [r4, #20]
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f005 fbba 	bl	801404c <ucdr_serialize_string>
 800e8d8:	6863      	ldr	r3, [r4, #4]
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	d938      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	d043      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8e2:	69a1      	ldr	r1, [r4, #24]
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	f005 fbb1 	bl	801404c <ucdr_serialize_string>
 800e8ea:	6863      	ldr	r3, [r4, #4]
 800e8ec:	2b05      	cmp	r3, #5
 800e8ee:	d92f      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d03a      	beq.n	800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e8f4:	69e1      	ldr	r1, [r4, #28]
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f005 fba8 	bl	801404c <ucdr_serialize_string>
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	2b06      	cmp	r3, #6
 800e900:	d926      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e902:	b390      	cbz	r0, 800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e904:	6a21      	ldr	r1, [r4, #32]
 800e906:	4630      	mov	r0, r6
 800e908:	f005 fba0 	bl	801404c <ucdr_serialize_string>
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	2b07      	cmp	r3, #7
 800e910:	d91e      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e912:	b350      	cbz	r0, 800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e914:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e916:	4630      	mov	r0, r6
 800e918:	f005 fb98 	bl	801404c <ucdr_serialize_string>
 800e91c:	6863      	ldr	r3, [r4, #4]
 800e91e:	2b08      	cmp	r3, #8
 800e920:	d916      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e922:	b310      	cbz	r0, 800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e924:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e926:	4630      	mov	r0, r6
 800e928:	f005 fb90 	bl	801404c <ucdr_serialize_string>
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	2b09      	cmp	r3, #9
 800e930:	d90e      	bls.n	800e950 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e932:	b1d0      	cbz	r0, 800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e934:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e938:	2709      	movs	r7, #9
 800e93a:	e000      	b.n	800e93e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e93c:	b1a8      	cbz	r0, 800e96a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e93e:	f858 1b04 	ldr.w	r1, [r8], #4
 800e942:	4630      	mov	r0, r6
 800e944:	f005 fb82 	bl	801404c <ucdr_serialize_string>
 800e948:	6862      	ldr	r2, [r4, #4]
 800e94a:	3701      	adds	r7, #1
 800e94c:	4297      	cmp	r7, r2
 800e94e:	d3f5      	bcc.n	800e93c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e950:	4005      	ands	r5, r0
 800e952:	b2ed      	uxtb	r5, r5
 800e954:	e78a      	b.n	800e86c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e956:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e958:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e95c:	4630      	mov	r0, r6
 800e95e:	f7fd fdaf 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800e962:	4005      	ands	r5, r0
 800e964:	4628      	mov	r0, r5
 800e966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e96a:	2500      	movs	r5, #0
 800e96c:	e77e      	b.n	800e86c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e96e:	4028      	ands	r0, r5
 800e970:	b2c5      	uxtb	r5, r0
 800e972:	e77b      	b.n	800e86c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e974 <uxr_serialize_OBJK_Publisher_Binary>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	460d      	mov	r5, r1
 800e978:	7809      	ldrb	r1, [r1, #0]
 800e97a:	4606      	mov	r6, r0
 800e97c:	f004 fbe0 	bl	8013140 <ucdr_serialize_bool>
 800e980:	782b      	ldrb	r3, [r5, #0]
 800e982:	4604      	mov	r4, r0
 800e984:	b94b      	cbnz	r3, 800e99a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e986:	7a29      	ldrb	r1, [r5, #8]
 800e988:	4630      	mov	r0, r6
 800e98a:	f004 fbd9 	bl	8013140 <ucdr_serialize_bool>
 800e98e:	7a2b      	ldrb	r3, [r5, #8]
 800e990:	4004      	ands	r4, r0
 800e992:	b2e4      	uxtb	r4, r4
 800e994:	b943      	cbnz	r3, 800e9a8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e996:	4620      	mov	r0, r4
 800e998:	bd70      	pop	{r4, r5, r6, pc}
 800e99a:	6869      	ldr	r1, [r5, #4]
 800e99c:	4630      	mov	r0, r6
 800e99e:	f005 fb55 	bl	801404c <ucdr_serialize_string>
 800e9a2:	4004      	ands	r4, r0
 800e9a4:	b2e4      	uxtb	r4, r4
 800e9a6:	e7ee      	b.n	800e986 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e9a8:	f105 010c 	add.w	r1, r5, #12
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	f7ff ff53 	bl	800e858 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e9b2:	4004      	ands	r4, r0
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}

0800e9b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800e9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9bc:	460c      	mov	r4, r1
 800e9be:	7809      	ldrb	r1, [r1, #0]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	f004 fbbd 	bl	8013140 <ucdr_serialize_bool>
 800e9c6:	7823      	ldrb	r3, [r4, #0]
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	b96b      	cbnz	r3, 800e9e8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800e9cc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f004 fbb5 	bl	8013140 <ucdr_serialize_bool>
 800e9d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e9da:	4005      	ands	r5, r0
 800e9dc:	b2ed      	uxtb	r5, r5
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d169      	bne.n	800eab6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9e8:	6861      	ldr	r1, [r4, #4]
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f004 fdec 	bl	80135c8 <ucdr_serialize_uint32_t>
 800e9f0:	6863      	ldr	r3, [r4, #4]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d06b      	beq.n	800eace <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d067      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800e9fa:	68a1      	ldr	r1, [r4, #8]
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f005 fb25 	bl	801404c <ucdr_serialize_string>
 800ea02:	6863      	ldr	r3, [r4, #4]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d953      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d05e      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea0c:	68e1      	ldr	r1, [r4, #12]
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f005 fb1c 	bl	801404c <ucdr_serialize_string>
 800ea14:	6863      	ldr	r3, [r4, #4]
 800ea16:	2b02      	cmp	r3, #2
 800ea18:	d94a      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d055      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea1e:	6921      	ldr	r1, [r4, #16]
 800ea20:	4630      	mov	r0, r6
 800ea22:	f005 fb13 	bl	801404c <ucdr_serialize_string>
 800ea26:	6863      	ldr	r3, [r4, #4]
 800ea28:	2b03      	cmp	r3, #3
 800ea2a:	d941      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	d04c      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea30:	6961      	ldr	r1, [r4, #20]
 800ea32:	4630      	mov	r0, r6
 800ea34:	f005 fb0a 	bl	801404c <ucdr_serialize_string>
 800ea38:	6863      	ldr	r3, [r4, #4]
 800ea3a:	2b04      	cmp	r3, #4
 800ea3c:	d938      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d043      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea42:	69a1      	ldr	r1, [r4, #24]
 800ea44:	4630      	mov	r0, r6
 800ea46:	f005 fb01 	bl	801404c <ucdr_serialize_string>
 800ea4a:	6863      	ldr	r3, [r4, #4]
 800ea4c:	2b05      	cmp	r3, #5
 800ea4e:	d92f      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d03a      	beq.n	800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea54:	69e1      	ldr	r1, [r4, #28]
 800ea56:	4630      	mov	r0, r6
 800ea58:	f005 faf8 	bl	801404c <ucdr_serialize_string>
 800ea5c:	6863      	ldr	r3, [r4, #4]
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d926      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea62:	b390      	cbz	r0, 800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea64:	6a21      	ldr	r1, [r4, #32]
 800ea66:	4630      	mov	r0, r6
 800ea68:	f005 faf0 	bl	801404c <ucdr_serialize_string>
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	2b07      	cmp	r3, #7
 800ea70:	d91e      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea72:	b350      	cbz	r0, 800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea74:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ea76:	4630      	mov	r0, r6
 800ea78:	f005 fae8 	bl	801404c <ucdr_serialize_string>
 800ea7c:	6863      	ldr	r3, [r4, #4]
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	d916      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea82:	b310      	cbz	r0, 800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea84:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ea86:	4630      	mov	r0, r6
 800ea88:	f005 fae0 	bl	801404c <ucdr_serialize_string>
 800ea8c:	6863      	ldr	r3, [r4, #4]
 800ea8e:	2b09      	cmp	r3, #9
 800ea90:	d90e      	bls.n	800eab0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800ea92:	b1d0      	cbz	r0, 800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea94:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800ea98:	2709      	movs	r7, #9
 800ea9a:	e000      	b.n	800ea9e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800ea9c:	b1a8      	cbz	r0, 800eaca <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800ea9e:	f858 1b04 	ldr.w	r1, [r8], #4
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f005 fad2 	bl	801404c <ucdr_serialize_string>
 800eaa8:	6862      	ldr	r2, [r4, #4]
 800eaaa:	3701      	adds	r7, #1
 800eaac:	4297      	cmp	r7, r2
 800eaae:	d3f5      	bcc.n	800ea9c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800eab0:	4005      	ands	r5, r0
 800eab2:	b2ed      	uxtb	r5, r5
 800eab4:	e78a      	b.n	800e9cc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800eab6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eab8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800eabc:	4630      	mov	r0, r6
 800eabe:	f7fd fcff 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800eac2:	4005      	ands	r5, r0
 800eac4:	4628      	mov	r0, r5
 800eac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaca:	2500      	movs	r5, #0
 800eacc:	e77e      	b.n	800e9cc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800eace:	4028      	ands	r0, r5
 800ead0:	b2c5      	uxtb	r5, r0
 800ead2:	e77b      	b.n	800e9cc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800ead4 <uxr_serialize_OBJK_Subscriber_Binary>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	460d      	mov	r5, r1
 800ead8:	7809      	ldrb	r1, [r1, #0]
 800eada:	4606      	mov	r6, r0
 800eadc:	f004 fb30 	bl	8013140 <ucdr_serialize_bool>
 800eae0:	782b      	ldrb	r3, [r5, #0]
 800eae2:	4604      	mov	r4, r0
 800eae4:	b94b      	cbnz	r3, 800eafa <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800eae6:	7a29      	ldrb	r1, [r5, #8]
 800eae8:	4630      	mov	r0, r6
 800eaea:	f004 fb29 	bl	8013140 <ucdr_serialize_bool>
 800eaee:	7a2b      	ldrb	r3, [r5, #8]
 800eaf0:	4004      	ands	r4, r0
 800eaf2:	b2e4      	uxtb	r4, r4
 800eaf4:	b943      	cbnz	r3, 800eb08 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	6869      	ldr	r1, [r5, #4]
 800eafc:	4630      	mov	r0, r6
 800eafe:	f005 faa5 	bl	801404c <ucdr_serialize_string>
 800eb02:	4004      	ands	r4, r0
 800eb04:	b2e4      	uxtb	r4, r4
 800eb06:	e7ee      	b.n	800eae6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800eb08:	f105 010c 	add.w	r1, r5, #12
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f7ff ff53 	bl	800e9b8 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800eb12:	4004      	ands	r4, r0
 800eb14:	4620      	mov	r0, r4
 800eb16:	bd70      	pop	{r4, r5, r6, pc}

0800eb18 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800eb18:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800eb1c:	4688      	mov	r8, r1
 800eb1e:	8809      	ldrh	r1, [r1, #0]
 800eb20:	4681      	mov	r9, r0
 800eb22:	f004 fb67 	bl	80131f4 <ucdr_serialize_uint16_t>
 800eb26:	f898 1002 	ldrb.w	r1, [r8, #2]
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	4648      	mov	r0, r9
 800eb2e:	f004 fb07 	bl	8013140 <ucdr_serialize_bool>
 800eb32:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eb36:	4006      	ands	r6, r0
 800eb38:	b2f5      	uxtb	r5, r6
 800eb3a:	b9eb      	cbnz	r3, 800eb78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800eb3c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800eb40:	4648      	mov	r0, r9
 800eb42:	f004 fafd 	bl	8013140 <ucdr_serialize_bool>
 800eb46:	f898 3006 	ldrb.w	r3, [r8, #6]
 800eb4a:	4005      	ands	r5, r0
 800eb4c:	bb7b      	cbnz	r3, 800ebae <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800eb4e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800eb52:	4648      	mov	r0, r9
 800eb54:	f004 faf4 	bl	8013140 <ucdr_serialize_bool>
 800eb58:	f898 300c 	ldrb.w	r3, [r8, #12]
 800eb5c:	4005      	ands	r5, r0
 800eb5e:	b9f3      	cbnz	r3, 800eb9e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800eb60:	f898 1014 	ldrb.w	r1, [r8, #20]
 800eb64:	4648      	mov	r0, r9
 800eb66:	f004 faeb 	bl	8013140 <ucdr_serialize_bool>
 800eb6a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800eb6e:	4005      	ands	r5, r0
 800eb70:	b94b      	cbnz	r3, 800eb86 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800eb72:	4628      	mov	r0, r5
 800eb74:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eb78:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800eb7c:	4648      	mov	r0, r9
 800eb7e:	f004 fb39 	bl	80131f4 <ucdr_serialize_uint16_t>
 800eb82:	4005      	ands	r5, r0
 800eb84:	e7da      	b.n	800eb3c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800eb86:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800eb8a:	f108 011c 	add.w	r1, r8, #28
 800eb8e:	4648      	mov	r0, r9
 800eb90:	f7fd fc96 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800eb94:	4028      	ands	r0, r5
 800eb96:	b2c5      	uxtb	r5, r0
 800eb98:	4628      	mov	r0, r5
 800eb9a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eb9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eba2:	4648      	mov	r0, r9
 800eba4:	f004 fd10 	bl	80135c8 <ucdr_serialize_uint32_t>
 800eba8:	4028      	ands	r0, r5
 800ebaa:	b2c5      	uxtb	r5, r0
 800ebac:	e7d8      	b.n	800eb60 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800ebae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800ebb2:	4648      	mov	r0, r9
 800ebb4:	f004 fd08 	bl	80135c8 <ucdr_serialize_uint32_t>
 800ebb8:	4028      	ands	r0, r5
 800ebba:	b2c5      	uxtb	r5, r0
 800ebbc:	e7c7      	b.n	800eb4e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800ebbe:	bf00      	nop

0800ebc0 <uxr_serialize_OBJK_DataReader_Binary>:
 800ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	4606      	mov	r6, r0
 800ebc8:	f004 f9f2 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800ebcc:	78a1      	ldrb	r1, [r4, #2]
 800ebce:	4605      	mov	r5, r0
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	f004 fab5 	bl	8013140 <ucdr_serialize_bool>
 800ebd6:	78a3      	ldrb	r3, [r4, #2]
 800ebd8:	4005      	ands	r5, r0
 800ebda:	b2ed      	uxtb	r5, r5
 800ebdc:	b90b      	cbnz	r3, 800ebe2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800ebde:	4628      	mov	r0, r5
 800ebe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe2:	f104 0108 	add.w	r1, r4, #8
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f7ff ff96 	bl	800eb18 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ebec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f004 faa4 	bl	8013140 <ucdr_serialize_bool>
 800ebf8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ebfc:	4038      	ands	r0, r7
 800ebfe:	b2c7      	uxtb	r7, r0
 800ec00:	b95b      	cbnz	r3, 800ec1a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800ec02:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800ec06:	4630      	mov	r0, r6
 800ec08:	f004 fa9a 	bl	8013140 <ucdr_serialize_bool>
 800ec0c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800ec10:	4007      	ands	r7, r0
 800ec12:	b94b      	cbnz	r3, 800ec28 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800ec14:	403d      	ands	r5, r7
 800ec16:	4628      	mov	r0, r5
 800ec18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec1a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800ec1e:	4630      	mov	r0, r6
 800ec20:	f004 ff28 	bl	8013a74 <ucdr_serialize_uint64_t>
 800ec24:	4007      	ands	r7, r0
 800ec26:	e7ec      	b.n	800ec02 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800ec28:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800ec2a:	4630      	mov	r0, r6
 800ec2c:	f005 fa0e 	bl	801404c <ucdr_serialize_string>
 800ec30:	4007      	ands	r7, r0
 800ec32:	b2ff      	uxtb	r7, r7
 800ec34:	e7ee      	b.n	800ec14 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800ec36:	bf00      	nop

0800ec38 <uxr_serialize_OBJK_DataWriter_Binary>:
 800ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	4606      	mov	r6, r0
 800ec40:	f004 f9b6 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800ec44:	78a9      	ldrb	r1, [r5, #2]
 800ec46:	4604      	mov	r4, r0
 800ec48:	4630      	mov	r0, r6
 800ec4a:	f004 fa79 	bl	8013140 <ucdr_serialize_bool>
 800ec4e:	78ab      	ldrb	r3, [r5, #2]
 800ec50:	4004      	ands	r4, r0
 800ec52:	b2e4      	uxtb	r4, r4
 800ec54:	b90b      	cbnz	r3, 800ec5a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ec56:	4620      	mov	r0, r4
 800ec58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec5a:	f105 0108 	add.w	r1, r5, #8
 800ec5e:	4630      	mov	r0, r6
 800ec60:	f7ff ff5a 	bl	800eb18 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ec64:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ec68:	4607      	mov	r7, r0
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f004 fa68 	bl	8013140 <ucdr_serialize_bool>
 800ec70:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ec74:	4038      	ands	r0, r7
 800ec76:	b2c7      	uxtb	r7, r0
 800ec78:	b913      	cbnz	r3, 800ec80 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ec7a:	403c      	ands	r4, r7
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec80:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ec84:	4630      	mov	r0, r6
 800ec86:	f004 fef5 	bl	8013a74 <ucdr_serialize_uint64_t>
 800ec8a:	4007      	ands	r7, r0
 800ec8c:	e7f5      	b.n	800ec7a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ec8e:	bf00      	nop

0800ec90 <uxr_deserialize_ObjectVariant>:
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	4605      	mov	r5, r0
 800ec94:	460e      	mov	r6, r1
 800ec96:	f004 fa97 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ec9a:	b168      	cbz	r0, 800ecb8 <uxr_deserialize_ObjectVariant+0x28>
 800ec9c:	7833      	ldrb	r3, [r6, #0]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	4604      	mov	r4, r0
 800eca2:	2b0d      	cmp	r3, #13
 800eca4:	d809      	bhi.n	800ecba <uxr_deserialize_ObjectVariant+0x2a>
 800eca6:	e8df f003 	tbb	[pc, r3]
 800ecaa:	0a41      	.short	0x0a41
 800ecac:	0a0a2323 	.word	0x0a0a2323
 800ecb0:	10080a0a 	.word	0x10080a0a
 800ecb4:	565c1010 	.word	0x565c1010
 800ecb8:	2400      	movs	r4, #0
 800ecba:	4620      	mov	r0, r4
 800ecbc:	bd70      	pop	{r4, r5, r6, pc}
 800ecbe:	1d31      	adds	r1, r6, #4
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecc6:	f7ff bd55 	b.w	800e774 <uxr_deserialize_DATAWRITER_Representation>
 800ecca:	1d31      	adds	r1, r6, #4
 800eccc:	4628      	mov	r0, r5
 800ecce:	f004 fa7b 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d0f0      	beq.n	800ecb8 <uxr_deserialize_ObjectVariant+0x28>
 800ecd6:	7933      	ldrb	r3, [r6, #4]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d001      	beq.n	800ece0 <uxr_deserialize_ObjectVariant+0x50>
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d1ec      	bne.n	800ecba <uxr_deserialize_ObjectVariant+0x2a>
 800ece0:	68b1      	ldr	r1, [r6, #8]
 800ece2:	4628      	mov	r0, r5
 800ece4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ece8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecec:	f005 b9be 	b.w	801406c <ucdr_deserialize_string>
 800ecf0:	1d31      	adds	r1, r6, #4
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	f004 fa68 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	b170      	cbz	r0, 800ed1a <uxr_deserialize_ObjectVariant+0x8a>
 800ecfc:	7933      	ldrb	r3, [r6, #4]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d04c      	beq.n	800ed9c <uxr_deserialize_ObjectVariant+0x10c>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d109      	bne.n	800ed1a <uxr_deserialize_ObjectVariant+0x8a>
 800ed06:	f106 0308 	add.w	r3, r6, #8
 800ed0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed0e:	f106 010c 	add.w	r1, r6, #12
 800ed12:	4628      	mov	r0, r5
 800ed14:	f7fd fbe6 	bl	800c4e4 <ucdr_deserialize_sequence_uint8_t>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed20:	4628      	mov	r0, r5
 800ed22:	f004 f9a9 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ed26:	4020      	ands	r0, r4
 800ed28:	b2c4      	uxtb	r4, r0
 800ed2a:	e7c6      	b.n	800ecba <uxr_deserialize_ObjectVariant+0x2a>
 800ed2c:	1d31      	adds	r1, r6, #4
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f004 fa4a 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ed34:	4604      	mov	r4, r0
 800ed36:	b130      	cbz	r0, 800ed46 <uxr_deserialize_ObjectVariant+0xb6>
 800ed38:	7933      	ldrb	r3, [r6, #4]
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d036      	beq.n	800edac <uxr_deserialize_ObjectVariant+0x11c>
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d03c      	beq.n	800edbc <uxr_deserialize_ObjectVariant+0x12c>
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d032      	beq.n	800edac <uxr_deserialize_ObjectVariant+0x11c>
 800ed46:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f004 ffe2 	bl	8013d14 <ucdr_deserialize_int16_t>
 800ed50:	4020      	ands	r0, r4
 800ed52:	b2c4      	uxtb	r4, r0
 800ed54:	e7b1      	b.n	800ecba <uxr_deserialize_ObjectVariant+0x2a>
 800ed56:	1d31      	adds	r1, r6, #4
 800ed58:	4628      	mov	r0, r5
 800ed5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed5e:	f7ff bbbf 	b.w	800e4e0 <uxr_deserialize_CLIENT_Representation>
 800ed62:	2204      	movs	r2, #4
 800ed64:	18b1      	adds	r1, r6, r2
 800ed66:	4628      	mov	r0, r5
 800ed68:	f004 f986 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	f106 0108 	add.w	r1, r6, #8
 800ed72:	4604      	mov	r4, r0
 800ed74:	4628      	mov	r0, r5
 800ed76:	f004 f97f 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ed7a:	2202      	movs	r2, #2
 800ed7c:	4004      	ands	r4, r0
 800ed7e:	f106 010a 	add.w	r1, r6, #10
 800ed82:	4628      	mov	r0, r5
 800ed84:	f004 f978 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ed88:	b2e4      	uxtb	r4, r4
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	f106 010c 	add.w	r1, r6, #12
 800ed90:	4628      	mov	r0, r5
 800ed92:	401c      	ands	r4, r3
 800ed94:	f004 f9ea 	bl	801316c <ucdr_deserialize_bool>
 800ed98:	4004      	ands	r4, r0
 800ed9a:	e78e      	b.n	800ecba <uxr_deserialize_ObjectVariant+0x2a>
 800ed9c:	68b1      	ldr	r1, [r6, #8]
 800ed9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eda2:	4628      	mov	r0, r5
 800eda4:	f005 f962 	bl	801406c <ucdr_deserialize_string>
 800eda8:	4604      	mov	r4, r0
 800edaa:	e7b6      	b.n	800ed1a <uxr_deserialize_ObjectVariant+0x8a>
 800edac:	68b1      	ldr	r1, [r6, #8]
 800edae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edb2:	4628      	mov	r0, r5
 800edb4:	f005 f95a 	bl	801406c <ucdr_deserialize_string>
 800edb8:	4604      	mov	r4, r0
 800edba:	e7c4      	b.n	800ed46 <uxr_deserialize_ObjectVariant+0xb6>
 800edbc:	f106 0308 	add.w	r3, r6, #8
 800edc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800edc4:	f106 010c 	add.w	r1, r6, #12
 800edc8:	4628      	mov	r0, r5
 800edca:	f7fd fb8b 	bl	800c4e4 <ucdr_deserialize_sequence_uint8_t>
 800edce:	4604      	mov	r4, r0
 800edd0:	e7b9      	b.n	800ed46 <uxr_deserialize_ObjectVariant+0xb6>
 800edd2:	bf00      	nop

0800edd4 <uxr_deserialize_BaseObjectRequest>:
 800edd4:	b570      	push	{r4, r5, r6, lr}
 800edd6:	2202      	movs	r2, #2
 800edd8:	4605      	mov	r5, r0
 800edda:	460e      	mov	r6, r1
 800eddc:	f004 f94c 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ede0:	2202      	movs	r2, #2
 800ede2:	4604      	mov	r4, r0
 800ede4:	18b1      	adds	r1, r6, r2
 800ede6:	4628      	mov	r0, r5
 800ede8:	f004 f946 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800edec:	4020      	ands	r0, r4
 800edee:	b2c0      	uxtb	r0, r0
 800edf0:	bd70      	pop	{r4, r5, r6, pc}
 800edf2:	bf00      	nop

0800edf4 <uxr_serialize_ActivityInfoVariant>:
 800edf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf8:	460d      	mov	r5, r1
 800edfa:	7809      	ldrb	r1, [r1, #0]
 800edfc:	4607      	mov	r7, r0
 800edfe:	f004 f9cd 	bl	801319c <ucdr_serialize_uint8_t>
 800ee02:	4681      	mov	r9, r0
 800ee04:	b138      	cbz	r0, 800ee16 <uxr_serialize_ActivityInfoVariant+0x22>
 800ee06:	782b      	ldrb	r3, [r5, #0]
 800ee08:	2b06      	cmp	r3, #6
 800ee0a:	f000 8082 	beq.w	800ef12 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ee0e:	2b0d      	cmp	r3, #13
 800ee10:	d016      	beq.n	800ee40 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ee12:	2b05      	cmp	r3, #5
 800ee14:	d002      	beq.n	800ee1c <uxr_serialize_ActivityInfoVariant+0x28>
 800ee16:	4648      	mov	r0, r9
 800ee18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee1c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee20:	4638      	mov	r0, r7
 800ee22:	f004 fef7 	bl	8013c14 <ucdr_serialize_int16_t>
 800ee26:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ee2a:	4681      	mov	r9, r0
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	f004 fe21 	bl	8013a74 <ucdr_serialize_uint64_t>
 800ee32:	ea09 0000 	and.w	r0, r9, r0
 800ee36:	fa5f f980 	uxtb.w	r9, r0
 800ee3a:	4648      	mov	r0, r9
 800ee3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee40:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ee44:	4638      	mov	r0, r7
 800ee46:	f004 fee5 	bl	8013c14 <ucdr_serialize_int16_t>
 800ee4a:	68e9      	ldr	r1, [r5, #12]
 800ee4c:	4681      	mov	r9, r0
 800ee4e:	4638      	mov	r0, r7
 800ee50:	f004 fbba 	bl	80135c8 <ucdr_serialize_uint32_t>
 800ee54:	68eb      	ldr	r3, [r5, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0eb      	beq.n	800ee32 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ee5a:	b320      	cbz	r0, 800eea6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ee5c:	f105 080c 	add.w	r8, r5, #12
 800ee60:	2600      	movs	r6, #0
 800ee62:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ee66:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ee6a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800ee6e:	4638      	mov	r0, r7
 800ee70:	f004 f994 	bl	801319c <ucdr_serialize_uint8_t>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d053      	beq.n	800ef20 <uxr_serialize_ActivityInfoVariant+0x12c>
 800ee78:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800ee7c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800ee80:	0074      	lsls	r4, r6, #1
 800ee82:	00c9      	lsls	r1, r1, #3
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d854      	bhi.n	800ef32 <uxr_serialize_ActivityInfoVariant+0x13e>
 800ee88:	e8df f003 	tbb	[pc, r3]
 800ee8c:	02102132 	.word	0x02102132
 800ee90:	4441      	add	r1, r8
 800ee92:	4638      	mov	r0, r7
 800ee94:	6889      	ldr	r1, [r1, #8]
 800ee96:	f005 f8d9 	bl	801404c <ucdr_serialize_string>
 800ee9a:	68ea      	ldr	r2, [r5, #12]
 800ee9c:	3601      	adds	r6, #1
 800ee9e:	4296      	cmp	r6, r2
 800eea0:	d242      	bcs.n	800ef28 <uxr_serialize_ActivityInfoVariant+0x134>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d1dd      	bne.n	800ee62 <uxr_serialize_ActivityInfoVariant+0x6e>
 800eea6:	f04f 0900 	mov.w	r9, #0
 800eeaa:	e7b4      	b.n	800ee16 <uxr_serialize_ActivityInfoVariant+0x22>
 800eeac:	3108      	adds	r1, #8
 800eeae:	4441      	add	r1, r8
 800eeb0:	2210      	movs	r2, #16
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	f004 f87c 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800eeb8:	4434      	add	r4, r6
 800eeba:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eebe:	4604      	mov	r4, r0
 800eec0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800eec2:	4638      	mov	r0, r7
 800eec4:	f004 fb80 	bl	80135c8 <ucdr_serialize_uint32_t>
 800eec8:	4020      	ands	r0, r4
 800eeca:	b2c0      	uxtb	r0, r0
 800eecc:	e7e5      	b.n	800ee9a <uxr_serialize_ActivityInfoVariant+0xa6>
 800eece:	3108      	adds	r1, #8
 800eed0:	4441      	add	r1, r8
 800eed2:	2204      	movs	r2, #4
 800eed4:	4638      	mov	r0, r7
 800eed6:	f004 f86b 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800eeda:	4434      	add	r4, r6
 800eedc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800eee0:	4604      	mov	r4, r0
 800eee2:	8b19      	ldrh	r1, [r3, #24]
 800eee4:	4638      	mov	r0, r7
 800eee6:	f004 f985 	bl	80131f4 <ucdr_serialize_uint16_t>
 800eeea:	4020      	ands	r0, r4
 800eeec:	b2c0      	uxtb	r0, r0
 800eeee:	e7d4      	b.n	800ee9a <uxr_serialize_ActivityInfoVariant+0xa6>
 800eef0:	3108      	adds	r1, #8
 800eef2:	4441      	add	r1, r8
 800eef4:	2202      	movs	r2, #2
 800eef6:	4638      	mov	r0, r7
 800eef8:	f004 f85a 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800eefc:	4434      	add	r4, r6
 800eefe:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800ef02:	4604      	mov	r4, r0
 800ef04:	7d99      	ldrb	r1, [r3, #22]
 800ef06:	4638      	mov	r0, r7
 800ef08:	f004 f948 	bl	801319c <ucdr_serialize_uint8_t>
 800ef0c:	4020      	ands	r0, r4
 800ef0e:	b2c0      	uxtb	r0, r0
 800ef10:	e7c3      	b.n	800ee9a <uxr_serialize_ActivityInfoVariant+0xa6>
 800ef12:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ef16:	4638      	mov	r0, r7
 800ef18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	f004 be7a 	b.w	8013c14 <ucdr_serialize_int16_t>
 800ef20:	68ea      	ldr	r2, [r5, #12]
 800ef22:	3601      	adds	r6, #1
 800ef24:	42b2      	cmp	r2, r6
 800ef26:	d8be      	bhi.n	800eea6 <uxr_serialize_ActivityInfoVariant+0xb2>
 800ef28:	ea09 0900 	and.w	r9, r9, r0
 800ef2c:	fa5f f989 	uxtb.w	r9, r9
 800ef30:	e771      	b.n	800ee16 <uxr_serialize_ActivityInfoVariant+0x22>
 800ef32:	68eb      	ldr	r3, [r5, #12]
 800ef34:	3601      	adds	r6, #1
 800ef36:	429e      	cmp	r6, r3
 800ef38:	f10a 0a18 	add.w	sl, sl, #24
 800ef3c:	d395      	bcc.n	800ee6a <uxr_serialize_ActivityInfoVariant+0x76>
 800ef3e:	e76a      	b.n	800ee16 <uxr_serialize_ActivityInfoVariant+0x22>

0800ef40 <uxr_deserialize_BaseObjectReply>:
 800ef40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef44:	2202      	movs	r2, #2
 800ef46:	4606      	mov	r6, r0
 800ef48:	460f      	mov	r7, r1
 800ef4a:	f004 f895 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ef4e:	2202      	movs	r2, #2
 800ef50:	18b9      	adds	r1, r7, r2
 800ef52:	4605      	mov	r5, r0
 800ef54:	4630      	mov	r0, r6
 800ef56:	f004 f88f 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800ef5a:	1d39      	adds	r1, r7, #4
 800ef5c:	4680      	mov	r8, r0
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f004 f932 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ef64:	1d79      	adds	r1, r7, #5
 800ef66:	4604      	mov	r4, r0
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f004 f92d 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800ef6e:	ea05 0508 	and.w	r5, r5, r8
 800ef72:	402c      	ands	r4, r5
 800ef74:	4020      	ands	r0, r4
 800ef76:	b2c0      	uxtb	r0, r0
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef7c <uxr_serialize_ReadSpecification>:
 800ef7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef80:	460e      	mov	r6, r1
 800ef82:	7809      	ldrb	r1, [r1, #0]
 800ef84:	4607      	mov	r7, r0
 800ef86:	f004 f909 	bl	801319c <ucdr_serialize_uint8_t>
 800ef8a:	7871      	ldrb	r1, [r6, #1]
 800ef8c:	4604      	mov	r4, r0
 800ef8e:	4638      	mov	r0, r7
 800ef90:	f004 f904 	bl	801319c <ucdr_serialize_uint8_t>
 800ef94:	78b1      	ldrb	r1, [r6, #2]
 800ef96:	4004      	ands	r4, r0
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f004 f8d1 	bl	8013140 <ucdr_serialize_bool>
 800ef9e:	78b3      	ldrb	r3, [r6, #2]
 800efa0:	b2e4      	uxtb	r4, r4
 800efa2:	4004      	ands	r4, r0
 800efa4:	b94b      	cbnz	r3, 800efba <uxr_serialize_ReadSpecification+0x3e>
 800efa6:	7a31      	ldrb	r1, [r6, #8]
 800efa8:	4638      	mov	r0, r7
 800efaa:	f004 f8c9 	bl	8013140 <ucdr_serialize_bool>
 800efae:	7a33      	ldrb	r3, [r6, #8]
 800efb0:	4004      	ands	r4, r0
 800efb2:	b943      	cbnz	r3, 800efc6 <uxr_serialize_ReadSpecification+0x4a>
 800efb4:	4620      	mov	r0, r4
 800efb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efba:	6871      	ldr	r1, [r6, #4]
 800efbc:	4638      	mov	r0, r7
 800efbe:	f005 f845 	bl	801404c <ucdr_serialize_string>
 800efc2:	4004      	ands	r4, r0
 800efc4:	e7ef      	b.n	800efa6 <uxr_serialize_ReadSpecification+0x2a>
 800efc6:	8971      	ldrh	r1, [r6, #10]
 800efc8:	4638      	mov	r0, r7
 800efca:	f004 f913 	bl	80131f4 <ucdr_serialize_uint16_t>
 800efce:	89b1      	ldrh	r1, [r6, #12]
 800efd0:	4605      	mov	r5, r0
 800efd2:	4638      	mov	r0, r7
 800efd4:	f004 f90e 	bl	80131f4 <ucdr_serialize_uint16_t>
 800efd8:	89f1      	ldrh	r1, [r6, #14]
 800efda:	4005      	ands	r5, r0
 800efdc:	4638      	mov	r0, r7
 800efde:	f004 f909 	bl	80131f4 <ucdr_serialize_uint16_t>
 800efe2:	8a31      	ldrh	r1, [r6, #16]
 800efe4:	4680      	mov	r8, r0
 800efe6:	4638      	mov	r0, r7
 800efe8:	f004 f904 	bl	80131f4 <ucdr_serialize_uint16_t>
 800efec:	b2ed      	uxtb	r5, r5
 800efee:	4025      	ands	r5, r4
 800eff0:	ea08 0505 	and.w	r5, r8, r5
 800eff4:	ea00 0405 	and.w	r4, r0, r5
 800eff8:	4620      	mov	r0, r4
 800effa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effe:	bf00      	nop

0800f000 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f000:	f7ff ba16 	b.w	800e430 <uxr_serialize_CLIENT_Representation>

0800f004 <uxr_serialize_CREATE_Payload>:
 800f004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f006:	2202      	movs	r2, #2
 800f008:	4607      	mov	r7, r0
 800f00a:	460e      	mov	r6, r1
 800f00c:	f003 ffd0 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f010:	2202      	movs	r2, #2
 800f012:	18b1      	adds	r1, r6, r2
 800f014:	4605      	mov	r5, r0
 800f016:	4638      	mov	r0, r7
 800f018:	f003 ffca 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f01c:	7931      	ldrb	r1, [r6, #4]
 800f01e:	4604      	mov	r4, r0
 800f020:	4638      	mov	r0, r7
 800f022:	f004 f8bb 	bl	801319c <ucdr_serialize_uint8_t>
 800f026:	b170      	cbz	r0, 800f046 <uxr_serialize_CREATE_Payload+0x42>
 800f028:	7933      	ldrb	r3, [r6, #4]
 800f02a:	402c      	ands	r4, r5
 800f02c:	3b01      	subs	r3, #1
 800f02e:	b2e4      	uxtb	r4, r4
 800f030:	2b0d      	cmp	r3, #13
 800f032:	d809      	bhi.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f034:	e8df f003 	tbb	[pc, r3]
 800f038:	23230a4c 	.word	0x23230a4c
 800f03c:	0a0a0a0a 	.word	0x0a0a0a0a
 800f040:	12121208 	.word	0x12121208
 800f044:	3e45      	.short	0x3e45
 800f046:	2400      	movs	r4, #0
 800f048:	4620      	mov	r0, r4
 800f04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f04c:	f106 0108 	add.w	r1, r6, #8
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff faf3 	bl	800e63c <uxr_serialize_DATAWRITER_Representation>
 800f056:	4004      	ands	r4, r0
 800f058:	4620      	mov	r0, r4
 800f05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f05c:	7a31      	ldrb	r1, [r6, #8]
 800f05e:	4638      	mov	r0, r7
 800f060:	f004 f89c 	bl	801319c <ucdr_serialize_uint8_t>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0ee      	beq.n	800f046 <uxr_serialize_CREATE_Payload+0x42>
 800f068:	7a33      	ldrb	r3, [r6, #8]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d001      	beq.n	800f072 <uxr_serialize_CREATE_Payload+0x6e>
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d1ea      	bne.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f072:	68f1      	ldr	r1, [r6, #12]
 800f074:	4638      	mov	r0, r7
 800f076:	f004 ffe9 	bl	801404c <ucdr_serialize_string>
 800f07a:	4004      	ands	r4, r0
 800f07c:	e7e4      	b.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f07e:	7a31      	ldrb	r1, [r6, #8]
 800f080:	4638      	mov	r0, r7
 800f082:	f004 f88b 	bl	801319c <ucdr_serialize_uint8_t>
 800f086:	4605      	mov	r5, r0
 800f088:	b158      	cbz	r0, 800f0a2 <uxr_serialize_CREATE_Payload+0x9e>
 800f08a:	7a33      	ldrb	r3, [r6, #8]
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d034      	beq.n	800f0fa <uxr_serialize_CREATE_Payload+0xf6>
 800f090:	2b03      	cmp	r3, #3
 800f092:	d106      	bne.n	800f0a2 <uxr_serialize_CREATE_Payload+0x9e>
 800f094:	68f2      	ldr	r2, [r6, #12]
 800f096:	f106 0110 	add.w	r1, r6, #16
 800f09a:	4638      	mov	r0, r7
 800f09c:	f7fd fa10 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800f0a0:	4605      	mov	r5, r0
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	f003 ff81 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f0ae:	4028      	ands	r0, r5
 800f0b0:	4004      	ands	r4, r0
 800f0b2:	e7c9      	b.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f0b4:	f106 0108 	add.w	r1, r6, #8
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	f7ff f9b9 	bl	800e430 <uxr_serialize_CLIENT_Representation>
 800f0be:	4004      	ands	r4, r0
 800f0c0:	e7c2      	b.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f0c2:	f106 0108 	add.w	r1, r6, #8
 800f0c6:	4638      	mov	r0, r7
 800f0c8:	f7ff fa6e 	bl	800e5a8 <uxr_serialize_AGENT_Representation>
 800f0cc:	4004      	ands	r4, r0
 800f0ce:	e7bb      	b.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f0d0:	7a31      	ldrb	r1, [r6, #8]
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	f004 f862 	bl	801319c <ucdr_serialize_uint8_t>
 800f0d8:	4605      	mov	r5, r0
 800f0da:	b130      	cbz	r0, 800f0ea <uxr_serialize_CREATE_Payload+0xe6>
 800f0dc:	7a33      	ldrb	r3, [r6, #8]
 800f0de:	2b02      	cmp	r3, #2
 800f0e0:	d011      	beq.n	800f106 <uxr_serialize_CREATE_Payload+0x102>
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d015      	beq.n	800f112 <uxr_serialize_CREATE_Payload+0x10e>
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d00d      	beq.n	800f106 <uxr_serialize_CREATE_Payload+0x102>
 800f0ea:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	f004 fd90 	bl	8013c14 <ucdr_serialize_int16_t>
 800f0f4:	4028      	ands	r0, r5
 800f0f6:	4004      	ands	r4, r0
 800f0f8:	e7a6      	b.n	800f048 <uxr_serialize_CREATE_Payload+0x44>
 800f0fa:	68f1      	ldr	r1, [r6, #12]
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	f004 ffa5 	bl	801404c <ucdr_serialize_string>
 800f102:	4605      	mov	r5, r0
 800f104:	e7cd      	b.n	800f0a2 <uxr_serialize_CREATE_Payload+0x9e>
 800f106:	68f1      	ldr	r1, [r6, #12]
 800f108:	4638      	mov	r0, r7
 800f10a:	f004 ff9f 	bl	801404c <ucdr_serialize_string>
 800f10e:	4605      	mov	r5, r0
 800f110:	e7eb      	b.n	800f0ea <uxr_serialize_CREATE_Payload+0xe6>
 800f112:	68f2      	ldr	r2, [r6, #12]
 800f114:	f106 0110 	add.w	r1, r6, #16
 800f118:	4638      	mov	r0, r7
 800f11a:	f7fd f9d1 	bl	800c4c0 <ucdr_serialize_sequence_uint8_t>
 800f11e:	4605      	mov	r5, r0
 800f120:	e7e3      	b.n	800f0ea <uxr_serialize_CREATE_Payload+0xe6>
 800f122:	bf00      	nop

0800f124 <uxr_deserialize_GET_INFO_Payload>:
 800f124:	b570      	push	{r4, r5, r6, lr}
 800f126:	2202      	movs	r2, #2
 800f128:	4605      	mov	r5, r0
 800f12a:	460e      	mov	r6, r1
 800f12c:	f003 ffa4 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f130:	2202      	movs	r2, #2
 800f132:	18b1      	adds	r1, r6, r2
 800f134:	4604      	mov	r4, r0
 800f136:	4628      	mov	r0, r5
 800f138:	f003 ff9e 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f13c:	1d31      	adds	r1, r6, #4
 800f13e:	4004      	ands	r4, r0
 800f140:	4628      	mov	r0, r5
 800f142:	f004 fb71 	bl	8013828 <ucdr_deserialize_uint32_t>
 800f146:	b2e4      	uxtb	r4, r4
 800f148:	4020      	ands	r0, r4
 800f14a:	bd70      	pop	{r4, r5, r6, pc}

0800f14c <uxr_serialize_DELETE_Payload>:
 800f14c:	b570      	push	{r4, r5, r6, lr}
 800f14e:	2202      	movs	r2, #2
 800f150:	4605      	mov	r5, r0
 800f152:	460e      	mov	r6, r1
 800f154:	f003 ff2c 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f158:	2202      	movs	r2, #2
 800f15a:	4604      	mov	r4, r0
 800f15c:	18b1      	adds	r1, r6, r2
 800f15e:	4628      	mov	r0, r5
 800f160:	f003 ff26 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f164:	4020      	ands	r0, r4
 800f166:	b2c0      	uxtb	r0, r0
 800f168:	bd70      	pop	{r4, r5, r6, pc}
 800f16a:	bf00      	nop

0800f16c <uxr_deserialize_STATUS_AGENT_Payload>:
 800f16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f170:	4605      	mov	r5, r0
 800f172:	460e      	mov	r6, r1
 800f174:	f004 f828 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f178:	1c71      	adds	r1, r6, #1
 800f17a:	4604      	mov	r4, r0
 800f17c:	4628      	mov	r0, r5
 800f17e:	f004 f823 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f182:	2204      	movs	r2, #4
 800f184:	18b1      	adds	r1, r6, r2
 800f186:	4680      	mov	r8, r0
 800f188:	4628      	mov	r0, r5
 800f18a:	f003 ff75 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f18e:	f106 0108 	add.w	r1, r6, #8
 800f192:	4607      	mov	r7, r0
 800f194:	2202      	movs	r2, #2
 800f196:	4628      	mov	r0, r5
 800f198:	f003 ff6e 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f19c:	ea04 0308 	and.w	r3, r4, r8
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	ea03 0407 	and.w	r4, r3, r7
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	4607      	mov	r7, r0
 800f1aa:	f106 010a 	add.w	r1, r6, #10
 800f1ae:	4628      	mov	r0, r5
 800f1b0:	f003 ff62 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f1b4:	f106 010c 	add.w	r1, r6, #12
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	461d      	mov	r5, r3
 800f1be:	f003 ffd5 	bl	801316c <ucdr_deserialize_bool>
 800f1c2:	403c      	ands	r4, r7
 800f1c4:	4025      	ands	r5, r4
 800f1c6:	4028      	ands	r0, r5
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f1cc <uxr_deserialize_STATUS_Payload>:
 800f1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d0:	2202      	movs	r2, #2
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	460f      	mov	r7, r1
 800f1d6:	f003 ff4f 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f1da:	2202      	movs	r2, #2
 800f1dc:	18b9      	adds	r1, r7, r2
 800f1de:	4605      	mov	r5, r0
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f003 ff49 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f1e6:	1d39      	adds	r1, r7, #4
 800f1e8:	4680      	mov	r8, r0
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f003 ffec 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f1f0:	1d79      	adds	r1, r7, #5
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f003 ffe7 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f1fa:	ea05 0508 	and.w	r5, r5, r8
 800f1fe:	402c      	ands	r4, r5
 800f200:	4020      	ands	r0, r4
 800f202:	b2c0      	uxtb	r0, r0
 800f204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f208 <uxr_serialize_INFO_Payload>:
 800f208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20c:	2202      	movs	r2, #2
 800f20e:	460c      	mov	r4, r1
 800f210:	4605      	mov	r5, r0
 800f212:	f003 fecd 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f216:	2202      	movs	r2, #2
 800f218:	18a1      	adds	r1, r4, r2
 800f21a:	4680      	mov	r8, r0
 800f21c:	4628      	mov	r0, r5
 800f21e:	f003 fec7 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f222:	7921      	ldrb	r1, [r4, #4]
 800f224:	4607      	mov	r7, r0
 800f226:	4628      	mov	r0, r5
 800f228:	f003 ffb8 	bl	801319c <ucdr_serialize_uint8_t>
 800f22c:	7961      	ldrb	r1, [r4, #5]
 800f22e:	4606      	mov	r6, r0
 800f230:	4628      	mov	r0, r5
 800f232:	f003 ffb3 	bl	801319c <ucdr_serialize_uint8_t>
 800f236:	ea08 0807 	and.w	r8, r8, r7
 800f23a:	ea06 0608 	and.w	r6, r6, r8
 800f23e:	4006      	ands	r6, r0
 800f240:	7a21      	ldrb	r1, [r4, #8]
 800f242:	4628      	mov	r0, r5
 800f244:	f003 ff7c 	bl	8013140 <ucdr_serialize_bool>
 800f248:	7a23      	ldrb	r3, [r4, #8]
 800f24a:	b2f7      	uxtb	r7, r6
 800f24c:	4606      	mov	r6, r0
 800f24e:	b96b      	cbnz	r3, 800f26c <uxr_serialize_INFO_Payload+0x64>
 800f250:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f254:	4628      	mov	r0, r5
 800f256:	f003 ff73 	bl	8013140 <ucdr_serialize_bool>
 800f25a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f25e:	4030      	ands	r0, r6
 800f260:	b2c6      	uxtb	r6, r0
 800f262:	b983      	cbnz	r3, 800f286 <uxr_serialize_INFO_Payload+0x7e>
 800f264:	ea06 0007 	and.w	r0, r6, r7
 800f268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f26c:	7b21      	ldrb	r1, [r4, #12]
 800f26e:	4628      	mov	r0, r5
 800f270:	f003 ff94 	bl	801319c <ucdr_serialize_uint8_t>
 800f274:	b188      	cbz	r0, 800f29a <uxr_serialize_INFO_Payload+0x92>
 800f276:	f104 010c 	add.w	r1, r4, #12
 800f27a:	4628      	mov	r0, r5
 800f27c:	f7ff fa06 	bl	800e68c <uxr_serialize_ObjectVariant.part.0>
 800f280:	4030      	ands	r0, r6
 800f282:	b2c6      	uxtb	r6, r0
 800f284:	e7e4      	b.n	800f250 <uxr_serialize_INFO_Payload+0x48>
 800f286:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f28a:	4628      	mov	r0, r5
 800f28c:	f7ff fdb2 	bl	800edf4 <uxr_serialize_ActivityInfoVariant>
 800f290:	4006      	ands	r6, r0
 800f292:	ea06 0007 	and.w	r0, r6, r7
 800f296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29a:	4606      	mov	r6, r0
 800f29c:	e7d8      	b.n	800f250 <uxr_serialize_INFO_Payload+0x48>
 800f29e:	bf00      	nop

0800f2a0 <uxr_serialize_READ_DATA_Payload>:
 800f2a0:	b570      	push	{r4, r5, r6, lr}
 800f2a2:	2202      	movs	r2, #2
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	460e      	mov	r6, r1
 800f2a8:	f003 fe82 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f2ac:	2202      	movs	r2, #2
 800f2ae:	18b1      	adds	r1, r6, r2
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	f003 fe7c 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f2b8:	1d31      	adds	r1, r6, #4
 800f2ba:	4004      	ands	r4, r0
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f7ff fe5d 	bl	800ef7c <uxr_serialize_ReadSpecification>
 800f2c2:	b2e4      	uxtb	r4, r4
 800f2c4:	4020      	ands	r0, r4
 800f2c6:	bd70      	pop	{r4, r5, r6, pc}

0800f2c8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f2c8:	b570      	push	{r4, r5, r6, lr}
 800f2ca:	2202      	movs	r2, #2
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	460e      	mov	r6, r1
 800f2d0:	f003 fe6e 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	18b1      	adds	r1, r6, r2
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f003 fe68 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f2e0:	4020      	ands	r0, r4
 800f2e2:	b2c0      	uxtb	r0, r0
 800f2e4:	bd70      	pop	{r4, r5, r6, pc}
 800f2e6:	bf00      	nop

0800f2e8 <uxr_serialize_ACKNACK_Payload>:
 800f2e8:	b570      	push	{r4, r5, r6, lr}
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	460e      	mov	r6, r1
 800f2ee:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	f003 ff7e 	bl	80131f4 <ucdr_serialize_uint16_t>
 800f2f8:	2202      	movs	r2, #2
 800f2fa:	4621      	mov	r1, r4
 800f2fc:	4604      	mov	r4, r0
 800f2fe:	4628      	mov	r0, r5
 800f300:	f003 fe56 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f304:	7931      	ldrb	r1, [r6, #4]
 800f306:	4004      	ands	r4, r0
 800f308:	4628      	mov	r0, r5
 800f30a:	f003 ff47 	bl	801319c <ucdr_serialize_uint8_t>
 800f30e:	b2e4      	uxtb	r4, r4
 800f310:	4020      	ands	r0, r4
 800f312:	bd70      	pop	{r4, r5, r6, pc}

0800f314 <uxr_deserialize_ACKNACK_Payload>:
 800f314:	b570      	push	{r4, r5, r6, lr}
 800f316:	4605      	mov	r5, r0
 800f318:	460e      	mov	r6, r1
 800f31a:	f004 f86b 	bl	80133f4 <ucdr_deserialize_uint16_t>
 800f31e:	2202      	movs	r2, #2
 800f320:	18b1      	adds	r1, r6, r2
 800f322:	4604      	mov	r4, r0
 800f324:	4628      	mov	r0, r5
 800f326:	f003 fea7 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f32a:	1d31      	adds	r1, r6, #4
 800f32c:	4004      	ands	r4, r0
 800f32e:	4628      	mov	r0, r5
 800f330:	f003 ff4a 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f334:	b2e4      	uxtb	r4, r4
 800f336:	4020      	ands	r0, r4
 800f338:	bd70      	pop	{r4, r5, r6, pc}
 800f33a:	bf00      	nop

0800f33c <uxr_serialize_HEARTBEAT_Payload>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	460d      	mov	r5, r1
 800f340:	8809      	ldrh	r1, [r1, #0]
 800f342:	4606      	mov	r6, r0
 800f344:	f003 ff56 	bl	80131f4 <ucdr_serialize_uint16_t>
 800f348:	8869      	ldrh	r1, [r5, #2]
 800f34a:	4604      	mov	r4, r0
 800f34c:	4630      	mov	r0, r6
 800f34e:	f003 ff51 	bl	80131f4 <ucdr_serialize_uint16_t>
 800f352:	7929      	ldrb	r1, [r5, #4]
 800f354:	4004      	ands	r4, r0
 800f356:	4630      	mov	r0, r6
 800f358:	f003 ff20 	bl	801319c <ucdr_serialize_uint8_t>
 800f35c:	b2e4      	uxtb	r4, r4
 800f35e:	4020      	ands	r0, r4
 800f360:	bd70      	pop	{r4, r5, r6, pc}
 800f362:	bf00      	nop

0800f364 <uxr_deserialize_HEARTBEAT_Payload>:
 800f364:	b570      	push	{r4, r5, r6, lr}
 800f366:	4605      	mov	r5, r0
 800f368:	460e      	mov	r6, r1
 800f36a:	f004 f843 	bl	80133f4 <ucdr_deserialize_uint16_t>
 800f36e:	1cb1      	adds	r1, r6, #2
 800f370:	4604      	mov	r4, r0
 800f372:	4628      	mov	r0, r5
 800f374:	f004 f83e 	bl	80133f4 <ucdr_deserialize_uint16_t>
 800f378:	1d31      	adds	r1, r6, #4
 800f37a:	4004      	ands	r4, r0
 800f37c:	4628      	mov	r0, r5
 800f37e:	f003 ff23 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f382:	b2e4      	uxtb	r4, r4
 800f384:	4020      	ands	r0, r4
 800f386:	bd70      	pop	{r4, r5, r6, pc}

0800f388 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	4605      	mov	r5, r0
 800f38e:	460e      	mov	r6, r1
 800f390:	f004 fdcc 	bl	8013f2c <ucdr_deserialize_int32_t>
 800f394:	1d31      	adds	r1, r6, #4
 800f396:	4607      	mov	r7, r0
 800f398:	4628      	mov	r0, r5
 800f39a:	f004 fa45 	bl	8013828 <ucdr_deserialize_uint32_t>
 800f39e:	f106 0108 	add.w	r1, r6, #8
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	f004 fdc1 	bl	8013f2c <ucdr_deserialize_int32_t>
 800f3aa:	f106 010c 	add.w	r1, r6, #12
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f004 fa39 	bl	8013828 <ucdr_deserialize_uint32_t>
 800f3b6:	ea07 0708 	and.w	r7, r7, r8
 800f3ba:	403c      	ands	r4, r7
 800f3bc:	f106 0110 	add.w	r1, r6, #16
 800f3c0:	4004      	ands	r4, r0
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	f004 fdb2 	bl	8013f2c <ucdr_deserialize_int32_t>
 800f3c8:	f106 0114 	add.w	r1, r6, #20
 800f3cc:	4607      	mov	r7, r0
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f004 fa2a 	bl	8013828 <ucdr_deserialize_uint32_t>
 800f3d4:	b2e4      	uxtb	r4, r4
 800f3d6:	403c      	ands	r4, r7
 800f3d8:	4020      	ands	r0, r4
 800f3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3de:	bf00      	nop

0800f3e0 <uxr_serialize_SampleIdentity>:
 800f3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e4:	220c      	movs	r2, #12
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	460d      	mov	r5, r1
 800f3ea:	f003 fde1 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f3ee:	2203      	movs	r2, #3
 800f3f0:	f105 010c 	add.w	r1, r5, #12
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f003 fdda 	bl	8012fb0 <ucdr_serialize_array_uint8_t>
 800f3fc:	7be9      	ldrb	r1, [r5, #15]
 800f3fe:	4680      	mov	r8, r0
 800f400:	4620      	mov	r0, r4
 800f402:	f003 fecb 	bl	801319c <ucdr_serialize_uint8_t>
 800f406:	6929      	ldr	r1, [r5, #16]
 800f408:	4606      	mov	r6, r0
 800f40a:	4620      	mov	r0, r4
 800f40c:	f004 fcf6 	bl	8013dfc <ucdr_serialize_int32_t>
 800f410:	6969      	ldr	r1, [r5, #20]
 800f412:	4603      	mov	r3, r0
 800f414:	4620      	mov	r0, r4
 800f416:	ea07 0708 	and.w	r7, r7, r8
 800f41a:	461c      	mov	r4, r3
 800f41c:	f004 f8d4 	bl	80135c8 <ucdr_serialize_uint32_t>
 800f420:	403e      	ands	r6, r7
 800f422:	4034      	ands	r4, r6
 800f424:	4020      	ands	r0, r4
 800f426:	b2c0      	uxtb	r0, r0
 800f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f42c <uxr_deserialize_SampleIdentity>:
 800f42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f430:	220c      	movs	r2, #12
 800f432:	4604      	mov	r4, r0
 800f434:	460d      	mov	r5, r1
 800f436:	f003 fe1f 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f43a:	2203      	movs	r2, #3
 800f43c:	f105 010c 	add.w	r1, r5, #12
 800f440:	4607      	mov	r7, r0
 800f442:	4620      	mov	r0, r4
 800f444:	f003 fe18 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 800f448:	f105 010f 	add.w	r1, r5, #15
 800f44c:	4680      	mov	r8, r0
 800f44e:	4620      	mov	r0, r4
 800f450:	f003 feba 	bl	80131c8 <ucdr_deserialize_uint8_t>
 800f454:	f105 0110 	add.w	r1, r5, #16
 800f458:	4606      	mov	r6, r0
 800f45a:	4620      	mov	r0, r4
 800f45c:	f004 fd66 	bl	8013f2c <ucdr_deserialize_int32_t>
 800f460:	f105 0114 	add.w	r1, r5, #20
 800f464:	4603      	mov	r3, r0
 800f466:	4620      	mov	r0, r4
 800f468:	ea07 0708 	and.w	r7, r7, r8
 800f46c:	461c      	mov	r4, r3
 800f46e:	f004 f9db 	bl	8013828 <ucdr_deserialize_uint32_t>
 800f472:	403e      	ands	r6, r7
 800f474:	4034      	ands	r4, r6
 800f476:	4020      	ands	r0, r4
 800f478:	b2c0      	uxtb	r0, r0
 800f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47e:	bf00      	nop

0800f480 <rcl_client_get_rmw_handle>:
 800f480:	b118      	cbz	r0, 800f48a <rcl_client_get_rmw_handle+0xa>
 800f482:	6800      	ldr	r0, [r0, #0]
 800f484:	b108      	cbz	r0, 800f48a <rcl_client_get_rmw_handle+0xa>
 800f486:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f48a:	4770      	bx	lr

0800f48c <rcl_send_request>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	b1e8      	cbz	r0, 800f4ce <rcl_send_request+0x42>
 800f492:	4604      	mov	r4, r0
 800f494:	6800      	ldr	r0, [r0, #0]
 800f496:	b1d0      	cbz	r0, 800f4ce <rcl_send_request+0x42>
 800f498:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800f49c:	b1bb      	cbz	r3, 800f4ce <rcl_send_request+0x42>
 800f49e:	460e      	mov	r6, r1
 800f4a0:	b1d1      	cbz	r1, 800f4d8 <rcl_send_request+0x4c>
 800f4a2:	4615      	mov	r5, r2
 800f4a4:	b1c2      	cbz	r2, 800f4d8 <rcl_send_request+0x4c>
 800f4a6:	2105      	movs	r1, #5
 800f4a8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f4ac:	f002 fb3c 	bl	8011b28 <__atomic_load_8>
 800f4b0:	6823      	ldr	r3, [r4, #0]
 800f4b2:	e9c5 0100 	strd	r0, r1, [r5]
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	4631      	mov	r1, r6
 800f4ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f4be:	f003 f9c1 	bl	8012844 <rmw_send_request>
 800f4c2:	4606      	mov	r6, r0
 800f4c4:	b160      	cbz	r0, 800f4e0 <rcl_send_request+0x54>
 800f4c6:	2601      	movs	r6, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	b002      	add	sp, #8
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
 800f4ce:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800f4d2:	4630      	mov	r0, r6
 800f4d4:	b002      	add	sp, #8
 800f4d6:	bd70      	pop	{r4, r5, r6, pc}
 800f4d8:	260b      	movs	r6, #11
 800f4da:	4630      	mov	r0, r6
 800f4dc:	b002      	add	sp, #8
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	6820      	ldr	r0, [r4, #0]
 800f4e2:	2105      	movs	r1, #5
 800f4e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f4e8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800f4ec:	9100      	str	r1, [sp, #0]
 800f4ee:	f002 fb87 	bl	8011c00 <__atomic_exchange_8>
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	b002      	add	sp, #8
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}

0800f4f8 <rcl_take_response>:
 800f4f8:	b570      	push	{r4, r5, r6, lr}
 800f4fa:	468e      	mov	lr, r1
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	4616      	mov	r6, r2
 800f500:	4605      	mov	r5, r0
 800f502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f506:	b08c      	sub	sp, #48	@ 0x30
 800f508:	f10d 0c18 	add.w	ip, sp, #24
 800f50c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f510:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f514:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f518:	b35d      	cbz	r5, 800f572 <rcl_take_response+0x7a>
 800f51a:	682b      	ldr	r3, [r5, #0]
 800f51c:	b34b      	cbz	r3, 800f572 <rcl_take_response+0x7a>
 800f51e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f522:	b330      	cbz	r0, 800f572 <rcl_take_response+0x7a>
 800f524:	b346      	cbz	r6, 800f578 <rcl_take_response+0x80>
 800f526:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800f580 <rcl_take_response+0x88>
 800f52a:	2300      	movs	r3, #0
 800f52c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f530:	4632      	mov	r2, r6
 800f532:	f10d 0307 	add.w	r3, sp, #7
 800f536:	a902      	add	r1, sp, #8
 800f538:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f53c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f540:	f003 fa88 	bl	8012a54 <rmw_take_response>
 800f544:	4605      	mov	r5, r0
 800f546:	b9c8      	cbnz	r0, 800f57c <rcl_take_response+0x84>
 800f548:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f54c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f550:	2a00      	cmp	r2, #0
 800f552:	bf08      	it	eq
 800f554:	461d      	moveq	r5, r3
 800f556:	f10d 0e18 	add.w	lr, sp, #24
 800f55a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f55e:	46a4      	mov	ip, r4
 800f560:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f564:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f568:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f56c:	4628      	mov	r0, r5
 800f56e:	b00c      	add	sp, #48	@ 0x30
 800f570:	bd70      	pop	{r4, r5, r6, pc}
 800f572:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800f576:	e7ee      	b.n	800f556 <rcl_take_response+0x5e>
 800f578:	250b      	movs	r5, #11
 800f57a:	e7ec      	b.n	800f556 <rcl_take_response+0x5e>
 800f57c:	2501      	movs	r5, #1
 800f57e:	e7ea      	b.n	800f556 <rcl_take_response+0x5e>
	...

0800f588 <rcl_client_is_valid>:
 800f588:	b130      	cbz	r0, 800f598 <rcl_client_is_valid+0x10>
 800f58a:	6800      	ldr	r0, [r0, #0]
 800f58c:	b120      	cbz	r0, 800f598 <rcl_client_is_valid+0x10>
 800f58e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f592:	3800      	subs	r0, #0
 800f594:	bf18      	it	ne
 800f596:	2001      	movne	r0, #1
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop

0800f59c <rcl_convert_rmw_ret_to_rcl_ret>:
 800f59c:	280b      	cmp	r0, #11
 800f59e:	dc0d      	bgt.n	800f5bc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	db09      	blt.n	800f5b8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5a4:	280b      	cmp	r0, #11
 800f5a6:	d807      	bhi.n	800f5b8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f5a8:	e8df f000 	tbb	[pc, r0]
 800f5ac:	07060607 	.word	0x07060607
 800f5b0:	06060606 	.word	0x06060606
 800f5b4:	07070606 	.word	0x07070606
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	4770      	bx	lr
 800f5bc:	28cb      	cmp	r0, #203	@ 0xcb
 800f5be:	bf18      	it	ne
 800f5c0:	2001      	movne	r0, #1
 800f5c2:	4770      	bx	lr

0800f5c4 <rcl_get_zero_initialized_context>:
 800f5c4:	4a03      	ldr	r2, [pc, #12]	@ (800f5d4 <rcl_get_zero_initialized_context+0x10>)
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f5cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	4770      	bx	lr
 800f5d4:	080199cc 	.word	0x080199cc

0800f5d8 <rcl_context_is_valid>:
 800f5d8:	b118      	cbz	r0, 800f5e2 <rcl_context_is_valid+0xa>
 800f5da:	6840      	ldr	r0, [r0, #4]
 800f5dc:	3800      	subs	r0, #0
 800f5de:	bf18      	it	ne
 800f5e0:	2001      	movne	r0, #1
 800f5e2:	4770      	bx	lr

0800f5e4 <__cleanup_context>:
 800f5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	6800      	ldr	r0, [r0, #0]
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	6073      	str	r3, [r6, #4]
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d049      	beq.n	800f688 <__cleanup_context+0xa4>
 800f5f4:	6947      	ldr	r7, [r0, #20]
 800f5f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f5fa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f5fe:	b137      	cbz	r7, 800f60e <__cleanup_context+0x2a>
 800f600:	3014      	adds	r0, #20
 800f602:	f000 fa6d 	bl	800fae0 <rcl_init_options_fini>
 800f606:	4607      	mov	r7, r0
 800f608:	2800      	cmp	r0, #0
 800f60a:	d144      	bne.n	800f696 <__cleanup_context+0xb2>
 800f60c:	6830      	ldr	r0, [r6, #0]
 800f60e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f610:	b143      	cbz	r3, 800f624 <__cleanup_context+0x40>
 800f612:	3028      	adds	r0, #40	@ 0x28
 800f614:	f003 f872 	bl	80126fc <rmw_context_fini>
 800f618:	b118      	cbz	r0, 800f622 <__cleanup_context+0x3e>
 800f61a:	2f00      	cmp	r7, #0
 800f61c:	d03e      	beq.n	800f69c <__cleanup_context+0xb8>
 800f61e:	f7fb faeb 	bl	800abf8 <rcutils_reset_error>
 800f622:	6830      	ldr	r0, [r6, #0]
 800f624:	6a03      	ldr	r3, [r0, #32]
 800f626:	b1db      	cbz	r3, 800f660 <__cleanup_context+0x7c>
 800f628:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f62c:	2a01      	cmp	r2, #1
 800f62e:	f17c 0100 	sbcs.w	r1, ip, #0
 800f632:	db11      	blt.n	800f658 <__cleanup_context+0x74>
 800f634:	2400      	movs	r4, #0
 800f636:	4625      	mov	r5, r4
 800f638:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f63c:	4649      	mov	r1, r9
 800f63e:	b1b8      	cbz	r0, 800f670 <__cleanup_context+0x8c>
 800f640:	47c0      	blx	r8
 800f642:	6833      	ldr	r3, [r6, #0]
 800f644:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f648:	3401      	adds	r4, #1
 800f64a:	f145 0500 	adc.w	r5, r5, #0
 800f64e:	4294      	cmp	r4, r2
 800f650:	eb75 010c 	sbcs.w	r1, r5, ip
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	dbef      	blt.n	800f638 <__cleanup_context+0x54>
 800f658:	4618      	mov	r0, r3
 800f65a:	4649      	mov	r1, r9
 800f65c:	47c0      	blx	r8
 800f65e:	6830      	ldr	r0, [r6, #0]
 800f660:	4649      	mov	r1, r9
 800f662:	47c0      	blx	r8
 800f664:	2300      	movs	r3, #0
 800f666:	e9c6 3300 	strd	r3, r3, [r6]
 800f66a:	4638      	mov	r0, r7
 800f66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f670:	3401      	adds	r4, #1
 800f672:	f145 0500 	adc.w	r5, r5, #0
 800f676:	4294      	cmp	r4, r2
 800f678:	eb75 010c 	sbcs.w	r1, r5, ip
 800f67c:	dbdc      	blt.n	800f638 <__cleanup_context+0x54>
 800f67e:	4618      	mov	r0, r3
 800f680:	4649      	mov	r1, r9
 800f682:	47c0      	blx	r8
 800f684:	6830      	ldr	r0, [r6, #0]
 800f686:	e7eb      	b.n	800f660 <__cleanup_context+0x7c>
 800f688:	4607      	mov	r7, r0
 800f68a:	2300      	movs	r3, #0
 800f68c:	e9c6 3300 	strd	r3, r3, [r6]
 800f690:	4638      	mov	r0, r7
 800f692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f696:	f7fb faaf 	bl	800abf8 <rcutils_reset_error>
 800f69a:	e7b7      	b.n	800f60c <__cleanup_context+0x28>
 800f69c:	f7ff ff7e 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	e7bc      	b.n	800f61e <__cleanup_context+0x3a>

0800f6a4 <rcl_get_zero_initialized_guard_condition>:
 800f6a4:	4a03      	ldr	r2, [pc, #12]	@ (800f6b4 <rcl_get_zero_initialized_guard_condition+0x10>)
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	4770      	bx	lr
 800f6b4:	080199d4 	.word	0x080199d4

0800f6b8 <rcl_guard_condition_init_from_rmw>:
 800f6b8:	b082      	sub	sp, #8
 800f6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	f84c 3f04 	str.w	r3, [ip, #4]!
 800f6ca:	460e      	mov	r6, r1
 800f6cc:	4617      	mov	r7, r2
 800f6ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f6d2:	f10d 0e04 	add.w	lr, sp, #4
 800f6d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f6da:	f8dc 3000 	ldr.w	r3, [ip]
 800f6de:	f8ce 3000 	str.w	r3, [lr]
 800f6e2:	a801      	add	r0, sp, #4
 800f6e4:	f7fb fa4c 	bl	800ab80 <rcutils_allocator_is_valid>
 800f6e8:	b350      	cbz	r0, 800f740 <rcl_guard_condition_init_from_rmw+0x88>
 800f6ea:	b34c      	cbz	r4, 800f740 <rcl_guard_condition_init_from_rmw+0x88>
 800f6ec:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f6f0:	f1b8 0f00 	cmp.w	r8, #0
 800f6f4:	d11e      	bne.n	800f734 <rcl_guard_condition_init_from_rmw+0x7c>
 800f6f6:	b31f      	cbz	r7, 800f740 <rcl_guard_condition_init_from_rmw+0x88>
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	f7ff ff6d 	bl	800f5d8 <rcl_context_is_valid>
 800f6fe:	b328      	cbz	r0, 800f74c <rcl_guard_condition_init_from_rmw+0x94>
 800f700:	9b01      	ldr	r3, [sp, #4]
 800f702:	9905      	ldr	r1, [sp, #20]
 800f704:	201c      	movs	r0, #28
 800f706:	4798      	blx	r3
 800f708:	4605      	mov	r5, r0
 800f70a:	6060      	str	r0, [r4, #4]
 800f70c:	b358      	cbz	r0, 800f766 <rcl_guard_condition_init_from_rmw+0xae>
 800f70e:	b1fe      	cbz	r6, 800f750 <rcl_guard_condition_init_from_rmw+0x98>
 800f710:	6006      	str	r6, [r0, #0]
 800f712:	f880 8004 	strb.w	r8, [r0, #4]
 800f716:	ac01      	add	r4, sp, #4
 800f718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f71a:	f105 0c08 	add.w	ip, r5, #8
 800f71e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	f8cc 3000 	str.w	r3, [ip]
 800f728:	2000      	movs	r0, #0
 800f72a:	b006      	add	sp, #24
 800f72c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f730:	b002      	add	sp, #8
 800f732:	4770      	bx	lr
 800f734:	2064      	movs	r0, #100	@ 0x64
 800f736:	b006      	add	sp, #24
 800f738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f73c:	b002      	add	sp, #8
 800f73e:	4770      	bx	lr
 800f740:	200b      	movs	r0, #11
 800f742:	b006      	add	sp, #24
 800f744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	b002      	add	sp, #8
 800f74a:	4770      	bx	lr
 800f74c:	2065      	movs	r0, #101	@ 0x65
 800f74e:	e7f2      	b.n	800f736 <rcl_guard_condition_init_from_rmw+0x7e>
 800f750:	6838      	ldr	r0, [r7, #0]
 800f752:	3028      	adds	r0, #40	@ 0x28
 800f754:	f002 fd7c 	bl	8012250 <rmw_create_guard_condition>
 800f758:	6028      	str	r0, [r5, #0]
 800f75a:	6865      	ldr	r5, [r4, #4]
 800f75c:	682e      	ldr	r6, [r5, #0]
 800f75e:	b126      	cbz	r6, 800f76a <rcl_guard_condition_init_from_rmw+0xb2>
 800f760:	2301      	movs	r3, #1
 800f762:	712b      	strb	r3, [r5, #4]
 800f764:	e7d7      	b.n	800f716 <rcl_guard_condition_init_from_rmw+0x5e>
 800f766:	200a      	movs	r0, #10
 800f768:	e7e5      	b.n	800f736 <rcl_guard_condition_init_from_rmw+0x7e>
 800f76a:	4628      	mov	r0, r5
 800f76c:	9b02      	ldr	r3, [sp, #8]
 800f76e:	9905      	ldr	r1, [sp, #20]
 800f770:	4798      	blx	r3
 800f772:	6066      	str	r6, [r4, #4]
 800f774:	2001      	movs	r0, #1
 800f776:	e7de      	b.n	800f736 <rcl_guard_condition_init_from_rmw+0x7e>

0800f778 <rcl_guard_condition_fini>:
 800f778:	b570      	push	{r4, r5, r6, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	b1f0      	cbz	r0, 800f7bc <rcl_guard_condition_fini+0x44>
 800f77e:	6843      	ldr	r3, [r0, #4]
 800f780:	4604      	mov	r4, r0
 800f782:	b163      	cbz	r3, 800f79e <rcl_guard_condition_fini+0x26>
 800f784:	6818      	ldr	r0, [r3, #0]
 800f786:	68de      	ldr	r6, [r3, #12]
 800f788:	6999      	ldr	r1, [r3, #24]
 800f78a:	b160      	cbz	r0, 800f7a6 <rcl_guard_condition_fini+0x2e>
 800f78c:	791d      	ldrb	r5, [r3, #4]
 800f78e:	b965      	cbnz	r5, 800f7aa <rcl_guard_condition_fini+0x32>
 800f790:	4618      	mov	r0, r3
 800f792:	47b0      	blx	r6
 800f794:	2300      	movs	r3, #0
 800f796:	4628      	mov	r0, r5
 800f798:	6063      	str	r3, [r4, #4]
 800f79a:	b002      	add	sp, #8
 800f79c:	bd70      	pop	{r4, r5, r6, pc}
 800f79e:	461d      	mov	r5, r3
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	b002      	add	sp, #8
 800f7a4:	bd70      	pop	{r4, r5, r6, pc}
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	e7f2      	b.n	800f790 <rcl_guard_condition_fini+0x18>
 800f7aa:	9101      	str	r1, [sp, #4]
 800f7ac:	f002 fd64 	bl	8012278 <rmw_destroy_guard_condition>
 800f7b0:	1e05      	subs	r5, r0, #0
 800f7b2:	6863      	ldr	r3, [r4, #4]
 800f7b4:	9901      	ldr	r1, [sp, #4]
 800f7b6:	bf18      	it	ne
 800f7b8:	2501      	movne	r5, #1
 800f7ba:	e7e9      	b.n	800f790 <rcl_guard_condition_fini+0x18>
 800f7bc:	250b      	movs	r5, #11
 800f7be:	4628      	mov	r0, r5
 800f7c0:	b002      	add	sp, #8
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}

0800f7c4 <rcl_guard_condition_get_default_options>:
 800f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c6:	b087      	sub	sp, #28
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	4668      	mov	r0, sp
 800f7cc:	f7fb f9ca 	bl	800ab64 <rcutils_get_default_allocator>
 800f7d0:	4b09      	ldr	r3, [pc, #36]	@ (800f7f8 <rcl_guard_condition_get_default_options+0x34>)
 800f7d2:	46ee      	mov	lr, sp
 800f7d4:	469c      	mov	ip, r3
 800f7d6:	461d      	mov	r5, r3
 800f7d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f7dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7e2:	4634      	mov	r4, r6
 800f7e4:	f8de 7000 	ldr.w	r7, [lr]
 800f7e8:	f8cc 7000 	str.w	r7, [ip]
 800f7ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	6027      	str	r7, [r4, #0]
 800f7f2:	b007      	add	sp, #28
 800f7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200179dc 	.word	0x200179dc

0800f7fc <rcl_guard_condition_get_rmw_handle>:
 800f7fc:	b110      	cbz	r0, 800f804 <rcl_guard_condition_get_rmw_handle+0x8>
 800f7fe:	6840      	ldr	r0, [r0, #4]
 800f800:	b100      	cbz	r0, 800f804 <rcl_guard_condition_get_rmw_handle+0x8>
 800f802:	6800      	ldr	r0, [r0, #0]
 800f804:	4770      	bx	lr
 800f806:	bf00      	nop

0800f808 <rcl_init>:
 800f808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f80c:	1e05      	subs	r5, r0, #0
 800f80e:	b09e      	sub	sp, #120	@ 0x78
 800f810:	460e      	mov	r6, r1
 800f812:	4690      	mov	r8, r2
 800f814:	461f      	mov	r7, r3
 800f816:	f340 809c 	ble.w	800f952 <rcl_init+0x14a>
 800f81a:	2900      	cmp	r1, #0
 800f81c:	f000 809c 	beq.w	800f958 <rcl_init+0x150>
 800f820:	f1a1 0e04 	sub.w	lr, r1, #4
 800f824:	f04f 0c00 	mov.w	ip, #0
 800f828:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f82c:	f10c 0c01 	add.w	ip, ip, #1
 800f830:	2c00      	cmp	r4, #0
 800f832:	f000 8091 	beq.w	800f958 <rcl_init+0x150>
 800f836:	4565      	cmp	r5, ip
 800f838:	d1f6      	bne.n	800f828 <rcl_init+0x20>
 800f83a:	f1b8 0f00 	cmp.w	r8, #0
 800f83e:	f000 808b 	beq.w	800f958 <rcl_init+0x150>
 800f842:	f8d8 4000 	ldr.w	r4, [r8]
 800f846:	2c00      	cmp	r4, #0
 800f848:	f000 8086 	beq.w	800f958 <rcl_init+0x150>
 800f84c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f84e:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800f852:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	f8cc 3000 	str.w	r3, [ip]
 800f85c:	a819      	add	r0, sp, #100	@ 0x64
 800f85e:	f7fb f98f 	bl	800ab80 <rcutils_allocator_is_valid>
 800f862:	2800      	cmp	r0, #0
 800f864:	d078      	beq.n	800f958 <rcl_init+0x150>
 800f866:	2f00      	cmp	r7, #0
 800f868:	d076      	beq.n	800f958 <rcl_init+0x150>
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d178      	bne.n	800f962 <rcl_init+0x15a>
 800f870:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800f874:	2178      	movs	r1, #120	@ 0x78
 800f876:	2001      	movs	r0, #1
 800f878:	4798      	blx	r3
 800f87a:	4604      	mov	r4, r0
 800f87c:	6038      	str	r0, [r7, #0]
 800f87e:	2800      	cmp	r0, #0
 800f880:	f000 80b6 	beq.w	800f9f0 <rcl_init+0x1e8>
 800f884:	a802      	add	r0, sp, #8
 800f886:	f002 fb57 	bl	8011f38 <rmw_get_zero_initialized_context>
 800f88a:	a902      	add	r1, sp, #8
 800f88c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f890:	2250      	movs	r2, #80	@ 0x50
 800f892:	ac19      	add	r4, sp, #100	@ 0x64
 800f894:	f007 fd3f 	bl	8017316 <memcpy>
 800f898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f89a:	f8d7 e000 	ldr.w	lr, [r7]
 800f89e:	46f4      	mov	ip, lr
 800f8a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	f8cc 3000 	str.w	r3, [ip]
 800f8aa:	f10e 0114 	add.w	r1, lr, #20
 800f8ae:	4640      	mov	r0, r8
 800f8b0:	f000 f940 	bl	800fb34 <rcl_init_options_copy>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d144      	bne.n	800f944 <rcl_init+0x13c>
 800f8ba:	f8d7 9000 	ldr.w	r9, [r7]
 800f8be:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f8c2:	f8c9 0020 	str.w	r0, [r9, #32]
 800f8c6:	f8c9 5018 	str.w	r5, [r9, #24]
 800f8ca:	f8c9 801c 	str.w	r8, [r9, #28]
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	d04e      	beq.n	800f970 <rcl_init+0x168>
 800f8d2:	2e00      	cmp	r6, #0
 800f8d4:	d04c      	beq.n	800f970 <rcl_init+0x168>
 800f8d6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800f8da:	2104      	movs	r1, #4
 800f8dc:	4628      	mov	r0, r5
 800f8de:	4798      	blx	r3
 800f8e0:	f8c9 0020 	str.w	r0, [r9, #32]
 800f8e4:	f8d7 9000 	ldr.w	r9, [r7]
 800f8e8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f8ec:	46ca      	mov	sl, r9
 800f8ee:	b343      	cbz	r3, 800f942 <rcl_init+0x13a>
 800f8f0:	2d01      	cmp	r5, #1
 800f8f2:	f178 0300 	sbcs.w	r3, r8, #0
 800f8f6:	db3b      	blt.n	800f970 <rcl_init+0x168>
 800f8f8:	2400      	movs	r4, #0
 800f8fa:	3e04      	subs	r6, #4
 800f8fc:	46a1      	mov	r9, r4
 800f8fe:	e00b      	b.n	800f918 <rcl_init+0x110>
 800f900:	6831      	ldr	r1, [r6, #0]
 800f902:	f007 fd08 	bl	8017316 <memcpy>
 800f906:	3401      	adds	r4, #1
 800f908:	f149 0900 	adc.w	r9, r9, #0
 800f90c:	45c8      	cmp	r8, r9
 800f90e:	bf08      	it	eq
 800f910:	42a5      	cmpeq	r5, r4
 800f912:	d02b      	beq.n	800f96c <rcl_init+0x164>
 800f914:	f8d7 a000 	ldr.w	sl, [r7]
 800f918:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f91c:	f7f0 fcd8 	bl	80002d0 <strlen>
 800f920:	1c42      	adds	r2, r0, #1
 800f922:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f924:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800f926:	f8da a020 	ldr.w	sl, [sl, #32]
 800f92a:	9201      	str	r2, [sp, #4]
 800f92c:	4610      	mov	r0, r2
 800f92e:	4798      	blx	r3
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f936:	6a1b      	ldr	r3, [r3, #32]
 800f938:	9a01      	ldr	r2, [sp, #4]
 800f93a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f93e:	2800      	cmp	r0, #0
 800f940:	d1de      	bne.n	800f900 <rcl_init+0xf8>
 800f942:	240a      	movs	r4, #10
 800f944:	4638      	mov	r0, r7
 800f946:	f7ff fe4d 	bl	800f5e4 <__cleanup_context>
 800f94a:	4620      	mov	r0, r4
 800f94c:	b01e      	add	sp, #120	@ 0x78
 800f94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f952:	2900      	cmp	r1, #0
 800f954:	f43f af71 	beq.w	800f83a <rcl_init+0x32>
 800f958:	240b      	movs	r4, #11
 800f95a:	4620      	mov	r0, r4
 800f95c:	b01e      	add	sp, #120	@ 0x78
 800f95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f962:	2464      	movs	r4, #100	@ 0x64
 800f964:	4620      	mov	r0, r4
 800f966:	b01e      	add	sp, #120	@ 0x78
 800f968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f96c:	f8d7 9000 	ldr.w	r9, [r7]
 800f970:	4926      	ldr	r1, [pc, #152]	@ (800fa0c <rcl_init+0x204>)
 800f972:	680b      	ldr	r3, [r1, #0]
 800f974:	3301      	adds	r3, #1
 800f976:	d036      	beq.n	800f9e6 <rcl_init+0x1de>
 800f978:	600b      	str	r3, [r1, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	2400      	movs	r4, #0
 800f97e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f982:	607b      	str	r3, [r7, #4]
 800f984:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f986:	3301      	adds	r3, #1
 800f988:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800f98c:	d034      	beq.n	800f9f8 <rcl_init+0x1f0>
 800f98e:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f992:	b93b      	cbnz	r3, 800f9a4 <rcl_init+0x19c>
 800f994:	3030      	adds	r0, #48	@ 0x30
 800f996:	f000 f939 	bl	800fc0c <rcl_get_localhost_only>
 800f99a:	4604      	mov	r4, r0
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d1d1      	bne.n	800f944 <rcl_init+0x13c>
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	6958      	ldr	r0, [r3, #20]
 800f9a4:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800f9a6:	aa18      	add	r2, sp, #96	@ 0x60
 800f9a8:	a917      	add	r1, sp, #92	@ 0x5c
 800f9aa:	f000 fd59 	bl	8010460 <rcl_validate_enclave_name>
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d1c7      	bne.n	800f944 <rcl_init+0x13c>
 800f9b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f9b6:	b9eb      	cbnz	r3, 800f9f4 <rcl_init+0x1ec>
 800f9b8:	6839      	ldr	r1, [r7, #0]
 800f9ba:	694b      	ldr	r3, [r1, #20]
 800f9bc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800f9be:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f9c2:	f000 fa99 	bl	800fef8 <rcl_get_security_options_from_environment>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d1bb      	bne.n	800f944 <rcl_init+0x13c>
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6948      	ldr	r0, [r1, #20]
 800f9d0:	3128      	adds	r1, #40	@ 0x28
 800f9d2:	3018      	adds	r0, #24
 800f9d4:	f002 fd5c 	bl	8012490 <rmw_init>
 800f9d8:	4604      	mov	r4, r0
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	d0bd      	beq.n	800f95a <rcl_init+0x152>
 800f9de:	f7ff fddd 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	e7ae      	b.n	800f944 <rcl_init+0x13c>
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	461c      	mov	r4, r3
 800f9ea:	600a      	str	r2, [r1, #0]
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	e7c6      	b.n	800f97e <rcl_init+0x176>
 800f9f0:	240a      	movs	r4, #10
 800f9f2:	e7b2      	b.n	800f95a <rcl_init+0x152>
 800f9f4:	2401      	movs	r4, #1
 800f9f6:	e7a5      	b.n	800f944 <rcl_init+0x13c>
 800f9f8:	3024      	adds	r0, #36	@ 0x24
 800f9fa:	f005 fdfb 	bl	80155f4 <rcl_get_default_domain_id>
 800f9fe:	4604      	mov	r4, r0
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d19f      	bne.n	800f944 <rcl_init+0x13c>
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	6958      	ldr	r0, [r3, #20]
 800fa08:	e7c1      	b.n	800f98e <rcl_init+0x186>
 800fa0a:	bf00      	nop
 800fa0c:	200179f0 	.word	0x200179f0

0800fa10 <rcl_get_zero_initialized_init_options>:
 800fa10:	2000      	movs	r0, #0
 800fa12:	4770      	bx	lr

0800fa14 <rcl_init_options_init>:
 800fa14:	b084      	sub	sp, #16
 800fa16:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa18:	b097      	sub	sp, #92	@ 0x5c
 800fa1a:	ae1d      	add	r6, sp, #116	@ 0x74
 800fa1c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800fa20:	2800      	cmp	r0, #0
 800fa22:	d058      	beq.n	800fad6 <rcl_init_options_init+0xc2>
 800fa24:	6803      	ldr	r3, [r0, #0]
 800fa26:	4605      	mov	r5, r0
 800fa28:	b133      	cbz	r3, 800fa38 <rcl_init_options_init+0x24>
 800fa2a:	2464      	movs	r4, #100	@ 0x64
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	b017      	add	sp, #92	@ 0x5c
 800fa30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fa34:	b004      	add	sp, #16
 800fa36:	4770      	bx	lr
 800fa38:	4630      	mov	r0, r6
 800fa3a:	f7fb f8a1 	bl	800ab80 <rcutils_allocator_is_valid>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d049      	beq.n	800fad6 <rcl_init_options_init+0xc2>
 800fa42:	46b4      	mov	ip, r6
 800fa44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa48:	ac11      	add	r4, sp, #68	@ 0x44
 800fa4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa4c:	f8dc 3000 	ldr.w	r3, [ip]
 800fa50:	6023      	str	r3, [r4, #0]
 800fa52:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fa54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa56:	2050      	movs	r0, #80	@ 0x50
 800fa58:	4798      	blx	r3
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	6028      	str	r0, [r5, #0]
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d03b      	beq.n	800fada <rcl_init_options_init+0xc6>
 800fa62:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800fa66:	4686      	mov	lr, r0
 800fa68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa70:	f8dc 3000 	ldr.w	r3, [ip]
 800fa74:	f8ce 3000 	str.w	r3, [lr]
 800fa78:	a802      	add	r0, sp, #8
 800fa7a:	f002 fa6d 	bl	8011f58 <rmw_get_zero_initialized_init_options>
 800fa7e:	f10d 0e08 	add.w	lr, sp, #8
 800fa82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa86:	f104 0c18 	add.w	ip, r4, #24
 800fa8a:	682f      	ldr	r7, [r5, #0]
 800fa8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800faa0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800faa4:	ac20      	add	r4, sp, #128	@ 0x80
 800faa6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800faaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800faae:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fab2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fab6:	f107 0018 	add.w	r0, r7, #24
 800faba:	f002 fbf1 	bl	80122a0 <rmw_init_options_init>
 800fabe:	4604      	mov	r4, r0
 800fac0:	2800      	cmp	r0, #0
 800fac2:	d0b3      	beq.n	800fa2c <rcl_init_options_init+0x18>
 800fac4:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fac6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fac8:	6828      	ldr	r0, [r5, #0]
 800faca:	4798      	blx	r3
 800facc:	4620      	mov	r0, r4
 800face:	f7ff fd65 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 800fad2:	4604      	mov	r4, r0
 800fad4:	e7aa      	b.n	800fa2c <rcl_init_options_init+0x18>
 800fad6:	240b      	movs	r4, #11
 800fad8:	e7a8      	b.n	800fa2c <rcl_init_options_init+0x18>
 800fada:	240a      	movs	r4, #10
 800fadc:	e7a6      	b.n	800fa2c <rcl_init_options_init+0x18>
 800fade:	bf00      	nop

0800fae0 <rcl_init_options_fini>:
 800fae0:	b530      	push	{r4, r5, lr}
 800fae2:	b087      	sub	sp, #28
 800fae4:	b1f0      	cbz	r0, 800fb24 <rcl_init_options_fini+0x44>
 800fae6:	6803      	ldr	r3, [r0, #0]
 800fae8:	4604      	mov	r4, r0
 800faea:	b1db      	cbz	r3, 800fb24 <rcl_init_options_fini+0x44>
 800faec:	469c      	mov	ip, r3
 800faee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800faf2:	f10d 0e04 	add.w	lr, sp, #4
 800faf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fafa:	f8dc 3000 	ldr.w	r3, [ip]
 800fafe:	f8ce 3000 	str.w	r3, [lr]
 800fb02:	a801      	add	r0, sp, #4
 800fb04:	f7fb f83c 	bl	800ab80 <rcutils_allocator_is_valid>
 800fb08:	b160      	cbz	r0, 800fb24 <rcl_init_options_fini+0x44>
 800fb0a:	6820      	ldr	r0, [r4, #0]
 800fb0c:	3018      	adds	r0, #24
 800fb0e:	f002 fc77 	bl	8012400 <rmw_init_options_fini>
 800fb12:	4605      	mov	r5, r0
 800fb14:	b950      	cbnz	r0, 800fb2c <rcl_init_options_fini+0x4c>
 800fb16:	6820      	ldr	r0, [r4, #0]
 800fb18:	9b02      	ldr	r3, [sp, #8]
 800fb1a:	9905      	ldr	r1, [sp, #20]
 800fb1c:	4798      	blx	r3
 800fb1e:	4628      	mov	r0, r5
 800fb20:	b007      	add	sp, #28
 800fb22:	bd30      	pop	{r4, r5, pc}
 800fb24:	250b      	movs	r5, #11
 800fb26:	4628      	mov	r0, r5
 800fb28:	b007      	add	sp, #28
 800fb2a:	bd30      	pop	{r4, r5, pc}
 800fb2c:	f7ff fd36 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 800fb30:	4605      	mov	r5, r0
 800fb32:	e7f8      	b.n	800fb26 <rcl_init_options_fini+0x46>

0800fb34 <rcl_init_options_copy>:
 800fb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb38:	b094      	sub	sp, #80	@ 0x50
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d058      	beq.n	800fbf0 <rcl_init_options_copy+0xbc>
 800fb3e:	4604      	mov	r4, r0
 800fb40:	6800      	ldr	r0, [r0, #0]
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d054      	beq.n	800fbf0 <rcl_init_options_copy+0xbc>
 800fb46:	460e      	mov	r6, r1
 800fb48:	f7fb f81a 	bl	800ab80 <rcutils_allocator_is_valid>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d04f      	beq.n	800fbf0 <rcl_init_options_copy+0xbc>
 800fb50:	2e00      	cmp	r6, #0
 800fb52:	d04d      	beq.n	800fbf0 <rcl_init_options_copy+0xbc>
 800fb54:	6833      	ldr	r3, [r6, #0]
 800fb56:	b123      	cbz	r3, 800fb62 <rcl_init_options_copy+0x2e>
 800fb58:	2464      	movs	r4, #100	@ 0x64
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	b014      	add	sp, #80	@ 0x50
 800fb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb62:	6827      	ldr	r7, [r4, #0]
 800fb64:	46bc      	mov	ip, r7
 800fb66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb6a:	ad0f      	add	r5, sp, #60	@ 0x3c
 800fb6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb6e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb72:	f8d7 8000 	ldr.w	r8, [r7]
 800fb76:	602b      	str	r3, [r5, #0]
 800fb78:	4619      	mov	r1, r3
 800fb7a:	2050      	movs	r0, #80	@ 0x50
 800fb7c:	47c0      	blx	r8
 800fb7e:	4605      	mov	r5, r0
 800fb80:	6030      	str	r0, [r6, #0]
 800fb82:	b3d0      	cbz	r0, 800fbfa <rcl_init_options_copy+0xc6>
 800fb84:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800fb88:	4686      	mov	lr, r0
 800fb8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb92:	f8dc 3000 	ldr.w	r3, [ip]
 800fb96:	f8ce 3000 	str.w	r3, [lr]
 800fb9a:	4668      	mov	r0, sp
 800fb9c:	f002 f9dc 	bl	8011f58 <rmw_get_zero_initialized_init_options>
 800fba0:	46ee      	mov	lr, sp
 800fba2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fba6:	f105 0c18 	add.w	ip, r5, #24
 800fbaa:	6824      	ldr	r4, [r4, #0]
 800fbac:	6835      	ldr	r5, [r6, #0]
 800fbae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fbbe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fbc2:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fbc6:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fbca:	f104 0018 	add.w	r0, r4, #24
 800fbce:	f105 0118 	add.w	r1, r5, #24
 800fbd2:	f002 fbcd 	bl	8012370 <rmw_init_options_copy>
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d0be      	beq.n	800fb5a <rcl_init_options_copy+0x26>
 800fbdc:	f7fa fff6 	bl	800abcc <rcutils_get_error_string>
 800fbe0:	f7fb f80a 	bl	800abf8 <rcutils_reset_error>
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f7ff ff7b 	bl	800fae0 <rcl_init_options_fini>
 800fbea:	b140      	cbz	r0, 800fbfe <rcl_init_options_copy+0xca>
 800fbec:	4604      	mov	r4, r0
 800fbee:	e7b4      	b.n	800fb5a <rcl_init_options_copy+0x26>
 800fbf0:	240b      	movs	r4, #11
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	b014      	add	sp, #80	@ 0x50
 800fbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfa:	240a      	movs	r4, #10
 800fbfc:	e7ad      	b.n	800fb5a <rcl_init_options_copy+0x26>
 800fbfe:	4620      	mov	r0, r4
 800fc00:	b014      	add	sp, #80	@ 0x50
 800fc02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc06:	f7ff bcc9 	b.w	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 800fc0a:	bf00      	nop

0800fc0c <rcl_get_localhost_only>:
 800fc0c:	b510      	push	{r4, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	2300      	movs	r3, #0
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	b1b8      	cbz	r0, 800fc46 <rcl_get_localhost_only+0x3a>
 800fc16:	4604      	mov	r4, r0
 800fc18:	a901      	add	r1, sp, #4
 800fc1a:	480c      	ldr	r0, [pc, #48]	@ (800fc4c <rcl_get_localhost_only+0x40>)
 800fc1c:	f7fa ffbe 	bl	800ab9c <rcutils_get_env>
 800fc20:	b110      	cbz	r0, 800fc28 <rcl_get_localhost_only+0x1c>
 800fc22:	2001      	movs	r0, #1
 800fc24:	b002      	add	sp, #8
 800fc26:	bd10      	pop	{r4, pc}
 800fc28:	9b01      	ldr	r3, [sp, #4]
 800fc2a:	b113      	cbz	r3, 800fc32 <rcl_get_localhost_only+0x26>
 800fc2c:	781a      	ldrb	r2, [r3, #0]
 800fc2e:	2a31      	cmp	r2, #49	@ 0x31
 800fc30:	d004      	beq.n	800fc3c <rcl_get_localhost_only+0x30>
 800fc32:	2302      	movs	r3, #2
 800fc34:	2000      	movs	r0, #0
 800fc36:	7023      	strb	r3, [r4, #0]
 800fc38:	b002      	add	sp, #8
 800fc3a:	bd10      	pop	{r4, pc}
 800fc3c:	785b      	ldrb	r3, [r3, #1]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1f7      	bne.n	800fc32 <rcl_get_localhost_only+0x26>
 800fc42:	2301      	movs	r3, #1
 800fc44:	e7f6      	b.n	800fc34 <rcl_get_localhost_only+0x28>
 800fc46:	200b      	movs	r0, #11
 800fc48:	b002      	add	sp, #8
 800fc4a:	bd10      	pop	{r4, pc}
 800fc4c:	080199dc 	.word	0x080199dc

0800fc50 <rcl_node_resolve_name>:
 800fc50:	b082      	sub	sp, #8
 800fc52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc56:	b091      	sub	sp, #68	@ 0x44
 800fc58:	ac1a      	add	r4, sp, #104	@ 0x68
 800fc5a:	e884 000c 	stmia.w	r4, {r2, r3}
 800fc5e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d03b      	beq.n	800fcde <rcl_node_resolve_name+0x8e>
 800fc66:	460c      	mov	r4, r1
 800fc68:	4605      	mov	r5, r0
 800fc6a:	f7f9 fd29 	bl	80096c0 <rcl_node_get_options>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	d037      	beq.n	800fce2 <rcl_node_resolve_name+0x92>
 800fc72:	4628      	mov	r0, r5
 800fc74:	f7f9 fd14 	bl	80096a0 <rcl_node_get_name>
 800fc78:	4606      	mov	r6, r0
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f7f9 fd18 	bl	80096b0 <rcl_node_get_namespace>
 800fc80:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800fc84:	4681      	mov	r9, r0
 800fc86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fc8a:	ad0b      	add	r5, sp, #44	@ 0x2c
 800fc8c:	46ac      	mov	ip, r5
 800fc8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc92:	f8de 3000 	ldr.w	r3, [lr]
 800fc96:	f8cc 3000 	str.w	r3, [ip]
 800fc9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc9c:	b1fb      	cbz	r3, 800fcde <rcl_node_resolve_name+0x8e>
 800fc9e:	468a      	mov	sl, r1
 800fca0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800fca4:	f002 f81c 	bl	8011ce0 <rcutils_get_zero_initialized_string_map>
 800fca8:	ab10      	add	r3, sp, #64	@ 0x40
 800fcaa:	9008      	str	r0, [sp, #32]
 800fcac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800fcb0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	e895 000c 	ldmia.w	r5, {r2, r3}
 800fcba:	a808      	add	r0, sp, #32
 800fcbc:	f002 f888 	bl	8011dd0 <rcutils_string_map_init>
 800fcc0:	4607      	mov	r7, r0
 800fcc2:	b180      	cbz	r0, 800fce6 <rcl_node_resolve_name+0x96>
 800fcc4:	f7fa ff82 	bl	800abcc <rcutils_get_error_string>
 800fcc8:	f7fa ff96 	bl	800abf8 <rcutils_reset_error>
 800fccc:	2f0a      	cmp	r7, #10
 800fcce:	bf18      	it	ne
 800fcd0:	2701      	movne	r7, #1
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	b011      	add	sp, #68	@ 0x44
 800fcd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcda:	b002      	add	sp, #8
 800fcdc:	4770      	bx	lr
 800fcde:	270b      	movs	r7, #11
 800fce0:	e7f7      	b.n	800fcd2 <rcl_node_resolve_name+0x82>
 800fce2:	2701      	movs	r7, #1
 800fce4:	e7f5      	b.n	800fcd2 <rcl_node_resolve_name+0x82>
 800fce6:	9009      	str	r0, [sp, #36]	@ 0x24
 800fce8:	9007      	str	r0, [sp, #28]
 800fcea:	a808      	add	r0, sp, #32
 800fcec:	f005 fe14 	bl	8015918 <rcl_get_default_topic_name_substitutions>
 800fcf0:	4607      	mov	r7, r0
 800fcf2:	b1a8      	cbz	r0, 800fd20 <rcl_node_resolve_name+0xd0>
 800fcf4:	280a      	cmp	r0, #10
 800fcf6:	9c07      	ldr	r4, [sp, #28]
 800fcf8:	d000      	beq.n	800fcfc <rcl_node_resolve_name+0xac>
 800fcfa:	2701      	movs	r7, #1
 800fcfc:	a808      	add	r0, sp, #32
 800fcfe:	f002 f8a7 	bl	8011e50 <rcutils_string_map_fini>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d13d      	bne.n	800fd82 <rcl_node_resolve_name+0x132>
 800fd06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd08:	4659      	mov	r1, fp
 800fd0a:	47d0      	blx	sl
 800fd0c:	4659      	mov	r1, fp
 800fd0e:	4620      	mov	r0, r4
 800fd10:	47d0      	blx	sl
 800fd12:	f1b8 0f00 	cmp.w	r8, #0
 800fd16:	d0dc      	beq.n	800fcd2 <rcl_node_resolve_name+0x82>
 800fd18:	2f67      	cmp	r7, #103	@ 0x67
 800fd1a:	bf08      	it	eq
 800fd1c:	2768      	moveq	r7, #104	@ 0x68
 800fd1e:	e7d8      	b.n	800fcd2 <rcl_node_resolve_name+0x82>
 800fd20:	ab09      	add	r3, sp, #36	@ 0x24
 800fd22:	9305      	str	r3, [sp, #20]
 800fd24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd26:	46ec      	mov	ip, sp
 800fd28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	f8cc 3000 	str.w	r3, [ip]
 800fd32:	464a      	mov	r2, r9
 800fd34:	4631      	mov	r1, r6
 800fd36:	4620      	mov	r0, r4
 800fd38:	ab08      	add	r3, sp, #32
 800fd3a:	f005 fc8f 	bl	801565c <rcl_expand_topic_name>
 800fd3e:	4607      	mov	r7, r0
 800fd40:	b9b8      	cbnz	r0, 800fd72 <rcl_node_resolve_name+0x122>
 800fd42:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800fd44:	9009      	str	r0, [sp, #36]	@ 0x24
 800fd46:	4602      	mov	r2, r0
 800fd48:	a90a      	add	r1, sp, #40	@ 0x28
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f002 f99c 	bl	8012088 <rmw_validate_full_topic_name>
 800fd50:	b988      	cbnz	r0, 800fd76 <rcl_node_resolve_name+0x126>
 800fd52:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800fd54:	b9d5      	cbnz	r5, 800fd8c <rcl_node_resolve_name+0x13c>
 800fd56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fd58:	a808      	add	r0, sp, #32
 800fd5a:	601c      	str	r4, [r3, #0]
 800fd5c:	f002 f878 	bl	8011e50 <rcutils_string_map_fini>
 800fd60:	4607      	mov	r7, r0
 800fd62:	b1a8      	cbz	r0, 800fd90 <rcl_node_resolve_name+0x140>
 800fd64:	f7fa ff32 	bl	800abcc <rcutils_get_error_string>
 800fd68:	462c      	mov	r4, r5
 800fd6a:	f7fa ff45 	bl	800abf8 <rcutils_reset_error>
 800fd6e:	2701      	movs	r7, #1
 800fd70:	e7c9      	b.n	800fd06 <rcl_node_resolve_name+0xb6>
 800fd72:	9c07      	ldr	r4, [sp, #28]
 800fd74:	e7c2      	b.n	800fcfc <rcl_node_resolve_name+0xac>
 800fd76:	f7fa ff29 	bl	800abcc <rcutils_get_error_string>
 800fd7a:	2701      	movs	r7, #1
 800fd7c:	f7fa ff3c 	bl	800abf8 <rcutils_reset_error>
 800fd80:	e7bc      	b.n	800fcfc <rcl_node_resolve_name+0xac>
 800fd82:	f7fa ff23 	bl	800abcc <rcutils_get_error_string>
 800fd86:	f7fa ff37 	bl	800abf8 <rcutils_reset_error>
 800fd8a:	e7bc      	b.n	800fd06 <rcl_node_resolve_name+0xb6>
 800fd8c:	2767      	movs	r7, #103	@ 0x67
 800fd8e:	e7b5      	b.n	800fcfc <rcl_node_resolve_name+0xac>
 800fd90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fd92:	4659      	mov	r1, fp
 800fd94:	47d0      	blx	sl
 800fd96:	4659      	mov	r1, fp
 800fd98:	4638      	mov	r0, r7
 800fd9a:	47d0      	blx	sl
 800fd9c:	e799      	b.n	800fcd2 <rcl_node_resolve_name+0x82>
 800fd9e:	bf00      	nop

0800fda0 <exact_match_lookup>:
 800fda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fda2:	f102 0708 	add.w	r7, r2, #8
 800fda6:	460b      	mov	r3, r1
 800fda8:	4614      	mov	r4, r2
 800fdaa:	4606      	mov	r6, r0
 800fdac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fdb0:	b085      	sub	sp, #20
 800fdb2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	4919      	ldr	r1, [pc, #100]	@ (800fe20 <exact_match_lookup+0x80>)
 800fdba:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fdbe:	f001 ff59 	bl	8011c74 <rcutils_join_path>
 800fdc2:	7833      	ldrb	r3, [r6, #0]
 800fdc4:	2b2f      	cmp	r3, #47	@ 0x2f
 800fdc6:	4605      	mov	r5, r0
 800fdc8:	d023      	beq.n	800fe12 <exact_match_lookup+0x72>
 800fdca:	f104 030c 	add.w	r3, r4, #12
 800fdce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fdd2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fdd6:	1c70      	adds	r0, r6, #1
 800fdd8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fddc:	f001 ff50 	bl	8011c80 <rcutils_to_native_path>
 800fde0:	4606      	mov	r6, r0
 800fde2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800fde6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fdea:	4631      	mov	r1, r6
 800fdec:	e894 000c 	ldmia.w	r4, {r2, r3}
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f001 ff3f 	bl	8011c74 <rcutils_join_path>
 800fdf6:	6862      	ldr	r2, [r4, #4]
 800fdf8:	6921      	ldr	r1, [r4, #16]
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	461e      	mov	r6, r3
 800fe00:	4790      	blx	r2
 800fe02:	4628      	mov	r0, r5
 800fe04:	6863      	ldr	r3, [r4, #4]
 800fe06:	6921      	ldr	r1, [r4, #16]
 800fe08:	4798      	blx	r3
 800fe0a:	4635      	mov	r5, r6
 800fe0c:	4628      	mov	r0, r5
 800fe0e:	b005      	add	sp, #20
 800fe10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe12:	7873      	ldrb	r3, [r6, #1]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1d8      	bne.n	800fdca <exact_match_lookup+0x2a>
 800fe18:	4628      	mov	r0, r5
 800fe1a:	b005      	add	sp, #20
 800fe1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08019a2c 	.word	0x08019a2c

0800fe24 <rcl_get_secure_root>:
 800fe24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe28:	b085      	sub	sp, #20
 800fe2a:	b168      	cbz	r0, 800fe48 <rcl_get_secure_root+0x24>
 800fe2c:	4607      	mov	r7, r0
 800fe2e:	4608      	mov	r0, r1
 800fe30:	460c      	mov	r4, r1
 800fe32:	f7fa fea5 	bl	800ab80 <rcutils_allocator_is_valid>
 800fe36:	b138      	cbz	r0, 800fe48 <rcl_get_secure_root+0x24>
 800fe38:	2300      	movs	r3, #0
 800fe3a:	482d      	ldr	r0, [pc, #180]	@ (800fef0 <rcl_get_secure_root+0xcc>)
 800fe3c:	9303      	str	r3, [sp, #12]
 800fe3e:	a903      	add	r1, sp, #12
 800fe40:	f7fa feac 	bl	800ab9c <rcutils_get_env>
 800fe44:	4605      	mov	r5, r0
 800fe46:	b120      	cbz	r0, 800fe52 <rcl_get_secure_root+0x2e>
 800fe48:	2500      	movs	r5, #0
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	b005      	add	sp, #20
 800fe4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe52:	9b03      	ldr	r3, [sp, #12]
 800fe54:	781a      	ldrb	r2, [r3, #0]
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	d0f6      	beq.n	800fe48 <rcl_get_secure_root+0x24>
 800fe5a:	f104 090c 	add.w	r9, r4, #12
 800fe5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fe62:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe66:	4618      	mov	r0, r3
 800fe68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe6c:	f7fa fffa 	bl	800ae64 <rcutils_strdup>
 800fe70:	4680      	mov	r8, r0
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d0e8      	beq.n	800fe48 <rcl_get_secure_root+0x24>
 800fe76:	481f      	ldr	r0, [pc, #124]	@ (800fef4 <rcl_get_secure_root+0xd0>)
 800fe78:	9503      	str	r5, [sp, #12]
 800fe7a:	a903      	add	r1, sp, #12
 800fe7c:	f7fa fe8e 	bl	800ab9c <rcutils_get_env>
 800fe80:	b160      	cbz	r0, 800fe9c <rcl_get_secure_root+0x78>
 800fe82:	2600      	movs	r6, #0
 800fe84:	6863      	ldr	r3, [r4, #4]
 800fe86:	6921      	ldr	r1, [r4, #16]
 800fe88:	4630      	mov	r0, r6
 800fe8a:	4798      	blx	r3
 800fe8c:	4640      	mov	r0, r8
 800fe8e:	6863      	ldr	r3, [r4, #4]
 800fe90:	6921      	ldr	r1, [r4, #16]
 800fe92:	4798      	blx	r3
 800fe94:	4628      	mov	r0, r5
 800fe96:	b005      	add	sp, #20
 800fe98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe9c:	9b03      	ldr	r3, [sp, #12]
 800fe9e:	781e      	ldrb	r6, [r3, #0]
 800fea0:	b1f6      	cbz	r6, 800fee0 <rcl_get_secure_root+0xbc>
 800fea2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800fea6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800feaa:	4618      	mov	r0, r3
 800feac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800feb0:	f7fa ffd8 	bl	800ae64 <rcutils_strdup>
 800feb4:	4606      	mov	r6, r0
 800feb6:	2800      	cmp	r0, #0
 800feb8:	d0e3      	beq.n	800fe82 <rcl_get_secure_root+0x5e>
 800feba:	4622      	mov	r2, r4
 800febc:	4641      	mov	r1, r8
 800febe:	f7ff ff6f 	bl	800fda0 <exact_match_lookup>
 800fec2:	4605      	mov	r5, r0
 800fec4:	2d00      	cmp	r5, #0
 800fec6:	d0dd      	beq.n	800fe84 <rcl_get_secure_root+0x60>
 800fec8:	4628      	mov	r0, r5
 800feca:	f001 fed1 	bl	8011c70 <rcutils_is_directory>
 800fece:	4603      	mov	r3, r0
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d1d7      	bne.n	800fe84 <rcl_get_secure_root+0x60>
 800fed4:	4628      	mov	r0, r5
 800fed6:	6921      	ldr	r1, [r4, #16]
 800fed8:	461d      	mov	r5, r3
 800feda:	6863      	ldr	r3, [r4, #4]
 800fedc:	4798      	blx	r3
 800fede:	e7d1      	b.n	800fe84 <rcl_get_secure_root+0x60>
 800fee0:	4622      	mov	r2, r4
 800fee2:	4638      	mov	r0, r7
 800fee4:	4641      	mov	r1, r8
 800fee6:	f7ff ff5b 	bl	800fda0 <exact_match_lookup>
 800feea:	4605      	mov	r5, r0
 800feec:	e7ea      	b.n	800fec4 <rcl_get_secure_root+0xa0>
 800feee:	bf00      	nop
 800fef0:	08019a38 	.word	0x08019a38
 800fef4:	08019a50 	.word	0x08019a50

0800fef8 <rcl_get_security_options_from_environment>:
 800fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fefc:	b082      	sub	sp, #8
 800fefe:	2300      	movs	r3, #0
 800ff00:	4606      	mov	r6, r0
 800ff02:	460f      	mov	r7, r1
 800ff04:	4820      	ldr	r0, [pc, #128]	@ (800ff88 <rcl_get_security_options_from_environment+0x90>)
 800ff06:	9301      	str	r3, [sp, #4]
 800ff08:	a901      	add	r1, sp, #4
 800ff0a:	4690      	mov	r8, r2
 800ff0c:	f7fa fe46 	bl	800ab9c <rcutils_get_env>
 800ff10:	b120      	cbz	r0, 800ff1c <rcl_get_security_options_from_environment+0x24>
 800ff12:	2501      	movs	r5, #1
 800ff14:	4628      	mov	r0, r5
 800ff16:	b002      	add	sp, #8
 800ff18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff1c:	491b      	ldr	r1, [pc, #108]	@ (800ff8c <rcl_get_security_options_from_environment+0x94>)
 800ff1e:	4604      	mov	r4, r0
 800ff20:	9801      	ldr	r0, [sp, #4]
 800ff22:	f7f0 f975 	bl	8000210 <strcmp>
 800ff26:	4605      	mov	r5, r0
 800ff28:	b9e8      	cbnz	r0, 800ff66 <rcl_get_security_options_from_environment+0x6e>
 800ff2a:	9001      	str	r0, [sp, #4]
 800ff2c:	f1b8 0f00 	cmp.w	r8, #0
 800ff30:	d020      	beq.n	800ff74 <rcl_get_security_options_from_environment+0x7c>
 800ff32:	4817      	ldr	r0, [pc, #92]	@ (800ff90 <rcl_get_security_options_from_environment+0x98>)
 800ff34:	a901      	add	r1, sp, #4
 800ff36:	f7fa fe31 	bl	800ab9c <rcutils_get_env>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d1e9      	bne.n	800ff12 <rcl_get_security_options_from_environment+0x1a>
 800ff3e:	4915      	ldr	r1, [pc, #84]	@ (800ff94 <rcl_get_security_options_from_environment+0x9c>)
 800ff40:	9801      	ldr	r0, [sp, #4]
 800ff42:	f7f0 f965 	bl	8000210 <strcmp>
 800ff46:	fab0 f080 	clz	r0, r0
 800ff4a:	0940      	lsrs	r0, r0, #5
 800ff4c:	f888 0000 	strb.w	r0, [r8]
 800ff50:	4639      	mov	r1, r7
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7ff ff66 	bl	800fe24 <rcl_get_secure_root>
 800ff58:	b170      	cbz	r0, 800ff78 <rcl_get_security_options_from_environment+0x80>
 800ff5a:	f8c8 0004 	str.w	r0, [r8, #4]
 800ff5e:	4628      	mov	r0, r5
 800ff60:	b002      	add	sp, #8
 800ff62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff66:	4625      	mov	r5, r4
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f888 4000 	strb.w	r4, [r8]
 800ff6e:	b002      	add	sp, #8
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff74:	250b      	movs	r5, #11
 800ff76:	e7cd      	b.n	800ff14 <rcl_get_security_options_from_environment+0x1c>
 800ff78:	f898 5000 	ldrb.w	r5, [r8]
 800ff7c:	f1a5 0501 	sub.w	r5, r5, #1
 800ff80:	fab5 f585 	clz	r5, r5
 800ff84:	096d      	lsrs	r5, r5, #5
 800ff86:	e7c5      	b.n	800ff14 <rcl_get_security_options_from_environment+0x1c>
 800ff88:	080199f0 	.word	0x080199f0
 800ff8c:	08019a04 	.word	0x08019a04
 800ff90:	08019a0c 	.word	0x08019a0c
 800ff94:	08019a24 	.word	0x08019a24

0800ff98 <rcl_service_get_rmw_handle>:
 800ff98:	b118      	cbz	r0, 800ffa2 <rcl_service_get_rmw_handle+0xa>
 800ff9a:	6800      	ldr	r0, [r0, #0]
 800ff9c:	b108      	cbz	r0, 800ffa2 <rcl_service_get_rmw_handle+0xa>
 800ff9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ffa2:	4770      	bx	lr

0800ffa4 <rcl_take_request>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	468e      	mov	lr, r1
 800ffa8:	460c      	mov	r4, r1
 800ffaa:	4616      	mov	r6, r2
 800ffac:	4605      	mov	r5, r0
 800ffae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ffb2:	b08c      	sub	sp, #48	@ 0x30
 800ffb4:	f10d 0c18 	add.w	ip, sp, #24
 800ffb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffbc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ffc0:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ffc4:	b30d      	cbz	r5, 801000a <rcl_take_request+0x66>
 800ffc6:	682b      	ldr	r3, [r5, #0]
 800ffc8:	b1fb      	cbz	r3, 801000a <rcl_take_request+0x66>
 800ffca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ffce:	b1e0      	cbz	r0, 801000a <rcl_take_request+0x66>
 800ffd0:	b336      	cbz	r6, 8010020 <rcl_take_request+0x7c>
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	f88d 3007 	strb.w	r3, [sp, #7]
 800ffd8:	4632      	mov	r2, r6
 800ffda:	f10d 0307 	add.w	r3, sp, #7
 800ffde:	a902      	add	r1, sp, #8
 800ffe0:	f002 fc7e 	bl	80128e0 <rmw_take_request>
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	b198      	cbz	r0, 8010010 <rcl_take_request+0x6c>
 800ffe8:	280a      	cmp	r0, #10
 800ffea:	bf18      	it	ne
 800ffec:	2501      	movne	r5, #1
 800ffee:	f10d 0e18 	add.w	lr, sp, #24
 800fff2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fff6:	46a4      	mov	ip, r4
 800fff8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fffc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010000:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010004:	4628      	mov	r0, r5
 8010006:	b00c      	add	sp, #48	@ 0x30
 8010008:	bd70      	pop	{r4, r5, r6, pc}
 801000a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801000e:	e7ee      	b.n	800ffee <rcl_take_request+0x4a>
 8010010:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010014:	f240 2359 	movw	r3, #601	@ 0x259
 8010018:	2a00      	cmp	r2, #0
 801001a:	bf08      	it	eq
 801001c:	461d      	moveq	r5, r3
 801001e:	e7e6      	b.n	800ffee <rcl_take_request+0x4a>
 8010020:	250b      	movs	r5, #11
 8010022:	e7e4      	b.n	800ffee <rcl_take_request+0x4a>

08010024 <rcl_send_response>:
 8010024:	b170      	cbz	r0, 8010044 <rcl_send_response+0x20>
 8010026:	6800      	ldr	r0, [r0, #0]
 8010028:	b160      	cbz	r0, 8010044 <rcl_send_response+0x20>
 801002a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801002e:	b148      	cbz	r0, 8010044 <rcl_send_response+0x20>
 8010030:	b159      	cbz	r1, 801004a <rcl_send_response+0x26>
 8010032:	b510      	push	{r4, lr}
 8010034:	b15a      	cbz	r2, 801004e <rcl_send_response+0x2a>
 8010036:	f002 fcb1 	bl	801299c <rmw_send_response>
 801003a:	b110      	cbz	r0, 8010042 <rcl_send_response+0x1e>
 801003c:	2802      	cmp	r0, #2
 801003e:	bf18      	it	ne
 8010040:	2001      	movne	r0, #1
 8010042:	bd10      	pop	{r4, pc}
 8010044:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8010048:	4770      	bx	lr
 801004a:	200b      	movs	r0, #11
 801004c:	4770      	bx	lr
 801004e:	200b      	movs	r0, #11
 8010050:	bd10      	pop	{r4, pc}
 8010052:	bf00      	nop

08010054 <rcl_service_is_valid>:
 8010054:	b130      	cbz	r0, 8010064 <rcl_service_is_valid+0x10>
 8010056:	6800      	ldr	r0, [r0, #0]
 8010058:	b120      	cbz	r0, 8010064 <rcl_service_is_valid+0x10>
 801005a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801005e:	3800      	subs	r0, #0
 8010060:	bf18      	it	ne
 8010062:	2001      	movne	r0, #1
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop

08010068 <rcl_get_system_time>:
 8010068:	4608      	mov	r0, r1
 801006a:	f7fa bf39 	b.w	800aee0 <rcutils_system_time_now>
 801006e:	bf00      	nop

08010070 <rcl_get_steady_time>:
 8010070:	4608      	mov	r0, r1
 8010072:	f7fa bf5d 	b.w	800af30 <rcutils_steady_time_now>
 8010076:	bf00      	nop

08010078 <rcl_get_ros_time>:
 8010078:	7a03      	ldrb	r3, [r0, #8]
 801007a:	b510      	push	{r4, lr}
 801007c:	460c      	mov	r4, r1
 801007e:	b133      	cbz	r3, 801008e <rcl_get_ros_time+0x16>
 8010080:	2105      	movs	r1, #5
 8010082:	f001 fd51 	bl	8011b28 <__atomic_load_8>
 8010086:	e9c4 0100 	strd	r0, r1, [r4]
 801008a:	2000      	movs	r0, #0
 801008c:	bd10      	pop	{r4, pc}
 801008e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010092:	4608      	mov	r0, r1
 8010094:	f7fa bf24 	b.w	800aee0 <rcutils_system_time_now>

08010098 <rcl_clock_init>:
 8010098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801009a:	4605      	mov	r5, r0
 801009c:	4610      	mov	r0, r2
 801009e:	4614      	mov	r4, r2
 80100a0:	460e      	mov	r6, r1
 80100a2:	f7fa fd6d 	bl	800ab80 <rcutils_allocator_is_valid>
 80100a6:	b128      	cbz	r0, 80100b4 <rcl_clock_init+0x1c>
 80100a8:	2d03      	cmp	r5, #3
 80100aa:	d803      	bhi.n	80100b4 <rcl_clock_init+0x1c>
 80100ac:	e8df f005 	tbb	[pc, r5]
 80100b0:	06532e1d 	.word	0x06532e1d
 80100b4:	f04f 0c0b 	mov.w	ip, #11
 80100b8:	4660      	mov	r0, ip
 80100ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100bc:	2e00      	cmp	r6, #0
 80100be:	d0f9      	beq.n	80100b4 <rcl_clock_init+0x1c>
 80100c0:	2c00      	cmp	r4, #0
 80100c2:	d0f7      	beq.n	80100b4 <rcl_clock_init+0x1c>
 80100c4:	2300      	movs	r3, #0
 80100c6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80100ca:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8010180 <rcl_clock_init+0xe8>
 80100ce:	6133      	str	r3, [r6, #16]
 80100d0:	f106 0514 	add.w	r5, r6, #20
 80100d4:	469c      	mov	ip, r3
 80100d6:	2703      	movs	r7, #3
 80100d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	602b      	str	r3, [r5, #0]
 80100e0:	7037      	strb	r7, [r6, #0]
 80100e2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80100e6:	4660      	mov	r0, ip
 80100e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100ea:	2e00      	cmp	r6, #0
 80100ec:	d0e2      	beq.n	80100b4 <rcl_clock_init+0x1c>
 80100ee:	2300      	movs	r3, #0
 80100f0:	7033      	strb	r3, [r6, #0]
 80100f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80100f6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80100fa:	469c      	mov	ip, r3
 80100fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100fe:	f106 0514 	add.w	r5, r6, #20
 8010102:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	602b      	str	r3, [r5, #0]
 8010108:	4660      	mov	r0, ip
 801010a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801010c:	2e00      	cmp	r6, #0
 801010e:	d0d1      	beq.n	80100b4 <rcl_clock_init+0x1c>
 8010110:	2c00      	cmp	r4, #0
 8010112:	d0cf      	beq.n	80100b4 <rcl_clock_init+0x1c>
 8010114:	2700      	movs	r7, #0
 8010116:	7037      	strb	r7, [r6, #0]
 8010118:	46a4      	mov	ip, r4
 801011a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801011e:	f106 0514 	add.w	r5, r6, #20
 8010122:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010126:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801012a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801012c:	f8dc 3000 	ldr.w	r3, [ip]
 8010130:	602b      	str	r3, [r5, #0]
 8010132:	6921      	ldr	r1, [r4, #16]
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	2010      	movs	r0, #16
 8010138:	4798      	blx	r3
 801013a:	6130      	str	r0, [r6, #16]
 801013c:	b1d0      	cbz	r0, 8010174 <rcl_clock_init+0xdc>
 801013e:	2200      	movs	r2, #0
 8010140:	2300      	movs	r3, #0
 8010142:	e9c0 2300 	strd	r2, r3, [r0]
 8010146:	2301      	movs	r3, #1
 8010148:	7207      	strb	r7, [r0, #8]
 801014a:	4a0c      	ldr	r2, [pc, #48]	@ (801017c <rcl_clock_init+0xe4>)
 801014c:	7033      	strb	r3, [r6, #0]
 801014e:	46bc      	mov	ip, r7
 8010150:	60f2      	str	r2, [r6, #12]
 8010152:	4660      	mov	r0, ip
 8010154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010156:	2e00      	cmp	r6, #0
 8010158:	d0ac      	beq.n	80100b4 <rcl_clock_init+0x1c>
 801015a:	2c00      	cmp	r4, #0
 801015c:	d0aa      	beq.n	80100b4 <rcl_clock_init+0x1c>
 801015e:	2300      	movs	r3, #0
 8010160:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010164:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8010184 <rcl_clock_init+0xec>
 8010168:	6133      	str	r3, [r6, #16]
 801016a:	f106 0514 	add.w	r5, r6, #20
 801016e:	469c      	mov	ip, r3
 8010170:	2702      	movs	r7, #2
 8010172:	e7b1      	b.n	80100d8 <rcl_clock_init+0x40>
 8010174:	f04f 0c0a 	mov.w	ip, #10
 8010178:	e79e      	b.n	80100b8 <rcl_clock_init+0x20>
 801017a:	bf00      	nop
 801017c:	08010079 	.word	0x08010079
 8010180:	08010071 	.word	0x08010071
 8010184:	08010069 	.word	0x08010069

08010188 <rcl_clock_get_now>:
 8010188:	b140      	cbz	r0, 801019c <rcl_clock_get_now+0x14>
 801018a:	b139      	cbz	r1, 801019c <rcl_clock_get_now+0x14>
 801018c:	7803      	ldrb	r3, [r0, #0]
 801018e:	b11b      	cbz	r3, 8010198 <rcl_clock_get_now+0x10>
 8010190:	68c3      	ldr	r3, [r0, #12]
 8010192:	b10b      	cbz	r3, 8010198 <rcl_clock_get_now+0x10>
 8010194:	6900      	ldr	r0, [r0, #16]
 8010196:	4718      	bx	r3
 8010198:	2001      	movs	r0, #1
 801019a:	4770      	bx	lr
 801019c:	200b      	movs	r0, #11
 801019e:	4770      	bx	lr

080101a0 <rcl_timer_call>:
 80101a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a4:	b087      	sub	sp, #28
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d06d      	beq.n	8010286 <rcl_timer_call+0xe6>
 80101aa:	6803      	ldr	r3, [r0, #0]
 80101ac:	4604      	mov	r4, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d063      	beq.n	801027a <rcl_timer_call+0xda>
 80101b2:	f3bf 8f5b 	dmb	ish
 80101b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80101ba:	f3bf 8f5b 	dmb	ish
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d150      	bne.n	8010264 <rcl_timer_call+0xc4>
 80101c2:	6803      	ldr	r3, [r0, #0]
 80101c4:	a904      	add	r1, sp, #16
 80101c6:	6818      	ldr	r0, [r3, #0]
 80101c8:	f7ff ffde 	bl	8010188 <rcl_clock_get_now>
 80101cc:	4605      	mov	r5, r0
 80101ce:	2800      	cmp	r0, #0
 80101d0:	d14a      	bne.n	8010268 <rcl_timer_call+0xc8>
 80101d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	db4a      	blt.n	8010270 <rcl_timer_call+0xd0>
 80101da:	6820      	ldr	r0, [r4, #0]
 80101dc:	f04f 0a05 	mov.w	sl, #5
 80101e0:	f8cd a000 	str.w	sl, [sp]
 80101e4:	3020      	adds	r0, #32
 80101e6:	f001 fd0b 	bl	8011c00 <__atomic_exchange_8>
 80101ea:	6823      	ldr	r3, [r4, #0]
 80101ec:	f3bf 8f5b 	dmb	ish
 80101f0:	4680      	mov	r8, r0
 80101f2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80101f6:	f3bf 8f5b 	dmb	ish
 80101fa:	6820      	ldr	r0, [r4, #0]
 80101fc:	4689      	mov	r9, r1
 80101fe:	3028      	adds	r0, #40	@ 0x28
 8010200:	4651      	mov	r1, sl
 8010202:	f001 fc91 	bl	8011b28 <__atomic_load_8>
 8010206:	4606      	mov	r6, r0
 8010208:	6820      	ldr	r0, [r4, #0]
 801020a:	460f      	mov	r7, r1
 801020c:	3018      	adds	r0, #24
 801020e:	4651      	mov	r1, sl
 8010210:	f001 fc8a 	bl	8011b28 <__atomic_load_8>
 8010214:	1836      	adds	r6, r6, r0
 8010216:	4602      	mov	r2, r0
 8010218:	4682      	mov	sl, r0
 801021a:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801021e:	eb47 0701 	adc.w	r7, r7, r1
 8010222:	4286      	cmp	r6, r0
 8010224:	460b      	mov	r3, r1
 8010226:	eb77 010c 	sbcs.w	r1, r7, ip
 801022a:	da04      	bge.n	8010236 <rcl_timer_call+0x96>
 801022c:	ea53 0102 	orrs.w	r1, r3, r2
 8010230:	d12e      	bne.n	8010290 <rcl_timer_call+0xf0>
 8010232:	4606      	mov	r6, r0
 8010234:	4667      	mov	r7, ip
 8010236:	6820      	ldr	r0, [r4, #0]
 8010238:	2105      	movs	r1, #5
 801023a:	4632      	mov	r2, r6
 801023c:	463b      	mov	r3, r7
 801023e:	3028      	adds	r0, #40	@ 0x28
 8010240:	9100      	str	r1, [sp, #0]
 8010242:	f001 fca7 	bl	8011b94 <__atomic_store_8>
 8010246:	f1bb 0f00 	cmp.w	fp, #0
 801024a:	d00d      	beq.n	8010268 <rcl_timer_call+0xc8>
 801024c:	9a04      	ldr	r2, [sp, #16]
 801024e:	9b05      	ldr	r3, [sp, #20]
 8010250:	ebb2 0208 	subs.w	r2, r2, r8
 8010254:	4620      	mov	r0, r4
 8010256:	eb63 0309 	sbc.w	r3, r3, r9
 801025a:	47d8      	blx	fp
 801025c:	4628      	mov	r0, r5
 801025e:	b007      	add	sp, #28
 8010260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010264:	f240 3521 	movw	r5, #801	@ 0x321
 8010268:	4628      	mov	r0, r5
 801026a:	b007      	add	sp, #28
 801026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010270:	2501      	movs	r5, #1
 8010272:	4628      	mov	r0, r5
 8010274:	b007      	add	sp, #28
 8010276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801027a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801027e:	4628      	mov	r0, r5
 8010280:	b007      	add	sp, #28
 8010282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010286:	250b      	movs	r5, #11
 8010288:	4628      	mov	r0, r5
 801028a:	b007      	add	sp, #28
 801028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010290:	1b80      	subs	r0, r0, r6
 8010292:	eb6c 0107 	sbc.w	r1, ip, r7
 8010296:	3801      	subs	r0, #1
 8010298:	f161 0100 	sbc.w	r1, r1, #0
 801029c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80102a0:	f7f0 fcb2 	bl	8000c08 <__aeabi_ldivmod>
 80102a4:	9b02      	ldr	r3, [sp, #8]
 80102a6:	3001      	adds	r0, #1
 80102a8:	f141 0100 	adc.w	r1, r1, #0
 80102ac:	fb00 f303 	mul.w	r3, r0, r3
 80102b0:	fb01 330a 	mla	r3, r1, sl, r3
 80102b4:	fba0 0a0a 	umull	r0, sl, r0, sl
 80102b8:	1986      	adds	r6, r0, r6
 80102ba:	4453      	add	r3, sl
 80102bc:	eb43 0707 	adc.w	r7, r3, r7
 80102c0:	e7b9      	b.n	8010236 <rcl_timer_call+0x96>
 80102c2:	bf00      	nop

080102c4 <rcl_timer_is_ready>:
 80102c4:	b570      	push	{r4, r5, r6, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	b378      	cbz	r0, 801032a <rcl_timer_is_ready+0x66>
 80102ca:	6803      	ldr	r3, [r0, #0]
 80102cc:	4604      	mov	r4, r0
 80102ce:	b383      	cbz	r3, 8010332 <rcl_timer_is_ready+0x6e>
 80102d0:	460d      	mov	r5, r1
 80102d2:	b351      	cbz	r1, 801032a <rcl_timer_is_ready+0x66>
 80102d4:	f3bf 8f5b 	dmb	ish
 80102d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80102dc:	f3bf 8f5b 	dmb	ish
 80102e0:	b953      	cbnz	r3, 80102f8 <rcl_timer_is_ready+0x34>
 80102e2:	6803      	ldr	r3, [r0, #0]
 80102e4:	4669      	mov	r1, sp
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	f7ff ff4e 	bl	8010188 <rcl_clock_get_now>
 80102ec:	4606      	mov	r6, r0
 80102ee:	b140      	cbz	r0, 8010302 <rcl_timer_is_ready+0x3e>
 80102f0:	f240 3321 	movw	r3, #801	@ 0x321
 80102f4:	4298      	cmp	r0, r3
 80102f6:	d101      	bne.n	80102fc <rcl_timer_is_ready+0x38>
 80102f8:	2600      	movs	r6, #0
 80102fa:	702e      	strb	r6, [r5, #0]
 80102fc:	4630      	mov	r0, r6
 80102fe:	b002      	add	sp, #8
 8010300:	bd70      	pop	{r4, r5, r6, pc}
 8010302:	6820      	ldr	r0, [r4, #0]
 8010304:	2105      	movs	r1, #5
 8010306:	3028      	adds	r0, #40	@ 0x28
 8010308:	f001 fc0e 	bl	8011b28 <__atomic_load_8>
 801030c:	9b00      	ldr	r3, [sp, #0]
 801030e:	1ac0      	subs	r0, r0, r3
 8010310:	9b01      	ldr	r3, [sp, #4]
 8010312:	eb61 0103 	sbc.w	r1, r1, r3
 8010316:	2801      	cmp	r0, #1
 8010318:	f171 0300 	sbcs.w	r3, r1, #0
 801031c:	bfb4      	ite	lt
 801031e:	2301      	movlt	r3, #1
 8010320:	2300      	movge	r3, #0
 8010322:	4630      	mov	r0, r6
 8010324:	702b      	strb	r3, [r5, #0]
 8010326:	b002      	add	sp, #8
 8010328:	bd70      	pop	{r4, r5, r6, pc}
 801032a:	260b      	movs	r6, #11
 801032c:	4630      	mov	r0, r6
 801032e:	b002      	add	sp, #8
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010336:	e7e1      	b.n	80102fc <rcl_timer_is_ready+0x38>

08010338 <rcl_timer_get_time_until_next_call>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	b330      	cbz	r0, 801038c <rcl_timer_get_time_until_next_call+0x54>
 801033e:	6803      	ldr	r3, [r0, #0]
 8010340:	4604      	mov	r4, r0
 8010342:	b33b      	cbz	r3, 8010394 <rcl_timer_get_time_until_next_call+0x5c>
 8010344:	460d      	mov	r5, r1
 8010346:	b309      	cbz	r1, 801038c <rcl_timer_get_time_until_next_call+0x54>
 8010348:	f3bf 8f5b 	dmb	ish
 801034c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010350:	f3bf 8f5b 	dmb	ish
 8010354:	b9ab      	cbnz	r3, 8010382 <rcl_timer_get_time_until_next_call+0x4a>
 8010356:	6803      	ldr	r3, [r0, #0]
 8010358:	4669      	mov	r1, sp
 801035a:	6818      	ldr	r0, [r3, #0]
 801035c:	f7ff ff14 	bl	8010188 <rcl_clock_get_now>
 8010360:	4606      	mov	r6, r0
 8010362:	b958      	cbnz	r0, 801037c <rcl_timer_get_time_until_next_call+0x44>
 8010364:	6820      	ldr	r0, [r4, #0]
 8010366:	2105      	movs	r1, #5
 8010368:	3028      	adds	r0, #40	@ 0x28
 801036a:	f001 fbdd 	bl	8011b28 <__atomic_load_8>
 801036e:	9b00      	ldr	r3, [sp, #0]
 8010370:	1ac0      	subs	r0, r0, r3
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	6028      	str	r0, [r5, #0]
 8010376:	eb61 0103 	sbc.w	r1, r1, r3
 801037a:	6069      	str	r1, [r5, #4]
 801037c:	4630      	mov	r0, r6
 801037e:	b002      	add	sp, #8
 8010380:	bd70      	pop	{r4, r5, r6, pc}
 8010382:	f240 3621 	movw	r6, #801	@ 0x321
 8010386:	4630      	mov	r0, r6
 8010388:	b002      	add	sp, #8
 801038a:	bd70      	pop	{r4, r5, r6, pc}
 801038c:	260b      	movs	r6, #11
 801038e:	4630      	mov	r0, r6
 8010390:	b002      	add	sp, #8
 8010392:	bd70      	pop	{r4, r5, r6, pc}
 8010394:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8010398:	e7f0      	b.n	801037c <rcl_timer_get_time_until_next_call+0x44>
 801039a:	bf00      	nop

0801039c <rcl_timer_get_guard_condition>:
 801039c:	b130      	cbz	r0, 80103ac <rcl_timer_get_guard_condition+0x10>
 801039e:	6800      	ldr	r0, [r0, #0]
 80103a0:	b120      	cbz	r0, 80103ac <rcl_timer_get_guard_condition+0x10>
 80103a2:	68c3      	ldr	r3, [r0, #12]
 80103a4:	b10b      	cbz	r3, 80103aa <rcl_timer_get_guard_condition+0xe>
 80103a6:	3008      	adds	r0, #8
 80103a8:	4770      	bx	lr
 80103aa:	4618      	mov	r0, r3
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop

080103b0 <rcl_validate_enclave_name_with_size>:
 80103b0:	b378      	cbz	r0, 8010412 <rcl_validate_enclave_name_with_size+0x62>
 80103b2:	b570      	push	{r4, r5, r6, lr}
 80103b4:	4615      	mov	r5, r2
 80103b6:	b0c2      	sub	sp, #264	@ 0x108
 80103b8:	b302      	cbz	r2, 80103fc <rcl_validate_enclave_name_with_size+0x4c>
 80103ba:	461e      	mov	r6, r3
 80103bc:	466a      	mov	r2, sp
 80103be:	ab01      	add	r3, sp, #4
 80103c0:	460c      	mov	r4, r1
 80103c2:	f7fa fe09 	bl	800afd8 <rmw_validate_namespace_with_size>
 80103c6:	4684      	mov	ip, r0
 80103c8:	b9e8      	cbnz	r0, 8010406 <rcl_validate_enclave_name_with_size+0x56>
 80103ca:	9b00      	ldr	r3, [sp, #0]
 80103cc:	b923      	cbnz	r3, 80103d8 <rcl_validate_enclave_name_with_size+0x28>
 80103ce:	2300      	movs	r3, #0
 80103d0:	602b      	str	r3, [r5, #0]
 80103d2:	4660      	mov	r0, ip
 80103d4:	b042      	add	sp, #264	@ 0x108
 80103d6:	bd70      	pop	{r4, r5, r6, pc}
 80103d8:	2b07      	cmp	r3, #7
 80103da:	d007      	beq.n	80103ec <rcl_validate_enclave_name_with_size+0x3c>
 80103dc:	1e5a      	subs	r2, r3, #1
 80103de:	2a05      	cmp	r2, #5
 80103e0:	d833      	bhi.n	801044a <rcl_validate_enclave_name_with_size+0x9a>
 80103e2:	e8df f002 	tbb	[pc, r2]
 80103e6:	2c2f      	.short	0x2c2f
 80103e8:	1a232629 	.word	0x1a232629
 80103ec:	2cff      	cmp	r4, #255	@ 0xff
 80103ee:	d9ee      	bls.n	80103ce <rcl_validate_enclave_name_with_size+0x1e>
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	2e00      	cmp	r6, #0
 80103f4:	d0ed      	beq.n	80103d2 <rcl_validate_enclave_name_with_size+0x22>
 80103f6:	23fe      	movs	r3, #254	@ 0xfe
 80103f8:	6033      	str	r3, [r6, #0]
 80103fa:	e7ea      	b.n	80103d2 <rcl_validate_enclave_name_with_size+0x22>
 80103fc:	f04f 0c0b 	mov.w	ip, #11
 8010400:	4660      	mov	r0, ip
 8010402:	b042      	add	sp, #264	@ 0x108
 8010404:	bd70      	pop	{r4, r5, r6, pc}
 8010406:	f7ff f8c9 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 801040a:	4684      	mov	ip, r0
 801040c:	4660      	mov	r0, ip
 801040e:	b042      	add	sp, #264	@ 0x108
 8010410:	bd70      	pop	{r4, r5, r6, pc}
 8010412:	f04f 0c0b 	mov.w	ip, #11
 8010416:	4660      	mov	r0, ip
 8010418:	4770      	bx	lr
 801041a:	2306      	movs	r3, #6
 801041c:	602b      	str	r3, [r5, #0]
 801041e:	2e00      	cmp	r6, #0
 8010420:	d0d7      	beq.n	80103d2 <rcl_validate_enclave_name_with_size+0x22>
 8010422:	9b01      	ldr	r3, [sp, #4]
 8010424:	6033      	str	r3, [r6, #0]
 8010426:	4660      	mov	r0, ip
 8010428:	b042      	add	sp, #264	@ 0x108
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	2305      	movs	r3, #5
 801042e:	602b      	str	r3, [r5, #0]
 8010430:	e7f5      	b.n	801041e <rcl_validate_enclave_name_with_size+0x6e>
 8010432:	2304      	movs	r3, #4
 8010434:	602b      	str	r3, [r5, #0]
 8010436:	e7f2      	b.n	801041e <rcl_validate_enclave_name_with_size+0x6e>
 8010438:	2303      	movs	r3, #3
 801043a:	602b      	str	r3, [r5, #0]
 801043c:	e7ef      	b.n	801041e <rcl_validate_enclave_name_with_size+0x6e>
 801043e:	2302      	movs	r3, #2
 8010440:	602b      	str	r3, [r5, #0]
 8010442:	e7ec      	b.n	801041e <rcl_validate_enclave_name_with_size+0x6e>
 8010444:	2301      	movs	r3, #1
 8010446:	602b      	str	r3, [r5, #0]
 8010448:	e7e9      	b.n	801041e <rcl_validate_enclave_name_with_size+0x6e>
 801044a:	4a04      	ldr	r2, [pc, #16]	@ (801045c <rcl_validate_enclave_name_with_size+0xac>)
 801044c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010450:	a802      	add	r0, sp, #8
 8010452:	f7fa fcdb 	bl	800ae0c <rcutils_snprintf>
 8010456:	f04f 0c01 	mov.w	ip, #1
 801045a:	e7ba      	b.n	80103d2 <rcl_validate_enclave_name_with_size+0x22>
 801045c:	08019a70 	.word	0x08019a70

08010460 <rcl_validate_enclave_name>:
 8010460:	b168      	cbz	r0, 801047e <rcl_validate_enclave_name+0x1e>
 8010462:	b570      	push	{r4, r5, r6, lr}
 8010464:	460d      	mov	r5, r1
 8010466:	4616      	mov	r6, r2
 8010468:	4604      	mov	r4, r0
 801046a:	f7ef ff31 	bl	80002d0 <strlen>
 801046e:	4633      	mov	r3, r6
 8010470:	4601      	mov	r1, r0
 8010472:	462a      	mov	r2, r5
 8010474:	4620      	mov	r0, r4
 8010476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801047a:	f7ff bf99 	b.w	80103b0 <rcl_validate_enclave_name_with_size>
 801047e:	200b      	movs	r0, #11
 8010480:	4770      	bx	lr
 8010482:	bf00      	nop

08010484 <rcl_get_zero_initialized_wait_set>:
 8010484:	b510      	push	{r4, lr}
 8010486:	4c08      	ldr	r4, [pc, #32]	@ (80104a8 <rcl_get_zero_initialized_wait_set+0x24>)
 8010488:	4686      	mov	lr, r0
 801048a:	4684      	mov	ip, r0
 801048c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801048e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801049a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	f8cc 3000 	str.w	r3, [ip]
 80104a4:	4670      	mov	r0, lr
 80104a6:	bd10      	pop	{r4, pc}
 80104a8:	08019ad0 	.word	0x08019ad0

080104ac <rcl_wait_set_is_valid>:
 80104ac:	b118      	cbz	r0, 80104b6 <rcl_wait_set_is_valid+0xa>
 80104ae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80104b0:	3800      	subs	r0, #0
 80104b2:	bf18      	it	ne
 80104b4:	2001      	movne	r0, #1
 80104b6:	4770      	bx	lr

080104b8 <rcl_wait_set_fini>:
 80104b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104bc:	b082      	sub	sp, #8
 80104be:	2800      	cmp	r0, #0
 80104c0:	f000 8095 	beq.w	80105ee <rcl_wait_set_fini+0x136>
 80104c4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80104c6:	4604      	mov	r4, r0
 80104c8:	2e00      	cmp	r6, #0
 80104ca:	f000 808c 	beq.w	80105e6 <rcl_wait_set_fini+0x12e>
 80104ce:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80104d0:	f002 fca4 	bl	8012e1c <rmw_destroy_wait_set>
 80104d4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80104d6:	1e06      	subs	r6, r0, #0
 80104d8:	bf18      	it	ne
 80104da:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80104de:	2d00      	cmp	r5, #0
 80104e0:	f000 8081 	beq.w	80105e6 <rcl_wait_set_fini+0x12e>
 80104e4:	6820      	ldr	r0, [r4, #0]
 80104e6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80104ea:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80104ec:	2700      	movs	r7, #0
 80104ee:	6067      	str	r7, [r4, #4]
 80104f0:	602f      	str	r7, [r5, #0]
 80104f2:	b120      	cbz	r0, 80104fe <rcl_wait_set_fini+0x46>
 80104f4:	9101      	str	r1, [sp, #4]
 80104f6:	47c0      	blx	r8
 80104f8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80104fa:	9901      	ldr	r1, [sp, #4]
 80104fc:	6027      	str	r7, [r4, #0]
 80104fe:	68a8      	ldr	r0, [r5, #8]
 8010500:	b120      	cbz	r0, 801050c <rcl_wait_set_fini+0x54>
 8010502:	47c0      	blx	r8
 8010504:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010506:	2300      	movs	r3, #0
 8010508:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801050c:	68a0      	ldr	r0, [r4, #8]
 801050e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010510:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010512:	f04f 0800 	mov.w	r8, #0
 8010516:	f8c4 800c 	str.w	r8, [r4, #12]
 801051a:	f8c5 800c 	str.w	r8, [r5, #12]
 801051e:	b128      	cbz	r0, 801052c <rcl_wait_set_fini+0x74>
 8010520:	47b8      	blx	r7
 8010522:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010524:	f8c4 8008 	str.w	r8, [r4, #8]
 8010528:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801052a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801052c:	6968      	ldr	r0, [r5, #20]
 801052e:	f04f 0800 	mov.w	r8, #0
 8010532:	f8c5 8010 	str.w	r8, [r5, #16]
 8010536:	b128      	cbz	r0, 8010544 <rcl_wait_set_fini+0x8c>
 8010538:	47b8      	blx	r7
 801053a:	f8c5 8014 	str.w	r8, [r5, #20]
 801053e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010540:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8010542:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010544:	6920      	ldr	r0, [r4, #16]
 8010546:	f04f 0800 	mov.w	r8, #0
 801054a:	f8c4 8014 	str.w	r8, [r4, #20]
 801054e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8010552:	b128      	cbz	r0, 8010560 <rcl_wait_set_fini+0xa8>
 8010554:	47b8      	blx	r7
 8010556:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010558:	f8c4 8010 	str.w	r8, [r4, #16]
 801055c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801055e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010560:	69a0      	ldr	r0, [r4, #24]
 8010562:	f04f 0800 	mov.w	r8, #0
 8010566:	f8c4 801c 	str.w	r8, [r4, #28]
 801056a:	f8c5 8018 	str.w	r8, [r5, #24]
 801056e:	b128      	cbz	r0, 801057c <rcl_wait_set_fini+0xc4>
 8010570:	9101      	str	r1, [sp, #4]
 8010572:	47b8      	blx	r7
 8010574:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010576:	9901      	ldr	r1, [sp, #4]
 8010578:	f8c4 8018 	str.w	r8, [r4, #24]
 801057c:	6a28      	ldr	r0, [r5, #32]
 801057e:	b120      	cbz	r0, 801058a <rcl_wait_set_fini+0xd2>
 8010580:	47b8      	blx	r7
 8010582:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010584:	2300      	movs	r3, #0
 8010586:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801058a:	6a20      	ldr	r0, [r4, #32]
 801058c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8010590:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8010592:	2700      	movs	r7, #0
 8010594:	6267      	str	r7, [r4, #36]	@ 0x24
 8010596:	626f      	str	r7, [r5, #36]	@ 0x24
 8010598:	b120      	cbz	r0, 80105a4 <rcl_wait_set_fini+0xec>
 801059a:	9101      	str	r1, [sp, #4]
 801059c:	47c0      	blx	r8
 801059e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80105a0:	9901      	ldr	r1, [sp, #4]
 80105a2:	6227      	str	r7, [r4, #32]
 80105a4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80105a6:	b120      	cbz	r0, 80105b2 <rcl_wait_set_fini+0xfa>
 80105a8:	47c0      	blx	r8
 80105aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80105ac:	2300      	movs	r3, #0
 80105ae:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80105b2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80105b4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80105b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80105ba:	2700      	movs	r7, #0
 80105bc:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80105be:	632f      	str	r7, [r5, #48]	@ 0x30
 80105c0:	b120      	cbz	r0, 80105cc <rcl_wait_set_fini+0x114>
 80105c2:	9101      	str	r1, [sp, #4]
 80105c4:	47c0      	blx	r8
 80105c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80105c8:	9901      	ldr	r1, [sp, #4]
 80105ca:	62a7      	str	r7, [r4, #40]	@ 0x28
 80105cc:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80105ce:	b120      	cbz	r0, 80105da <rcl_wait_set_fini+0x122>
 80105d0:	47c0      	blx	r8
 80105d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80105d4:	2300      	movs	r3, #0
 80105d6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80105da:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80105dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80105de:	4628      	mov	r0, r5
 80105e0:	4798      	blx	r3
 80105e2:	2300      	movs	r3, #0
 80105e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80105e6:	4630      	mov	r0, r6
 80105e8:	b002      	add	sp, #8
 80105ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ee:	260b      	movs	r6, #11
 80105f0:	4630      	mov	r0, r6
 80105f2:	b002      	add	sp, #8
 80105f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105f8 <rcl_wait_set_add_subscription>:
 80105f8:	b318      	cbz	r0, 8010642 <rcl_wait_set_add_subscription+0x4a>
 80105fa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80105fc:	b570      	push	{r4, r5, r6, lr}
 80105fe:	4604      	mov	r4, r0
 8010600:	b30b      	cbz	r3, 8010646 <rcl_wait_set_add_subscription+0x4e>
 8010602:	b319      	cbz	r1, 801064c <rcl_wait_set_add_subscription+0x54>
 8010604:	681d      	ldr	r5, [r3, #0]
 8010606:	6840      	ldr	r0, [r0, #4]
 8010608:	4285      	cmp	r5, r0
 801060a:	d217      	bcs.n	801063c <rcl_wait_set_add_subscription+0x44>
 801060c:	6820      	ldr	r0, [r4, #0]
 801060e:	1c6e      	adds	r6, r5, #1
 8010610:	601e      	str	r6, [r3, #0]
 8010612:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010616:	b102      	cbz	r2, 801061a <rcl_wait_set_add_subscription+0x22>
 8010618:	6015      	str	r5, [r2, #0]
 801061a:	4608      	mov	r0, r1
 801061c:	f7f9 fb4e 	bl	8009cbc <rcl_subscription_get_rmw_handle>
 8010620:	b150      	cbz	r0, 8010638 <rcl_wait_set_add_subscription+0x40>
 8010622:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010624:	6842      	ldr	r2, [r0, #4]
 8010626:	689b      	ldr	r3, [r3, #8]
 8010628:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801062c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801062e:	6853      	ldr	r3, [r2, #4]
 8010630:	3301      	adds	r3, #1
 8010632:	2000      	movs	r0, #0
 8010634:	6053      	str	r3, [r2, #4]
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	2001      	movs	r0, #1
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	f240 3086 	movw	r0, #902	@ 0x386
 8010640:	bd70      	pop	{r4, r5, r6, pc}
 8010642:	200b      	movs	r0, #11
 8010644:	4770      	bx	lr
 8010646:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	200b      	movs	r0, #11
 801064e:	bd70      	pop	{r4, r5, r6, pc}

08010650 <rcl_wait_set_clear>:
 8010650:	2800      	cmp	r0, #0
 8010652:	d073      	beq.n	801073c <rcl_wait_set_clear+0xec>
 8010654:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010656:	b510      	push	{r4, lr}
 8010658:	4604      	mov	r4, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d070      	beq.n	8010740 <rcl_wait_set_clear+0xf0>
 801065e:	6800      	ldr	r0, [r0, #0]
 8010660:	b138      	cbz	r0, 8010672 <rcl_wait_set_clear+0x22>
 8010662:	6862      	ldr	r2, [r4, #4]
 8010664:	2100      	movs	r1, #0
 8010666:	0092      	lsls	r2, r2, #2
 8010668:	f006 fd32 	bl	80170d0 <memset>
 801066c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801066e:	2200      	movs	r2, #0
 8010670:	601a      	str	r2, [r3, #0]
 8010672:	68a0      	ldr	r0, [r4, #8]
 8010674:	b138      	cbz	r0, 8010686 <rcl_wait_set_clear+0x36>
 8010676:	68e2      	ldr	r2, [r4, #12]
 8010678:	2100      	movs	r1, #0
 801067a:	0092      	lsls	r2, r2, #2
 801067c:	f006 fd28 	bl	80170d0 <memset>
 8010680:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010682:	2200      	movs	r2, #0
 8010684:	60da      	str	r2, [r3, #12]
 8010686:	69a0      	ldr	r0, [r4, #24]
 8010688:	b138      	cbz	r0, 801069a <rcl_wait_set_clear+0x4a>
 801068a:	69e2      	ldr	r2, [r4, #28]
 801068c:	2100      	movs	r1, #0
 801068e:	0092      	lsls	r2, r2, #2
 8010690:	f006 fd1e 	bl	80170d0 <memset>
 8010694:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010696:	2200      	movs	r2, #0
 8010698:	619a      	str	r2, [r3, #24]
 801069a:	6a20      	ldr	r0, [r4, #32]
 801069c:	b138      	cbz	r0, 80106ae <rcl_wait_set_clear+0x5e>
 801069e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80106a0:	2100      	movs	r1, #0
 80106a2:	0092      	lsls	r2, r2, #2
 80106a4:	f006 fd14 	bl	80170d0 <memset>
 80106a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106aa:	2200      	movs	r2, #0
 80106ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80106ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80106b0:	b138      	cbz	r0, 80106c2 <rcl_wait_set_clear+0x72>
 80106b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80106b4:	2100      	movs	r1, #0
 80106b6:	0092      	lsls	r2, r2, #2
 80106b8:	f006 fd0a 	bl	80170d0 <memset>
 80106bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106be:	2200      	movs	r2, #0
 80106c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80106c2:	6920      	ldr	r0, [r4, #16]
 80106c4:	b138      	cbz	r0, 80106d6 <rcl_wait_set_clear+0x86>
 80106c6:	6962      	ldr	r2, [r4, #20]
 80106c8:	2100      	movs	r1, #0
 80106ca:	0092      	lsls	r2, r2, #2
 80106cc:	f006 fd00 	bl	80170d0 <memset>
 80106d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106d2:	2200      	movs	r2, #0
 80106d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80106d6:	6898      	ldr	r0, [r3, #8]
 80106d8:	b138      	cbz	r0, 80106ea <rcl_wait_set_clear+0x9a>
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	2100      	movs	r1, #0
 80106de:	0092      	lsls	r2, r2, #2
 80106e0:	f006 fcf6 	bl	80170d0 <memset>
 80106e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106e6:	2200      	movs	r2, #0
 80106e8:	605a      	str	r2, [r3, #4]
 80106ea:	6958      	ldr	r0, [r3, #20]
 80106ec:	b138      	cbz	r0, 80106fe <rcl_wait_set_clear+0xae>
 80106ee:	691a      	ldr	r2, [r3, #16]
 80106f0:	2100      	movs	r1, #0
 80106f2:	0092      	lsls	r2, r2, #2
 80106f4:	f006 fcec 	bl	80170d0 <memset>
 80106f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80106fa:	2200      	movs	r2, #0
 80106fc:	611a      	str	r2, [r3, #16]
 80106fe:	6a18      	ldr	r0, [r3, #32]
 8010700:	b138      	cbz	r0, 8010712 <rcl_wait_set_clear+0xc2>
 8010702:	69da      	ldr	r2, [r3, #28]
 8010704:	2100      	movs	r1, #0
 8010706:	0092      	lsls	r2, r2, #2
 8010708:	f006 fce2 	bl	80170d0 <memset>
 801070c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801070e:	2200      	movs	r2, #0
 8010710:	61da      	str	r2, [r3, #28]
 8010712:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8010714:	b138      	cbz	r0, 8010726 <rcl_wait_set_clear+0xd6>
 8010716:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010718:	2100      	movs	r1, #0
 801071a:	0092      	lsls	r2, r2, #2
 801071c:	f006 fcd8 	bl	80170d0 <memset>
 8010720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010722:	2200      	movs	r2, #0
 8010724:	629a      	str	r2, [r3, #40]	@ 0x28
 8010726:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010728:	b138      	cbz	r0, 801073a <rcl_wait_set_clear+0xea>
 801072a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801072c:	2100      	movs	r1, #0
 801072e:	0092      	lsls	r2, r2, #2
 8010730:	f006 fcce 	bl	80170d0 <memset>
 8010734:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010736:	2000      	movs	r0, #0
 8010738:	6358      	str	r0, [r3, #52]	@ 0x34
 801073a:	bd10      	pop	{r4, pc}
 801073c:	200b      	movs	r0, #11
 801073e:	4770      	bx	lr
 8010740:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010744:	bd10      	pop	{r4, pc}
 8010746:	bf00      	nop

08010748 <rcl_wait_set_resize>:
 8010748:	2800      	cmp	r0, #0
 801074a:	f000 8185 	beq.w	8010a58 <rcl_wait_set_resize+0x310>
 801074e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010752:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8010754:	b083      	sub	sp, #12
 8010756:	4605      	mov	r5, r0
 8010758:	2c00      	cmp	r4, #0
 801075a:	f000 817f 	beq.w	8010a5c <rcl_wait_set_resize+0x314>
 801075e:	f04f 0900 	mov.w	r9, #0
 8010762:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8010766:	461f      	mov	r7, r3
 8010768:	4688      	mov	r8, r1
 801076a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801076e:	4616      	mov	r6, r2
 8010770:	f8c0 9004 	str.w	r9, [r0, #4]
 8010774:	f8c4 9000 	str.w	r9, [r4]
 8010778:	2900      	cmp	r1, #0
 801077a:	f000 80bd 	beq.w	80108f8 <rcl_wait_set_resize+0x1b0>
 801077e:	008c      	lsls	r4, r1, #2
 8010780:	6800      	ldr	r0, [r0, #0]
 8010782:	9301      	str	r3, [sp, #4]
 8010784:	4652      	mov	r2, sl
 8010786:	4621      	mov	r1, r4
 8010788:	4798      	blx	r3
 801078a:	9b01      	ldr	r3, [sp, #4]
 801078c:	6028      	str	r0, [r5, #0]
 801078e:	2800      	cmp	r0, #0
 8010790:	f000 80cb 	beq.w	801092a <rcl_wait_set_resize+0x1e2>
 8010794:	4622      	mov	r2, r4
 8010796:	4649      	mov	r1, r9
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	f006 fc99 	bl	80170d0 <memset>
 801079e:	f8c5 8004 	str.w	r8, [r5, #4]
 80107a2:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80107a6:	9b01      	ldr	r3, [sp, #4]
 80107a8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80107ac:	f8c8 9004 	str.w	r9, [r8, #4]
 80107b0:	4652      	mov	r2, sl
 80107b2:	4621      	mov	r1, r4
 80107b4:	4798      	blx	r3
 80107b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80107b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80107bc:	689b      	ldr	r3, [r3, #8]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f000 80ac 	beq.w	801091c <rcl_wait_set_resize+0x1d4>
 80107c4:	4622      	mov	r2, r4
 80107c6:	4649      	mov	r1, r9
 80107c8:	4618      	mov	r0, r3
 80107ca:	f006 fc81 	bl	80170d0 <memset>
 80107ce:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80107d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80107d4:	f04f 0800 	mov.w	r8, #0
 80107d8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80107dc:	f8c5 800c 	str.w	r8, [r5, #12]
 80107e0:	f8c4 800c 	str.w	r8, [r4, #12]
 80107e4:	2e00      	cmp	r6, #0
 80107e6:	f040 80a4 	bne.w	8010932 <rcl_wait_set_resize+0x1ea>
 80107ea:	68a8      	ldr	r0, [r5, #8]
 80107ec:	b128      	cbz	r0, 80107fa <rcl_wait_set_resize+0xb2>
 80107ee:	4649      	mov	r1, r9
 80107f0:	4790      	blx	r2
 80107f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80107f4:	60ae      	str	r6, [r5, #8]
 80107f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80107fa:	f04f 0800 	mov.w	r8, #0
 80107fe:	19f6      	adds	r6, r6, r7
 8010800:	f8c4 8010 	str.w	r8, [r4, #16]
 8010804:	f040 80ac 	bne.w	8010960 <rcl_wait_set_resize+0x218>
 8010808:	6960      	ldr	r0, [r4, #20]
 801080a:	b130      	cbz	r0, 801081a <rcl_wait_set_resize+0xd2>
 801080c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801080e:	4649      	mov	r1, r9
 8010810:	4798      	blx	r3
 8010812:	6166      	str	r6, [r4, #20]
 8010814:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010816:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801081a:	2600      	movs	r6, #0
 801081c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8010820:	616e      	str	r6, [r5, #20]
 8010822:	6426      	str	r6, [r4, #64]	@ 0x40
 8010824:	2f00      	cmp	r7, #0
 8010826:	f040 80ad 	bne.w	8010984 <rcl_wait_set_resize+0x23c>
 801082a:	6928      	ldr	r0, [r5, #16]
 801082c:	b138      	cbz	r0, 801083e <rcl_wait_set_resize+0xf6>
 801082e:	4649      	mov	r1, r9
 8010830:	47d0      	blx	sl
 8010832:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010834:	612f      	str	r7, [r5, #16]
 8010836:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801083a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801083e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010840:	2600      	movs	r6, #0
 8010842:	61ee      	str	r6, [r5, #28]
 8010844:	61a6      	str	r6, [r4, #24]
 8010846:	2b00      	cmp	r3, #0
 8010848:	f040 80af 	bne.w	80109aa <rcl_wait_set_resize+0x262>
 801084c:	69a8      	ldr	r0, [r5, #24]
 801084e:	b120      	cbz	r0, 801085a <rcl_wait_set_resize+0x112>
 8010850:	4649      	mov	r1, r9
 8010852:	47d0      	blx	sl
 8010854:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010856:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010858:	61ab      	str	r3, [r5, #24]
 801085a:	6a20      	ldr	r0, [r4, #32]
 801085c:	b128      	cbz	r0, 801086a <rcl_wait_set_resize+0x122>
 801085e:	4649      	mov	r1, r9
 8010860:	47d0      	blx	sl
 8010862:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010864:	2300      	movs	r3, #0
 8010866:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801086a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801086c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801086e:	2600      	movs	r6, #0
 8010870:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8010874:	626e      	str	r6, [r5, #36]	@ 0x24
 8010876:	6266      	str	r6, [r4, #36]	@ 0x24
 8010878:	2b00      	cmp	r3, #0
 801087a:	f000 80b6 	beq.w	80109ea <rcl_wait_set_resize+0x2a2>
 801087e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8010882:	6a28      	ldr	r0, [r5, #32]
 8010884:	463a      	mov	r2, r7
 8010886:	4651      	mov	r1, sl
 8010888:	47c8      	blx	r9
 801088a:	6228      	str	r0, [r5, #32]
 801088c:	2800      	cmp	r0, #0
 801088e:	d04c      	beq.n	801092a <rcl_wait_set_resize+0x1e2>
 8010890:	4652      	mov	r2, sl
 8010892:	4631      	mov	r1, r6
 8010894:	f006 fc1c 	bl	80170d0 <memset>
 8010898:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801089a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801089c:	626b      	str	r3, [r5, #36]	@ 0x24
 801089e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80108a0:	62a6      	str	r6, [r4, #40]	@ 0x28
 80108a2:	463a      	mov	r2, r7
 80108a4:	4651      	mov	r1, sl
 80108a6:	47c8      	blx	r9
 80108a8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80108aa:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80108ac:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80108ae:	2c00      	cmp	r4, #0
 80108b0:	f000 80f0 	beq.w	8010a94 <rcl_wait_set_resize+0x34c>
 80108b4:	4620      	mov	r0, r4
 80108b6:	4652      	mov	r2, sl
 80108b8:	4631      	mov	r1, r6
 80108ba:	f006 fc09 	bl	80170d0 <memset>
 80108be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80108c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108c2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80108c4:	2600      	movs	r6, #0
 80108c6:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80108ca:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80108cc:	6326      	str	r6, [r4, #48]	@ 0x30
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f040 809d 	bne.w	8010a0e <rcl_wait_set_resize+0x2c6>
 80108d4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80108d6:	b120      	cbz	r0, 80108e2 <rcl_wait_set_resize+0x19a>
 80108d8:	4639      	mov	r1, r7
 80108da:	47c0      	blx	r8
 80108dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80108de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80108e0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80108e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80108e4:	b310      	cbz	r0, 801092c <rcl_wait_set_resize+0x1e4>
 80108e6:	4639      	mov	r1, r7
 80108e8:	47c0      	blx	r8
 80108ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80108ec:	2000      	movs	r0, #0
 80108ee:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80108f2:	b003      	add	sp, #12
 80108f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f8:	6800      	ldr	r0, [r0, #0]
 80108fa:	b120      	cbz	r0, 8010906 <rcl_wait_set_resize+0x1be>
 80108fc:	4651      	mov	r1, sl
 80108fe:	47d8      	blx	fp
 8010900:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010902:	f8c5 8000 	str.w	r8, [r5]
 8010906:	68a0      	ldr	r0, [r4, #8]
 8010908:	2800      	cmp	r0, #0
 801090a:	f43f af61 	beq.w	80107d0 <rcl_wait_set_resize+0x88>
 801090e:	4651      	mov	r1, sl
 8010910:	47d8      	blx	fp
 8010912:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010914:	2300      	movs	r3, #0
 8010916:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801091a:	e759      	b.n	80107d0 <rcl_wait_set_resize+0x88>
 801091c:	6828      	ldr	r0, [r5, #0]
 801091e:	9301      	str	r3, [sp, #4]
 8010920:	4651      	mov	r1, sl
 8010922:	47d8      	blx	fp
 8010924:	9b01      	ldr	r3, [sp, #4]
 8010926:	e9c5 3300 	strd	r3, r3, [r5]
 801092a:	200a      	movs	r0, #10
 801092c:	b003      	add	sp, #12
 801092e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010932:	00b4      	lsls	r4, r6, #2
 8010934:	68a8      	ldr	r0, [r5, #8]
 8010936:	464a      	mov	r2, r9
 8010938:	4621      	mov	r1, r4
 801093a:	4798      	blx	r3
 801093c:	60a8      	str	r0, [r5, #8]
 801093e:	2800      	cmp	r0, #0
 8010940:	d0f3      	beq.n	801092a <rcl_wait_set_resize+0x1e2>
 8010942:	4622      	mov	r2, r4
 8010944:	4641      	mov	r1, r8
 8010946:	f006 fbc3 	bl	80170d0 <memset>
 801094a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801094c:	60ee      	str	r6, [r5, #12]
 801094e:	f04f 0800 	mov.w	r8, #0
 8010952:	19f6      	adds	r6, r6, r7
 8010954:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010958:	f8c4 8010 	str.w	r8, [r4, #16]
 801095c:	f43f af54 	beq.w	8010808 <rcl_wait_set_resize+0xc0>
 8010960:	00b6      	lsls	r6, r6, #2
 8010962:	464a      	mov	r2, r9
 8010964:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8010966:	6960      	ldr	r0, [r4, #20]
 8010968:	4631      	mov	r1, r6
 801096a:	4798      	blx	r3
 801096c:	4681      	mov	r9, r0
 801096e:	6160      	str	r0, [r4, #20]
 8010970:	2800      	cmp	r0, #0
 8010972:	d076      	beq.n	8010a62 <rcl_wait_set_resize+0x31a>
 8010974:	4632      	mov	r2, r6
 8010976:	4641      	mov	r1, r8
 8010978:	f006 fbaa 	bl	80170d0 <memset>
 801097c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801097e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8010982:	e74a      	b.n	801081a <rcl_wait_set_resize+0xd2>
 8010984:	00bc      	lsls	r4, r7, #2
 8010986:	6928      	ldr	r0, [r5, #16]
 8010988:	464a      	mov	r2, r9
 801098a:	4621      	mov	r1, r4
 801098c:	47c0      	blx	r8
 801098e:	6128      	str	r0, [r5, #16]
 8010990:	2800      	cmp	r0, #0
 8010992:	d0ca      	beq.n	801092a <rcl_wait_set_resize+0x1e2>
 8010994:	4622      	mov	r2, r4
 8010996:	4631      	mov	r1, r6
 8010998:	f006 fb9a 	bl	80170d0 <memset>
 801099c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801099e:	616f      	str	r7, [r5, #20]
 80109a0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80109a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80109a8:	e749      	b.n	801083e <rcl_wait_set_resize+0xf6>
 80109aa:	009c      	lsls	r4, r3, #2
 80109ac:	69a8      	ldr	r0, [r5, #24]
 80109ae:	464a      	mov	r2, r9
 80109b0:	4621      	mov	r1, r4
 80109b2:	47c0      	blx	r8
 80109b4:	61a8      	str	r0, [r5, #24]
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d0b7      	beq.n	801092a <rcl_wait_set_resize+0x1e2>
 80109ba:	4622      	mov	r2, r4
 80109bc:	4631      	mov	r1, r6
 80109be:	f006 fb87 	bl	80170d0 <memset>
 80109c2:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80109c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80109c6:	61eb      	str	r3, [r5, #28]
 80109c8:	6a38      	ldr	r0, [r7, #32]
 80109ca:	61fe      	str	r6, [r7, #28]
 80109cc:	464a      	mov	r2, r9
 80109ce:	4621      	mov	r1, r4
 80109d0:	47c0      	blx	r8
 80109d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80109d4:	6238      	str	r0, [r7, #32]
 80109d6:	6a1f      	ldr	r7, [r3, #32]
 80109d8:	2f00      	cmp	r7, #0
 80109da:	d054      	beq.n	8010a86 <rcl_wait_set_resize+0x33e>
 80109dc:	4622      	mov	r2, r4
 80109de:	4631      	mov	r1, r6
 80109e0:	4638      	mov	r0, r7
 80109e2:	f006 fb75 	bl	80170d0 <memset>
 80109e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109e8:	e73f      	b.n	801086a <rcl_wait_set_resize+0x122>
 80109ea:	6a28      	ldr	r0, [r5, #32]
 80109ec:	b120      	cbz	r0, 80109f8 <rcl_wait_set_resize+0x2b0>
 80109ee:	4639      	mov	r1, r7
 80109f0:	47c0      	blx	r8
 80109f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80109f6:	622b      	str	r3, [r5, #32]
 80109f8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80109fa:	2800      	cmp	r0, #0
 80109fc:	f43f af60 	beq.w	80108c0 <rcl_wait_set_resize+0x178>
 8010a00:	4639      	mov	r1, r7
 8010a02:	47c0      	blx	r8
 8010a04:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8010a06:	2300      	movs	r3, #0
 8010a08:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8010a0c:	e758      	b.n	80108c0 <rcl_wait_set_resize+0x178>
 8010a0e:	009c      	lsls	r4, r3, #2
 8010a10:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010a12:	463a      	mov	r2, r7
 8010a14:	4621      	mov	r1, r4
 8010a16:	47c8      	blx	r9
 8010a18:	62a8      	str	r0, [r5, #40]	@ 0x28
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d085      	beq.n	801092a <rcl_wait_set_resize+0x1e2>
 8010a1e:	4622      	mov	r2, r4
 8010a20:	4631      	mov	r1, r6
 8010a22:	f006 fb55 	bl	80170d0 <memset>
 8010a26:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8010a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a2c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8010a2e:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8010a32:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8010a36:	463a      	mov	r2, r7
 8010a38:	4621      	mov	r1, r4
 8010a3a:	47c8      	blx	r9
 8010a3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a3e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8010a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a44:	b36b      	cbz	r3, 8010aa2 <rcl_wait_set_resize+0x35a>
 8010a46:	4622      	mov	r2, r4
 8010a48:	4631      	mov	r1, r6
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f006 fb40 	bl	80170d0 <memset>
 8010a50:	4630      	mov	r0, r6
 8010a52:	b003      	add	sp, #12
 8010a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a58:	200b      	movs	r0, #11
 8010a5a:	4770      	bx	lr
 8010a5c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010a60:	e764      	b.n	801092c <rcl_wait_set_resize+0x1e4>
 8010a62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a64:	68a8      	ldr	r0, [r5, #8]
 8010a66:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a6a:	4798      	blx	r3
 8010a6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010a6e:	6928      	ldr	r0, [r5, #16]
 8010a70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a72:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8010a74:	f8c5 900c 	str.w	r9, [r5, #12]
 8010a78:	f8c5 9008 	str.w	r9, [r5, #8]
 8010a7c:	4790      	blx	r2
 8010a7e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8010a82:	200a      	movs	r0, #10
 8010a84:	e752      	b.n	801092c <rcl_wait_set_resize+0x1e4>
 8010a86:	69a8      	ldr	r0, [r5, #24]
 8010a88:	4649      	mov	r1, r9
 8010a8a:	47d0      	blx	sl
 8010a8c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8010a90:	200a      	movs	r0, #10
 8010a92:	e74b      	b.n	801092c <rcl_wait_set_resize+0x1e4>
 8010a94:	6a28      	ldr	r0, [r5, #32]
 8010a96:	4639      	mov	r1, r7
 8010a98:	47c0      	blx	r8
 8010a9a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8010a9e:	200a      	movs	r0, #10
 8010aa0:	e744      	b.n	801092c <rcl_wait_set_resize+0x1e4>
 8010aa2:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	4639      	mov	r1, r7
 8010aa8:	47c0      	blx	r8
 8010aaa:	9b01      	ldr	r3, [sp, #4]
 8010aac:	200a      	movs	r0, #10
 8010aae:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8010ab2:	e73b      	b.n	801092c <rcl_wait_set_resize+0x1e4>

08010ab4 <rcl_wait_set_init>:
 8010ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab8:	b084      	sub	sp, #16
 8010aba:	4604      	mov	r4, r0
 8010abc:	a810      	add	r0, sp, #64	@ 0x40
 8010abe:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8010ac2:	460f      	mov	r7, r1
 8010ac4:	4690      	mov	r8, r2
 8010ac6:	4699      	mov	r9, r3
 8010ac8:	f7fa f85a 	bl	800ab80 <rcutils_allocator_is_valid>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d06b      	beq.n	8010ba8 <rcl_wait_set_init+0xf4>
 8010ad0:	2c00      	cmp	r4, #0
 8010ad2:	d069      	beq.n	8010ba8 <rcl_wait_set_init+0xf4>
 8010ad4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8010ad6:	b125      	cbz	r5, 8010ae2 <rcl_wait_set_init+0x2e>
 8010ad8:	2564      	movs	r5, #100	@ 0x64
 8010ada:	4628      	mov	r0, r5
 8010adc:	b004      	add	sp, #16
 8010ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae2:	f1ba 0f00 	cmp.w	sl, #0
 8010ae6:	d05f      	beq.n	8010ba8 <rcl_wait_set_init+0xf4>
 8010ae8:	4650      	mov	r0, sl
 8010aea:	f7fe fd75 	bl	800f5d8 <rcl_context_is_valid>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d067      	beq.n	8010bc2 <rcl_wait_set_init+0x10e>
 8010af2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010af4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010af6:	205c      	movs	r0, #92	@ 0x5c
 8010af8:	4798      	blx	r3
 8010afa:	6320      	str	r0, [r4, #48]	@ 0x30
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d062      	beq.n	8010bc6 <rcl_wait_set_init+0x112>
 8010b00:	4629      	mov	r1, r5
 8010b02:	225c      	movs	r2, #92	@ 0x5c
 8010b04:	f006 fae4 	bl	80170d0 <memset>
 8010b08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8010b0c:	eb03 0e02 	add.w	lr, r3, r2
 8010b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b12:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8010b14:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8010b18:	449e      	add	lr, r3
 8010b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b1e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8010b22:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8010b26:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8010b2a:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8010b2e:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8010b32:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8010b36:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8010b3a:	f8da a000 	ldr.w	sl, [sl]
 8010b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b40:	44c6      	add	lr, r8
 8010b42:	f8dc 3000 	ldr.w	r3, [ip]
 8010b46:	602b      	str	r3, [r5, #0]
 8010b48:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8010b4c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8010b50:	f002 f95a 	bl	8012e08 <rmw_create_wait_set>
 8010b54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010b56:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8010b58:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010b5a:	b350      	cbz	r0, 8010bb2 <rcl_wait_set_init+0xfe>
 8010b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b5e:	9302      	str	r3, [sp, #8]
 8010b60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b62:	9301      	str	r3, [sp, #4]
 8010b64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	4642      	mov	r2, r8
 8010b6a:	464b      	mov	r3, r9
 8010b6c:	4639      	mov	r1, r7
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f7ff fdea 	bl	8010748 <rcl_wait_set_resize>
 8010b74:	4605      	mov	r5, r0
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d0af      	beq.n	8010ada <rcl_wait_set_init+0x26>
 8010b7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010b7c:	bb2b      	cbnz	r3, 8010bca <rcl_wait_set_init+0x116>
 8010b7e:	2600      	movs	r6, #0
 8010b80:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8010b84:	9600      	str	r6, [sp, #0]
 8010b86:	4633      	mov	r3, r6
 8010b88:	4632      	mov	r2, r6
 8010b8a:	4631      	mov	r1, r6
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7ff fddb 	bl	8010748 <rcl_wait_set_resize>
 8010b92:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d0a0      	beq.n	8010ada <rcl_wait_set_init+0x26>
 8010b98:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010b9a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8010b9c:	4798      	blx	r3
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	6326      	str	r6, [r4, #48]	@ 0x30
 8010ba2:	b004      	add	sp, #16
 8010ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ba8:	250b      	movs	r5, #11
 8010baa:	4628      	mov	r0, r5
 8010bac:	b004      	add	sp, #16
 8010bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb2:	2501      	movs	r5, #1
 8010bb4:	f002 f932 	bl	8012e1c <rmw_destroy_wait_set>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	bf18      	it	ne
 8010bbc:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8010bc0:	e7dd      	b.n	8010b7e <rcl_wait_set_init+0xca>
 8010bc2:	2565      	movs	r5, #101	@ 0x65
 8010bc4:	e789      	b.n	8010ada <rcl_wait_set_init+0x26>
 8010bc6:	250a      	movs	r5, #10
 8010bc8:	e787      	b.n	8010ada <rcl_wait_set_init+0x26>
 8010bca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010bcc:	e7f2      	b.n	8010bb4 <rcl_wait_set_init+0x100>
 8010bce:	bf00      	nop

08010bd0 <rcl_wait_set_add_guard_condition>:
 8010bd0:	b318      	cbz	r0, 8010c1a <rcl_wait_set_add_guard_condition+0x4a>
 8010bd2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010bd4:	b570      	push	{r4, r5, r6, lr}
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	b30b      	cbz	r3, 8010c1e <rcl_wait_set_add_guard_condition+0x4e>
 8010bda:	b319      	cbz	r1, 8010c24 <rcl_wait_set_add_guard_condition+0x54>
 8010bdc:	68dd      	ldr	r5, [r3, #12]
 8010bde:	68c0      	ldr	r0, [r0, #12]
 8010be0:	4285      	cmp	r5, r0
 8010be2:	d217      	bcs.n	8010c14 <rcl_wait_set_add_guard_condition+0x44>
 8010be4:	68a0      	ldr	r0, [r4, #8]
 8010be6:	1c6e      	adds	r6, r5, #1
 8010be8:	60de      	str	r6, [r3, #12]
 8010bea:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010bee:	b102      	cbz	r2, 8010bf2 <rcl_wait_set_add_guard_condition+0x22>
 8010bf0:	6015      	str	r5, [r2, #0]
 8010bf2:	4608      	mov	r0, r1
 8010bf4:	f7fe fe02 	bl	800f7fc <rcl_guard_condition_get_rmw_handle>
 8010bf8:	b150      	cbz	r0, 8010c10 <rcl_wait_set_add_guard_condition+0x40>
 8010bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010bfc:	6842      	ldr	r2, [r0, #4]
 8010bfe:	695b      	ldr	r3, [r3, #20]
 8010c00:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c04:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010c06:	6913      	ldr	r3, [r2, #16]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	2000      	movs	r0, #0
 8010c0c:	6113      	str	r3, [r2, #16]
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}
 8010c10:	2001      	movs	r0, #1
 8010c12:	bd70      	pop	{r4, r5, r6, pc}
 8010c14:	f240 3086 	movw	r0, #902	@ 0x386
 8010c18:	bd70      	pop	{r4, r5, r6, pc}
 8010c1a:	200b      	movs	r0, #11
 8010c1c:	4770      	bx	lr
 8010c1e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010c22:	bd70      	pop	{r4, r5, r6, pc}
 8010c24:	200b      	movs	r0, #11
 8010c26:	bd70      	pop	{r4, r5, r6, pc}

08010c28 <rcl_wait_set_add_timer>:
 8010c28:	b328      	cbz	r0, 8010c76 <rcl_wait_set_add_timer+0x4e>
 8010c2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	4604      	mov	r4, r0
 8010c30:	b31b      	cbz	r3, 8010c7a <rcl_wait_set_add_timer+0x52>
 8010c32:	b329      	cbz	r1, 8010c80 <rcl_wait_set_add_timer+0x58>
 8010c34:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8010c36:	6965      	ldr	r5, [r4, #20]
 8010c38:	42a8      	cmp	r0, r5
 8010c3a:	d219      	bcs.n	8010c70 <rcl_wait_set_add_timer+0x48>
 8010c3c:	6925      	ldr	r5, [r4, #16]
 8010c3e:	1c46      	adds	r6, r0, #1
 8010c40:	641e      	str	r6, [r3, #64]	@ 0x40
 8010c42:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8010c46:	b102      	cbz	r2, 8010c4a <rcl_wait_set_add_timer+0x22>
 8010c48:	6010      	str	r0, [r2, #0]
 8010c4a:	4608      	mov	r0, r1
 8010c4c:	f7ff fba6 	bl	801039c <rcl_timer_get_guard_condition>
 8010c50:	b168      	cbz	r0, 8010c6e <rcl_wait_set_add_timer+0x46>
 8010c52:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010c54:	68e3      	ldr	r3, [r4, #12]
 8010c56:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	441d      	add	r5, r3
 8010c5c:	f7fe fdce 	bl	800f7fc <rcl_guard_condition_get_rmw_handle>
 8010c60:	b180      	cbz	r0, 8010c84 <rcl_wait_set_add_timer+0x5c>
 8010c62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010c64:	6842      	ldr	r2, [r0, #4]
 8010c66:	695b      	ldr	r3, [r3, #20]
 8010c68:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
 8010c70:	f240 3086 	movw	r0, #902	@ 0x386
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	200b      	movs	r0, #11
 8010c78:	4770      	bx	lr
 8010c7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	200b      	movs	r0, #11
 8010c82:	bd70      	pop	{r4, r5, r6, pc}
 8010c84:	2001      	movs	r0, #1
 8010c86:	bd70      	pop	{r4, r5, r6, pc}

08010c88 <rcl_wait_set_add_client>:
 8010c88:	b318      	cbz	r0, 8010cd2 <rcl_wait_set_add_client+0x4a>
 8010c8a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	4604      	mov	r4, r0
 8010c90:	b30b      	cbz	r3, 8010cd6 <rcl_wait_set_add_client+0x4e>
 8010c92:	b319      	cbz	r1, 8010cdc <rcl_wait_set_add_client+0x54>
 8010c94:	699d      	ldr	r5, [r3, #24]
 8010c96:	69c0      	ldr	r0, [r0, #28]
 8010c98:	4285      	cmp	r5, r0
 8010c9a:	d217      	bcs.n	8010ccc <rcl_wait_set_add_client+0x44>
 8010c9c:	69a0      	ldr	r0, [r4, #24]
 8010c9e:	1c6e      	adds	r6, r5, #1
 8010ca0:	619e      	str	r6, [r3, #24]
 8010ca2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010ca6:	b102      	cbz	r2, 8010caa <rcl_wait_set_add_client+0x22>
 8010ca8:	6015      	str	r5, [r2, #0]
 8010caa:	4608      	mov	r0, r1
 8010cac:	f7fe fbe8 	bl	800f480 <rcl_client_get_rmw_handle>
 8010cb0:	b150      	cbz	r0, 8010cc8 <rcl_wait_set_add_client+0x40>
 8010cb2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cb4:	6842      	ldr	r2, [r0, #4]
 8010cb6:	6a1b      	ldr	r3, [r3, #32]
 8010cb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010cbc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010cbe:	69d3      	ldr	r3, [r2, #28]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	61d3      	str	r3, [r2, #28]
 8010cc6:	bd70      	pop	{r4, r5, r6, pc}
 8010cc8:	2001      	movs	r0, #1
 8010cca:	bd70      	pop	{r4, r5, r6, pc}
 8010ccc:	f240 3086 	movw	r0, #902	@ 0x386
 8010cd0:	bd70      	pop	{r4, r5, r6, pc}
 8010cd2:	200b      	movs	r0, #11
 8010cd4:	4770      	bx	lr
 8010cd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010cda:	bd70      	pop	{r4, r5, r6, pc}
 8010cdc:	200b      	movs	r0, #11
 8010cde:	bd70      	pop	{r4, r5, r6, pc}

08010ce0 <rcl_wait_set_add_service>:
 8010ce0:	b318      	cbz	r0, 8010d2a <rcl_wait_set_add_service+0x4a>
 8010ce2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	b30b      	cbz	r3, 8010d2e <rcl_wait_set_add_service+0x4e>
 8010cea:	b319      	cbz	r1, 8010d34 <rcl_wait_set_add_service+0x54>
 8010cec:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010cee:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010cf0:	4285      	cmp	r5, r0
 8010cf2:	d217      	bcs.n	8010d24 <rcl_wait_set_add_service+0x44>
 8010cf4:	6a20      	ldr	r0, [r4, #32]
 8010cf6:	1c6e      	adds	r6, r5, #1
 8010cf8:	625e      	str	r6, [r3, #36]	@ 0x24
 8010cfa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010cfe:	b102      	cbz	r2, 8010d02 <rcl_wait_set_add_service+0x22>
 8010d00:	6015      	str	r5, [r2, #0]
 8010d02:	4608      	mov	r0, r1
 8010d04:	f7ff f948 	bl	800ff98 <rcl_service_get_rmw_handle>
 8010d08:	b150      	cbz	r0, 8010d20 <rcl_wait_set_add_service+0x40>
 8010d0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010d0c:	6842      	ldr	r2, [r0, #4]
 8010d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d14:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8010d16:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010d18:	3301      	adds	r3, #1
 8010d1a:	2000      	movs	r0, #0
 8010d1c:	6293      	str	r3, [r2, #40]	@ 0x28
 8010d1e:	bd70      	pop	{r4, r5, r6, pc}
 8010d20:	2001      	movs	r0, #1
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	f240 3086 	movw	r0, #902	@ 0x386
 8010d28:	bd70      	pop	{r4, r5, r6, pc}
 8010d2a:	200b      	movs	r0, #11
 8010d2c:	4770      	bx	lr
 8010d2e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010d32:	bd70      	pop	{r4, r5, r6, pc}
 8010d34:	200b      	movs	r0, #11
 8010d36:	bd70      	pop	{r4, r5, r6, pc}

08010d38 <rcl_wait>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	ed2d 8b02 	vpush	{d8}
 8010d40:	b08d      	sub	sp, #52	@ 0x34
 8010d42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f000 8143 	beq.w	8010fd2 <rcl_wait+0x29a>
 8010d4c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010d4e:	4605      	mov	r5, r0
 8010d50:	2e00      	cmp	r6, #0
 8010d52:	f000 8112 	beq.w	8010f7a <rcl_wait+0x242>
 8010d56:	6843      	ldr	r3, [r0, #4]
 8010d58:	b983      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d5a:	68eb      	ldr	r3, [r5, #12]
 8010d5c:	b973      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d5e:	696b      	ldr	r3, [r5, #20]
 8010d60:	b963      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d62:	69eb      	ldr	r3, [r5, #28]
 8010d64:	b953      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010d68:	b943      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010d6c:	b933      	cbnz	r3, 8010d7c <rcl_wait+0x44>
 8010d6e:	f240 3085 	movw	r0, #901	@ 0x385
 8010d72:	b00d      	add	sp, #52	@ 0x34
 8010d74:	ecbd 8b02 	vpop	{d8}
 8010d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7c:	9b04      	ldr	r3, [sp, #16]
 8010d7e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	9b05      	ldr	r3, [sp, #20]
 8010d84:	f173 0300 	sbcs.w	r3, r3, #0
 8010d88:	f2c0 80f0 	blt.w	8010f6c <rcl_wait+0x234>
 8010d8c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8010d90:	4643      	mov	r3, r8
 8010d92:	2a00      	cmp	r2, #0
 8010d94:	f000 8133 	beq.w	8010ffe <rcl_wait+0x2c6>
 8010d98:	2400      	movs	r4, #0
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8011010 <rcl_wait+0x2d8>
 8010da0:	46a2      	mov	sl, r4
 8010da2:	46a3      	mov	fp, r4
 8010da4:	f240 3921 	movw	r9, #801	@ 0x321
 8010da8:	4632      	mov	r2, r6
 8010daa:	e014      	b.n	8010dd6 <rcl_wait+0x9e>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	d1e0      	bne.n	8010d72 <rcl_wait+0x3a>
 8010db0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010db4:	4542      	cmp	r2, r8
 8010db6:	eb73 0107 	sbcs.w	r1, r3, r7
 8010dba:	da03      	bge.n	8010dc4 <rcl_wait+0x8c>
 8010dbc:	4690      	mov	r8, r2
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	f04f 0b01 	mov.w	fp, #1
 8010dc4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010dc6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010dc8:	3401      	adds	r4, #1
 8010dca:	f14a 0a00 	adc.w	sl, sl, #0
 8010dce:	429c      	cmp	r4, r3
 8010dd0:	f17a 0100 	sbcs.w	r1, sl, #0
 8010dd4:	d228      	bcs.n	8010e28 <rcl_wait+0xf0>
 8010dd6:	6928      	ldr	r0, [r5, #16]
 8010dd8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010ddc:	a908      	add	r1, sp, #32
 8010dde:	00a6      	lsls	r6, r4, #2
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d0f1      	beq.n	8010dc8 <rcl_wait+0x90>
 8010de4:	68eb      	ldr	r3, [r5, #12]
 8010de6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010dea:	4423      	add	r3, r4
 8010dec:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010df0:	f1be 0f00 	cmp.w	lr, #0
 8010df4:	d006      	beq.n	8010e04 <rcl_wait+0xcc>
 8010df6:	6913      	ldr	r3, [r2, #16]
 8010df8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	6113      	str	r3, [r2, #16]
 8010e00:	692b      	ldr	r3, [r5, #16]
 8010e02:	5998      	ldr	r0, [r3, r6]
 8010e04:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010e08:	f7ff fa96 	bl	8010338 <rcl_timer_get_time_until_next_call>
 8010e0c:	4548      	cmp	r0, r9
 8010e0e:	d1cd      	bne.n	8010dac <rcl_wait+0x74>
 8010e10:	692b      	ldr	r3, [r5, #16]
 8010e12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8010e14:	2100      	movs	r1, #0
 8010e16:	5199      	str	r1, [r3, r6]
 8010e18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010e1a:	3401      	adds	r4, #1
 8010e1c:	f14a 0a00 	adc.w	sl, sl, #0
 8010e20:	429c      	cmp	r4, r3
 8010e22:	f17a 0100 	sbcs.w	r1, sl, #0
 8010e26:	d3d6      	bcc.n	8010dd6 <rcl_wait+0x9e>
 8010e28:	4616      	mov	r6, r2
 8010e2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	46d9      	mov	r9, fp
 8010e32:	f040 80a9 	bne.w	8010f88 <rcl_wait+0x250>
 8010e36:	2300      	movs	r3, #0
 8010e38:	2200      	movs	r2, #0
 8010e3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8010e42:	ab08      	add	r3, sp, #32
 8010e44:	9302      	str	r3, [sp, #8]
 8010e46:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8010e48:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8010e4c:	e9cd 3200 	strd	r3, r2, [sp]
 8010e50:	f106 0110 	add.w	r1, r6, #16
 8010e54:	f106 031c 	add.w	r3, r6, #28
 8010e58:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8010e5c:	1d30      	adds	r0, r6, #4
 8010e5e:	f001 fe5b 	bl	8012b18 <rmw_wait>
 8010e62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010e66:	4680      	mov	r8, r0
 8010e68:	b1ca      	cbz	r2, 8010e9e <rcl_wait+0x166>
 8010e6a:	2400      	movs	r4, #0
 8010e6c:	4627      	mov	r7, r4
 8010e6e:	692a      	ldr	r2, [r5, #16]
 8010e70:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8010e74:	f10d 011f 	add.w	r1, sp, #31
 8010e78:	00a6      	lsls	r6, r4, #2
 8010e7a:	b160      	cbz	r0, 8010e96 <rcl_wait+0x15e>
 8010e7c:	f88d 701f 	strb.w	r7, [sp, #31]
 8010e80:	f7ff fa20 	bl	80102c4 <rcl_timer_is_ready>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	f47f af74 	bne.w	8010d72 <rcl_wait+0x3a>
 8010e8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010e8e:	b90b      	cbnz	r3, 8010e94 <rcl_wait+0x15c>
 8010e90:	692a      	ldr	r2, [r5, #16]
 8010e92:	5193      	str	r3, [r2, r6]
 8010e94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8010e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010e98:	3401      	adds	r4, #1
 8010e9a:	42a2      	cmp	r2, r4
 8010e9c:	d8e7      	bhi.n	8010e6e <rcl_wait+0x136>
 8010e9e:	f038 0002 	bics.w	r0, r8, #2
 8010ea2:	f040 8090 	bne.w	8010fc6 <rcl_wait+0x28e>
 8010ea6:	686e      	ldr	r6, [r5, #4]
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	b91e      	cbnz	r6, 8010eb4 <rcl_wait+0x17c>
 8010eac:	e00d      	b.n	8010eca <rcl_wait+0x192>
 8010eae:	3201      	adds	r2, #1
 8010eb0:	42b2      	cmp	r2, r6
 8010eb2:	d00a      	beq.n	8010eca <rcl_wait+0x192>
 8010eb4:	6899      	ldr	r1, [r3, #8]
 8010eb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010eba:	2900      	cmp	r1, #0
 8010ebc:	d1f7      	bne.n	8010eae <rcl_wait+0x176>
 8010ebe:	682c      	ldr	r4, [r5, #0]
 8010ec0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010ec4:	3201      	adds	r2, #1
 8010ec6:	42b2      	cmp	r2, r6
 8010ec8:	d1f4      	bne.n	8010eb4 <rcl_wait+0x17c>
 8010eca:	68ee      	ldr	r6, [r5, #12]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	b91e      	cbnz	r6, 8010ed8 <rcl_wait+0x1a0>
 8010ed0:	e00d      	b.n	8010eee <rcl_wait+0x1b6>
 8010ed2:	3201      	adds	r2, #1
 8010ed4:	42b2      	cmp	r2, r6
 8010ed6:	d00a      	beq.n	8010eee <rcl_wait+0x1b6>
 8010ed8:	6959      	ldr	r1, [r3, #20]
 8010eda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010ede:	2900      	cmp	r1, #0
 8010ee0:	d1f7      	bne.n	8010ed2 <rcl_wait+0x19a>
 8010ee2:	68ac      	ldr	r4, [r5, #8]
 8010ee4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010ee8:	3201      	adds	r2, #1
 8010eea:	42b2      	cmp	r2, r6
 8010eec:	d1f4      	bne.n	8010ed8 <rcl_wait+0x1a0>
 8010eee:	69ee      	ldr	r6, [r5, #28]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	b91e      	cbnz	r6, 8010efc <rcl_wait+0x1c4>
 8010ef4:	e00d      	b.n	8010f12 <rcl_wait+0x1da>
 8010ef6:	3201      	adds	r2, #1
 8010ef8:	42b2      	cmp	r2, r6
 8010efa:	d00a      	beq.n	8010f12 <rcl_wait+0x1da>
 8010efc:	6a19      	ldr	r1, [r3, #32]
 8010efe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010f02:	2900      	cmp	r1, #0
 8010f04:	d1f7      	bne.n	8010ef6 <rcl_wait+0x1be>
 8010f06:	69ac      	ldr	r4, [r5, #24]
 8010f08:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010f0c:	3201      	adds	r2, #1
 8010f0e:	42b2      	cmp	r2, r6
 8010f10:	d1f4      	bne.n	8010efc <rcl_wait+0x1c4>
 8010f12:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8010f14:	2200      	movs	r2, #0
 8010f16:	b91e      	cbnz	r6, 8010f20 <rcl_wait+0x1e8>
 8010f18:	e00d      	b.n	8010f36 <rcl_wait+0x1fe>
 8010f1a:	3201      	adds	r2, #1
 8010f1c:	4296      	cmp	r6, r2
 8010f1e:	d00a      	beq.n	8010f36 <rcl_wait+0x1fe>
 8010f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010f22:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010f26:	2900      	cmp	r1, #0
 8010f28:	d1f7      	bne.n	8010f1a <rcl_wait+0x1e2>
 8010f2a:	6a2c      	ldr	r4, [r5, #32]
 8010f2c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010f30:	3201      	adds	r2, #1
 8010f32:	4296      	cmp	r6, r2
 8010f34:	d1f4      	bne.n	8010f20 <rcl_wait+0x1e8>
 8010f36:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8010f38:	2200      	movs	r2, #0
 8010f3a:	b91e      	cbnz	r6, 8010f44 <rcl_wait+0x20c>
 8010f3c:	e00d      	b.n	8010f5a <rcl_wait+0x222>
 8010f3e:	3201      	adds	r2, #1
 8010f40:	42b2      	cmp	r2, r6
 8010f42:	d00a      	beq.n	8010f5a <rcl_wait+0x222>
 8010f44:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8010f46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010f4a:	2900      	cmp	r1, #0
 8010f4c:	d1f7      	bne.n	8010f3e <rcl_wait+0x206>
 8010f4e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8010f50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010f54:	3201      	adds	r2, #1
 8010f56:	42b2      	cmp	r2, r6
 8010f58:	d1f4      	bne.n	8010f44 <rcl_wait+0x20c>
 8010f5a:	f1b8 0f02 	cmp.w	r8, #2
 8010f5e:	f47f af08 	bne.w	8010d72 <rcl_wait+0x3a>
 8010f62:	464b      	mov	r3, r9
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	bf08      	it	eq
 8010f68:	2002      	moveq	r0, #2
 8010f6a:	e702      	b.n	8010d72 <rcl_wait+0x3a>
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d03a      	beq.n	8010fe6 <rcl_wait+0x2ae>
 8010f70:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010f74:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010f78:	e70e      	b.n	8010d98 <rcl_wait+0x60>
 8010f7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010f7e:	b00d      	add	sp, #52	@ 0x34
 8010f80:	ecbd 8b02 	vpop	{d8}
 8010f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f88:	9b04      	ldr	r3, [sp, #16]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	9b05      	ldr	r3, [sp, #20]
 8010f8e:	f173 0300 	sbcs.w	r3, r3, #0
 8010f92:	db24      	blt.n	8010fde <rcl_wait+0x2a6>
 8010f94:	2f00      	cmp	r7, #0
 8010f96:	bfbc      	itt	lt
 8010f98:	f04f 0800 	movlt.w	r8, #0
 8010f9c:	4647      	movlt	r7, r8
 8010f9e:	a31e      	add	r3, pc, #120	@ (adr r3, 8011018 <rcl_wait+0x2e0>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4639      	mov	r1, r7
 8010fa8:	f7ef fe2e 	bl	8000c08 <__aeabi_ldivmod>
 8010fac:	a31a      	add	r3, pc, #104	@ (adr r3, 8011018 <rcl_wait+0x2e0>)
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010fb6:	4640      	mov	r0, r8
 8010fb8:	4639      	mov	r1, r7
 8010fba:	f7ef fe25 	bl	8000c08 <__aeabi_ldivmod>
 8010fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8010fc2:	ab08      	add	r3, sp, #32
 8010fc4:	e73e      	b.n	8010e44 <rcl_wait+0x10c>
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	b00d      	add	sp, #52	@ 0x34
 8010fca:	ecbd 8b02 	vpop	{d8}
 8010fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd2:	200b      	movs	r0, #11
 8010fd4:	b00d      	add	sp, #52	@ 0x34
 8010fd6:	ecbd 8b02 	vpop	{d8}
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	465b      	mov	r3, fp
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1d7      	bne.n	8010f94 <rcl_wait+0x25c>
 8010fe4:	e72e      	b.n	8010e44 <rcl_wait+0x10c>
 8010fe6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010fea:	430b      	orrs	r3, r1
 8010fec:	bf08      	it	eq
 8010fee:	4691      	moveq	r9, r2
 8010ff0:	f43f af21 	beq.w	8010e36 <rcl_wait+0xfe>
 8010ff4:	9b04      	ldr	r3, [sp, #16]
 8010ff6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010ffa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	9b05      	ldr	r3, [sp, #20]
 8011002:	f173 0300 	sbcs.w	r3, r3, #0
 8011006:	f04f 0300 	mov.w	r3, #0
 801100a:	4699      	mov	r9, r3
 801100c:	dac2      	bge.n	8010f94 <rcl_wait+0x25c>
 801100e:	e719      	b.n	8010e44 <rcl_wait+0x10c>
 8011010:	ffffffff 	.word	0xffffffff
 8011014:	7fffffff 	.word	0x7fffffff
 8011018:	3b9aca00 	.word	0x3b9aca00
 801101c:	00000000 	.word	0x00000000

08011020 <rcl_action_take_goal_response>:
 8011020:	2800      	cmp	r0, #0
 8011022:	d039      	beq.n	8011098 <rcl_action_take_goal_response+0x78>
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	4604      	mov	r4, r0
 8011028:	6800      	ldr	r0, [r0, #0]
 801102a:	b380      	cbz	r0, 801108e <rcl_action_take_goal_response+0x6e>
 801102c:	460d      	mov	r5, r1
 801102e:	4616      	mov	r6, r2
 8011030:	f7fe faaa 	bl	800f588 <rcl_client_is_valid>
 8011034:	b330      	cbz	r0, 8011084 <rcl_action_take_goal_response+0x64>
 8011036:	6820      	ldr	r0, [r4, #0]
 8011038:	3004      	adds	r0, #4
 801103a:	f7fe faa5 	bl	800f588 <rcl_client_is_valid>
 801103e:	b308      	cbz	r0, 8011084 <rcl_action_take_goal_response+0x64>
 8011040:	6820      	ldr	r0, [r4, #0]
 8011042:	3008      	adds	r0, #8
 8011044:	f7fe faa0 	bl	800f588 <rcl_client_is_valid>
 8011048:	b1e0      	cbz	r0, 8011084 <rcl_action_take_goal_response+0x64>
 801104a:	6820      	ldr	r0, [r4, #0]
 801104c:	300c      	adds	r0, #12
 801104e:	f7f8 fe3b 	bl	8009cc8 <rcl_subscription_is_valid>
 8011052:	b1b8      	cbz	r0, 8011084 <rcl_action_take_goal_response+0x64>
 8011054:	6820      	ldr	r0, [r4, #0]
 8011056:	3010      	adds	r0, #16
 8011058:	f7f8 fe36 	bl	8009cc8 <rcl_subscription_is_valid>
 801105c:	b190      	cbz	r0, 8011084 <rcl_action_take_goal_response+0x64>
 801105e:	b1cd      	cbz	r5, 8011094 <rcl_action_take_goal_response+0x74>
 8011060:	b1c6      	cbz	r6, 8011094 <rcl_action_take_goal_response+0x74>
 8011062:	6820      	ldr	r0, [r4, #0]
 8011064:	4632      	mov	r2, r6
 8011066:	4629      	mov	r1, r5
 8011068:	f7fe fa46 	bl	800f4f8 <rcl_take_response>
 801106c:	b148      	cbz	r0, 8011082 <rcl_action_take_goal_response+0x62>
 801106e:	280a      	cmp	r0, #10
 8011070:	d007      	beq.n	8011082 <rcl_action_take_goal_response+0x62>
 8011072:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011076:	f640 0337 	movw	r3, #2103	@ 0x837
 801107a:	4290      	cmp	r0, r2
 801107c:	bf0c      	ite	eq
 801107e:	4618      	moveq	r0, r3
 8011080:	2001      	movne	r0, #1
 8011082:	bd70      	pop	{r4, r5, r6, pc}
 8011084:	f7f9 fdb8 	bl	800abf8 <rcutils_reset_error>
 8011088:	f640 0036 	movw	r0, #2102	@ 0x836
 801108c:	bd70      	pop	{r4, r5, r6, pc}
 801108e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011092:	bd70      	pop	{r4, r5, r6, pc}
 8011094:	200b      	movs	r0, #11
 8011096:	bd70      	pop	{r4, r5, r6, pc}
 8011098:	f640 0036 	movw	r0, #2102	@ 0x836
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop

080110a0 <rcl_action_send_result_request>:
 80110a0:	b390      	cbz	r0, 8011108 <rcl_action_send_result_request+0x68>
 80110a2:	b570      	push	{r4, r5, r6, lr}
 80110a4:	4604      	mov	r4, r0
 80110a6:	6800      	ldr	r0, [r0, #0]
 80110a8:	b348      	cbz	r0, 80110fe <rcl_action_send_result_request+0x5e>
 80110aa:	460d      	mov	r5, r1
 80110ac:	4616      	mov	r6, r2
 80110ae:	f7fe fa6b 	bl	800f588 <rcl_client_is_valid>
 80110b2:	b1f8      	cbz	r0, 80110f4 <rcl_action_send_result_request+0x54>
 80110b4:	6820      	ldr	r0, [r4, #0]
 80110b6:	3004      	adds	r0, #4
 80110b8:	f7fe fa66 	bl	800f588 <rcl_client_is_valid>
 80110bc:	b1d0      	cbz	r0, 80110f4 <rcl_action_send_result_request+0x54>
 80110be:	6820      	ldr	r0, [r4, #0]
 80110c0:	3008      	adds	r0, #8
 80110c2:	f7fe fa61 	bl	800f588 <rcl_client_is_valid>
 80110c6:	b1a8      	cbz	r0, 80110f4 <rcl_action_send_result_request+0x54>
 80110c8:	6820      	ldr	r0, [r4, #0]
 80110ca:	300c      	adds	r0, #12
 80110cc:	f7f8 fdfc 	bl	8009cc8 <rcl_subscription_is_valid>
 80110d0:	b180      	cbz	r0, 80110f4 <rcl_action_send_result_request+0x54>
 80110d2:	6820      	ldr	r0, [r4, #0]
 80110d4:	3010      	adds	r0, #16
 80110d6:	f7f8 fdf7 	bl	8009cc8 <rcl_subscription_is_valid>
 80110da:	b158      	cbz	r0, 80110f4 <rcl_action_send_result_request+0x54>
 80110dc:	b195      	cbz	r5, 8011104 <rcl_action_send_result_request+0x64>
 80110de:	b18e      	cbz	r6, 8011104 <rcl_action_send_result_request+0x64>
 80110e0:	6820      	ldr	r0, [r4, #0]
 80110e2:	4632      	mov	r2, r6
 80110e4:	4629      	mov	r1, r5
 80110e6:	3008      	adds	r0, #8
 80110e8:	f7fe f9d0 	bl	800f48c <rcl_send_request>
 80110ec:	3800      	subs	r0, #0
 80110ee:	bf18      	it	ne
 80110f0:	2001      	movne	r0, #1
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	f7f9 fd80 	bl	800abf8 <rcutils_reset_error>
 80110f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80110fc:	bd70      	pop	{r4, r5, r6, pc}
 80110fe:	f640 0036 	movw	r0, #2102	@ 0x836
 8011102:	bd70      	pop	{r4, r5, r6, pc}
 8011104:	200b      	movs	r0, #11
 8011106:	bd70      	pop	{r4, r5, r6, pc}
 8011108:	f640 0036 	movw	r0, #2102	@ 0x836
 801110c:	4770      	bx	lr
 801110e:	bf00      	nop

08011110 <rcl_action_take_result_response>:
 8011110:	2800      	cmp	r0, #0
 8011112:	d03a      	beq.n	801118a <rcl_action_take_result_response+0x7a>
 8011114:	b570      	push	{r4, r5, r6, lr}
 8011116:	4604      	mov	r4, r0
 8011118:	6800      	ldr	r0, [r0, #0]
 801111a:	b388      	cbz	r0, 8011180 <rcl_action_take_result_response+0x70>
 801111c:	460d      	mov	r5, r1
 801111e:	4616      	mov	r6, r2
 8011120:	f7fe fa32 	bl	800f588 <rcl_client_is_valid>
 8011124:	b338      	cbz	r0, 8011176 <rcl_action_take_result_response+0x66>
 8011126:	6820      	ldr	r0, [r4, #0]
 8011128:	3004      	adds	r0, #4
 801112a:	f7fe fa2d 	bl	800f588 <rcl_client_is_valid>
 801112e:	b310      	cbz	r0, 8011176 <rcl_action_take_result_response+0x66>
 8011130:	6820      	ldr	r0, [r4, #0]
 8011132:	3008      	adds	r0, #8
 8011134:	f7fe fa28 	bl	800f588 <rcl_client_is_valid>
 8011138:	b1e8      	cbz	r0, 8011176 <rcl_action_take_result_response+0x66>
 801113a:	6820      	ldr	r0, [r4, #0]
 801113c:	300c      	adds	r0, #12
 801113e:	f7f8 fdc3 	bl	8009cc8 <rcl_subscription_is_valid>
 8011142:	b1c0      	cbz	r0, 8011176 <rcl_action_take_result_response+0x66>
 8011144:	6820      	ldr	r0, [r4, #0]
 8011146:	3010      	adds	r0, #16
 8011148:	f7f8 fdbe 	bl	8009cc8 <rcl_subscription_is_valid>
 801114c:	b198      	cbz	r0, 8011176 <rcl_action_take_result_response+0x66>
 801114e:	b1d5      	cbz	r5, 8011186 <rcl_action_take_result_response+0x76>
 8011150:	b1ce      	cbz	r6, 8011186 <rcl_action_take_result_response+0x76>
 8011152:	6820      	ldr	r0, [r4, #0]
 8011154:	4632      	mov	r2, r6
 8011156:	4629      	mov	r1, r5
 8011158:	3008      	adds	r0, #8
 801115a:	f7fe f9cd 	bl	800f4f8 <rcl_take_response>
 801115e:	b148      	cbz	r0, 8011174 <rcl_action_take_result_response+0x64>
 8011160:	280a      	cmp	r0, #10
 8011162:	d007      	beq.n	8011174 <rcl_action_take_result_response+0x64>
 8011164:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8011168:	f640 0337 	movw	r3, #2103	@ 0x837
 801116c:	4290      	cmp	r0, r2
 801116e:	bf0c      	ite	eq
 8011170:	4618      	moveq	r0, r3
 8011172:	2001      	movne	r0, #1
 8011174:	bd70      	pop	{r4, r5, r6, pc}
 8011176:	f7f9 fd3f 	bl	800abf8 <rcutils_reset_error>
 801117a:	f640 0036 	movw	r0, #2102	@ 0x836
 801117e:	bd70      	pop	{r4, r5, r6, pc}
 8011180:	f640 0036 	movw	r0, #2102	@ 0x836
 8011184:	bd70      	pop	{r4, r5, r6, pc}
 8011186:	200b      	movs	r0, #11
 8011188:	bd70      	pop	{r4, r5, r6, pc}
 801118a:	f640 0036 	movw	r0, #2102	@ 0x836
 801118e:	4770      	bx	lr

08011190 <rcl_action_take_cancel_response>:
 8011190:	2800      	cmp	r0, #0
 8011192:	d03a      	beq.n	801120a <rcl_action_take_cancel_response+0x7a>
 8011194:	b570      	push	{r4, r5, r6, lr}
 8011196:	4604      	mov	r4, r0
 8011198:	6800      	ldr	r0, [r0, #0]
 801119a:	b388      	cbz	r0, 8011200 <rcl_action_take_cancel_response+0x70>
 801119c:	460d      	mov	r5, r1
 801119e:	4616      	mov	r6, r2
 80111a0:	f7fe f9f2 	bl	800f588 <rcl_client_is_valid>
 80111a4:	b338      	cbz	r0, 80111f6 <rcl_action_take_cancel_response+0x66>
 80111a6:	6820      	ldr	r0, [r4, #0]
 80111a8:	3004      	adds	r0, #4
 80111aa:	f7fe f9ed 	bl	800f588 <rcl_client_is_valid>
 80111ae:	b310      	cbz	r0, 80111f6 <rcl_action_take_cancel_response+0x66>
 80111b0:	6820      	ldr	r0, [r4, #0]
 80111b2:	3008      	adds	r0, #8
 80111b4:	f7fe f9e8 	bl	800f588 <rcl_client_is_valid>
 80111b8:	b1e8      	cbz	r0, 80111f6 <rcl_action_take_cancel_response+0x66>
 80111ba:	6820      	ldr	r0, [r4, #0]
 80111bc:	300c      	adds	r0, #12
 80111be:	f7f8 fd83 	bl	8009cc8 <rcl_subscription_is_valid>
 80111c2:	b1c0      	cbz	r0, 80111f6 <rcl_action_take_cancel_response+0x66>
 80111c4:	6820      	ldr	r0, [r4, #0]
 80111c6:	3010      	adds	r0, #16
 80111c8:	f7f8 fd7e 	bl	8009cc8 <rcl_subscription_is_valid>
 80111cc:	b198      	cbz	r0, 80111f6 <rcl_action_take_cancel_response+0x66>
 80111ce:	b1d5      	cbz	r5, 8011206 <rcl_action_take_cancel_response+0x76>
 80111d0:	b1ce      	cbz	r6, 8011206 <rcl_action_take_cancel_response+0x76>
 80111d2:	6820      	ldr	r0, [r4, #0]
 80111d4:	4632      	mov	r2, r6
 80111d6:	4629      	mov	r1, r5
 80111d8:	3004      	adds	r0, #4
 80111da:	f7fe f98d 	bl	800f4f8 <rcl_take_response>
 80111de:	b148      	cbz	r0, 80111f4 <rcl_action_take_cancel_response+0x64>
 80111e0:	280a      	cmp	r0, #10
 80111e2:	d007      	beq.n	80111f4 <rcl_action_take_cancel_response+0x64>
 80111e4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80111e8:	f640 0337 	movw	r3, #2103	@ 0x837
 80111ec:	4290      	cmp	r0, r2
 80111ee:	bf0c      	ite	eq
 80111f0:	4618      	moveq	r0, r3
 80111f2:	2001      	movne	r0, #1
 80111f4:	bd70      	pop	{r4, r5, r6, pc}
 80111f6:	f7f9 fcff 	bl	800abf8 <rcutils_reset_error>
 80111fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	f640 0036 	movw	r0, #2102	@ 0x836
 8011204:	bd70      	pop	{r4, r5, r6, pc}
 8011206:	200b      	movs	r0, #11
 8011208:	bd70      	pop	{r4, r5, r6, pc}
 801120a:	f640 0036 	movw	r0, #2102	@ 0x836
 801120e:	4770      	bx	lr

08011210 <rcl_action_take_feedback>:
 8011210:	2800      	cmp	r0, #0
 8011212:	d038      	beq.n	8011286 <rcl_action_take_feedback+0x76>
 8011214:	b530      	push	{r4, r5, lr}
 8011216:	4604      	mov	r4, r0
 8011218:	6800      	ldr	r0, [r0, #0]
 801121a:	b091      	sub	sp, #68	@ 0x44
 801121c:	b378      	cbz	r0, 801127e <rcl_action_take_feedback+0x6e>
 801121e:	460d      	mov	r5, r1
 8011220:	f7fe f9b2 	bl	800f588 <rcl_client_is_valid>
 8011224:	b328      	cbz	r0, 8011272 <rcl_action_take_feedback+0x62>
 8011226:	6820      	ldr	r0, [r4, #0]
 8011228:	3004      	adds	r0, #4
 801122a:	f7fe f9ad 	bl	800f588 <rcl_client_is_valid>
 801122e:	b300      	cbz	r0, 8011272 <rcl_action_take_feedback+0x62>
 8011230:	6820      	ldr	r0, [r4, #0]
 8011232:	3008      	adds	r0, #8
 8011234:	f7fe f9a8 	bl	800f588 <rcl_client_is_valid>
 8011238:	b1d8      	cbz	r0, 8011272 <rcl_action_take_feedback+0x62>
 801123a:	6820      	ldr	r0, [r4, #0]
 801123c:	300c      	adds	r0, #12
 801123e:	f7f8 fd43 	bl	8009cc8 <rcl_subscription_is_valid>
 8011242:	b1b0      	cbz	r0, 8011272 <rcl_action_take_feedback+0x62>
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	3010      	adds	r0, #16
 8011248:	f7f8 fd3e 	bl	8009cc8 <rcl_subscription_is_valid>
 801124c:	b188      	cbz	r0, 8011272 <rcl_action_take_feedback+0x62>
 801124e:	b1ed      	cbz	r5, 801128c <rcl_action_take_feedback+0x7c>
 8011250:	6820      	ldr	r0, [r4, #0]
 8011252:	2300      	movs	r3, #0
 8011254:	466a      	mov	r2, sp
 8011256:	4629      	mov	r1, r5
 8011258:	300c      	adds	r0, #12
 801125a:	f7f8 fcd7 	bl	8009c0c <rcl_take>
 801125e:	b160      	cbz	r0, 801127a <rcl_action_take_feedback+0x6a>
 8011260:	f240 1391 	movw	r3, #401	@ 0x191
 8011264:	4298      	cmp	r0, r3
 8011266:	d014      	beq.n	8011292 <rcl_action_take_feedback+0x82>
 8011268:	280a      	cmp	r0, #10
 801126a:	bf18      	it	ne
 801126c:	2001      	movne	r0, #1
 801126e:	b011      	add	sp, #68	@ 0x44
 8011270:	bd30      	pop	{r4, r5, pc}
 8011272:	f7f9 fcc1 	bl	800abf8 <rcutils_reset_error>
 8011276:	f640 0036 	movw	r0, #2102	@ 0x836
 801127a:	b011      	add	sp, #68	@ 0x44
 801127c:	bd30      	pop	{r4, r5, pc}
 801127e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011282:	b011      	add	sp, #68	@ 0x44
 8011284:	bd30      	pop	{r4, r5, pc}
 8011286:	f640 0036 	movw	r0, #2102	@ 0x836
 801128a:	4770      	bx	lr
 801128c:	200b      	movs	r0, #11
 801128e:	b011      	add	sp, #68	@ 0x44
 8011290:	bd30      	pop	{r4, r5, pc}
 8011292:	f640 0037 	movw	r0, #2103	@ 0x837
 8011296:	e7f0      	b.n	801127a <rcl_action_take_feedback+0x6a>

08011298 <rcl_action_wait_set_add_action_client>:
 8011298:	2800      	cmp	r0, #0
 801129a:	d048      	beq.n	801132e <rcl_action_wait_set_add_action_client+0x96>
 801129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801129e:	460c      	mov	r4, r1
 80112a0:	2900      	cmp	r1, #0
 80112a2:	d03c      	beq.n	801131e <rcl_action_wait_set_add_action_client+0x86>
 80112a4:	4605      	mov	r5, r0
 80112a6:	6808      	ldr	r0, [r1, #0]
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d038      	beq.n	801131e <rcl_action_wait_set_add_action_client+0x86>
 80112ac:	4617      	mov	r7, r2
 80112ae:	461e      	mov	r6, r3
 80112b0:	f7fe f96a 	bl	800f588 <rcl_client_is_valid>
 80112b4:	b3b0      	cbz	r0, 8011324 <rcl_action_wait_set_add_action_client+0x8c>
 80112b6:	6820      	ldr	r0, [r4, #0]
 80112b8:	3004      	adds	r0, #4
 80112ba:	f7fe f965 	bl	800f588 <rcl_client_is_valid>
 80112be:	b388      	cbz	r0, 8011324 <rcl_action_wait_set_add_action_client+0x8c>
 80112c0:	6820      	ldr	r0, [r4, #0]
 80112c2:	3008      	adds	r0, #8
 80112c4:	f7fe f960 	bl	800f588 <rcl_client_is_valid>
 80112c8:	b360      	cbz	r0, 8011324 <rcl_action_wait_set_add_action_client+0x8c>
 80112ca:	6820      	ldr	r0, [r4, #0]
 80112cc:	300c      	adds	r0, #12
 80112ce:	f7f8 fcfb 	bl	8009cc8 <rcl_subscription_is_valid>
 80112d2:	b338      	cbz	r0, 8011324 <rcl_action_wait_set_add_action_client+0x8c>
 80112d4:	6820      	ldr	r0, [r4, #0]
 80112d6:	3010      	adds	r0, #16
 80112d8:	f7f8 fcf6 	bl	8009cc8 <rcl_subscription_is_valid>
 80112dc:	b310      	cbz	r0, 8011324 <rcl_action_wait_set_add_action_client+0x8c>
 80112de:	6821      	ldr	r1, [r4, #0]
 80112e0:	4628      	mov	r0, r5
 80112e2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80112e6:	f7ff fccf 	bl	8010c88 <rcl_wait_set_add_client>
 80112ea:	b9b8      	cbnz	r0, 801131c <rcl_action_wait_set_add_action_client+0x84>
 80112ec:	6821      	ldr	r1, [r4, #0]
 80112ee:	4628      	mov	r0, r5
 80112f0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80112f4:	3104      	adds	r1, #4
 80112f6:	f7ff fcc7 	bl	8010c88 <rcl_wait_set_add_client>
 80112fa:	b978      	cbnz	r0, 801131c <rcl_action_wait_set_add_action_client+0x84>
 80112fc:	6821      	ldr	r1, [r4, #0]
 80112fe:	4628      	mov	r0, r5
 8011300:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8011304:	3108      	adds	r1, #8
 8011306:	f7ff fcbf 	bl	8010c88 <rcl_wait_set_add_client>
 801130a:	b938      	cbnz	r0, 801131c <rcl_action_wait_set_add_action_client+0x84>
 801130c:	6821      	ldr	r1, [r4, #0]
 801130e:	4628      	mov	r0, r5
 8011310:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8011314:	310c      	adds	r1, #12
 8011316:	f7ff f96f 	bl	80105f8 <rcl_wait_set_add_subscription>
 801131a:	b158      	cbz	r0, 8011334 <rcl_action_wait_set_add_action_client+0x9c>
 801131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801131e:	f640 0036 	movw	r0, #2102	@ 0x836
 8011322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011324:	f7f9 fc68 	bl	800abf8 <rcutils_reset_error>
 8011328:	f640 0036 	movw	r0, #2102	@ 0x836
 801132c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801132e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011332:	4770      	bx	lr
 8011334:	6821      	ldr	r1, [r4, #0]
 8011336:	4628      	mov	r0, r5
 8011338:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801133c:	3110      	adds	r1, #16
 801133e:	f7ff f95b 	bl	80105f8 <rcl_wait_set_add_subscription>
 8011342:	2800      	cmp	r0, #0
 8011344:	d1ea      	bne.n	801131c <rcl_action_wait_set_add_action_client+0x84>
 8011346:	b11f      	cbz	r7, 8011350 <rcl_action_wait_set_add_action_client+0xb8>
 8011348:	6823      	ldr	r3, [r4, #0]
 801134a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801134e:	603b      	str	r3, [r7, #0]
 8011350:	2e00      	cmp	r6, #0
 8011352:	d0e3      	beq.n	801131c <rcl_action_wait_set_add_action_client+0x84>
 8011354:	6823      	ldr	r3, [r4, #0]
 8011356:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801135a:	6033      	str	r3, [r6, #0]
 801135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801135e:	bf00      	nop

08011360 <rcl_action_client_wait_set_get_entities_ready>:
 8011360:	2800      	cmp	r0, #0
 8011362:	f000 808d 	beq.w	8011480 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8011366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801136a:	460c      	mov	r4, r1
 801136c:	2900      	cmp	r1, #0
 801136e:	d077      	beq.n	8011460 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011370:	4605      	mov	r5, r0
 8011372:	6808      	ldr	r0, [r1, #0]
 8011374:	2800      	cmp	r0, #0
 8011376:	d073      	beq.n	8011460 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8011378:	4616      	mov	r6, r2
 801137a:	461f      	mov	r7, r3
 801137c:	f7fe f904 	bl	800f588 <rcl_client_is_valid>
 8011380:	2800      	cmp	r0, #0
 8011382:	d071      	beq.n	8011468 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011384:	6820      	ldr	r0, [r4, #0]
 8011386:	3004      	adds	r0, #4
 8011388:	f7fe f8fe 	bl	800f588 <rcl_client_is_valid>
 801138c:	2800      	cmp	r0, #0
 801138e:	d06b      	beq.n	8011468 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8011390:	6820      	ldr	r0, [r4, #0]
 8011392:	3008      	adds	r0, #8
 8011394:	f7fe f8f8 	bl	800f588 <rcl_client_is_valid>
 8011398:	2800      	cmp	r0, #0
 801139a:	d065      	beq.n	8011468 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801139c:	6820      	ldr	r0, [r4, #0]
 801139e:	300c      	adds	r0, #12
 80113a0:	f7f8 fc92 	bl	8009cc8 <rcl_subscription_is_valid>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d05f      	beq.n	8011468 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80113a8:	6820      	ldr	r0, [r4, #0]
 80113aa:	3010      	adds	r0, #16
 80113ac:	f7f8 fc8c 	bl	8009cc8 <rcl_subscription_is_valid>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d059      	beq.n	8011468 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80113b4:	2e00      	cmp	r6, #0
 80113b6:	d060      	beq.n	801147a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80113b8:	2f00      	cmp	r7, #0
 80113ba:	d05e      	beq.n	801147a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80113bc:	9b06      	ldr	r3, [sp, #24]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d05b      	beq.n	801147a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80113c2:	9b07      	ldr	r3, [sp, #28]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d058      	beq.n	801147a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80113c8:	9b08      	ldr	r3, [sp, #32]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d055      	beq.n	801147a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	686a      	ldr	r2, [r5, #4]
 80113d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80113d6:	428a      	cmp	r2, r1
 80113d8:	d94c      	bls.n	8011474 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80113da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80113de:	4282      	cmp	r2, r0
 80113e0:	d948      	bls.n	8011474 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80113e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80113e6:	69ea      	ldr	r2, [r5, #28]
 80113e8:	42a2      	cmp	r2, r4
 80113ea:	d943      	bls.n	8011474 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80113ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80113f0:	4562      	cmp	r2, ip
 80113f2:	d93f      	bls.n	8011474 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80113f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80113f8:	4572      	cmp	r2, lr
 80113fa:	d93b      	bls.n	8011474 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80113fc:	69aa      	ldr	r2, [r5, #24]
 80113fe:	682d      	ldr	r5, [r5, #0]
 8011400:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8011404:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8011408:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801140c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8011410:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8011414:	f103 0c0c 	add.w	ip, r3, #12
 8011418:	eba5 050c 	sub.w	r5, r5, ip
 801141c:	fab5 f585 	clz	r5, r5
 8011420:	096d      	lsrs	r5, r5, #5
 8011422:	7035      	strb	r5, [r6, #0]
 8011424:	f103 0510 	add.w	r5, r3, #16
 8011428:	1b64      	subs	r4, r4, r5
 801142a:	fab4 f484 	clz	r4, r4
 801142e:	0964      	lsrs	r4, r4, #5
 8011430:	703c      	strb	r4, [r7, #0]
 8011432:	eba3 0008 	sub.w	r0, r3, r8
 8011436:	1d1c      	adds	r4, r3, #4
 8011438:	3308      	adds	r3, #8
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	fab0 f080 	clz	r0, r0
 8011440:	9a06      	ldr	r2, [sp, #24]
 8011442:	0940      	lsrs	r0, r0, #5
 8011444:	1b09      	subs	r1, r1, r4
 8011446:	7010      	strb	r0, [r2, #0]
 8011448:	fab1 f181 	clz	r1, r1
 801144c:	9a07      	ldr	r2, [sp, #28]
 801144e:	0949      	lsrs	r1, r1, #5
 8011450:	7011      	strb	r1, [r2, #0]
 8011452:	fab3 f383 	clz	r3, r3
 8011456:	9a08      	ldr	r2, [sp, #32]
 8011458:	095b      	lsrs	r3, r3, #5
 801145a:	2000      	movs	r0, #0
 801145c:	7013      	strb	r3, [r2, #0]
 801145e:	e001      	b.n	8011464 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8011460:	f640 0036 	movw	r0, #2102	@ 0x836
 8011464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011468:	f7f9 fbc6 	bl	800abf8 <rcutils_reset_error>
 801146c:	f640 0036 	movw	r0, #2102	@ 0x836
 8011470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011474:	2001      	movs	r0, #1
 8011476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801147a:	200b      	movs	r0, #11
 801147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011480:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop

08011488 <rcl_action_take_goal_request>:
 8011488:	2800      	cmp	r0, #0
 801148a:	d039      	beq.n	8011500 <rcl_action_take_goal_request+0x78>
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	4604      	mov	r4, r0
 8011490:	6800      	ldr	r0, [r0, #0]
 8011492:	b380      	cbz	r0, 80114f6 <rcl_action_take_goal_request+0x6e>
 8011494:	460d      	mov	r5, r1
 8011496:	4616      	mov	r6, r2
 8011498:	f7fe fddc 	bl	8010054 <rcl_service_is_valid>
 801149c:	b330      	cbz	r0, 80114ec <rcl_action_take_goal_request+0x64>
 801149e:	6820      	ldr	r0, [r4, #0]
 80114a0:	3004      	adds	r0, #4
 80114a2:	f7fe fdd7 	bl	8010054 <rcl_service_is_valid>
 80114a6:	b308      	cbz	r0, 80114ec <rcl_action_take_goal_request+0x64>
 80114a8:	6820      	ldr	r0, [r4, #0]
 80114aa:	3008      	adds	r0, #8
 80114ac:	f7fe fdd2 	bl	8010054 <rcl_service_is_valid>
 80114b0:	b1e0      	cbz	r0, 80114ec <rcl_action_take_goal_request+0x64>
 80114b2:	6820      	ldr	r0, [r4, #0]
 80114b4:	300c      	adds	r0, #12
 80114b6:	f7f8 fa57 	bl	8009968 <rcl_publisher_is_valid>
 80114ba:	b1b8      	cbz	r0, 80114ec <rcl_action_take_goal_request+0x64>
 80114bc:	6820      	ldr	r0, [r4, #0]
 80114be:	3010      	adds	r0, #16
 80114c0:	f7f8 fa52 	bl	8009968 <rcl_publisher_is_valid>
 80114c4:	b190      	cbz	r0, 80114ec <rcl_action_take_goal_request+0x64>
 80114c6:	b1cd      	cbz	r5, 80114fc <rcl_action_take_goal_request+0x74>
 80114c8:	b1c6      	cbz	r6, 80114fc <rcl_action_take_goal_request+0x74>
 80114ca:	6820      	ldr	r0, [r4, #0]
 80114cc:	4632      	mov	r2, r6
 80114ce:	4629      	mov	r1, r5
 80114d0:	f7fe fd68 	bl	800ffa4 <rcl_take_request>
 80114d4:	b148      	cbz	r0, 80114ea <rcl_action_take_goal_request+0x62>
 80114d6:	280a      	cmp	r0, #10
 80114d8:	d007      	beq.n	80114ea <rcl_action_take_goal_request+0x62>
 80114da:	f240 2259 	movw	r2, #601	@ 0x259
 80114de:	f640 0399 	movw	r3, #2201	@ 0x899
 80114e2:	4290      	cmp	r0, r2
 80114e4:	bf0c      	ite	eq
 80114e6:	4618      	moveq	r0, r3
 80114e8:	2001      	movne	r0, #1
 80114ea:	bd70      	pop	{r4, r5, r6, pc}
 80114ec:	f7f9 fb84 	bl	800abf8 <rcutils_reset_error>
 80114f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
 80114f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	200b      	movs	r0, #11
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	f640 0098 	movw	r0, #2200	@ 0x898
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop

08011508 <rcl_action_send_goal_response>:
 8011508:	b390      	cbz	r0, 8011570 <rcl_action_send_goal_response+0x68>
 801150a:	b570      	push	{r4, r5, r6, lr}
 801150c:	4604      	mov	r4, r0
 801150e:	6800      	ldr	r0, [r0, #0]
 8011510:	b348      	cbz	r0, 8011566 <rcl_action_send_goal_response+0x5e>
 8011512:	460d      	mov	r5, r1
 8011514:	4616      	mov	r6, r2
 8011516:	f7fe fd9d 	bl	8010054 <rcl_service_is_valid>
 801151a:	b1f8      	cbz	r0, 801155c <rcl_action_send_goal_response+0x54>
 801151c:	6820      	ldr	r0, [r4, #0]
 801151e:	3004      	adds	r0, #4
 8011520:	f7fe fd98 	bl	8010054 <rcl_service_is_valid>
 8011524:	b1d0      	cbz	r0, 801155c <rcl_action_send_goal_response+0x54>
 8011526:	6820      	ldr	r0, [r4, #0]
 8011528:	3008      	adds	r0, #8
 801152a:	f7fe fd93 	bl	8010054 <rcl_service_is_valid>
 801152e:	b1a8      	cbz	r0, 801155c <rcl_action_send_goal_response+0x54>
 8011530:	6820      	ldr	r0, [r4, #0]
 8011532:	300c      	adds	r0, #12
 8011534:	f7f8 fa18 	bl	8009968 <rcl_publisher_is_valid>
 8011538:	b180      	cbz	r0, 801155c <rcl_action_send_goal_response+0x54>
 801153a:	6820      	ldr	r0, [r4, #0]
 801153c:	3010      	adds	r0, #16
 801153e:	f7f8 fa13 	bl	8009968 <rcl_publisher_is_valid>
 8011542:	b158      	cbz	r0, 801155c <rcl_action_send_goal_response+0x54>
 8011544:	b195      	cbz	r5, 801156c <rcl_action_send_goal_response+0x64>
 8011546:	b18e      	cbz	r6, 801156c <rcl_action_send_goal_response+0x64>
 8011548:	6820      	ldr	r0, [r4, #0]
 801154a:	4632      	mov	r2, r6
 801154c:	4629      	mov	r1, r5
 801154e:	f7fe fd69 	bl	8010024 <rcl_send_response>
 8011552:	b110      	cbz	r0, 801155a <rcl_action_send_goal_response+0x52>
 8011554:	2802      	cmp	r0, #2
 8011556:	bf18      	it	ne
 8011558:	2001      	movne	r0, #1
 801155a:	bd70      	pop	{r4, r5, r6, pc}
 801155c:	f7f9 fb4c 	bl	800abf8 <rcutils_reset_error>
 8011560:	f640 0098 	movw	r0, #2200	@ 0x898
 8011564:	bd70      	pop	{r4, r5, r6, pc}
 8011566:	f640 0098 	movw	r0, #2200	@ 0x898
 801156a:	bd70      	pop	{r4, r5, r6, pc}
 801156c:	200b      	movs	r0, #11
 801156e:	bd70      	pop	{r4, r5, r6, pc}
 8011570:	f640 0098 	movw	r0, #2200	@ 0x898
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop

08011578 <rcl_action_take_result_request>:
 8011578:	2800      	cmp	r0, #0
 801157a:	d03a      	beq.n	80115f2 <rcl_action_take_result_request+0x7a>
 801157c:	b570      	push	{r4, r5, r6, lr}
 801157e:	4604      	mov	r4, r0
 8011580:	6800      	ldr	r0, [r0, #0]
 8011582:	b388      	cbz	r0, 80115e8 <rcl_action_take_result_request+0x70>
 8011584:	460d      	mov	r5, r1
 8011586:	4616      	mov	r6, r2
 8011588:	f7fe fd64 	bl	8010054 <rcl_service_is_valid>
 801158c:	b338      	cbz	r0, 80115de <rcl_action_take_result_request+0x66>
 801158e:	6820      	ldr	r0, [r4, #0]
 8011590:	3004      	adds	r0, #4
 8011592:	f7fe fd5f 	bl	8010054 <rcl_service_is_valid>
 8011596:	b310      	cbz	r0, 80115de <rcl_action_take_result_request+0x66>
 8011598:	6820      	ldr	r0, [r4, #0]
 801159a:	3008      	adds	r0, #8
 801159c:	f7fe fd5a 	bl	8010054 <rcl_service_is_valid>
 80115a0:	b1e8      	cbz	r0, 80115de <rcl_action_take_result_request+0x66>
 80115a2:	6820      	ldr	r0, [r4, #0]
 80115a4:	300c      	adds	r0, #12
 80115a6:	f7f8 f9df 	bl	8009968 <rcl_publisher_is_valid>
 80115aa:	b1c0      	cbz	r0, 80115de <rcl_action_take_result_request+0x66>
 80115ac:	6820      	ldr	r0, [r4, #0]
 80115ae:	3010      	adds	r0, #16
 80115b0:	f7f8 f9da 	bl	8009968 <rcl_publisher_is_valid>
 80115b4:	b198      	cbz	r0, 80115de <rcl_action_take_result_request+0x66>
 80115b6:	b1d5      	cbz	r5, 80115ee <rcl_action_take_result_request+0x76>
 80115b8:	b1ce      	cbz	r6, 80115ee <rcl_action_take_result_request+0x76>
 80115ba:	6820      	ldr	r0, [r4, #0]
 80115bc:	4632      	mov	r2, r6
 80115be:	4629      	mov	r1, r5
 80115c0:	3008      	adds	r0, #8
 80115c2:	f7fe fcef 	bl	800ffa4 <rcl_take_request>
 80115c6:	b148      	cbz	r0, 80115dc <rcl_action_take_result_request+0x64>
 80115c8:	280a      	cmp	r0, #10
 80115ca:	d007      	beq.n	80115dc <rcl_action_take_result_request+0x64>
 80115cc:	f240 2259 	movw	r2, #601	@ 0x259
 80115d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80115d4:	4290      	cmp	r0, r2
 80115d6:	bf0c      	ite	eq
 80115d8:	4618      	moveq	r0, r3
 80115da:	2001      	movne	r0, #1
 80115dc:	bd70      	pop	{r4, r5, r6, pc}
 80115de:	f7f9 fb0b 	bl	800abf8 <rcutils_reset_error>
 80115e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80115e6:	bd70      	pop	{r4, r5, r6, pc}
 80115e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80115ec:	bd70      	pop	{r4, r5, r6, pc}
 80115ee:	200b      	movs	r0, #11
 80115f0:	bd70      	pop	{r4, r5, r6, pc}
 80115f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80115f6:	4770      	bx	lr

080115f8 <rcl_action_take_cancel_request>:
 80115f8:	2800      	cmp	r0, #0
 80115fa:	d03a      	beq.n	8011672 <rcl_action_take_cancel_request+0x7a>
 80115fc:	b570      	push	{r4, r5, r6, lr}
 80115fe:	4604      	mov	r4, r0
 8011600:	6800      	ldr	r0, [r0, #0]
 8011602:	b388      	cbz	r0, 8011668 <rcl_action_take_cancel_request+0x70>
 8011604:	460d      	mov	r5, r1
 8011606:	4616      	mov	r6, r2
 8011608:	f7fe fd24 	bl	8010054 <rcl_service_is_valid>
 801160c:	b338      	cbz	r0, 801165e <rcl_action_take_cancel_request+0x66>
 801160e:	6820      	ldr	r0, [r4, #0]
 8011610:	3004      	adds	r0, #4
 8011612:	f7fe fd1f 	bl	8010054 <rcl_service_is_valid>
 8011616:	b310      	cbz	r0, 801165e <rcl_action_take_cancel_request+0x66>
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	3008      	adds	r0, #8
 801161c:	f7fe fd1a 	bl	8010054 <rcl_service_is_valid>
 8011620:	b1e8      	cbz	r0, 801165e <rcl_action_take_cancel_request+0x66>
 8011622:	6820      	ldr	r0, [r4, #0]
 8011624:	300c      	adds	r0, #12
 8011626:	f7f8 f99f 	bl	8009968 <rcl_publisher_is_valid>
 801162a:	b1c0      	cbz	r0, 801165e <rcl_action_take_cancel_request+0x66>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	3010      	adds	r0, #16
 8011630:	f7f8 f99a 	bl	8009968 <rcl_publisher_is_valid>
 8011634:	b198      	cbz	r0, 801165e <rcl_action_take_cancel_request+0x66>
 8011636:	b1d5      	cbz	r5, 801166e <rcl_action_take_cancel_request+0x76>
 8011638:	b1ce      	cbz	r6, 801166e <rcl_action_take_cancel_request+0x76>
 801163a:	6820      	ldr	r0, [r4, #0]
 801163c:	4632      	mov	r2, r6
 801163e:	4629      	mov	r1, r5
 8011640:	3004      	adds	r0, #4
 8011642:	f7fe fcaf 	bl	800ffa4 <rcl_take_request>
 8011646:	b148      	cbz	r0, 801165c <rcl_action_take_cancel_request+0x64>
 8011648:	280a      	cmp	r0, #10
 801164a:	d007      	beq.n	801165c <rcl_action_take_cancel_request+0x64>
 801164c:	f240 2259 	movw	r2, #601	@ 0x259
 8011650:	f640 0399 	movw	r3, #2201	@ 0x899
 8011654:	4290      	cmp	r0, r2
 8011656:	bf0c      	ite	eq
 8011658:	4618      	moveq	r0, r3
 801165a:	2001      	movne	r0, #1
 801165c:	bd70      	pop	{r4, r5, r6, pc}
 801165e:	f7f9 facb 	bl	800abf8 <rcutils_reset_error>
 8011662:	f640 0098 	movw	r0, #2200	@ 0x898
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	f640 0098 	movw	r0, #2200	@ 0x898
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	200b      	movs	r0, #11
 8011670:	bd70      	pop	{r4, r5, r6, pc}
 8011672:	f640 0098 	movw	r0, #2200	@ 0x898
 8011676:	4770      	bx	lr

08011678 <rcl_action_send_cancel_response>:
 8011678:	b398      	cbz	r0, 80116e2 <rcl_action_send_cancel_response+0x6a>
 801167a:	b570      	push	{r4, r5, r6, lr}
 801167c:	4604      	mov	r4, r0
 801167e:	6800      	ldr	r0, [r0, #0]
 8011680:	b350      	cbz	r0, 80116d8 <rcl_action_send_cancel_response+0x60>
 8011682:	460d      	mov	r5, r1
 8011684:	4616      	mov	r6, r2
 8011686:	f7fe fce5 	bl	8010054 <rcl_service_is_valid>
 801168a:	b300      	cbz	r0, 80116ce <rcl_action_send_cancel_response+0x56>
 801168c:	6820      	ldr	r0, [r4, #0]
 801168e:	3004      	adds	r0, #4
 8011690:	f7fe fce0 	bl	8010054 <rcl_service_is_valid>
 8011694:	b1d8      	cbz	r0, 80116ce <rcl_action_send_cancel_response+0x56>
 8011696:	6820      	ldr	r0, [r4, #0]
 8011698:	3008      	adds	r0, #8
 801169a:	f7fe fcdb 	bl	8010054 <rcl_service_is_valid>
 801169e:	b1b0      	cbz	r0, 80116ce <rcl_action_send_cancel_response+0x56>
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	300c      	adds	r0, #12
 80116a4:	f7f8 f960 	bl	8009968 <rcl_publisher_is_valid>
 80116a8:	b188      	cbz	r0, 80116ce <rcl_action_send_cancel_response+0x56>
 80116aa:	6820      	ldr	r0, [r4, #0]
 80116ac:	3010      	adds	r0, #16
 80116ae:	f7f8 f95b 	bl	8009968 <rcl_publisher_is_valid>
 80116b2:	b160      	cbz	r0, 80116ce <rcl_action_send_cancel_response+0x56>
 80116b4:	b19d      	cbz	r5, 80116de <rcl_action_send_cancel_response+0x66>
 80116b6:	b196      	cbz	r6, 80116de <rcl_action_send_cancel_response+0x66>
 80116b8:	6820      	ldr	r0, [r4, #0]
 80116ba:	4632      	mov	r2, r6
 80116bc:	4629      	mov	r1, r5
 80116be:	3004      	adds	r0, #4
 80116c0:	f7fe fcb0 	bl	8010024 <rcl_send_response>
 80116c4:	b110      	cbz	r0, 80116cc <rcl_action_send_cancel_response+0x54>
 80116c6:	2802      	cmp	r0, #2
 80116c8:	bf18      	it	ne
 80116ca:	2001      	movne	r0, #1
 80116cc:	bd70      	pop	{r4, r5, r6, pc}
 80116ce:	f7f9 fa93 	bl	800abf8 <rcutils_reset_error>
 80116d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	200b      	movs	r0, #11
 80116e0:	bd70      	pop	{r4, r5, r6, pc}
 80116e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80116e6:	4770      	bx	lr

080116e8 <rcl_action_wait_set_add_action_server>:
 80116e8:	2800      	cmp	r0, #0
 80116ea:	d04d      	beq.n	8011788 <rcl_action_wait_set_add_action_server+0xa0>
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	460c      	mov	r4, r1
 80116f0:	b159      	cbz	r1, 801170a <rcl_action_wait_set_add_action_server+0x22>
 80116f2:	4605      	mov	r5, r0
 80116f4:	6808      	ldr	r0, [r1, #0]
 80116f6:	b140      	cbz	r0, 801170a <rcl_action_wait_set_add_action_server+0x22>
 80116f8:	4616      	mov	r6, r2
 80116fa:	f7fe fcab 	bl	8010054 <rcl_service_is_valid>
 80116fe:	b120      	cbz	r0, 801170a <rcl_action_wait_set_add_action_server+0x22>
 8011700:	6820      	ldr	r0, [r4, #0]
 8011702:	3004      	adds	r0, #4
 8011704:	f7fe fca6 	bl	8010054 <rcl_service_is_valid>
 8011708:	b910      	cbnz	r0, 8011710 <rcl_action_wait_set_add_action_server+0x28>
 801170a:	f640 0098 	movw	r0, #2200	@ 0x898
 801170e:	bd70      	pop	{r4, r5, r6, pc}
 8011710:	6820      	ldr	r0, [r4, #0]
 8011712:	3008      	adds	r0, #8
 8011714:	f7fe fc9e 	bl	8010054 <rcl_service_is_valid>
 8011718:	2800      	cmp	r0, #0
 801171a:	d0f6      	beq.n	801170a <rcl_action_wait_set_add_action_server+0x22>
 801171c:	6820      	ldr	r0, [r4, #0]
 801171e:	300c      	adds	r0, #12
 8011720:	f7f8 f93a 	bl	8009998 <rcl_publisher_is_valid_except_context>
 8011724:	2800      	cmp	r0, #0
 8011726:	d0f0      	beq.n	801170a <rcl_action_wait_set_add_action_server+0x22>
 8011728:	6820      	ldr	r0, [r4, #0]
 801172a:	3010      	adds	r0, #16
 801172c:	f7f8 f934 	bl	8009998 <rcl_publisher_is_valid_except_context>
 8011730:	2800      	cmp	r0, #0
 8011732:	d0ea      	beq.n	801170a <rcl_action_wait_set_add_action_server+0x22>
 8011734:	6821      	ldr	r1, [r4, #0]
 8011736:	4628      	mov	r0, r5
 8011738:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801173c:	f7ff fad0 	bl	8010ce0 <rcl_wait_set_add_service>
 8011740:	2800      	cmp	r0, #0
 8011742:	d1e4      	bne.n	801170e <rcl_action_wait_set_add_action_server+0x26>
 8011744:	6821      	ldr	r1, [r4, #0]
 8011746:	4628      	mov	r0, r5
 8011748:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801174c:	3104      	adds	r1, #4
 801174e:	f7ff fac7 	bl	8010ce0 <rcl_wait_set_add_service>
 8011752:	2800      	cmp	r0, #0
 8011754:	d1db      	bne.n	801170e <rcl_action_wait_set_add_action_server+0x26>
 8011756:	6821      	ldr	r1, [r4, #0]
 8011758:	4628      	mov	r0, r5
 801175a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801175e:	3108      	adds	r1, #8
 8011760:	f7ff fabe 	bl	8010ce0 <rcl_wait_set_add_service>
 8011764:	2800      	cmp	r0, #0
 8011766:	d1d2      	bne.n	801170e <rcl_action_wait_set_add_action_server+0x26>
 8011768:	6821      	ldr	r1, [r4, #0]
 801176a:	4628      	mov	r0, r5
 801176c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8011770:	3114      	adds	r1, #20
 8011772:	f7ff fa59 	bl	8010c28 <rcl_wait_set_add_timer>
 8011776:	2800      	cmp	r0, #0
 8011778:	d1c9      	bne.n	801170e <rcl_action_wait_set_add_action_server+0x26>
 801177a:	2e00      	cmp	r6, #0
 801177c:	d0c7      	beq.n	801170e <rcl_action_wait_set_add_action_server+0x26>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8011784:	6033      	str	r3, [r6, #0]
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop

08011790 <rcl_action_server_wait_set_get_entities_ready>:
 8011790:	2800      	cmp	r0, #0
 8011792:	d05a      	beq.n	801184a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8011794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011796:	460c      	mov	r4, r1
 8011798:	b161      	cbz	r1, 80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801179a:	4605      	mov	r5, r0
 801179c:	6808      	ldr	r0, [r1, #0]
 801179e:	b148      	cbz	r0, 80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80117a0:	4616      	mov	r6, r2
 80117a2:	461f      	mov	r7, r3
 80117a4:	f7fe fc56 	bl	8010054 <rcl_service_is_valid>
 80117a8:	b120      	cbz	r0, 80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80117aa:	6820      	ldr	r0, [r4, #0]
 80117ac:	3004      	adds	r0, #4
 80117ae:	f7fe fc51 	bl	8010054 <rcl_service_is_valid>
 80117b2:	b910      	cbnz	r0, 80117ba <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80117b4:	f640 0098 	movw	r0, #2200	@ 0x898
 80117b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ba:	6820      	ldr	r0, [r4, #0]
 80117bc:	3008      	adds	r0, #8
 80117be:	f7fe fc49 	bl	8010054 <rcl_service_is_valid>
 80117c2:	2800      	cmp	r0, #0
 80117c4:	d0f6      	beq.n	80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80117c6:	6820      	ldr	r0, [r4, #0]
 80117c8:	300c      	adds	r0, #12
 80117ca:	f7f8 f8e5 	bl	8009998 <rcl_publisher_is_valid_except_context>
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d0f0      	beq.n	80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80117d2:	6820      	ldr	r0, [r4, #0]
 80117d4:	3010      	adds	r0, #16
 80117d6:	f7f8 f8df 	bl	8009998 <rcl_publisher_is_valid_except_context>
 80117da:	2800      	cmp	r0, #0
 80117dc:	d0ea      	beq.n	80117b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80117de:	b3be      	cbz	r6, 8011850 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80117e0:	b3b7      	cbz	r7, 8011850 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80117e2:	9b06      	ldr	r3, [sp, #24]
 80117e4:	b3a3      	cbz	r3, 8011850 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80117e6:	9b07      	ldr	r3, [sp, #28]
 80117e8:	b393      	cbz	r3, 8011850 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80117ea:	6821      	ldr	r1, [r4, #0]
 80117ec:	692a      	ldr	r2, [r5, #16]
 80117ee:	6a2c      	ldr	r4, [r5, #32]
 80117f0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80117f4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80117f8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80117fc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8011800:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8011804:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8011808:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801180c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8011810:	1a64      	subs	r4, r4, r1
 8011812:	fab4 f484 	clz	r4, r4
 8011816:	0964      	lsrs	r4, r4, #5
 8011818:	7034      	strb	r4, [r6, #0]
 801181a:	1d0c      	adds	r4, r1, #4
 801181c:	1b1b      	subs	r3, r3, r4
 801181e:	fab3 f383 	clz	r3, r3
 8011822:	095b      	lsrs	r3, r3, #5
 8011824:	f101 0408 	add.w	r4, r1, #8
 8011828:	703b      	strb	r3, [r7, #0]
 801182a:	f101 0314 	add.w	r3, r1, #20
 801182e:	1b01      	subs	r1, r0, r4
 8011830:	1ad3      	subs	r3, r2, r3
 8011832:	fab1 f181 	clz	r1, r1
 8011836:	9a06      	ldr	r2, [sp, #24]
 8011838:	0949      	lsrs	r1, r1, #5
 801183a:	7011      	strb	r1, [r2, #0]
 801183c:	fab3 f383 	clz	r3, r3
 8011840:	9a07      	ldr	r2, [sp, #28]
 8011842:	095b      	lsrs	r3, r3, #5
 8011844:	2000      	movs	r0, #0
 8011846:	7013      	strb	r3, [r2, #0]
 8011848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801184a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801184e:	4770      	bx	lr
 8011850:	200b      	movs	r0, #11
 8011852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011854 <_execute_event_handler>:
 8011854:	2002      	movs	r0, #2
 8011856:	4770      	bx	lr

08011858 <_cancel_goal_event_handler>:
 8011858:	2003      	movs	r0, #3
 801185a:	4770      	bx	lr

0801185c <_succeed_event_handler>:
 801185c:	2004      	movs	r0, #4
 801185e:	4770      	bx	lr

08011860 <_abort_event_handler>:
 8011860:	2006      	movs	r0, #6
 8011862:	4770      	bx	lr

08011864 <_canceled_event_handler>:
 8011864:	2005      	movs	r0, #5
 8011866:	4770      	bx	lr

08011868 <rcl_action_transition_goal_state>:
 8011868:	b2c2      	uxtb	r2, r0
 801186a:	2a06      	cmp	r2, #6
 801186c:	d80c      	bhi.n	8011888 <rcl_action_transition_goal_state+0x20>
 801186e:	2904      	cmp	r1, #4
 8011870:	d80a      	bhi.n	8011888 <rcl_action_transition_goal_state+0x20>
 8011872:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8011876:	b410      	push	{r4}
 8011878:	1853      	adds	r3, r2, r1
 801187a:	4c06      	ldr	r4, [pc, #24]	@ (8011894 <rcl_action_transition_goal_state+0x2c>)
 801187c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8011880:	b123      	cbz	r3, 801188c <rcl_action_transition_goal_state+0x24>
 8011882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011886:	4718      	bx	r3
 8011888:	2000      	movs	r0, #0
 801188a:	4770      	bx	lr
 801188c:	2000      	movs	r0, #0
 801188e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011892:	4770      	bx	lr
 8011894:	08019b04 	.word	0x08019b04

08011898 <rcl_action_get_zero_initialized_cancel_response>:
 8011898:	b510      	push	{r4, lr}
 801189a:	4c07      	ldr	r4, [pc, #28]	@ (80118b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801189c:	4686      	mov	lr, r0
 801189e:	4684      	mov	ip, r0
 80118a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80118ac:	6823      	ldr	r3, [r4, #0]
 80118ae:	f8cc 3000 	str.w	r3, [ip]
 80118b2:	4670      	mov	r0, lr
 80118b4:	bd10      	pop	{r4, pc}
 80118b6:	bf00      	nop
 80118b8:	08019b90 	.word	0x08019b90

080118bc <rclc_action_send_result_request>:
 80118bc:	b1d0      	cbz	r0, 80118f4 <rclc_action_send_result_request+0x38>
 80118be:	b500      	push	{lr}
 80118c0:	4684      	mov	ip, r0
 80118c2:	b087      	sub	sp, #28
 80118c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80118c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80118cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80118d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80118d4:	f10d 0e08 	add.w	lr, sp, #8
 80118d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80118dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80118e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80118e4:	a902      	add	r1, sp, #8
 80118e6:	3010      	adds	r0, #16
 80118e8:	f7ff fbda 	bl	80110a0 <rcl_action_send_result_request>
 80118ec:	b920      	cbnz	r0, 80118f8 <rclc_action_send_result_request+0x3c>
 80118ee:	b007      	add	sp, #28
 80118f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80118f4:	200b      	movs	r0, #11
 80118f6:	4770      	bx	lr
 80118f8:	9001      	str	r0, [sp, #4]
 80118fa:	f7f9 f97d 	bl	800abf8 <rcutils_reset_error>
 80118fe:	9801      	ldr	r0, [sp, #4]
 8011900:	b007      	add	sp, #28
 8011902:	f85d fb04 	ldr.w	pc, [sp], #4
 8011906:	bf00      	nop

08011908 <rclc_action_take_goal_handle>:
 8011908:	b160      	cbz	r0, 8011924 <rclc_action_take_goal_handle+0x1c>
 801190a:	6883      	ldr	r3, [r0, #8]
 801190c:	b143      	cbz	r3, 8011920 <rclc_action_take_goal_handle+0x18>
 801190e:	6819      	ldr	r1, [r3, #0]
 8011910:	6081      	str	r1, [r0, #8]
 8011912:	2200      	movs	r2, #0
 8011914:	721a      	strb	r2, [r3, #8]
 8011916:	68c1      	ldr	r1, [r0, #12]
 8011918:	6019      	str	r1, [r3, #0]
 801191a:	621a      	str	r2, [r3, #32]
 801191c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801191e:	60c3      	str	r3, [r0, #12]
 8011920:	4618      	mov	r0, r3
 8011922:	4770      	bx	lr
 8011924:	4603      	mov	r3, r0
 8011926:	e7fb      	b.n	8011920 <rclc_action_take_goal_handle+0x18>

08011928 <rclc_action_remove_used_goal_handle>:
 8011928:	b180      	cbz	r0, 801194c <rclc_action_remove_used_goal_handle+0x24>
 801192a:	b179      	cbz	r1, 801194c <rclc_action_remove_used_goal_handle+0x24>
 801192c:	68c3      	ldr	r3, [r0, #12]
 801192e:	4299      	cmp	r1, r3
 8011930:	d00d      	beq.n	801194e <rclc_action_remove_used_goal_handle+0x26>
 8011932:	b12b      	cbz	r3, 8011940 <rclc_action_remove_used_goal_handle+0x18>
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	4291      	cmp	r1, r2
 8011938:	d003      	beq.n	8011942 <rclc_action_remove_used_goal_handle+0x1a>
 801193a:	4613      	mov	r3, r2
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1f9      	bne.n	8011934 <rclc_action_remove_used_goal_handle+0xc>
 8011940:	4770      	bx	lr
 8011942:	680a      	ldr	r2, [r1, #0]
 8011944:	601a      	str	r2, [r3, #0]
 8011946:	6883      	ldr	r3, [r0, #8]
 8011948:	600b      	str	r3, [r1, #0]
 801194a:	6081      	str	r1, [r0, #8]
 801194c:	4770      	bx	lr
 801194e:	680b      	ldr	r3, [r1, #0]
 8011950:	60c3      	str	r3, [r0, #12]
 8011952:	e7f8      	b.n	8011946 <rclc_action_remove_used_goal_handle+0x1e>

08011954 <rclc_action_find_goal_handle_by_uuid>:
 8011954:	b538      	push	{r3, r4, r5, lr}
 8011956:	b180      	cbz	r0, 801197a <rclc_action_find_goal_handle_by_uuid+0x26>
 8011958:	460d      	mov	r5, r1
 801195a:	b181      	cbz	r1, 801197e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801195c:	68c4      	ldr	r4, [r0, #12]
 801195e:	b914      	cbnz	r4, 8011966 <rclc_action_find_goal_handle_by_uuid+0x12>
 8011960:	e009      	b.n	8011976 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011962:	6824      	ldr	r4, [r4, #0]
 8011964:	b13c      	cbz	r4, 8011976 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011966:	f104 0009 	add.w	r0, r4, #9
 801196a:	2210      	movs	r2, #16
 801196c:	4629      	mov	r1, r5
 801196e:	f005 fb85 	bl	801707c <memcmp>
 8011972:	2800      	cmp	r0, #0
 8011974:	d1f5      	bne.n	8011962 <rclc_action_find_goal_handle_by_uuid+0xe>
 8011976:	4620      	mov	r0, r4
 8011978:	bd38      	pop	{r3, r4, r5, pc}
 801197a:	4604      	mov	r4, r0
 801197c:	e7fb      	b.n	8011976 <rclc_action_find_goal_handle_by_uuid+0x22>
 801197e:	460c      	mov	r4, r1
 8011980:	e7f9      	b.n	8011976 <rclc_action_find_goal_handle_by_uuid+0x22>
 8011982:	bf00      	nop

08011984 <rclc_action_find_first_handle_by_status>:
 8011984:	b140      	cbz	r0, 8011998 <rclc_action_find_first_handle_by_status+0x14>
 8011986:	68c0      	ldr	r0, [r0, #12]
 8011988:	b910      	cbnz	r0, 8011990 <rclc_action_find_first_handle_by_status+0xc>
 801198a:	e005      	b.n	8011998 <rclc_action_find_first_handle_by_status+0x14>
 801198c:	6800      	ldr	r0, [r0, #0]
 801198e:	b118      	cbz	r0, 8011998 <rclc_action_find_first_handle_by_status+0x14>
 8011990:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8011994:	428b      	cmp	r3, r1
 8011996:	d1f9      	bne.n	801198c <rclc_action_find_first_handle_by_status+0x8>
 8011998:	4770      	bx	lr
 801199a:	bf00      	nop

0801199c <rclc_action_find_first_terminated_handle>:
 801199c:	b140      	cbz	r0, 80119b0 <rclc_action_find_first_terminated_handle+0x14>
 801199e:	68c0      	ldr	r0, [r0, #12]
 80119a0:	b910      	cbnz	r0, 80119a8 <rclc_action_find_first_terminated_handle+0xc>
 80119a2:	e005      	b.n	80119b0 <rclc_action_find_first_terminated_handle+0x14>
 80119a4:	6800      	ldr	r0, [r0, #0]
 80119a6:	b118      	cbz	r0, 80119b0 <rclc_action_find_first_terminated_handle+0x14>
 80119a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80119ac:	2b03      	cmp	r3, #3
 80119ae:	ddf9      	ble.n	80119a4 <rclc_action_find_first_terminated_handle+0x8>
 80119b0:	4770      	bx	lr
 80119b2:	bf00      	nop

080119b4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80119b4:	b170      	cbz	r0, 80119d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80119b6:	68c0      	ldr	r0, [r0, #12]
 80119b8:	b160      	cbz	r0, 80119d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80119ba:	b410      	push	{r4}
 80119bc:	e001      	b.n	80119c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80119be:	6800      	ldr	r0, [r0, #0]
 80119c0:	b128      	cbz	r0, 80119ce <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80119c2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80119c6:	4299      	cmp	r1, r3
 80119c8:	bf08      	it	eq
 80119ca:	4294      	cmpeq	r4, r2
 80119cc:	d1f7      	bne.n	80119be <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80119ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	4770      	bx	lr
 80119d6:	bf00      	nop

080119d8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80119d8:	b170      	cbz	r0, 80119f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80119da:	68c0      	ldr	r0, [r0, #12]
 80119dc:	b160      	cbz	r0, 80119f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80119de:	b410      	push	{r4}
 80119e0:	e001      	b.n	80119e6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80119e2:	6800      	ldr	r0, [r0, #0]
 80119e4:	b128      	cbz	r0, 80119f2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80119e6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80119ea:	4299      	cmp	r1, r3
 80119ec:	bf08      	it	eq
 80119ee:	4294      	cmpeq	r4, r2
 80119f0:	d1f7      	bne.n	80119e2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80119f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119f6:	4770      	bx	lr
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop

080119fc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80119fc:	b170      	cbz	r0, 8011a1c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80119fe:	68c0      	ldr	r0, [r0, #12]
 8011a00:	b160      	cbz	r0, 8011a1c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8011a02:	b410      	push	{r4}
 8011a04:	e001      	b.n	8011a0a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8011a06:	6800      	ldr	r0, [r0, #0]
 8011a08:	b128      	cbz	r0, 8011a16 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8011a0a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8011a0e:	4299      	cmp	r1, r3
 8011a10:	bf08      	it	eq
 8011a12:	4294      	cmpeq	r4, r2
 8011a14:	d1f7      	bne.n	8011a06 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8011a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a1a:	4770      	bx	lr
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop

08011a20 <rclc_action_find_first_handle_with_goal_response>:
 8011a20:	b140      	cbz	r0, 8011a34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011a22:	68c0      	ldr	r0, [r0, #12]
 8011a24:	b910      	cbnz	r0, 8011a2c <rclc_action_find_first_handle_with_goal_response+0xc>
 8011a26:	e005      	b.n	8011a34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011a28:	6800      	ldr	r0, [r0, #0]
 8011a2a:	b118      	cbz	r0, 8011a34 <rclc_action_find_first_handle_with_goal_response+0x14>
 8011a2c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d0f9      	beq.n	8011a28 <rclc_action_find_first_handle_with_goal_response+0x8>
 8011a34:	4770      	bx	lr
 8011a36:	bf00      	nop

08011a38 <rclc_action_find_first_handle_with_result_response>:
 8011a38:	b140      	cbz	r0, 8011a4c <rclc_action_find_first_handle_with_result_response+0x14>
 8011a3a:	68c0      	ldr	r0, [r0, #12]
 8011a3c:	b910      	cbnz	r0, 8011a44 <rclc_action_find_first_handle_with_result_response+0xc>
 8011a3e:	e005      	b.n	8011a4c <rclc_action_find_first_handle_with_result_response+0x14>
 8011a40:	6800      	ldr	r0, [r0, #0]
 8011a42:	b118      	cbz	r0, 8011a4c <rclc_action_find_first_handle_with_result_response+0x14>
 8011a44:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d0f9      	beq.n	8011a40 <rclc_action_find_first_handle_with_result_response+0x8>
 8011a4c:	4770      	bx	lr
 8011a4e:	bf00      	nop

08011a50 <rclc_action_server_response_goal_request>:
 8011a50:	b198      	cbz	r0, 8011a7a <rclc_action_server_response_goal_request+0x2a>
 8011a52:	b510      	push	{r4, lr}
 8011a54:	6844      	ldr	r4, [r0, #4]
 8011a56:	b086      	sub	sp, #24
 8011a58:	2200      	movs	r2, #0
 8011a5a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8011a5e:	460b      	mov	r3, r1
 8011a60:	9205      	str	r2, [sp, #20]
 8011a62:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8011a66:	aa03      	add	r2, sp, #12
 8011a68:	f104 0010 	add.w	r0, r4, #16
 8011a6c:	f88d 300c 	strb.w	r3, [sp, #12]
 8011a70:	f7ff fd4a 	bl	8011508 <rcl_action_send_goal_response>
 8011a74:	b918      	cbnz	r0, 8011a7e <rclc_action_server_response_goal_request+0x2e>
 8011a76:	b006      	add	sp, #24
 8011a78:	bd10      	pop	{r4, pc}
 8011a7a:	200b      	movs	r0, #11
 8011a7c:	4770      	bx	lr
 8011a7e:	9001      	str	r0, [sp, #4]
 8011a80:	f7f9 f8ba 	bl	800abf8 <rcutils_reset_error>
 8011a84:	9801      	ldr	r0, [sp, #4]
 8011a86:	b006      	add	sp, #24
 8011a88:	bd10      	pop	{r4, pc}
 8011a8a:	bf00      	nop
 8011a8c:	0000      	movs	r0, r0
	...

08011a90 <rclc_action_server_goal_cancel_accept>:
 8011a90:	b310      	cbz	r0, 8011ad8 <rclc_action_server_goal_cancel_accept+0x48>
 8011a92:	b510      	push	{r4, lr}
 8011a94:	b090      	sub	sp, #64	@ 0x40
 8011a96:	4604      	mov	r4, r0
 8011a98:	a806      	add	r0, sp, #24
 8011a9a:	f7ff fefd 	bl	8011898 <rcl_action_get_zero_initialized_cancel_response>
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8011aa4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8011aa8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8011aac:	f88d 3018 	strb.w	r3, [sp, #24]
 8011ab0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8011ab4:	f8cd d01c 	str.w	sp, [sp, #28]
 8011ab8:	46ec      	mov	ip, sp
 8011aba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011abe:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8011ae0 <rclc_action_server_goal_cancel_accept+0x50>
 8011ac2:	6860      	ldr	r0, [r4, #4]
 8011ac4:	aa06      	add	r2, sp, #24
 8011ac6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8011aca:	3010      	adds	r0, #16
 8011acc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011ad0:	f7ff fdd2 	bl	8011678 <rcl_action_send_cancel_response>
 8011ad4:	b010      	add	sp, #64	@ 0x40
 8011ad6:	bd10      	pop	{r4, pc}
 8011ad8:	200b      	movs	r0, #11
 8011ada:	4770      	bx	lr
 8011adc:	f3af 8000 	nop.w
 8011ae0:	00000001 	.word	0x00000001
 8011ae4:	00000001 	.word	0x00000001

08011ae8 <rclc_action_server_goal_cancel_reject>:
 8011ae8:	b082      	sub	sp, #8
 8011aea:	b530      	push	{r4, r5, lr}
 8011aec:	b08b      	sub	sp, #44	@ 0x2c
 8011aee:	ac0e      	add	r4, sp, #56	@ 0x38
 8011af0:	e884 000c 	stmia.w	r4, {r2, r3}
 8011af4:	b188      	cbz	r0, 8011b1a <rclc_action_server_goal_cancel_reject+0x32>
 8011af6:	4604      	mov	r4, r0
 8011af8:	a801      	add	r0, sp, #4
 8011afa:	460d      	mov	r5, r1
 8011afc:	f7ff fecc 	bl	8011898 <rcl_action_get_zero_initialized_cancel_response>
 8011b00:	aa01      	add	r2, sp, #4
 8011b02:	a90e      	add	r1, sp, #56	@ 0x38
 8011b04:	f104 0010 	add.w	r0, r4, #16
 8011b08:	f88d 5004 	strb.w	r5, [sp, #4]
 8011b0c:	f7ff fdb4 	bl	8011678 <rcl_action_send_cancel_response>
 8011b10:	b00b      	add	sp, #44	@ 0x2c
 8011b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b16:	b002      	add	sp, #8
 8011b18:	4770      	bx	lr
 8011b1a:	200b      	movs	r0, #11
 8011b1c:	b00b      	add	sp, #44	@ 0x2c
 8011b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b22:	b002      	add	sp, #8
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop

08011b28 <__atomic_load_8>:
 8011b28:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011b2c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011b30:	4a15      	ldr	r2, [pc, #84]	@ (8011b88 <__atomic_load_8+0x60>)
 8011b32:	4b16      	ldr	r3, [pc, #88]	@ (8011b8c <__atomic_load_8+0x64>)
 8011b34:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011b38:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011b3c:	fb02 f101 	mul.w	r1, r2, r1
 8011b40:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011b44:	fba3 2301 	umull	r2, r3, r3, r1
 8011b48:	091b      	lsrs	r3, r3, #4
 8011b4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011b4e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8011b52:	b4d0      	push	{r4, r6, r7}
 8011b54:	4c0e      	ldr	r4, [pc, #56]	@ (8011b90 <__atomic_load_8+0x68>)
 8011b56:	1ac9      	subs	r1, r1, r3
 8011b58:	1862      	adds	r2, r4, r1
 8011b5a:	f04f 0c01 	mov.w	ip, #1
 8011b5e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8011b62:	e8c2 cf46 	strexb	r6, ip, [r2]
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	d1f9      	bne.n	8011b5e <__atomic_load_8+0x36>
 8011b6a:	f3bf 8f5b 	dmb	ish
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1f4      	bne.n	8011b5e <__atomic_load_8+0x36>
 8011b74:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011b78:	f3bf 8f5b 	dmb	ish
 8011b7c:	5463      	strb	r3, [r4, r1]
 8011b7e:	4630      	mov	r0, r6
 8011b80:	4639      	mov	r1, r7
 8011b82:	bcd0      	pop	{r4, r6, r7}
 8011b84:	4770      	bx	lr
 8011b86:	bf00      	nop
 8011b88:	27d4eb2d 	.word	0x27d4eb2d
 8011b8c:	b21642c9 	.word	0xb21642c9
 8011b90:	200179f4 	.word	0x200179f4

08011b94 <__atomic_store_8>:
 8011b94:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8011b98:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8011b9c:	b570      	push	{r4, r5, r6, lr}
 8011b9e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8011ba2:	4c14      	ldr	r4, [pc, #80]	@ (8011bf4 <__atomic_store_8+0x60>)
 8011ba4:	4d14      	ldr	r5, [pc, #80]	@ (8011bf8 <__atomic_store_8+0x64>)
 8011ba6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8011baa:	fb04 f101 	mul.w	r1, r4, r1
 8011bae:	4c13      	ldr	r4, [pc, #76]	@ (8011bfc <__atomic_store_8+0x68>)
 8011bb0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8011bb4:	fba4 4e01 	umull	r4, lr, r4, r1
 8011bb8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8011bbc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8011bc0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8011bc4:	eba1 0e0e 	sub.w	lr, r1, lr
 8011bc8:	eb05 0c0e 	add.w	ip, r5, lr
 8011bcc:	f04f 0401 	mov.w	r4, #1
 8011bd0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8011bd4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8011bd8:	2e00      	cmp	r6, #0
 8011bda:	d1f9      	bne.n	8011bd0 <__atomic_store_8+0x3c>
 8011bdc:	f3bf 8f5b 	dmb	ish
 8011be0:	b2c9      	uxtb	r1, r1
 8011be2:	2900      	cmp	r1, #0
 8011be4:	d1f4      	bne.n	8011bd0 <__atomic_store_8+0x3c>
 8011be6:	e9c0 2300 	strd	r2, r3, [r0]
 8011bea:	f3bf 8f5b 	dmb	ish
 8011bee:	f805 100e 	strb.w	r1, [r5, lr]
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	27d4eb2d 	.word	0x27d4eb2d
 8011bf8:	200179f4 	.word	0x200179f4
 8011bfc:	b21642c9 	.word	0xb21642c9

08011c00 <__atomic_exchange_8>:
 8011c00:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8011c04:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8011c08:	4916      	ldr	r1, [pc, #88]	@ (8011c64 <__atomic_exchange_8+0x64>)
 8011c0a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8011c0e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8011c12:	fb01 fc0c 	mul.w	ip, r1, ip
 8011c16:	4914      	ldr	r1, [pc, #80]	@ (8011c68 <__atomic_exchange_8+0x68>)
 8011c18:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4605      	mov	r5, r0
 8011c20:	fba1 010c 	umull	r0, r1, r1, ip
 8011c24:	0909      	lsrs	r1, r1, #4
 8011c26:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011c2a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8011c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8011c6c <__atomic_exchange_8+0x6c>)
 8011c30:	ebac 0c01 	sub.w	ip, ip, r1
 8011c34:	eb06 010c 	add.w	r1, r6, ip
 8011c38:	f04f 0e01 	mov.w	lr, #1
 8011c3c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8011c40:	e8c1 ef40 	strexb	r0, lr, [r1]
 8011c44:	2800      	cmp	r0, #0
 8011c46:	d1f9      	bne.n	8011c3c <__atomic_exchange_8+0x3c>
 8011c48:	f3bf 8f5b 	dmb	ish
 8011c4c:	b2e4      	uxtb	r4, r4
 8011c4e:	2c00      	cmp	r4, #0
 8011c50:	d1f4      	bne.n	8011c3c <__atomic_exchange_8+0x3c>
 8011c52:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011c56:	e9c5 2300 	strd	r2, r3, [r5]
 8011c5a:	f3bf 8f5b 	dmb	ish
 8011c5e:	f806 400c 	strb.w	r4, [r6, ip]
 8011c62:	bd70      	pop	{r4, r5, r6, pc}
 8011c64:	27d4eb2d 	.word	0x27d4eb2d
 8011c68:	b21642c9 	.word	0xb21642c9
 8011c6c:	200179f4 	.word	0x200179f4

08011c70 <rcutils_is_directory>:
 8011c70:	2000      	movs	r0, #0
 8011c72:	4770      	bx	lr

08011c74 <rcutils_join_path>:
 8011c74:	b082      	sub	sp, #8
 8011c76:	e88d 000c 	stmia.w	sp, {r2, r3}
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	b002      	add	sp, #8
 8011c7e:	4770      	bx	lr

08011c80 <rcutils_to_native_path>:
 8011c80:	b084      	sub	sp, #16
 8011c82:	a801      	add	r0, sp, #4
 8011c84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8011c88:	b004      	add	sp, #16
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <rcutils_string_array_fini>:
 8011c90:	b320      	cbz	r0, 8011cdc <rcutils_string_array_fini+0x4c>
 8011c92:	b570      	push	{r4, r5, r6, lr}
 8011c94:	4604      	mov	r4, r0
 8011c96:	6840      	ldr	r0, [r0, #4]
 8011c98:	b1d8      	cbz	r0, 8011cd2 <rcutils_string_array_fini+0x42>
 8011c9a:	f104 0008 	add.w	r0, r4, #8
 8011c9e:	f7f8 ff6f 	bl	800ab80 <rcutils_allocator_is_valid>
 8011ca2:	b1b8      	cbz	r0, 8011cd4 <rcutils_string_array_fini+0x44>
 8011ca4:	6823      	ldr	r3, [r4, #0]
 8011ca6:	b1bb      	cbz	r3, 8011cd8 <rcutils_string_array_fini+0x48>
 8011ca8:	2500      	movs	r5, #0
 8011caa:	6860      	ldr	r0, [r4, #4]
 8011cac:	462e      	mov	r6, r5
 8011cae:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8011cb2:	68e3      	ldr	r3, [r4, #12]
 8011cb4:	69a1      	ldr	r1, [r4, #24]
 8011cb6:	4798      	blx	r3
 8011cb8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8011cbc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8011cc0:	3501      	adds	r5, #1
 8011cc2:	429d      	cmp	r5, r3
 8011cc4:	d3f3      	bcc.n	8011cae <rcutils_string_array_fini+0x1e>
 8011cc6:	68e3      	ldr	r3, [r4, #12]
 8011cc8:	69a1      	ldr	r1, [r4, #24]
 8011cca:	4798      	blx	r3
 8011ccc:	2000      	movs	r0, #0
 8011cce:	e9c4 0000 	strd	r0, r0, [r4]
 8011cd2:	bd70      	pop	{r4, r5, r6, pc}
 8011cd4:	200b      	movs	r0, #11
 8011cd6:	bd70      	pop	{r4, r5, r6, pc}
 8011cd8:	6860      	ldr	r0, [r4, #4]
 8011cda:	e7f4      	b.n	8011cc6 <rcutils_string_array_fini+0x36>
 8011cdc:	200b      	movs	r0, #11
 8011cde:	4770      	bx	lr

08011ce0 <rcutils_get_zero_initialized_string_map>:
 8011ce0:	4b01      	ldr	r3, [pc, #4]	@ (8011ce8 <rcutils_get_zero_initialized_string_map+0x8>)
 8011ce2:	2000      	movs	r0, #0
 8011ce4:	6018      	str	r0, [r3, #0]
 8011ce6:	4770      	bx	lr
 8011ce8:	20017a0c 	.word	0x20017a0c

08011cec <rcutils_string_map_reserve>:
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d05f      	beq.n	8011db0 <rcutils_string_map_reserve+0xc4>
 8011cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf4:	460c      	mov	r4, r1
 8011cf6:	6801      	ldr	r1, [r0, #0]
 8011cf8:	b082      	sub	sp, #8
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	b129      	cbz	r1, 8011d0a <rcutils_string_map_reserve+0x1e>
 8011cfe:	68cb      	ldr	r3, [r1, #12]
 8011d00:	42a3      	cmp	r3, r4
 8011d02:	d906      	bls.n	8011d12 <rcutils_string_map_reserve+0x26>
 8011d04:	461c      	mov	r4, r3
 8011d06:	2900      	cmp	r1, #0
 8011d08:	d1f9      	bne.n	8011cfe <rcutils_string_map_reserve+0x12>
 8011d0a:	201f      	movs	r0, #31
 8011d0c:	b002      	add	sp, #8
 8011d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d12:	688b      	ldr	r3, [r1, #8]
 8011d14:	42a3      	cmp	r3, r4
 8011d16:	d047      	beq.n	8011da8 <rcutils_string_map_reserve+0xbc>
 8011d18:	6a0e      	ldr	r6, [r1, #32]
 8011d1a:	2c00      	cmp	r4, #0
 8011d1c:	d034      	beq.n	8011d88 <rcutils_string_map_reserve+0x9c>
 8011d1e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8011d22:	d243      	bcs.n	8011dac <rcutils_string_map_reserve+0xc0>
 8011d24:	00a7      	lsls	r7, r4, #2
 8011d26:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8011d2a:	6808      	ldr	r0, [r1, #0]
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	4639      	mov	r1, r7
 8011d30:	47c0      	blx	r8
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d03a      	beq.n	8011dac <rcutils_string_map_reserve+0xc0>
 8011d36:	682b      	ldr	r3, [r5, #0]
 8011d38:	4632      	mov	r2, r6
 8011d3a:	6018      	str	r0, [r3, #0]
 8011d3c:	4639      	mov	r1, r7
 8011d3e:	6858      	ldr	r0, [r3, #4]
 8011d40:	47c0      	blx	r8
 8011d42:	2800      	cmp	r0, #0
 8011d44:	d032      	beq.n	8011dac <rcutils_string_map_reserve+0xc0>
 8011d46:	682d      	ldr	r5, [r5, #0]
 8011d48:	68ab      	ldr	r3, [r5, #8]
 8011d4a:	6068      	str	r0, [r5, #4]
 8011d4c:	42a3      	cmp	r3, r4
 8011d4e:	d226      	bcs.n	8011d9e <rcutils_string_map_reserve+0xb2>
 8011d50:	682a      	ldr	r2, [r5, #0]
 8011d52:	eb00 0c07 	add.w	ip, r0, r7
 8011d56:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8011d5a:	45e6      	cmp	lr, ip
 8011d5c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8011d60:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8011d64:	d203      	bcs.n	8011d6e <rcutils_string_map_reserve+0x82>
 8011d66:	eb02 0c07 	add.w	ip, r2, r7
 8011d6a:	4566      	cmp	r6, ip
 8011d6c:	d322      	bcc.n	8011db4 <rcutils_string_map_reserve+0xc8>
 8011d6e:	1ae3      	subs	r3, r4, r3
 8011d70:	009a      	lsls	r2, r3, #2
 8011d72:	4670      	mov	r0, lr
 8011d74:	2100      	movs	r1, #0
 8011d76:	9201      	str	r2, [sp, #4]
 8011d78:	f005 f9aa 	bl	80170d0 <memset>
 8011d7c:	9a01      	ldr	r2, [sp, #4]
 8011d7e:	2100      	movs	r1, #0
 8011d80:	4630      	mov	r0, r6
 8011d82:	f005 f9a5 	bl	80170d0 <memset>
 8011d86:	e00a      	b.n	8011d9e <rcutils_string_map_reserve+0xb2>
 8011d88:	694f      	ldr	r7, [r1, #20]
 8011d8a:	6808      	ldr	r0, [r1, #0]
 8011d8c:	4631      	mov	r1, r6
 8011d8e:	47b8      	blx	r7
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	4631      	mov	r1, r6
 8011d94:	6858      	ldr	r0, [r3, #4]
 8011d96:	601c      	str	r4, [r3, #0]
 8011d98:	47b8      	blx	r7
 8011d9a:	682d      	ldr	r5, [r5, #0]
 8011d9c:	606c      	str	r4, [r5, #4]
 8011d9e:	2000      	movs	r0, #0
 8011da0:	60ac      	str	r4, [r5, #8]
 8011da2:	b002      	add	sp, #8
 8011da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da8:	2000      	movs	r0, #0
 8011daa:	e7af      	b.n	8011d0c <rcutils_string_map_reserve+0x20>
 8011dac:	200a      	movs	r0, #10
 8011dae:	e7ad      	b.n	8011d0c <rcutils_string_map_reserve+0x20>
 8011db0:	200b      	movs	r0, #11
 8011db2:	4770      	bx	lr
 8011db4:	1f0b      	subs	r3, r1, #4
 8011db6:	4418      	add	r0, r3
 8011db8:	4413      	add	r3, r2
 8011dba:	3a04      	subs	r2, #4
 8011dbc:	4417      	add	r7, r2
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f843 2f04 	str.w	r2, [r3, #4]!
 8011dc4:	42bb      	cmp	r3, r7
 8011dc6:	f840 2f04 	str.w	r2, [r0, #4]!
 8011dca:	d1f9      	bne.n	8011dc0 <rcutils_string_map_reserve+0xd4>
 8011dcc:	e7e7      	b.n	8011d9e <rcutils_string_map_reserve+0xb2>
 8011dce:	bf00      	nop

08011dd0 <rcutils_string_map_init>:
 8011dd0:	b082      	sub	sp, #8
 8011dd2:	b570      	push	{r4, r5, r6, lr}
 8011dd4:	ac04      	add	r4, sp, #16
 8011dd6:	e884 000c 	stmia.w	r4, {r2, r3}
 8011dda:	b380      	cbz	r0, 8011e3e <rcutils_string_map_init+0x6e>
 8011ddc:	6806      	ldr	r6, [r0, #0]
 8011dde:	4604      	mov	r4, r0
 8011de0:	b12e      	cbz	r6, 8011dee <rcutils_string_map_init+0x1e>
 8011de2:	251e      	movs	r5, #30
 8011de4:	4628      	mov	r0, r5
 8011de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011dea:	b002      	add	sp, #8
 8011dec:	4770      	bx	lr
 8011dee:	a804      	add	r0, sp, #16
 8011df0:	460d      	mov	r5, r1
 8011df2:	f7f8 fec5 	bl	800ab80 <rcutils_allocator_is_valid>
 8011df6:	b310      	cbz	r0, 8011e3e <rcutils_string_map_init+0x6e>
 8011df8:	9b04      	ldr	r3, [sp, #16]
 8011dfa:	9908      	ldr	r1, [sp, #32]
 8011dfc:	2024      	movs	r0, #36	@ 0x24
 8011dfe:	4798      	blx	r3
 8011e00:	6020      	str	r0, [r4, #0]
 8011e02:	b310      	cbz	r0, 8011e4a <rcutils_string_map_init+0x7a>
 8011e04:	f10d 0e10 	add.w	lr, sp, #16
 8011e08:	e9c0 6600 	strd	r6, r6, [r0]
 8011e0c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011e10:	f100 0c10 	add.w	ip, r0, #16
 8011e14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e1c:	f8de 3000 	ldr.w	r3, [lr]
 8011e20:	f8cc 3000 	str.w	r3, [ip]
 8011e24:	4629      	mov	r1, r5
 8011e26:	4620      	mov	r0, r4
 8011e28:	f7ff ff60 	bl	8011cec <rcutils_string_map_reserve>
 8011e2c:	4605      	mov	r5, r0
 8011e2e:	2800      	cmp	r0, #0
 8011e30:	d0d8      	beq.n	8011de4 <rcutils_string_map_init+0x14>
 8011e32:	9b05      	ldr	r3, [sp, #20]
 8011e34:	9908      	ldr	r1, [sp, #32]
 8011e36:	6820      	ldr	r0, [r4, #0]
 8011e38:	4798      	blx	r3
 8011e3a:	6026      	str	r6, [r4, #0]
 8011e3c:	e7d2      	b.n	8011de4 <rcutils_string_map_init+0x14>
 8011e3e:	250b      	movs	r5, #11
 8011e40:	4628      	mov	r0, r5
 8011e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011e46:	b002      	add	sp, #8
 8011e48:	4770      	bx	lr
 8011e4a:	250a      	movs	r5, #10
 8011e4c:	e7ca      	b.n	8011de4 <rcutils_string_map_init+0x14>
 8011e4e:	bf00      	nop

08011e50 <rcutils_string_map_fini>:
 8011e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e54:	b082      	sub	sp, #8
 8011e56:	2800      	cmp	r0, #0
 8011e58:	d03a      	beq.n	8011ed0 <rcutils_string_map_fini+0x80>
 8011e5a:	6804      	ldr	r4, [r0, #0]
 8011e5c:	4606      	mov	r6, r0
 8011e5e:	2c00      	cmp	r4, #0
 8011e60:	d032      	beq.n	8011ec8 <rcutils_string_map_fini+0x78>
 8011e62:	68a3      	ldr	r3, [r4, #8]
 8011e64:	b32b      	cbz	r3, 8011eb2 <rcutils_string_map_fini+0x62>
 8011e66:	2500      	movs	r5, #0
 8011e68:	6822      	ldr	r2, [r4, #0]
 8011e6a:	462f      	mov	r7, r5
 8011e6c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011e70:	b1e0      	cbz	r0, 8011eac <rcutils_string_map_fini+0x5c>
 8011e72:	6a21      	ldr	r1, [r4, #32]
 8011e74:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8011e78:	9101      	str	r1, [sp, #4]
 8011e7a:	47c0      	blx	r8
 8011e7c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011e80:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011e84:	9901      	ldr	r1, [sp, #4]
 8011e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011e8a:	47c0      	blx	r8
 8011e8c:	68e3      	ldr	r3, [r4, #12]
 8011e8e:	6862      	ldr	r2, [r4, #4]
 8011e90:	3b01      	subs	r3, #1
 8011e92:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8011e96:	60e3      	str	r3, [r4, #12]
 8011e98:	6834      	ldr	r4, [r6, #0]
 8011e9a:	68a3      	ldr	r3, [r4, #8]
 8011e9c:	3501      	adds	r5, #1
 8011e9e:	429d      	cmp	r5, r3
 8011ea0:	d207      	bcs.n	8011eb2 <rcutils_string_map_fini+0x62>
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	d1e2      	bne.n	8011e72 <rcutils_string_map_fini+0x22>
 8011eac:	3501      	adds	r5, #1
 8011eae:	429d      	cmp	r5, r3
 8011eb0:	d3dc      	bcc.n	8011e6c <rcutils_string_map_fini+0x1c>
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	4630      	mov	r0, r6
 8011eb6:	f7ff ff19 	bl	8011cec <rcutils_string_map_reserve>
 8011eba:	4604      	mov	r4, r0
 8011ebc:	b920      	cbnz	r0, 8011ec8 <rcutils_string_map_fini+0x78>
 8011ebe:	6830      	ldr	r0, [r6, #0]
 8011ec0:	6943      	ldr	r3, [r0, #20]
 8011ec2:	6a01      	ldr	r1, [r0, #32]
 8011ec4:	4798      	blx	r3
 8011ec6:	6034      	str	r4, [r6, #0]
 8011ec8:	4620      	mov	r0, r4
 8011eca:	b002      	add	sp, #8
 8011ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed0:	240b      	movs	r4, #11
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	b002      	add	sp, #8
 8011ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eda:	bf00      	nop

08011edc <rcutils_string_map_getn>:
 8011edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee0:	b300      	cbz	r0, 8011f24 <rcutils_string_map_getn+0x48>
 8011ee2:	6807      	ldr	r7, [r0, #0]
 8011ee4:	b1ff      	cbz	r7, 8011f26 <rcutils_string_map_getn+0x4a>
 8011ee6:	4688      	mov	r8, r1
 8011ee8:	b1e1      	cbz	r1, 8011f24 <rcutils_string_map_getn+0x48>
 8011eea:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011eee:	683e      	ldr	r6, [r7, #0]
 8011ef0:	f1ba 0f00 	cmp.w	sl, #0
 8011ef4:	d016      	beq.n	8011f24 <rcutils_string_map_getn+0x48>
 8011ef6:	4691      	mov	r9, r2
 8011ef8:	3e04      	subs	r6, #4
 8011efa:	2400      	movs	r4, #0
 8011efc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011f00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f04:	4628      	mov	r0, r5
 8011f06:	3401      	adds	r4, #1
 8011f08:	b155      	cbz	r5, 8011f20 <rcutils_string_map_getn+0x44>
 8011f0a:	f7ee f9e1 	bl	80002d0 <strlen>
 8011f0e:	4548      	cmp	r0, r9
 8011f10:	4602      	mov	r2, r0
 8011f12:	4629      	mov	r1, r5
 8011f14:	bf38      	it	cc
 8011f16:	464a      	movcc	r2, r9
 8011f18:	4640      	mov	r0, r8
 8011f1a:	f005 f8ee 	bl	80170fa <strncmp>
 8011f1e:	b128      	cbz	r0, 8011f2c <rcutils_string_map_getn+0x50>
 8011f20:	45a2      	cmp	sl, r4
 8011f22:	d1eb      	bne.n	8011efc <rcutils_string_map_getn+0x20>
 8011f24:	2700      	movs	r7, #0
 8011f26:	4638      	mov	r0, r7
 8011f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f853 700b 	ldr.w	r7, [r3, fp]
 8011f32:	4638      	mov	r0, r7
 8011f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f38 <rmw_get_zero_initialized_context>:
 8011f38:	b510      	push	{r4, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	3010      	adds	r0, #16
 8011f3e:	f000 f80b 	bl	8011f58 <rmw_get_zero_initialized_init_options>
 8011f42:	2300      	movs	r3, #0
 8011f44:	2000      	movs	r0, #0
 8011f46:	2100      	movs	r1, #0
 8011f48:	e9c4 0100 	strd	r0, r1, [r4]
 8011f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8011f50:	60a3      	str	r3, [r4, #8]
 8011f52:	4620      	mov	r0, r4
 8011f54:	bd10      	pop	{r4, pc}
 8011f56:	bf00      	nop

08011f58 <rmw_get_zero_initialized_init_options>:
 8011f58:	b510      	push	{r4, lr}
 8011f5a:	2238      	movs	r2, #56	@ 0x38
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	2100      	movs	r1, #0
 8011f60:	f005 f8b6 	bl	80170d0 <memset>
 8011f64:	f104 0010 	add.w	r0, r4, #16
 8011f68:	f000 f806 	bl	8011f78 <rmw_get_default_security_options>
 8011f6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f70:	60e3      	str	r3, [r4, #12]
 8011f72:	4620      	mov	r0, r4
 8011f74:	bd10      	pop	{r4, pc}
 8011f76:	bf00      	nop

08011f78 <rmw_get_default_security_options>:
 8011f78:	2200      	movs	r2, #0
 8011f7a:	7002      	strb	r2, [r0, #0]
 8011f7c:	6042      	str	r2, [r0, #4]
 8011f7e:	4770      	bx	lr

08011f80 <rmw_time_equal>:
 8011f80:	b4f0      	push	{r4, r5, r6, r7}
 8011f82:	b084      	sub	sp, #16
 8011f84:	ac04      	add	r4, sp, #16
 8011f86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	4924      	ldr	r1, [pc, #144]	@ (8012020 <rmw_time_equal+0xa0>)
 8011f8e:	9e03      	ldr	r6, [sp, #12]
 8011f90:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011f94:	2202      	movs	r2, #2
 8011f96:	4299      	cmp	r1, r3
 8011f98:	41aa      	sbcs	r2, r5
 8011f9a:	d330      	bcc.n	8011ffe <rmw_time_equal+0x7e>
 8011f9c:	4c21      	ldr	r4, [pc, #132]	@ (8012024 <rmw_time_equal+0xa4>)
 8011f9e:	fba3 3204 	umull	r3, r2, r3, r4
 8011fa2:	fb04 2205 	mla	r2, r4, r5, r2
 8011fa6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011faa:	43dd      	mvns	r5, r3
 8011fac:	1a8c      	subs	r4, r1, r2
 8011fae:	4285      	cmp	r5, r0
 8011fb0:	41b4      	sbcs	r4, r6
 8011fb2:	d332      	bcc.n	801201a <rmw_time_equal+0x9a>
 8011fb4:	eb10 0c03 	adds.w	ip, r0, r3
 8011fb8:	eb42 0106 	adc.w	r1, r2, r6
 8011fbc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011fc0:	4817      	ldr	r0, [pc, #92]	@ (8012020 <rmw_time_equal+0xa0>)
 8011fc2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011fc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	4298      	cmp	r0, r3
 8011fca:	41b2      	sbcs	r2, r6
 8011fcc:	d31c      	bcc.n	8012008 <rmw_time_equal+0x88>
 8011fce:	4c15      	ldr	r4, [pc, #84]	@ (8012024 <rmw_time_equal+0xa4>)
 8011fd0:	fba3 3204 	umull	r3, r2, r3, r4
 8011fd4:	fb04 2206 	mla	r2, r4, r6, r2
 8011fd8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011fdc:	43de      	mvns	r6, r3
 8011fde:	1a84      	subs	r4, r0, r2
 8011fe0:	42ae      	cmp	r6, r5
 8011fe2:	41bc      	sbcs	r4, r7
 8011fe4:	d315      	bcc.n	8012012 <rmw_time_equal+0x92>
 8011fe6:	195b      	adds	r3, r3, r5
 8011fe8:	eb42 0207 	adc.w	r2, r2, r7
 8011fec:	428a      	cmp	r2, r1
 8011fee:	bf08      	it	eq
 8011ff0:	4563      	cmpeq	r3, ip
 8011ff2:	bf0c      	ite	eq
 8011ff4:	2001      	moveq	r0, #1
 8011ff6:	2000      	movne	r0, #0
 8011ff8:	b004      	add	sp, #16
 8011ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8011ffc:	4770      	bx	lr
 8011ffe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8012002:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012006:	e7d9      	b.n	8011fbc <rmw_time_equal+0x3c>
 8012008:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801200c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8012010:	e7ec      	b.n	8011fec <rmw_time_equal+0x6c>
 8012012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012016:	4602      	mov	r2, r0
 8012018:	e7e8      	b.n	8011fec <rmw_time_equal+0x6c>
 801201a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801201e:	e7cd      	b.n	8011fbc <rmw_time_equal+0x3c>
 8012020:	25c17d04 	.word	0x25c17d04
 8012024:	3b9aca00 	.word	0x3b9aca00

08012028 <rmw_time_total_nsec>:
 8012028:	b470      	push	{r4, r5, r6}
 801202a:	b085      	sub	sp, #20
 801202c:	ac04      	add	r4, sp, #16
 801202e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8012032:	4603      	mov	r3, r0
 8012034:	4912      	ldr	r1, [pc, #72]	@ (8012080 <rmw_time_total_nsec+0x58>)
 8012036:	9e03      	ldr	r6, [sp, #12]
 8012038:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801203c:	2202      	movs	r2, #2
 801203e:	4299      	cmp	r1, r3
 8012040:	41aa      	sbcs	r2, r5
 8012042:	d311      	bcc.n	8012068 <rmw_time_total_nsec+0x40>
 8012044:	4c0f      	ldr	r4, [pc, #60]	@ (8012084 <rmw_time_total_nsec+0x5c>)
 8012046:	fba3 3204 	umull	r3, r2, r3, r4
 801204a:	fb04 2205 	mla	r2, r4, r5, r2
 801204e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012052:	43dd      	mvns	r5, r3
 8012054:	1a8c      	subs	r4, r1, r2
 8012056:	4285      	cmp	r5, r0
 8012058:	41b4      	sbcs	r4, r6
 801205a:	d30c      	bcc.n	8012076 <rmw_time_total_nsec+0x4e>
 801205c:	1818      	adds	r0, r3, r0
 801205e:	eb42 0106 	adc.w	r1, r2, r6
 8012062:	b005      	add	sp, #20
 8012064:	bc70      	pop	{r4, r5, r6}
 8012066:	4770      	bx	lr
 8012068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801206c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012070:	b005      	add	sp, #20
 8012072:	bc70      	pop	{r4, r5, r6}
 8012074:	4770      	bx	lr
 8012076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801207a:	b005      	add	sp, #20
 801207c:	bc70      	pop	{r4, r5, r6}
 801207e:	4770      	bx	lr
 8012080:	25c17d04 	.word	0x25c17d04
 8012084:	3b9aca00 	.word	0x3b9aca00

08012088 <rmw_validate_full_topic_name>:
 8012088:	2800      	cmp	r0, #0
 801208a:	d057      	beq.n	801213c <rmw_validate_full_topic_name+0xb4>
 801208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012090:	460d      	mov	r5, r1
 8012092:	2900      	cmp	r1, #0
 8012094:	d054      	beq.n	8012140 <rmw_validate_full_topic_name+0xb8>
 8012096:	4616      	mov	r6, r2
 8012098:	4604      	mov	r4, r0
 801209a:	f7ee f919 	bl	80002d0 <strlen>
 801209e:	b148      	cbz	r0, 80120b4 <rmw_validate_full_topic_name+0x2c>
 80120a0:	7823      	ldrb	r3, [r4, #0]
 80120a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80120a4:	d00d      	beq.n	80120c2 <rmw_validate_full_topic_name+0x3a>
 80120a6:	2302      	movs	r3, #2
 80120a8:	602b      	str	r3, [r5, #0]
 80120aa:	b13e      	cbz	r6, 80120bc <rmw_validate_full_topic_name+0x34>
 80120ac:	2000      	movs	r0, #0
 80120ae:	6030      	str	r0, [r6, #0]
 80120b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120b4:	2301      	movs	r3, #1
 80120b6:	602b      	str	r3, [r5, #0]
 80120b8:	2e00      	cmp	r6, #0
 80120ba:	d1f7      	bne.n	80120ac <rmw_validate_full_topic_name+0x24>
 80120bc:	2000      	movs	r0, #0
 80120be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c2:	1e43      	subs	r3, r0, #1
 80120c4:	5ce2      	ldrb	r2, [r4, r3]
 80120c6:	2a2f      	cmp	r2, #47	@ 0x2f
 80120c8:	d03c      	beq.n	8012144 <rmw_validate_full_topic_name+0xbc>
 80120ca:	1e63      	subs	r3, r4, #1
 80120cc:	eb03 0800 	add.w	r8, r3, r0
 80120d0:	f1c4 0e01 	rsb	lr, r4, #1
 80120d4:	eb0e 0703 	add.w	r7, lr, r3
 80120d8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80120dc:	f021 0220 	bic.w	r2, r1, #32
 80120e0:	3a41      	subs	r2, #65	@ 0x41
 80120e2:	2a19      	cmp	r2, #25
 80120e4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80120e8:	d90b      	bls.n	8012102 <rmw_validate_full_topic_name+0x7a>
 80120ea:	295f      	cmp	r1, #95	@ 0x5f
 80120ec:	d009      	beq.n	8012102 <rmw_validate_full_topic_name+0x7a>
 80120ee:	f1bc 0f0a 	cmp.w	ip, #10
 80120f2:	d906      	bls.n	8012102 <rmw_validate_full_topic_name+0x7a>
 80120f4:	2304      	movs	r3, #4
 80120f6:	602b      	str	r3, [r5, #0]
 80120f8:	2e00      	cmp	r6, #0
 80120fa:	d0df      	beq.n	80120bc <rmw_validate_full_topic_name+0x34>
 80120fc:	6037      	str	r7, [r6, #0]
 80120fe:	2000      	movs	r0, #0
 8012100:	e7d6      	b.n	80120b0 <rmw_validate_full_topic_name+0x28>
 8012102:	4543      	cmp	r3, r8
 8012104:	d1e6      	bne.n	80120d4 <rmw_validate_full_topic_name+0x4c>
 8012106:	4f1a      	ldr	r7, [pc, #104]	@ (8012170 <rmw_validate_full_topic_name+0xe8>)
 8012108:	2301      	movs	r3, #1
 801210a:	e004      	b.n	8012116 <rmw_validate_full_topic_name+0x8e>
 801210c:	4298      	cmp	r0, r3
 801210e:	f104 0401 	add.w	r4, r4, #1
 8012112:	d91c      	bls.n	801214e <rmw_validate_full_topic_name+0xc6>
 8012114:	4613      	mov	r3, r2
 8012116:	4298      	cmp	r0, r3
 8012118:	f103 0201 	add.w	r2, r3, #1
 801211c:	d0f6      	beq.n	801210c <rmw_validate_full_topic_name+0x84>
 801211e:	7821      	ldrb	r1, [r4, #0]
 8012120:	292f      	cmp	r1, #47	@ 0x2f
 8012122:	d1f3      	bne.n	801210c <rmw_validate_full_topic_name+0x84>
 8012124:	7861      	ldrb	r1, [r4, #1]
 8012126:	292f      	cmp	r1, #47	@ 0x2f
 8012128:	d01c      	beq.n	8012164 <rmw_validate_full_topic_name+0xdc>
 801212a:	5dc9      	ldrb	r1, [r1, r7]
 801212c:	0749      	lsls	r1, r1, #29
 801212e:	d5ed      	bpl.n	801210c <rmw_validate_full_topic_name+0x84>
 8012130:	2206      	movs	r2, #6
 8012132:	602a      	str	r2, [r5, #0]
 8012134:	2e00      	cmp	r6, #0
 8012136:	d0c1      	beq.n	80120bc <rmw_validate_full_topic_name+0x34>
 8012138:	6033      	str	r3, [r6, #0]
 801213a:	e7bf      	b.n	80120bc <rmw_validate_full_topic_name+0x34>
 801213c:	200b      	movs	r0, #11
 801213e:	4770      	bx	lr
 8012140:	200b      	movs	r0, #11
 8012142:	e7b5      	b.n	80120b0 <rmw_validate_full_topic_name+0x28>
 8012144:	2203      	movs	r2, #3
 8012146:	602a      	str	r2, [r5, #0]
 8012148:	2e00      	cmp	r6, #0
 801214a:	d1f5      	bne.n	8012138 <rmw_validate_full_topic_name+0xb0>
 801214c:	e7b6      	b.n	80120bc <rmw_validate_full_topic_name+0x34>
 801214e:	28f7      	cmp	r0, #247	@ 0xf7
 8012150:	d802      	bhi.n	8012158 <rmw_validate_full_topic_name+0xd0>
 8012152:	2000      	movs	r0, #0
 8012154:	6028      	str	r0, [r5, #0]
 8012156:	e7ab      	b.n	80120b0 <rmw_validate_full_topic_name+0x28>
 8012158:	2307      	movs	r3, #7
 801215a:	602b      	str	r3, [r5, #0]
 801215c:	2e00      	cmp	r6, #0
 801215e:	d0ad      	beq.n	80120bc <rmw_validate_full_topic_name+0x34>
 8012160:	23f6      	movs	r3, #246	@ 0xf6
 8012162:	e7e9      	b.n	8012138 <rmw_validate_full_topic_name+0xb0>
 8012164:	2205      	movs	r2, #5
 8012166:	602a      	str	r2, [r5, #0]
 8012168:	2e00      	cmp	r6, #0
 801216a:	d1e5      	bne.n	8012138 <rmw_validate_full_topic_name+0xb0>
 801216c:	e7a6      	b.n	80120bc <rmw_validate_full_topic_name+0x34>
 801216e:	bf00      	nop
 8012170:	08019fa3 	.word	0x08019fa3

08012174 <get_memory>:
 8012174:	4603      	mov	r3, r0
 8012176:	6840      	ldr	r0, [r0, #4]
 8012178:	b158      	cbz	r0, 8012192 <get_memory+0x1e>
 801217a:	6842      	ldr	r2, [r0, #4]
 801217c:	605a      	str	r2, [r3, #4]
 801217e:	b10a      	cbz	r2, 8012184 <get_memory+0x10>
 8012180:	2100      	movs	r1, #0
 8012182:	6011      	str	r1, [r2, #0]
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	6042      	str	r2, [r0, #4]
 8012188:	b102      	cbz	r2, 801218c <get_memory+0x18>
 801218a:	6010      	str	r0, [r2, #0]
 801218c:	2200      	movs	r2, #0
 801218e:	6002      	str	r2, [r0, #0]
 8012190:	6018      	str	r0, [r3, #0]
 8012192:	4770      	bx	lr

08012194 <put_memory>:
 8012194:	680b      	ldr	r3, [r1, #0]
 8012196:	b10b      	cbz	r3, 801219c <put_memory+0x8>
 8012198:	684a      	ldr	r2, [r1, #4]
 801219a:	605a      	str	r2, [r3, #4]
 801219c:	684a      	ldr	r2, [r1, #4]
 801219e:	b102      	cbz	r2, 80121a2 <put_memory+0xe>
 80121a0:	6013      	str	r3, [r2, #0]
 80121a2:	6803      	ldr	r3, [r0, #0]
 80121a4:	428b      	cmp	r3, r1
 80121a6:	6843      	ldr	r3, [r0, #4]
 80121a8:	bf08      	it	eq
 80121aa:	6002      	streq	r2, [r0, #0]
 80121ac:	604b      	str	r3, [r1, #4]
 80121ae:	b103      	cbz	r3, 80121b2 <put_memory+0x1e>
 80121b0:	6019      	str	r1, [r3, #0]
 80121b2:	2300      	movs	r3, #0
 80121b4:	600b      	str	r3, [r1, #0]
 80121b6:	6041      	str	r1, [r0, #4]
 80121b8:	4770      	bx	lr
 80121ba:	bf00      	nop

080121bc <rmw_destroy_client>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	b128      	cbz	r0, 80121cc <rmw_destroy_client+0x10>
 80121c0:	4604      	mov	r4, r0
 80121c2:	6800      	ldr	r0, [r0, #0]
 80121c4:	460d      	mov	r5, r1
 80121c6:	f7f9 ffe1 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 80121ca:	b910      	cbnz	r0, 80121d2 <rmw_destroy_client+0x16>
 80121cc:	2401      	movs	r4, #1
 80121ce:	4620      	mov	r0, r4
 80121d0:	bd70      	pop	{r4, r5, r6, pc}
 80121d2:	6863      	ldr	r3, [r4, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d0f9      	beq.n	80121cc <rmw_destroy_client+0x10>
 80121d8:	2d00      	cmp	r5, #0
 80121da:	d0f7      	beq.n	80121cc <rmw_destroy_client+0x10>
 80121dc:	6828      	ldr	r0, [r5, #0]
 80121de:	f7f9 ffd5 	bl	800c18c <is_uxrce_rmw_identifier_valid>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d0f2      	beq.n	80121cc <rmw_destroy_client+0x10>
 80121e6:	686e      	ldr	r6, [r5, #4]
 80121e8:	2e00      	cmp	r6, #0
 80121ea:	d0ef      	beq.n	80121cc <rmw_destroy_client+0x10>
 80121ec:	6864      	ldr	r4, [r4, #4]
 80121ee:	6932      	ldr	r2, [r6, #16]
 80121f0:	6920      	ldr	r0, [r4, #16]
 80121f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80121f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121fa:	6819      	ldr	r1, [r3, #0]
 80121fc:	f7fa fbf8 	bl	800c9f0 <uxr_buffer_cancel_data>
 8012200:	4602      	mov	r2, r0
 8012202:	6920      	ldr	r0, [r4, #16]
 8012204:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012208:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801220c:	f7f9 ff3e 	bl	800c08c <run_xrce_session>
 8012210:	6920      	ldr	r0, [r4, #16]
 8012212:	6932      	ldr	r2, [r6, #16]
 8012214:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012218:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801221c:	6819      	ldr	r1, [r3, #0]
 801221e:	f7fa f97b 	bl	800c518 <uxr_buffer_delete_entity>
 8012222:	4602      	mov	r2, r0
 8012224:	6920      	ldr	r0, [r4, #16]
 8012226:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801222a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801222e:	f7f9 ff2d 	bl	800c08c <run_xrce_session>
 8012232:	2800      	cmp	r0, #0
 8012234:	4628      	mov	r0, r5
 8012236:	bf14      	ite	ne
 8012238:	2400      	movne	r4, #0
 801223a:	2402      	moveq	r4, #2
 801223c:	f7f9 fe0e 	bl	800be5c <rmw_uxrce_fini_client_memory>
 8012240:	e7c5      	b.n	80121ce <rmw_destroy_client+0x12>
 8012242:	bf00      	nop

08012244 <rmw_get_implementation_identifier>:
 8012244:	4b01      	ldr	r3, [pc, #4]	@ (801224c <rmw_get_implementation_identifier+0x8>)
 8012246:	6818      	ldr	r0, [r3, #0]
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	08019bcc 	.word	0x08019bcc

08012250 <rmw_create_guard_condition>:
 8012250:	b538      	push	{r3, r4, r5, lr}
 8012252:	4605      	mov	r5, r0
 8012254:	4807      	ldr	r0, [pc, #28]	@ (8012274 <rmw_create_guard_condition+0x24>)
 8012256:	f7ff ff8d 	bl	8012174 <get_memory>
 801225a:	b148      	cbz	r0, 8012270 <rmw_create_guard_condition+0x20>
 801225c:	6884      	ldr	r4, [r0, #8]
 801225e:	2300      	movs	r3, #0
 8012260:	7423      	strb	r3, [r4, #16]
 8012262:	61e5      	str	r5, [r4, #28]
 8012264:	f7ff ffee 	bl	8012244 <rmw_get_implementation_identifier>
 8012268:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801226c:	f104 0014 	add.w	r0, r4, #20
 8012270:	bd38      	pop	{r3, r4, r5, pc}
 8012272:	bf00      	nop
 8012274:	2001793c 	.word	0x2001793c

08012278 <rmw_destroy_guard_condition>:
 8012278:	b508      	push	{r3, lr}
 801227a:	4b08      	ldr	r3, [pc, #32]	@ (801229c <rmw_destroy_guard_condition+0x24>)
 801227c:	6819      	ldr	r1, [r3, #0]
 801227e:	b911      	cbnz	r1, 8012286 <rmw_destroy_guard_condition+0xe>
 8012280:	e00a      	b.n	8012298 <rmw_destroy_guard_condition+0x20>
 8012282:	6849      	ldr	r1, [r1, #4]
 8012284:	b141      	cbz	r1, 8012298 <rmw_destroy_guard_condition+0x20>
 8012286:	688b      	ldr	r3, [r1, #8]
 8012288:	3314      	adds	r3, #20
 801228a:	4298      	cmp	r0, r3
 801228c:	d1f9      	bne.n	8012282 <rmw_destroy_guard_condition+0xa>
 801228e:	4803      	ldr	r0, [pc, #12]	@ (801229c <rmw_destroy_guard_condition+0x24>)
 8012290:	f7ff ff80 	bl	8012194 <put_memory>
 8012294:	2000      	movs	r0, #0
 8012296:	bd08      	pop	{r3, pc}
 8012298:	2001      	movs	r0, #1
 801229a:	bd08      	pop	{r3, pc}
 801229c:	2001793c 	.word	0x2001793c

080122a0 <rmw_init_options_init>:
 80122a0:	b084      	sub	sp, #16
 80122a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122a4:	b083      	sub	sp, #12
 80122a6:	ad09      	add	r5, sp, #36	@ 0x24
 80122a8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80122ac:	b130      	cbz	r0, 80122bc <rmw_init_options_init+0x1c>
 80122ae:	4604      	mov	r4, r0
 80122b0:	4628      	mov	r0, r5
 80122b2:	f7f8 fc65 	bl	800ab80 <rcutils_allocator_is_valid>
 80122b6:	b108      	cbz	r0, 80122bc <rmw_init_options_init+0x1c>
 80122b8:	68a6      	ldr	r6, [r4, #8]
 80122ba:	b12e      	cbz	r6, 80122c8 <rmw_init_options_init+0x28>
 80122bc:	200b      	movs	r0, #11
 80122be:	b003      	add	sp, #12
 80122c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80122c4:	b004      	add	sp, #16
 80122c6:	4770      	bx	lr
 80122c8:	2200      	movs	r2, #0
 80122ca:	2300      	movs	r3, #0
 80122cc:	e9c4 2300 	strd	r2, r3, [r4]
 80122d0:	4b22      	ldr	r3, [pc, #136]	@ (801235c <rmw_init_options_init+0xbc>)
 80122d2:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801236c <rmw_init_options_init+0xcc>
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	60a3      	str	r3, [r4, #8]
 80122da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122dc:	f104 0c20 	add.w	ip, r4, #32
 80122e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122e4:	466f      	mov	r7, sp
 80122e6:	682b      	ldr	r3, [r5, #0]
 80122e8:	f8cc 3000 	str.w	r3, [ip]
 80122ec:	4638      	mov	r0, r7
 80122ee:	f8c4 e01c 	str.w	lr, [r4, #28]
 80122f2:	60e6      	str	r6, [r4, #12]
 80122f4:	f7ff fe40 	bl	8011f78 <rmw_get_default_security_options>
 80122f8:	e897 0003 	ldmia.w	r7, {r0, r1}
 80122fc:	f104 0310 	add.w	r3, r4, #16
 8012300:	e883 0003 	stmia.w	r3, {r0, r1}
 8012304:	2203      	movs	r2, #3
 8012306:	4816      	ldr	r0, [pc, #88]	@ (8012360 <rmw_init_options_init+0xc0>)
 8012308:	4916      	ldr	r1, [pc, #88]	@ (8012364 <rmw_init_options_init+0xc4>)
 801230a:	7626      	strb	r6, [r4, #24]
 801230c:	f7f9 fce6 	bl	800bcdc <rmw_uxrce_init_init_options_impl_memory>
 8012310:	4813      	ldr	r0, [pc, #76]	@ (8012360 <rmw_init_options_init+0xc0>)
 8012312:	f7ff ff2f 	bl	8012174 <get_memory>
 8012316:	b1f0      	cbz	r0, 8012356 <rmw_init_options_init+0xb6>
 8012318:	4a13      	ldr	r2, [pc, #76]	@ (8012368 <rmw_init_options_init+0xc8>)
 801231a:	6883      	ldr	r3, [r0, #8]
 801231c:	6851      	ldr	r1, [r2, #4]
 801231e:	7810      	ldrb	r0, [r2, #0]
 8012320:	6363      	str	r3, [r4, #52]	@ 0x34
 8012322:	7418      	strb	r0, [r3, #16]
 8012324:	6159      	str	r1, [r3, #20]
 8012326:	68d1      	ldr	r1, [r2, #12]
 8012328:	61d9      	str	r1, [r3, #28]
 801232a:	6911      	ldr	r1, [r2, #16]
 801232c:	6219      	str	r1, [r3, #32]
 801232e:	6951      	ldr	r1, [r2, #20]
 8012330:	6892      	ldr	r2, [r2, #8]
 8012332:	619a      	str	r2, [r3, #24]
 8012334:	6259      	str	r1, [r3, #36]	@ 0x24
 8012336:	f7fb fe7b 	bl	800e030 <uxr_nanos>
 801233a:	f003 fe59 	bl	8015ff0 <srand>
 801233e:	f003 fe85 	bl	801604c <rand>
 8012342:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012344:	6298      	str	r0, [r3, #40]	@ 0x28
 8012346:	2800      	cmp	r0, #0
 8012348:	d0f9      	beq.n	801233e <rmw_init_options_init+0x9e>
 801234a:	2000      	movs	r0, #0
 801234c:	b003      	add	sp, #12
 801234e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012352:	b004      	add	sp, #16
 8012354:	4770      	bx	lr
 8012356:	2001      	movs	r0, #1
 8012358:	e7b1      	b.n	80122be <rmw_init_options_init+0x1e>
 801235a:	bf00      	nop
 801235c:	08019bcc 	.word	0x08019bcc
 8012360:	2001794c 	.word	0x2001794c
 8012364:	200131e8 	.word	0x200131e8
 8012368:	20013034 	.word	0x20013034
 801236c:	080192dc 	.word	0x080192dc

08012370 <rmw_init_options_copy>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	b158      	cbz	r0, 801238c <rmw_init_options_copy+0x1c>
 8012374:	460d      	mov	r5, r1
 8012376:	b149      	cbz	r1, 801238c <rmw_init_options_copy+0x1c>
 8012378:	4604      	mov	r4, r0
 801237a:	6880      	ldr	r0, [r0, #8]
 801237c:	b120      	cbz	r0, 8012388 <rmw_init_options_copy+0x18>
 801237e:	4b1e      	ldr	r3, [pc, #120]	@ (80123f8 <rmw_init_options_copy+0x88>)
 8012380:	6819      	ldr	r1, [r3, #0]
 8012382:	f7ed ff45 	bl	8000210 <strcmp>
 8012386:	bb90      	cbnz	r0, 80123ee <rmw_init_options_copy+0x7e>
 8012388:	68ab      	ldr	r3, [r5, #8]
 801238a:	b113      	cbz	r3, 8012392 <rmw_init_options_copy+0x22>
 801238c:	250b      	movs	r5, #11
 801238e:	4628      	mov	r0, r5
 8012390:	bd70      	pop	{r4, r5, r6, pc}
 8012392:	4623      	mov	r3, r4
 8012394:	462a      	mov	r2, r5
 8012396:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801239a:	f8d3 c000 	ldr.w	ip, [r3]
 801239e:	6858      	ldr	r0, [r3, #4]
 80123a0:	6899      	ldr	r1, [r3, #8]
 80123a2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80123a6:	f8c2 e00c 	str.w	lr, [r2, #12]
 80123aa:	3310      	adds	r3, #16
 80123ac:	42b3      	cmp	r3, r6
 80123ae:	f8c2 c000 	str.w	ip, [r2]
 80123b2:	6050      	str	r0, [r2, #4]
 80123b4:	6091      	str	r1, [r2, #8]
 80123b6:	f102 0210 	add.w	r2, r2, #16
 80123ba:	d1ee      	bne.n	801239a <rmw_init_options_copy+0x2a>
 80123bc:	6819      	ldr	r1, [r3, #0]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	480e      	ldr	r0, [pc, #56]	@ (80123fc <rmw_init_options_copy+0x8c>)
 80123c2:	6053      	str	r3, [r2, #4]
 80123c4:	6011      	str	r1, [r2, #0]
 80123c6:	f7ff fed5 	bl	8012174 <get_memory>
 80123ca:	b198      	cbz	r0, 80123f4 <rmw_init_options_copy+0x84>
 80123cc:	6883      	ldr	r3, [r0, #8]
 80123ce:	636b      	str	r3, [r5, #52]	@ 0x34
 80123d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80123d2:	f102 0c10 	add.w	ip, r2, #16
 80123d6:	f103 0410 	add.w	r4, r3, #16
 80123da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80123e0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80123e4:	2500      	movs	r5, #0
 80123e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80123ea:	4628      	mov	r0, r5
 80123ec:	bd70      	pop	{r4, r5, r6, pc}
 80123ee:	250c      	movs	r5, #12
 80123f0:	4628      	mov	r0, r5
 80123f2:	bd70      	pop	{r4, r5, r6, pc}
 80123f4:	2501      	movs	r5, #1
 80123f6:	e7ca      	b.n	801238e <rmw_init_options_copy+0x1e>
 80123f8:	08019bcc 	.word	0x08019bcc
 80123fc:	2001794c 	.word	0x2001794c

08012400 <rmw_init_options_fini>:
 8012400:	2800      	cmp	r0, #0
 8012402:	d03d      	beq.n	8012480 <rmw_init_options_fini+0x80>
 8012404:	b510      	push	{r4, lr}
 8012406:	4604      	mov	r4, r0
 8012408:	b08e      	sub	sp, #56	@ 0x38
 801240a:	3020      	adds	r0, #32
 801240c:	f7f8 fbb8 	bl	800ab80 <rcutils_allocator_is_valid>
 8012410:	b360      	cbz	r0, 801246c <rmw_init_options_fini+0x6c>
 8012412:	68a0      	ldr	r0, [r4, #8]
 8012414:	b120      	cbz	r0, 8012420 <rmw_init_options_fini+0x20>
 8012416:	4b1c      	ldr	r3, [pc, #112]	@ (8012488 <rmw_init_options_fini+0x88>)
 8012418:	6819      	ldr	r1, [r3, #0]
 801241a:	f7ed fef9 	bl	8000210 <strcmp>
 801241e:	bb68      	cbnz	r0, 801247c <rmw_init_options_fini+0x7c>
 8012420:	4b1a      	ldr	r3, [pc, #104]	@ (801248c <rmw_init_options_fini+0x8c>)
 8012422:	6819      	ldr	r1, [r3, #0]
 8012424:	b331      	cbz	r1, 8012474 <rmw_init_options_fini+0x74>
 8012426:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012428:	e001      	b.n	801242e <rmw_init_options_fini+0x2e>
 801242a:	6849      	ldr	r1, [r1, #4]
 801242c:	b311      	cbz	r1, 8012474 <rmw_init_options_fini+0x74>
 801242e:	688b      	ldr	r3, [r1, #8]
 8012430:	429a      	cmp	r2, r3
 8012432:	d1fa      	bne.n	801242a <rmw_init_options_fini+0x2a>
 8012434:	4815      	ldr	r0, [pc, #84]	@ (801248c <rmw_init_options_fini+0x8c>)
 8012436:	f7ff fead 	bl	8012194 <put_memory>
 801243a:	4668      	mov	r0, sp
 801243c:	f7ff fd8c 	bl	8011f58 <rmw_get_zero_initialized_init_options>
 8012440:	46ee      	mov	lr, sp
 8012442:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012446:	46a4      	mov	ip, r4
 8012448:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801244c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012454:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012458:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801245c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012460:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012464:	2300      	movs	r3, #0
 8012466:	4618      	mov	r0, r3
 8012468:	b00e      	add	sp, #56	@ 0x38
 801246a:	bd10      	pop	{r4, pc}
 801246c:	230b      	movs	r3, #11
 801246e:	4618      	mov	r0, r3
 8012470:	b00e      	add	sp, #56	@ 0x38
 8012472:	bd10      	pop	{r4, pc}
 8012474:	2301      	movs	r3, #1
 8012476:	4618      	mov	r0, r3
 8012478:	b00e      	add	sp, #56	@ 0x38
 801247a:	bd10      	pop	{r4, pc}
 801247c:	230c      	movs	r3, #12
 801247e:	e7f2      	b.n	8012466 <rmw_init_options_fini+0x66>
 8012480:	230b      	movs	r3, #11
 8012482:	4618      	mov	r0, r3
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	08019bcc 	.word	0x08019bcc
 801248c:	2001794c 	.word	0x2001794c

08012490 <rmw_init>:
 8012490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012494:	b083      	sub	sp, #12
 8012496:	2800      	cmp	r0, #0
 8012498:	f000 80d3 	beq.w	8012642 <rmw_init+0x1b2>
 801249c:	460e      	mov	r6, r1
 801249e:	2900      	cmp	r1, #0
 80124a0:	f000 80cf 	beq.w	8012642 <rmw_init+0x1b2>
 80124a4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80124a6:	4605      	mov	r5, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f000 80ca 	beq.w	8012642 <rmw_init+0x1b2>
 80124ae:	4b78      	ldr	r3, [pc, #480]	@ (8012690 <rmw_init+0x200>)
 80124b0:	6880      	ldr	r0, [r0, #8]
 80124b2:	681f      	ldr	r7, [r3, #0]
 80124b4:	b128      	cbz	r0, 80124c2 <rmw_init+0x32>
 80124b6:	4639      	mov	r1, r7
 80124b8:	f7ed feaa 	bl	8000210 <strcmp>
 80124bc:	2800      	cmp	r0, #0
 80124be:	f040 80ca 	bne.w	8012656 <rmw_init+0x1c6>
 80124c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124c6:	4c73      	ldr	r4, [pc, #460]	@ (8012694 <rmw_init+0x204>)
 80124c8:	4973      	ldr	r1, [pc, #460]	@ (8012698 <rmw_init+0x208>)
 80124ca:	4874      	ldr	r0, [pc, #464]	@ (801269c <rmw_init+0x20c>)
 80124cc:	60b7      	str	r7, [r6, #8]
 80124ce:	e9c6 2300 	strd	r2, r3, [r6]
 80124d2:	68eb      	ldr	r3, [r5, #12]
 80124d4:	64b3      	str	r3, [r6, #72]	@ 0x48
 80124d6:	2201      	movs	r2, #1
 80124d8:	f7f9 fba0 	bl	800bc1c <rmw_uxrce_init_session_memory>
 80124dc:	4620      	mov	r0, r4
 80124de:	4970      	ldr	r1, [pc, #448]	@ (80126a0 <rmw_init+0x210>)
 80124e0:	2204      	movs	r2, #4
 80124e2:	f7f9 fbdb 	bl	800bc9c <rmw_uxrce_init_static_input_buffer_memory>
 80124e6:	f04f 0800 	mov.w	r8, #0
 80124ea:	486c      	ldr	r0, [pc, #432]	@ (801269c <rmw_init+0x20c>)
 80124ec:	f884 800d 	strb.w	r8, [r4, #13]
 80124f0:	f7ff fe40 	bl	8012174 <get_memory>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	f000 80a9 	beq.w	801264c <rmw_init+0x1bc>
 80124fa:	6884      	ldr	r4, [r0, #8]
 80124fc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80124fe:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8012500:	f890 c010 	ldrb.w	ip, [r0, #16]
 8012504:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8012508:	9101      	str	r1, [sp, #4]
 801250a:	6a00      	ldr	r0, [r0, #32]
 801250c:	9000      	str	r0, [sp, #0]
 801250e:	f104 0910 	add.w	r9, r4, #16
 8012512:	4661      	mov	r1, ip
 8012514:	4648      	mov	r0, r9
 8012516:	f001 fe2d 	bl	8014174 <uxr_set_custom_transport_callbacks>
 801251a:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801251e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012522:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8012526:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801252a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801252e:	495d      	ldr	r1, [pc, #372]	@ (80126a4 <rmw_init+0x214>)
 8012530:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8012534:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8012538:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801253c:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8012540:	4859      	ldr	r0, [pc, #356]	@ (80126a8 <rmw_init+0x218>)
 8012542:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8012546:	2201      	movs	r2, #1
 8012548:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801254a:	f7f9 fb47 	bl	800bbdc <rmw_uxrce_init_node_memory>
 801254e:	4957      	ldr	r1, [pc, #348]	@ (80126ac <rmw_init+0x21c>)
 8012550:	4857      	ldr	r0, [pc, #348]	@ (80126b0 <rmw_init+0x220>)
 8012552:	2205      	movs	r2, #5
 8012554:	f7f9 fb22 	bl	800bb9c <rmw_uxrce_init_subscription_memory>
 8012558:	4956      	ldr	r1, [pc, #344]	@ (80126b4 <rmw_init+0x224>)
 801255a:	4857      	ldr	r0, [pc, #348]	@ (80126b8 <rmw_init+0x228>)
 801255c:	220a      	movs	r2, #10
 801255e:	f7f9 fafd 	bl	800bb5c <rmw_uxrce_init_publisher_memory>
 8012562:	4956      	ldr	r1, [pc, #344]	@ (80126bc <rmw_init+0x22c>)
 8012564:	4856      	ldr	r0, [pc, #344]	@ (80126c0 <rmw_init+0x230>)
 8012566:	2201      	movs	r2, #1
 8012568:	f7f9 fab8 	bl	800badc <rmw_uxrce_init_service_memory>
 801256c:	4955      	ldr	r1, [pc, #340]	@ (80126c4 <rmw_init+0x234>)
 801256e:	4856      	ldr	r0, [pc, #344]	@ (80126c8 <rmw_init+0x238>)
 8012570:	2201      	movs	r2, #1
 8012572:	f7f9 fad3 	bl	800bb1c <rmw_uxrce_init_client_memory>
 8012576:	4955      	ldr	r1, [pc, #340]	@ (80126cc <rmw_init+0x23c>)
 8012578:	4855      	ldr	r0, [pc, #340]	@ (80126d0 <rmw_init+0x240>)
 801257a:	220f      	movs	r2, #15
 801257c:	f7f9 fb6e 	bl	800bc5c <rmw_uxrce_init_topic_memory>
 8012580:	4954      	ldr	r1, [pc, #336]	@ (80126d4 <rmw_init+0x244>)
 8012582:	4855      	ldr	r0, [pc, #340]	@ (80126d8 <rmw_init+0x248>)
 8012584:	2203      	movs	r2, #3
 8012586:	f7f9 fba9 	bl	800bcdc <rmw_uxrce_init_init_options_impl_memory>
 801258a:	4954      	ldr	r1, [pc, #336]	@ (80126dc <rmw_init+0x24c>)
 801258c:	4854      	ldr	r0, [pc, #336]	@ (80126e0 <rmw_init+0x250>)
 801258e:	2204      	movs	r2, #4
 8012590:	f7f9 fbc4 	bl	800bd1c <rmw_uxrce_init_wait_set_memory>
 8012594:	4953      	ldr	r1, [pc, #332]	@ (80126e4 <rmw_init+0x254>)
 8012596:	4854      	ldr	r0, [pc, #336]	@ (80126e8 <rmw_init+0x258>)
 8012598:	2204      	movs	r2, #4
 801259a:	f7f9 fbdf 	bl	800bd5c <rmw_uxrce_init_guard_condition_memory>
 801259e:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80125a0:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80125a2:	4642      	mov	r2, r8
 80125a4:	f000 faa0 	bl	8012ae8 <rmw_uxrce_transport_init>
 80125a8:	4607      	mov	r7, r0
 80125aa:	2800      	cmp	r0, #0
 80125ac:	d158      	bne.n	8012660 <rmw_init+0x1d0>
 80125ae:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80125b0:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80125b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80125b6:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80125ba:	4628      	mov	r0, r5
 80125bc:	f7fa fb9c 	bl	800ccf8 <uxr_init_session>
 80125c0:	494a      	ldr	r1, [pc, #296]	@ (80126ec <rmw_init+0x25c>)
 80125c2:	4622      	mov	r2, r4
 80125c4:	4628      	mov	r0, r5
 80125c6:	f7fa fbbb 	bl	800cd40 <uxr_set_topic_callback>
 80125ca:	4949      	ldr	r1, [pc, #292]	@ (80126f0 <rmw_init+0x260>)
 80125cc:	463a      	mov	r2, r7
 80125ce:	4628      	mov	r0, r5
 80125d0:	f7fa fbb2 	bl	800cd38 <uxr_set_status_callback>
 80125d4:	4947      	ldr	r1, [pc, #284]	@ (80126f4 <rmw_init+0x264>)
 80125d6:	463a      	mov	r2, r7
 80125d8:	4628      	mov	r0, r5
 80125da:	f7fa fbb5 	bl	800cd48 <uxr_set_request_callback>
 80125de:	4946      	ldr	r1, [pc, #280]	@ (80126f8 <rmw_init+0x268>)
 80125e0:	463a      	mov	r2, r7
 80125e2:	4628      	mov	r0, r5
 80125e4:	f7fa fbb4 	bl	800cd50 <uxr_set_reply_callback>
 80125e8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80125ec:	2304      	movs	r3, #4
 80125ee:	0092      	lsls	r2, r2, #2
 80125f0:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80125f4:	4628      	mov	r0, r5
 80125f6:	f7fa fbe9 	bl	800cdcc <uxr_create_input_reliable_stream>
 80125fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80125fe:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8012602:	0092      	lsls	r2, r2, #2
 8012604:	2304      	movs	r3, #4
 8012606:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801260a:	4628      	mov	r0, r5
 801260c:	f7fa fbb6 	bl	800cd7c <uxr_create_output_reliable_stream>
 8012610:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8012614:	4628      	mov	r0, r5
 8012616:	f7fa fbd3 	bl	800cdc0 <uxr_create_input_best_effort_stream>
 801261a:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801261e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8012622:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8012626:	3114      	adds	r1, #20
 8012628:	4628      	mov	r0, r5
 801262a:	f7fa fb95 	bl	800cd58 <uxr_create_output_best_effort_stream>
 801262e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8012632:	4628      	mov	r0, r5
 8012634:	f7fb f920 	bl	800d878 <uxr_create_session>
 8012638:	b1f8      	cbz	r0, 801267a <rmw_init+0x1ea>
 801263a:	4638      	mov	r0, r7
 801263c:	b003      	add	sp, #12
 801263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012642:	270b      	movs	r7, #11
 8012644:	4638      	mov	r0, r7
 8012646:	b003      	add	sp, #12
 8012648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801264c:	2701      	movs	r7, #1
 801264e:	4638      	mov	r0, r7
 8012650:	b003      	add	sp, #12
 8012652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012656:	270c      	movs	r7, #12
 8012658:	4638      	mov	r0, r7
 801265a:	b003      	add	sp, #12
 801265c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012660:	4648      	mov	r0, r9
 8012662:	f001 fdc9 	bl	80141f8 <uxr_close_custom_transport>
 8012666:	480d      	ldr	r0, [pc, #52]	@ (801269c <rmw_init+0x20c>)
 8012668:	4621      	mov	r1, r4
 801266a:	f7ff fd93 	bl	8012194 <put_memory>
 801266e:	4638      	mov	r0, r7
 8012670:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8012674:	b003      	add	sp, #12
 8012676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801267a:	4648      	mov	r0, r9
 801267c:	f001 fdbc 	bl	80141f8 <uxr_close_custom_transport>
 8012680:	4806      	ldr	r0, [pc, #24]	@ (801269c <rmw_init+0x20c>)
 8012682:	4621      	mov	r1, r4
 8012684:	f7ff fd86 	bl	8012194 <put_memory>
 8012688:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801268a:	2701      	movs	r7, #1
 801268c:	e7d5      	b.n	801263a <rmw_init+0x1aa>
 801268e:	bf00      	nop
 8012690:	08019bcc 	.word	0x08019bcc
 8012694:	2001799c 	.word	0x2001799c
 8012698:	20013c48 	.word	0x20013c48
 801269c:	2001798c 	.word	0x2001798c
 80126a0:	200151f0 	.word	0x200151f0
 80126a4:	2001326c 	.word	0x2001326c
 80126a8:	2001795c 	.word	0x2001795c
 80126ac:	200172f0 	.word	0x200172f0
 80126b0:	200179ac 	.word	0x200179ac
 80126b4:	20013310 	.word	0x20013310
 80126b8:	2001796c 	.word	0x2001796c
 80126bc:	20013b80 	.word	0x20013b80
 80126c0:	2001797c 	.word	0x2001797c
 80126c4:	200130a0 	.word	0x200130a0
 80126c8:	2001308c 	.word	0x2001308c
 80126cc:	20017728 	.word	0x20017728
 80126d0:	200179bc 	.word	0x200179bc
 80126d4:	200131e8 	.word	0x200131e8
 80126d8:	2001794c 	.word	0x2001794c
 80126dc:	200178cc 	.word	0x200178cc
 80126e0:	200179cc 	.word	0x200179cc
 80126e4:	20013168 	.word	0x20013168
 80126e8:	2001793c 	.word	0x2001793c
 80126ec:	08015ad1 	.word	0x08015ad1
 80126f0:	08015ac9 	.word	0x08015ac9
 80126f4:	08015b69 	.word	0x08015b69
 80126f8:	08015c05 	.word	0x08015c05

080126fc <rmw_context_fini>:
 80126fc:	4b17      	ldr	r3, [pc, #92]	@ (801275c <rmw_context_fini+0x60>)
 80126fe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	681c      	ldr	r4, [r3, #0]
 8012704:	4605      	mov	r5, r0
 8012706:	b334      	cbz	r4, 8012756 <rmw_context_fini+0x5a>
 8012708:	2600      	movs	r6, #0
 801270a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801270e:	6902      	ldr	r2, [r0, #16]
 8012710:	428a      	cmp	r2, r1
 8012712:	d018      	beq.n	8012746 <rmw_context_fini+0x4a>
 8012714:	2c00      	cmp	r4, #0
 8012716:	d1f8      	bne.n	801270a <rmw_context_fini+0xe>
 8012718:	b189      	cbz	r1, 801273e <rmw_context_fini+0x42>
 801271a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801271e:	789b      	ldrb	r3, [r3, #2]
 8012720:	2b01      	cmp	r3, #1
 8012722:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8012726:	bf14      	ite	ne
 8012728:	210a      	movne	r1, #10
 801272a:	2100      	moveq	r1, #0
 801272c:	f7fb f87c 	bl	800d828 <uxr_delete_session_retries>
 8012730:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012732:	f7f9 fb33 	bl	800bd9c <rmw_uxrce_fini_session_memory>
 8012736:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8012738:	3010      	adds	r0, #16
 801273a:	f001 fd5d 	bl	80141f8 <uxr_close_custom_transport>
 801273e:	2300      	movs	r3, #0
 8012740:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8012742:	4630      	mov	r0, r6
 8012744:	bd70      	pop	{r4, r5, r6, pc}
 8012746:	3018      	adds	r0, #24
 8012748:	f7f8 fdb8 	bl	800b2bc <rmw_destroy_node>
 801274c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801274e:	4606      	mov	r6, r0
 8012750:	2c00      	cmp	r4, #0
 8012752:	d1da      	bne.n	801270a <rmw_context_fini+0xe>
 8012754:	e7e0      	b.n	8012718 <rmw_context_fini+0x1c>
 8012756:	4626      	mov	r6, r4
 8012758:	e7de      	b.n	8012718 <rmw_context_fini+0x1c>
 801275a:	bf00      	nop
 801275c:	2001795c 	.word	0x2001795c

08012760 <create_topic>:
 8012760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012764:	4605      	mov	r5, r0
 8012766:	b084      	sub	sp, #16
 8012768:	4822      	ldr	r0, [pc, #136]	@ (80127f4 <create_topic+0x94>)
 801276a:	460f      	mov	r7, r1
 801276c:	4616      	mov	r6, r2
 801276e:	f7ff fd01 	bl	8012174 <get_memory>
 8012772:	4604      	mov	r4, r0
 8012774:	2800      	cmp	r0, #0
 8012776:	d039      	beq.n	80127ec <create_topic+0x8c>
 8012778:	692b      	ldr	r3, [r5, #16]
 801277a:	6884      	ldr	r4, [r0, #8]
 801277c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80127fc <create_topic+0x9c>
 8012780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012784:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8012788:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801278c:	1c42      	adds	r2, r0, #1
 801278e:	2102      	movs	r1, #2
 8012790:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8012794:	f7fa f8c2 	bl	800c91c <uxr_object_id>
 8012798:	223c      	movs	r2, #60	@ 0x3c
 801279a:	6120      	str	r0, [r4, #16]
 801279c:	4641      	mov	r1, r8
 801279e:	4638      	mov	r0, r7
 80127a0:	f7f9 fcda 	bl	800c158 <generate_topic_name>
 80127a4:	b1f0      	cbz	r0, 80127e4 <create_topic+0x84>
 80127a6:	4f14      	ldr	r7, [pc, #80]	@ (80127f8 <create_topic+0x98>)
 80127a8:	4630      	mov	r0, r6
 80127aa:	2264      	movs	r2, #100	@ 0x64
 80127ac:	4639      	mov	r1, r7
 80127ae:	f7f9 fca3 	bl	800c0f8 <generate_type_name>
 80127b2:	b1b8      	cbz	r0, 80127e4 <create_topic+0x84>
 80127b4:	6928      	ldr	r0, [r5, #16]
 80127b6:	2306      	movs	r3, #6
 80127b8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80127bc:	f8cd 8000 	str.w	r8, [sp]
 80127c0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80127c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80127c8:	6811      	ldr	r1, [r2, #0]
 80127ca:	696b      	ldr	r3, [r5, #20]
 80127cc:	6922      	ldr	r2, [r4, #16]
 80127ce:	f7f9 ff21 	bl	800c614 <uxr_buffer_create_topic_bin>
 80127d2:	4602      	mov	r2, r0
 80127d4:	6928      	ldr	r0, [r5, #16]
 80127d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80127da:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80127de:	f7f9 fc55 	bl	800c08c <run_xrce_session>
 80127e2:	b918      	cbnz	r0, 80127ec <create_topic+0x8c>
 80127e4:	4620      	mov	r0, r4
 80127e6:	f7f9 fb4f 	bl	800be88 <rmw_uxrce_fini_topic_memory>
 80127ea:	2400      	movs	r4, #0
 80127ec:	4620      	mov	r0, r4
 80127ee:	b004      	add	sp, #16
 80127f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f4:	200179bc 	.word	0x200179bc
 80127f8:	20017a4c 	.word	0x20017a4c
 80127fc:	20017a10 	.word	0x20017a10

08012800 <destroy_topic>:
 8012800:	b538      	push	{r3, r4, r5, lr}
 8012802:	6985      	ldr	r5, [r0, #24]
 8012804:	b1d5      	cbz	r5, 801283c <destroy_topic+0x3c>
 8012806:	4604      	mov	r4, r0
 8012808:	6928      	ldr	r0, [r5, #16]
 801280a:	6922      	ldr	r2, [r4, #16]
 801280c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012810:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012814:	6819      	ldr	r1, [r3, #0]
 8012816:	f7f9 fe7f 	bl	800c518 <uxr_buffer_delete_entity>
 801281a:	4602      	mov	r2, r0
 801281c:	6928      	ldr	r0, [r5, #16]
 801281e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012822:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012826:	f7f9 fc31 	bl	800c08c <run_xrce_session>
 801282a:	2800      	cmp	r0, #0
 801282c:	4620      	mov	r0, r4
 801282e:	bf14      	ite	ne
 8012830:	2400      	movne	r4, #0
 8012832:	2402      	moveq	r4, #2
 8012834:	f7f9 fb28 	bl	800be88 <rmw_uxrce_fini_topic_memory>
 8012838:	4620      	mov	r0, r4
 801283a:	bd38      	pop	{r3, r4, r5, pc}
 801283c:	2401      	movs	r4, #1
 801283e:	4620      	mov	r0, r4
 8012840:	bd38      	pop	{r3, r4, r5, pc}
 8012842:	bf00      	nop

08012844 <rmw_send_request>:
 8012844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012848:	4604      	mov	r4, r0
 801284a:	6800      	ldr	r0, [r0, #0]
 801284c:	b08b      	sub	sp, #44	@ 0x2c
 801284e:	460e      	mov	r6, r1
 8012850:	4615      	mov	r5, r2
 8012852:	b128      	cbz	r0, 8012860 <rmw_send_request+0x1c>
 8012854:	4b21      	ldr	r3, [pc, #132]	@ (80128dc <rmw_send_request+0x98>)
 8012856:	6819      	ldr	r1, [r3, #0]
 8012858:	f7ed fcda 	bl	8000210 <strcmp>
 801285c:	2800      	cmp	r0, #0
 801285e:	d139      	bne.n	80128d4 <rmw_send_request+0x90>
 8012860:	6864      	ldr	r4, [r4, #4]
 8012862:	6963      	ldr	r3, [r4, #20]
 8012864:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8012868:	689b      	ldr	r3, [r3, #8]
 801286a:	4798      	blx	r3
 801286c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8012870:	4630      	mov	r0, r6
 8012872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012876:	4798      	blx	r3
 8012878:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801287c:	9000      	str	r0, [sp, #0]
 801287e:	6922      	ldr	r2, [r4, #16]
 8012880:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8012882:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8012886:	ab02      	add	r3, sp, #8
 8012888:	f7fb fc72 	bl	800e170 <uxr_prepare_output_stream>
 801288c:	2700      	movs	r7, #0
 801288e:	6028      	str	r0, [r5, #0]
 8012890:	606f      	str	r7, [r5, #4]
 8012892:	b198      	cbz	r0, 80128bc <rmw_send_request+0x78>
 8012894:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012898:	a902      	add	r1, sp, #8
 801289a:	4630      	mov	r0, r6
 801289c:	4798      	blx	r3
 801289e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80128a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d00c      	beq.n	80128c4 <rmw_send_request+0x80>
 80128aa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80128ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80128b0:	f7fa fe72 	bl	800d598 <uxr_run_session_until_confirm_delivery>
 80128b4:	4638      	mov	r0, r7
 80128b6:	b00b      	add	sp, #44	@ 0x2c
 80128b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128bc:	2001      	movs	r0, #1
 80128be:	b00b      	add	sp, #44	@ 0x2c
 80128c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80128c8:	f7fa faa6 	bl	800ce18 <uxr_flash_output_streams>
 80128cc:	4638      	mov	r0, r7
 80128ce:	b00b      	add	sp, #44	@ 0x2c
 80128d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128d4:	200c      	movs	r0, #12
 80128d6:	b00b      	add	sp, #44	@ 0x2c
 80128d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128dc:	08019bcc 	.word	0x08019bcc

080128e0 <rmw_take_request>:
 80128e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128e4:	4605      	mov	r5, r0
 80128e6:	6800      	ldr	r0, [r0, #0]
 80128e8:	b089      	sub	sp, #36	@ 0x24
 80128ea:	460c      	mov	r4, r1
 80128ec:	4690      	mov	r8, r2
 80128ee:	461e      	mov	r6, r3
 80128f0:	b128      	cbz	r0, 80128fe <rmw_take_request+0x1e>
 80128f2:	4b28      	ldr	r3, [pc, #160]	@ (8012994 <rmw_take_request+0xb4>)
 80128f4:	6819      	ldr	r1, [r3, #0]
 80128f6:	f7ed fc8b 	bl	8000210 <strcmp>
 80128fa:	2800      	cmp	r0, #0
 80128fc:	d146      	bne.n	801298c <rmw_take_request+0xac>
 80128fe:	b10e      	cbz	r6, 8012904 <rmw_take_request+0x24>
 8012900:	2300      	movs	r3, #0
 8012902:	7033      	strb	r3, [r6, #0]
 8012904:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012908:	f7f9 fb42 	bl	800bf90 <rmw_uxrce_clean_expired_static_input_buffer>
 801290c:	4648      	mov	r0, r9
 801290e:	f7f9 fb17 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012912:	4607      	mov	r7, r0
 8012914:	b3b0      	cbz	r0, 8012984 <rmw_take_request+0xa4>
 8012916:	6885      	ldr	r5, [r0, #8]
 8012918:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801291c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8012920:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8012924:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8012928:	7423      	strb	r3, [r4, #16]
 801292a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801292e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8012932:	74e2      	strb	r2, [r4, #19]
 8012934:	f8a4 3011 	strh.w	r3, [r4, #17]
 8012938:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801293c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8012940:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8012944:	61e1      	str	r1, [r4, #28]
 8012946:	6162      	str	r2, [r4, #20]
 8012948:	61a3      	str	r3, [r4, #24]
 801294a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	4798      	blx	r3
 8012952:	6844      	ldr	r4, [r0, #4]
 8012954:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8012958:	f105 0110 	add.w	r1, r5, #16
 801295c:	4668      	mov	r0, sp
 801295e:	f7f9 fd13 	bl	800c388 <ucdr_init_buffer>
 8012962:	68e3      	ldr	r3, [r4, #12]
 8012964:	4641      	mov	r1, r8
 8012966:	4668      	mov	r0, sp
 8012968:	4798      	blx	r3
 801296a:	4639      	mov	r1, r7
 801296c:	4604      	mov	r4, r0
 801296e:	480a      	ldr	r0, [pc, #40]	@ (8012998 <rmw_take_request+0xb8>)
 8012970:	f7ff fc10 	bl	8012194 <put_memory>
 8012974:	b106      	cbz	r6, 8012978 <rmw_take_request+0x98>
 8012976:	7034      	strb	r4, [r6, #0]
 8012978:	f084 0001 	eor.w	r0, r4, #1
 801297c:	b2c0      	uxtb	r0, r0
 801297e:	b009      	add	sp, #36	@ 0x24
 8012980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012984:	2001      	movs	r0, #1
 8012986:	b009      	add	sp, #36	@ 0x24
 8012988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801298c:	200c      	movs	r0, #12
 801298e:	b009      	add	sp, #36	@ 0x24
 8012990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012994:	08019bcc 	.word	0x08019bcc
 8012998:	2001799c 	.word	0x2001799c

0801299c <rmw_send_response>:
 801299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801299e:	4605      	mov	r5, r0
 80129a0:	6800      	ldr	r0, [r0, #0]
 80129a2:	b091      	sub	sp, #68	@ 0x44
 80129a4:	460c      	mov	r4, r1
 80129a6:	4616      	mov	r6, r2
 80129a8:	b128      	cbz	r0, 80129b6 <rmw_send_response+0x1a>
 80129aa:	4b29      	ldr	r3, [pc, #164]	@ (8012a50 <rmw_send_response+0xb4>)
 80129ac:	6819      	ldr	r1, [r3, #0]
 80129ae:	f7ed fc2f 	bl	8000210 <strcmp>
 80129b2:	2800      	cmp	r0, #0
 80129b4:	d141      	bne.n	8012a3a <rmw_send_response+0x9e>
 80129b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80129ba:	9306      	str	r3, [sp, #24]
 80129bc:	4623      	mov	r3, r4
 80129be:	9207      	str	r2, [sp, #28]
 80129c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80129c4:	686d      	ldr	r5, [r5, #4]
 80129c6:	789b      	ldrb	r3, [r3, #2]
 80129c8:	68a1      	ldr	r1, [r4, #8]
 80129ca:	f88d 2017 	strb.w	r2, [sp, #23]
 80129ce:	f88d 3016 	strb.w	r3, [sp, #22]
 80129d2:	68e2      	ldr	r2, [r4, #12]
 80129d4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80129d8:	6860      	ldr	r0, [r4, #4]
 80129da:	f8ad 3014 	strh.w	r3, [sp, #20]
 80129de:	ab02      	add	r3, sp, #8
 80129e0:	c307      	stmia	r3!, {r0, r1, r2}
 80129e2:	696b      	ldr	r3, [r5, #20]
 80129e4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80129e6:	68db      	ldr	r3, [r3, #12]
 80129e8:	4798      	blx	r3
 80129ea:	6844      	ldr	r4, [r0, #4]
 80129ec:	4630      	mov	r0, r6
 80129ee:	6923      	ldr	r3, [r4, #16]
 80129f0:	4798      	blx	r3
 80129f2:	f100 0318 	add.w	r3, r0, #24
 80129f6:	6938      	ldr	r0, [r7, #16]
 80129f8:	9300      	str	r3, [sp, #0]
 80129fa:	692a      	ldr	r2, [r5, #16]
 80129fc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80129fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a02:	ab08      	add	r3, sp, #32
 8012a04:	f7fb fbb4 	bl	800e170 <uxr_prepare_output_stream>
 8012a08:	b910      	cbnz	r0, 8012a10 <rmw_send_response+0x74>
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	b011      	add	sp, #68	@ 0x44
 8012a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a10:	a902      	add	r1, sp, #8
 8012a12:	a808      	add	r0, sp, #32
 8012a14:	f7fc fce4 	bl	800f3e0 <uxr_serialize_SampleIdentity>
 8012a18:	68a3      	ldr	r3, [r4, #8]
 8012a1a:	a908      	add	r1, sp, #32
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	4798      	blx	r3
 8012a20:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8012a24:	6938      	ldr	r0, [r7, #16]
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d00a      	beq.n	8012a40 <rmw_send_response+0xa4>
 8012a2a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8012a2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a30:	f7fa fdb2 	bl	800d598 <uxr_run_session_until_confirm_delivery>
 8012a34:	2000      	movs	r0, #0
 8012a36:	b011      	add	sp, #68	@ 0x44
 8012a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a3a:	200c      	movs	r0, #12
 8012a3c:	b011      	add	sp, #68	@ 0x44
 8012a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012a44:	f7fa f9e8 	bl	800ce18 <uxr_flash_output_streams>
 8012a48:	2000      	movs	r0, #0
 8012a4a:	b011      	add	sp, #68	@ 0x44
 8012a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a4e:	bf00      	nop
 8012a50:	08019bcc 	.word	0x08019bcc

08012a54 <rmw_take_response>:
 8012a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a58:	4604      	mov	r4, r0
 8012a5a:	6800      	ldr	r0, [r0, #0]
 8012a5c:	b088      	sub	sp, #32
 8012a5e:	4688      	mov	r8, r1
 8012a60:	4617      	mov	r7, r2
 8012a62:	461d      	mov	r5, r3
 8012a64:	b120      	cbz	r0, 8012a70 <rmw_take_response+0x1c>
 8012a66:	4b1e      	ldr	r3, [pc, #120]	@ (8012ae0 <rmw_take_response+0x8c>)
 8012a68:	6819      	ldr	r1, [r3, #0]
 8012a6a:	f7ed fbd1 	bl	8000210 <strcmp>
 8012a6e:	bb78      	cbnz	r0, 8012ad0 <rmw_take_response+0x7c>
 8012a70:	b10d      	cbz	r5, 8012a76 <rmw_take_response+0x22>
 8012a72:	2300      	movs	r3, #0
 8012a74:	702b      	strb	r3, [r5, #0]
 8012a76:	6864      	ldr	r4, [r4, #4]
 8012a78:	f7f9 fa8a 	bl	800bf90 <rmw_uxrce_clean_expired_static_input_buffer>
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	f7f9 fa5f 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012a82:	4606      	mov	r6, r0
 8012a84:	b340      	cbz	r0, 8012ad8 <rmw_take_response+0x84>
 8012a86:	6963      	ldr	r3, [r4, #20]
 8012a88:	6884      	ldr	r4, [r0, #8]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8012a90:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8012a94:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8012a98:	4798      	blx	r3
 8012a9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012a9e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8012aa2:	f104 0110 	add.w	r1, r4, #16
 8012aa6:	4668      	mov	r0, sp
 8012aa8:	f7f9 fc6e 	bl	800c388 <ucdr_init_buffer>
 8012aac:	4639      	mov	r1, r7
 8012aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ab2:	4668      	mov	r0, sp
 8012ab4:	4798      	blx	r3
 8012ab6:	4631      	mov	r1, r6
 8012ab8:	4604      	mov	r4, r0
 8012aba:	480a      	ldr	r0, [pc, #40]	@ (8012ae4 <rmw_take_response+0x90>)
 8012abc:	f7ff fb6a 	bl	8012194 <put_memory>
 8012ac0:	b105      	cbz	r5, 8012ac4 <rmw_take_response+0x70>
 8012ac2:	702c      	strb	r4, [r5, #0]
 8012ac4:	f084 0001 	eor.w	r0, r4, #1
 8012ac8:	b2c0      	uxtb	r0, r0
 8012aca:	b008      	add	sp, #32
 8012acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad0:	200c      	movs	r0, #12
 8012ad2:	b008      	add	sp, #32
 8012ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ad8:	2001      	movs	r0, #1
 8012ada:	b008      	add	sp, #32
 8012adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ae0:	08019bcc 	.word	0x08019bcc
 8012ae4:	2001799c 	.word	0x2001799c

08012ae8 <rmw_uxrce_transport_init>:
 8012ae8:	b508      	push	{r3, lr}
 8012aea:	b108      	cbz	r0, 8012af0 <rmw_uxrce_transport_init+0x8>
 8012aec:	f100 0210 	add.w	r2, r0, #16
 8012af0:	b139      	cbz	r1, 8012b02 <rmw_uxrce_transport_init+0x1a>
 8012af2:	6949      	ldr	r1, [r1, #20]
 8012af4:	4610      	mov	r0, r2
 8012af6:	f001 fb4b 	bl	8014190 <uxr_init_custom_transport>
 8012afa:	f080 0001 	eor.w	r0, r0, #1
 8012afe:	b2c0      	uxtb	r0, r0
 8012b00:	bd08      	pop	{r3, pc}
 8012b02:	4b04      	ldr	r3, [pc, #16]	@ (8012b14 <rmw_uxrce_transport_init+0x2c>)
 8012b04:	4610      	mov	r0, r2
 8012b06:	6859      	ldr	r1, [r3, #4]
 8012b08:	f001 fb42 	bl	8014190 <uxr_init_custom_transport>
 8012b0c:	f080 0001 	eor.w	r0, r0, #1
 8012b10:	b2c0      	uxtb	r0, r0
 8012b12:	bd08      	pop	{r3, pc}
 8012b14:	20013034 	.word	0x20013034

08012b18 <rmw_wait>:
 8012b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b1c:	b089      	sub	sp, #36	@ 0x24
 8012b1e:	4605      	mov	r5, r0
 8012b20:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8012b22:	460e      	mov	r6, r1
 8012b24:	4698      	mov	r8, r3
 8012b26:	4691      	mov	r9, r2
 8012b28:	2a00      	cmp	r2, #0
 8012b2a:	f000 810a 	beq.w	8012d42 <rmw_wait+0x22a>
 8012b2e:	b16c      	cbz	r4, 8012b4c <rmw_wait+0x34>
 8012b30:	4bae      	ldr	r3, [pc, #696]	@ (8012dec <rmw_wait+0x2d4>)
 8012b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b34:	af04      	add	r7, sp, #16
 8012b36:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8012b3a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012b3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012b42:	f7ff fa1d 	bl	8011f80 <rmw_time_equal>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	f000 8127 	beq.w	8012d9a <rmw_wait+0x282>
 8012b4c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012b50:	f7f9 fa1e 	bl	800bf90 <rmw_uxrce_clean_expired_static_input_buffer>
 8012b54:	4ba6      	ldr	r3, [pc, #664]	@ (8012df0 <rmw_wait+0x2d8>)
 8012b56:	681c      	ldr	r4, [r3, #0]
 8012b58:	b14c      	cbz	r4, 8012b6e <rmw_wait+0x56>
 8012b5a:	4623      	mov	r3, r4
 8012b5c:	2100      	movs	r1, #0
 8012b5e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8012b62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012b66:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1f7      	bne.n	8012b5e <rmw_wait+0x46>
 8012b6e:	f1b9 0f00 	cmp.w	r9, #0
 8012b72:	d011      	beq.n	8012b98 <rmw_wait+0x80>
 8012b74:	f8d9 1000 	ldr.w	r1, [r9]
 8012b78:	b171      	cbz	r1, 8012b98 <rmw_wait+0x80>
 8012b7a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	2001      	movs	r0, #1
 8012b82:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012b86:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8012b88:	6912      	ldr	r2, [r2, #16]
 8012b8a:	3301      	adds	r3, #1
 8012b8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012b90:	4299      	cmp	r1, r3
 8012b92:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012b96:	d1f4      	bne.n	8012b82 <rmw_wait+0x6a>
 8012b98:	f1b8 0f00 	cmp.w	r8, #0
 8012b9c:	d011      	beq.n	8012bc2 <rmw_wait+0xaa>
 8012b9e:	f8d8 1000 	ldr.w	r1, [r8]
 8012ba2:	b171      	cbz	r1, 8012bc2 <rmw_wait+0xaa>
 8012ba4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	2001      	movs	r0, #1
 8012bac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012bb0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8012bb2:	6912      	ldr	r2, [r2, #16]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012bba:	4299      	cmp	r1, r3
 8012bbc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012bc0:	d1f4      	bne.n	8012bac <rmw_wait+0x94>
 8012bc2:	b185      	cbz	r5, 8012be6 <rmw_wait+0xce>
 8012bc4:	6829      	ldr	r1, [r5, #0]
 8012bc6:	b171      	cbz	r1, 8012be6 <rmw_wait+0xce>
 8012bc8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	2001      	movs	r0, #1
 8012bd0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012bd4:	6a12      	ldr	r2, [r2, #32]
 8012bd6:	6912      	ldr	r2, [r2, #16]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012bde:	4299      	cmp	r1, r3
 8012be0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012be4:	d1f4      	bne.n	8012bd0 <rmw_wait+0xb8>
 8012be6:	b34c      	cbz	r4, 8012c3c <rmw_wait+0x124>
 8012be8:	4622      	mov	r2, r4
 8012bea:	2300      	movs	r3, #0
 8012bec:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012bf0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8012bf4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8012bf8:	440b      	add	r3, r1
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2a00      	cmp	r2, #0
 8012bfe:	d1f5      	bne.n	8012bec <rmw_wait+0xd4>
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	f000 8084 	beq.w	8012d0e <rmw_wait+0x1f6>
 8012c06:	1c7a      	adds	r2, r7, #1
 8012c08:	d00d      	beq.n	8012c26 <rmw_wait+0x10e>
 8012c0a:	ee07 7a90 	vmov	s15, r7
 8012c0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012c12:	ee07 3a90 	vmov	s15, r3
 8012c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c1e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8012c22:	ee17 7a90 	vmov	r7, s15
 8012c26:	68a0      	ldr	r0, [r4, #8]
 8012c28:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8012c2c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f040 8090 	bne.w	8012d56 <rmw_wait+0x23e>
 8012c36:	6864      	ldr	r4, [r4, #4]
 8012c38:	2c00      	cmp	r4, #0
 8012c3a:	d1f4      	bne.n	8012c26 <rmw_wait+0x10e>
 8012c3c:	f1b9 0f00 	cmp.w	r9, #0
 8012c40:	f000 80bc 	beq.w	8012dbc <rmw_wait+0x2a4>
 8012c44:	f8d9 7000 	ldr.w	r7, [r9]
 8012c48:	2f00      	cmp	r7, #0
 8012c4a:	f000 808e 	beq.w	8012d6a <rmw_wait+0x252>
 8012c4e:	2400      	movs	r4, #0
 8012c50:	4627      	mov	r7, r4
 8012c52:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012c56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c5a:	f7f9 f971 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d05f      	beq.n	8012d22 <rmw_wait+0x20a>
 8012c62:	f8d9 3000 	ldr.w	r3, [r9]
 8012c66:	3401      	adds	r4, #1
 8012c68:	42a3      	cmp	r3, r4
 8012c6a:	f04f 0701 	mov.w	r7, #1
 8012c6e:	d8f0      	bhi.n	8012c52 <rmw_wait+0x13a>
 8012c70:	f1b8 0f00 	cmp.w	r8, #0
 8012c74:	d012      	beq.n	8012c9c <rmw_wait+0x184>
 8012c76:	f8d8 3000 	ldr.w	r3, [r8]
 8012c7a:	b17b      	cbz	r3, 8012c9c <rmw_wait+0x184>
 8012c7c:	2400      	movs	r4, #0
 8012c7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012c82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c86:	f7f9 f95b 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	d051      	beq.n	8012d32 <rmw_wait+0x21a>
 8012c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c92:	3401      	adds	r4, #1
 8012c94:	42a3      	cmp	r3, r4
 8012c96:	f04f 0701 	mov.w	r7, #1
 8012c9a:	d8f0      	bhi.n	8012c7e <rmw_wait+0x166>
 8012c9c:	b1dd      	cbz	r5, 8012cd6 <rmw_wait+0x1be>
 8012c9e:	682b      	ldr	r3, [r5, #0]
 8012ca0:	b1cb      	cbz	r3, 8012cd6 <rmw_wait+0x1be>
 8012ca2:	2400      	movs	r4, #0
 8012ca4:	686b      	ldr	r3, [r5, #4]
 8012ca6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012caa:	f7f9 f949 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012cae:	b158      	cbz	r0, 8012cc8 <rmw_wait+0x1b0>
 8012cb0:	682b      	ldr	r3, [r5, #0]
 8012cb2:	3401      	adds	r4, #1
 8012cb4:	42a3      	cmp	r3, r4
 8012cb6:	d969      	bls.n	8012d8c <rmw_wait+0x274>
 8012cb8:	686b      	ldr	r3, [r5, #4]
 8012cba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012cbe:	2701      	movs	r7, #1
 8012cc0:	f7f9 f93e 	bl	800bf40 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d1f3      	bne.n	8012cb0 <rmw_wait+0x198>
 8012cc8:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012ccc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012cd0:	3401      	adds	r4, #1
 8012cd2:	42a3      	cmp	r3, r4
 8012cd4:	d8e6      	bhi.n	8012ca4 <rmw_wait+0x18c>
 8012cd6:	b1a6      	cbz	r6, 8012d02 <rmw_wait+0x1ea>
 8012cd8:	6834      	ldr	r4, [r6, #0]
 8012cda:	b194      	cbz	r4, 8012d02 <rmw_wait+0x1ea>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	461d      	mov	r5, r3
 8012ce0:	e004      	b.n	8012cec <rmw_wait+0x1d4>
 8012ce2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	42a3      	cmp	r3, r4
 8012cea:	d00a      	beq.n	8012d02 <rmw_wait+0x1ea>
 8012cec:	6870      	ldr	r0, [r6, #4]
 8012cee:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8012cf2:	7c0a      	ldrb	r2, [r1, #16]
 8012cf4:	2a00      	cmp	r2, #0
 8012cf6:	d0f4      	beq.n	8012ce2 <rmw_wait+0x1ca>
 8012cf8:	3301      	adds	r3, #1
 8012cfa:	42a3      	cmp	r3, r4
 8012cfc:	740d      	strb	r5, [r1, #16]
 8012cfe:	4617      	mov	r7, r2
 8012d00:	d1f4      	bne.n	8012cec <rmw_wait+0x1d4>
 8012d02:	2f00      	cmp	r7, #0
 8012d04:	d03e      	beq.n	8012d84 <rmw_wait+0x26c>
 8012d06:	2000      	movs	r0, #0
 8012d08:	b009      	add	sp, #36	@ 0x24
 8012d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d0e:	68a0      	ldr	r0, [r4, #8]
 8012d10:	2100      	movs	r1, #0
 8012d12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d16:	f7fa fc05 	bl	800d524 <uxr_run_session_timeout>
 8012d1a:	6864      	ldr	r4, [r4, #4]
 8012d1c:	2c00      	cmp	r4, #0
 8012d1e:	d1f6      	bne.n	8012d0e <rmw_wait+0x1f6>
 8012d20:	e78c      	b.n	8012c3c <rmw_wait+0x124>
 8012d22:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012d26:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012d2a:	3401      	adds	r4, #1
 8012d2c:	42a3      	cmp	r3, r4
 8012d2e:	d890      	bhi.n	8012c52 <rmw_wait+0x13a>
 8012d30:	e79e      	b.n	8012c70 <rmw_wait+0x158>
 8012d32:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012d36:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012d3a:	3401      	adds	r4, #1
 8012d3c:	429c      	cmp	r4, r3
 8012d3e:	d39e      	bcc.n	8012c7e <rmw_wait+0x166>
 8012d40:	e7ac      	b.n	8012c9c <rmw_wait+0x184>
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f47f aef3 	bne.w	8012b2e <rmw_wait+0x16>
 8012d48:	2800      	cmp	r0, #0
 8012d4a:	f47f aef0 	bne.w	8012b2e <rmw_wait+0x16>
 8012d4e:	2900      	cmp	r1, #0
 8012d50:	f47f aeed 	bne.w	8012b2e <rmw_wait+0x16>
 8012d54:	e7d7      	b.n	8012d06 <rmw_wait+0x1ee>
 8012d56:	4639      	mov	r1, r7
 8012d58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012d5c:	f7fa fbfc 	bl	800d558 <uxr_run_session_until_data>
 8012d60:	6864      	ldr	r4, [r4, #4]
 8012d62:	2c00      	cmp	r4, #0
 8012d64:	f47f af5f 	bne.w	8012c26 <rmw_wait+0x10e>
 8012d68:	e768      	b.n	8012c3c <rmw_wait+0x124>
 8012d6a:	f1b8 0f00 	cmp.w	r8, #0
 8012d6e:	d032      	beq.n	8012dd6 <rmw_wait+0x2be>
 8012d70:	f8d8 3000 	ldr.w	r3, [r8]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d181      	bne.n	8012c7c <rmw_wait+0x164>
 8012d78:	461f      	mov	r7, r3
 8012d7a:	2d00      	cmp	r5, #0
 8012d7c:	d18f      	bne.n	8012c9e <rmw_wait+0x186>
 8012d7e:	462f      	mov	r7, r5
 8012d80:	2e00      	cmp	r6, #0
 8012d82:	d1a9      	bne.n	8012cd8 <rmw_wait+0x1c0>
 8012d84:	2002      	movs	r0, #2
 8012d86:	b009      	add	sp, #36	@ 0x24
 8012d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d8c:	2e00      	cmp	r6, #0
 8012d8e:	d0ba      	beq.n	8012d06 <rmw_wait+0x1ee>
 8012d90:	6834      	ldr	r4, [r6, #0]
 8012d92:	2701      	movs	r7, #1
 8012d94:	2c00      	cmp	r4, #0
 8012d96:	d1a1      	bne.n	8012cdc <rmw_wait+0x1c4>
 8012d98:	e7b5      	b.n	8012d06 <rmw_wait+0x1ee>
 8012d9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012d9e:	f7ff f943 	bl	8012028 <rmw_time_total_nsec>
 8012da2:	2300      	movs	r3, #0
 8012da4:	4a13      	ldr	r2, [pc, #76]	@ (8012df4 <rmw_wait+0x2dc>)
 8012da6:	f7ed ff7f 	bl	8000ca8 <__aeabi_uldivmod>
 8012daa:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8012dae:	f171 0300 	sbcs.w	r3, r1, #0
 8012db2:	4607      	mov	r7, r0
 8012db4:	bfa8      	it	ge
 8012db6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8012dba:	e6c9      	b.n	8012b50 <rmw_wait+0x38>
 8012dbc:	f1b8 0f00 	cmp.w	r8, #0
 8012dc0:	d009      	beq.n	8012dd6 <rmw_wait+0x2be>
 8012dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8012dc6:	464f      	mov	r7, r9
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f47f af57 	bne.w	8012c7c <rmw_wait+0x164>
 8012dce:	2d00      	cmp	r5, #0
 8012dd0:	f47f af65 	bne.w	8012c9e <rmw_wait+0x186>
 8012dd4:	e7d3      	b.n	8012d7e <rmw_wait+0x266>
 8012dd6:	b17d      	cbz	r5, 8012df8 <rmw_wait+0x2e0>
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	4647      	mov	r7, r8
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f47f af60 	bne.w	8012ca2 <rmw_wait+0x18a>
 8012de2:	2e00      	cmp	r6, #0
 8012de4:	f47f af78 	bne.w	8012cd8 <rmw_wait+0x1c0>
 8012de8:	e7cc      	b.n	8012d84 <rmw_wait+0x26c>
 8012dea:	bf00      	nop
 8012dec:	080192a8 	.word	0x080192a8
 8012df0:	2001798c 	.word	0x2001798c
 8012df4:	000f4240 	.word	0x000f4240
 8012df8:	2e00      	cmp	r6, #0
 8012dfa:	d0c3      	beq.n	8012d84 <rmw_wait+0x26c>
 8012dfc:	6834      	ldr	r4, [r6, #0]
 8012dfe:	462f      	mov	r7, r5
 8012e00:	2c00      	cmp	r4, #0
 8012e02:	f47f af6b 	bne.w	8012cdc <rmw_wait+0x1c4>
 8012e06:	e7bd      	b.n	8012d84 <rmw_wait+0x26c>

08012e08 <rmw_create_wait_set>:
 8012e08:	b508      	push	{r3, lr}
 8012e0a:	4803      	ldr	r0, [pc, #12]	@ (8012e18 <rmw_create_wait_set+0x10>)
 8012e0c:	f7ff f9b2 	bl	8012174 <get_memory>
 8012e10:	b108      	cbz	r0, 8012e16 <rmw_create_wait_set+0xe>
 8012e12:	6880      	ldr	r0, [r0, #8]
 8012e14:	3010      	adds	r0, #16
 8012e16:	bd08      	pop	{r3, pc}
 8012e18:	200179cc 	.word	0x200179cc

08012e1c <rmw_destroy_wait_set>:
 8012e1c:	b508      	push	{r3, lr}
 8012e1e:	4b08      	ldr	r3, [pc, #32]	@ (8012e40 <rmw_destroy_wait_set+0x24>)
 8012e20:	6819      	ldr	r1, [r3, #0]
 8012e22:	b911      	cbnz	r1, 8012e2a <rmw_destroy_wait_set+0xe>
 8012e24:	e00a      	b.n	8012e3c <rmw_destroy_wait_set+0x20>
 8012e26:	6849      	ldr	r1, [r1, #4]
 8012e28:	b141      	cbz	r1, 8012e3c <rmw_destroy_wait_set+0x20>
 8012e2a:	688b      	ldr	r3, [r1, #8]
 8012e2c:	3310      	adds	r3, #16
 8012e2e:	4298      	cmp	r0, r3
 8012e30:	d1f9      	bne.n	8012e26 <rmw_destroy_wait_set+0xa>
 8012e32:	4803      	ldr	r0, [pc, #12]	@ (8012e40 <rmw_destroy_wait_set+0x24>)
 8012e34:	f7ff f9ae 	bl	8012194 <put_memory>
 8012e38:	2000      	movs	r0, #0
 8012e3a:	bd08      	pop	{r3, pc}
 8012e3c:	2001      	movs	r0, #1
 8012e3e:	bd08      	pop	{r3, pc}
 8012e40:	200179cc 	.word	0x200179cc

08012e44 <rmw_uros_epoch_nanos>:
 8012e44:	4b05      	ldr	r3, [pc, #20]	@ (8012e5c <rmw_uros_epoch_nanos+0x18>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	b123      	cbz	r3, 8012e54 <rmw_uros_epoch_nanos+0x10>
 8012e4a:	6898      	ldr	r0, [r3, #8]
 8012e4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012e50:	f7f9 bfd8 	b.w	800ce04 <uxr_epoch_nanos>
 8012e54:	2000      	movs	r0, #0
 8012e56:	2100      	movs	r1, #0
 8012e58:	4770      	bx	lr
 8012e5a:	bf00      	nop
 8012e5c:	2001798c 	.word	0x2001798c

08012e60 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e64:	6805      	ldr	r5, [r0, #0]
 8012e66:	4604      	mov	r4, r0
 8012e68:	4628      	mov	r0, r5
 8012e6a:	460e      	mov	r6, r1
 8012e6c:	f7ed f9d0 	bl	8000210 <strcmp>
 8012e70:	b1c8      	cbz	r0, 8012ea6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012e72:	4b11      	ldr	r3, [pc, #68]	@ (8012eb8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	429d      	cmp	r5, r3
 8012e78:	d112      	bne.n	8012ea0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012e7a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012e7e:	f8d8 4000 	ldr.w	r4, [r8]
 8012e82:	b16c      	cbz	r4, 8012ea0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012e84:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012e88:	2700      	movs	r7, #0
 8012e8a:	3d04      	subs	r5, #4
 8012e8c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012e90:	4631      	mov	r1, r6
 8012e92:	f7ed f9bd 	bl	8000210 <strcmp>
 8012e96:	00bb      	lsls	r3, r7, #2
 8012e98:	b140      	cbz	r0, 8012eac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012e9a:	3701      	adds	r7, #1
 8012e9c:	42bc      	cmp	r4, r7
 8012e9e:	d1f5      	bne.n	8012e8c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb4:	58d3      	ldr	r3, [r2, r3]
 8012eb6:	4718      	bx	r3
 8012eb8:	200000b4 	.word	0x200000b4

08012ebc <std_msgs__msg__String__init>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	b128      	cbz	r0, 8012ece <std_msgs__msg__String__init+0x12>
 8012ec2:	f002 fee9 	bl	8015c98 <rosidl_runtime_c__String__init>
 8012ec6:	4605      	mov	r5, r0
 8012ec8:	b120      	cbz	r0, 8012ed4 <std_msgs__msg__String__init+0x18>
 8012eca:	4628      	mov	r0, r5
 8012ecc:	bd38      	pop	{r3, r4, r5, pc}
 8012ece:	4605      	mov	r5, r0
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	4620      	mov	r0, r4
 8012ed6:	f002 fef5 	bl	8015cc4 <rosidl_runtime_c__String__fini>
 8012eda:	4628      	mov	r0, r5
 8012edc:	bd38      	pop	{r3, r4, r5, pc}
 8012ede:	bf00      	nop

08012ee0 <std_msgs__msg__String__fini>:
 8012ee0:	b108      	cbz	r0, 8012ee6 <std_msgs__msg__String__fini+0x6>
 8012ee2:	f002 beef 	b.w	8015cc4 <rosidl_runtime_c__String__fini>
 8012ee6:	4770      	bx	lr

08012ee8 <ucdr_serialize_endian_array_char>:
 8012ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eec:	4619      	mov	r1, r3
 8012eee:	461f      	mov	r7, r3
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	4690      	mov	r8, r2
 8012ef4:	f7f9 f9f4 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8012ef8:	b9e0      	cbnz	r0, 8012f34 <ucdr_serialize_endian_array_char+0x4c>
 8012efa:	463e      	mov	r6, r7
 8012efc:	e009      	b.n	8012f12 <ucdr_serialize_endian_array_char+0x2a>
 8012efe:	68a8      	ldr	r0, [r5, #8]
 8012f00:	f004 fa09 	bl	8017316 <memcpy>
 8012f04:	68ab      	ldr	r3, [r5, #8]
 8012f06:	6928      	ldr	r0, [r5, #16]
 8012f08:	4423      	add	r3, r4
 8012f0a:	4420      	add	r0, r4
 8012f0c:	1b36      	subs	r6, r6, r4
 8012f0e:	60ab      	str	r3, [r5, #8]
 8012f10:	6128      	str	r0, [r5, #16]
 8012f12:	4631      	mov	r1, r6
 8012f14:	2201      	movs	r2, #1
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7f9 fa6a 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 8012f1c:	1bb9      	subs	r1, r7, r6
 8012f1e:	4441      	add	r1, r8
 8012f20:	4604      	mov	r4, r0
 8012f22:	4602      	mov	r2, r0
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d1ea      	bne.n	8012efe <ucdr_serialize_endian_array_char+0x16>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	7da8      	ldrb	r0, [r5, #22]
 8012f2c:	756b      	strb	r3, [r5, #21]
 8012f2e:	4058      	eors	r0, r3
 8012f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f34:	463a      	mov	r2, r7
 8012f36:	68a8      	ldr	r0, [r5, #8]
 8012f38:	4641      	mov	r1, r8
 8012f3a:	f004 f9ec 	bl	8017316 <memcpy>
 8012f3e:	68aa      	ldr	r2, [r5, #8]
 8012f40:	692b      	ldr	r3, [r5, #16]
 8012f42:	443a      	add	r2, r7
 8012f44:	443b      	add	r3, r7
 8012f46:	60aa      	str	r2, [r5, #8]
 8012f48:	612b      	str	r3, [r5, #16]
 8012f4a:	e7ed      	b.n	8012f28 <ucdr_serialize_endian_array_char+0x40>

08012f4c <ucdr_deserialize_endian_array_char>:
 8012f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f50:	4619      	mov	r1, r3
 8012f52:	461f      	mov	r7, r3
 8012f54:	4605      	mov	r5, r0
 8012f56:	4690      	mov	r8, r2
 8012f58:	f7f9 f9c2 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8012f5c:	b9e0      	cbnz	r0, 8012f98 <ucdr_deserialize_endian_array_char+0x4c>
 8012f5e:	463e      	mov	r6, r7
 8012f60:	e009      	b.n	8012f76 <ucdr_deserialize_endian_array_char+0x2a>
 8012f62:	68a9      	ldr	r1, [r5, #8]
 8012f64:	f004 f9d7 	bl	8017316 <memcpy>
 8012f68:	68ab      	ldr	r3, [r5, #8]
 8012f6a:	6928      	ldr	r0, [r5, #16]
 8012f6c:	4423      	add	r3, r4
 8012f6e:	4420      	add	r0, r4
 8012f70:	1b36      	subs	r6, r6, r4
 8012f72:	60ab      	str	r3, [r5, #8]
 8012f74:	6128      	str	r0, [r5, #16]
 8012f76:	2201      	movs	r2, #1
 8012f78:	4631      	mov	r1, r6
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	f7f9 fa38 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 8012f80:	4604      	mov	r4, r0
 8012f82:	1bb8      	subs	r0, r7, r6
 8012f84:	4440      	add	r0, r8
 8012f86:	4622      	mov	r2, r4
 8012f88:	2c00      	cmp	r4, #0
 8012f8a:	d1ea      	bne.n	8012f62 <ucdr_deserialize_endian_array_char+0x16>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	7da8      	ldrb	r0, [r5, #22]
 8012f90:	756b      	strb	r3, [r5, #21]
 8012f92:	4058      	eors	r0, r3
 8012f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f98:	463a      	mov	r2, r7
 8012f9a:	68a9      	ldr	r1, [r5, #8]
 8012f9c:	4640      	mov	r0, r8
 8012f9e:	f004 f9ba 	bl	8017316 <memcpy>
 8012fa2:	68aa      	ldr	r2, [r5, #8]
 8012fa4:	692b      	ldr	r3, [r5, #16]
 8012fa6:	443a      	add	r2, r7
 8012fa8:	443b      	add	r3, r7
 8012faa:	60aa      	str	r2, [r5, #8]
 8012fac:	612b      	str	r3, [r5, #16]
 8012fae:	e7ed      	b.n	8012f8c <ucdr_deserialize_endian_array_char+0x40>

08012fb0 <ucdr_serialize_array_uint8_t>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	4688      	mov	r8, r1
 8012fb6:	4611      	mov	r1, r2
 8012fb8:	4617      	mov	r7, r2
 8012fba:	4605      	mov	r5, r0
 8012fbc:	f7f9 f990 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8012fc0:	b9e0      	cbnz	r0, 8012ffc <ucdr_serialize_array_uint8_t+0x4c>
 8012fc2:	463e      	mov	r6, r7
 8012fc4:	e009      	b.n	8012fda <ucdr_serialize_array_uint8_t+0x2a>
 8012fc6:	68a8      	ldr	r0, [r5, #8]
 8012fc8:	f004 f9a5 	bl	8017316 <memcpy>
 8012fcc:	68aa      	ldr	r2, [r5, #8]
 8012fce:	692b      	ldr	r3, [r5, #16]
 8012fd0:	4422      	add	r2, r4
 8012fd2:	4423      	add	r3, r4
 8012fd4:	1b36      	subs	r6, r6, r4
 8012fd6:	60aa      	str	r2, [r5, #8]
 8012fd8:	612b      	str	r3, [r5, #16]
 8012fda:	4631      	mov	r1, r6
 8012fdc:	2201      	movs	r2, #1
 8012fde:	4628      	mov	r0, r5
 8012fe0:	f7f9 fa06 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 8012fe4:	1bb9      	subs	r1, r7, r6
 8012fe6:	4441      	add	r1, r8
 8012fe8:	4604      	mov	r4, r0
 8012fea:	4602      	mov	r2, r0
 8012fec:	2800      	cmp	r0, #0
 8012fee:	d1ea      	bne.n	8012fc6 <ucdr_serialize_array_uint8_t+0x16>
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	7da8      	ldrb	r0, [r5, #22]
 8012ff4:	756b      	strb	r3, [r5, #21]
 8012ff6:	4058      	eors	r0, r3
 8012ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffc:	463a      	mov	r2, r7
 8012ffe:	68a8      	ldr	r0, [r5, #8]
 8013000:	4641      	mov	r1, r8
 8013002:	f004 f988 	bl	8017316 <memcpy>
 8013006:	68aa      	ldr	r2, [r5, #8]
 8013008:	692b      	ldr	r3, [r5, #16]
 801300a:	443a      	add	r2, r7
 801300c:	443b      	add	r3, r7
 801300e:	60aa      	str	r2, [r5, #8]
 8013010:	612b      	str	r3, [r5, #16]
 8013012:	e7ed      	b.n	8012ff0 <ucdr_serialize_array_uint8_t+0x40>

08013014 <ucdr_serialize_endian_array_uint8_t>:
 8013014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013018:	4619      	mov	r1, r3
 801301a:	461f      	mov	r7, r3
 801301c:	4605      	mov	r5, r0
 801301e:	4690      	mov	r8, r2
 8013020:	f7f9 f95e 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013024:	b9e0      	cbnz	r0, 8013060 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013026:	463e      	mov	r6, r7
 8013028:	e009      	b.n	801303e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801302a:	68a8      	ldr	r0, [r5, #8]
 801302c:	f004 f973 	bl	8017316 <memcpy>
 8013030:	68ab      	ldr	r3, [r5, #8]
 8013032:	6928      	ldr	r0, [r5, #16]
 8013034:	4423      	add	r3, r4
 8013036:	4420      	add	r0, r4
 8013038:	1b36      	subs	r6, r6, r4
 801303a:	60ab      	str	r3, [r5, #8]
 801303c:	6128      	str	r0, [r5, #16]
 801303e:	4631      	mov	r1, r6
 8013040:	2201      	movs	r2, #1
 8013042:	4628      	mov	r0, r5
 8013044:	f7f9 f9d4 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 8013048:	1bb9      	subs	r1, r7, r6
 801304a:	4441      	add	r1, r8
 801304c:	4604      	mov	r4, r0
 801304e:	4602      	mov	r2, r0
 8013050:	2800      	cmp	r0, #0
 8013052:	d1ea      	bne.n	801302a <ucdr_serialize_endian_array_uint8_t+0x16>
 8013054:	2301      	movs	r3, #1
 8013056:	7da8      	ldrb	r0, [r5, #22]
 8013058:	756b      	strb	r3, [r5, #21]
 801305a:	4058      	eors	r0, r3
 801305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013060:	463a      	mov	r2, r7
 8013062:	68a8      	ldr	r0, [r5, #8]
 8013064:	4641      	mov	r1, r8
 8013066:	f004 f956 	bl	8017316 <memcpy>
 801306a:	68aa      	ldr	r2, [r5, #8]
 801306c:	692b      	ldr	r3, [r5, #16]
 801306e:	443a      	add	r2, r7
 8013070:	443b      	add	r3, r7
 8013072:	60aa      	str	r2, [r5, #8]
 8013074:	612b      	str	r3, [r5, #16]
 8013076:	e7ed      	b.n	8013054 <ucdr_serialize_endian_array_uint8_t+0x40>

08013078 <ucdr_deserialize_array_uint8_t>:
 8013078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801307c:	4688      	mov	r8, r1
 801307e:	4611      	mov	r1, r2
 8013080:	4617      	mov	r7, r2
 8013082:	4605      	mov	r5, r0
 8013084:	f7f9 f92c 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013088:	b9e0      	cbnz	r0, 80130c4 <ucdr_deserialize_array_uint8_t+0x4c>
 801308a:	463e      	mov	r6, r7
 801308c:	e009      	b.n	80130a2 <ucdr_deserialize_array_uint8_t+0x2a>
 801308e:	68a9      	ldr	r1, [r5, #8]
 8013090:	f004 f941 	bl	8017316 <memcpy>
 8013094:	68aa      	ldr	r2, [r5, #8]
 8013096:	692b      	ldr	r3, [r5, #16]
 8013098:	4422      	add	r2, r4
 801309a:	4423      	add	r3, r4
 801309c:	1b36      	subs	r6, r6, r4
 801309e:	60aa      	str	r2, [r5, #8]
 80130a0:	612b      	str	r3, [r5, #16]
 80130a2:	2201      	movs	r2, #1
 80130a4:	4631      	mov	r1, r6
 80130a6:	4628      	mov	r0, r5
 80130a8:	f7f9 f9a2 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 80130ac:	4604      	mov	r4, r0
 80130ae:	1bb8      	subs	r0, r7, r6
 80130b0:	4440      	add	r0, r8
 80130b2:	4622      	mov	r2, r4
 80130b4:	2c00      	cmp	r4, #0
 80130b6:	d1ea      	bne.n	801308e <ucdr_deserialize_array_uint8_t+0x16>
 80130b8:	2301      	movs	r3, #1
 80130ba:	7da8      	ldrb	r0, [r5, #22]
 80130bc:	756b      	strb	r3, [r5, #21]
 80130be:	4058      	eors	r0, r3
 80130c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c4:	463a      	mov	r2, r7
 80130c6:	68a9      	ldr	r1, [r5, #8]
 80130c8:	4640      	mov	r0, r8
 80130ca:	f004 f924 	bl	8017316 <memcpy>
 80130ce:	68aa      	ldr	r2, [r5, #8]
 80130d0:	692b      	ldr	r3, [r5, #16]
 80130d2:	443a      	add	r2, r7
 80130d4:	443b      	add	r3, r7
 80130d6:	60aa      	str	r2, [r5, #8]
 80130d8:	612b      	str	r3, [r5, #16]
 80130da:	e7ed      	b.n	80130b8 <ucdr_deserialize_array_uint8_t+0x40>

080130dc <ucdr_deserialize_endian_array_uint8_t>:
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	4619      	mov	r1, r3
 80130e2:	461f      	mov	r7, r3
 80130e4:	4605      	mov	r5, r0
 80130e6:	4690      	mov	r8, r2
 80130e8:	f7f9 f8fa 	bl	800c2e0 <ucdr_check_buffer_available_for>
 80130ec:	b9e0      	cbnz	r0, 8013128 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80130ee:	463e      	mov	r6, r7
 80130f0:	e009      	b.n	8013106 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80130f2:	68a9      	ldr	r1, [r5, #8]
 80130f4:	f004 f90f 	bl	8017316 <memcpy>
 80130f8:	68ab      	ldr	r3, [r5, #8]
 80130fa:	6928      	ldr	r0, [r5, #16]
 80130fc:	4423      	add	r3, r4
 80130fe:	4420      	add	r0, r4
 8013100:	1b36      	subs	r6, r6, r4
 8013102:	60ab      	str	r3, [r5, #8]
 8013104:	6128      	str	r0, [r5, #16]
 8013106:	2201      	movs	r2, #1
 8013108:	4631      	mov	r1, r6
 801310a:	4628      	mov	r0, r5
 801310c:	f7f9 f970 	bl	800c3f0 <ucdr_check_final_buffer_behavior_array>
 8013110:	4604      	mov	r4, r0
 8013112:	1bb8      	subs	r0, r7, r6
 8013114:	4440      	add	r0, r8
 8013116:	4622      	mov	r2, r4
 8013118:	2c00      	cmp	r4, #0
 801311a:	d1ea      	bne.n	80130f2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801311c:	2301      	movs	r3, #1
 801311e:	7da8      	ldrb	r0, [r5, #22]
 8013120:	756b      	strb	r3, [r5, #21]
 8013122:	4058      	eors	r0, r3
 8013124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013128:	463a      	mov	r2, r7
 801312a:	68a9      	ldr	r1, [r5, #8]
 801312c:	4640      	mov	r0, r8
 801312e:	f004 f8f2 	bl	8017316 <memcpy>
 8013132:	68aa      	ldr	r2, [r5, #8]
 8013134:	692b      	ldr	r3, [r5, #16]
 8013136:	443a      	add	r2, r7
 8013138:	443b      	add	r3, r7
 801313a:	60aa      	str	r2, [r5, #8]
 801313c:	612b      	str	r3, [r5, #16]
 801313e:	e7ed      	b.n	801311c <ucdr_deserialize_endian_array_uint8_t+0x40>

08013140 <ucdr_serialize_bool>:
 8013140:	b538      	push	{r3, r4, r5, lr}
 8013142:	460d      	mov	r5, r1
 8013144:	2101      	movs	r1, #1
 8013146:	4604      	mov	r4, r0
 8013148:	f7f9 f8d6 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801314c:	b148      	cbz	r0, 8013162 <ucdr_serialize_bool+0x22>
 801314e:	68a3      	ldr	r3, [r4, #8]
 8013150:	701d      	strb	r5, [r3, #0]
 8013152:	68a2      	ldr	r2, [r4, #8]
 8013154:	6923      	ldr	r3, [r4, #16]
 8013156:	2101      	movs	r1, #1
 8013158:	440a      	add	r2, r1
 801315a:	440b      	add	r3, r1
 801315c:	60a2      	str	r2, [r4, #8]
 801315e:	6123      	str	r3, [r4, #16]
 8013160:	7561      	strb	r1, [r4, #21]
 8013162:	7da0      	ldrb	r0, [r4, #22]
 8013164:	f080 0001 	eor.w	r0, r0, #1
 8013168:	bd38      	pop	{r3, r4, r5, pc}
 801316a:	bf00      	nop

0801316c <ucdr_deserialize_bool>:
 801316c:	b538      	push	{r3, r4, r5, lr}
 801316e:	460d      	mov	r5, r1
 8013170:	2101      	movs	r1, #1
 8013172:	4604      	mov	r4, r0
 8013174:	f7f9 f8c0 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013178:	b160      	cbz	r0, 8013194 <ucdr_deserialize_bool+0x28>
 801317a:	68a2      	ldr	r2, [r4, #8]
 801317c:	6923      	ldr	r3, [r4, #16]
 801317e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013182:	3900      	subs	r1, #0
 8013184:	bf18      	it	ne
 8013186:	2101      	movne	r1, #1
 8013188:	7029      	strb	r1, [r5, #0]
 801318a:	3301      	adds	r3, #1
 801318c:	2101      	movs	r1, #1
 801318e:	60a2      	str	r2, [r4, #8]
 8013190:	6123      	str	r3, [r4, #16]
 8013192:	7561      	strb	r1, [r4, #21]
 8013194:	7da0      	ldrb	r0, [r4, #22]
 8013196:	f080 0001 	eor.w	r0, r0, #1
 801319a:	bd38      	pop	{r3, r4, r5, pc}

0801319c <ucdr_serialize_uint8_t>:
 801319c:	b538      	push	{r3, r4, r5, lr}
 801319e:	460d      	mov	r5, r1
 80131a0:	2101      	movs	r1, #1
 80131a2:	4604      	mov	r4, r0
 80131a4:	f7f9 f8a8 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 80131a8:	b148      	cbz	r0, 80131be <ucdr_serialize_uint8_t+0x22>
 80131aa:	68a3      	ldr	r3, [r4, #8]
 80131ac:	701d      	strb	r5, [r3, #0]
 80131ae:	68a2      	ldr	r2, [r4, #8]
 80131b0:	6923      	ldr	r3, [r4, #16]
 80131b2:	2101      	movs	r1, #1
 80131b4:	440a      	add	r2, r1
 80131b6:	440b      	add	r3, r1
 80131b8:	60a2      	str	r2, [r4, #8]
 80131ba:	6123      	str	r3, [r4, #16]
 80131bc:	7561      	strb	r1, [r4, #21]
 80131be:	7da0      	ldrb	r0, [r4, #22]
 80131c0:	f080 0001 	eor.w	r0, r0, #1
 80131c4:	bd38      	pop	{r3, r4, r5, pc}
 80131c6:	bf00      	nop

080131c8 <ucdr_deserialize_uint8_t>:
 80131c8:	b538      	push	{r3, r4, r5, lr}
 80131ca:	460d      	mov	r5, r1
 80131cc:	2101      	movs	r1, #1
 80131ce:	4604      	mov	r4, r0
 80131d0:	f7f9 f892 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 80131d4:	b150      	cbz	r0, 80131ec <ucdr_deserialize_uint8_t+0x24>
 80131d6:	68a3      	ldr	r3, [r4, #8]
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	702b      	strb	r3, [r5, #0]
 80131dc:	68a2      	ldr	r2, [r4, #8]
 80131de:	6923      	ldr	r3, [r4, #16]
 80131e0:	2101      	movs	r1, #1
 80131e2:	440a      	add	r2, r1
 80131e4:	440b      	add	r3, r1
 80131e6:	60a2      	str	r2, [r4, #8]
 80131e8:	6123      	str	r3, [r4, #16]
 80131ea:	7561      	strb	r1, [r4, #21]
 80131ec:	7da0      	ldrb	r0, [r4, #22]
 80131ee:	f080 0001 	eor.w	r0, r0, #1
 80131f2:	bd38      	pop	{r3, r4, r5, pc}

080131f4 <ucdr_serialize_uint16_t>:
 80131f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f8:	b082      	sub	sp, #8
 80131fa:	460b      	mov	r3, r1
 80131fc:	2102      	movs	r1, #2
 80131fe:	4604      	mov	r4, r0
 8013200:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013204:	f7f9 f8cc 	bl	800c3a0 <ucdr_buffer_alignment>
 8013208:	4601      	mov	r1, r0
 801320a:	4620      	mov	r0, r4
 801320c:	7d67      	ldrb	r7, [r4, #21]
 801320e:	f7f9 f90b 	bl	800c428 <ucdr_advance_buffer>
 8013212:	2102      	movs	r1, #2
 8013214:	4620      	mov	r0, r4
 8013216:	f7f9 f863 	bl	800c2e0 <ucdr_check_buffer_available_for>
 801321a:	bb78      	cbnz	r0, 801327c <ucdr_serialize_uint16_t+0x88>
 801321c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013220:	42ab      	cmp	r3, r5
 8013222:	d926      	bls.n	8013272 <ucdr_serialize_uint16_t+0x7e>
 8013224:	1b5e      	subs	r6, r3, r5
 8013226:	60a3      	str	r3, [r4, #8]
 8013228:	6923      	ldr	r3, [r4, #16]
 801322a:	f1c6 0802 	rsb	r8, r6, #2
 801322e:	4433      	add	r3, r6
 8013230:	6123      	str	r3, [r4, #16]
 8013232:	4641      	mov	r1, r8
 8013234:	4620      	mov	r0, r4
 8013236:	f7f9 f85f 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801323a:	2800      	cmp	r0, #0
 801323c:	d03b      	beq.n	80132b6 <ucdr_serialize_uint16_t+0xc2>
 801323e:	7d23      	ldrb	r3, [r4, #20]
 8013240:	2b01      	cmp	r3, #1
 8013242:	d04a      	beq.n	80132da <ucdr_serialize_uint16_t+0xe6>
 8013244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013248:	702b      	strb	r3, [r5, #0]
 801324a:	2e00      	cmp	r6, #0
 801324c:	d040      	beq.n	80132d0 <ucdr_serialize_uint16_t+0xdc>
 801324e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013252:	706b      	strb	r3, [r5, #1]
 8013254:	6923      	ldr	r3, [r4, #16]
 8013256:	68a2      	ldr	r2, [r4, #8]
 8013258:	7da0      	ldrb	r0, [r4, #22]
 801325a:	3302      	adds	r3, #2
 801325c:	1b9e      	subs	r6, r3, r6
 801325e:	4442      	add	r2, r8
 8013260:	2302      	movs	r3, #2
 8013262:	f080 0001 	eor.w	r0, r0, #1
 8013266:	60a2      	str	r2, [r4, #8]
 8013268:	6126      	str	r6, [r4, #16]
 801326a:	7563      	strb	r3, [r4, #21]
 801326c:	b002      	add	sp, #8
 801326e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013272:	2102      	movs	r1, #2
 8013274:	4620      	mov	r0, r4
 8013276:	f7f9 f83f 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801327a:	b190      	cbz	r0, 80132a2 <ucdr_serialize_uint16_t+0xae>
 801327c:	7d23      	ldrb	r3, [r4, #20]
 801327e:	2b01      	cmp	r3, #1
 8013280:	68a3      	ldr	r3, [r4, #8]
 8013282:	d014      	beq.n	80132ae <ucdr_serialize_uint16_t+0xba>
 8013284:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013288:	701a      	strb	r2, [r3, #0]
 801328a:	68a3      	ldr	r3, [r4, #8]
 801328c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013290:	705a      	strb	r2, [r3, #1]
 8013292:	68a2      	ldr	r2, [r4, #8]
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	3202      	adds	r2, #2
 8013298:	3302      	adds	r3, #2
 801329a:	2102      	movs	r1, #2
 801329c:	60a2      	str	r2, [r4, #8]
 801329e:	6123      	str	r3, [r4, #16]
 80132a0:	7561      	strb	r1, [r4, #21]
 80132a2:	7da0      	ldrb	r0, [r4, #22]
 80132a4:	f080 0001 	eor.w	r0, r0, #1
 80132a8:	b002      	add	sp, #8
 80132aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80132b2:	801a      	strh	r2, [r3, #0]
 80132b4:	e7ed      	b.n	8013292 <ucdr_serialize_uint16_t+0x9e>
 80132b6:	68a2      	ldr	r2, [r4, #8]
 80132b8:	6923      	ldr	r3, [r4, #16]
 80132ba:	7da0      	ldrb	r0, [r4, #22]
 80132bc:	7567      	strb	r7, [r4, #21]
 80132be:	1b92      	subs	r2, r2, r6
 80132c0:	1b9b      	subs	r3, r3, r6
 80132c2:	f080 0001 	eor.w	r0, r0, #1
 80132c6:	60a2      	str	r2, [r4, #8]
 80132c8:	6123      	str	r3, [r4, #16]
 80132ca:	b002      	add	sp, #8
 80132cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d0:	68a3      	ldr	r3, [r4, #8]
 80132d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80132d6:	701a      	strb	r2, [r3, #0]
 80132d8:	e7bc      	b.n	8013254 <ucdr_serialize_uint16_t+0x60>
 80132da:	4628      	mov	r0, r5
 80132dc:	f10d 0506 	add.w	r5, sp, #6
 80132e0:	4629      	mov	r1, r5
 80132e2:	4632      	mov	r2, r6
 80132e4:	f004 f817 	bl	8017316 <memcpy>
 80132e8:	68a0      	ldr	r0, [r4, #8]
 80132ea:	4642      	mov	r2, r8
 80132ec:	19a9      	adds	r1, r5, r6
 80132ee:	f004 f812 	bl	8017316 <memcpy>
 80132f2:	e7af      	b.n	8013254 <ucdr_serialize_uint16_t+0x60>

080132f4 <ucdr_serialize_endian_uint16_t>:
 80132f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132f8:	b083      	sub	sp, #12
 80132fa:	460d      	mov	r5, r1
 80132fc:	2102      	movs	r1, #2
 80132fe:	4604      	mov	r4, r0
 8013300:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013304:	f7f9 f84c 	bl	800c3a0 <ucdr_buffer_alignment>
 8013308:	4601      	mov	r1, r0
 801330a:	4620      	mov	r0, r4
 801330c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013310:	f7f9 f88a 	bl	800c428 <ucdr_advance_buffer>
 8013314:	2102      	movs	r1, #2
 8013316:	4620      	mov	r0, r4
 8013318:	f7f8 ffe2 	bl	800c2e0 <ucdr_check_buffer_available_for>
 801331c:	bb70      	cbnz	r0, 801337c <ucdr_serialize_endian_uint16_t+0x88>
 801331e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013322:	42be      	cmp	r6, r7
 8013324:	d925      	bls.n	8013372 <ucdr_serialize_endian_uint16_t+0x7e>
 8013326:	6923      	ldr	r3, [r4, #16]
 8013328:	60a6      	str	r6, [r4, #8]
 801332a:	1bf6      	subs	r6, r6, r7
 801332c:	4433      	add	r3, r6
 801332e:	f1c6 0902 	rsb	r9, r6, #2
 8013332:	6123      	str	r3, [r4, #16]
 8013334:	4649      	mov	r1, r9
 8013336:	4620      	mov	r0, r4
 8013338:	f7f8 ffde 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801333c:	2800      	cmp	r0, #0
 801333e:	d039      	beq.n	80133b4 <ucdr_serialize_endian_uint16_t+0xc0>
 8013340:	2d01      	cmp	r5, #1
 8013342:	d04a      	beq.n	80133da <ucdr_serialize_endian_uint16_t+0xe6>
 8013344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013348:	703b      	strb	r3, [r7, #0]
 801334a:	2e00      	cmp	r6, #0
 801334c:	d040      	beq.n	80133d0 <ucdr_serialize_endian_uint16_t+0xdc>
 801334e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013352:	707b      	strb	r3, [r7, #1]
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	68a2      	ldr	r2, [r4, #8]
 8013358:	7da0      	ldrb	r0, [r4, #22]
 801335a:	3302      	adds	r3, #2
 801335c:	444a      	add	r2, r9
 801335e:	1b9b      	subs	r3, r3, r6
 8013360:	2102      	movs	r1, #2
 8013362:	f080 0001 	eor.w	r0, r0, #1
 8013366:	60a2      	str	r2, [r4, #8]
 8013368:	6123      	str	r3, [r4, #16]
 801336a:	7561      	strb	r1, [r4, #21]
 801336c:	b003      	add	sp, #12
 801336e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013372:	2102      	movs	r1, #2
 8013374:	4620      	mov	r0, r4
 8013376:	f7f8 ffbf 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801337a:	b188      	cbz	r0, 80133a0 <ucdr_serialize_endian_uint16_t+0xac>
 801337c:	2d01      	cmp	r5, #1
 801337e:	68a3      	ldr	r3, [r4, #8]
 8013380:	d014      	beq.n	80133ac <ucdr_serialize_endian_uint16_t+0xb8>
 8013382:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013386:	701a      	strb	r2, [r3, #0]
 8013388:	68a3      	ldr	r3, [r4, #8]
 801338a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801338e:	705a      	strb	r2, [r3, #1]
 8013390:	68a2      	ldr	r2, [r4, #8]
 8013392:	6923      	ldr	r3, [r4, #16]
 8013394:	3202      	adds	r2, #2
 8013396:	3302      	adds	r3, #2
 8013398:	2102      	movs	r1, #2
 801339a:	60a2      	str	r2, [r4, #8]
 801339c:	6123      	str	r3, [r4, #16]
 801339e:	7561      	strb	r1, [r4, #21]
 80133a0:	7da0      	ldrb	r0, [r4, #22]
 80133a2:	f080 0001 	eor.w	r0, r0, #1
 80133a6:	b003      	add	sp, #12
 80133a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80133b0:	801a      	strh	r2, [r3, #0]
 80133b2:	e7ed      	b.n	8013390 <ucdr_serialize_endian_uint16_t+0x9c>
 80133b4:	68a2      	ldr	r2, [r4, #8]
 80133b6:	6923      	ldr	r3, [r4, #16]
 80133b8:	7da0      	ldrb	r0, [r4, #22]
 80133ba:	f884 8015 	strb.w	r8, [r4, #21]
 80133be:	1b92      	subs	r2, r2, r6
 80133c0:	1b9b      	subs	r3, r3, r6
 80133c2:	f080 0001 	eor.w	r0, r0, #1
 80133c6:	60a2      	str	r2, [r4, #8]
 80133c8:	6123      	str	r3, [r4, #16]
 80133ca:	b003      	add	sp, #12
 80133cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d0:	68a3      	ldr	r3, [r4, #8]
 80133d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80133d6:	701a      	strb	r2, [r3, #0]
 80133d8:	e7bc      	b.n	8013354 <ucdr_serialize_endian_uint16_t+0x60>
 80133da:	f10d 0506 	add.w	r5, sp, #6
 80133de:	4629      	mov	r1, r5
 80133e0:	4632      	mov	r2, r6
 80133e2:	4638      	mov	r0, r7
 80133e4:	f003 ff97 	bl	8017316 <memcpy>
 80133e8:	68a0      	ldr	r0, [r4, #8]
 80133ea:	464a      	mov	r2, r9
 80133ec:	19a9      	adds	r1, r5, r6
 80133ee:	f003 ff92 	bl	8017316 <memcpy>
 80133f2:	e7af      	b.n	8013354 <ucdr_serialize_endian_uint16_t+0x60>

080133f4 <ucdr_deserialize_uint16_t>:
 80133f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133f8:	460d      	mov	r5, r1
 80133fa:	2102      	movs	r1, #2
 80133fc:	4604      	mov	r4, r0
 80133fe:	f7f8 ffcf 	bl	800c3a0 <ucdr_buffer_alignment>
 8013402:	4601      	mov	r1, r0
 8013404:	4620      	mov	r0, r4
 8013406:	f894 8015 	ldrb.w	r8, [r4, #21]
 801340a:	f7f9 f80d 	bl	800c428 <ucdr_advance_buffer>
 801340e:	2102      	movs	r1, #2
 8013410:	4620      	mov	r0, r4
 8013412:	f7f8 ff65 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013416:	bb60      	cbnz	r0, 8013472 <ucdr_deserialize_uint16_t+0x7e>
 8013418:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801341c:	42be      	cmp	r6, r7
 801341e:	d923      	bls.n	8013468 <ucdr_deserialize_uint16_t+0x74>
 8013420:	6923      	ldr	r3, [r4, #16]
 8013422:	60a6      	str	r6, [r4, #8]
 8013424:	1bf6      	subs	r6, r6, r7
 8013426:	4433      	add	r3, r6
 8013428:	f1c6 0902 	rsb	r9, r6, #2
 801342c:	6123      	str	r3, [r4, #16]
 801342e:	4649      	mov	r1, r9
 8013430:	4620      	mov	r0, r4
 8013432:	f7f8 ff61 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013436:	2800      	cmp	r0, #0
 8013438:	d034      	beq.n	80134a4 <ucdr_deserialize_uint16_t+0xb0>
 801343a:	7d23      	ldrb	r3, [r4, #20]
 801343c:	2b01      	cmp	r3, #1
 801343e:	d042      	beq.n	80134c6 <ucdr_deserialize_uint16_t+0xd2>
 8013440:	787b      	ldrb	r3, [r7, #1]
 8013442:	702b      	strb	r3, [r5, #0]
 8013444:	2e00      	cmp	r6, #0
 8013446:	d03a      	beq.n	80134be <ucdr_deserialize_uint16_t+0xca>
 8013448:	783b      	ldrb	r3, [r7, #0]
 801344a:	706b      	strb	r3, [r5, #1]
 801344c:	6923      	ldr	r3, [r4, #16]
 801344e:	68a2      	ldr	r2, [r4, #8]
 8013450:	7da0      	ldrb	r0, [r4, #22]
 8013452:	2102      	movs	r1, #2
 8013454:	3302      	adds	r3, #2
 8013456:	444a      	add	r2, r9
 8013458:	1b9b      	subs	r3, r3, r6
 801345a:	7561      	strb	r1, [r4, #21]
 801345c:	60a2      	str	r2, [r4, #8]
 801345e:	6123      	str	r3, [r4, #16]
 8013460:	f080 0001 	eor.w	r0, r0, #1
 8013464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013468:	2102      	movs	r1, #2
 801346a:	4620      	mov	r0, r4
 801346c:	f7f8 ff44 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013470:	b180      	cbz	r0, 8013494 <ucdr_deserialize_uint16_t+0xa0>
 8013472:	7d23      	ldrb	r3, [r4, #20]
 8013474:	2b01      	cmp	r3, #1
 8013476:	68a3      	ldr	r3, [r4, #8]
 8013478:	d011      	beq.n	801349e <ucdr_deserialize_uint16_t+0xaa>
 801347a:	785b      	ldrb	r3, [r3, #1]
 801347c:	702b      	strb	r3, [r5, #0]
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	781b      	ldrb	r3, [r3, #0]
 8013482:	706b      	strb	r3, [r5, #1]
 8013484:	68a2      	ldr	r2, [r4, #8]
 8013486:	6923      	ldr	r3, [r4, #16]
 8013488:	3202      	adds	r2, #2
 801348a:	3302      	adds	r3, #2
 801348c:	2102      	movs	r1, #2
 801348e:	60a2      	str	r2, [r4, #8]
 8013490:	6123      	str	r3, [r4, #16]
 8013492:	7561      	strb	r1, [r4, #21]
 8013494:	7da0      	ldrb	r0, [r4, #22]
 8013496:	f080 0001 	eor.w	r0, r0, #1
 801349a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801349e:	881b      	ldrh	r3, [r3, #0]
 80134a0:	802b      	strh	r3, [r5, #0]
 80134a2:	e7ef      	b.n	8013484 <ucdr_deserialize_uint16_t+0x90>
 80134a4:	68a2      	ldr	r2, [r4, #8]
 80134a6:	6923      	ldr	r3, [r4, #16]
 80134a8:	7da0      	ldrb	r0, [r4, #22]
 80134aa:	f884 8015 	strb.w	r8, [r4, #21]
 80134ae:	1b92      	subs	r2, r2, r6
 80134b0:	1b9b      	subs	r3, r3, r6
 80134b2:	60a2      	str	r2, [r4, #8]
 80134b4:	6123      	str	r3, [r4, #16]
 80134b6:	f080 0001 	eor.w	r0, r0, #1
 80134ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134be:	68a3      	ldr	r3, [r4, #8]
 80134c0:	781b      	ldrb	r3, [r3, #0]
 80134c2:	706b      	strb	r3, [r5, #1]
 80134c4:	e7c2      	b.n	801344c <ucdr_deserialize_uint16_t+0x58>
 80134c6:	4639      	mov	r1, r7
 80134c8:	4632      	mov	r2, r6
 80134ca:	4628      	mov	r0, r5
 80134cc:	f003 ff23 	bl	8017316 <memcpy>
 80134d0:	68a1      	ldr	r1, [r4, #8]
 80134d2:	464a      	mov	r2, r9
 80134d4:	19a8      	adds	r0, r5, r6
 80134d6:	f003 ff1e 	bl	8017316 <memcpy>
 80134da:	e7b7      	b.n	801344c <ucdr_deserialize_uint16_t+0x58>

080134dc <ucdr_deserialize_endian_uint16_t>:
 80134dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e0:	460e      	mov	r6, r1
 80134e2:	2102      	movs	r1, #2
 80134e4:	4604      	mov	r4, r0
 80134e6:	4615      	mov	r5, r2
 80134e8:	f7f8 ff5a 	bl	800c3a0 <ucdr_buffer_alignment>
 80134ec:	4601      	mov	r1, r0
 80134ee:	4620      	mov	r0, r4
 80134f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80134f4:	f7f8 ff98 	bl	800c428 <ucdr_advance_buffer>
 80134f8:	2102      	movs	r1, #2
 80134fa:	4620      	mov	r0, r4
 80134fc:	f7f8 fef0 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013500:	bb70      	cbnz	r0, 8013560 <ucdr_deserialize_endian_uint16_t+0x84>
 8013502:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8013506:	4547      	cmp	r7, r8
 8013508:	d925      	bls.n	8013556 <ucdr_deserialize_endian_uint16_t+0x7a>
 801350a:	6923      	ldr	r3, [r4, #16]
 801350c:	60a7      	str	r7, [r4, #8]
 801350e:	eba7 0708 	sub.w	r7, r7, r8
 8013512:	443b      	add	r3, r7
 8013514:	f1c7 0a02 	rsb	sl, r7, #2
 8013518:	6123      	str	r3, [r4, #16]
 801351a:	4651      	mov	r1, sl
 801351c:	4620      	mov	r0, r4
 801351e:	f7f8 feeb 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013522:	2800      	cmp	r0, #0
 8013524:	d034      	beq.n	8013590 <ucdr_deserialize_endian_uint16_t+0xb4>
 8013526:	2e01      	cmp	r6, #1
 8013528:	d043      	beq.n	80135b2 <ucdr_deserialize_endian_uint16_t+0xd6>
 801352a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801352e:	702b      	strb	r3, [r5, #0]
 8013530:	2f00      	cmp	r7, #0
 8013532:	d03a      	beq.n	80135aa <ucdr_deserialize_endian_uint16_t+0xce>
 8013534:	f898 3000 	ldrb.w	r3, [r8]
 8013538:	706b      	strb	r3, [r5, #1]
 801353a:	6923      	ldr	r3, [r4, #16]
 801353c:	68a2      	ldr	r2, [r4, #8]
 801353e:	7da0      	ldrb	r0, [r4, #22]
 8013540:	2102      	movs	r1, #2
 8013542:	3302      	adds	r3, #2
 8013544:	4452      	add	r2, sl
 8013546:	1bdb      	subs	r3, r3, r7
 8013548:	7561      	strb	r1, [r4, #21]
 801354a:	60a2      	str	r2, [r4, #8]
 801354c:	6123      	str	r3, [r4, #16]
 801354e:	f080 0001 	eor.w	r0, r0, #1
 8013552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013556:	2102      	movs	r1, #2
 8013558:	4620      	mov	r0, r4
 801355a:	f7f8 fecd 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801355e:	b178      	cbz	r0, 8013580 <ucdr_deserialize_endian_uint16_t+0xa4>
 8013560:	2e01      	cmp	r6, #1
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	d011      	beq.n	801358a <ucdr_deserialize_endian_uint16_t+0xae>
 8013566:	785b      	ldrb	r3, [r3, #1]
 8013568:	702b      	strb	r3, [r5, #0]
 801356a:	68a3      	ldr	r3, [r4, #8]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	706b      	strb	r3, [r5, #1]
 8013570:	68a2      	ldr	r2, [r4, #8]
 8013572:	6923      	ldr	r3, [r4, #16]
 8013574:	3202      	adds	r2, #2
 8013576:	3302      	adds	r3, #2
 8013578:	2102      	movs	r1, #2
 801357a:	60a2      	str	r2, [r4, #8]
 801357c:	6123      	str	r3, [r4, #16]
 801357e:	7561      	strb	r1, [r4, #21]
 8013580:	7da0      	ldrb	r0, [r4, #22]
 8013582:	f080 0001 	eor.w	r0, r0, #1
 8013586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801358a:	881b      	ldrh	r3, [r3, #0]
 801358c:	802b      	strh	r3, [r5, #0]
 801358e:	e7ef      	b.n	8013570 <ucdr_deserialize_endian_uint16_t+0x94>
 8013590:	68a2      	ldr	r2, [r4, #8]
 8013592:	6923      	ldr	r3, [r4, #16]
 8013594:	7da0      	ldrb	r0, [r4, #22]
 8013596:	f884 9015 	strb.w	r9, [r4, #21]
 801359a:	1bd2      	subs	r2, r2, r7
 801359c:	1bdb      	subs	r3, r3, r7
 801359e:	60a2      	str	r2, [r4, #8]
 80135a0:	6123      	str	r3, [r4, #16]
 80135a2:	f080 0001 	eor.w	r0, r0, #1
 80135a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135aa:	68a3      	ldr	r3, [r4, #8]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	706b      	strb	r3, [r5, #1]
 80135b0:	e7c3      	b.n	801353a <ucdr_deserialize_endian_uint16_t+0x5e>
 80135b2:	4641      	mov	r1, r8
 80135b4:	463a      	mov	r2, r7
 80135b6:	4628      	mov	r0, r5
 80135b8:	f003 fead 	bl	8017316 <memcpy>
 80135bc:	68a1      	ldr	r1, [r4, #8]
 80135be:	4652      	mov	r2, sl
 80135c0:	19e8      	adds	r0, r5, r7
 80135c2:	f003 fea8 	bl	8017316 <memcpy>
 80135c6:	e7b8      	b.n	801353a <ucdr_deserialize_endian_uint16_t+0x5e>

080135c8 <ucdr_serialize_uint32_t>:
 80135c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135cc:	b082      	sub	sp, #8
 80135ce:	4604      	mov	r4, r0
 80135d0:	9101      	str	r1, [sp, #4]
 80135d2:	2104      	movs	r1, #4
 80135d4:	f7f8 fee4 	bl	800c3a0 <ucdr_buffer_alignment>
 80135d8:	4601      	mov	r1, r0
 80135da:	4620      	mov	r0, r4
 80135dc:	7d67      	ldrb	r7, [r4, #21]
 80135de:	f7f8 ff23 	bl	800c428 <ucdr_advance_buffer>
 80135e2:	2104      	movs	r1, #4
 80135e4:	4620      	mov	r0, r4
 80135e6:	f7f8 fe7b 	bl	800c2e0 <ucdr_check_buffer_available_for>
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d139      	bne.n	8013662 <ucdr_serialize_uint32_t+0x9a>
 80135ee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80135f2:	42ab      	cmp	r3, r5
 80135f4:	d930      	bls.n	8013658 <ucdr_serialize_uint32_t+0x90>
 80135f6:	1b5e      	subs	r6, r3, r5
 80135f8:	60a3      	str	r3, [r4, #8]
 80135fa:	6923      	ldr	r3, [r4, #16]
 80135fc:	f1c6 0804 	rsb	r8, r6, #4
 8013600:	4433      	add	r3, r6
 8013602:	6123      	str	r3, [r4, #16]
 8013604:	4641      	mov	r1, r8
 8013606:	4620      	mov	r0, r4
 8013608:	f7f8 fe76 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801360c:	2800      	cmp	r0, #0
 801360e:	d04c      	beq.n	80136aa <ucdr_serialize_uint32_t+0xe2>
 8013610:	7d23      	ldrb	r3, [r4, #20]
 8013612:	2b01      	cmp	r3, #1
 8013614:	d063      	beq.n	80136de <ucdr_serialize_uint32_t+0x116>
 8013616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801361a:	702b      	strb	r3, [r5, #0]
 801361c:	2e00      	cmp	r6, #0
 801361e:	d051      	beq.n	80136c4 <ucdr_serialize_uint32_t+0xfc>
 8013620:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013624:	706b      	strb	r3, [r5, #1]
 8013626:	2e01      	cmp	r6, #1
 8013628:	d050      	beq.n	80136cc <ucdr_serialize_uint32_t+0x104>
 801362a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801362e:	70ab      	strb	r3, [r5, #2]
 8013630:	2e02      	cmp	r6, #2
 8013632:	d04f      	beq.n	80136d4 <ucdr_serialize_uint32_t+0x10c>
 8013634:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013638:	70eb      	strb	r3, [r5, #3]
 801363a:	6923      	ldr	r3, [r4, #16]
 801363c:	68a2      	ldr	r2, [r4, #8]
 801363e:	7da0      	ldrb	r0, [r4, #22]
 8013640:	3304      	adds	r3, #4
 8013642:	1b9e      	subs	r6, r3, r6
 8013644:	4442      	add	r2, r8
 8013646:	2304      	movs	r3, #4
 8013648:	f080 0001 	eor.w	r0, r0, #1
 801364c:	60a2      	str	r2, [r4, #8]
 801364e:	6126      	str	r6, [r4, #16]
 8013650:	7563      	strb	r3, [r4, #21]
 8013652:	b002      	add	sp, #8
 8013654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013658:	2104      	movs	r1, #4
 801365a:	4620      	mov	r0, r4
 801365c:	f7f8 fe4c 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013660:	b1d0      	cbz	r0, 8013698 <ucdr_serialize_uint32_t+0xd0>
 8013662:	7d23      	ldrb	r3, [r4, #20]
 8013664:	2b01      	cmp	r3, #1
 8013666:	68a3      	ldr	r3, [r4, #8]
 8013668:	d01c      	beq.n	80136a4 <ucdr_serialize_uint32_t+0xdc>
 801366a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801366e:	701a      	strb	r2, [r3, #0]
 8013670:	68a3      	ldr	r3, [r4, #8]
 8013672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013676:	705a      	strb	r2, [r3, #1]
 8013678:	68a3      	ldr	r3, [r4, #8]
 801367a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801367e:	709a      	strb	r2, [r3, #2]
 8013680:	68a3      	ldr	r3, [r4, #8]
 8013682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013686:	70da      	strb	r2, [r3, #3]
 8013688:	68a2      	ldr	r2, [r4, #8]
 801368a:	6923      	ldr	r3, [r4, #16]
 801368c:	3204      	adds	r2, #4
 801368e:	3304      	adds	r3, #4
 8013690:	2104      	movs	r1, #4
 8013692:	60a2      	str	r2, [r4, #8]
 8013694:	6123      	str	r3, [r4, #16]
 8013696:	7561      	strb	r1, [r4, #21]
 8013698:	7da0      	ldrb	r0, [r4, #22]
 801369a:	f080 0001 	eor.w	r0, r0, #1
 801369e:	b002      	add	sp, #8
 80136a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a4:	9a01      	ldr	r2, [sp, #4]
 80136a6:	601a      	str	r2, [r3, #0]
 80136a8:	e7ee      	b.n	8013688 <ucdr_serialize_uint32_t+0xc0>
 80136aa:	68a2      	ldr	r2, [r4, #8]
 80136ac:	6923      	ldr	r3, [r4, #16]
 80136ae:	7da0      	ldrb	r0, [r4, #22]
 80136b0:	7567      	strb	r7, [r4, #21]
 80136b2:	1b92      	subs	r2, r2, r6
 80136b4:	1b9b      	subs	r3, r3, r6
 80136b6:	f080 0001 	eor.w	r0, r0, #1
 80136ba:	60a2      	str	r2, [r4, #8]
 80136bc:	6123      	str	r3, [r4, #16]
 80136be:	b002      	add	sp, #8
 80136c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136c4:	68a3      	ldr	r3, [r4, #8]
 80136c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136ca:	701a      	strb	r2, [r3, #0]
 80136cc:	68a3      	ldr	r3, [r4, #8]
 80136ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80136d2:	701a      	strb	r2, [r3, #0]
 80136d4:	68a3      	ldr	r3, [r4, #8]
 80136d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	e7ad      	b.n	801363a <ucdr_serialize_uint32_t+0x72>
 80136de:	4628      	mov	r0, r5
 80136e0:	ad01      	add	r5, sp, #4
 80136e2:	4629      	mov	r1, r5
 80136e4:	4632      	mov	r2, r6
 80136e6:	f003 fe16 	bl	8017316 <memcpy>
 80136ea:	68a0      	ldr	r0, [r4, #8]
 80136ec:	4642      	mov	r2, r8
 80136ee:	19a9      	adds	r1, r5, r6
 80136f0:	f003 fe11 	bl	8017316 <memcpy>
 80136f4:	e7a1      	b.n	801363a <ucdr_serialize_uint32_t+0x72>
 80136f6:	bf00      	nop

080136f8 <ucdr_serialize_endian_uint32_t>:
 80136f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136fc:	b083      	sub	sp, #12
 80136fe:	460d      	mov	r5, r1
 8013700:	2104      	movs	r1, #4
 8013702:	4604      	mov	r4, r0
 8013704:	9201      	str	r2, [sp, #4]
 8013706:	f7f8 fe4b 	bl	800c3a0 <ucdr_buffer_alignment>
 801370a:	4601      	mov	r1, r0
 801370c:	4620      	mov	r0, r4
 801370e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013712:	f7f8 fe89 	bl	800c428 <ucdr_advance_buffer>
 8013716:	2104      	movs	r1, #4
 8013718:	4620      	mov	r0, r4
 801371a:	f7f8 fde1 	bl	800c2e0 <ucdr_check_buffer_available_for>
 801371e:	2800      	cmp	r0, #0
 8013720:	d138      	bne.n	8013794 <ucdr_serialize_endian_uint32_t+0x9c>
 8013722:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013726:	42b7      	cmp	r7, r6
 8013728:	d92f      	bls.n	801378a <ucdr_serialize_endian_uint32_t+0x92>
 801372a:	6923      	ldr	r3, [r4, #16]
 801372c:	60a7      	str	r7, [r4, #8]
 801372e:	1bbf      	subs	r7, r7, r6
 8013730:	443b      	add	r3, r7
 8013732:	f1c7 0904 	rsb	r9, r7, #4
 8013736:	6123      	str	r3, [r4, #16]
 8013738:	4649      	mov	r1, r9
 801373a:	4620      	mov	r0, r4
 801373c:	f7f8 fddc 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013740:	2800      	cmp	r0, #0
 8013742:	d04a      	beq.n	80137da <ucdr_serialize_endian_uint32_t+0xe2>
 8013744:	2d01      	cmp	r5, #1
 8013746:	d063      	beq.n	8013810 <ucdr_serialize_endian_uint32_t+0x118>
 8013748:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801374c:	7033      	strb	r3, [r6, #0]
 801374e:	2f00      	cmp	r7, #0
 8013750:	d051      	beq.n	80137f6 <ucdr_serialize_endian_uint32_t+0xfe>
 8013752:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013756:	7073      	strb	r3, [r6, #1]
 8013758:	2f01      	cmp	r7, #1
 801375a:	d050      	beq.n	80137fe <ucdr_serialize_endian_uint32_t+0x106>
 801375c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013760:	70b3      	strb	r3, [r6, #2]
 8013762:	2f02      	cmp	r7, #2
 8013764:	d04f      	beq.n	8013806 <ucdr_serialize_endian_uint32_t+0x10e>
 8013766:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801376a:	70f3      	strb	r3, [r6, #3]
 801376c:	6923      	ldr	r3, [r4, #16]
 801376e:	68a2      	ldr	r2, [r4, #8]
 8013770:	7da0      	ldrb	r0, [r4, #22]
 8013772:	3304      	adds	r3, #4
 8013774:	444a      	add	r2, r9
 8013776:	1bdb      	subs	r3, r3, r7
 8013778:	2104      	movs	r1, #4
 801377a:	f080 0001 	eor.w	r0, r0, #1
 801377e:	60a2      	str	r2, [r4, #8]
 8013780:	6123      	str	r3, [r4, #16]
 8013782:	7561      	strb	r1, [r4, #21]
 8013784:	b003      	add	sp, #12
 8013786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801378a:	2104      	movs	r1, #4
 801378c:	4620      	mov	r0, r4
 801378e:	f7f8 fdb3 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013792:	b1c8      	cbz	r0, 80137c8 <ucdr_serialize_endian_uint32_t+0xd0>
 8013794:	2d01      	cmp	r5, #1
 8013796:	68a3      	ldr	r3, [r4, #8]
 8013798:	d01c      	beq.n	80137d4 <ucdr_serialize_endian_uint32_t+0xdc>
 801379a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801379e:	701a      	strb	r2, [r3, #0]
 80137a0:	68a3      	ldr	r3, [r4, #8]
 80137a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137a6:	705a      	strb	r2, [r3, #1]
 80137a8:	68a3      	ldr	r3, [r4, #8]
 80137aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80137ae:	709a      	strb	r2, [r3, #2]
 80137b0:	68a3      	ldr	r3, [r4, #8]
 80137b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80137b6:	70da      	strb	r2, [r3, #3]
 80137b8:	68a2      	ldr	r2, [r4, #8]
 80137ba:	6923      	ldr	r3, [r4, #16]
 80137bc:	3204      	adds	r2, #4
 80137be:	3304      	adds	r3, #4
 80137c0:	2104      	movs	r1, #4
 80137c2:	60a2      	str	r2, [r4, #8]
 80137c4:	6123      	str	r3, [r4, #16]
 80137c6:	7561      	strb	r1, [r4, #21]
 80137c8:	7da0      	ldrb	r0, [r4, #22]
 80137ca:	f080 0001 	eor.w	r0, r0, #1
 80137ce:	b003      	add	sp, #12
 80137d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137d4:	9a01      	ldr	r2, [sp, #4]
 80137d6:	601a      	str	r2, [r3, #0]
 80137d8:	e7ee      	b.n	80137b8 <ucdr_serialize_endian_uint32_t+0xc0>
 80137da:	68a2      	ldr	r2, [r4, #8]
 80137dc:	6923      	ldr	r3, [r4, #16]
 80137de:	7da0      	ldrb	r0, [r4, #22]
 80137e0:	f884 8015 	strb.w	r8, [r4, #21]
 80137e4:	1bd2      	subs	r2, r2, r7
 80137e6:	1bdb      	subs	r3, r3, r7
 80137e8:	f080 0001 	eor.w	r0, r0, #1
 80137ec:	60a2      	str	r2, [r4, #8]
 80137ee:	6123      	str	r3, [r4, #16]
 80137f0:	b003      	add	sp, #12
 80137f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80137fc:	701a      	strb	r2, [r3, #0]
 80137fe:	68a3      	ldr	r3, [r4, #8]
 8013800:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013804:	701a      	strb	r2, [r3, #0]
 8013806:	68a3      	ldr	r3, [r4, #8]
 8013808:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801380c:	701a      	strb	r2, [r3, #0]
 801380e:	e7ad      	b.n	801376c <ucdr_serialize_endian_uint32_t+0x74>
 8013810:	ad01      	add	r5, sp, #4
 8013812:	4629      	mov	r1, r5
 8013814:	463a      	mov	r2, r7
 8013816:	4630      	mov	r0, r6
 8013818:	f003 fd7d 	bl	8017316 <memcpy>
 801381c:	68a0      	ldr	r0, [r4, #8]
 801381e:	464a      	mov	r2, r9
 8013820:	19e9      	adds	r1, r5, r7
 8013822:	f003 fd78 	bl	8017316 <memcpy>
 8013826:	e7a1      	b.n	801376c <ucdr_serialize_endian_uint32_t+0x74>

08013828 <ucdr_deserialize_uint32_t>:
 8013828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801382c:	460d      	mov	r5, r1
 801382e:	2104      	movs	r1, #4
 8013830:	4604      	mov	r4, r0
 8013832:	f7f8 fdb5 	bl	800c3a0 <ucdr_buffer_alignment>
 8013836:	4601      	mov	r1, r0
 8013838:	4620      	mov	r0, r4
 801383a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801383e:	f7f8 fdf3 	bl	800c428 <ucdr_advance_buffer>
 8013842:	2104      	movs	r1, #4
 8013844:	4620      	mov	r0, r4
 8013846:	f7f8 fd4b 	bl	800c2e0 <ucdr_check_buffer_available_for>
 801384a:	2800      	cmp	r0, #0
 801384c:	d138      	bne.n	80138c0 <ucdr_deserialize_uint32_t+0x98>
 801384e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013852:	42b7      	cmp	r7, r6
 8013854:	d92f      	bls.n	80138b6 <ucdr_deserialize_uint32_t+0x8e>
 8013856:	6923      	ldr	r3, [r4, #16]
 8013858:	60a7      	str	r7, [r4, #8]
 801385a:	1bbf      	subs	r7, r7, r6
 801385c:	443b      	add	r3, r7
 801385e:	f1c7 0904 	rsb	r9, r7, #4
 8013862:	6123      	str	r3, [r4, #16]
 8013864:	4649      	mov	r1, r9
 8013866:	4620      	mov	r0, r4
 8013868:	f7f8 fd46 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 801386c:	2800      	cmp	r0, #0
 801386e:	d046      	beq.n	80138fe <ucdr_deserialize_uint32_t+0xd6>
 8013870:	7d23      	ldrb	r3, [r4, #20]
 8013872:	2b01      	cmp	r3, #1
 8013874:	d05c      	beq.n	8013930 <ucdr_deserialize_uint32_t+0x108>
 8013876:	78f3      	ldrb	r3, [r6, #3]
 8013878:	702b      	strb	r3, [r5, #0]
 801387a:	2f00      	cmp	r7, #0
 801387c:	d04c      	beq.n	8013918 <ucdr_deserialize_uint32_t+0xf0>
 801387e:	78b3      	ldrb	r3, [r6, #2]
 8013880:	706b      	strb	r3, [r5, #1]
 8013882:	2f01      	cmp	r7, #1
 8013884:	f105 0302 	add.w	r3, r5, #2
 8013888:	d04a      	beq.n	8013920 <ucdr_deserialize_uint32_t+0xf8>
 801388a:	7873      	ldrb	r3, [r6, #1]
 801388c:	70ab      	strb	r3, [r5, #2]
 801388e:	2f02      	cmp	r7, #2
 8013890:	f105 0303 	add.w	r3, r5, #3
 8013894:	d048      	beq.n	8013928 <ucdr_deserialize_uint32_t+0x100>
 8013896:	7833      	ldrb	r3, [r6, #0]
 8013898:	70eb      	strb	r3, [r5, #3]
 801389a:	6923      	ldr	r3, [r4, #16]
 801389c:	68a2      	ldr	r2, [r4, #8]
 801389e:	7da0      	ldrb	r0, [r4, #22]
 80138a0:	2104      	movs	r1, #4
 80138a2:	3304      	adds	r3, #4
 80138a4:	444a      	add	r2, r9
 80138a6:	1bdb      	subs	r3, r3, r7
 80138a8:	7561      	strb	r1, [r4, #21]
 80138aa:	60a2      	str	r2, [r4, #8]
 80138ac:	6123      	str	r3, [r4, #16]
 80138ae:	f080 0001 	eor.w	r0, r0, #1
 80138b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138b6:	2104      	movs	r1, #4
 80138b8:	4620      	mov	r0, r4
 80138ba:	f7f8 fd1d 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 80138be:	b1b0      	cbz	r0, 80138ee <ucdr_deserialize_uint32_t+0xc6>
 80138c0:	7d23      	ldrb	r3, [r4, #20]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	d017      	beq.n	80138f8 <ucdr_deserialize_uint32_t+0xd0>
 80138c8:	78db      	ldrb	r3, [r3, #3]
 80138ca:	702b      	strb	r3, [r5, #0]
 80138cc:	68a3      	ldr	r3, [r4, #8]
 80138ce:	789b      	ldrb	r3, [r3, #2]
 80138d0:	706b      	strb	r3, [r5, #1]
 80138d2:	68a3      	ldr	r3, [r4, #8]
 80138d4:	785b      	ldrb	r3, [r3, #1]
 80138d6:	70ab      	strb	r3, [r5, #2]
 80138d8:	68a3      	ldr	r3, [r4, #8]
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	70eb      	strb	r3, [r5, #3]
 80138de:	68a2      	ldr	r2, [r4, #8]
 80138e0:	6923      	ldr	r3, [r4, #16]
 80138e2:	3204      	adds	r2, #4
 80138e4:	3304      	adds	r3, #4
 80138e6:	2104      	movs	r1, #4
 80138e8:	60a2      	str	r2, [r4, #8]
 80138ea:	6123      	str	r3, [r4, #16]
 80138ec:	7561      	strb	r1, [r4, #21]
 80138ee:	7da0      	ldrb	r0, [r4, #22]
 80138f0:	f080 0001 	eor.w	r0, r0, #1
 80138f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	602b      	str	r3, [r5, #0]
 80138fc:	e7ef      	b.n	80138de <ucdr_deserialize_uint32_t+0xb6>
 80138fe:	68a2      	ldr	r2, [r4, #8]
 8013900:	6923      	ldr	r3, [r4, #16]
 8013902:	7da0      	ldrb	r0, [r4, #22]
 8013904:	f884 8015 	strb.w	r8, [r4, #21]
 8013908:	1bd2      	subs	r2, r2, r7
 801390a:	1bdb      	subs	r3, r3, r7
 801390c:	60a2      	str	r2, [r4, #8]
 801390e:	6123      	str	r3, [r4, #16]
 8013910:	f080 0001 	eor.w	r0, r0, #1
 8013914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013918:	68a3      	ldr	r3, [r4, #8]
 801391a:	789b      	ldrb	r3, [r3, #2]
 801391c:	706b      	strb	r3, [r5, #1]
 801391e:	1cab      	adds	r3, r5, #2
 8013920:	68a2      	ldr	r2, [r4, #8]
 8013922:	7852      	ldrb	r2, [r2, #1]
 8013924:	f803 2b01 	strb.w	r2, [r3], #1
 8013928:	68a2      	ldr	r2, [r4, #8]
 801392a:	7812      	ldrb	r2, [r2, #0]
 801392c:	701a      	strb	r2, [r3, #0]
 801392e:	e7b4      	b.n	801389a <ucdr_deserialize_uint32_t+0x72>
 8013930:	4631      	mov	r1, r6
 8013932:	463a      	mov	r2, r7
 8013934:	4628      	mov	r0, r5
 8013936:	f003 fcee 	bl	8017316 <memcpy>
 801393a:	68a1      	ldr	r1, [r4, #8]
 801393c:	464a      	mov	r2, r9
 801393e:	19e8      	adds	r0, r5, r7
 8013940:	f003 fce9 	bl	8017316 <memcpy>
 8013944:	e7a9      	b.n	801389a <ucdr_deserialize_uint32_t+0x72>
 8013946:	bf00      	nop

08013948 <ucdr_deserialize_endian_uint32_t>:
 8013948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801394c:	460e      	mov	r6, r1
 801394e:	2104      	movs	r1, #4
 8013950:	4604      	mov	r4, r0
 8013952:	4615      	mov	r5, r2
 8013954:	f7f8 fd24 	bl	800c3a0 <ucdr_buffer_alignment>
 8013958:	4601      	mov	r1, r0
 801395a:	4620      	mov	r0, r4
 801395c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013960:	f7f8 fd62 	bl	800c428 <ucdr_advance_buffer>
 8013964:	2104      	movs	r1, #4
 8013966:	4620      	mov	r0, r4
 8013968:	f7f8 fcba 	bl	800c2e0 <ucdr_check_buffer_available_for>
 801396c:	2800      	cmp	r0, #0
 801396e:	d13c      	bne.n	80139ea <ucdr_deserialize_endian_uint32_t+0xa2>
 8013970:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013974:	42bb      	cmp	r3, r7
 8013976:	d933      	bls.n	80139e0 <ucdr_deserialize_endian_uint32_t+0x98>
 8013978:	eba3 0807 	sub.w	r8, r3, r7
 801397c:	60a3      	str	r3, [r4, #8]
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	f1c8 0a04 	rsb	sl, r8, #4
 8013984:	4443      	add	r3, r8
 8013986:	6123      	str	r3, [r4, #16]
 8013988:	4651      	mov	r1, sl
 801398a:	4620      	mov	r0, r4
 801398c:	f7f8 fcb4 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013990:	2800      	cmp	r0, #0
 8013992:	d048      	beq.n	8013a26 <ucdr_deserialize_endian_uint32_t+0xde>
 8013994:	2e01      	cmp	r6, #1
 8013996:	d061      	beq.n	8013a5c <ucdr_deserialize_endian_uint32_t+0x114>
 8013998:	78fb      	ldrb	r3, [r7, #3]
 801399a:	702b      	strb	r3, [r5, #0]
 801399c:	f1b8 0f00 	cmp.w	r8, #0
 80139a0:	d050      	beq.n	8013a44 <ucdr_deserialize_endian_uint32_t+0xfc>
 80139a2:	78bb      	ldrb	r3, [r7, #2]
 80139a4:	706b      	strb	r3, [r5, #1]
 80139a6:	f1b8 0f01 	cmp.w	r8, #1
 80139aa:	f105 0302 	add.w	r3, r5, #2
 80139ae:	d04d      	beq.n	8013a4c <ucdr_deserialize_endian_uint32_t+0x104>
 80139b0:	787b      	ldrb	r3, [r7, #1]
 80139b2:	70ab      	strb	r3, [r5, #2]
 80139b4:	f1b8 0f02 	cmp.w	r8, #2
 80139b8:	f105 0303 	add.w	r3, r5, #3
 80139bc:	d04a      	beq.n	8013a54 <ucdr_deserialize_endian_uint32_t+0x10c>
 80139be:	783b      	ldrb	r3, [r7, #0]
 80139c0:	70eb      	strb	r3, [r5, #3]
 80139c2:	6923      	ldr	r3, [r4, #16]
 80139c4:	68a2      	ldr	r2, [r4, #8]
 80139c6:	7da0      	ldrb	r0, [r4, #22]
 80139c8:	2104      	movs	r1, #4
 80139ca:	3304      	adds	r3, #4
 80139cc:	4452      	add	r2, sl
 80139ce:	eba3 0308 	sub.w	r3, r3, r8
 80139d2:	7561      	strb	r1, [r4, #21]
 80139d4:	60a2      	str	r2, [r4, #8]
 80139d6:	6123      	str	r3, [r4, #16]
 80139d8:	f080 0001 	eor.w	r0, r0, #1
 80139dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139e0:	2104      	movs	r1, #4
 80139e2:	4620      	mov	r0, r4
 80139e4:	f7f8 fc88 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 80139e8:	b1a8      	cbz	r0, 8013a16 <ucdr_deserialize_endian_uint32_t+0xce>
 80139ea:	2e01      	cmp	r6, #1
 80139ec:	68a3      	ldr	r3, [r4, #8]
 80139ee:	d017      	beq.n	8013a20 <ucdr_deserialize_endian_uint32_t+0xd8>
 80139f0:	78db      	ldrb	r3, [r3, #3]
 80139f2:	702b      	strb	r3, [r5, #0]
 80139f4:	68a3      	ldr	r3, [r4, #8]
 80139f6:	789b      	ldrb	r3, [r3, #2]
 80139f8:	706b      	strb	r3, [r5, #1]
 80139fa:	68a3      	ldr	r3, [r4, #8]
 80139fc:	785b      	ldrb	r3, [r3, #1]
 80139fe:	70ab      	strb	r3, [r5, #2]
 8013a00:	68a3      	ldr	r3, [r4, #8]
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	70eb      	strb	r3, [r5, #3]
 8013a06:	68a2      	ldr	r2, [r4, #8]
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	3204      	adds	r2, #4
 8013a0c:	3304      	adds	r3, #4
 8013a0e:	2104      	movs	r1, #4
 8013a10:	60a2      	str	r2, [r4, #8]
 8013a12:	6123      	str	r3, [r4, #16]
 8013a14:	7561      	strb	r1, [r4, #21]
 8013a16:	7da0      	ldrb	r0, [r4, #22]
 8013a18:	f080 0001 	eor.w	r0, r0, #1
 8013a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	602b      	str	r3, [r5, #0]
 8013a24:	e7ef      	b.n	8013a06 <ucdr_deserialize_endian_uint32_t+0xbe>
 8013a26:	68a2      	ldr	r2, [r4, #8]
 8013a28:	6923      	ldr	r3, [r4, #16]
 8013a2a:	7da0      	ldrb	r0, [r4, #22]
 8013a2c:	f884 9015 	strb.w	r9, [r4, #21]
 8013a30:	eba2 0208 	sub.w	r2, r2, r8
 8013a34:	eba3 0308 	sub.w	r3, r3, r8
 8013a38:	60a2      	str	r2, [r4, #8]
 8013a3a:	6123      	str	r3, [r4, #16]
 8013a3c:	f080 0001 	eor.w	r0, r0, #1
 8013a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a44:	68a3      	ldr	r3, [r4, #8]
 8013a46:	789b      	ldrb	r3, [r3, #2]
 8013a48:	706b      	strb	r3, [r5, #1]
 8013a4a:	1cab      	adds	r3, r5, #2
 8013a4c:	68a2      	ldr	r2, [r4, #8]
 8013a4e:	7852      	ldrb	r2, [r2, #1]
 8013a50:	f803 2b01 	strb.w	r2, [r3], #1
 8013a54:	68a2      	ldr	r2, [r4, #8]
 8013a56:	7812      	ldrb	r2, [r2, #0]
 8013a58:	701a      	strb	r2, [r3, #0]
 8013a5a:	e7b2      	b.n	80139c2 <ucdr_deserialize_endian_uint32_t+0x7a>
 8013a5c:	4639      	mov	r1, r7
 8013a5e:	4642      	mov	r2, r8
 8013a60:	4628      	mov	r0, r5
 8013a62:	f003 fc58 	bl	8017316 <memcpy>
 8013a66:	68a1      	ldr	r1, [r4, #8]
 8013a68:	4652      	mov	r2, sl
 8013a6a:	eb05 0008 	add.w	r0, r5, r8
 8013a6e:	f003 fc52 	bl	8017316 <memcpy>
 8013a72:	e7a6      	b.n	80139c2 <ucdr_deserialize_endian_uint32_t+0x7a>

08013a74 <ucdr_serialize_uint64_t>:
 8013a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a78:	2108      	movs	r1, #8
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8013a82:	f7f8 fc8d 	bl	800c3a0 <ucdr_buffer_alignment>
 8013a86:	4601      	mov	r1, r0
 8013a88:	4620      	mov	r0, r4
 8013a8a:	7d67      	ldrb	r7, [r4, #21]
 8013a8c:	f7f8 fccc 	bl	800c428 <ucdr_advance_buffer>
 8013a90:	2108      	movs	r1, #8
 8013a92:	4620      	mov	r0, r4
 8013a94:	f7f8 fc24 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	d14e      	bne.n	8013b3a <ucdr_serialize_uint64_t+0xc6>
 8013a9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013aa0:	42ab      	cmp	r3, r5
 8013aa2:	d945      	bls.n	8013b30 <ucdr_serialize_uint64_t+0xbc>
 8013aa4:	1b5e      	subs	r6, r3, r5
 8013aa6:	60a3      	str	r3, [r4, #8]
 8013aa8:	6923      	ldr	r3, [r4, #16]
 8013aaa:	f1c6 0808 	rsb	r8, r6, #8
 8013aae:	4433      	add	r3, r6
 8013ab0:	6123      	str	r3, [r4, #16]
 8013ab2:	4641      	mov	r1, r8
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	f7f8 fc1f 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013aba:	2800      	cmp	r0, #0
 8013abc:	d074      	beq.n	8013ba8 <ucdr_serialize_uint64_t+0x134>
 8013abe:	7d23      	ldrb	r3, [r4, #20]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	f000 809b 	beq.w	8013bfc <ucdr_serialize_uint64_t+0x188>
 8013ac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013aca:	702b      	strb	r3, [r5, #0]
 8013acc:	2e00      	cmp	r6, #0
 8013ace:	d078      	beq.n	8013bc2 <ucdr_serialize_uint64_t+0x14e>
 8013ad0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013ad4:	706b      	strb	r3, [r5, #1]
 8013ad6:	2e01      	cmp	r6, #1
 8013ad8:	d077      	beq.n	8013bca <ucdr_serialize_uint64_t+0x156>
 8013ada:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013ade:	70ab      	strb	r3, [r5, #2]
 8013ae0:	2e02      	cmp	r6, #2
 8013ae2:	d076      	beq.n	8013bd2 <ucdr_serialize_uint64_t+0x15e>
 8013ae4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013ae8:	70eb      	strb	r3, [r5, #3]
 8013aea:	2e03      	cmp	r6, #3
 8013aec:	d075      	beq.n	8013bda <ucdr_serialize_uint64_t+0x166>
 8013aee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8013af2:	712b      	strb	r3, [r5, #4]
 8013af4:	2e04      	cmp	r6, #4
 8013af6:	d074      	beq.n	8013be2 <ucdr_serialize_uint64_t+0x16e>
 8013af8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013afc:	716b      	strb	r3, [r5, #5]
 8013afe:	2e05      	cmp	r6, #5
 8013b00:	d073      	beq.n	8013bea <ucdr_serialize_uint64_t+0x176>
 8013b02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013b06:	71ab      	strb	r3, [r5, #6]
 8013b08:	2e06      	cmp	r6, #6
 8013b0a:	d072      	beq.n	8013bf2 <ucdr_serialize_uint64_t+0x17e>
 8013b0c:	f89d 3000 	ldrb.w	r3, [sp]
 8013b10:	71eb      	strb	r3, [r5, #7]
 8013b12:	6923      	ldr	r3, [r4, #16]
 8013b14:	68a2      	ldr	r2, [r4, #8]
 8013b16:	7da0      	ldrb	r0, [r4, #22]
 8013b18:	3308      	adds	r3, #8
 8013b1a:	1b9e      	subs	r6, r3, r6
 8013b1c:	4442      	add	r2, r8
 8013b1e:	2308      	movs	r3, #8
 8013b20:	f080 0001 	eor.w	r0, r0, #1
 8013b24:	60a2      	str	r2, [r4, #8]
 8013b26:	6126      	str	r6, [r4, #16]
 8013b28:	7563      	strb	r3, [r4, #21]
 8013b2a:	b002      	add	sp, #8
 8013b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b30:	2108      	movs	r1, #8
 8013b32:	4620      	mov	r0, r4
 8013b34:	f7f8 fbe0 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013b38:	b350      	cbz	r0, 8013b90 <ucdr_serialize_uint64_t+0x11c>
 8013b3a:	7d23      	ldrb	r3, [r4, #20]
 8013b3c:	2b01      	cmp	r3, #1
 8013b3e:	d02d      	beq.n	8013b9c <ucdr_serialize_uint64_t+0x128>
 8013b40:	68a3      	ldr	r3, [r4, #8]
 8013b42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013b46:	701a      	strb	r2, [r3, #0]
 8013b48:	68a3      	ldr	r3, [r4, #8]
 8013b4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013b4e:	705a      	strb	r2, [r3, #1]
 8013b50:	68a3      	ldr	r3, [r4, #8]
 8013b52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013b56:	709a      	strb	r2, [r3, #2]
 8013b58:	68a3      	ldr	r3, [r4, #8]
 8013b5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013b5e:	70da      	strb	r2, [r3, #3]
 8013b60:	68a3      	ldr	r3, [r4, #8]
 8013b62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013b66:	711a      	strb	r2, [r3, #4]
 8013b68:	68a3      	ldr	r3, [r4, #8]
 8013b6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013b6e:	715a      	strb	r2, [r3, #5]
 8013b70:	68a3      	ldr	r3, [r4, #8]
 8013b72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013b76:	719a      	strb	r2, [r3, #6]
 8013b78:	68a3      	ldr	r3, [r4, #8]
 8013b7a:	f89d 2000 	ldrb.w	r2, [sp]
 8013b7e:	71da      	strb	r2, [r3, #7]
 8013b80:	68a2      	ldr	r2, [r4, #8]
 8013b82:	6923      	ldr	r3, [r4, #16]
 8013b84:	3208      	adds	r2, #8
 8013b86:	3308      	adds	r3, #8
 8013b88:	2108      	movs	r1, #8
 8013b8a:	60a2      	str	r2, [r4, #8]
 8013b8c:	6123      	str	r3, [r4, #16]
 8013b8e:	7561      	strb	r1, [r4, #21]
 8013b90:	7da0      	ldrb	r0, [r4, #22]
 8013b92:	f080 0001 	eor.w	r0, r0, #1
 8013b96:	b002      	add	sp, #8
 8013b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b9c:	466b      	mov	r3, sp
 8013b9e:	cb03      	ldmia	r3!, {r0, r1}
 8013ba0:	68a3      	ldr	r3, [r4, #8]
 8013ba2:	6018      	str	r0, [r3, #0]
 8013ba4:	6059      	str	r1, [r3, #4]
 8013ba6:	e7eb      	b.n	8013b80 <ucdr_serialize_uint64_t+0x10c>
 8013ba8:	68a2      	ldr	r2, [r4, #8]
 8013baa:	6923      	ldr	r3, [r4, #16]
 8013bac:	7da0      	ldrb	r0, [r4, #22]
 8013bae:	7567      	strb	r7, [r4, #21]
 8013bb0:	1b92      	subs	r2, r2, r6
 8013bb2:	1b9b      	subs	r3, r3, r6
 8013bb4:	f080 0001 	eor.w	r0, r0, #1
 8013bb8:	60a2      	str	r2, [r4, #8]
 8013bba:	6123      	str	r3, [r4, #16]
 8013bbc:	b002      	add	sp, #8
 8013bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc2:	68a3      	ldr	r3, [r4, #8]
 8013bc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013bc8:	701a      	strb	r2, [r3, #0]
 8013bca:	68a3      	ldr	r3, [r4, #8]
 8013bcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013bd0:	701a      	strb	r2, [r3, #0]
 8013bd2:	68a3      	ldr	r3, [r4, #8]
 8013bd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013bd8:	701a      	strb	r2, [r3, #0]
 8013bda:	68a3      	ldr	r3, [r4, #8]
 8013bdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013be0:	701a      	strb	r2, [r3, #0]
 8013be2:	68a3      	ldr	r3, [r4, #8]
 8013be4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013be8:	701a      	strb	r2, [r3, #0]
 8013bea:	68a3      	ldr	r3, [r4, #8]
 8013bec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013bf0:	701a      	strb	r2, [r3, #0]
 8013bf2:	68a3      	ldr	r3, [r4, #8]
 8013bf4:	f89d 2000 	ldrb.w	r2, [sp]
 8013bf8:	701a      	strb	r2, [r3, #0]
 8013bfa:	e78a      	b.n	8013b12 <ucdr_serialize_uint64_t+0x9e>
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	466d      	mov	r5, sp
 8013c00:	4629      	mov	r1, r5
 8013c02:	4632      	mov	r2, r6
 8013c04:	f003 fb87 	bl	8017316 <memcpy>
 8013c08:	68a0      	ldr	r0, [r4, #8]
 8013c0a:	4642      	mov	r2, r8
 8013c0c:	19a9      	adds	r1, r5, r6
 8013c0e:	f003 fb82 	bl	8017316 <memcpy>
 8013c12:	e77e      	b.n	8013b12 <ucdr_serialize_uint64_t+0x9e>

08013c14 <ucdr_serialize_int16_t>:
 8013c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	2102      	movs	r1, #2
 8013c1e:	4604      	mov	r4, r0
 8013c20:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013c24:	f7f8 fbbc 	bl	800c3a0 <ucdr_buffer_alignment>
 8013c28:	4601      	mov	r1, r0
 8013c2a:	4620      	mov	r0, r4
 8013c2c:	7d67      	ldrb	r7, [r4, #21]
 8013c2e:	f7f8 fbfb 	bl	800c428 <ucdr_advance_buffer>
 8013c32:	2102      	movs	r1, #2
 8013c34:	4620      	mov	r0, r4
 8013c36:	f7f8 fb53 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013c3a:	bb78      	cbnz	r0, 8013c9c <ucdr_serialize_int16_t+0x88>
 8013c3c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013c40:	42ab      	cmp	r3, r5
 8013c42:	d926      	bls.n	8013c92 <ucdr_serialize_int16_t+0x7e>
 8013c44:	1b5e      	subs	r6, r3, r5
 8013c46:	60a3      	str	r3, [r4, #8]
 8013c48:	6923      	ldr	r3, [r4, #16]
 8013c4a:	f1c6 0802 	rsb	r8, r6, #2
 8013c4e:	4433      	add	r3, r6
 8013c50:	6123      	str	r3, [r4, #16]
 8013c52:	4641      	mov	r1, r8
 8013c54:	4620      	mov	r0, r4
 8013c56:	f7f8 fb4f 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013c5a:	2800      	cmp	r0, #0
 8013c5c:	d03b      	beq.n	8013cd6 <ucdr_serialize_int16_t+0xc2>
 8013c5e:	7d23      	ldrb	r3, [r4, #20]
 8013c60:	2b01      	cmp	r3, #1
 8013c62:	d04a      	beq.n	8013cfa <ucdr_serialize_int16_t+0xe6>
 8013c64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013c68:	702b      	strb	r3, [r5, #0]
 8013c6a:	2e00      	cmp	r6, #0
 8013c6c:	d040      	beq.n	8013cf0 <ucdr_serialize_int16_t+0xdc>
 8013c6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013c72:	706b      	strb	r3, [r5, #1]
 8013c74:	6923      	ldr	r3, [r4, #16]
 8013c76:	68a2      	ldr	r2, [r4, #8]
 8013c78:	7da0      	ldrb	r0, [r4, #22]
 8013c7a:	3302      	adds	r3, #2
 8013c7c:	1b9e      	subs	r6, r3, r6
 8013c7e:	4442      	add	r2, r8
 8013c80:	2302      	movs	r3, #2
 8013c82:	f080 0001 	eor.w	r0, r0, #1
 8013c86:	60a2      	str	r2, [r4, #8]
 8013c88:	6126      	str	r6, [r4, #16]
 8013c8a:	7563      	strb	r3, [r4, #21]
 8013c8c:	b002      	add	sp, #8
 8013c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c92:	2102      	movs	r1, #2
 8013c94:	4620      	mov	r0, r4
 8013c96:	f7f8 fb2f 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013c9a:	b190      	cbz	r0, 8013cc2 <ucdr_serialize_int16_t+0xae>
 8013c9c:	7d23      	ldrb	r3, [r4, #20]
 8013c9e:	2b01      	cmp	r3, #1
 8013ca0:	68a3      	ldr	r3, [r4, #8]
 8013ca2:	d014      	beq.n	8013cce <ucdr_serialize_int16_t+0xba>
 8013ca4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ca8:	701a      	strb	r2, [r3, #0]
 8013caa:	68a3      	ldr	r3, [r4, #8]
 8013cac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013cb0:	705a      	strb	r2, [r3, #1]
 8013cb2:	68a2      	ldr	r2, [r4, #8]
 8013cb4:	6923      	ldr	r3, [r4, #16]
 8013cb6:	3202      	adds	r2, #2
 8013cb8:	3302      	adds	r3, #2
 8013cba:	2102      	movs	r1, #2
 8013cbc:	60a2      	str	r2, [r4, #8]
 8013cbe:	6123      	str	r3, [r4, #16]
 8013cc0:	7561      	strb	r1, [r4, #21]
 8013cc2:	7da0      	ldrb	r0, [r4, #22]
 8013cc4:	f080 0001 	eor.w	r0, r0, #1
 8013cc8:	b002      	add	sp, #8
 8013cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013cd2:	801a      	strh	r2, [r3, #0]
 8013cd4:	e7ed      	b.n	8013cb2 <ucdr_serialize_int16_t+0x9e>
 8013cd6:	68a2      	ldr	r2, [r4, #8]
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	7da0      	ldrb	r0, [r4, #22]
 8013cdc:	7567      	strb	r7, [r4, #21]
 8013cde:	1b92      	subs	r2, r2, r6
 8013ce0:	1b9b      	subs	r3, r3, r6
 8013ce2:	f080 0001 	eor.w	r0, r0, #1
 8013ce6:	60a2      	str	r2, [r4, #8]
 8013ce8:	6123      	str	r3, [r4, #16]
 8013cea:	b002      	add	sp, #8
 8013cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cf0:	68a3      	ldr	r3, [r4, #8]
 8013cf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013cf6:	701a      	strb	r2, [r3, #0]
 8013cf8:	e7bc      	b.n	8013c74 <ucdr_serialize_int16_t+0x60>
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f10d 0506 	add.w	r5, sp, #6
 8013d00:	4629      	mov	r1, r5
 8013d02:	4632      	mov	r2, r6
 8013d04:	f003 fb07 	bl	8017316 <memcpy>
 8013d08:	68a0      	ldr	r0, [r4, #8]
 8013d0a:	4642      	mov	r2, r8
 8013d0c:	19a9      	adds	r1, r5, r6
 8013d0e:	f003 fb02 	bl	8017316 <memcpy>
 8013d12:	e7af      	b.n	8013c74 <ucdr_serialize_int16_t+0x60>

08013d14 <ucdr_deserialize_int16_t>:
 8013d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d18:	460d      	mov	r5, r1
 8013d1a:	2102      	movs	r1, #2
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	f7f8 fb3f 	bl	800c3a0 <ucdr_buffer_alignment>
 8013d22:	4601      	mov	r1, r0
 8013d24:	4620      	mov	r0, r4
 8013d26:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013d2a:	f7f8 fb7d 	bl	800c428 <ucdr_advance_buffer>
 8013d2e:	2102      	movs	r1, #2
 8013d30:	4620      	mov	r0, r4
 8013d32:	f7f8 fad5 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013d36:	bb60      	cbnz	r0, 8013d92 <ucdr_deserialize_int16_t+0x7e>
 8013d38:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8013d3c:	42be      	cmp	r6, r7
 8013d3e:	d923      	bls.n	8013d88 <ucdr_deserialize_int16_t+0x74>
 8013d40:	6923      	ldr	r3, [r4, #16]
 8013d42:	60a6      	str	r6, [r4, #8]
 8013d44:	1bf6      	subs	r6, r6, r7
 8013d46:	4433      	add	r3, r6
 8013d48:	f1c6 0902 	rsb	r9, r6, #2
 8013d4c:	6123      	str	r3, [r4, #16]
 8013d4e:	4649      	mov	r1, r9
 8013d50:	4620      	mov	r0, r4
 8013d52:	f7f8 fad1 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013d56:	2800      	cmp	r0, #0
 8013d58:	d034      	beq.n	8013dc4 <ucdr_deserialize_int16_t+0xb0>
 8013d5a:	7d23      	ldrb	r3, [r4, #20]
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d042      	beq.n	8013de6 <ucdr_deserialize_int16_t+0xd2>
 8013d60:	787b      	ldrb	r3, [r7, #1]
 8013d62:	702b      	strb	r3, [r5, #0]
 8013d64:	2e00      	cmp	r6, #0
 8013d66:	d03a      	beq.n	8013dde <ucdr_deserialize_int16_t+0xca>
 8013d68:	783b      	ldrb	r3, [r7, #0]
 8013d6a:	706b      	strb	r3, [r5, #1]
 8013d6c:	6923      	ldr	r3, [r4, #16]
 8013d6e:	68a2      	ldr	r2, [r4, #8]
 8013d70:	7da0      	ldrb	r0, [r4, #22]
 8013d72:	2102      	movs	r1, #2
 8013d74:	3302      	adds	r3, #2
 8013d76:	444a      	add	r2, r9
 8013d78:	1b9b      	subs	r3, r3, r6
 8013d7a:	7561      	strb	r1, [r4, #21]
 8013d7c:	60a2      	str	r2, [r4, #8]
 8013d7e:	6123      	str	r3, [r4, #16]
 8013d80:	f080 0001 	eor.w	r0, r0, #1
 8013d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d88:	2102      	movs	r1, #2
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	f7f8 fab4 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013d90:	b180      	cbz	r0, 8013db4 <ucdr_deserialize_int16_t+0xa0>
 8013d92:	7d23      	ldrb	r3, [r4, #20]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	68a3      	ldr	r3, [r4, #8]
 8013d98:	d011      	beq.n	8013dbe <ucdr_deserialize_int16_t+0xaa>
 8013d9a:	785b      	ldrb	r3, [r3, #1]
 8013d9c:	702b      	strb	r3, [r5, #0]
 8013d9e:	68a3      	ldr	r3, [r4, #8]
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	706b      	strb	r3, [r5, #1]
 8013da4:	68a2      	ldr	r2, [r4, #8]
 8013da6:	6923      	ldr	r3, [r4, #16]
 8013da8:	3202      	adds	r2, #2
 8013daa:	3302      	adds	r3, #2
 8013dac:	2102      	movs	r1, #2
 8013dae:	60a2      	str	r2, [r4, #8]
 8013db0:	6123      	str	r3, [r4, #16]
 8013db2:	7561      	strb	r1, [r4, #21]
 8013db4:	7da0      	ldrb	r0, [r4, #22]
 8013db6:	f080 0001 	eor.w	r0, r0, #1
 8013dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dbe:	881b      	ldrh	r3, [r3, #0]
 8013dc0:	802b      	strh	r3, [r5, #0]
 8013dc2:	e7ef      	b.n	8013da4 <ucdr_deserialize_int16_t+0x90>
 8013dc4:	68a2      	ldr	r2, [r4, #8]
 8013dc6:	6923      	ldr	r3, [r4, #16]
 8013dc8:	7da0      	ldrb	r0, [r4, #22]
 8013dca:	f884 8015 	strb.w	r8, [r4, #21]
 8013dce:	1b92      	subs	r2, r2, r6
 8013dd0:	1b9b      	subs	r3, r3, r6
 8013dd2:	60a2      	str	r2, [r4, #8]
 8013dd4:	6123      	str	r3, [r4, #16]
 8013dd6:	f080 0001 	eor.w	r0, r0, #1
 8013dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dde:	68a3      	ldr	r3, [r4, #8]
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	706b      	strb	r3, [r5, #1]
 8013de4:	e7c2      	b.n	8013d6c <ucdr_deserialize_int16_t+0x58>
 8013de6:	4639      	mov	r1, r7
 8013de8:	4632      	mov	r2, r6
 8013dea:	4628      	mov	r0, r5
 8013dec:	f003 fa93 	bl	8017316 <memcpy>
 8013df0:	68a1      	ldr	r1, [r4, #8]
 8013df2:	464a      	mov	r2, r9
 8013df4:	19a8      	adds	r0, r5, r6
 8013df6:	f003 fa8e 	bl	8017316 <memcpy>
 8013dfa:	e7b7      	b.n	8013d6c <ucdr_deserialize_int16_t+0x58>

08013dfc <ucdr_serialize_int32_t>:
 8013dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	b082      	sub	sp, #8
 8013e02:	4604      	mov	r4, r0
 8013e04:	9101      	str	r1, [sp, #4]
 8013e06:	2104      	movs	r1, #4
 8013e08:	f7f8 faca 	bl	800c3a0 <ucdr_buffer_alignment>
 8013e0c:	4601      	mov	r1, r0
 8013e0e:	4620      	mov	r0, r4
 8013e10:	7d67      	ldrb	r7, [r4, #21]
 8013e12:	f7f8 fb09 	bl	800c428 <ucdr_advance_buffer>
 8013e16:	2104      	movs	r1, #4
 8013e18:	4620      	mov	r0, r4
 8013e1a:	f7f8 fa61 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013e1e:	2800      	cmp	r0, #0
 8013e20:	d139      	bne.n	8013e96 <ucdr_serialize_int32_t+0x9a>
 8013e22:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013e26:	42ab      	cmp	r3, r5
 8013e28:	d930      	bls.n	8013e8c <ucdr_serialize_int32_t+0x90>
 8013e2a:	1b5e      	subs	r6, r3, r5
 8013e2c:	60a3      	str	r3, [r4, #8]
 8013e2e:	6923      	ldr	r3, [r4, #16]
 8013e30:	f1c6 0804 	rsb	r8, r6, #4
 8013e34:	4433      	add	r3, r6
 8013e36:	6123      	str	r3, [r4, #16]
 8013e38:	4641      	mov	r1, r8
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7f8 fa5c 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013e40:	2800      	cmp	r0, #0
 8013e42:	d04c      	beq.n	8013ede <ucdr_serialize_int32_t+0xe2>
 8013e44:	7d23      	ldrb	r3, [r4, #20]
 8013e46:	2b01      	cmp	r3, #1
 8013e48:	d063      	beq.n	8013f12 <ucdr_serialize_int32_t+0x116>
 8013e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013e4e:	702b      	strb	r3, [r5, #0]
 8013e50:	2e00      	cmp	r6, #0
 8013e52:	d051      	beq.n	8013ef8 <ucdr_serialize_int32_t+0xfc>
 8013e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013e58:	706b      	strb	r3, [r5, #1]
 8013e5a:	2e01      	cmp	r6, #1
 8013e5c:	d050      	beq.n	8013f00 <ucdr_serialize_int32_t+0x104>
 8013e5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013e62:	70ab      	strb	r3, [r5, #2]
 8013e64:	2e02      	cmp	r6, #2
 8013e66:	d04f      	beq.n	8013f08 <ucdr_serialize_int32_t+0x10c>
 8013e68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013e6c:	70eb      	strb	r3, [r5, #3]
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	68a2      	ldr	r2, [r4, #8]
 8013e72:	7da0      	ldrb	r0, [r4, #22]
 8013e74:	3304      	adds	r3, #4
 8013e76:	1b9e      	subs	r6, r3, r6
 8013e78:	4442      	add	r2, r8
 8013e7a:	2304      	movs	r3, #4
 8013e7c:	f080 0001 	eor.w	r0, r0, #1
 8013e80:	60a2      	str	r2, [r4, #8]
 8013e82:	6126      	str	r6, [r4, #16]
 8013e84:	7563      	strb	r3, [r4, #21]
 8013e86:	b002      	add	sp, #8
 8013e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e8c:	2104      	movs	r1, #4
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f7f8 fa32 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013e94:	b1d0      	cbz	r0, 8013ecc <ucdr_serialize_int32_t+0xd0>
 8013e96:	7d23      	ldrb	r3, [r4, #20]
 8013e98:	2b01      	cmp	r3, #1
 8013e9a:	68a3      	ldr	r3, [r4, #8]
 8013e9c:	d01c      	beq.n	8013ed8 <ucdr_serialize_int32_t+0xdc>
 8013e9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013ea2:	701a      	strb	r2, [r3, #0]
 8013ea4:	68a3      	ldr	r3, [r4, #8]
 8013ea6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013eaa:	705a      	strb	r2, [r3, #1]
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013eb2:	709a      	strb	r2, [r3, #2]
 8013eb4:	68a3      	ldr	r3, [r4, #8]
 8013eb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013eba:	70da      	strb	r2, [r3, #3]
 8013ebc:	68a2      	ldr	r2, [r4, #8]
 8013ebe:	6923      	ldr	r3, [r4, #16]
 8013ec0:	3204      	adds	r2, #4
 8013ec2:	3304      	adds	r3, #4
 8013ec4:	2104      	movs	r1, #4
 8013ec6:	60a2      	str	r2, [r4, #8]
 8013ec8:	6123      	str	r3, [r4, #16]
 8013eca:	7561      	strb	r1, [r4, #21]
 8013ecc:	7da0      	ldrb	r0, [r4, #22]
 8013ece:	f080 0001 	eor.w	r0, r0, #1
 8013ed2:	b002      	add	sp, #8
 8013ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed8:	9a01      	ldr	r2, [sp, #4]
 8013eda:	601a      	str	r2, [r3, #0]
 8013edc:	e7ee      	b.n	8013ebc <ucdr_serialize_int32_t+0xc0>
 8013ede:	68a2      	ldr	r2, [r4, #8]
 8013ee0:	6923      	ldr	r3, [r4, #16]
 8013ee2:	7da0      	ldrb	r0, [r4, #22]
 8013ee4:	7567      	strb	r7, [r4, #21]
 8013ee6:	1b92      	subs	r2, r2, r6
 8013ee8:	1b9b      	subs	r3, r3, r6
 8013eea:	f080 0001 	eor.w	r0, r0, #1
 8013eee:	60a2      	str	r2, [r4, #8]
 8013ef0:	6123      	str	r3, [r4, #16]
 8013ef2:	b002      	add	sp, #8
 8013ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef8:	68a3      	ldr	r3, [r4, #8]
 8013efa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013efe:	701a      	strb	r2, [r3, #0]
 8013f00:	68a3      	ldr	r3, [r4, #8]
 8013f02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013f06:	701a      	strb	r2, [r3, #0]
 8013f08:	68a3      	ldr	r3, [r4, #8]
 8013f0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013f0e:	701a      	strb	r2, [r3, #0]
 8013f10:	e7ad      	b.n	8013e6e <ucdr_serialize_int32_t+0x72>
 8013f12:	4628      	mov	r0, r5
 8013f14:	ad01      	add	r5, sp, #4
 8013f16:	4629      	mov	r1, r5
 8013f18:	4632      	mov	r2, r6
 8013f1a:	f003 f9fc 	bl	8017316 <memcpy>
 8013f1e:	68a0      	ldr	r0, [r4, #8]
 8013f20:	4642      	mov	r2, r8
 8013f22:	19a9      	adds	r1, r5, r6
 8013f24:	f003 f9f7 	bl	8017316 <memcpy>
 8013f28:	e7a1      	b.n	8013e6e <ucdr_serialize_int32_t+0x72>
 8013f2a:	bf00      	nop

08013f2c <ucdr_deserialize_int32_t>:
 8013f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f30:	460d      	mov	r5, r1
 8013f32:	2104      	movs	r1, #4
 8013f34:	4604      	mov	r4, r0
 8013f36:	f7f8 fa33 	bl	800c3a0 <ucdr_buffer_alignment>
 8013f3a:	4601      	mov	r1, r0
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013f42:	f7f8 fa71 	bl	800c428 <ucdr_advance_buffer>
 8013f46:	2104      	movs	r1, #4
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f7f8 f9c9 	bl	800c2e0 <ucdr_check_buffer_available_for>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	d138      	bne.n	8013fc4 <ucdr_deserialize_int32_t+0x98>
 8013f52:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013f56:	42b7      	cmp	r7, r6
 8013f58:	d92f      	bls.n	8013fba <ucdr_deserialize_int32_t+0x8e>
 8013f5a:	6923      	ldr	r3, [r4, #16]
 8013f5c:	60a7      	str	r7, [r4, #8]
 8013f5e:	1bbf      	subs	r7, r7, r6
 8013f60:	443b      	add	r3, r7
 8013f62:	f1c7 0904 	rsb	r9, r7, #4
 8013f66:	6123      	str	r3, [r4, #16]
 8013f68:	4649      	mov	r1, r9
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f7f8 f9c4 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d046      	beq.n	8014002 <ucdr_deserialize_int32_t+0xd6>
 8013f74:	7d23      	ldrb	r3, [r4, #20]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d05c      	beq.n	8014034 <ucdr_deserialize_int32_t+0x108>
 8013f7a:	78f3      	ldrb	r3, [r6, #3]
 8013f7c:	702b      	strb	r3, [r5, #0]
 8013f7e:	2f00      	cmp	r7, #0
 8013f80:	d04c      	beq.n	801401c <ucdr_deserialize_int32_t+0xf0>
 8013f82:	78b3      	ldrb	r3, [r6, #2]
 8013f84:	706b      	strb	r3, [r5, #1]
 8013f86:	2f01      	cmp	r7, #1
 8013f88:	f105 0302 	add.w	r3, r5, #2
 8013f8c:	d04a      	beq.n	8014024 <ucdr_deserialize_int32_t+0xf8>
 8013f8e:	7873      	ldrb	r3, [r6, #1]
 8013f90:	70ab      	strb	r3, [r5, #2]
 8013f92:	2f02      	cmp	r7, #2
 8013f94:	f105 0303 	add.w	r3, r5, #3
 8013f98:	d048      	beq.n	801402c <ucdr_deserialize_int32_t+0x100>
 8013f9a:	7833      	ldrb	r3, [r6, #0]
 8013f9c:	70eb      	strb	r3, [r5, #3]
 8013f9e:	6923      	ldr	r3, [r4, #16]
 8013fa0:	68a2      	ldr	r2, [r4, #8]
 8013fa2:	7da0      	ldrb	r0, [r4, #22]
 8013fa4:	2104      	movs	r1, #4
 8013fa6:	3304      	adds	r3, #4
 8013fa8:	444a      	add	r2, r9
 8013faa:	1bdb      	subs	r3, r3, r7
 8013fac:	7561      	strb	r1, [r4, #21]
 8013fae:	60a2      	str	r2, [r4, #8]
 8013fb0:	6123      	str	r3, [r4, #16]
 8013fb2:	f080 0001 	eor.w	r0, r0, #1
 8013fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fba:	2104      	movs	r1, #4
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f7f8 f99b 	bl	800c2f8 <ucdr_check_final_buffer_behavior>
 8013fc2:	b1b0      	cbz	r0, 8013ff2 <ucdr_deserialize_int32_t+0xc6>
 8013fc4:	7d23      	ldrb	r3, [r4, #20]
 8013fc6:	2b01      	cmp	r3, #1
 8013fc8:	68a3      	ldr	r3, [r4, #8]
 8013fca:	d017      	beq.n	8013ffc <ucdr_deserialize_int32_t+0xd0>
 8013fcc:	78db      	ldrb	r3, [r3, #3]
 8013fce:	702b      	strb	r3, [r5, #0]
 8013fd0:	68a3      	ldr	r3, [r4, #8]
 8013fd2:	789b      	ldrb	r3, [r3, #2]
 8013fd4:	706b      	strb	r3, [r5, #1]
 8013fd6:	68a3      	ldr	r3, [r4, #8]
 8013fd8:	785b      	ldrb	r3, [r3, #1]
 8013fda:	70ab      	strb	r3, [r5, #2]
 8013fdc:	68a3      	ldr	r3, [r4, #8]
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	70eb      	strb	r3, [r5, #3]
 8013fe2:	68a2      	ldr	r2, [r4, #8]
 8013fe4:	6923      	ldr	r3, [r4, #16]
 8013fe6:	3204      	adds	r2, #4
 8013fe8:	3304      	adds	r3, #4
 8013fea:	2104      	movs	r1, #4
 8013fec:	60a2      	str	r2, [r4, #8]
 8013fee:	6123      	str	r3, [r4, #16]
 8013ff0:	7561      	strb	r1, [r4, #21]
 8013ff2:	7da0      	ldrb	r0, [r4, #22]
 8013ff4:	f080 0001 	eor.w	r0, r0, #1
 8013ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	602b      	str	r3, [r5, #0]
 8014000:	e7ef      	b.n	8013fe2 <ucdr_deserialize_int32_t+0xb6>
 8014002:	68a2      	ldr	r2, [r4, #8]
 8014004:	6923      	ldr	r3, [r4, #16]
 8014006:	7da0      	ldrb	r0, [r4, #22]
 8014008:	f884 8015 	strb.w	r8, [r4, #21]
 801400c:	1bd2      	subs	r2, r2, r7
 801400e:	1bdb      	subs	r3, r3, r7
 8014010:	60a2      	str	r2, [r4, #8]
 8014012:	6123      	str	r3, [r4, #16]
 8014014:	f080 0001 	eor.w	r0, r0, #1
 8014018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801401c:	68a3      	ldr	r3, [r4, #8]
 801401e:	789b      	ldrb	r3, [r3, #2]
 8014020:	706b      	strb	r3, [r5, #1]
 8014022:	1cab      	adds	r3, r5, #2
 8014024:	68a2      	ldr	r2, [r4, #8]
 8014026:	7852      	ldrb	r2, [r2, #1]
 8014028:	f803 2b01 	strb.w	r2, [r3], #1
 801402c:	68a2      	ldr	r2, [r4, #8]
 801402e:	7812      	ldrb	r2, [r2, #0]
 8014030:	701a      	strb	r2, [r3, #0]
 8014032:	e7b4      	b.n	8013f9e <ucdr_deserialize_int32_t+0x72>
 8014034:	4631      	mov	r1, r6
 8014036:	463a      	mov	r2, r7
 8014038:	4628      	mov	r0, r5
 801403a:	f003 f96c 	bl	8017316 <memcpy>
 801403e:	68a1      	ldr	r1, [r4, #8]
 8014040:	464a      	mov	r2, r9
 8014042:	19e8      	adds	r0, r5, r7
 8014044:	f003 f967 	bl	8017316 <memcpy>
 8014048:	e7a9      	b.n	8013f9e <ucdr_deserialize_int32_t+0x72>
 801404a:	bf00      	nop

0801404c <ucdr_serialize_string>:
 801404c:	b510      	push	{r4, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	4604      	mov	r4, r0
 8014052:	4608      	mov	r0, r1
 8014054:	9101      	str	r1, [sp, #4]
 8014056:	f7ec f93b 	bl	80002d0 <strlen>
 801405a:	9901      	ldr	r1, [sp, #4]
 801405c:	1c42      	adds	r2, r0, #1
 801405e:	4620      	mov	r0, r4
 8014060:	b002      	add	sp, #8
 8014062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014066:	f7f8 b9ff 	b.w	800c468 <ucdr_serialize_sequence_char>
 801406a:	bf00      	nop

0801406c <ucdr_deserialize_string>:
 801406c:	b500      	push	{lr}
 801406e:	b083      	sub	sp, #12
 8014070:	ab01      	add	r3, sp, #4
 8014072:	f7f8 fa0b 	bl	800c48c <ucdr_deserialize_sequence_char>
 8014076:	b003      	add	sp, #12
 8014078:	f85d fb04 	ldr.w	pc, [sp], #4

0801407c <get_custom_error>:
 801407c:	4b01      	ldr	r3, [pc, #4]	@ (8014084 <get_custom_error+0x8>)
 801407e:	7818      	ldrb	r0, [r3, #0]
 8014080:	4770      	bx	lr
 8014082:	bf00      	nop
 8014084:	20017ab0 	.word	0x20017ab0

08014088 <recv_custom_msg>:
 8014088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801408c:	4693      	mov	fp, r2
 801408e:	b089      	sub	sp, #36	@ 0x24
 8014090:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8014094:	9305      	str	r3, [sp, #20]
 8014096:	468a      	mov	sl, r1
 8014098:	2100      	movs	r1, #0
 801409a:	4604      	mov	r4, r0
 801409c:	f88d 101e 	strb.w	r1, [sp, #30]
 80140a0:	b322      	cbz	r2, 80140ec <recv_custom_msg+0x64>
 80140a2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80140a6:	f10d 081f 	add.w	r8, sp, #31
 80140aa:	af05      	add	r7, sp, #20
 80140ac:	f10d 061e 	add.w	r6, sp, #30
 80140b0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80140b4:	e002      	b.n	80140bc <recv_custom_msg+0x34>
 80140b6:	9b05      	ldr	r3, [sp, #20]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	dd0f      	ble.n	80140dc <recv_custom_msg+0x54>
 80140bc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80140c0:	4623      	mov	r3, r4
 80140c2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80140c6:	e9cd 5600 	strd	r5, r6, [sp]
 80140ca:	4622      	mov	r2, r4
 80140cc:	4648      	mov	r0, r9
 80140ce:	f000 fffd 	bl	80150cc <uxr_read_framed_msg>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d0ef      	beq.n	80140b6 <recv_custom_msg+0x2e>
 80140d6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80140da:	b1b3      	cbz	r3, 801410a <recv_custom_msg+0x82>
 80140dc:	4b0f      	ldr	r3, [pc, #60]	@ (801411c <recv_custom_msg+0x94>)
 80140de:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80140e2:	701a      	strb	r2, [r3, #0]
 80140e4:	2000      	movs	r0, #0
 80140e6:	b009      	add	sp, #36	@ 0x24
 80140e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140ec:	f10d 021f 	add.w	r2, sp, #31
 80140f0:	9200      	str	r2, [sp, #0]
 80140f2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80140f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140fa:	4601      	mov	r1, r0
 80140fc:	47a8      	blx	r5
 80140fe:	2800      	cmp	r0, #0
 8014100:	d0ec      	beq.n	80140dc <recv_custom_msg+0x54>
 8014102:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1e8      	bne.n	80140dc <recv_custom_msg+0x54>
 801410a:	f8cb 0000 	str.w	r0, [fp]
 801410e:	2001      	movs	r0, #1
 8014110:	f8ca 4000 	str.w	r4, [sl]
 8014114:	b009      	add	sp, #36	@ 0x24
 8014116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801411a:	bf00      	nop
 801411c:	20017ab0 	.word	0x20017ab0

08014120 <send_custom_msg>:
 8014120:	b530      	push	{r4, r5, lr}
 8014122:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8014126:	b087      	sub	sp, #28
 8014128:	4615      	mov	r5, r2
 801412a:	b974      	cbnz	r4, 801414a <send_custom_msg+0x2a>
 801412c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8014130:	f10d 0317 	add.w	r3, sp, #23
 8014134:	47a0      	blx	r4
 8014136:	b108      	cbz	r0, 801413c <send_custom_msg+0x1c>
 8014138:	42a8      	cmp	r0, r5
 801413a:	d015      	beq.n	8014168 <send_custom_msg+0x48>
 801413c:	4b0c      	ldr	r3, [pc, #48]	@ (8014170 <send_custom_msg+0x50>)
 801413e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8014142:	701a      	strb	r2, [r3, #0]
 8014144:	2000      	movs	r0, #0
 8014146:	b007      	add	sp, #28
 8014148:	bd30      	pop	{r4, r5, pc}
 801414a:	460b      	mov	r3, r1
 801414c:	2200      	movs	r2, #0
 801414e:	f10d 0117 	add.w	r1, sp, #23
 8014152:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014156:	4602      	mov	r2, r0
 8014158:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801415c:	9500      	str	r5, [sp, #0]
 801415e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8014162:	f000 fdbb 	bl	8014cdc <uxr_write_framed_msg>
 8014166:	e7e6      	b.n	8014136 <send_custom_msg+0x16>
 8014168:	2001      	movs	r0, #1
 801416a:	b007      	add	sp, #28
 801416c:	bd30      	pop	{r4, r5, pc}
 801416e:	bf00      	nop
 8014170:	20017ab0 	.word	0x20017ab0

08014174 <uxr_set_custom_transport_callbacks>:
 8014174:	b410      	push	{r4}
 8014176:	9c01      	ldr	r4, [sp, #4]
 8014178:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801417c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8014180:	9b02      	ldr	r3, [sp, #8]
 8014182:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8014186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801418a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801418e:	4770      	bx	lr

08014190 <uxr_init_custom_transport>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8014196:	b303      	cbz	r3, 80141da <uxr_init_custom_transport+0x4a>
 8014198:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801419c:	4604      	mov	r4, r0
 801419e:	b1e2      	cbz	r2, 80141da <uxr_init_custom_transport+0x4a>
 80141a0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80141a4:	b1ca      	cbz	r2, 80141da <uxr_init_custom_transport+0x4a>
 80141a6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80141aa:	b1b2      	cbz	r2, 80141da <uxr_init_custom_transport+0x4a>
 80141ac:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80141b0:	4798      	blx	r3
 80141b2:	4605      	mov	r5, r0
 80141b4:	b188      	cbz	r0, 80141da <uxr_init_custom_transport+0x4a>
 80141b6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80141ba:	b98b      	cbnz	r3, 80141e0 <uxr_init_custom_transport+0x50>
 80141bc:	490b      	ldr	r1, [pc, #44]	@ (80141ec <uxr_init_custom_transport+0x5c>)
 80141be:	4b0c      	ldr	r3, [pc, #48]	@ (80141f0 <uxr_init_custom_transport+0x60>)
 80141c0:	4a0c      	ldr	r2, [pc, #48]	@ (80141f4 <uxr_init_custom_transport+0x64>)
 80141c2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80141c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80141ca:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80141ce:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80141d2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80141d6:	4628      	mov	r0, r5
 80141d8:	bd38      	pop	{r3, r4, r5, pc}
 80141da:	2500      	movs	r5, #0
 80141dc:	4628      	mov	r0, r5
 80141de:	bd38      	pop	{r3, r4, r5, pc}
 80141e0:	2100      	movs	r1, #0
 80141e2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80141e6:	f000 fd73 	bl	8014cd0 <uxr_init_framing_io>
 80141ea:	e7e7      	b.n	80141bc <uxr_init_custom_transport+0x2c>
 80141ec:	08014121 	.word	0x08014121
 80141f0:	08014089 	.word	0x08014089
 80141f4:	0801407d 	.word	0x0801407d

080141f8 <uxr_close_custom_transport>:
 80141f8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 80141fc:	4718      	bx	r3
 80141fe:	bf00      	nop

08014200 <uxr_init_input_best_effort_stream>:
 8014200:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014204:	8003      	strh	r3, [r0, #0]
 8014206:	4770      	bx	lr

08014208 <uxr_reset_input_best_effort_stream>:
 8014208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801420c:	8003      	strh	r3, [r0, #0]
 801420e:	4770      	bx	lr

08014210 <uxr_receive_best_effort_message>:
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	4604      	mov	r4, r0
 8014214:	8800      	ldrh	r0, [r0, #0]
 8014216:	460d      	mov	r5, r1
 8014218:	f000 fd42 	bl	8014ca0 <uxr_seq_num_cmp>
 801421c:	4603      	mov	r3, r0
 801421e:	2b00      	cmp	r3, #0
 8014220:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8014224:	bfb8      	it	lt
 8014226:	8025      	strhlt	r5, [r4, #0]
 8014228:	bd38      	pop	{r3, r4, r5, pc}
 801422a:	bf00      	nop

0801422c <on_full_input_buffer>:
 801422c:	b570      	push	{r4, r5, r6, lr}
 801422e:	4605      	mov	r5, r0
 8014230:	460c      	mov	r4, r1
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	6809      	ldr	r1, [r1, #0]
 8014236:	8920      	ldrh	r0, [r4, #8]
 8014238:	6862      	ldr	r2, [r4, #4]
 801423a:	fbb2 f2f0 	udiv	r2, r2, r0
 801423e:	eba3 0c01 	sub.w	ip, r3, r1
 8014242:	fbbc fcf2 	udiv	ip, ip, r2
 8014246:	f10c 0c01 	add.w	ip, ip, #1
 801424a:	fa1f f38c 	uxth.w	r3, ip
 801424e:	fbb3 f6f0 	udiv	r6, r3, r0
 8014252:	fb00 3316 	mls	r3, r0, r6, r3
 8014256:	b29b      	uxth	r3, r3
 8014258:	fb02 f303 	mul.w	r3, r2, r3
 801425c:	1d18      	adds	r0, r3, #4
 801425e:	4408      	add	r0, r1
 8014260:	7d26      	ldrb	r6, [r4, #20]
 8014262:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8014266:	b116      	cbz	r6, 801426e <on_full_input_buffer+0x42>
 8014268:	2600      	movs	r6, #0
 801426a:	f840 6c04 	str.w	r6, [r0, #-4]
 801426e:	2a03      	cmp	r2, #3
 8014270:	d801      	bhi.n	8014276 <on_full_input_buffer+0x4a>
 8014272:	2001      	movs	r0, #1
 8014274:	bd70      	pop	{r4, r5, r6, pc}
 8014276:	3308      	adds	r3, #8
 8014278:	4419      	add	r1, r3
 801427a:	4628      	mov	r0, r5
 801427c:	692b      	ldr	r3, [r5, #16]
 801427e:	3a04      	subs	r2, #4
 8014280:	f7f8 f87a 	bl	800c378 <ucdr_init_buffer_origin>
 8014284:	4628      	mov	r0, r5
 8014286:	4903      	ldr	r1, [pc, #12]	@ (8014294 <on_full_input_buffer+0x68>)
 8014288:	4622      	mov	r2, r4
 801428a:	f7f8 f851 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 801428e:	2000      	movs	r0, #0
 8014290:	bd70      	pop	{r4, r5, r6, pc}
 8014292:	bf00      	nop
 8014294:	0801422d 	.word	0x0801422d

08014298 <uxr_init_input_reliable_stream>:
 8014298:	b500      	push	{lr}
 801429a:	e9c0 1200 	strd	r1, r2, [r0]
 801429e:	f04f 0e00 	mov.w	lr, #0
 80142a2:	9a01      	ldr	r2, [sp, #4]
 80142a4:	8103      	strh	r3, [r0, #8]
 80142a6:	6102      	str	r2, [r0, #16]
 80142a8:	f880 e014 	strb.w	lr, [r0, #20]
 80142ac:	b1d3      	cbz	r3, 80142e4 <uxr_init_input_reliable_stream+0x4c>
 80142ae:	f8c1 e000 	str.w	lr, [r1]
 80142b2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80142b6:	f1bc 0f01 	cmp.w	ip, #1
 80142ba:	d913      	bls.n	80142e4 <uxr_init_input_reliable_stream+0x4c>
 80142bc:	2301      	movs	r3, #1
 80142be:	fbb3 f1fc 	udiv	r1, r3, ip
 80142c2:	fb0c 3111 	mls	r1, ip, r1, r3
 80142c6:	b289      	uxth	r1, r1
 80142c8:	6842      	ldr	r2, [r0, #4]
 80142ca:	fbb2 f2fc 	udiv	r2, r2, ip
 80142ce:	fb01 f202 	mul.w	r2, r1, r2
 80142d2:	6801      	ldr	r1, [r0, #0]
 80142d4:	f841 e002 	str.w	lr, [r1, r2]
 80142d8:	3301      	adds	r3, #1
 80142da:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	459c      	cmp	ip, r3
 80142e2:	d8ec      	bhi.n	80142be <uxr_init_input_reliable_stream+0x26>
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142e8:	60c3      	str	r3, [r0, #12]
 80142ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80142ee:	bf00      	nop

080142f0 <uxr_reset_input_reliable_stream>:
 80142f0:	8901      	ldrh	r1, [r0, #8]
 80142f2:	b1e9      	cbz	r1, 8014330 <uxr_reset_input_reliable_stream+0x40>
 80142f4:	f04f 0c00 	mov.w	ip, #0
 80142f8:	b500      	push	{lr}
 80142fa:	4663      	mov	r3, ip
 80142fc:	46e6      	mov	lr, ip
 80142fe:	fbb3 f2f1 	udiv	r2, r3, r1
 8014302:	fb01 3312 	mls	r3, r1, r2, r3
 8014306:	b29b      	uxth	r3, r3
 8014308:	6842      	ldr	r2, [r0, #4]
 801430a:	fbb2 f2f1 	udiv	r2, r2, r1
 801430e:	fb02 f303 	mul.w	r3, r2, r3
 8014312:	6802      	ldr	r2, [r0, #0]
 8014314:	f842 e003 	str.w	lr, [r2, r3]
 8014318:	f10c 0c01 	add.w	ip, ip, #1
 801431c:	8901      	ldrh	r1, [r0, #8]
 801431e:	fa1f f38c 	uxth.w	r3, ip
 8014322:	4299      	cmp	r1, r3
 8014324:	d8eb      	bhi.n	80142fe <uxr_reset_input_reliable_stream+0xe>
 8014326:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801432a:	60c3      	str	r3, [r0, #12]
 801432c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014334:	60c3      	str	r3, [r0, #12]
 8014336:	4770      	bx	lr

08014338 <uxr_receive_reliable_message>:
 8014338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801433c:	4604      	mov	r4, r0
 801433e:	460d      	mov	r5, r1
 8014340:	8901      	ldrh	r1, [r0, #8]
 8014342:	8980      	ldrh	r0, [r0, #12]
 8014344:	4690      	mov	r8, r2
 8014346:	461f      	mov	r7, r3
 8014348:	f000 fca2 	bl	8014c90 <uxr_seq_num_add>
 801434c:	4629      	mov	r1, r5
 801434e:	4606      	mov	r6, r0
 8014350:	89a0      	ldrh	r0, [r4, #12]
 8014352:	f000 fca5 	bl	8014ca0 <uxr_seq_num_cmp>
 8014356:	2800      	cmp	r0, #0
 8014358:	db0a      	blt.n	8014370 <uxr_receive_reliable_message+0x38>
 801435a:	2600      	movs	r6, #0
 801435c:	89e0      	ldrh	r0, [r4, #14]
 801435e:	4629      	mov	r1, r5
 8014360:	f000 fc9e 	bl	8014ca0 <uxr_seq_num_cmp>
 8014364:	2800      	cmp	r0, #0
 8014366:	da00      	bge.n	801436a <uxr_receive_reliable_message+0x32>
 8014368:	81e5      	strh	r5, [r4, #14]
 801436a:	4630      	mov	r0, r6
 801436c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014370:	4630      	mov	r0, r6
 8014372:	4629      	mov	r1, r5
 8014374:	f000 fc94 	bl	8014ca0 <uxr_seq_num_cmp>
 8014378:	2800      	cmp	r0, #0
 801437a:	dbee      	blt.n	801435a <uxr_receive_reliable_message+0x22>
 801437c:	6923      	ldr	r3, [r4, #16]
 801437e:	4640      	mov	r0, r8
 8014380:	4798      	blx	r3
 8014382:	2101      	movs	r1, #1
 8014384:	4681      	mov	r9, r0
 8014386:	89a0      	ldrh	r0, [r4, #12]
 8014388:	f000 fc82 	bl	8014c90 <uxr_seq_num_add>
 801438c:	f1b9 0f00 	cmp.w	r9, #0
 8014390:	d101      	bne.n	8014396 <uxr_receive_reliable_message+0x5e>
 8014392:	4285      	cmp	r5, r0
 8014394:	d047      	beq.n	8014426 <uxr_receive_reliable_message+0xee>
 8014396:	8922      	ldrh	r2, [r4, #8]
 8014398:	fbb5 f0f2 	udiv	r0, r5, r2
 801439c:	fb02 5010 	mls	r0, r2, r0, r5
 80143a0:	b280      	uxth	r0, r0
 80143a2:	6863      	ldr	r3, [r4, #4]
 80143a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80143a8:	fb00 f303 	mul.w	r3, r0, r3
 80143ac:	6820      	ldr	r0, [r4, #0]
 80143ae:	3304      	adds	r3, #4
 80143b0:	4418      	add	r0, r3
 80143b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d1cf      	bne.n	801435a <uxr_receive_reliable_message+0x22>
 80143ba:	4641      	mov	r1, r8
 80143bc:	463a      	mov	r2, r7
 80143be:	f002 ffaa 	bl	8017316 <memcpy>
 80143c2:	8921      	ldrh	r1, [r4, #8]
 80143c4:	fbb5 f2f1 	udiv	r2, r5, r1
 80143c8:	fb01 5212 	mls	r2, r1, r2, r5
 80143cc:	b292      	uxth	r2, r2
 80143ce:	6863      	ldr	r3, [r4, #4]
 80143d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80143d4:	fb02 f303 	mul.w	r3, r2, r3
 80143d8:	6822      	ldr	r2, [r4, #0]
 80143da:	50d7      	str	r7, [r2, r3]
 80143dc:	9a08      	ldr	r2, [sp, #32]
 80143de:	2301      	movs	r3, #1
 80143e0:	7013      	strb	r3, [r2, #0]
 80143e2:	f1b9 0f00 	cmp.w	r9, #0
 80143e6:	d0b8      	beq.n	801435a <uxr_receive_reliable_message+0x22>
 80143e8:	89a6      	ldrh	r6, [r4, #12]
 80143ea:	4630      	mov	r0, r6
 80143ec:	2101      	movs	r1, #1
 80143ee:	f000 fc4f 	bl	8014c90 <uxr_seq_num_add>
 80143f2:	8922      	ldrh	r2, [r4, #8]
 80143f4:	6863      	ldr	r3, [r4, #4]
 80143f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80143fa:	4606      	mov	r6, r0
 80143fc:	fbb0 f0f2 	udiv	r0, r0, r2
 8014400:	fb02 6010 	mls	r0, r2, r0, r6
 8014404:	b280      	uxth	r0, r0
 8014406:	fb00 f303 	mul.w	r3, r0, r3
 801440a:	6820      	ldr	r0, [r4, #0]
 801440c:	3304      	adds	r3, #4
 801440e:	4418      	add	r0, r3
 8014410:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d0a0      	beq.n	801435a <uxr_receive_reliable_message+0x22>
 8014418:	6923      	ldr	r3, [r4, #16]
 801441a:	4798      	blx	r3
 801441c:	2802      	cmp	r0, #2
 801441e:	d008      	beq.n	8014432 <uxr_receive_reliable_message+0xfa>
 8014420:	2801      	cmp	r0, #1
 8014422:	d0e2      	beq.n	80143ea <uxr_receive_reliable_message+0xb2>
 8014424:	e799      	b.n	801435a <uxr_receive_reliable_message+0x22>
 8014426:	9b08      	ldr	r3, [sp, #32]
 8014428:	81a5      	strh	r5, [r4, #12]
 801442a:	2601      	movs	r6, #1
 801442c:	f883 9000 	strb.w	r9, [r3]
 8014430:	e794      	b.n	801435c <uxr_receive_reliable_message+0x24>
 8014432:	2601      	movs	r6, #1
 8014434:	e792      	b.n	801435c <uxr_receive_reliable_message+0x24>
 8014436:	bf00      	nop

08014438 <uxr_next_input_reliable_buffer_available>:
 8014438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801443c:	4604      	mov	r4, r0
 801443e:	460f      	mov	r7, r1
 8014440:	8980      	ldrh	r0, [r0, #12]
 8014442:	2101      	movs	r1, #1
 8014444:	4690      	mov	r8, r2
 8014446:	f000 fc23 	bl	8014c90 <uxr_seq_num_add>
 801444a:	8922      	ldrh	r2, [r4, #8]
 801444c:	fbb0 f6f2 	udiv	r6, r0, r2
 8014450:	fb02 0616 	mls	r6, r2, r6, r0
 8014454:	b2b6      	uxth	r6, r6
 8014456:	6863      	ldr	r3, [r4, #4]
 8014458:	fbb3 f3f2 	udiv	r3, r3, r2
 801445c:	fb06 f303 	mul.w	r3, r6, r3
 8014460:	6826      	ldr	r6, [r4, #0]
 8014462:	3304      	adds	r3, #4
 8014464:	441e      	add	r6, r3
 8014466:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801446a:	f1b9 0f00 	cmp.w	r9, #0
 801446e:	d023      	beq.n	80144b8 <uxr_next_input_reliable_buffer_available+0x80>
 8014470:	6923      	ldr	r3, [r4, #16]
 8014472:	4605      	mov	r5, r0
 8014474:	4630      	mov	r0, r6
 8014476:	4798      	blx	r3
 8014478:	4682      	mov	sl, r0
 801447a:	b300      	cbz	r0, 80144be <uxr_next_input_reliable_buffer_available+0x86>
 801447c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8014480:	2101      	movs	r1, #1
 8014482:	4650      	mov	r0, sl
 8014484:	f000 fc04 	bl	8014c90 <uxr_seq_num_add>
 8014488:	8921      	ldrh	r1, [r4, #8]
 801448a:	fbb0 f2f1 	udiv	r2, r0, r1
 801448e:	4682      	mov	sl, r0
 8014490:	fb01 0212 	mls	r2, r1, r2, r0
 8014494:	e9d4 0300 	ldrd	r0, r3, [r4]
 8014498:	b292      	uxth	r2, r2
 801449a:	fbb3 f3f1 	udiv	r3, r3, r1
 801449e:	fb02 f303 	mul.w	r3, r2, r3
 80144a2:	3304      	adds	r3, #4
 80144a4:	4418      	add	r0, r3
 80144a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80144aa:	b12b      	cbz	r3, 80144b8 <uxr_next_input_reliable_buffer_available+0x80>
 80144ac:	6923      	ldr	r3, [r4, #16]
 80144ae:	4798      	blx	r3
 80144b0:	2802      	cmp	r0, #2
 80144b2:	d01b      	beq.n	80144ec <uxr_next_input_reliable_buffer_available+0xb4>
 80144b4:	2801      	cmp	r0, #1
 80144b6:	d0e3      	beq.n	8014480 <uxr_next_input_reliable_buffer_available+0x48>
 80144b8:	2000      	movs	r0, #0
 80144ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144be:	464a      	mov	r2, r9
 80144c0:	4631      	mov	r1, r6
 80144c2:	4638      	mov	r0, r7
 80144c4:	f7f7 ff60 	bl	800c388 <ucdr_init_buffer>
 80144c8:	8921      	ldrh	r1, [r4, #8]
 80144ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80144ce:	fb01 5212 	mls	r2, r1, r2, r5
 80144d2:	b292      	uxth	r2, r2
 80144d4:	6863      	ldr	r3, [r4, #4]
 80144d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80144da:	fb02 f303 	mul.w	r3, r2, r3
 80144de:	6822      	ldr	r2, [r4, #0]
 80144e0:	f842 a003 	str.w	sl, [r2, r3]
 80144e4:	2001      	movs	r0, #1
 80144e6:	81a5      	strh	r5, [r4, #12]
 80144e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144ec:	8920      	ldrh	r0, [r4, #8]
 80144ee:	fbb5 f3f0 	udiv	r3, r5, r0
 80144f2:	fb00 5513 	mls	r5, r0, r3, r5
 80144f6:	b2ad      	uxth	r5, r5
 80144f8:	6863      	ldr	r3, [r4, #4]
 80144fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80144fe:	fb03 f505 	mul.w	r5, r3, r5
 8014502:	6823      	ldr	r3, [r4, #0]
 8014504:	2000      	movs	r0, #0
 8014506:	5158      	str	r0, [r3, r5]
 8014508:	eb06 0108 	add.w	r1, r6, r8
 801450c:	eba9 0208 	sub.w	r2, r9, r8
 8014510:	4638      	mov	r0, r7
 8014512:	f7f7 ff39 	bl	800c388 <ucdr_init_buffer>
 8014516:	4638      	mov	r0, r7
 8014518:	4903      	ldr	r1, [pc, #12]	@ (8014528 <uxr_next_input_reliable_buffer_available+0xf0>)
 801451a:	4622      	mov	r2, r4
 801451c:	f7f7 ff08 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 8014520:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8014524:	2001      	movs	r0, #1
 8014526:	e7c8      	b.n	80144ba <uxr_next_input_reliable_buffer_available+0x82>
 8014528:	0801422d 	.word	0x0801422d

0801452c <uxr_process_heartbeat>:
 801452c:	b538      	push	{r3, r4, r5, lr}
 801452e:	4611      	mov	r1, r2
 8014530:	4604      	mov	r4, r0
 8014532:	89c0      	ldrh	r0, [r0, #14]
 8014534:	4615      	mov	r5, r2
 8014536:	f000 fbb3 	bl	8014ca0 <uxr_seq_num_cmp>
 801453a:	2800      	cmp	r0, #0
 801453c:	bfb8      	it	lt
 801453e:	81e5      	strhlt	r5, [r4, #14]
 8014540:	bd38      	pop	{r3, r4, r5, pc}
 8014542:	bf00      	nop

08014544 <uxr_compute_acknack>:
 8014544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014548:	8903      	ldrh	r3, [r0, #8]
 801454a:	8985      	ldrh	r5, [r0, #12]
 801454c:	4604      	mov	r4, r0
 801454e:	460e      	mov	r6, r1
 8014550:	b1d3      	cbz	r3, 8014588 <uxr_compute_acknack+0x44>
 8014552:	4628      	mov	r0, r5
 8014554:	2701      	movs	r7, #1
 8014556:	e003      	b.n	8014560 <uxr_compute_acknack+0x1c>
 8014558:	4567      	cmp	r7, ip
 801455a:	d215      	bcs.n	8014588 <uxr_compute_acknack+0x44>
 801455c:	89a0      	ldrh	r0, [r4, #12]
 801455e:	3701      	adds	r7, #1
 8014560:	b2b9      	uxth	r1, r7
 8014562:	f000 fb95 	bl	8014c90 <uxr_seq_num_add>
 8014566:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801456a:	fbb0 f3fc 	udiv	r3, r0, ip
 801456e:	fb0c 0313 	mls	r3, ip, r3, r0
 8014572:	b29a      	uxth	r2, r3
 8014574:	e9d4 1300 	ldrd	r1, r3, [r4]
 8014578:	fbb3 f3fc 	udiv	r3, r3, ip
 801457c:	fb02 f303 	mul.w	r3, r2, r3
 8014580:	58cb      	ldr	r3, [r1, r3]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d1e8      	bne.n	8014558 <uxr_compute_acknack+0x14>
 8014586:	4605      	mov	r5, r0
 8014588:	8035      	strh	r5, [r6, #0]
 801458a:	2101      	movs	r1, #1
 801458c:	4628      	mov	r0, r5
 801458e:	89e7      	ldrh	r7, [r4, #14]
 8014590:	f000 fb82 	bl	8014c98 <uxr_seq_num_sub>
 8014594:	4601      	mov	r1, r0
 8014596:	4638      	mov	r0, r7
 8014598:	f000 fb7e 	bl	8014c98 <uxr_seq_num_sub>
 801459c:	4605      	mov	r5, r0
 801459e:	b318      	cbz	r0, 80145e8 <uxr_compute_acknack+0xa4>
 80145a0:	f04f 0900 	mov.w	r9, #0
 80145a4:	464f      	mov	r7, r9
 80145a6:	f04f 0801 	mov.w	r8, #1
 80145aa:	fa1f f189 	uxth.w	r1, r9
 80145ae:	8830      	ldrh	r0, [r6, #0]
 80145b0:	f000 fb6e 	bl	8014c90 <uxr_seq_num_add>
 80145b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80145b8:	fbb0 f3fc 	udiv	r3, r0, ip
 80145bc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80145c0:	fb03 001c 	mls	r0, r3, ip, r0
 80145c4:	b283      	uxth	r3, r0
 80145c6:	fbb2 f2fc 	udiv	r2, r2, ip
 80145ca:	fb02 f303 	mul.w	r3, r2, r3
 80145ce:	fa08 f209 	lsl.w	r2, r8, r9
 80145d2:	58cb      	ldr	r3, [r1, r3]
 80145d4:	f109 0901 	add.w	r9, r9, #1
 80145d8:	b90b      	cbnz	r3, 80145de <uxr_compute_acknack+0x9a>
 80145da:	4317      	orrs	r7, r2
 80145dc:	b2bf      	uxth	r7, r7
 80145de:	454d      	cmp	r5, r9
 80145e0:	d1e3      	bne.n	80145aa <uxr_compute_acknack+0x66>
 80145e2:	4638      	mov	r0, r7
 80145e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145e8:	4607      	mov	r7, r0
 80145ea:	4638      	mov	r0, r7
 80145ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080145f0 <uxr_init_output_best_effort_stream>:
 80145f0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80145f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80145f8:	6001      	str	r1, [r0, #0]
 80145fa:	7303      	strb	r3, [r0, #12]
 80145fc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014600:	4770      	bx	lr
 8014602:	bf00      	nop

08014604 <uxr_reset_output_best_effort_stream>:
 8014604:	7b02      	ldrb	r2, [r0, #12]
 8014606:	6042      	str	r2, [r0, #4]
 8014608:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801460c:	81c3      	strh	r3, [r0, #14]
 801460e:	4770      	bx	lr

08014610 <uxr_prepare_best_effort_buffer_to_write>:
 8014610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014612:	4604      	mov	r4, r0
 8014614:	b083      	sub	sp, #12
 8014616:	6840      	ldr	r0, [r0, #4]
 8014618:	460d      	mov	r5, r1
 801461a:	4616      	mov	r6, r2
 801461c:	f7f9 fce8 	bl	800dff0 <uxr_submessage_padding>
 8014620:	6863      	ldr	r3, [r4, #4]
 8014622:	4418      	add	r0, r3
 8014624:	68a3      	ldr	r3, [r4, #8]
 8014626:	1942      	adds	r2, r0, r5
 8014628:	4293      	cmp	r3, r2
 801462a:	bf2c      	ite	cs
 801462c:	2701      	movcs	r7, #1
 801462e:	2700      	movcc	r7, #0
 8014630:	d202      	bcs.n	8014638 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014632:	4638      	mov	r0, r7
 8014634:	b003      	add	sp, #12
 8014636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014638:	9000      	str	r0, [sp, #0]
 801463a:	6821      	ldr	r1, [r4, #0]
 801463c:	4630      	mov	r0, r6
 801463e:	2300      	movs	r3, #0
 8014640:	f7f7 fe90 	bl	800c364 <ucdr_init_buffer_origin_offset>
 8014644:	6861      	ldr	r1, [r4, #4]
 8014646:	4638      	mov	r0, r7
 8014648:	4429      	add	r1, r5
 801464a:	6061      	str	r1, [r4, #4]
 801464c:	b003      	add	sp, #12
 801464e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014650 <uxr_prepare_best_effort_buffer_to_send>:
 8014650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014654:	4604      	mov	r4, r0
 8014656:	461d      	mov	r5, r3
 8014658:	6840      	ldr	r0, [r0, #4]
 801465a:	7b23      	ldrb	r3, [r4, #12]
 801465c:	4298      	cmp	r0, r3
 801465e:	bf8c      	ite	hi
 8014660:	2601      	movhi	r6, #1
 8014662:	2600      	movls	r6, #0
 8014664:	d802      	bhi.n	801466c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014666:	4630      	mov	r0, r6
 8014668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801466c:	4688      	mov	r8, r1
 801466e:	89e0      	ldrh	r0, [r4, #14]
 8014670:	2101      	movs	r1, #1
 8014672:	4617      	mov	r7, r2
 8014674:	f000 fb0c 	bl	8014c90 <uxr_seq_num_add>
 8014678:	6823      	ldr	r3, [r4, #0]
 801467a:	81e0      	strh	r0, [r4, #14]
 801467c:	8028      	strh	r0, [r5, #0]
 801467e:	f8c8 3000 	str.w	r3, [r8]
 8014682:	6863      	ldr	r3, [r4, #4]
 8014684:	603b      	str	r3, [r7, #0]
 8014686:	7b23      	ldrb	r3, [r4, #12]
 8014688:	6063      	str	r3, [r4, #4]
 801468a:	4630      	mov	r0, r6
 801468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014690 <on_full_output_buffer>:
 8014690:	b538      	push	{r3, r4, r5, lr}
 8014692:	6802      	ldr	r2, [r0, #0]
 8014694:	460c      	mov	r4, r1
 8014696:	6809      	ldr	r1, [r1, #0]
 8014698:	8923      	ldrh	r3, [r4, #8]
 801469a:	eba2 0c01 	sub.w	ip, r2, r1
 801469e:	6862      	ldr	r2, [r4, #4]
 80146a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80146a4:	fbbc fcf2 	udiv	ip, ip, r2
 80146a8:	f10c 0c01 	add.w	ip, ip, #1
 80146ac:	fa1f fc8c 	uxth.w	ip, ip
 80146b0:	fbbc fef3 	udiv	lr, ip, r3
 80146b4:	fb03 c31e 	mls	r3, r3, lr, ip
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	fb02 f303 	mul.w	r3, r2, r3
 80146be:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80146c2:	58ca      	ldr	r2, [r1, r3]
 80146c4:	4463      	add	r3, ip
 80146c6:	eba2 020c 	sub.w	r2, r2, ip
 80146ca:	3308      	adds	r3, #8
 80146cc:	4605      	mov	r5, r0
 80146ce:	4419      	add	r1, r3
 80146d0:	3a04      	subs	r2, #4
 80146d2:	6903      	ldr	r3, [r0, #16]
 80146d4:	f7f7 fe50 	bl	800c378 <ucdr_init_buffer_origin>
 80146d8:	4628      	mov	r0, r5
 80146da:	4903      	ldr	r1, [pc, #12]	@ (80146e8 <on_full_output_buffer+0x58>)
 80146dc:	4622      	mov	r2, r4
 80146de:	f7f7 fe27 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 80146e2:	2000      	movs	r0, #0
 80146e4:	bd38      	pop	{r3, r4, r5, pc}
 80146e6:	bf00      	nop
 80146e8:	08014691 	.word	0x08014691

080146ec <uxr_init_output_reliable_stream>:
 80146ec:	b410      	push	{r4}
 80146ee:	f89d c004 	ldrb.w	ip, [sp, #4]
 80146f2:	8103      	strh	r3, [r0, #8]
 80146f4:	e9c0 1200 	strd	r1, r2, [r0]
 80146f8:	f880 c00c 	strb.w	ip, [r0, #12]
 80146fc:	b1d3      	cbz	r3, 8014734 <uxr_init_output_reliable_stream+0x48>
 80146fe:	f8c1 c000 	str.w	ip, [r1]
 8014702:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8014706:	f1bc 0f01 	cmp.w	ip, #1
 801470a:	d913      	bls.n	8014734 <uxr_init_output_reliable_stream+0x48>
 801470c:	2301      	movs	r3, #1
 801470e:	fbb3 f1fc 	udiv	r1, r3, ip
 8014712:	fb0c 3111 	mls	r1, ip, r1, r3
 8014716:	b289      	uxth	r1, r1
 8014718:	6842      	ldr	r2, [r0, #4]
 801471a:	6804      	ldr	r4, [r0, #0]
 801471c:	fbb2 f2fc 	udiv	r2, r2, ip
 8014720:	fb01 f202 	mul.w	r2, r1, r2
 8014724:	7b01      	ldrb	r1, [r0, #12]
 8014726:	50a1      	str	r1, [r4, r2]
 8014728:	3301      	adds	r3, #1
 801472a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801472e:	b29b      	uxth	r3, r3
 8014730:	459c      	cmp	ip, r3
 8014732:	d8ec      	bhi.n	801470e <uxr_init_output_reliable_stream+0x22>
 8014734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014738:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801473c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014740:	4905      	ldr	r1, [pc, #20]	@ (8014758 <uxr_init_output_reliable_stream+0x6c>)
 8014742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014746:	f8c0 100e 	str.w	r1, [r0, #14]
 801474a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801474e:	2300      	movs	r3, #0
 8014750:	8242      	strh	r2, [r0, #18]
 8014752:	8403      	strh	r3, [r0, #32]
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop
 8014758:	ffff0000 	.word	0xffff0000

0801475c <uxr_reset_output_reliable_stream>:
 801475c:	8901      	ldrh	r1, [r0, #8]
 801475e:	b1b1      	cbz	r1, 801478e <uxr_reset_output_reliable_stream+0x32>
 8014760:	f04f 0c00 	mov.w	ip, #0
 8014764:	4663      	mov	r3, ip
 8014766:	fbb3 f2f1 	udiv	r2, r3, r1
 801476a:	fb01 3312 	mls	r3, r1, r2, r3
 801476e:	b29b      	uxth	r3, r3
 8014770:	6842      	ldr	r2, [r0, #4]
 8014772:	fbb2 f2f1 	udiv	r2, r2, r1
 8014776:	6801      	ldr	r1, [r0, #0]
 8014778:	fb02 f303 	mul.w	r3, r2, r3
 801477c:	7b02      	ldrb	r2, [r0, #12]
 801477e:	50ca      	str	r2, [r1, r3]
 8014780:	f10c 0c01 	add.w	ip, ip, #1
 8014784:	8901      	ldrh	r1, [r0, #8]
 8014786:	fa1f f38c 	uxth.w	r3, ip
 801478a:	4299      	cmp	r1, r3
 801478c:	d8eb      	bhi.n	8014766 <uxr_reset_output_reliable_stream+0xa>
 801478e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014792:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014796:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801479a:	4904      	ldr	r1, [pc, #16]	@ (80147ac <uxr_reset_output_reliable_stream+0x50>)
 801479c:	f8c0 100e 	str.w	r1, [r0, #14]
 80147a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80147a4:	2300      	movs	r3, #0
 80147a6:	8242      	strh	r2, [r0, #18]
 80147a8:	8403      	strh	r3, [r0, #32]
 80147aa:	4770      	bx	lr
 80147ac:	ffff0000 	.word	0xffff0000

080147b0 <uxr_prepare_reliable_buffer_to_write>:
 80147b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b4:	4604      	mov	r4, r0
 80147b6:	b091      	sub	sp, #68	@ 0x44
 80147b8:	8900      	ldrh	r0, [r0, #8]
 80147ba:	89e6      	ldrh	r6, [r4, #14]
 80147bc:	6823      	ldr	r3, [r4, #0]
 80147be:	9204      	str	r2, [sp, #16]
 80147c0:	fbb6 f2f0 	udiv	r2, r6, r0
 80147c4:	fb00 6212 	mls	r2, r0, r2, r6
 80147c8:	b292      	uxth	r2, r2
 80147ca:	6865      	ldr	r5, [r4, #4]
 80147cc:	fbb5 f5f0 	udiv	r5, r5, r0
 80147d0:	fb05 3202 	mla	r2, r5, r2, r3
 80147d4:	3204      	adds	r2, #4
 80147d6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80147da:	f894 900c 	ldrb.w	r9, [r4, #12]
 80147de:	9203      	str	r2, [sp, #12]
 80147e0:	468b      	mov	fp, r1
 80147e2:	1f2f      	subs	r7, r5, #4
 80147e4:	2800      	cmp	r0, #0
 80147e6:	f000 814c 	beq.w	8014a82 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80147ea:	f04f 0c00 	mov.w	ip, #0
 80147ee:	46e2      	mov	sl, ip
 80147f0:	4661      	mov	r1, ip
 80147f2:	fbb1 f2f0 	udiv	r2, r1, r0
 80147f6:	fb00 1212 	mls	r2, r0, r2, r1
 80147fa:	b292      	uxth	r2, r2
 80147fc:	fb05 f202 	mul.w	r2, r5, r2
 8014800:	f10c 0c01 	add.w	ip, ip, #1
 8014804:	589a      	ldr	r2, [r3, r2]
 8014806:	454a      	cmp	r2, r9
 8014808:	bf08      	it	eq
 801480a:	f10a 0a01 	addeq.w	sl, sl, #1
 801480e:	fa1f f18c 	uxth.w	r1, ip
 8014812:	bf08      	it	eq
 8014814:	fa1f fa8a 	uxtheq.w	sl, sl
 8014818:	4281      	cmp	r1, r0
 801481a:	d3ea      	bcc.n	80147f2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801481c:	4640      	mov	r0, r8
 801481e:	2104      	movs	r1, #4
 8014820:	f8cd a014 	str.w	sl, [sp, #20]
 8014824:	f7f7 fdb4 	bl	800c390 <ucdr_alignment>
 8014828:	4480      	add	r8, r0
 801482a:	eb08 020b 	add.w	r2, r8, fp
 801482e:	42ba      	cmp	r2, r7
 8014830:	f240 80cd 	bls.w	80149ce <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014834:	7b22      	ldrb	r2, [r4, #12]
 8014836:	445a      	add	r2, fp
 8014838:	42ba      	cmp	r2, r7
 801483a:	f240 80b5 	bls.w	80149a8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801483e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014842:	33fc      	adds	r3, #252	@ 0xfc
 8014844:	b2ba      	uxth	r2, r7
 8014846:	4413      	add	r3, r2
 8014848:	b29b      	uxth	r3, r3
 801484a:	fb0a f903 	mul.w	r9, sl, r3
 801484e:	45d9      	cmp	r9, fp
 8014850:	9305      	str	r3, [sp, #20]
 8014852:	9306      	str	r3, [sp, #24]
 8014854:	f0c0 80b7 	bcc.w	80149c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014858:	f108 0304 	add.w	r3, r8, #4
 801485c:	42bb      	cmp	r3, r7
 801485e:	f080 80db 	bcs.w	8014a18 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014862:	f1a2 0904 	sub.w	r9, r2, #4
 8014866:	eba9 0908 	sub.w	r9, r9, r8
 801486a:	9b05      	ldr	r3, [sp, #20]
 801486c:	fa1f f989 	uxth.w	r9, r9
 8014870:	ebab 0b09 	sub.w	fp, fp, r9
 8014874:	fbbb f2f3 	udiv	r2, fp, r3
 8014878:	fb03 b312 	mls	r3, r3, r2, fp
 801487c:	2b00      	cmp	r3, #0
 801487e:	f000 80c8 	beq.w	8014a12 <uxr_prepare_reliable_buffer_to_write+0x262>
 8014882:	3201      	adds	r2, #1
 8014884:	b292      	uxth	r2, r2
 8014886:	9306      	str	r3, [sp, #24]
 8014888:	4552      	cmp	r2, sl
 801488a:	f200 809c 	bhi.w	80149c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801488e:	f10d 0b20 	add.w	fp, sp, #32
 8014892:	2a00      	cmp	r2, #0
 8014894:	d042      	beq.n	801491c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014896:	f8cd 801c 	str.w	r8, [sp, #28]
 801489a:	f04f 0a00 	mov.w	sl, #0
 801489e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80148a2:	9505      	str	r5, [sp, #20]
 80148a4:	f10d 0b20 	add.w	fp, sp, #32
 80148a8:	4615      	mov	r5, r2
 80148aa:	e000      	b.n	80148ae <uxr_prepare_reliable_buffer_to_write+0xfe>
 80148ac:	46c1      	mov	r9, r8
 80148ae:	8920      	ldrh	r0, [r4, #8]
 80148b0:	fbb6 f2f0 	udiv	r2, r6, r0
 80148b4:	fb00 6112 	mls	r1, r0, r2, r6
 80148b8:	b28a      	uxth	r2, r1
 80148ba:	6863      	ldr	r3, [r4, #4]
 80148bc:	fbb3 f1f0 	udiv	r1, r3, r0
 80148c0:	6823      	ldr	r3, [r4, #0]
 80148c2:	fb02 f101 	mul.w	r1, r2, r1
 80148c6:	3104      	adds	r1, #4
 80148c8:	4419      	add	r1, r3
 80148ca:	4658      	mov	r0, fp
 80148cc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80148d0:	9200      	str	r2, [sp, #0]
 80148d2:	2300      	movs	r3, #0
 80148d4:	463a      	mov	r2, r7
 80148d6:	f7f7 fd45 	bl	800c364 <ucdr_init_buffer_origin_offset>
 80148da:	464a      	mov	r2, r9
 80148dc:	2300      	movs	r3, #0
 80148de:	210d      	movs	r1, #13
 80148e0:	4658      	mov	r0, fp
 80148e2:	f7f9 fb45 	bl	800df70 <uxr_buffer_submessage_header>
 80148e6:	8921      	ldrh	r1, [r4, #8]
 80148e8:	fbb6 f2f1 	udiv	r2, r6, r1
 80148ec:	fb01 6212 	mls	r2, r1, r2, r6
 80148f0:	b292      	uxth	r2, r2
 80148f2:	6863      	ldr	r3, [r4, #4]
 80148f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80148f8:	fb02 f303 	mul.w	r3, r2, r3
 80148fc:	6822      	ldr	r2, [r4, #0]
 80148fe:	4630      	mov	r0, r6
 8014900:	50d7      	str	r7, [r2, r3]
 8014902:	2101      	movs	r1, #1
 8014904:	f000 f9c4 	bl	8014c90 <uxr_seq_num_add>
 8014908:	f10a 0a01 	add.w	sl, sl, #1
 801490c:	fa1f f38a 	uxth.w	r3, sl
 8014910:	429d      	cmp	r5, r3
 8014912:	4606      	mov	r6, r0
 8014914:	d8ca      	bhi.n	80148ac <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014916:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801491a:	9d05      	ldr	r5, [sp, #20]
 801491c:	8920      	ldrh	r0, [r4, #8]
 801491e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014922:	fb00 6313 	mls	r3, r0, r3, r6
 8014926:	b299      	uxth	r1, r3
 8014928:	6863      	ldr	r3, [r4, #4]
 801492a:	fbb3 f3f0 	udiv	r3, r3, r0
 801492e:	fb01 f303 	mul.w	r3, r1, r3
 8014932:	6821      	ldr	r1, [r4, #0]
 8014934:	3304      	adds	r3, #4
 8014936:	4419      	add	r1, r3
 8014938:	463a      	mov	r2, r7
 801493a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801493e:	9000      	str	r0, [sp, #0]
 8014940:	2300      	movs	r3, #0
 8014942:	4658      	mov	r0, fp
 8014944:	f7f7 fd0e 	bl	800c364 <ucdr_init_buffer_origin_offset>
 8014948:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801494c:	4658      	mov	r0, fp
 801494e:	fa1f f289 	uxth.w	r2, r9
 8014952:	2302      	movs	r3, #2
 8014954:	210d      	movs	r1, #13
 8014956:	f7f9 fb0b 	bl	800df70 <uxr_buffer_submessage_header>
 801495a:	9b03      	ldr	r3, [sp, #12]
 801495c:	8927      	ldrh	r7, [r4, #8]
 801495e:	7b20      	ldrb	r0, [r4, #12]
 8014960:	f108 0104 	add.w	r1, r8, #4
 8014964:	440b      	add	r3, r1
 8014966:	4619      	mov	r1, r3
 8014968:	fbb6 f3f7 	udiv	r3, r6, r7
 801496c:	fb07 6313 	mls	r3, r7, r3, r6
 8014970:	f1a5 0208 	sub.w	r2, r5, #8
 8014974:	b29d      	uxth	r5, r3
 8014976:	3004      	adds	r0, #4
 8014978:	6863      	ldr	r3, [r4, #4]
 801497a:	fbb3 f3f7 	udiv	r3, r3, r7
 801497e:	fb05 f303 	mul.w	r3, r5, r3
 8014982:	6825      	ldr	r5, [r4, #0]
 8014984:	4448      	add	r0, r9
 8014986:	50e8      	str	r0, [r5, r3]
 8014988:	9d04      	ldr	r5, [sp, #16]
 801498a:	eba2 0208 	sub.w	r2, r2, r8
 801498e:	4628      	mov	r0, r5
 8014990:	f7f7 fcfa 	bl	800c388 <ucdr_init_buffer>
 8014994:	4628      	mov	r0, r5
 8014996:	493c      	ldr	r1, [pc, #240]	@ (8014a88 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014998:	4622      	mov	r2, r4
 801499a:	f7f7 fcc9 	bl	800c330 <ucdr_set_on_full_buffer_callback>
 801499e:	2001      	movs	r0, #1
 80149a0:	81e6      	strh	r6, [r4, #14]
 80149a2:	b011      	add	sp, #68	@ 0x44
 80149a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149a8:	2101      	movs	r1, #1
 80149aa:	89e0      	ldrh	r0, [r4, #14]
 80149ac:	f000 f970 	bl	8014c90 <uxr_seq_num_add>
 80149b0:	8921      	ldrh	r1, [r4, #8]
 80149b2:	4605      	mov	r5, r0
 80149b4:	8a60      	ldrh	r0, [r4, #18]
 80149b6:	f000 f96b 	bl	8014c90 <uxr_seq_num_add>
 80149ba:	4601      	mov	r1, r0
 80149bc:	4628      	mov	r0, r5
 80149be:	f000 f96f 	bl	8014ca0 <uxr_seq_num_cmp>
 80149c2:	2800      	cmp	r0, #0
 80149c4:	dd42      	ble.n	8014a4c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80149c6:	2000      	movs	r0, #0
 80149c8:	b011      	add	sp, #68	@ 0x44
 80149ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149ce:	8921      	ldrh	r1, [r4, #8]
 80149d0:	8a60      	ldrh	r0, [r4, #18]
 80149d2:	9205      	str	r2, [sp, #20]
 80149d4:	f000 f95c 	bl	8014c90 <uxr_seq_num_add>
 80149d8:	4601      	mov	r1, r0
 80149da:	4630      	mov	r0, r6
 80149dc:	f000 f960 	bl	8014ca0 <uxr_seq_num_cmp>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	9a05      	ldr	r2, [sp, #20]
 80149e4:	dcef      	bgt.n	80149c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80149e6:	8927      	ldrh	r7, [r4, #8]
 80149e8:	fbb6 f3f7 	udiv	r3, r6, r7
 80149ec:	fb07 6313 	mls	r3, r7, r3, r6
 80149f0:	b29d      	uxth	r5, r3
 80149f2:	6863      	ldr	r3, [r4, #4]
 80149f4:	6824      	ldr	r4, [r4, #0]
 80149f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80149fa:	fb05 f303 	mul.w	r3, r5, r3
 80149fe:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8014a02:	50e2      	str	r2, [r4, r3]
 8014a04:	2300      	movs	r3, #0
 8014a06:	f8cd 8000 	str.w	r8, [sp]
 8014a0a:	f7f7 fcab 	bl	800c364 <ucdr_init_buffer_origin_offset>
 8014a0e:	2001      	movs	r0, #1
 8014a10:	e7da      	b.n	80149c8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014a12:	b293      	uxth	r3, r2
 8014a14:	461a      	mov	r2, r3
 8014a16:	e737      	b.n	8014888 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014a18:	4630      	mov	r0, r6
 8014a1a:	2101      	movs	r1, #1
 8014a1c:	9207      	str	r2, [sp, #28]
 8014a1e:	f000 f937 	bl	8014c90 <uxr_seq_num_add>
 8014a22:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014a26:	fbb0 f1fc 	udiv	r1, r0, ip
 8014a2a:	fb0c 0111 	mls	r1, ip, r1, r0
 8014a2e:	4606      	mov	r6, r0
 8014a30:	b288      	uxth	r0, r1
 8014a32:	6863      	ldr	r3, [r4, #4]
 8014a34:	fbb3 f1fc 	udiv	r1, r3, ip
 8014a38:	6823      	ldr	r3, [r4, #0]
 8014a3a:	9a07      	ldr	r2, [sp, #28]
 8014a3c:	fb00 f101 	mul.w	r1, r0, r1
 8014a40:	3104      	adds	r1, #4
 8014a42:	440b      	add	r3, r1
 8014a44:	9303      	str	r3, [sp, #12]
 8014a46:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8014a4a:	e70a      	b.n	8014862 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8014a4c:	8921      	ldrh	r1, [r4, #8]
 8014a4e:	fbb5 f3f1 	udiv	r3, r5, r1
 8014a52:	fb01 5313 	mls	r3, r1, r3, r5
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	6863      	ldr	r3, [r4, #4]
 8014a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014a5e:	6821      	ldr	r1, [r4, #0]
 8014a60:	9804      	ldr	r0, [sp, #16]
 8014a62:	fb02 f303 	mul.w	r3, r2, r3
 8014a66:	3304      	adds	r3, #4
 8014a68:	7b22      	ldrb	r2, [r4, #12]
 8014a6a:	4419      	add	r1, r3
 8014a6c:	445a      	add	r2, fp
 8014a6e:	f841 2c04 	str.w	r2, [r1, #-4]
 8014a72:	7b23      	ldrb	r3, [r4, #12]
 8014a74:	9300      	str	r3, [sp, #0]
 8014a76:	2300      	movs	r3, #0
 8014a78:	f7f7 fc74 	bl	800c364 <ucdr_init_buffer_origin_offset>
 8014a7c:	81e5      	strh	r5, [r4, #14]
 8014a7e:	2001      	movs	r0, #1
 8014a80:	e7a2      	b.n	80149c8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014a82:	4682      	mov	sl, r0
 8014a84:	e6ca      	b.n	801481c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014a86:	bf00      	nop
 8014a88:	08014691 	.word	0x08014691

08014a8c <uxr_prepare_next_reliable_buffer_to_send>:
 8014a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a8e:	4604      	mov	r4, r0
 8014a90:	460f      	mov	r7, r1
 8014a92:	8a00      	ldrh	r0, [r0, #16]
 8014a94:	2101      	movs	r1, #1
 8014a96:	4616      	mov	r6, r2
 8014a98:	461d      	mov	r5, r3
 8014a9a:	f000 f8f9 	bl	8014c90 <uxr_seq_num_add>
 8014a9e:	8028      	strh	r0, [r5, #0]
 8014aa0:	8922      	ldrh	r2, [r4, #8]
 8014aa2:	fbb0 f3f2 	udiv	r3, r0, r2
 8014aa6:	fb02 0c13 	mls	ip, r2, r3, r0
 8014aaa:	fa1f fc8c 	uxth.w	ip, ip
 8014aae:	6863      	ldr	r3, [r4, #4]
 8014ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ab4:	fb0c fc03 	mul.w	ip, ip, r3
 8014ab8:	6823      	ldr	r3, [r4, #0]
 8014aba:	89e1      	ldrh	r1, [r4, #14]
 8014abc:	f10c 0c04 	add.w	ip, ip, #4
 8014ac0:	4463      	add	r3, ip
 8014ac2:	603b      	str	r3, [r7, #0]
 8014ac4:	6823      	ldr	r3, [r4, #0]
 8014ac6:	449c      	add	ip, r3
 8014ac8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8014acc:	6033      	str	r3, [r6, #0]
 8014ace:	f000 f8e7 	bl	8014ca0 <uxr_seq_num_cmp>
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	dd01      	ble.n	8014ada <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ada:	7b23      	ldrb	r3, [r4, #12]
 8014adc:	6832      	ldr	r2, [r6, #0]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d9f9      	bls.n	8014ad6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014ae2:	8a61      	ldrh	r1, [r4, #18]
 8014ae4:	8a20      	ldrh	r0, [r4, #16]
 8014ae6:	f000 f8d7 	bl	8014c98 <uxr_seq_num_sub>
 8014aea:	8923      	ldrh	r3, [r4, #8]
 8014aec:	4283      	cmp	r3, r0
 8014aee:	d0f2      	beq.n	8014ad6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8014af0:	8828      	ldrh	r0, [r5, #0]
 8014af2:	89e3      	ldrh	r3, [r4, #14]
 8014af4:	8220      	strh	r0, [r4, #16]
 8014af6:	4298      	cmp	r0, r3
 8014af8:	d001      	beq.n	8014afe <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8014afa:	2001      	movs	r0, #1
 8014afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014afe:	2101      	movs	r1, #1
 8014b00:	f000 f8c6 	bl	8014c90 <uxr_seq_num_add>
 8014b04:	81e0      	strh	r0, [r4, #14]
 8014b06:	2001      	movs	r0, #1
 8014b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b0a:	bf00      	nop

08014b0c <uxr_update_output_stream_heartbeat_timestamp>:
 8014b0c:	b570      	push	{r4, r5, r6, lr}
 8014b0e:	8a01      	ldrh	r1, [r0, #16]
 8014b10:	4604      	mov	r4, r0
 8014b12:	8a40      	ldrh	r0, [r0, #18]
 8014b14:	4615      	mov	r5, r2
 8014b16:	461e      	mov	r6, r3
 8014b18:	f000 f8c2 	bl	8014ca0 <uxr_seq_num_cmp>
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	db07      	blt.n	8014b30 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014b20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014b24:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014b28:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}
 8014b30:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014b34:	b940      	cbnz	r0, 8014b48 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014b36:	2301      	movs	r3, #1
 8014b38:	f884 3020 	strb.w	r3, [r4, #32]
 8014b3c:	3564      	adds	r5, #100	@ 0x64
 8014b3e:	f146 0600 	adc.w	r6, r6, #0
 8014b42:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014b46:	bd70      	pop	{r4, r5, r6, pc}
 8014b48:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8014b4c:	4295      	cmp	r5, r2
 8014b4e:	eb76 0303 	sbcs.w	r3, r6, r3
 8014b52:	bfa5      	ittet	ge
 8014b54:	3001      	addge	r0, #1
 8014b56:	f884 0020 	strbge.w	r0, [r4, #32]
 8014b5a:	2000      	movlt	r0, #0
 8014b5c:	2001      	movge	r0, #1
 8014b5e:	e7ed      	b.n	8014b3c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014b60 <uxr_begin_output_nack_buffer_it>:
 8014b60:	8a40      	ldrh	r0, [r0, #18]
 8014b62:	4770      	bx	lr

08014b64 <uxr_next_reliable_nack_buffer_to_send>:
 8014b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b68:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8014b6c:	b082      	sub	sp, #8
 8014b6e:	f1b8 0f00 	cmp.w	r8, #0
 8014b72:	d011      	beq.n	8014b98 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014b74:	4604      	mov	r4, r0
 8014b76:	8818      	ldrh	r0, [r3, #0]
 8014b78:	460e      	mov	r6, r1
 8014b7a:	4617      	mov	r7, r2
 8014b7c:	461d      	mov	r5, r3
 8014b7e:	2101      	movs	r1, #1
 8014b80:	f000 f886 	bl	8014c90 <uxr_seq_num_add>
 8014b84:	8028      	strh	r0, [r5, #0]
 8014b86:	8a21      	ldrh	r1, [r4, #16]
 8014b88:	f000 f88a 	bl	8014ca0 <uxr_seq_num_cmp>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	dd07      	ble.n	8014ba0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014b90:	f04f 0800 	mov.w	r8, #0
 8014b94:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014b98:	4640      	mov	r0, r8
 8014b9a:	b002      	add	sp, #8
 8014b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba0:	8921      	ldrh	r1, [r4, #8]
 8014ba2:	8828      	ldrh	r0, [r5, #0]
 8014ba4:	6823      	ldr	r3, [r4, #0]
 8014ba6:	fbb0 f2f1 	udiv	r2, r0, r1
 8014baa:	fb01 0c12 	mls	ip, r1, r2, r0
 8014bae:	fa1f f28c 	uxth.w	r2, ip
 8014bb2:	9301      	str	r3, [sp, #4]
 8014bb4:	6863      	ldr	r3, [r4, #4]
 8014bb6:	fbb3 fcf1 	udiv	ip, r3, r1
 8014bba:	9b01      	ldr	r3, [sp, #4]
 8014bbc:	fb02 fc0c 	mul.w	ip, r2, ip
 8014bc0:	f10c 0c04 	add.w	ip, ip, #4
 8014bc4:	4463      	add	r3, ip
 8014bc6:	6033      	str	r3, [r6, #0]
 8014bc8:	6823      	ldr	r3, [r4, #0]
 8014bca:	4463      	add	r3, ip
 8014bcc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014bd0:	603b      	str	r3, [r7, #0]
 8014bd2:	7b22      	ldrb	r2, [r4, #12]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d0d2      	beq.n	8014b7e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8014bd8:	4640      	mov	r0, r8
 8014bda:	b002      	add	sp, #8
 8014bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014be0 <uxr_process_acknack>:
 8014be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be2:	4604      	mov	r4, r0
 8014be4:	460e      	mov	r6, r1
 8014be6:	4610      	mov	r0, r2
 8014be8:	2101      	movs	r1, #1
 8014bea:	f000 f855 	bl	8014c98 <uxr_seq_num_sub>
 8014bee:	8a61      	ldrh	r1, [r4, #18]
 8014bf0:	f000 f852 	bl	8014c98 <uxr_seq_num_sub>
 8014bf4:	b1c0      	cbz	r0, 8014c28 <uxr_process_acknack+0x48>
 8014bf6:	4605      	mov	r5, r0
 8014bf8:	2700      	movs	r7, #0
 8014bfa:	2101      	movs	r1, #1
 8014bfc:	8a60      	ldrh	r0, [r4, #18]
 8014bfe:	f000 f847 	bl	8014c90 <uxr_seq_num_add>
 8014c02:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014c06:	fbb0 f1fc 	udiv	r1, r0, ip
 8014c0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014c0e:	fb0c 0111 	mls	r1, ip, r1, r0
 8014c12:	b289      	uxth	r1, r1
 8014c14:	3701      	adds	r7, #1
 8014c16:	fbb3 f3fc 	udiv	r3, r3, ip
 8014c1a:	fb01 f303 	mul.w	r3, r1, r3
 8014c1e:	42bd      	cmp	r5, r7
 8014c20:	7b21      	ldrb	r1, [r4, #12]
 8014c22:	8260      	strh	r0, [r4, #18]
 8014c24:	50d1      	str	r1, [r2, r3]
 8014c26:	d1e8      	bne.n	8014bfa <uxr_process_acknack+0x1a>
 8014c28:	3e00      	subs	r6, #0
 8014c2a:	f04f 0300 	mov.w	r3, #0
 8014c2e:	bf18      	it	ne
 8014c30:	2601      	movne	r6, #1
 8014c32:	f884 3020 	strb.w	r3, [r4, #32]
 8014c36:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8014c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014c3c <uxr_is_output_up_to_date>:
 8014c3c:	8a01      	ldrh	r1, [r0, #16]
 8014c3e:	8a40      	ldrh	r0, [r0, #18]
 8014c40:	b508      	push	{r3, lr}
 8014c42:	f000 f82d 	bl	8014ca0 <uxr_seq_num_cmp>
 8014c46:	fab0 f080 	clz	r0, r0
 8014c4a:	0940      	lsrs	r0, r0, #5
 8014c4c:	bd08      	pop	{r3, pc}
 8014c4e:	bf00      	nop

08014c50 <get_available_free_slots>:
 8014c50:	8902      	ldrh	r2, [r0, #8]
 8014c52:	b1da      	cbz	r2, 8014c8c <get_available_free_slots+0x3c>
 8014c54:	b530      	push	{r4, r5, lr}
 8014c56:	2100      	movs	r1, #0
 8014c58:	6843      	ldr	r3, [r0, #4]
 8014c5a:	6805      	ldr	r5, [r0, #0]
 8014c5c:	7b04      	ldrb	r4, [r0, #12]
 8014c5e:	fbb3 fef2 	udiv	lr, r3, r2
 8014c62:	4608      	mov	r0, r1
 8014c64:	460b      	mov	r3, r1
 8014c66:	fbb3 fcf2 	udiv	ip, r3, r2
 8014c6a:	fb02 331c 	mls	r3, r2, ip, r3
 8014c6e:	b29b      	uxth	r3, r3
 8014c70:	fb0e f303 	mul.w	r3, lr, r3
 8014c74:	3101      	adds	r1, #1
 8014c76:	f855 c003 	ldr.w	ip, [r5, r3]
 8014c7a:	4564      	cmp	r4, ip
 8014c7c:	bf08      	it	eq
 8014c7e:	3001      	addeq	r0, #1
 8014c80:	b28b      	uxth	r3, r1
 8014c82:	bf08      	it	eq
 8014c84:	b280      	uxtheq	r0, r0
 8014c86:	4293      	cmp	r3, r2
 8014c88:	d3ed      	bcc.n	8014c66 <get_available_free_slots+0x16>
 8014c8a:	bd30      	pop	{r4, r5, pc}
 8014c8c:	4610      	mov	r0, r2
 8014c8e:	4770      	bx	lr

08014c90 <uxr_seq_num_add>:
 8014c90:	4408      	add	r0, r1
 8014c92:	b280      	uxth	r0, r0
 8014c94:	4770      	bx	lr
 8014c96:	bf00      	nop

08014c98 <uxr_seq_num_sub>:
 8014c98:	1a40      	subs	r0, r0, r1
 8014c9a:	b280      	uxth	r0, r0
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop

08014ca0 <uxr_seq_num_cmp>:
 8014ca0:	4288      	cmp	r0, r1
 8014ca2:	d011      	beq.n	8014cc8 <uxr_seq_num_cmp+0x28>
 8014ca4:	d309      	bcc.n	8014cba <uxr_seq_num_cmp+0x1a>
 8014ca6:	4288      	cmp	r0, r1
 8014ca8:	d910      	bls.n	8014ccc <uxr_seq_num_cmp+0x2c>
 8014caa:	1a40      	subs	r0, r0, r1
 8014cac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014cb0:	bfd4      	ite	le
 8014cb2:	2001      	movle	r0, #1
 8014cb4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014cb8:	4770      	bx	lr
 8014cba:	1a0b      	subs	r3, r1, r0
 8014cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014cc0:	daf1      	bge.n	8014ca6 <uxr_seq_num_cmp+0x6>
 8014cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cc6:	4770      	bx	lr
 8014cc8:	2000      	movs	r0, #0
 8014cca:	4770      	bx	lr
 8014ccc:	2001      	movs	r0, #1
 8014cce:	4770      	bx	lr

08014cd0 <uxr_init_framing_io>:
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	7041      	strb	r1, [r0, #1]
 8014cd4:	7003      	strb	r3, [r0, #0]
 8014cd6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop

08014cdc <uxr_write_framed_msg>:
 8014cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce0:	4617      	mov	r7, r2
 8014ce2:	7842      	ldrb	r2, [r0, #1]
 8014ce4:	b083      	sub	sp, #12
 8014ce6:	460e      	mov	r6, r1
 8014ce8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014cec:	469a      	mov	sl, r3
 8014cee:	2901      	cmp	r1, #1
 8014cf0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014cfa:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014cfe:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014d02:	f240 8137 	bls.w	8014f74 <uxr_write_framed_msg+0x298>
 8014d06:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014d0a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014d0e:	2901      	cmp	r1, #1
 8014d10:	f04f 0202 	mov.w	r2, #2
 8014d14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d18:	f240 808f 	bls.w	8014e3a <uxr_write_framed_msg+0x15e>
 8014d1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d1e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014d22:	b2dd      	uxtb	r5, r3
 8014d24:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014d28:	2203      	movs	r2, #3
 8014d2a:	2901      	cmp	r1, #1
 8014d2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d30:	f240 809a 	bls.w	8014e68 <uxr_write_framed_msg+0x18c>
 8014d34:	18a1      	adds	r1, r4, r2
 8014d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d38:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014d3c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014d40:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014d44:	3201      	adds	r2, #1
 8014d46:	2801      	cmp	r0, #1
 8014d48:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d4c:	f240 80a0 	bls.w	8014e90 <uxr_write_framed_msg+0x1b4>
 8014d50:	18a0      	adds	r0, r4, r2
 8014d52:	3201      	adds	r2, #1
 8014d54:	b2d2      	uxtb	r2, r2
 8014d56:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014d5a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f000 80a9 	beq.w	8014eb6 <uxr_write_framed_msg+0x1da>
 8014d64:	f04f 0900 	mov.w	r9, #0
 8014d68:	46c8      	mov	r8, r9
 8014d6a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014d6e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014d72:	2901      	cmp	r1, #1
 8014d74:	f240 80c3 	bls.w	8014efe <uxr_write_framed_msg+0x222>
 8014d78:	2a29      	cmp	r2, #41	@ 0x29
 8014d7a:	f200 809f 	bhi.w	8014ebc <uxr_write_framed_msg+0x1e0>
 8014d7e:	18a1      	adds	r1, r4, r2
 8014d80:	3201      	adds	r2, #1
 8014d82:	b2d2      	uxtb	r2, r2
 8014d84:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014d88:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d8c:	ea89 0303 	eor.w	r3, r9, r3
 8014d90:	498c      	ldr	r1, [pc, #560]	@ (8014fc4 <uxr_write_framed_msg+0x2e8>)
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	f108 0801 	add.w	r8, r8, #1
 8014d98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d9c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014da0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014da2:	4543      	cmp	r3, r8
 8014da4:	d8e1      	bhi.n	8014d6a <uxr_write_framed_msg+0x8e>
 8014da6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014daa:	fa5f f889 	uxtb.w	r8, r9
 8014dae:	9301      	str	r3, [sp, #4]
 8014db0:	f04f 0900 	mov.w	r9, #0
 8014db4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014db8:	fa5f f18a 	uxtb.w	r1, sl
 8014dbc:	2901      	cmp	r1, #1
 8014dbe:	d921      	bls.n	8014e04 <uxr_write_framed_msg+0x128>
 8014dc0:	2a29      	cmp	r2, #41	@ 0x29
 8014dc2:	f240 80af 	bls.w	8014f24 <uxr_write_framed_msg+0x248>
 8014dc6:	2500      	movs	r5, #0
 8014dc8:	e000      	b.n	8014dcc <uxr_write_framed_msg+0xf0>
 8014dca:	b160      	cbz	r0, 8014de6 <uxr_write_framed_msg+0x10a>
 8014dcc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014dd0:	1b52      	subs	r2, r2, r5
 8014dd2:	465b      	mov	r3, fp
 8014dd4:	4421      	add	r1, r4
 8014dd6:	4638      	mov	r0, r7
 8014dd8:	47b0      	blx	r6
 8014dda:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014dde:	4405      	add	r5, r0
 8014de0:	4295      	cmp	r5, r2
 8014de2:	d3f2      	bcc.n	8014dca <uxr_write_framed_msg+0xee>
 8014de4:	d003      	beq.n	8014dee <uxr_write_framed_msg+0x112>
 8014de6:	2000      	movs	r0, #0
 8014de8:	b003      	add	sp, #12
 8014dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dee:	fa5f f18a 	uxtb.w	r1, sl
 8014df2:	f04f 0300 	mov.w	r3, #0
 8014df6:	2901      	cmp	r1, #1
 8014df8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014dfc:	f04f 0200 	mov.w	r2, #0
 8014e00:	f200 8090 	bhi.w	8014f24 <uxr_write_framed_msg+0x248>
 8014e04:	1c51      	adds	r1, r2, #1
 8014e06:	b2c9      	uxtb	r1, r1
 8014e08:	2929      	cmp	r1, #41	@ 0x29
 8014e0a:	d8dc      	bhi.n	8014dc6 <uxr_write_framed_msg+0xea>
 8014e0c:	18a5      	adds	r5, r4, r2
 8014e0e:	4421      	add	r1, r4
 8014e10:	3202      	adds	r2, #2
 8014e12:	f088 0820 	eor.w	r8, r8, #32
 8014e16:	4648      	mov	r0, r9
 8014e18:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014e1c:	b2d2      	uxtb	r2, r2
 8014e1e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014e22:	f04f 0901 	mov.w	r9, #1
 8014e26:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014e2a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e2e:	2800      	cmp	r0, #0
 8014e30:	f040 8085 	bne.w	8014f3e <uxr_write_framed_msg+0x262>
 8014e34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014e38:	e7bc      	b.n	8014db4 <uxr_write_framed_msg+0xd8>
 8014e3a:	4611      	mov	r1, r2
 8014e3c:	f04f 0c03 	mov.w	ip, #3
 8014e40:	2204      	movs	r2, #4
 8014e42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e44:	4421      	add	r1, r4
 8014e46:	b2dd      	uxtb	r5, r3
 8014e48:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014e4c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014e50:	44a4      	add	ip, r4
 8014e52:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014e56:	f080 0020 	eor.w	r0, r0, #32
 8014e5a:	2901      	cmp	r1, #1
 8014e5c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014e60:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e64:	f63f af66 	bhi.w	8014d34 <uxr_write_framed_msg+0x58>
 8014e68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e6a:	18a0      	adds	r0, r4, r2
 8014e6c:	f085 0520 	eor.w	r5, r5, #32
 8014e70:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e74:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e78:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014e7c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014e80:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014e84:	3202      	adds	r2, #2
 8014e86:	2801      	cmp	r0, #1
 8014e88:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e8c:	f63f af60 	bhi.w	8014d50 <uxr_write_framed_msg+0x74>
 8014e90:	1c50      	adds	r0, r2, #1
 8014e92:	18a5      	adds	r5, r4, r2
 8014e94:	fa54 f080 	uxtab	r0, r4, r0
 8014e98:	3202      	adds	r2, #2
 8014e9a:	f081 0120 	eor.w	r1, r1, #32
 8014e9e:	b2d2      	uxtb	r2, r2
 8014ea0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014ea4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014ea8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014eac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	f47f af57 	bne.w	8014d64 <uxr_write_framed_msg+0x88>
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	4698      	mov	r8, r3
 8014eba:	e779      	b.n	8014db0 <uxr_write_framed_msg+0xd4>
 8014ebc:	2500      	movs	r5, #0
 8014ebe:	e001      	b.n	8014ec4 <uxr_write_framed_msg+0x1e8>
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d090      	beq.n	8014de6 <uxr_write_framed_msg+0x10a>
 8014ec4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014ec8:	1b52      	subs	r2, r2, r5
 8014eca:	465b      	mov	r3, fp
 8014ecc:	4421      	add	r1, r4
 8014ece:	4638      	mov	r0, r7
 8014ed0:	47b0      	blx	r6
 8014ed2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014ed6:	4405      	add	r5, r0
 8014ed8:	4295      	cmp	r5, r2
 8014eda:	d3f1      	bcc.n	8014ec0 <uxr_write_framed_msg+0x1e4>
 8014edc:	d183      	bne.n	8014de6 <uxr_write_framed_msg+0x10a>
 8014ede:	f04f 0300 	mov.w	r3, #0
 8014ee2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014ee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ee8:	4543      	cmp	r3, r8
 8014eea:	d964      	bls.n	8014fb6 <uxr_write_framed_msg+0x2da>
 8014eec:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014ef0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014ef4:	2901      	cmp	r1, #1
 8014ef6:	f04f 0200 	mov.w	r2, #0
 8014efa:	f63f af3d 	bhi.w	8014d78 <uxr_write_framed_msg+0x9c>
 8014efe:	1c51      	adds	r1, r2, #1
 8014f00:	b2c9      	uxtb	r1, r1
 8014f02:	2929      	cmp	r1, #41	@ 0x29
 8014f04:	d8da      	bhi.n	8014ebc <uxr_write_framed_msg+0x1e0>
 8014f06:	18a0      	adds	r0, r4, r2
 8014f08:	4421      	add	r1, r4
 8014f0a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014f0e:	3202      	adds	r2, #2
 8014f10:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014f14:	b2d2      	uxtb	r2, r2
 8014f16:	f083 0020 	eor.w	r0, r3, #32
 8014f1a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014f1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f22:	e733      	b.n	8014d8c <uxr_write_framed_msg+0xb0>
 8014f24:	18a1      	adds	r1, r4, r2
 8014f26:	3201      	adds	r2, #1
 8014f28:	4648      	mov	r0, r9
 8014f2a:	b2d2      	uxtb	r2, r2
 8014f2c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014f30:	f04f 0901 	mov.w	r9, #1
 8014f34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	f43f af7b 	beq.w	8014e34 <uxr_write_framed_msg+0x158>
 8014f3e:	2500      	movs	r5, #0
 8014f40:	e002      	b.n	8014f48 <uxr_write_framed_msg+0x26c>
 8014f42:	2800      	cmp	r0, #0
 8014f44:	f43f af4f 	beq.w	8014de6 <uxr_write_framed_msg+0x10a>
 8014f48:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014f4c:	1b52      	subs	r2, r2, r5
 8014f4e:	465b      	mov	r3, fp
 8014f50:	4421      	add	r1, r4
 8014f52:	4638      	mov	r0, r7
 8014f54:	47b0      	blx	r6
 8014f56:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014f5a:	4405      	add	r5, r0
 8014f5c:	4295      	cmp	r5, r2
 8014f5e:	d3f0      	bcc.n	8014f42 <uxr_write_framed_msg+0x266>
 8014f60:	f47f af41 	bne.w	8014de6 <uxr_write_framed_msg+0x10a>
 8014f64:	2300      	movs	r3, #0
 8014f66:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014f6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f6c:	b298      	uxth	r0, r3
 8014f6e:	b003      	add	sp, #12
 8014f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f74:	217d      	movs	r1, #125	@ 0x7d
 8014f76:	f082 0220 	eor.w	r2, r2, #32
 8014f7a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014f7e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014f82:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014f86:	2901      	cmp	r1, #1
 8014f88:	f04f 0203 	mov.w	r2, #3
 8014f8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f90:	d804      	bhi.n	8014f9c <uxr_write_framed_msg+0x2c0>
 8014f92:	4611      	mov	r1, r2
 8014f94:	f04f 0c04 	mov.w	ip, #4
 8014f98:	2205      	movs	r2, #5
 8014f9a:	e752      	b.n	8014e42 <uxr_write_framed_msg+0x166>
 8014f9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f9e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014fa2:	b2dd      	uxtb	r5, r3
 8014fa4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014fa8:	2204      	movs	r2, #4
 8014faa:	2901      	cmp	r1, #1
 8014fac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014fb0:	f63f aec0 	bhi.w	8014d34 <uxr_write_framed_msg+0x58>
 8014fb4:	e758      	b.n	8014e68 <uxr_write_framed_msg+0x18c>
 8014fb6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014fba:	fa5f f889 	uxtb.w	r8, r9
 8014fbe:	9301      	str	r3, [sp, #4]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	e6f5      	b.n	8014db0 <uxr_write_framed_msg+0xd4>
 8014fc4:	08019be8 	.word	0x08019be8

08014fc8 <uxr_framing_read_transport>:
 8014fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fcc:	4604      	mov	r4, r0
 8014fce:	b083      	sub	sp, #12
 8014fd0:	461f      	mov	r7, r3
 8014fd2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014fd6:	4689      	mov	r9, r1
 8014fd8:	4692      	mov	sl, r2
 8014fda:	f7f9 f80f 	bl	800dffc <uxr_millis>
 8014fde:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fe2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014fe6:	42b3      	cmp	r3, r6
 8014fe8:	4680      	mov	r8, r0
 8014fea:	d061      	beq.n	80150b0 <uxr_framing_read_transport+0xe8>
 8014fec:	d81c      	bhi.n	8015028 <uxr_framing_read_transport+0x60>
 8014fee:	1e75      	subs	r5, r6, #1
 8014ff0:	1aed      	subs	r5, r5, r3
 8014ff2:	b2ed      	uxtb	r5, r5
 8014ff4:	2600      	movs	r6, #0
 8014ff6:	455d      	cmp	r5, fp
 8014ff8:	d81f      	bhi.n	801503a <uxr_framing_read_transport+0x72>
 8014ffa:	19ab      	adds	r3, r5, r6
 8014ffc:	455b      	cmp	r3, fp
 8014ffe:	bf84      	itt	hi
 8015000:	ebab 0605 	subhi.w	r6, fp, r5
 8015004:	b2f6      	uxtbhi	r6, r6
 8015006:	b9ed      	cbnz	r5, 8015044 <uxr_framing_read_transport+0x7c>
 8015008:	f04f 0b00 	mov.w	fp, #0
 801500c:	f7f8 fff6 	bl	800dffc <uxr_millis>
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	eba0 0808 	sub.w	r8, r0, r8
 8015016:	eba3 0308 	sub.w	r3, r3, r8
 801501a:	4658      	mov	r0, fp
 801501c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015020:	603b      	str	r3, [r7, #0]
 8015022:	b003      	add	sp, #12
 8015024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015028:	2e00      	cmp	r6, #0
 801502a:	d049      	beq.n	80150c0 <uxr_framing_read_transport+0xf8>
 801502c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8015030:	b2ed      	uxtb	r5, r5
 8015032:	3e01      	subs	r6, #1
 8015034:	455d      	cmp	r5, fp
 8015036:	b2f6      	uxtb	r6, r6
 8015038:	d9df      	bls.n	8014ffa <uxr_framing_read_transport+0x32>
 801503a:	fa5f f58b 	uxtb.w	r5, fp
 801503e:	2600      	movs	r6, #0
 8015040:	2d00      	cmp	r5, #0
 8015042:	d0e1      	beq.n	8015008 <uxr_framing_read_transport+0x40>
 8015044:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015048:	3102      	adds	r1, #2
 801504a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801504c:	9300      	str	r3, [sp, #0]
 801504e:	683b      	ldr	r3, [r7, #0]
 8015050:	4421      	add	r1, r4
 8015052:	462a      	mov	r2, r5
 8015054:	4650      	mov	r0, sl
 8015056:	47c8      	blx	r9
 8015058:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801505c:	4a1a      	ldr	r2, [pc, #104]	@ (80150c8 <uxr_framing_read_transport+0x100>)
 801505e:	4403      	add	r3, r0
 8015060:	0859      	lsrs	r1, r3, #1
 8015062:	fba2 2101 	umull	r2, r1, r2, r1
 8015066:	0889      	lsrs	r1, r1, #2
 8015068:	222a      	movs	r2, #42	@ 0x2a
 801506a:	fb02 3111 	mls	r1, r2, r1, r3
 801506e:	4683      	mov	fp, r0
 8015070:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015074:	2800      	cmp	r0, #0
 8015076:	d0c7      	beq.n	8015008 <uxr_framing_read_transport+0x40>
 8015078:	42a8      	cmp	r0, r5
 801507a:	d1c7      	bne.n	801500c <uxr_framing_read_transport+0x44>
 801507c:	2e00      	cmp	r6, #0
 801507e:	d0c5      	beq.n	801500c <uxr_framing_read_transport+0x44>
 8015080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	3102      	adds	r1, #2
 8015086:	4632      	mov	r2, r6
 8015088:	4421      	add	r1, r4
 801508a:	2300      	movs	r3, #0
 801508c:	4650      	mov	r0, sl
 801508e:	47c8      	blx	r9
 8015090:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015094:	4a0c      	ldr	r2, [pc, #48]	@ (80150c8 <uxr_framing_read_transport+0x100>)
 8015096:	180b      	adds	r3, r1, r0
 8015098:	0859      	lsrs	r1, r3, #1
 801509a:	fba2 1201 	umull	r1, r2, r2, r1
 801509e:	0892      	lsrs	r2, r2, #2
 80150a0:	212a      	movs	r1, #42	@ 0x2a
 80150a2:	fb01 3312 	mls	r3, r1, r2, r3
 80150a6:	eb00 0b05 	add.w	fp, r0, r5
 80150aa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80150ae:	e7ad      	b.n	801500c <uxr_framing_read_transport+0x44>
 80150b0:	2600      	movs	r6, #0
 80150b2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80150b6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80150b8:	d9bf      	bls.n	801503a <uxr_framing_read_transport+0x72>
 80150ba:	2102      	movs	r1, #2
 80150bc:	2529      	movs	r5, #41	@ 0x29
 80150be:	e7c4      	b.n	801504a <uxr_framing_read_transport+0x82>
 80150c0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 80150c4:	b2ed      	uxtb	r5, r5
 80150c6:	e796      	b.n	8014ff6 <uxr_framing_read_transport+0x2e>
 80150c8:	30c30c31 	.word	0x30c30c31

080150cc <uxr_read_framed_msg>:
 80150cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150d0:	461e      	mov	r6, r3
 80150d2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80150d6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80150da:	429d      	cmp	r5, r3
 80150dc:	b083      	sub	sp, #12
 80150de:	4604      	mov	r4, r0
 80150e0:	4688      	mov	r8, r1
 80150e2:	4691      	mov	r9, r2
 80150e4:	f000 8188 	beq.w	80153f8 <uxr_read_framed_msg+0x32c>
 80150e8:	7823      	ldrb	r3, [r4, #0]
 80150ea:	4dc1      	ldr	r5, [pc, #772]	@ (80153f0 <uxr_read_framed_msg+0x324>)
 80150ec:	4fc1      	ldr	r7, [pc, #772]	@ (80153f4 <uxr_read_framed_msg+0x328>)
 80150ee:	2b07      	cmp	r3, #7
 80150f0:	d8fd      	bhi.n	80150ee <uxr_read_framed_msg+0x22>
 80150f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80150f6:	0115      	.short	0x0115
 80150f8:	00d600f6 	.word	0x00d600f6
 80150fc:	009000b9 	.word	0x009000b9
 8015100:	0030004d 	.word	0x0030004d
 8015104:	0008      	.short	0x0008
 8015106:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801510a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801510e:	4299      	cmp	r1, r3
 8015110:	f000 814a 	beq.w	80153a8 <uxr_read_framed_msg+0x2dc>
 8015114:	18e2      	adds	r2, r4, r3
 8015116:	7892      	ldrb	r2, [r2, #2]
 8015118:	2a7d      	cmp	r2, #125	@ 0x7d
 801511a:	f000 8199 	beq.w	8015450 <uxr_read_framed_msg+0x384>
 801511e:	3301      	adds	r3, #1
 8015120:	0858      	lsrs	r0, r3, #1
 8015122:	fba5 1000 	umull	r1, r0, r5, r0
 8015126:	0880      	lsrs	r0, r0, #2
 8015128:	212a      	movs	r1, #42	@ 0x2a
 801512a:	fb01 3310 	mls	r3, r1, r0, r3
 801512e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015130:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015134:	f000 8252 	beq.w	80155dc <uxr_read_framed_msg+0x510>
 8015138:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801513a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801513c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015140:	b29b      	uxth	r3, r3
 8015142:	2200      	movs	r2, #0
 8015144:	4299      	cmp	r1, r3
 8015146:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8015148:	7022      	strb	r2, [r4, #0]
 801514a:	f000 8179 	beq.w	8015440 <uxr_read_framed_msg+0x374>
 801514e:	2000      	movs	r0, #0
 8015150:	b003      	add	sp, #12
 8015152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015156:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801515a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801515e:	4299      	cmp	r1, r3
 8015160:	f000 8131 	beq.w	80153c6 <uxr_read_framed_msg+0x2fa>
 8015164:	18e2      	adds	r2, r4, r3
 8015166:	7890      	ldrb	r0, [r2, #2]
 8015168:	287d      	cmp	r0, #125	@ 0x7d
 801516a:	f000 8190 	beq.w	801548e <uxr_read_framed_msg+0x3c2>
 801516e:	3301      	adds	r3, #1
 8015170:	085a      	lsrs	r2, r3, #1
 8015172:	fba5 1202 	umull	r1, r2, r5, r2
 8015176:	0892      	lsrs	r2, r2, #2
 8015178:	212a      	movs	r1, #42	@ 0x2a
 801517a:	fb01 3312 	mls	r3, r1, r2, r3
 801517e:	287e      	cmp	r0, #126	@ 0x7e
 8015180:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015184:	f000 821a 	beq.w	80155bc <uxr_read_framed_msg+0x4f0>
 8015188:	2307      	movs	r3, #7
 801518a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801518c:	7023      	strb	r3, [r4, #0]
 801518e:	e7ae      	b.n	80150ee <uxr_read_framed_msg+0x22>
 8015190:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015192:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8015196:	459e      	cmp	lr, r3
 8015198:	d938      	bls.n	801520c <uxr_read_framed_msg+0x140>
 801519a:	ee07 8a90 	vmov	s15, r8
 801519e:	212a      	movs	r1, #42	@ 0x2a
 80151a0:	e020      	b.n	80151e4 <uxr_read_framed_msg+0x118>
 80151a2:	f89b c002 	ldrb.w	ip, [fp, #2]
 80151a6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80151aa:	f000 80d4 	beq.w	8015356 <uxr_read_framed_msg+0x28a>
 80151ae:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80151b2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80151b6:	f000 8219 	beq.w	80155ec <uxr_read_framed_msg+0x520>
 80151ba:	f806 c003 	strb.w	ip, [r6, r3]
 80151be:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80151c2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80151c4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80151c8:	ea8a 000c 	eor.w	r0, sl, ip
 80151cc:	b2c0      	uxtb	r0, r0
 80151ce:	3301      	adds	r3, #1
 80151d0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80151d4:	b29b      	uxth	r3, r3
 80151d6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80151da:	4573      	cmp	r3, lr
 80151dc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80151de:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80151e0:	f080 8120 	bcs.w	8015424 <uxr_read_framed_msg+0x358>
 80151e4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80151e8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80151ec:	f100 0c01 	add.w	ip, r0, #1
 80151f0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80151f4:	fba5 8202 	umull	r8, r2, r5, r2
 80151f8:	0892      	lsrs	r2, r2, #2
 80151fa:	4582      	cmp	sl, r0
 80151fc:	eb04 0b00 	add.w	fp, r4, r0
 8015200:	fb01 c212 	mls	r2, r1, r2, ip
 8015204:	d1cd      	bne.n	80151a2 <uxr_read_framed_msg+0xd6>
 8015206:	ee17 8a90 	vmov	r8, s15
 801520a:	459e      	cmp	lr, r3
 801520c:	f040 8111 	bne.w	8015432 <uxr_read_framed_msg+0x366>
 8015210:	2306      	movs	r3, #6
 8015212:	7023      	strb	r3, [r4, #0]
 8015214:	e76b      	b.n	80150ee <uxr_read_framed_msg+0x22>
 8015216:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801521a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801521e:	4298      	cmp	r0, r3
 8015220:	f000 80c2 	beq.w	80153a8 <uxr_read_framed_msg+0x2dc>
 8015224:	18e2      	adds	r2, r4, r3
 8015226:	7891      	ldrb	r1, [r2, #2]
 8015228:	297d      	cmp	r1, #125	@ 0x7d
 801522a:	f000 814c 	beq.w	80154c6 <uxr_read_framed_msg+0x3fa>
 801522e:	3301      	adds	r3, #1
 8015230:	085a      	lsrs	r2, r3, #1
 8015232:	fba5 0202 	umull	r0, r2, r5, r2
 8015236:	0892      	lsrs	r2, r2, #2
 8015238:	202a      	movs	r0, #42	@ 0x2a
 801523a:	fb00 3312 	mls	r3, r0, r2, r3
 801523e:	297e      	cmp	r1, #126	@ 0x7e
 8015240:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015244:	f000 81ca 	beq.w	80155dc <uxr_read_framed_msg+0x510>
 8015248:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801524a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801524e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015250:	b29b      	uxth	r3, r3
 8015252:	2000      	movs	r0, #0
 8015254:	428b      	cmp	r3, r1
 8015256:	8623      	strh	r3, [r4, #48]	@ 0x30
 8015258:	8660      	strh	r0, [r4, #50]	@ 0x32
 801525a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801525c:	f240 80df 	bls.w	801541e <uxr_read_framed_msg+0x352>
 8015260:	7020      	strb	r0, [r4, #0]
 8015262:	b003      	add	sp, #12
 8015264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015268:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801526c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015270:	4299      	cmp	r1, r3
 8015272:	f000 80a8 	beq.w	80153c6 <uxr_read_framed_msg+0x2fa>
 8015276:	18e2      	adds	r2, r4, r3
 8015278:	7890      	ldrb	r0, [r2, #2]
 801527a:	287d      	cmp	r0, #125	@ 0x7d
 801527c:	f000 8164 	beq.w	8015548 <uxr_read_framed_msg+0x47c>
 8015280:	3301      	adds	r3, #1
 8015282:	085a      	lsrs	r2, r3, #1
 8015284:	fba5 1202 	umull	r1, r2, r5, r2
 8015288:	0892      	lsrs	r2, r2, #2
 801528a:	212a      	movs	r1, #42	@ 0x2a
 801528c:	fb01 3312 	mls	r3, r1, r2, r3
 8015290:	287e      	cmp	r0, #126	@ 0x7e
 8015292:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015296:	f000 8191 	beq.w	80155bc <uxr_read_framed_msg+0x4f0>
 801529a:	2304      	movs	r3, #4
 801529c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801529e:	7023      	strb	r3, [r4, #0]
 80152a0:	e725      	b.n	80150ee <uxr_read_framed_msg+0x22>
 80152a2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80152a6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80152aa:	4290      	cmp	r0, r2
 80152ac:	f000 80b3 	beq.w	8015416 <uxr_read_framed_msg+0x34a>
 80152b0:	18a3      	adds	r3, r4, r2
 80152b2:	7899      	ldrb	r1, [r3, #2]
 80152b4:	297d      	cmp	r1, #125	@ 0x7d
 80152b6:	f000 8164 	beq.w	8015582 <uxr_read_framed_msg+0x4b6>
 80152ba:	3201      	adds	r2, #1
 80152bc:	0850      	lsrs	r0, r2, #1
 80152be:	fba5 3000 	umull	r3, r0, r5, r0
 80152c2:	0880      	lsrs	r0, r0, #2
 80152c4:	232a      	movs	r3, #42	@ 0x2a
 80152c6:	fb03 2210 	mls	r2, r3, r0, r2
 80152ca:	297e      	cmp	r1, #126	@ 0x7e
 80152cc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80152d0:	f000 8188 	beq.w	80155e4 <uxr_read_framed_msg+0x518>
 80152d4:	7863      	ldrb	r3, [r4, #1]
 80152d6:	428b      	cmp	r3, r1
 80152d8:	bf0c      	ite	eq
 80152da:	2303      	moveq	r3, #3
 80152dc:	2300      	movne	r3, #0
 80152de:	7023      	strb	r3, [r4, #0]
 80152e0:	e705      	b.n	80150ee <uxr_read_framed_msg+0x22>
 80152e2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152e6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80152ea:	2200      	movs	r2, #0
 80152ec:	4299      	cmp	r1, r3
 80152ee:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80152f2:	d06c      	beq.n	80153ce <uxr_read_framed_msg+0x302>
 80152f4:	18e2      	adds	r2, r4, r3
 80152f6:	7890      	ldrb	r0, [r2, #2]
 80152f8:	287d      	cmp	r0, #125	@ 0x7d
 80152fa:	f000 8101 	beq.w	8015500 <uxr_read_framed_msg+0x434>
 80152fe:	3301      	adds	r3, #1
 8015300:	085a      	lsrs	r2, r3, #1
 8015302:	fba5 1202 	umull	r1, r2, r5, r2
 8015306:	0892      	lsrs	r2, r2, #2
 8015308:	212a      	movs	r1, #42	@ 0x2a
 801530a:	fb01 3312 	mls	r3, r1, r2, r3
 801530e:	287e      	cmp	r0, #126	@ 0x7e
 8015310:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8015314:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015318:	d059      	beq.n	80153ce <uxr_read_framed_msg+0x302>
 801531a:	2302      	movs	r3, #2
 801531c:	7023      	strb	r3, [r4, #0]
 801531e:	e6e6      	b.n	80150ee <uxr_read_framed_msg+0x22>
 8015320:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8015324:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8015328:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801532c:	1c51      	adds	r1, r2, #1
 801532e:	084b      	lsrs	r3, r1, #1
 8015330:	fba5 c303 	umull	ip, r3, r5, r3
 8015334:	089b      	lsrs	r3, r3, #2
 8015336:	fb0e 1313 	mls	r3, lr, r3, r1
 801533a:	4592      	cmp	sl, r2
 801533c:	eb04 0002 	add.w	r0, r4, r2
 8015340:	b2da      	uxtb	r2, r3
 8015342:	f43f af04 	beq.w	801514e <uxr_read_framed_msg+0x82>
 8015346:	7883      	ldrb	r3, [r0, #2]
 8015348:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801534c:	2b7e      	cmp	r3, #126	@ 0x7e
 801534e:	d1ed      	bne.n	801532c <uxr_read_framed_msg+0x260>
 8015350:	2301      	movs	r3, #1
 8015352:	7023      	strb	r3, [r4, #0]
 8015354:	e6cb      	b.n	80150ee <uxr_read_framed_msg+0x22>
 8015356:	f100 0c01 	add.w	ip, r0, #1
 801535a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801535e:	fba5 8202 	umull	r8, r2, r5, r2
 8015362:	0892      	lsrs	r2, r2, #2
 8015364:	fb01 c212 	mls	r2, r1, r2, ip
 8015368:	eb04 0c02 	add.w	ip, r4, r2
 801536c:	b2d2      	uxtb	r2, r2
 801536e:	4592      	cmp	sl, r2
 8015370:	f100 0002 	add.w	r0, r0, #2
 8015374:	f43f af47 	beq.w	8015206 <uxr_read_framed_msg+0x13a>
 8015378:	0842      	lsrs	r2, r0, #1
 801537a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801537e:	fba5 8202 	umull	r8, r2, r5, r2
 8015382:	0892      	lsrs	r2, r2, #2
 8015384:	fb01 0012 	mls	r0, r1, r2, r0
 8015388:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801538c:	f08a 0c20 	eor.w	ip, sl, #32
 8015390:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015394:	f47f af11 	bne.w	80151ba <uxr_read_framed_msg+0xee>
 8015398:	459e      	cmp	lr, r3
 801539a:	ee17 8a90 	vmov	r8, s15
 801539e:	f43f af37 	beq.w	8015210 <uxr_read_framed_msg+0x144>
 80153a2:	2301      	movs	r3, #1
 80153a4:	7023      	strb	r3, [r4, #0]
 80153a6:	e6a2      	b.n	80150ee <uxr_read_framed_msg+0x22>
 80153a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	2301      	movs	r3, #1
 80153ae:	9301      	str	r3, [sp, #4]
 80153b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153b2:	464a      	mov	r2, r9
 80153b4:	4641      	mov	r1, r8
 80153b6:	4620      	mov	r0, r4
 80153b8:	f7ff fe06 	bl	8014fc8 <uxr_framing_read_transport>
 80153bc:	2800      	cmp	r0, #0
 80153be:	f43f aec6 	beq.w	801514e <uxr_read_framed_msg+0x82>
 80153c2:	7823      	ldrb	r3, [r4, #0]
 80153c4:	e693      	b.n	80150ee <uxr_read_framed_msg+0x22>
 80153c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153c8:	9300      	str	r3, [sp, #0]
 80153ca:	2302      	movs	r3, #2
 80153cc:	e7ef      	b.n	80153ae <uxr_read_framed_msg+0x2e2>
 80153ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153d0:	9300      	str	r3, [sp, #0]
 80153d2:	2304      	movs	r3, #4
 80153d4:	9301      	str	r3, [sp, #4]
 80153d6:	464a      	mov	r2, r9
 80153d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153da:	4641      	mov	r1, r8
 80153dc:	4620      	mov	r0, r4
 80153de:	f7ff fdf3 	bl	8014fc8 <uxr_framing_read_transport>
 80153e2:	2800      	cmp	r0, #0
 80153e4:	d1ed      	bne.n	80153c2 <uxr_read_framed_msg+0x2f6>
 80153e6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80153ea:	2b7e      	cmp	r3, #126	@ 0x7e
 80153ec:	d0e9      	beq.n	80153c2 <uxr_read_framed_msg+0x2f6>
 80153ee:	e6ae      	b.n	801514e <uxr_read_framed_msg+0x82>
 80153f0:	30c30c31 	.word	0x30c30c31
 80153f4:	08019be8 	.word	0x08019be8
 80153f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153fa:	9300      	str	r3, [sp, #0]
 80153fc:	2305      	movs	r3, #5
 80153fe:	9301      	str	r3, [sp, #4]
 8015400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015402:	f7ff fde1 	bl	8014fc8 <uxr_framing_read_transport>
 8015406:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801540a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801540e:	429a      	cmp	r2, r3
 8015410:	f43f ae9d 	beq.w	801514e <uxr_read_framed_msg+0x82>
 8015414:	e668      	b.n	80150e8 <uxr_read_framed_msg+0x1c>
 8015416:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015418:	9300      	str	r3, [sp, #0]
 801541a:	2303      	movs	r3, #3
 801541c:	e7c7      	b.n	80153ae <uxr_read_framed_msg+0x2e2>
 801541e:	2305      	movs	r3, #5
 8015420:	7023      	strb	r3, [r4, #0]
 8015422:	e664      	b.n	80150ee <uxr_read_framed_msg+0x22>
 8015424:	ee17 8a90 	vmov	r8, s15
 8015428:	f43f aef2 	beq.w	8015210 <uxr_read_framed_msg+0x144>
 801542c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015430:	d08e      	beq.n	8015350 <uxr_read_framed_msg+0x284>
 8015432:	ebae 0303 	sub.w	r3, lr, r3
 8015436:	3302      	adds	r3, #2
 8015438:	9301      	str	r3, [sp, #4]
 801543a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801543c:	9300      	str	r3, [sp, #0]
 801543e:	e7b7      	b.n	80153b0 <uxr_read_framed_msg+0x2e4>
 8015440:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015442:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015446:	7013      	strb	r3, [r2, #0]
 8015448:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801544a:	b003      	add	sp, #12
 801544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015450:	f103 0c01 	add.w	ip, r3, #1
 8015454:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015458:	fba5 0202 	umull	r0, r2, r5, r2
 801545c:	0892      	lsrs	r2, r2, #2
 801545e:	202a      	movs	r0, #42	@ 0x2a
 8015460:	fb00 c212 	mls	r2, r0, r2, ip
 8015464:	fa5f fc82 	uxtb.w	ip, r2
 8015468:	4561      	cmp	r1, ip
 801546a:	d09d      	beq.n	80153a8 <uxr_read_framed_msg+0x2dc>
 801546c:	3302      	adds	r3, #2
 801546e:	4422      	add	r2, r4
 8015470:	0859      	lsrs	r1, r3, #1
 8015472:	7892      	ldrb	r2, [r2, #2]
 8015474:	fba5 c101 	umull	ip, r1, r5, r1
 8015478:	0889      	lsrs	r1, r1, #2
 801547a:	fb00 3311 	mls	r3, r0, r1, r3
 801547e:	2a7e      	cmp	r2, #126	@ 0x7e
 8015480:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015484:	f000 80aa 	beq.w	80155dc <uxr_read_framed_msg+0x510>
 8015488:	f082 0220 	eor.w	r2, r2, #32
 801548c:	e654      	b.n	8015138 <uxr_read_framed_msg+0x6c>
 801548e:	1c58      	adds	r0, r3, #1
 8015490:	0842      	lsrs	r2, r0, #1
 8015492:	fba5 c202 	umull	ip, r2, r5, r2
 8015496:	0892      	lsrs	r2, r2, #2
 8015498:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801549c:	fb0c 0212 	mls	r2, ip, r2, r0
 80154a0:	b2d0      	uxtb	r0, r2
 80154a2:	4281      	cmp	r1, r0
 80154a4:	d08f      	beq.n	80153c6 <uxr_read_framed_msg+0x2fa>
 80154a6:	4422      	add	r2, r4
 80154a8:	3302      	adds	r3, #2
 80154aa:	7890      	ldrb	r0, [r2, #2]
 80154ac:	085a      	lsrs	r2, r3, #1
 80154ae:	fba5 1202 	umull	r1, r2, r5, r2
 80154b2:	0892      	lsrs	r2, r2, #2
 80154b4:	fb0c 3312 	mls	r3, ip, r2, r3
 80154b8:	287e      	cmp	r0, #126	@ 0x7e
 80154ba:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154be:	d07d      	beq.n	80155bc <uxr_read_framed_msg+0x4f0>
 80154c0:	f080 0020 	eor.w	r0, r0, #32
 80154c4:	e660      	b.n	8015188 <uxr_read_framed_msg+0xbc>
 80154c6:	1c59      	adds	r1, r3, #1
 80154c8:	084a      	lsrs	r2, r1, #1
 80154ca:	fba5 c202 	umull	ip, r2, r5, r2
 80154ce:	0892      	lsrs	r2, r2, #2
 80154d0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80154d4:	fb0c 1212 	mls	r2, ip, r2, r1
 80154d8:	b2d1      	uxtb	r1, r2
 80154da:	4288      	cmp	r0, r1
 80154dc:	f43f af64 	beq.w	80153a8 <uxr_read_framed_msg+0x2dc>
 80154e0:	4422      	add	r2, r4
 80154e2:	3302      	adds	r3, #2
 80154e4:	7891      	ldrb	r1, [r2, #2]
 80154e6:	085a      	lsrs	r2, r3, #1
 80154e8:	fba5 0202 	umull	r0, r2, r5, r2
 80154ec:	0892      	lsrs	r2, r2, #2
 80154ee:	fb0c 3312 	mls	r3, ip, r2, r3
 80154f2:	297e      	cmp	r1, #126	@ 0x7e
 80154f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154f8:	d070      	beq.n	80155dc <uxr_read_framed_msg+0x510>
 80154fa:	f081 0120 	eor.w	r1, r1, #32
 80154fe:	e6a3      	b.n	8015248 <uxr_read_framed_msg+0x17c>
 8015500:	f103 0c01 	add.w	ip, r3, #1
 8015504:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015508:	fba5 0202 	umull	r0, r2, r5, r2
 801550c:	0892      	lsrs	r2, r2, #2
 801550e:	202a      	movs	r0, #42	@ 0x2a
 8015510:	fb00 c212 	mls	r2, r0, r2, ip
 8015514:	fa5f fc82 	uxtb.w	ip, r2
 8015518:	4561      	cmp	r1, ip
 801551a:	f43f af58 	beq.w	80153ce <uxr_read_framed_msg+0x302>
 801551e:	4422      	add	r2, r4
 8015520:	3302      	adds	r3, #2
 8015522:	7891      	ldrb	r1, [r2, #2]
 8015524:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015528:	085a      	lsrs	r2, r3, #1
 801552a:	fba5 c202 	umull	ip, r2, r5, r2
 801552e:	0892      	lsrs	r2, r2, #2
 8015530:	fb00 3312 	mls	r3, r0, r2, r3
 8015534:	297e      	cmp	r1, #126	@ 0x7e
 8015536:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801553a:	f43f af48 	beq.w	80153ce <uxr_read_framed_msg+0x302>
 801553e:	f081 0120 	eor.w	r1, r1, #32
 8015542:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015546:	e6e8      	b.n	801531a <uxr_read_framed_msg+0x24e>
 8015548:	1c58      	adds	r0, r3, #1
 801554a:	0842      	lsrs	r2, r0, #1
 801554c:	fba5 c202 	umull	ip, r2, r5, r2
 8015550:	0892      	lsrs	r2, r2, #2
 8015552:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015556:	fb0c 0212 	mls	r2, ip, r2, r0
 801555a:	b2d0      	uxtb	r0, r2
 801555c:	4281      	cmp	r1, r0
 801555e:	f43f af32 	beq.w	80153c6 <uxr_read_framed_msg+0x2fa>
 8015562:	4422      	add	r2, r4
 8015564:	3302      	adds	r3, #2
 8015566:	7890      	ldrb	r0, [r2, #2]
 8015568:	085a      	lsrs	r2, r3, #1
 801556a:	fba5 1202 	umull	r1, r2, r5, r2
 801556e:	0892      	lsrs	r2, r2, #2
 8015570:	fb0c 3312 	mls	r3, ip, r2, r3
 8015574:	287e      	cmp	r0, #126	@ 0x7e
 8015576:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801557a:	d01f      	beq.n	80155bc <uxr_read_framed_msg+0x4f0>
 801557c:	f080 0020 	eor.w	r0, r0, #32
 8015580:	e68b      	b.n	801529a <uxr_read_framed_msg+0x1ce>
 8015582:	1c51      	adds	r1, r2, #1
 8015584:	084b      	lsrs	r3, r1, #1
 8015586:	fba5 c303 	umull	ip, r3, r5, r3
 801558a:	089b      	lsrs	r3, r3, #2
 801558c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015590:	fb0c 1313 	mls	r3, ip, r3, r1
 8015594:	b2d9      	uxtb	r1, r3
 8015596:	4288      	cmp	r0, r1
 8015598:	f43f af3d 	beq.w	8015416 <uxr_read_framed_msg+0x34a>
 801559c:	3202      	adds	r2, #2
 801559e:	4423      	add	r3, r4
 80155a0:	0850      	lsrs	r0, r2, #1
 80155a2:	789b      	ldrb	r3, [r3, #2]
 80155a4:	fba5 1000 	umull	r1, r0, r5, r0
 80155a8:	0880      	lsrs	r0, r0, #2
 80155aa:	fb0c 2210 	mls	r2, ip, r0, r2
 80155ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80155b0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80155b4:	d016      	beq.n	80155e4 <uxr_read_framed_msg+0x518>
 80155b6:	f083 0120 	eor.w	r1, r3, #32
 80155ba:	e68b      	b.n	80152d4 <uxr_read_framed_msg+0x208>
 80155bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	2302      	movs	r3, #2
 80155c2:	9301      	str	r3, [sp, #4]
 80155c4:	464a      	mov	r2, r9
 80155c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155c8:	4641      	mov	r1, r8
 80155ca:	4620      	mov	r0, r4
 80155cc:	f7ff fcfc 	bl	8014fc8 <uxr_framing_read_transport>
 80155d0:	2800      	cmp	r0, #0
 80155d2:	f47f aef6 	bne.w	80153c2 <uxr_read_framed_msg+0x2f6>
 80155d6:	2301      	movs	r3, #1
 80155d8:	7023      	strb	r3, [r4, #0]
 80155da:	e588      	b.n	80150ee <uxr_read_framed_msg+0x22>
 80155dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	2301      	movs	r3, #1
 80155e2:	e7ee      	b.n	80155c2 <uxr_read_framed_msg+0x4f6>
 80155e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155e6:	9300      	str	r3, [sp, #0]
 80155e8:	2303      	movs	r3, #3
 80155ea:	e7ea      	b.n	80155c2 <uxr_read_framed_msg+0x4f6>
 80155ec:	ee17 8a90 	vmov	r8, s15
 80155f0:	e6ae      	b.n	8015350 <uxr_read_framed_msg+0x284>
 80155f2:	bf00      	nop

080155f4 <rcl_get_default_domain_id>:
 80155f4:	b530      	push	{r4, r5, lr}
 80155f6:	b083      	sub	sp, #12
 80155f8:	2300      	movs	r3, #0
 80155fa:	9300      	str	r3, [sp, #0]
 80155fc:	b1d0      	cbz	r0, 8015634 <rcl_get_default_domain_id+0x40>
 80155fe:	4604      	mov	r4, r0
 8015600:	4669      	mov	r1, sp
 8015602:	4815      	ldr	r0, [pc, #84]	@ (8015658 <rcl_get_default_domain_id+0x64>)
 8015604:	f7f5 faca 	bl	800ab9c <rcutils_get_env>
 8015608:	4602      	mov	r2, r0
 801560a:	b110      	cbz	r0, 8015612 <rcl_get_default_domain_id+0x1e>
 801560c:	2001      	movs	r0, #1
 801560e:	b003      	add	sp, #12
 8015610:	bd30      	pop	{r4, r5, pc}
 8015612:	9b00      	ldr	r3, [sp, #0]
 8015614:	b18b      	cbz	r3, 801563a <rcl_get_default_domain_id+0x46>
 8015616:	7818      	ldrb	r0, [r3, #0]
 8015618:	2800      	cmp	r0, #0
 801561a:	d0f8      	beq.n	801560e <rcl_get_default_domain_id+0x1a>
 801561c:	a901      	add	r1, sp, #4
 801561e:	4618      	mov	r0, r3
 8015620:	9201      	str	r2, [sp, #4]
 8015622:	f000 fdf5 	bl	8016210 <strtoul>
 8015626:	4605      	mov	r5, r0
 8015628:	b150      	cbz	r0, 8015640 <rcl_get_default_domain_id+0x4c>
 801562a:	1c43      	adds	r3, r0, #1
 801562c:	d00d      	beq.n	801564a <rcl_get_default_domain_id+0x56>
 801562e:	6025      	str	r5, [r4, #0]
 8015630:	2000      	movs	r0, #0
 8015632:	e7ec      	b.n	801560e <rcl_get_default_domain_id+0x1a>
 8015634:	200b      	movs	r0, #11
 8015636:	b003      	add	sp, #12
 8015638:	bd30      	pop	{r4, r5, pc}
 801563a:	4618      	mov	r0, r3
 801563c:	b003      	add	sp, #12
 801563e:	bd30      	pop	{r4, r5, pc}
 8015640:	9b01      	ldr	r3, [sp, #4]
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d0f2      	beq.n	801562e <rcl_get_default_domain_id+0x3a>
 8015648:	e7e0      	b.n	801560c <rcl_get_default_domain_id+0x18>
 801564a:	f001 fe2f 	bl	80172ac <__errno>
 801564e:	6803      	ldr	r3, [r0, #0]
 8015650:	2b22      	cmp	r3, #34	@ 0x22
 8015652:	d1ec      	bne.n	801562e <rcl_get_default_domain_id+0x3a>
 8015654:	e7da      	b.n	801560c <rcl_get_default_domain_id+0x18>
 8015656:	bf00      	nop
 8015658:	08019de8 	.word	0x08019de8

0801565c <rcl_expand_topic_name>:
 801565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015660:	b08b      	sub	sp, #44	@ 0x2c
 8015662:	9306      	str	r3, [sp, #24]
 8015664:	2800      	cmp	r0, #0
 8015666:	f000 80ad 	beq.w	80157c4 <rcl_expand_topic_name+0x168>
 801566a:	460e      	mov	r6, r1
 801566c:	2900      	cmp	r1, #0
 801566e:	f000 80a9 	beq.w	80157c4 <rcl_expand_topic_name+0x168>
 8015672:	4617      	mov	r7, r2
 8015674:	2a00      	cmp	r2, #0
 8015676:	f000 80a5 	beq.w	80157c4 <rcl_expand_topic_name+0x168>
 801567a:	2b00      	cmp	r3, #0
 801567c:	f000 80a2 	beq.w	80157c4 <rcl_expand_topic_name+0x168>
 8015680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015682:	2b00      	cmp	r3, #0
 8015684:	f000 809e 	beq.w	80157c4 <rcl_expand_topic_name+0x168>
 8015688:	2200      	movs	r2, #0
 801568a:	a909      	add	r1, sp, #36	@ 0x24
 801568c:	4680      	mov	r8, r0
 801568e:	f000 f949 	bl	8015924 <rcl_validate_topic_name>
 8015692:	4604      	mov	r4, r0
 8015694:	2800      	cmp	r0, #0
 8015696:	f040 8096 	bne.w	80157c6 <rcl_expand_topic_name+0x16a>
 801569a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801569c:	2b00      	cmp	r3, #0
 801569e:	f040 809a 	bne.w	80157d6 <rcl_expand_topic_name+0x17a>
 80156a2:	4602      	mov	r2, r0
 80156a4:	a909      	add	r1, sp, #36	@ 0x24
 80156a6:	4630      	mov	r0, r6
 80156a8:	f7f5 fd02 	bl	800b0b0 <rmw_validate_node_name>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	f040 808e 	bne.w	80157ce <rcl_expand_topic_name+0x172>
 80156b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80156b4:	2a00      	cmp	r2, #0
 80156b6:	f040 8093 	bne.w	80157e0 <rcl_expand_topic_name+0x184>
 80156ba:	a909      	add	r1, sp, #36	@ 0x24
 80156bc:	4638      	mov	r0, r7
 80156be:	f7f5 fcd9 	bl	800b074 <rmw_validate_namespace>
 80156c2:	2800      	cmp	r0, #0
 80156c4:	f040 8083 	bne.w	80157ce <rcl_expand_topic_name+0x172>
 80156c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80156ca:	2c00      	cmp	r4, #0
 80156cc:	f040 80ed 	bne.w	80158aa <rcl_expand_topic_name+0x24e>
 80156d0:	217b      	movs	r1, #123	@ 0x7b
 80156d2:	4640      	mov	r0, r8
 80156d4:	f001 fd04 	bl	80170e0 <strchr>
 80156d8:	f898 3000 	ldrb.w	r3, [r8]
 80156dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80156de:	4605      	mov	r5, r0
 80156e0:	f000 809e 	beq.w	8015820 <rcl_expand_topic_name+0x1c4>
 80156e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80156e6:	f040 80a2 	bne.w	801582e <rcl_expand_topic_name+0x1d2>
 80156ea:	4638      	mov	r0, r7
 80156ec:	f7ea fdf0 	bl	80002d0 <strlen>
 80156f0:	4a82      	ldr	r2, [pc, #520]	@ (80158fc <rcl_expand_topic_name+0x2a0>)
 80156f2:	4b83      	ldr	r3, [pc, #524]	@ (8015900 <rcl_expand_topic_name+0x2a4>)
 80156f4:	2801      	cmp	r0, #1
 80156f6:	bf18      	it	ne
 80156f8:	4613      	movne	r3, r2
 80156fa:	9302      	str	r3, [sp, #8]
 80156fc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80156fe:	9300      	str	r3, [sp, #0]
 8015700:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015704:	f108 0301 	add.w	r3, r8, #1
 8015708:	9305      	str	r3, [sp, #20]
 801570a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801570e:	9301      	str	r3, [sp, #4]
 8015710:	ab14      	add	r3, sp, #80	@ 0x50
 8015712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015714:	f7f5 fa8c 	bl	800ac30 <rcutils_format_string_limit>
 8015718:	4682      	mov	sl, r0
 801571a:	2800      	cmp	r0, #0
 801571c:	f000 80c7 	beq.w	80158ae <rcl_expand_topic_name+0x252>
 8015720:	2d00      	cmp	r5, #0
 8015722:	f000 80a2 	beq.w	801586a <rcl_expand_topic_name+0x20e>
 8015726:	217b      	movs	r1, #123	@ 0x7b
 8015728:	f001 fcda 	bl	80170e0 <strchr>
 801572c:	46d1      	mov	r9, sl
 801572e:	4605      	mov	r5, r0
 8015730:	9407      	str	r4, [sp, #28]
 8015732:	46d3      	mov	fp, sl
 8015734:	464c      	mov	r4, r9
 8015736:	2d00      	cmp	r5, #0
 8015738:	f000 80be 	beq.w	80158b8 <rcl_expand_topic_name+0x25c>
 801573c:	217d      	movs	r1, #125	@ 0x7d
 801573e:	4620      	mov	r0, r4
 8015740:	f001 fcce 	bl	80170e0 <strchr>
 8015744:	eba0 0905 	sub.w	r9, r0, r5
 8015748:	f109 0a01 	add.w	sl, r9, #1
 801574c:	486d      	ldr	r0, [pc, #436]	@ (8015904 <rcl_expand_topic_name+0x2a8>)
 801574e:	4652      	mov	r2, sl
 8015750:	4629      	mov	r1, r5
 8015752:	f001 fcd2 	bl	80170fa <strncmp>
 8015756:	2800      	cmp	r0, #0
 8015758:	d067      	beq.n	801582a <rcl_expand_topic_name+0x1ce>
 801575a:	486b      	ldr	r0, [pc, #428]	@ (8015908 <rcl_expand_topic_name+0x2ac>)
 801575c:	4652      	mov	r2, sl
 801575e:	4629      	mov	r1, r5
 8015760:	f001 fccb 	bl	80170fa <strncmp>
 8015764:	b130      	cbz	r0, 8015774 <rcl_expand_topic_name+0x118>
 8015766:	4869      	ldr	r0, [pc, #420]	@ (801590c <rcl_expand_topic_name+0x2b0>)
 8015768:	4652      	mov	r2, sl
 801576a:	4629      	mov	r1, r5
 801576c:	f001 fcc5 	bl	80170fa <strncmp>
 8015770:	2800      	cmp	r0, #0
 8015772:	d137      	bne.n	80157e4 <rcl_expand_topic_name+0x188>
 8015774:	46b9      	mov	r9, r7
 8015776:	ab16      	add	r3, sp, #88	@ 0x58
 8015778:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801577c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015780:	ab14      	add	r3, sp, #80	@ 0x50
 8015782:	4628      	mov	r0, r5
 8015784:	cb0c      	ldmia	r3, {r2, r3}
 8015786:	4651      	mov	r1, sl
 8015788:	f7f5 fb8e 	bl	800aea8 <rcutils_strndup>
 801578c:	4605      	mov	r5, r0
 801578e:	2800      	cmp	r0, #0
 8015790:	f000 809c 	beq.w	80158cc <rcl_expand_topic_name+0x270>
 8015794:	464a      	mov	r2, r9
 8015796:	4620      	mov	r0, r4
 8015798:	ab14      	add	r3, sp, #80	@ 0x50
 801579a:	4629      	mov	r1, r5
 801579c:	f7f5 fa82 	bl	800aca4 <rcutils_repl_str>
 80157a0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157a4:	4604      	mov	r4, r0
 80157a6:	4628      	mov	r0, r5
 80157a8:	4798      	blx	r3
 80157aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80157ac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80157ae:	4658      	mov	r0, fp
 80157b0:	4798      	blx	r3
 80157b2:	2c00      	cmp	r4, #0
 80157b4:	d07b      	beq.n	80158ae <rcl_expand_topic_name+0x252>
 80157b6:	217b      	movs	r1, #123	@ 0x7b
 80157b8:	4620      	mov	r0, r4
 80157ba:	f001 fc91 	bl	80170e0 <strchr>
 80157be:	46a3      	mov	fp, r4
 80157c0:	4605      	mov	r5, r0
 80157c2:	e7b8      	b.n	8015736 <rcl_expand_topic_name+0xda>
 80157c4:	240b      	movs	r4, #11
 80157c6:	4620      	mov	r0, r4
 80157c8:	b00b      	add	sp, #44	@ 0x2c
 80157ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ce:	f7f9 fee5 	bl	800f59c <rcl_convert_rmw_ret_to_rcl_ret>
 80157d2:	4604      	mov	r4, r0
 80157d4:	e7f7      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80157d6:	2467      	movs	r4, #103	@ 0x67
 80157d8:	4620      	mov	r0, r4
 80157da:	b00b      	add	sp, #44	@ 0x2c
 80157dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e0:	24c9      	movs	r4, #201	@ 0xc9
 80157e2:	e7f0      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80157e4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80157e8:	9806      	ldr	r0, [sp, #24]
 80157ea:	1c69      	adds	r1, r5, #1
 80157ec:	f7fc fb76 	bl	8011edc <rcutils_string_map_getn>
 80157f0:	4681      	mov	r9, r0
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d1bf      	bne.n	8015776 <rcl_expand_topic_name+0x11a>
 80157f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80157f8:	aa16      	add	r2, sp, #88	@ 0x58
 80157fa:	6018      	str	r0, [r3, #0]
 80157fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80157fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015802:	ab14      	add	r3, sp, #80	@ 0x50
 8015804:	cb0c      	ldmia	r3, {r2, r3}
 8015806:	4651      	mov	r1, sl
 8015808:	4628      	mov	r0, r5
 801580a:	f7f5 fb4d 	bl	800aea8 <rcutils_strndup>
 801580e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015810:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015812:	4798      	blx	r3
 8015814:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015816:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015818:	4658      	mov	r0, fp
 801581a:	2469      	movs	r4, #105	@ 0x69
 801581c:	4798      	blx	r3
 801581e:	e7d2      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 8015820:	2800      	cmp	r0, #0
 8015822:	d05b      	beq.n	80158dc <rcl_expand_topic_name+0x280>
 8015824:	46c1      	mov	r9, r8
 8015826:	46a2      	mov	sl, r4
 8015828:	e782      	b.n	8015730 <rcl_expand_topic_name+0xd4>
 801582a:	46b1      	mov	r9, r6
 801582c:	e7a3      	b.n	8015776 <rcl_expand_topic_name+0x11a>
 801582e:	2800      	cmp	r0, #0
 8015830:	d1f8      	bne.n	8015824 <rcl_expand_topic_name+0x1c8>
 8015832:	4638      	mov	r0, r7
 8015834:	f7ea fd4c 	bl	80002d0 <strlen>
 8015838:	4a35      	ldr	r2, [pc, #212]	@ (8015910 <rcl_expand_topic_name+0x2b4>)
 801583a:	4b36      	ldr	r3, [pc, #216]	@ (8015914 <rcl_expand_topic_name+0x2b8>)
 801583c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015840:	2801      	cmp	r0, #1
 8015842:	bf18      	it	ne
 8015844:	4613      	movne	r3, r2
 8015846:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801584a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801584e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015850:	9703      	str	r7, [sp, #12]
 8015852:	9200      	str	r2, [sp, #0]
 8015854:	ab14      	add	r3, sp, #80	@ 0x50
 8015856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015858:	f7f5 f9ea 	bl	800ac30 <rcutils_format_string_limit>
 801585c:	4682      	mov	sl, r0
 801585e:	4653      	mov	r3, sl
 8015860:	b32b      	cbz	r3, 80158ae <rcl_expand_topic_name+0x252>
 8015862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015864:	f8c3 a000 	str.w	sl, [r3]
 8015868:	e7ad      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 801586a:	f89a 3000 	ldrb.w	r3, [sl]
 801586e:	2b2f      	cmp	r3, #47	@ 0x2f
 8015870:	d0f7      	beq.n	8015862 <rcl_expand_topic_name+0x206>
 8015872:	4638      	mov	r0, r7
 8015874:	f7ea fd2c 	bl	80002d0 <strlen>
 8015878:	4a25      	ldr	r2, [pc, #148]	@ (8015910 <rcl_expand_topic_name+0x2b4>)
 801587a:	4b26      	ldr	r3, [pc, #152]	@ (8015914 <rcl_expand_topic_name+0x2b8>)
 801587c:	f8cd a010 	str.w	sl, [sp, #16]
 8015880:	2801      	cmp	r0, #1
 8015882:	bf18      	it	ne
 8015884:	4613      	movne	r3, r2
 8015886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801588a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801588e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015890:	9703      	str	r7, [sp, #12]
 8015892:	9200      	str	r2, [sp, #0]
 8015894:	ab14      	add	r3, sp, #80	@ 0x50
 8015896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015898:	f7f5 f9ca 	bl	800ac30 <rcutils_format_string_limit>
 801589c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801589e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80158a0:	4605      	mov	r5, r0
 80158a2:	4650      	mov	r0, sl
 80158a4:	4798      	blx	r3
 80158a6:	46aa      	mov	sl, r5
 80158a8:	e7d9      	b.n	801585e <rcl_expand_topic_name+0x202>
 80158aa:	24ca      	movs	r4, #202	@ 0xca
 80158ac:	e78b      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80158ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80158b0:	2300      	movs	r3, #0
 80158b2:	6013      	str	r3, [r2, #0]
 80158b4:	240a      	movs	r4, #10
 80158b6:	e786      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80158b8:	465b      	mov	r3, fp
 80158ba:	9c07      	ldr	r4, [sp, #28]
 80158bc:	46da      	mov	sl, fp
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d1d3      	bne.n	801586a <rcl_expand_topic_name+0x20e>
 80158c2:	f898 3000 	ldrb.w	r3, [r8]
 80158c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80158c8:	d0cb      	beq.n	8015862 <rcl_expand_topic_name+0x206>
 80158ca:	e7b2      	b.n	8015832 <rcl_expand_topic_name+0x1d6>
 80158cc:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80158d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80158d2:	6015      	str	r5, [r2, #0]
 80158d4:	4658      	mov	r0, fp
 80158d6:	4798      	blx	r3
 80158d8:	240a      	movs	r4, #10
 80158da:	e774      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80158dc:	ab17      	add	r3, sp, #92	@ 0x5c
 80158de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80158e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80158e6:	ab14      	add	r3, sp, #80	@ 0x50
 80158e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80158ea:	4640      	mov	r0, r8
 80158ec:	f7f5 faba 	bl	800ae64 <rcutils_strdup>
 80158f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80158f2:	2800      	cmp	r0, #0
 80158f4:	6018      	str	r0, [r3, #0]
 80158f6:	bf08      	it	eq
 80158f8:	240a      	moveq	r4, #10
 80158fa:	e764      	b.n	80157c6 <rcl_expand_topic_name+0x16a>
 80158fc:	08019df8 	.word	0x08019df8
 8015900:	08019868 	.word	0x08019868
 8015904:	08019e00 	.word	0x08019e00
 8015908:	08019e08 	.word	0x08019e08
 801590c:	08019e10 	.word	0x08019e10
 8015910:	080192ec 	.word	0x080192ec
 8015914:	080192e4 	.word	0x080192e4

08015918 <rcl_get_default_topic_name_substitutions>:
 8015918:	2800      	cmp	r0, #0
 801591a:	bf0c      	ite	eq
 801591c:	200b      	moveq	r0, #11
 801591e:	2000      	movne	r0, #0
 8015920:	4770      	bx	lr
 8015922:	bf00      	nop

08015924 <rcl_validate_topic_name>:
 8015924:	2800      	cmp	r0, #0
 8015926:	d07a      	beq.n	8015a1e <rcl_validate_topic_name+0xfa>
 8015928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801592c:	460e      	mov	r6, r1
 801592e:	2900      	cmp	r1, #0
 8015930:	d07c      	beq.n	8015a2c <rcl_validate_topic_name+0x108>
 8015932:	4617      	mov	r7, r2
 8015934:	4605      	mov	r5, r0
 8015936:	f7ea fccb 	bl	80002d0 <strlen>
 801593a:	b1b0      	cbz	r0, 801596a <rcl_validate_topic_name+0x46>
 801593c:	f895 9000 	ldrb.w	r9, [r5]
 8015940:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015ac4 <rcl_validate_topic_name+0x1a0>
 8015944:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015948:	f013 0304 	ands.w	r3, r3, #4
 801594c:	d169      	bne.n	8015a22 <rcl_validate_topic_name+0xfe>
 801594e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015952:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015956:	2a2f      	cmp	r2, #47	@ 0x2f
 8015958:	d10e      	bne.n	8015978 <rcl_validate_topic_name+0x54>
 801595a:	2202      	movs	r2, #2
 801595c:	6032      	str	r2, [r6, #0]
 801595e:	b36f      	cbz	r7, 80159bc <rcl_validate_topic_name+0x98>
 8015960:	f8c7 8000 	str.w	r8, [r7]
 8015964:	4618      	mov	r0, r3
 8015966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801596a:	2301      	movs	r3, #1
 801596c:	6033      	str	r3, [r6, #0]
 801596e:	b32f      	cbz	r7, 80159bc <rcl_validate_topic_name+0x98>
 8015970:	2000      	movs	r0, #0
 8015972:	6038      	str	r0, [r7, #0]
 8015974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015978:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801597c:	461c      	mov	r4, r3
 801597e:	4619      	mov	r1, r3
 8015980:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015984:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015988:	f1be 0f09 	cmp.w	lr, #9
 801598c:	d919      	bls.n	80159c2 <rcl_validate_topic_name+0x9e>
 801598e:	f022 0e20 	bic.w	lr, r2, #32
 8015992:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015996:	f1be 0f19 	cmp.w	lr, #25
 801599a:	d912      	bls.n	80159c2 <rcl_validate_topic_name+0x9e>
 801599c:	2a5f      	cmp	r2, #95	@ 0x5f
 801599e:	d019      	beq.n	80159d4 <rcl_validate_topic_name+0xb0>
 80159a0:	2a2f      	cmp	r2, #47	@ 0x2f
 80159a2:	d051      	beq.n	8015a48 <rcl_validate_topic_name+0x124>
 80159a4:	2a7e      	cmp	r2, #126	@ 0x7e
 80159a6:	d048      	beq.n	8015a3a <rcl_validate_topic_name+0x116>
 80159a8:	2a7b      	cmp	r2, #123	@ 0x7b
 80159aa:	d054      	beq.n	8015a56 <rcl_validate_topic_name+0x132>
 80159ac:	2a7d      	cmp	r2, #125	@ 0x7d
 80159ae:	d161      	bne.n	8015a74 <rcl_validate_topic_name+0x150>
 80159b0:	2c00      	cmp	r4, #0
 80159b2:	d155      	bne.n	8015a60 <rcl_validate_topic_name+0x13c>
 80159b4:	2305      	movs	r3, #5
 80159b6:	6033      	str	r3, [r6, #0]
 80159b8:	b107      	cbz	r7, 80159bc <rcl_validate_topic_name+0x98>
 80159ba:	6039      	str	r1, [r7, #0]
 80159bc:	2000      	movs	r0, #0
 80159be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159c2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80159c6:	0752      	lsls	r2, r2, #29
 80159c8:	d504      	bpl.n	80159d4 <rcl_validate_topic_name+0xb0>
 80159ca:	b11c      	cbz	r4, 80159d4 <rcl_validate_topic_name+0xb0>
 80159cc:	b111      	cbz	r1, 80159d4 <rcl_validate_topic_name+0xb0>
 80159ce:	1e4a      	subs	r2, r1, #1
 80159d0:	429a      	cmp	r2, r3
 80159d2:	d02d      	beq.n	8015a30 <rcl_validate_topic_name+0x10c>
 80159d4:	3101      	adds	r1, #1
 80159d6:	4288      	cmp	r0, r1
 80159d8:	d1d2      	bne.n	8015980 <rcl_validate_topic_name+0x5c>
 80159da:	2c00      	cmp	r4, #0
 80159dc:	d145      	bne.n	8015a6a <rcl_validate_topic_name+0x146>
 80159de:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80159e2:	d04f      	beq.n	8015a84 <rcl_validate_topic_name+0x160>
 80159e4:	4620      	mov	r0, r4
 80159e6:	2301      	movs	r3, #1
 80159e8:	e006      	b.n	80159f8 <rcl_validate_topic_name+0xd4>
 80159ea:	428b      	cmp	r3, r1
 80159ec:	f105 0501 	add.w	r5, r5, #1
 80159f0:	f103 0201 	add.w	r2, r3, #1
 80159f4:	d236      	bcs.n	8015a64 <rcl_validate_topic_name+0x140>
 80159f6:	4613      	mov	r3, r2
 80159f8:	4580      	cmp	r8, r0
 80159fa:	f100 0001 	add.w	r0, r0, #1
 80159fe:	d0f4      	beq.n	80159ea <rcl_validate_topic_name+0xc6>
 8015a00:	782a      	ldrb	r2, [r5, #0]
 8015a02:	2a2f      	cmp	r2, #47	@ 0x2f
 8015a04:	d1f1      	bne.n	80159ea <rcl_validate_topic_name+0xc6>
 8015a06:	786a      	ldrb	r2, [r5, #1]
 8015a08:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015a0c:	0754      	lsls	r4, r2, #29
 8015a0e:	d5ec      	bpl.n	80159ea <rcl_validate_topic_name+0xc6>
 8015a10:	2204      	movs	r2, #4
 8015a12:	6032      	str	r2, [r6, #0]
 8015a14:	2f00      	cmp	r7, #0
 8015a16:	d0d1      	beq.n	80159bc <rcl_validate_topic_name+0x98>
 8015a18:	603b      	str	r3, [r7, #0]
 8015a1a:	2000      	movs	r0, #0
 8015a1c:	e7aa      	b.n	8015974 <rcl_validate_topic_name+0x50>
 8015a1e:	200b      	movs	r0, #11
 8015a20:	4770      	bx	lr
 8015a22:	2304      	movs	r3, #4
 8015a24:	6033      	str	r3, [r6, #0]
 8015a26:	2f00      	cmp	r7, #0
 8015a28:	d1a2      	bne.n	8015970 <rcl_validate_topic_name+0x4c>
 8015a2a:	e7c7      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a2c:	200b      	movs	r0, #11
 8015a2e:	e7a1      	b.n	8015974 <rcl_validate_topic_name+0x50>
 8015a30:	2309      	movs	r3, #9
 8015a32:	6033      	str	r3, [r6, #0]
 8015a34:	2f00      	cmp	r7, #0
 8015a36:	d1c0      	bne.n	80159ba <rcl_validate_topic_name+0x96>
 8015a38:	e7c0      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a3a:	2900      	cmp	r1, #0
 8015a3c:	d0ca      	beq.n	80159d4 <rcl_validate_topic_name+0xb0>
 8015a3e:	2306      	movs	r3, #6
 8015a40:	6033      	str	r3, [r6, #0]
 8015a42:	2f00      	cmp	r7, #0
 8015a44:	d1b9      	bne.n	80159ba <rcl_validate_topic_name+0x96>
 8015a46:	e7b9      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a48:	2c00      	cmp	r4, #0
 8015a4a:	d0c3      	beq.n	80159d4 <rcl_validate_topic_name+0xb0>
 8015a4c:	2308      	movs	r3, #8
 8015a4e:	6033      	str	r3, [r6, #0]
 8015a50:	2f00      	cmp	r7, #0
 8015a52:	d1b2      	bne.n	80159ba <rcl_validate_topic_name+0x96>
 8015a54:	e7b2      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a56:	2c00      	cmp	r4, #0
 8015a58:	d1f8      	bne.n	8015a4c <rcl_validate_topic_name+0x128>
 8015a5a:	460b      	mov	r3, r1
 8015a5c:	2401      	movs	r4, #1
 8015a5e:	e7b9      	b.n	80159d4 <rcl_validate_topic_name+0xb0>
 8015a60:	2400      	movs	r4, #0
 8015a62:	e7b7      	b.n	80159d4 <rcl_validate_topic_name+0xb0>
 8015a64:	2000      	movs	r0, #0
 8015a66:	6030      	str	r0, [r6, #0]
 8015a68:	e784      	b.n	8015974 <rcl_validate_topic_name+0x50>
 8015a6a:	2205      	movs	r2, #5
 8015a6c:	6032      	str	r2, [r6, #0]
 8015a6e:	2f00      	cmp	r7, #0
 8015a70:	d1d2      	bne.n	8015a18 <rcl_validate_topic_name+0xf4>
 8015a72:	e7a3      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a74:	2c00      	cmp	r4, #0
 8015a76:	bf14      	ite	ne
 8015a78:	2308      	movne	r3, #8
 8015a7a:	2303      	moveq	r3, #3
 8015a7c:	6033      	str	r3, [r6, #0]
 8015a7e:	2f00      	cmp	r7, #0
 8015a80:	d19b      	bne.n	80159ba <rcl_validate_topic_name+0x96>
 8015a82:	e79b      	b.n	80159bc <rcl_validate_topic_name+0x98>
 8015a84:	2301      	movs	r3, #1
 8015a86:	e00a      	b.n	8015a9e <rcl_validate_topic_name+0x17a>
 8015a88:	2c01      	cmp	r4, #1
 8015a8a:	d013      	beq.n	8015ab4 <rcl_validate_topic_name+0x190>
 8015a8c:	4299      	cmp	r1, r3
 8015a8e:	f104 0401 	add.w	r4, r4, #1
 8015a92:	f105 0501 	add.w	r5, r5, #1
 8015a96:	f103 0201 	add.w	r2, r3, #1
 8015a9a:	d9e3      	bls.n	8015a64 <rcl_validate_topic_name+0x140>
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	45a0      	cmp	r8, r4
 8015aa0:	d0f4      	beq.n	8015a8c <rcl_validate_topic_name+0x168>
 8015aa2:	782a      	ldrb	r2, [r5, #0]
 8015aa4:	2a2f      	cmp	r2, #47	@ 0x2f
 8015aa6:	d1ef      	bne.n	8015a88 <rcl_validate_topic_name+0x164>
 8015aa8:	786a      	ldrb	r2, [r5, #1]
 8015aaa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015aae:	0752      	lsls	r2, r2, #29
 8015ab0:	d5ec      	bpl.n	8015a8c <rcl_validate_topic_name+0x168>
 8015ab2:	e7ad      	b.n	8015a10 <rcl_validate_topic_name+0xec>
 8015ab4:	2307      	movs	r3, #7
 8015ab6:	6033      	str	r3, [r6, #0]
 8015ab8:	2f00      	cmp	r7, #0
 8015aba:	f43f af7f 	beq.w	80159bc <rcl_validate_topic_name+0x98>
 8015abe:	603c      	str	r4, [r7, #0]
 8015ac0:	2000      	movs	r0, #0
 8015ac2:	e757      	b.n	8015974 <rcl_validate_topic_name+0x50>
 8015ac4:	08019fa3 	.word	0x08019fa3

08015ac8 <on_status>:
 8015ac8:	b082      	sub	sp, #8
 8015aca:	b002      	add	sp, #8
 8015acc:	4770      	bx	lr
 8015ace:	bf00      	nop

08015ad0 <on_topic>:
 8015ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad4:	4a22      	ldr	r2, [pc, #136]	@ (8015b60 <on_topic+0x90>)
 8015ad6:	b094      	sub	sp, #80	@ 0x50
 8015ad8:	6812      	ldr	r2, [r2, #0]
 8015ada:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015adc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015ae0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015ae4:	b3c2      	cbz	r2, 8015b58 <on_topic+0x88>
 8015ae6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015aea:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015aee:	e001      	b.n	8015af4 <on_topic+0x24>
 8015af0:	6852      	ldr	r2, [r2, #4]
 8015af2:	b38a      	cbz	r2, 8015b58 <on_topic+0x88>
 8015af4:	6894      	ldr	r4, [r2, #8]
 8015af6:	8aa3      	ldrh	r3, [r4, #20]
 8015af8:	428b      	cmp	r3, r1
 8015afa:	d1f9      	bne.n	8015af0 <on_topic+0x20>
 8015afc:	7da3      	ldrb	r3, [r4, #22]
 8015afe:	4283      	cmp	r3, r0
 8015b00:	d1f6      	bne.n	8015af0 <on_topic+0x20>
 8015b02:	2248      	movs	r2, #72	@ 0x48
 8015b04:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015b08:	4668      	mov	r0, sp
 8015b0a:	f001 fc04 	bl	8017316 <memcpy>
 8015b0e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015b12:	cb0c      	ldmia	r3, {r2, r3}
 8015b14:	4620      	mov	r0, r4
 8015b16:	f7f6 f9c3 	bl	800bea0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015b1a:	4607      	mov	r7, r0
 8015b1c:	b1e0      	cbz	r0, 8015b58 <on_topic+0x88>
 8015b1e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015b22:	4632      	mov	r2, r6
 8015b24:	4628      	mov	r0, r5
 8015b26:	f108 0110 	add.w	r1, r8, #16
 8015b2a:	f7fd faa5 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 8015b2e:	b930      	cbnz	r0, 8015b3e <on_topic+0x6e>
 8015b30:	480c      	ldr	r0, [pc, #48]	@ (8015b64 <on_topic+0x94>)
 8015b32:	4639      	mov	r1, r7
 8015b34:	b014      	add	sp, #80	@ 0x50
 8015b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b3a:	f7fc bb2b 	b.w	8012194 <put_memory>
 8015b3e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015b42:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015b46:	f7fd f97d 	bl	8012e44 <rmw_uros_epoch_nanos>
 8015b4a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015b4e:	2305      	movs	r3, #5
 8015b50:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015b54:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015b58:	b014      	add	sp, #80	@ 0x50
 8015b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b5e:	bf00      	nop
 8015b60:	200179ac 	.word	0x200179ac
 8015b64:	2001799c 	.word	0x2001799c

08015b68 <on_request>:
 8015b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b6c:	4823      	ldr	r0, [pc, #140]	@ (8015bfc <on_request+0x94>)
 8015b6e:	b094      	sub	sp, #80	@ 0x50
 8015b70:	6800      	ldr	r0, [r0, #0]
 8015b72:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015b74:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015b78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	d03b      	beq.n	8015bf6 <on_request+0x8e>
 8015b7e:	461d      	mov	r5, r3
 8015b80:	e001      	b.n	8015b86 <on_request+0x1e>
 8015b82:	6840      	ldr	r0, [r0, #4]
 8015b84:	b3b8      	cbz	r0, 8015bf6 <on_request+0x8e>
 8015b86:	6884      	ldr	r4, [r0, #8]
 8015b88:	8b21      	ldrh	r1, [r4, #24]
 8015b8a:	4291      	cmp	r1, r2
 8015b8c:	d1f9      	bne.n	8015b82 <on_request+0x1a>
 8015b8e:	2248      	movs	r2, #72	@ 0x48
 8015b90:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015b94:	4668      	mov	r0, sp
 8015b96:	f001 fbbe 	bl	8017316 <memcpy>
 8015b9a:	f104 0320 	add.w	r3, r4, #32
 8015b9e:	cb0c      	ldmia	r3, {r2, r3}
 8015ba0:	4620      	mov	r0, r4
 8015ba2:	f7f6 f97d 	bl	800bea0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015ba6:	4680      	mov	r8, r0
 8015ba8:	b328      	cbz	r0, 8015bf6 <on_request+0x8e>
 8015baa:	4638      	mov	r0, r7
 8015bac:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015bb0:	4632      	mov	r2, r6
 8015bb2:	f107 0110 	add.w	r1, r7, #16
 8015bb6:	f7fd fa5f 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 8015bba:	b930      	cbnz	r0, 8015bca <on_request+0x62>
 8015bbc:	4810      	ldr	r0, [pc, #64]	@ (8015c00 <on_request+0x98>)
 8015bbe:	4641      	mov	r1, r8
 8015bc0:	b014      	add	sp, #80	@ 0x50
 8015bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc6:	f7fc bae5 	b.w	8012194 <put_memory>
 8015bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015bcc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015bd0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015bd4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015bd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015bdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015be0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015be4:	f7fd f92e 	bl	8012e44 <rmw_uros_epoch_nanos>
 8015be8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015bec:	2303      	movs	r3, #3
 8015bee:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015bf2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015bf6:	b014      	add	sp, #80	@ 0x50
 8015bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bfc:	2001797c 	.word	0x2001797c
 8015c00:	2001799c 	.word	0x2001799c

08015c04 <on_reply>:
 8015c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c08:	4821      	ldr	r0, [pc, #132]	@ (8015c90 <on_reply+0x8c>)
 8015c0a:	b094      	sub	sp, #80	@ 0x50
 8015c0c:	6800      	ldr	r0, [r0, #0]
 8015c0e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015c10:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015c14:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015c16:	b3b8      	cbz	r0, 8015c88 <on_reply+0x84>
 8015c18:	461d      	mov	r5, r3
 8015c1a:	e001      	b.n	8015c20 <on_reply+0x1c>
 8015c1c:	6840      	ldr	r0, [r0, #4]
 8015c1e:	b398      	cbz	r0, 8015c88 <on_reply+0x84>
 8015c20:	6884      	ldr	r4, [r0, #8]
 8015c22:	8b21      	ldrh	r1, [r4, #24]
 8015c24:	4291      	cmp	r1, r2
 8015c26:	d1f9      	bne.n	8015c1c <on_reply+0x18>
 8015c28:	2248      	movs	r2, #72	@ 0x48
 8015c2a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015c2e:	4668      	mov	r0, sp
 8015c30:	f001 fb71 	bl	8017316 <memcpy>
 8015c34:	f104 0320 	add.w	r3, r4, #32
 8015c38:	cb0c      	ldmia	r3, {r2, r3}
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	f7f6 f930 	bl	800bea0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015c40:	4680      	mov	r8, r0
 8015c42:	b308      	cbz	r0, 8015c88 <on_reply+0x84>
 8015c44:	4638      	mov	r0, r7
 8015c46:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015c4a:	4632      	mov	r2, r6
 8015c4c:	f107 0110 	add.w	r1, r7, #16
 8015c50:	f7fd fa12 	bl	8013078 <ucdr_deserialize_array_uint8_t>
 8015c54:	b930      	cbnz	r0, 8015c64 <on_reply+0x60>
 8015c56:	480f      	ldr	r0, [pc, #60]	@ (8015c94 <on_reply+0x90>)
 8015c58:	4641      	mov	r1, r8
 8015c5a:	b014      	add	sp, #80	@ 0x50
 8015c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c60:	f7fc ba98 	b.w	8012194 <put_memory>
 8015c64:	2200      	movs	r2, #0
 8015c66:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015c6a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015c6e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015c72:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015c76:	f7fd f8e5 	bl	8012e44 <rmw_uros_epoch_nanos>
 8015c7a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015c7e:	2304      	movs	r3, #4
 8015c80:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015c84:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015c88:	b014      	add	sp, #80	@ 0x50
 8015c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c8e:	bf00      	nop
 8015c90:	2001308c 	.word	0x2001308c
 8015c94:	2001799c 	.word	0x2001799c

08015c98 <rosidl_runtime_c__String__init>:
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	b086      	sub	sp, #24
 8015c9e:	b170      	cbz	r0, 8015cbe <rosidl_runtime_c__String__init+0x26>
 8015ca0:	a801      	add	r0, sp, #4
 8015ca2:	f7f4 ff5f 	bl	800ab64 <rcutils_get_default_allocator>
 8015ca6:	9b01      	ldr	r3, [sp, #4]
 8015ca8:	9905      	ldr	r1, [sp, #20]
 8015caa:	2001      	movs	r0, #1
 8015cac:	4798      	blx	r3
 8015cae:	6020      	str	r0, [r4, #0]
 8015cb0:	b128      	cbz	r0, 8015cbe <rosidl_runtime_c__String__init+0x26>
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	7001      	strb	r1, [r0, #0]
 8015cb8:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	b006      	add	sp, #24
 8015cc0:	bd10      	pop	{r4, pc}
 8015cc2:	bf00      	nop

08015cc4 <rosidl_runtime_c__String__fini>:
 8015cc4:	b320      	cbz	r0, 8015d10 <rosidl_runtime_c__String__fini+0x4c>
 8015cc6:	b510      	push	{r4, lr}
 8015cc8:	6803      	ldr	r3, [r0, #0]
 8015cca:	b086      	sub	sp, #24
 8015ccc:	4604      	mov	r4, r0
 8015cce:	b173      	cbz	r3, 8015cee <rosidl_runtime_c__String__fini+0x2a>
 8015cd0:	6883      	ldr	r3, [r0, #8]
 8015cd2:	b1f3      	cbz	r3, 8015d12 <rosidl_runtime_c__String__fini+0x4e>
 8015cd4:	a801      	add	r0, sp, #4
 8015cd6:	f7f4 ff45 	bl	800ab64 <rcutils_get_default_allocator>
 8015cda:	9b02      	ldr	r3, [sp, #8]
 8015cdc:	9905      	ldr	r1, [sp, #20]
 8015cde:	6820      	ldr	r0, [r4, #0]
 8015ce0:	4798      	blx	r3
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	e9c4 3300 	strd	r3, r3, [r4]
 8015ce8:	60a3      	str	r3, [r4, #8]
 8015cea:	b006      	add	sp, #24
 8015cec:	bd10      	pop	{r4, pc}
 8015cee:	6843      	ldr	r3, [r0, #4]
 8015cf0:	b9db      	cbnz	r3, 8015d2a <rosidl_runtime_c__String__fini+0x66>
 8015cf2:	6883      	ldr	r3, [r0, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d0f8      	beq.n	8015cea <rosidl_runtime_c__String__fini+0x26>
 8015cf8:	4b12      	ldr	r3, [pc, #72]	@ (8015d44 <rosidl_runtime_c__String__fini+0x80>)
 8015cfa:	4813      	ldr	r0, [pc, #76]	@ (8015d48 <rosidl_runtime_c__String__fini+0x84>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2251      	movs	r2, #81	@ 0x51
 8015d00:	68db      	ldr	r3, [r3, #12]
 8015d02:	2101      	movs	r1, #1
 8015d04:	f001 f836 	bl	8016d74 <fwrite>
 8015d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d0c:	f000 f83e 	bl	8015d8c <exit>
 8015d10:	4770      	bx	lr
 8015d12:	4b0c      	ldr	r3, [pc, #48]	@ (8015d44 <rosidl_runtime_c__String__fini+0x80>)
 8015d14:	480d      	ldr	r0, [pc, #52]	@ (8015d4c <rosidl_runtime_c__String__fini+0x88>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	224c      	movs	r2, #76	@ 0x4c
 8015d1a:	68db      	ldr	r3, [r3, #12]
 8015d1c:	2101      	movs	r1, #1
 8015d1e:	f001 f829 	bl	8016d74 <fwrite>
 8015d22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d26:	f000 f831 	bl	8015d8c <exit>
 8015d2a:	4b06      	ldr	r3, [pc, #24]	@ (8015d44 <rosidl_runtime_c__String__fini+0x80>)
 8015d2c:	4808      	ldr	r0, [pc, #32]	@ (8015d50 <rosidl_runtime_c__String__fini+0x8c>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	224e      	movs	r2, #78	@ 0x4e
 8015d32:	68db      	ldr	r3, [r3, #12]
 8015d34:	2101      	movs	r1, #1
 8015d36:	f001 f81d 	bl	8016d74 <fwrite>
 8015d3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015d3e:	f000 f825 	bl	8015d8c <exit>
 8015d42:	bf00      	nop
 8015d44:	200000c8 	.word	0x200000c8
 8015d48:	08019ebc 	.word	0x08019ebc
 8015d4c:	08019e1c 	.word	0x08019e1c
 8015d50:	08019e6c 	.word	0x08019e6c

08015d54 <calloc>:
 8015d54:	4b02      	ldr	r3, [pc, #8]	@ (8015d60 <calloc+0xc>)
 8015d56:	460a      	mov	r2, r1
 8015d58:	4601      	mov	r1, r0
 8015d5a:	6818      	ldr	r0, [r3, #0]
 8015d5c:	f000 b802 	b.w	8015d64 <_calloc_r>
 8015d60:	200000c8 	.word	0x200000c8

08015d64 <_calloc_r>:
 8015d64:	b570      	push	{r4, r5, r6, lr}
 8015d66:	fba1 5402 	umull	r5, r4, r1, r2
 8015d6a:	b93c      	cbnz	r4, 8015d7c <_calloc_r+0x18>
 8015d6c:	4629      	mov	r1, r5
 8015d6e:	f000 f8b3 	bl	8015ed8 <_malloc_r>
 8015d72:	4606      	mov	r6, r0
 8015d74:	b928      	cbnz	r0, 8015d82 <_calloc_r+0x1e>
 8015d76:	2600      	movs	r6, #0
 8015d78:	4630      	mov	r0, r6
 8015d7a:	bd70      	pop	{r4, r5, r6, pc}
 8015d7c:	220c      	movs	r2, #12
 8015d7e:	6002      	str	r2, [r0, #0]
 8015d80:	e7f9      	b.n	8015d76 <_calloc_r+0x12>
 8015d82:	462a      	mov	r2, r5
 8015d84:	4621      	mov	r1, r4
 8015d86:	f001 f9a3 	bl	80170d0 <memset>
 8015d8a:	e7f5      	b.n	8015d78 <_calloc_r+0x14>

08015d8c <exit>:
 8015d8c:	b508      	push	{r3, lr}
 8015d8e:	4b06      	ldr	r3, [pc, #24]	@ (8015da8 <exit+0x1c>)
 8015d90:	4604      	mov	r4, r0
 8015d92:	b113      	cbz	r3, 8015d9a <exit+0xe>
 8015d94:	2100      	movs	r1, #0
 8015d96:	f3af 8000 	nop.w
 8015d9a:	4b04      	ldr	r3, [pc, #16]	@ (8015dac <exit+0x20>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	b103      	cbz	r3, 8015da2 <exit+0x16>
 8015da0:	4798      	blx	r3
 8015da2:	4620      	mov	r0, r4
 8015da4:	f7ec fcea 	bl	800277c <_exit>
 8015da8:	00000000 	.word	0x00000000
 8015dac:	20017bf4 	.word	0x20017bf4

08015db0 <getenv>:
 8015db0:	b507      	push	{r0, r1, r2, lr}
 8015db2:	4b04      	ldr	r3, [pc, #16]	@ (8015dc4 <getenv+0x14>)
 8015db4:	4601      	mov	r1, r0
 8015db6:	aa01      	add	r2, sp, #4
 8015db8:	6818      	ldr	r0, [r3, #0]
 8015dba:	f000 f805 	bl	8015dc8 <_findenv_r>
 8015dbe:	b003      	add	sp, #12
 8015dc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dc4:	200000c8 	.word	0x200000c8

08015dc8 <_findenv_r>:
 8015dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dcc:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015e3c <_findenv_r+0x74>
 8015dd0:	4606      	mov	r6, r0
 8015dd2:	4689      	mov	r9, r1
 8015dd4:	4617      	mov	r7, r2
 8015dd6:	f002 f917 	bl	8018008 <__env_lock>
 8015dda:	f8da 4000 	ldr.w	r4, [sl]
 8015dde:	b134      	cbz	r4, 8015dee <_findenv_r+0x26>
 8015de0:	464b      	mov	r3, r9
 8015de2:	4698      	mov	r8, r3
 8015de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015de8:	b13a      	cbz	r2, 8015dfa <_findenv_r+0x32>
 8015dea:	2a3d      	cmp	r2, #61	@ 0x3d
 8015dec:	d1f9      	bne.n	8015de2 <_findenv_r+0x1a>
 8015dee:	4630      	mov	r0, r6
 8015df0:	f002 f910 	bl	8018014 <__env_unlock>
 8015df4:	2000      	movs	r0, #0
 8015df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfa:	eba8 0809 	sub.w	r8, r8, r9
 8015dfe:	46a3      	mov	fp, r4
 8015e00:	f854 0b04 	ldr.w	r0, [r4], #4
 8015e04:	2800      	cmp	r0, #0
 8015e06:	d0f2      	beq.n	8015dee <_findenv_r+0x26>
 8015e08:	4642      	mov	r2, r8
 8015e0a:	4649      	mov	r1, r9
 8015e0c:	f001 f975 	bl	80170fa <strncmp>
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d1f4      	bne.n	8015dfe <_findenv_r+0x36>
 8015e14:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015e18:	eb03 0508 	add.w	r5, r3, r8
 8015e1c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015e20:	2b3d      	cmp	r3, #61	@ 0x3d
 8015e22:	d1ec      	bne.n	8015dfe <_findenv_r+0x36>
 8015e24:	f8da 3000 	ldr.w	r3, [sl]
 8015e28:	ebab 0303 	sub.w	r3, fp, r3
 8015e2c:	109b      	asrs	r3, r3, #2
 8015e2e:	4630      	mov	r0, r6
 8015e30:	603b      	str	r3, [r7, #0]
 8015e32:	f002 f8ef 	bl	8018014 <__env_unlock>
 8015e36:	1c68      	adds	r0, r5, #1
 8015e38:	e7dd      	b.n	8015df6 <_findenv_r+0x2e>
 8015e3a:	bf00      	nop
 8015e3c:	20000000 	.word	0x20000000

08015e40 <__itoa>:
 8015e40:	1e93      	subs	r3, r2, #2
 8015e42:	2b22      	cmp	r3, #34	@ 0x22
 8015e44:	b510      	push	{r4, lr}
 8015e46:	460c      	mov	r4, r1
 8015e48:	d904      	bls.n	8015e54 <__itoa+0x14>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	700b      	strb	r3, [r1, #0]
 8015e4e:	461c      	mov	r4, r3
 8015e50:	4620      	mov	r0, r4
 8015e52:	bd10      	pop	{r4, pc}
 8015e54:	2a0a      	cmp	r2, #10
 8015e56:	d109      	bne.n	8015e6c <__itoa+0x2c>
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	da07      	bge.n	8015e6c <__itoa+0x2c>
 8015e5c:	232d      	movs	r3, #45	@ 0x2d
 8015e5e:	700b      	strb	r3, [r1, #0]
 8015e60:	4240      	negs	r0, r0
 8015e62:	2101      	movs	r1, #1
 8015e64:	4421      	add	r1, r4
 8015e66:	f000 f9dd 	bl	8016224 <__utoa>
 8015e6a:	e7f1      	b.n	8015e50 <__itoa+0x10>
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	e7f9      	b.n	8015e64 <__itoa+0x24>

08015e70 <itoa>:
 8015e70:	f7ff bfe6 	b.w	8015e40 <__itoa>

08015e74 <malloc>:
 8015e74:	4b02      	ldr	r3, [pc, #8]	@ (8015e80 <malloc+0xc>)
 8015e76:	4601      	mov	r1, r0
 8015e78:	6818      	ldr	r0, [r3, #0]
 8015e7a:	f000 b82d 	b.w	8015ed8 <_malloc_r>
 8015e7e:	bf00      	nop
 8015e80:	200000c8 	.word	0x200000c8

08015e84 <free>:
 8015e84:	4b02      	ldr	r3, [pc, #8]	@ (8015e90 <free+0xc>)
 8015e86:	4601      	mov	r1, r0
 8015e88:	6818      	ldr	r0, [r3, #0]
 8015e8a:	f002 b8c9 	b.w	8018020 <_free_r>
 8015e8e:	bf00      	nop
 8015e90:	200000c8 	.word	0x200000c8

08015e94 <sbrk_aligned>:
 8015e94:	b570      	push	{r4, r5, r6, lr}
 8015e96:	4e0f      	ldr	r6, [pc, #60]	@ (8015ed4 <sbrk_aligned+0x40>)
 8015e98:	460c      	mov	r4, r1
 8015e9a:	6831      	ldr	r1, [r6, #0]
 8015e9c:	4605      	mov	r5, r0
 8015e9e:	b911      	cbnz	r1, 8015ea6 <sbrk_aligned+0x12>
 8015ea0:	f001 f9e2 	bl	8017268 <_sbrk_r>
 8015ea4:	6030      	str	r0, [r6, #0]
 8015ea6:	4621      	mov	r1, r4
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	f001 f9dd 	bl	8017268 <_sbrk_r>
 8015eae:	1c43      	adds	r3, r0, #1
 8015eb0:	d103      	bne.n	8015eba <sbrk_aligned+0x26>
 8015eb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	bd70      	pop	{r4, r5, r6, pc}
 8015eba:	1cc4      	adds	r4, r0, #3
 8015ebc:	f024 0403 	bic.w	r4, r4, #3
 8015ec0:	42a0      	cmp	r0, r4
 8015ec2:	d0f8      	beq.n	8015eb6 <sbrk_aligned+0x22>
 8015ec4:	1a21      	subs	r1, r4, r0
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	f001 f9ce 	bl	8017268 <_sbrk_r>
 8015ecc:	3001      	adds	r0, #1
 8015ece:	d1f2      	bne.n	8015eb6 <sbrk_aligned+0x22>
 8015ed0:	e7ef      	b.n	8015eb2 <sbrk_aligned+0x1e>
 8015ed2:	bf00      	nop
 8015ed4:	20017ab4 	.word	0x20017ab4

08015ed8 <_malloc_r>:
 8015ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015edc:	1ccd      	adds	r5, r1, #3
 8015ede:	f025 0503 	bic.w	r5, r5, #3
 8015ee2:	3508      	adds	r5, #8
 8015ee4:	2d0c      	cmp	r5, #12
 8015ee6:	bf38      	it	cc
 8015ee8:	250c      	movcc	r5, #12
 8015eea:	2d00      	cmp	r5, #0
 8015eec:	4606      	mov	r6, r0
 8015eee:	db01      	blt.n	8015ef4 <_malloc_r+0x1c>
 8015ef0:	42a9      	cmp	r1, r5
 8015ef2:	d904      	bls.n	8015efe <_malloc_r+0x26>
 8015ef4:	230c      	movs	r3, #12
 8015ef6:	6033      	str	r3, [r6, #0]
 8015ef8:	2000      	movs	r0, #0
 8015efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015fd4 <_malloc_r+0xfc>
 8015f02:	f000 f869 	bl	8015fd8 <__malloc_lock>
 8015f06:	f8d8 3000 	ldr.w	r3, [r8]
 8015f0a:	461c      	mov	r4, r3
 8015f0c:	bb44      	cbnz	r4, 8015f60 <_malloc_r+0x88>
 8015f0e:	4629      	mov	r1, r5
 8015f10:	4630      	mov	r0, r6
 8015f12:	f7ff ffbf 	bl	8015e94 <sbrk_aligned>
 8015f16:	1c43      	adds	r3, r0, #1
 8015f18:	4604      	mov	r4, r0
 8015f1a:	d158      	bne.n	8015fce <_malloc_r+0xf6>
 8015f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8015f20:	4627      	mov	r7, r4
 8015f22:	2f00      	cmp	r7, #0
 8015f24:	d143      	bne.n	8015fae <_malloc_r+0xd6>
 8015f26:	2c00      	cmp	r4, #0
 8015f28:	d04b      	beq.n	8015fc2 <_malloc_r+0xea>
 8015f2a:	6823      	ldr	r3, [r4, #0]
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	4630      	mov	r0, r6
 8015f30:	eb04 0903 	add.w	r9, r4, r3
 8015f34:	f001 f998 	bl	8017268 <_sbrk_r>
 8015f38:	4581      	cmp	r9, r0
 8015f3a:	d142      	bne.n	8015fc2 <_malloc_r+0xea>
 8015f3c:	6821      	ldr	r1, [r4, #0]
 8015f3e:	1a6d      	subs	r5, r5, r1
 8015f40:	4629      	mov	r1, r5
 8015f42:	4630      	mov	r0, r6
 8015f44:	f7ff ffa6 	bl	8015e94 <sbrk_aligned>
 8015f48:	3001      	adds	r0, #1
 8015f4a:	d03a      	beq.n	8015fc2 <_malloc_r+0xea>
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	442b      	add	r3, r5
 8015f50:	6023      	str	r3, [r4, #0]
 8015f52:	f8d8 3000 	ldr.w	r3, [r8]
 8015f56:	685a      	ldr	r2, [r3, #4]
 8015f58:	bb62      	cbnz	r2, 8015fb4 <_malloc_r+0xdc>
 8015f5a:	f8c8 7000 	str.w	r7, [r8]
 8015f5e:	e00f      	b.n	8015f80 <_malloc_r+0xa8>
 8015f60:	6822      	ldr	r2, [r4, #0]
 8015f62:	1b52      	subs	r2, r2, r5
 8015f64:	d420      	bmi.n	8015fa8 <_malloc_r+0xd0>
 8015f66:	2a0b      	cmp	r2, #11
 8015f68:	d917      	bls.n	8015f9a <_malloc_r+0xc2>
 8015f6a:	1961      	adds	r1, r4, r5
 8015f6c:	42a3      	cmp	r3, r4
 8015f6e:	6025      	str	r5, [r4, #0]
 8015f70:	bf18      	it	ne
 8015f72:	6059      	strne	r1, [r3, #4]
 8015f74:	6863      	ldr	r3, [r4, #4]
 8015f76:	bf08      	it	eq
 8015f78:	f8c8 1000 	streq.w	r1, [r8]
 8015f7c:	5162      	str	r2, [r4, r5]
 8015f7e:	604b      	str	r3, [r1, #4]
 8015f80:	4630      	mov	r0, r6
 8015f82:	f000 f82f 	bl	8015fe4 <__malloc_unlock>
 8015f86:	f104 000b 	add.w	r0, r4, #11
 8015f8a:	1d23      	adds	r3, r4, #4
 8015f8c:	f020 0007 	bic.w	r0, r0, #7
 8015f90:	1ac2      	subs	r2, r0, r3
 8015f92:	bf1c      	itt	ne
 8015f94:	1a1b      	subne	r3, r3, r0
 8015f96:	50a3      	strne	r3, [r4, r2]
 8015f98:	e7af      	b.n	8015efa <_malloc_r+0x22>
 8015f9a:	6862      	ldr	r2, [r4, #4]
 8015f9c:	42a3      	cmp	r3, r4
 8015f9e:	bf0c      	ite	eq
 8015fa0:	f8c8 2000 	streq.w	r2, [r8]
 8015fa4:	605a      	strne	r2, [r3, #4]
 8015fa6:	e7eb      	b.n	8015f80 <_malloc_r+0xa8>
 8015fa8:	4623      	mov	r3, r4
 8015faa:	6864      	ldr	r4, [r4, #4]
 8015fac:	e7ae      	b.n	8015f0c <_malloc_r+0x34>
 8015fae:	463c      	mov	r4, r7
 8015fb0:	687f      	ldr	r7, [r7, #4]
 8015fb2:	e7b6      	b.n	8015f22 <_malloc_r+0x4a>
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	42a3      	cmp	r3, r4
 8015fba:	d1fb      	bne.n	8015fb4 <_malloc_r+0xdc>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	6053      	str	r3, [r2, #4]
 8015fc0:	e7de      	b.n	8015f80 <_malloc_r+0xa8>
 8015fc2:	230c      	movs	r3, #12
 8015fc4:	6033      	str	r3, [r6, #0]
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	f000 f80c 	bl	8015fe4 <__malloc_unlock>
 8015fcc:	e794      	b.n	8015ef8 <_malloc_r+0x20>
 8015fce:	6005      	str	r5, [r0, #0]
 8015fd0:	e7d6      	b.n	8015f80 <_malloc_r+0xa8>
 8015fd2:	bf00      	nop
 8015fd4:	20017ab8 	.word	0x20017ab8

08015fd8 <__malloc_lock>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	@ (8015fe0 <__malloc_lock+0x8>)
 8015fda:	f001 b992 	b.w	8017302 <__retarget_lock_acquire_recursive>
 8015fde:	bf00      	nop
 8015fe0:	20017bfd 	.word	0x20017bfd

08015fe4 <__malloc_unlock>:
 8015fe4:	4801      	ldr	r0, [pc, #4]	@ (8015fec <__malloc_unlock+0x8>)
 8015fe6:	f001 b98d 	b.w	8017304 <__retarget_lock_release_recursive>
 8015fea:	bf00      	nop
 8015fec:	20017bfd 	.word	0x20017bfd

08015ff0 <srand>:
 8015ff0:	b538      	push	{r3, r4, r5, lr}
 8015ff2:	4b10      	ldr	r3, [pc, #64]	@ (8016034 <srand+0x44>)
 8015ff4:	681d      	ldr	r5, [r3, #0]
 8015ff6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	b9b3      	cbnz	r3, 801602a <srand+0x3a>
 8015ffc:	2018      	movs	r0, #24
 8015ffe:	f7ff ff39 	bl	8015e74 <malloc>
 8016002:	4602      	mov	r2, r0
 8016004:	6328      	str	r0, [r5, #48]	@ 0x30
 8016006:	b920      	cbnz	r0, 8016012 <srand+0x22>
 8016008:	4b0b      	ldr	r3, [pc, #44]	@ (8016038 <srand+0x48>)
 801600a:	480c      	ldr	r0, [pc, #48]	@ (801603c <srand+0x4c>)
 801600c:	2146      	movs	r1, #70	@ 0x46
 801600e:	f001 f991 	bl	8017334 <__assert_func>
 8016012:	490b      	ldr	r1, [pc, #44]	@ (8016040 <srand+0x50>)
 8016014:	4b0b      	ldr	r3, [pc, #44]	@ (8016044 <srand+0x54>)
 8016016:	e9c0 1300 	strd	r1, r3, [r0]
 801601a:	4b0b      	ldr	r3, [pc, #44]	@ (8016048 <srand+0x58>)
 801601c:	6083      	str	r3, [r0, #8]
 801601e:	230b      	movs	r3, #11
 8016020:	8183      	strh	r3, [r0, #12]
 8016022:	2100      	movs	r1, #0
 8016024:	2001      	movs	r0, #1
 8016026:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801602a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801602c:	2200      	movs	r2, #0
 801602e:	611c      	str	r4, [r3, #16]
 8016030:	615a      	str	r2, [r3, #20]
 8016032:	bd38      	pop	{r3, r4, r5, pc}
 8016034:	200000c8 	.word	0x200000c8
 8016038:	08019f0e 	.word	0x08019f0e
 801603c:	08019f25 	.word	0x08019f25
 8016040:	abcd330e 	.word	0xabcd330e
 8016044:	e66d1234 	.word	0xe66d1234
 8016048:	0005deec 	.word	0x0005deec

0801604c <rand>:
 801604c:	4b16      	ldr	r3, [pc, #88]	@ (80160a8 <rand+0x5c>)
 801604e:	b510      	push	{r4, lr}
 8016050:	681c      	ldr	r4, [r3, #0]
 8016052:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016054:	b9b3      	cbnz	r3, 8016084 <rand+0x38>
 8016056:	2018      	movs	r0, #24
 8016058:	f7ff ff0c 	bl	8015e74 <malloc>
 801605c:	4602      	mov	r2, r0
 801605e:	6320      	str	r0, [r4, #48]	@ 0x30
 8016060:	b920      	cbnz	r0, 801606c <rand+0x20>
 8016062:	4b12      	ldr	r3, [pc, #72]	@ (80160ac <rand+0x60>)
 8016064:	4812      	ldr	r0, [pc, #72]	@ (80160b0 <rand+0x64>)
 8016066:	2152      	movs	r1, #82	@ 0x52
 8016068:	f001 f964 	bl	8017334 <__assert_func>
 801606c:	4911      	ldr	r1, [pc, #68]	@ (80160b4 <rand+0x68>)
 801606e:	4b12      	ldr	r3, [pc, #72]	@ (80160b8 <rand+0x6c>)
 8016070:	e9c0 1300 	strd	r1, r3, [r0]
 8016074:	4b11      	ldr	r3, [pc, #68]	@ (80160bc <rand+0x70>)
 8016076:	6083      	str	r3, [r0, #8]
 8016078:	230b      	movs	r3, #11
 801607a:	8183      	strh	r3, [r0, #12]
 801607c:	2100      	movs	r1, #0
 801607e:	2001      	movs	r0, #1
 8016080:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016084:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016086:	480e      	ldr	r0, [pc, #56]	@ (80160c0 <rand+0x74>)
 8016088:	690b      	ldr	r3, [r1, #16]
 801608a:	694c      	ldr	r4, [r1, #20]
 801608c:	4a0d      	ldr	r2, [pc, #52]	@ (80160c4 <rand+0x78>)
 801608e:	4358      	muls	r0, r3
 8016090:	fb02 0004 	mla	r0, r2, r4, r0
 8016094:	fba3 3202 	umull	r3, r2, r3, r2
 8016098:	3301      	adds	r3, #1
 801609a:	eb40 0002 	adc.w	r0, r0, r2
 801609e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80160a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80160a6:	bd10      	pop	{r4, pc}
 80160a8:	200000c8 	.word	0x200000c8
 80160ac:	08019f0e 	.word	0x08019f0e
 80160b0:	08019f25 	.word	0x08019f25
 80160b4:	abcd330e 	.word	0xabcd330e
 80160b8:	e66d1234 	.word	0xe66d1234
 80160bc:	0005deec 	.word	0x0005deec
 80160c0:	5851f42d 	.word	0x5851f42d
 80160c4:	4c957f2d 	.word	0x4c957f2d

080160c8 <realloc>:
 80160c8:	4b02      	ldr	r3, [pc, #8]	@ (80160d4 <realloc+0xc>)
 80160ca:	460a      	mov	r2, r1
 80160cc:	4601      	mov	r1, r0
 80160ce:	6818      	ldr	r0, [r3, #0]
 80160d0:	f000 b802 	b.w	80160d8 <_realloc_r>
 80160d4:	200000c8 	.word	0x200000c8

080160d8 <_realloc_r>:
 80160d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160dc:	4680      	mov	r8, r0
 80160de:	4615      	mov	r5, r2
 80160e0:	460c      	mov	r4, r1
 80160e2:	b921      	cbnz	r1, 80160ee <_realloc_r+0x16>
 80160e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160e8:	4611      	mov	r1, r2
 80160ea:	f7ff bef5 	b.w	8015ed8 <_malloc_r>
 80160ee:	b92a      	cbnz	r2, 80160fc <_realloc_r+0x24>
 80160f0:	f001 ff96 	bl	8018020 <_free_r>
 80160f4:	2400      	movs	r4, #0
 80160f6:	4620      	mov	r0, r4
 80160f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fc:	f002 fb5c 	bl	80187b8 <_malloc_usable_size_r>
 8016100:	4285      	cmp	r5, r0
 8016102:	4606      	mov	r6, r0
 8016104:	d802      	bhi.n	801610c <_realloc_r+0x34>
 8016106:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801610a:	d8f4      	bhi.n	80160f6 <_realloc_r+0x1e>
 801610c:	4629      	mov	r1, r5
 801610e:	4640      	mov	r0, r8
 8016110:	f7ff fee2 	bl	8015ed8 <_malloc_r>
 8016114:	4607      	mov	r7, r0
 8016116:	2800      	cmp	r0, #0
 8016118:	d0ec      	beq.n	80160f4 <_realloc_r+0x1c>
 801611a:	42b5      	cmp	r5, r6
 801611c:	462a      	mov	r2, r5
 801611e:	4621      	mov	r1, r4
 8016120:	bf28      	it	cs
 8016122:	4632      	movcs	r2, r6
 8016124:	f001 f8f7 	bl	8017316 <memcpy>
 8016128:	4621      	mov	r1, r4
 801612a:	4640      	mov	r0, r8
 801612c:	f001 ff78 	bl	8018020 <_free_r>
 8016130:	463c      	mov	r4, r7
 8016132:	e7e0      	b.n	80160f6 <_realloc_r+0x1e>

08016134 <_strtoul_l.constprop.0>:
 8016134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016138:	4e34      	ldr	r6, [pc, #208]	@ (801620c <_strtoul_l.constprop.0+0xd8>)
 801613a:	4686      	mov	lr, r0
 801613c:	460d      	mov	r5, r1
 801613e:	4628      	mov	r0, r5
 8016140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016144:	5d37      	ldrb	r7, [r6, r4]
 8016146:	f017 0708 	ands.w	r7, r7, #8
 801614a:	d1f8      	bne.n	801613e <_strtoul_l.constprop.0+0xa>
 801614c:	2c2d      	cmp	r4, #45	@ 0x2d
 801614e:	d12f      	bne.n	80161b0 <_strtoul_l.constprop.0+0x7c>
 8016150:	782c      	ldrb	r4, [r5, #0]
 8016152:	2701      	movs	r7, #1
 8016154:	1c85      	adds	r5, r0, #2
 8016156:	f033 0010 	bics.w	r0, r3, #16
 801615a:	d109      	bne.n	8016170 <_strtoul_l.constprop.0+0x3c>
 801615c:	2c30      	cmp	r4, #48	@ 0x30
 801615e:	d12c      	bne.n	80161ba <_strtoul_l.constprop.0+0x86>
 8016160:	7828      	ldrb	r0, [r5, #0]
 8016162:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016166:	2858      	cmp	r0, #88	@ 0x58
 8016168:	d127      	bne.n	80161ba <_strtoul_l.constprop.0+0x86>
 801616a:	786c      	ldrb	r4, [r5, #1]
 801616c:	2310      	movs	r3, #16
 801616e:	3502      	adds	r5, #2
 8016170:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016174:	2600      	movs	r6, #0
 8016176:	fbb8 f8f3 	udiv	r8, r8, r3
 801617a:	fb03 f908 	mul.w	r9, r3, r8
 801617e:	ea6f 0909 	mvn.w	r9, r9
 8016182:	4630      	mov	r0, r6
 8016184:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016188:	f1bc 0f09 	cmp.w	ip, #9
 801618c:	d81c      	bhi.n	80161c8 <_strtoul_l.constprop.0+0x94>
 801618e:	4664      	mov	r4, ip
 8016190:	42a3      	cmp	r3, r4
 8016192:	dd2a      	ble.n	80161ea <_strtoul_l.constprop.0+0xb6>
 8016194:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016198:	d007      	beq.n	80161aa <_strtoul_l.constprop.0+0x76>
 801619a:	4580      	cmp	r8, r0
 801619c:	d322      	bcc.n	80161e4 <_strtoul_l.constprop.0+0xb0>
 801619e:	d101      	bne.n	80161a4 <_strtoul_l.constprop.0+0x70>
 80161a0:	45a1      	cmp	r9, r4
 80161a2:	db1f      	blt.n	80161e4 <_strtoul_l.constprop.0+0xb0>
 80161a4:	fb00 4003 	mla	r0, r0, r3, r4
 80161a8:	2601      	movs	r6, #1
 80161aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161ae:	e7e9      	b.n	8016184 <_strtoul_l.constprop.0+0x50>
 80161b0:	2c2b      	cmp	r4, #43	@ 0x2b
 80161b2:	bf04      	itt	eq
 80161b4:	782c      	ldrbeq	r4, [r5, #0]
 80161b6:	1c85      	addeq	r5, r0, #2
 80161b8:	e7cd      	b.n	8016156 <_strtoul_l.constprop.0+0x22>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d1d8      	bne.n	8016170 <_strtoul_l.constprop.0+0x3c>
 80161be:	2c30      	cmp	r4, #48	@ 0x30
 80161c0:	bf0c      	ite	eq
 80161c2:	2308      	moveq	r3, #8
 80161c4:	230a      	movne	r3, #10
 80161c6:	e7d3      	b.n	8016170 <_strtoul_l.constprop.0+0x3c>
 80161c8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80161cc:	f1bc 0f19 	cmp.w	ip, #25
 80161d0:	d801      	bhi.n	80161d6 <_strtoul_l.constprop.0+0xa2>
 80161d2:	3c37      	subs	r4, #55	@ 0x37
 80161d4:	e7dc      	b.n	8016190 <_strtoul_l.constprop.0+0x5c>
 80161d6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80161da:	f1bc 0f19 	cmp.w	ip, #25
 80161de:	d804      	bhi.n	80161ea <_strtoul_l.constprop.0+0xb6>
 80161e0:	3c57      	subs	r4, #87	@ 0x57
 80161e2:	e7d5      	b.n	8016190 <_strtoul_l.constprop.0+0x5c>
 80161e4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80161e8:	e7df      	b.n	80161aa <_strtoul_l.constprop.0+0x76>
 80161ea:	1c73      	adds	r3, r6, #1
 80161ec:	d106      	bne.n	80161fc <_strtoul_l.constprop.0+0xc8>
 80161ee:	2322      	movs	r3, #34	@ 0x22
 80161f0:	f8ce 3000 	str.w	r3, [lr]
 80161f4:	4630      	mov	r0, r6
 80161f6:	b932      	cbnz	r2, 8016206 <_strtoul_l.constprop.0+0xd2>
 80161f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161fc:	b107      	cbz	r7, 8016200 <_strtoul_l.constprop.0+0xcc>
 80161fe:	4240      	negs	r0, r0
 8016200:	2a00      	cmp	r2, #0
 8016202:	d0f9      	beq.n	80161f8 <_strtoul_l.constprop.0+0xc4>
 8016204:	b106      	cbz	r6, 8016208 <_strtoul_l.constprop.0+0xd4>
 8016206:	1e69      	subs	r1, r5, #1
 8016208:	6011      	str	r1, [r2, #0]
 801620a:	e7f5      	b.n	80161f8 <_strtoul_l.constprop.0+0xc4>
 801620c:	08019fa3 	.word	0x08019fa3

08016210 <strtoul>:
 8016210:	4613      	mov	r3, r2
 8016212:	460a      	mov	r2, r1
 8016214:	4601      	mov	r1, r0
 8016216:	4802      	ldr	r0, [pc, #8]	@ (8016220 <strtoul+0x10>)
 8016218:	6800      	ldr	r0, [r0, #0]
 801621a:	f7ff bf8b 	b.w	8016134 <_strtoul_l.constprop.0>
 801621e:	bf00      	nop
 8016220:	200000c8 	.word	0x200000c8

08016224 <__utoa>:
 8016224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016226:	4c1f      	ldr	r4, [pc, #124]	@ (80162a4 <__utoa+0x80>)
 8016228:	b08b      	sub	sp, #44	@ 0x2c
 801622a:	4605      	mov	r5, r0
 801622c:	460b      	mov	r3, r1
 801622e:	466e      	mov	r6, sp
 8016230:	f104 0c20 	add.w	ip, r4, #32
 8016234:	6820      	ldr	r0, [r4, #0]
 8016236:	6861      	ldr	r1, [r4, #4]
 8016238:	4637      	mov	r7, r6
 801623a:	c703      	stmia	r7!, {r0, r1}
 801623c:	3408      	adds	r4, #8
 801623e:	4564      	cmp	r4, ip
 8016240:	463e      	mov	r6, r7
 8016242:	d1f7      	bne.n	8016234 <__utoa+0x10>
 8016244:	7921      	ldrb	r1, [r4, #4]
 8016246:	7139      	strb	r1, [r7, #4]
 8016248:	1e91      	subs	r1, r2, #2
 801624a:	6820      	ldr	r0, [r4, #0]
 801624c:	6038      	str	r0, [r7, #0]
 801624e:	2922      	cmp	r1, #34	@ 0x22
 8016250:	f04f 0100 	mov.w	r1, #0
 8016254:	d904      	bls.n	8016260 <__utoa+0x3c>
 8016256:	7019      	strb	r1, [r3, #0]
 8016258:	460b      	mov	r3, r1
 801625a:	4618      	mov	r0, r3
 801625c:	b00b      	add	sp, #44	@ 0x2c
 801625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016260:	1e58      	subs	r0, r3, #1
 8016262:	4684      	mov	ip, r0
 8016264:	fbb5 f7f2 	udiv	r7, r5, r2
 8016268:	fb02 5617 	mls	r6, r2, r7, r5
 801626c:	3628      	adds	r6, #40	@ 0x28
 801626e:	446e      	add	r6, sp
 8016270:	460c      	mov	r4, r1
 8016272:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8016276:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801627a:	462e      	mov	r6, r5
 801627c:	42b2      	cmp	r2, r6
 801627e:	f101 0101 	add.w	r1, r1, #1
 8016282:	463d      	mov	r5, r7
 8016284:	d9ee      	bls.n	8016264 <__utoa+0x40>
 8016286:	2200      	movs	r2, #0
 8016288:	545a      	strb	r2, [r3, r1]
 801628a:	1919      	adds	r1, r3, r4
 801628c:	1aa5      	subs	r5, r4, r2
 801628e:	42aa      	cmp	r2, r5
 8016290:	dae3      	bge.n	801625a <__utoa+0x36>
 8016292:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8016296:	780e      	ldrb	r6, [r1, #0]
 8016298:	7006      	strb	r6, [r0, #0]
 801629a:	3201      	adds	r2, #1
 801629c:	f801 5901 	strb.w	r5, [r1], #-1
 80162a0:	e7f4      	b.n	801628c <__utoa+0x68>
 80162a2:	bf00      	nop
 80162a4:	08019f7d 	.word	0x08019f7d

080162a8 <__cvt>:
 80162a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162ac:	ec57 6b10 	vmov	r6, r7, d0
 80162b0:	2f00      	cmp	r7, #0
 80162b2:	460c      	mov	r4, r1
 80162b4:	4619      	mov	r1, r3
 80162b6:	463b      	mov	r3, r7
 80162b8:	bfbb      	ittet	lt
 80162ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80162be:	461f      	movlt	r7, r3
 80162c0:	2300      	movge	r3, #0
 80162c2:	232d      	movlt	r3, #45	@ 0x2d
 80162c4:	700b      	strb	r3, [r1, #0]
 80162c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80162cc:	4691      	mov	r9, r2
 80162ce:	f023 0820 	bic.w	r8, r3, #32
 80162d2:	bfbc      	itt	lt
 80162d4:	4632      	movlt	r2, r6
 80162d6:	4616      	movlt	r6, r2
 80162d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80162dc:	d005      	beq.n	80162ea <__cvt+0x42>
 80162de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80162e2:	d100      	bne.n	80162e6 <__cvt+0x3e>
 80162e4:	3401      	adds	r4, #1
 80162e6:	2102      	movs	r1, #2
 80162e8:	e000      	b.n	80162ec <__cvt+0x44>
 80162ea:	2103      	movs	r1, #3
 80162ec:	ab03      	add	r3, sp, #12
 80162ee:	9301      	str	r3, [sp, #4]
 80162f0:	ab02      	add	r3, sp, #8
 80162f2:	9300      	str	r3, [sp, #0]
 80162f4:	ec47 6b10 	vmov	d0, r6, r7
 80162f8:	4653      	mov	r3, sl
 80162fa:	4622      	mov	r2, r4
 80162fc:	f001 f8c0 	bl	8017480 <_dtoa_r>
 8016300:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016304:	4605      	mov	r5, r0
 8016306:	d119      	bne.n	801633c <__cvt+0x94>
 8016308:	f019 0f01 	tst.w	r9, #1
 801630c:	d00e      	beq.n	801632c <__cvt+0x84>
 801630e:	eb00 0904 	add.w	r9, r0, r4
 8016312:	2200      	movs	r2, #0
 8016314:	2300      	movs	r3, #0
 8016316:	4630      	mov	r0, r6
 8016318:	4639      	mov	r1, r7
 801631a:	f7ea fc05 	bl	8000b28 <__aeabi_dcmpeq>
 801631e:	b108      	cbz	r0, 8016324 <__cvt+0x7c>
 8016320:	f8cd 900c 	str.w	r9, [sp, #12]
 8016324:	2230      	movs	r2, #48	@ 0x30
 8016326:	9b03      	ldr	r3, [sp, #12]
 8016328:	454b      	cmp	r3, r9
 801632a:	d31e      	bcc.n	801636a <__cvt+0xc2>
 801632c:	9b03      	ldr	r3, [sp, #12]
 801632e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016330:	1b5b      	subs	r3, r3, r5
 8016332:	4628      	mov	r0, r5
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	b004      	add	sp, #16
 8016338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801633c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016340:	eb00 0904 	add.w	r9, r0, r4
 8016344:	d1e5      	bne.n	8016312 <__cvt+0x6a>
 8016346:	7803      	ldrb	r3, [r0, #0]
 8016348:	2b30      	cmp	r3, #48	@ 0x30
 801634a:	d10a      	bne.n	8016362 <__cvt+0xba>
 801634c:	2200      	movs	r2, #0
 801634e:	2300      	movs	r3, #0
 8016350:	4630      	mov	r0, r6
 8016352:	4639      	mov	r1, r7
 8016354:	f7ea fbe8 	bl	8000b28 <__aeabi_dcmpeq>
 8016358:	b918      	cbnz	r0, 8016362 <__cvt+0xba>
 801635a:	f1c4 0401 	rsb	r4, r4, #1
 801635e:	f8ca 4000 	str.w	r4, [sl]
 8016362:	f8da 3000 	ldr.w	r3, [sl]
 8016366:	4499      	add	r9, r3
 8016368:	e7d3      	b.n	8016312 <__cvt+0x6a>
 801636a:	1c59      	adds	r1, r3, #1
 801636c:	9103      	str	r1, [sp, #12]
 801636e:	701a      	strb	r2, [r3, #0]
 8016370:	e7d9      	b.n	8016326 <__cvt+0x7e>

08016372 <__exponent>:
 8016372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016374:	2900      	cmp	r1, #0
 8016376:	bfba      	itte	lt
 8016378:	4249      	neglt	r1, r1
 801637a:	232d      	movlt	r3, #45	@ 0x2d
 801637c:	232b      	movge	r3, #43	@ 0x2b
 801637e:	2909      	cmp	r1, #9
 8016380:	7002      	strb	r2, [r0, #0]
 8016382:	7043      	strb	r3, [r0, #1]
 8016384:	dd29      	ble.n	80163da <__exponent+0x68>
 8016386:	f10d 0307 	add.w	r3, sp, #7
 801638a:	461d      	mov	r5, r3
 801638c:	270a      	movs	r7, #10
 801638e:	461a      	mov	r2, r3
 8016390:	fbb1 f6f7 	udiv	r6, r1, r7
 8016394:	fb07 1416 	mls	r4, r7, r6, r1
 8016398:	3430      	adds	r4, #48	@ 0x30
 801639a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801639e:	460c      	mov	r4, r1
 80163a0:	2c63      	cmp	r4, #99	@ 0x63
 80163a2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80163a6:	4631      	mov	r1, r6
 80163a8:	dcf1      	bgt.n	801638e <__exponent+0x1c>
 80163aa:	3130      	adds	r1, #48	@ 0x30
 80163ac:	1e94      	subs	r4, r2, #2
 80163ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80163b2:	1c41      	adds	r1, r0, #1
 80163b4:	4623      	mov	r3, r4
 80163b6:	42ab      	cmp	r3, r5
 80163b8:	d30a      	bcc.n	80163d0 <__exponent+0x5e>
 80163ba:	f10d 0309 	add.w	r3, sp, #9
 80163be:	1a9b      	subs	r3, r3, r2
 80163c0:	42ac      	cmp	r4, r5
 80163c2:	bf88      	it	hi
 80163c4:	2300      	movhi	r3, #0
 80163c6:	3302      	adds	r3, #2
 80163c8:	4403      	add	r3, r0
 80163ca:	1a18      	subs	r0, r3, r0
 80163cc:	b003      	add	sp, #12
 80163ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80163d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80163d8:	e7ed      	b.n	80163b6 <__exponent+0x44>
 80163da:	2330      	movs	r3, #48	@ 0x30
 80163dc:	3130      	adds	r1, #48	@ 0x30
 80163de:	7083      	strb	r3, [r0, #2]
 80163e0:	70c1      	strb	r1, [r0, #3]
 80163e2:	1d03      	adds	r3, r0, #4
 80163e4:	e7f1      	b.n	80163ca <__exponent+0x58>
	...

080163e8 <_printf_float>:
 80163e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163ec:	b08d      	sub	sp, #52	@ 0x34
 80163ee:	460c      	mov	r4, r1
 80163f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80163f4:	4616      	mov	r6, r2
 80163f6:	461f      	mov	r7, r3
 80163f8:	4605      	mov	r5, r0
 80163fa:	f000 fea7 	bl	801714c <_localeconv_r>
 80163fe:	6803      	ldr	r3, [r0, #0]
 8016400:	9304      	str	r3, [sp, #16]
 8016402:	4618      	mov	r0, r3
 8016404:	f7e9 ff64 	bl	80002d0 <strlen>
 8016408:	2300      	movs	r3, #0
 801640a:	930a      	str	r3, [sp, #40]	@ 0x28
 801640c:	f8d8 3000 	ldr.w	r3, [r8]
 8016410:	9005      	str	r0, [sp, #20]
 8016412:	3307      	adds	r3, #7
 8016414:	f023 0307 	bic.w	r3, r3, #7
 8016418:	f103 0208 	add.w	r2, r3, #8
 801641c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016420:	f8d4 b000 	ldr.w	fp, [r4]
 8016424:	f8c8 2000 	str.w	r2, [r8]
 8016428:	e9d3 8900 	ldrd	r8, r9, [r3]
 801642c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016430:	9307      	str	r3, [sp, #28]
 8016432:	f8cd 8018 	str.w	r8, [sp, #24]
 8016436:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801643a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801643e:	4b9c      	ldr	r3, [pc, #624]	@ (80166b0 <_printf_float+0x2c8>)
 8016440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016444:	f7ea fba2 	bl	8000b8c <__aeabi_dcmpun>
 8016448:	bb70      	cbnz	r0, 80164a8 <_printf_float+0xc0>
 801644a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801644e:	4b98      	ldr	r3, [pc, #608]	@ (80166b0 <_printf_float+0x2c8>)
 8016450:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016454:	f7ea fb7c 	bl	8000b50 <__aeabi_dcmple>
 8016458:	bb30      	cbnz	r0, 80164a8 <_printf_float+0xc0>
 801645a:	2200      	movs	r2, #0
 801645c:	2300      	movs	r3, #0
 801645e:	4640      	mov	r0, r8
 8016460:	4649      	mov	r1, r9
 8016462:	f7ea fb6b 	bl	8000b3c <__aeabi_dcmplt>
 8016466:	b110      	cbz	r0, 801646e <_printf_float+0x86>
 8016468:	232d      	movs	r3, #45	@ 0x2d
 801646a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801646e:	4a91      	ldr	r2, [pc, #580]	@ (80166b4 <_printf_float+0x2cc>)
 8016470:	4b91      	ldr	r3, [pc, #580]	@ (80166b8 <_printf_float+0x2d0>)
 8016472:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016476:	bf94      	ite	ls
 8016478:	4690      	movls	r8, r2
 801647a:	4698      	movhi	r8, r3
 801647c:	2303      	movs	r3, #3
 801647e:	6123      	str	r3, [r4, #16]
 8016480:	f02b 0304 	bic.w	r3, fp, #4
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	f04f 0900 	mov.w	r9, #0
 801648a:	9700      	str	r7, [sp, #0]
 801648c:	4633      	mov	r3, r6
 801648e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8016490:	4621      	mov	r1, r4
 8016492:	4628      	mov	r0, r5
 8016494:	f000 f9d2 	bl	801683c <_printf_common>
 8016498:	3001      	adds	r0, #1
 801649a:	f040 808d 	bne.w	80165b8 <_printf_float+0x1d0>
 801649e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80164a2:	b00d      	add	sp, #52	@ 0x34
 80164a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a8:	4642      	mov	r2, r8
 80164aa:	464b      	mov	r3, r9
 80164ac:	4640      	mov	r0, r8
 80164ae:	4649      	mov	r1, r9
 80164b0:	f7ea fb6c 	bl	8000b8c <__aeabi_dcmpun>
 80164b4:	b140      	cbz	r0, 80164c8 <_printf_float+0xe0>
 80164b6:	464b      	mov	r3, r9
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bfbc      	itt	lt
 80164bc:	232d      	movlt	r3, #45	@ 0x2d
 80164be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80164c2:	4a7e      	ldr	r2, [pc, #504]	@ (80166bc <_printf_float+0x2d4>)
 80164c4:	4b7e      	ldr	r3, [pc, #504]	@ (80166c0 <_printf_float+0x2d8>)
 80164c6:	e7d4      	b.n	8016472 <_printf_float+0x8a>
 80164c8:	6863      	ldr	r3, [r4, #4]
 80164ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80164ce:	9206      	str	r2, [sp, #24]
 80164d0:	1c5a      	adds	r2, r3, #1
 80164d2:	d13b      	bne.n	801654c <_printf_float+0x164>
 80164d4:	2306      	movs	r3, #6
 80164d6:	6063      	str	r3, [r4, #4]
 80164d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80164dc:	2300      	movs	r3, #0
 80164de:	6022      	str	r2, [r4, #0]
 80164e0:	9303      	str	r3, [sp, #12]
 80164e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80164e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80164e8:	ab09      	add	r3, sp, #36	@ 0x24
 80164ea:	9300      	str	r3, [sp, #0]
 80164ec:	6861      	ldr	r1, [r4, #4]
 80164ee:	ec49 8b10 	vmov	d0, r8, r9
 80164f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80164f6:	4628      	mov	r0, r5
 80164f8:	f7ff fed6 	bl	80162a8 <__cvt>
 80164fc:	9b06      	ldr	r3, [sp, #24]
 80164fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016500:	2b47      	cmp	r3, #71	@ 0x47
 8016502:	4680      	mov	r8, r0
 8016504:	d129      	bne.n	801655a <_printf_float+0x172>
 8016506:	1cc8      	adds	r0, r1, #3
 8016508:	db02      	blt.n	8016510 <_printf_float+0x128>
 801650a:	6863      	ldr	r3, [r4, #4]
 801650c:	4299      	cmp	r1, r3
 801650e:	dd41      	ble.n	8016594 <_printf_float+0x1ac>
 8016510:	f1aa 0a02 	sub.w	sl, sl, #2
 8016514:	fa5f fa8a 	uxtb.w	sl, sl
 8016518:	3901      	subs	r1, #1
 801651a:	4652      	mov	r2, sl
 801651c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016520:	9109      	str	r1, [sp, #36]	@ 0x24
 8016522:	f7ff ff26 	bl	8016372 <__exponent>
 8016526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016528:	1813      	adds	r3, r2, r0
 801652a:	2a01      	cmp	r2, #1
 801652c:	4681      	mov	r9, r0
 801652e:	6123      	str	r3, [r4, #16]
 8016530:	dc02      	bgt.n	8016538 <_printf_float+0x150>
 8016532:	6822      	ldr	r2, [r4, #0]
 8016534:	07d2      	lsls	r2, r2, #31
 8016536:	d501      	bpl.n	801653c <_printf_float+0x154>
 8016538:	3301      	adds	r3, #1
 801653a:	6123      	str	r3, [r4, #16]
 801653c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016540:	2b00      	cmp	r3, #0
 8016542:	d0a2      	beq.n	801648a <_printf_float+0xa2>
 8016544:	232d      	movs	r3, #45	@ 0x2d
 8016546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801654a:	e79e      	b.n	801648a <_printf_float+0xa2>
 801654c:	9a06      	ldr	r2, [sp, #24]
 801654e:	2a47      	cmp	r2, #71	@ 0x47
 8016550:	d1c2      	bne.n	80164d8 <_printf_float+0xf0>
 8016552:	2b00      	cmp	r3, #0
 8016554:	d1c0      	bne.n	80164d8 <_printf_float+0xf0>
 8016556:	2301      	movs	r3, #1
 8016558:	e7bd      	b.n	80164d6 <_printf_float+0xee>
 801655a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801655e:	d9db      	bls.n	8016518 <_printf_float+0x130>
 8016560:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016564:	d118      	bne.n	8016598 <_printf_float+0x1b0>
 8016566:	2900      	cmp	r1, #0
 8016568:	6863      	ldr	r3, [r4, #4]
 801656a:	dd0b      	ble.n	8016584 <_printf_float+0x19c>
 801656c:	6121      	str	r1, [r4, #16]
 801656e:	b913      	cbnz	r3, 8016576 <_printf_float+0x18e>
 8016570:	6822      	ldr	r2, [r4, #0]
 8016572:	07d0      	lsls	r0, r2, #31
 8016574:	d502      	bpl.n	801657c <_printf_float+0x194>
 8016576:	3301      	adds	r3, #1
 8016578:	440b      	add	r3, r1
 801657a:	6123      	str	r3, [r4, #16]
 801657c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801657e:	f04f 0900 	mov.w	r9, #0
 8016582:	e7db      	b.n	801653c <_printf_float+0x154>
 8016584:	b913      	cbnz	r3, 801658c <_printf_float+0x1a4>
 8016586:	6822      	ldr	r2, [r4, #0]
 8016588:	07d2      	lsls	r2, r2, #31
 801658a:	d501      	bpl.n	8016590 <_printf_float+0x1a8>
 801658c:	3302      	adds	r3, #2
 801658e:	e7f4      	b.n	801657a <_printf_float+0x192>
 8016590:	2301      	movs	r3, #1
 8016592:	e7f2      	b.n	801657a <_printf_float+0x192>
 8016594:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8016598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801659a:	4299      	cmp	r1, r3
 801659c:	db05      	blt.n	80165aa <_printf_float+0x1c2>
 801659e:	6823      	ldr	r3, [r4, #0]
 80165a0:	6121      	str	r1, [r4, #16]
 80165a2:	07d8      	lsls	r0, r3, #31
 80165a4:	d5ea      	bpl.n	801657c <_printf_float+0x194>
 80165a6:	1c4b      	adds	r3, r1, #1
 80165a8:	e7e7      	b.n	801657a <_printf_float+0x192>
 80165aa:	2900      	cmp	r1, #0
 80165ac:	bfd4      	ite	le
 80165ae:	f1c1 0202 	rsble	r2, r1, #2
 80165b2:	2201      	movgt	r2, #1
 80165b4:	4413      	add	r3, r2
 80165b6:	e7e0      	b.n	801657a <_printf_float+0x192>
 80165b8:	6823      	ldr	r3, [r4, #0]
 80165ba:	055a      	lsls	r2, r3, #21
 80165bc:	d407      	bmi.n	80165ce <_printf_float+0x1e6>
 80165be:	6923      	ldr	r3, [r4, #16]
 80165c0:	4642      	mov	r2, r8
 80165c2:	4631      	mov	r1, r6
 80165c4:	4628      	mov	r0, r5
 80165c6:	47b8      	blx	r7
 80165c8:	3001      	adds	r0, #1
 80165ca:	d12b      	bne.n	8016624 <_printf_float+0x23c>
 80165cc:	e767      	b.n	801649e <_printf_float+0xb6>
 80165ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80165d2:	f240 80dd 	bls.w	8016790 <_printf_float+0x3a8>
 80165d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80165da:	2200      	movs	r2, #0
 80165dc:	2300      	movs	r3, #0
 80165de:	f7ea faa3 	bl	8000b28 <__aeabi_dcmpeq>
 80165e2:	2800      	cmp	r0, #0
 80165e4:	d033      	beq.n	801664e <_printf_float+0x266>
 80165e6:	4a37      	ldr	r2, [pc, #220]	@ (80166c4 <_printf_float+0x2dc>)
 80165e8:	2301      	movs	r3, #1
 80165ea:	4631      	mov	r1, r6
 80165ec:	4628      	mov	r0, r5
 80165ee:	47b8      	blx	r7
 80165f0:	3001      	adds	r0, #1
 80165f2:	f43f af54 	beq.w	801649e <_printf_float+0xb6>
 80165f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80165fa:	4543      	cmp	r3, r8
 80165fc:	db02      	blt.n	8016604 <_printf_float+0x21c>
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	07d8      	lsls	r0, r3, #31
 8016602:	d50f      	bpl.n	8016624 <_printf_float+0x23c>
 8016604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016608:	4631      	mov	r1, r6
 801660a:	4628      	mov	r0, r5
 801660c:	47b8      	blx	r7
 801660e:	3001      	adds	r0, #1
 8016610:	f43f af45 	beq.w	801649e <_printf_float+0xb6>
 8016614:	f04f 0900 	mov.w	r9, #0
 8016618:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801661c:	f104 0a1a 	add.w	sl, r4, #26
 8016620:	45c8      	cmp	r8, r9
 8016622:	dc09      	bgt.n	8016638 <_printf_float+0x250>
 8016624:	6823      	ldr	r3, [r4, #0]
 8016626:	079b      	lsls	r3, r3, #30
 8016628:	f100 8103 	bmi.w	8016832 <_printf_float+0x44a>
 801662c:	68e0      	ldr	r0, [r4, #12]
 801662e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016630:	4298      	cmp	r0, r3
 8016632:	bfb8      	it	lt
 8016634:	4618      	movlt	r0, r3
 8016636:	e734      	b.n	80164a2 <_printf_float+0xba>
 8016638:	2301      	movs	r3, #1
 801663a:	4652      	mov	r2, sl
 801663c:	4631      	mov	r1, r6
 801663e:	4628      	mov	r0, r5
 8016640:	47b8      	blx	r7
 8016642:	3001      	adds	r0, #1
 8016644:	f43f af2b 	beq.w	801649e <_printf_float+0xb6>
 8016648:	f109 0901 	add.w	r9, r9, #1
 801664c:	e7e8      	b.n	8016620 <_printf_float+0x238>
 801664e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016650:	2b00      	cmp	r3, #0
 8016652:	dc39      	bgt.n	80166c8 <_printf_float+0x2e0>
 8016654:	4a1b      	ldr	r2, [pc, #108]	@ (80166c4 <_printf_float+0x2dc>)
 8016656:	2301      	movs	r3, #1
 8016658:	4631      	mov	r1, r6
 801665a:	4628      	mov	r0, r5
 801665c:	47b8      	blx	r7
 801665e:	3001      	adds	r0, #1
 8016660:	f43f af1d 	beq.w	801649e <_printf_float+0xb6>
 8016664:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016668:	ea59 0303 	orrs.w	r3, r9, r3
 801666c:	d102      	bne.n	8016674 <_printf_float+0x28c>
 801666e:	6823      	ldr	r3, [r4, #0]
 8016670:	07d9      	lsls	r1, r3, #31
 8016672:	d5d7      	bpl.n	8016624 <_printf_float+0x23c>
 8016674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016678:	4631      	mov	r1, r6
 801667a:	4628      	mov	r0, r5
 801667c:	47b8      	blx	r7
 801667e:	3001      	adds	r0, #1
 8016680:	f43f af0d 	beq.w	801649e <_printf_float+0xb6>
 8016684:	f04f 0a00 	mov.w	sl, #0
 8016688:	f104 0b1a 	add.w	fp, r4, #26
 801668c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801668e:	425b      	negs	r3, r3
 8016690:	4553      	cmp	r3, sl
 8016692:	dc01      	bgt.n	8016698 <_printf_float+0x2b0>
 8016694:	464b      	mov	r3, r9
 8016696:	e793      	b.n	80165c0 <_printf_float+0x1d8>
 8016698:	2301      	movs	r3, #1
 801669a:	465a      	mov	r2, fp
 801669c:	4631      	mov	r1, r6
 801669e:	4628      	mov	r0, r5
 80166a0:	47b8      	blx	r7
 80166a2:	3001      	adds	r0, #1
 80166a4:	f43f aefb 	beq.w	801649e <_printf_float+0xb6>
 80166a8:	f10a 0a01 	add.w	sl, sl, #1
 80166ac:	e7ee      	b.n	801668c <_printf_float+0x2a4>
 80166ae:	bf00      	nop
 80166b0:	7fefffff 	.word	0x7fefffff
 80166b4:	0801a0a3 	.word	0x0801a0a3
 80166b8:	0801a0a7 	.word	0x0801a0a7
 80166bc:	0801a0ab 	.word	0x0801a0ab
 80166c0:	0801a0af 	.word	0x0801a0af
 80166c4:	0801a0b3 	.word	0x0801a0b3
 80166c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80166ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80166ce:	4553      	cmp	r3, sl
 80166d0:	bfa8      	it	ge
 80166d2:	4653      	movge	r3, sl
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	4699      	mov	r9, r3
 80166d8:	dc36      	bgt.n	8016748 <_printf_float+0x360>
 80166da:	f04f 0b00 	mov.w	fp, #0
 80166de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80166e2:	f104 021a 	add.w	r2, r4, #26
 80166e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80166e8:	9306      	str	r3, [sp, #24]
 80166ea:	eba3 0309 	sub.w	r3, r3, r9
 80166ee:	455b      	cmp	r3, fp
 80166f0:	dc31      	bgt.n	8016756 <_printf_float+0x36e>
 80166f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166f4:	459a      	cmp	sl, r3
 80166f6:	dc3a      	bgt.n	801676e <_printf_float+0x386>
 80166f8:	6823      	ldr	r3, [r4, #0]
 80166fa:	07da      	lsls	r2, r3, #31
 80166fc:	d437      	bmi.n	801676e <_printf_float+0x386>
 80166fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016700:	ebaa 0903 	sub.w	r9, sl, r3
 8016704:	9b06      	ldr	r3, [sp, #24]
 8016706:	ebaa 0303 	sub.w	r3, sl, r3
 801670a:	4599      	cmp	r9, r3
 801670c:	bfa8      	it	ge
 801670e:	4699      	movge	r9, r3
 8016710:	f1b9 0f00 	cmp.w	r9, #0
 8016714:	dc33      	bgt.n	801677e <_printf_float+0x396>
 8016716:	f04f 0800 	mov.w	r8, #0
 801671a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801671e:	f104 0b1a 	add.w	fp, r4, #26
 8016722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016724:	ebaa 0303 	sub.w	r3, sl, r3
 8016728:	eba3 0309 	sub.w	r3, r3, r9
 801672c:	4543      	cmp	r3, r8
 801672e:	f77f af79 	ble.w	8016624 <_printf_float+0x23c>
 8016732:	2301      	movs	r3, #1
 8016734:	465a      	mov	r2, fp
 8016736:	4631      	mov	r1, r6
 8016738:	4628      	mov	r0, r5
 801673a:	47b8      	blx	r7
 801673c:	3001      	adds	r0, #1
 801673e:	f43f aeae 	beq.w	801649e <_printf_float+0xb6>
 8016742:	f108 0801 	add.w	r8, r8, #1
 8016746:	e7ec      	b.n	8016722 <_printf_float+0x33a>
 8016748:	4642      	mov	r2, r8
 801674a:	4631      	mov	r1, r6
 801674c:	4628      	mov	r0, r5
 801674e:	47b8      	blx	r7
 8016750:	3001      	adds	r0, #1
 8016752:	d1c2      	bne.n	80166da <_printf_float+0x2f2>
 8016754:	e6a3      	b.n	801649e <_printf_float+0xb6>
 8016756:	2301      	movs	r3, #1
 8016758:	4631      	mov	r1, r6
 801675a:	4628      	mov	r0, r5
 801675c:	9206      	str	r2, [sp, #24]
 801675e:	47b8      	blx	r7
 8016760:	3001      	adds	r0, #1
 8016762:	f43f ae9c 	beq.w	801649e <_printf_float+0xb6>
 8016766:	9a06      	ldr	r2, [sp, #24]
 8016768:	f10b 0b01 	add.w	fp, fp, #1
 801676c:	e7bb      	b.n	80166e6 <_printf_float+0x2fe>
 801676e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016772:	4631      	mov	r1, r6
 8016774:	4628      	mov	r0, r5
 8016776:	47b8      	blx	r7
 8016778:	3001      	adds	r0, #1
 801677a:	d1c0      	bne.n	80166fe <_printf_float+0x316>
 801677c:	e68f      	b.n	801649e <_printf_float+0xb6>
 801677e:	9a06      	ldr	r2, [sp, #24]
 8016780:	464b      	mov	r3, r9
 8016782:	4442      	add	r2, r8
 8016784:	4631      	mov	r1, r6
 8016786:	4628      	mov	r0, r5
 8016788:	47b8      	blx	r7
 801678a:	3001      	adds	r0, #1
 801678c:	d1c3      	bne.n	8016716 <_printf_float+0x32e>
 801678e:	e686      	b.n	801649e <_printf_float+0xb6>
 8016790:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016794:	f1ba 0f01 	cmp.w	sl, #1
 8016798:	dc01      	bgt.n	801679e <_printf_float+0x3b6>
 801679a:	07db      	lsls	r3, r3, #31
 801679c:	d536      	bpl.n	801680c <_printf_float+0x424>
 801679e:	2301      	movs	r3, #1
 80167a0:	4642      	mov	r2, r8
 80167a2:	4631      	mov	r1, r6
 80167a4:	4628      	mov	r0, r5
 80167a6:	47b8      	blx	r7
 80167a8:	3001      	adds	r0, #1
 80167aa:	f43f ae78 	beq.w	801649e <_printf_float+0xb6>
 80167ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167b2:	4631      	mov	r1, r6
 80167b4:	4628      	mov	r0, r5
 80167b6:	47b8      	blx	r7
 80167b8:	3001      	adds	r0, #1
 80167ba:	f43f ae70 	beq.w	801649e <_printf_float+0xb6>
 80167be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80167c2:	2200      	movs	r2, #0
 80167c4:	2300      	movs	r3, #0
 80167c6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80167ca:	f7ea f9ad 	bl	8000b28 <__aeabi_dcmpeq>
 80167ce:	b9c0      	cbnz	r0, 8016802 <_printf_float+0x41a>
 80167d0:	4653      	mov	r3, sl
 80167d2:	f108 0201 	add.w	r2, r8, #1
 80167d6:	4631      	mov	r1, r6
 80167d8:	4628      	mov	r0, r5
 80167da:	47b8      	blx	r7
 80167dc:	3001      	adds	r0, #1
 80167de:	d10c      	bne.n	80167fa <_printf_float+0x412>
 80167e0:	e65d      	b.n	801649e <_printf_float+0xb6>
 80167e2:	2301      	movs	r3, #1
 80167e4:	465a      	mov	r2, fp
 80167e6:	4631      	mov	r1, r6
 80167e8:	4628      	mov	r0, r5
 80167ea:	47b8      	blx	r7
 80167ec:	3001      	adds	r0, #1
 80167ee:	f43f ae56 	beq.w	801649e <_printf_float+0xb6>
 80167f2:	f108 0801 	add.w	r8, r8, #1
 80167f6:	45d0      	cmp	r8, sl
 80167f8:	dbf3      	blt.n	80167e2 <_printf_float+0x3fa>
 80167fa:	464b      	mov	r3, r9
 80167fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016800:	e6df      	b.n	80165c2 <_printf_float+0x1da>
 8016802:	f04f 0800 	mov.w	r8, #0
 8016806:	f104 0b1a 	add.w	fp, r4, #26
 801680a:	e7f4      	b.n	80167f6 <_printf_float+0x40e>
 801680c:	2301      	movs	r3, #1
 801680e:	4642      	mov	r2, r8
 8016810:	e7e1      	b.n	80167d6 <_printf_float+0x3ee>
 8016812:	2301      	movs	r3, #1
 8016814:	464a      	mov	r2, r9
 8016816:	4631      	mov	r1, r6
 8016818:	4628      	mov	r0, r5
 801681a:	47b8      	blx	r7
 801681c:	3001      	adds	r0, #1
 801681e:	f43f ae3e 	beq.w	801649e <_printf_float+0xb6>
 8016822:	f108 0801 	add.w	r8, r8, #1
 8016826:	68e3      	ldr	r3, [r4, #12]
 8016828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801682a:	1a5b      	subs	r3, r3, r1
 801682c:	4543      	cmp	r3, r8
 801682e:	dcf0      	bgt.n	8016812 <_printf_float+0x42a>
 8016830:	e6fc      	b.n	801662c <_printf_float+0x244>
 8016832:	f04f 0800 	mov.w	r8, #0
 8016836:	f104 0919 	add.w	r9, r4, #25
 801683a:	e7f4      	b.n	8016826 <_printf_float+0x43e>

0801683c <_printf_common>:
 801683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016840:	4616      	mov	r6, r2
 8016842:	4698      	mov	r8, r3
 8016844:	688a      	ldr	r2, [r1, #8]
 8016846:	690b      	ldr	r3, [r1, #16]
 8016848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801684c:	4293      	cmp	r3, r2
 801684e:	bfb8      	it	lt
 8016850:	4613      	movlt	r3, r2
 8016852:	6033      	str	r3, [r6, #0]
 8016854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016858:	4607      	mov	r7, r0
 801685a:	460c      	mov	r4, r1
 801685c:	b10a      	cbz	r2, 8016862 <_printf_common+0x26>
 801685e:	3301      	adds	r3, #1
 8016860:	6033      	str	r3, [r6, #0]
 8016862:	6823      	ldr	r3, [r4, #0]
 8016864:	0699      	lsls	r1, r3, #26
 8016866:	bf42      	ittt	mi
 8016868:	6833      	ldrmi	r3, [r6, #0]
 801686a:	3302      	addmi	r3, #2
 801686c:	6033      	strmi	r3, [r6, #0]
 801686e:	6825      	ldr	r5, [r4, #0]
 8016870:	f015 0506 	ands.w	r5, r5, #6
 8016874:	d106      	bne.n	8016884 <_printf_common+0x48>
 8016876:	f104 0a19 	add.w	sl, r4, #25
 801687a:	68e3      	ldr	r3, [r4, #12]
 801687c:	6832      	ldr	r2, [r6, #0]
 801687e:	1a9b      	subs	r3, r3, r2
 8016880:	42ab      	cmp	r3, r5
 8016882:	dc26      	bgt.n	80168d2 <_printf_common+0x96>
 8016884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016888:	6822      	ldr	r2, [r4, #0]
 801688a:	3b00      	subs	r3, #0
 801688c:	bf18      	it	ne
 801688e:	2301      	movne	r3, #1
 8016890:	0692      	lsls	r2, r2, #26
 8016892:	d42b      	bmi.n	80168ec <_printf_common+0xb0>
 8016894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016898:	4641      	mov	r1, r8
 801689a:	4638      	mov	r0, r7
 801689c:	47c8      	blx	r9
 801689e:	3001      	adds	r0, #1
 80168a0:	d01e      	beq.n	80168e0 <_printf_common+0xa4>
 80168a2:	6823      	ldr	r3, [r4, #0]
 80168a4:	6922      	ldr	r2, [r4, #16]
 80168a6:	f003 0306 	and.w	r3, r3, #6
 80168aa:	2b04      	cmp	r3, #4
 80168ac:	bf02      	ittt	eq
 80168ae:	68e5      	ldreq	r5, [r4, #12]
 80168b0:	6833      	ldreq	r3, [r6, #0]
 80168b2:	1aed      	subeq	r5, r5, r3
 80168b4:	68a3      	ldr	r3, [r4, #8]
 80168b6:	bf0c      	ite	eq
 80168b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168bc:	2500      	movne	r5, #0
 80168be:	4293      	cmp	r3, r2
 80168c0:	bfc4      	itt	gt
 80168c2:	1a9b      	subgt	r3, r3, r2
 80168c4:	18ed      	addgt	r5, r5, r3
 80168c6:	2600      	movs	r6, #0
 80168c8:	341a      	adds	r4, #26
 80168ca:	42b5      	cmp	r5, r6
 80168cc:	d11a      	bne.n	8016904 <_printf_common+0xc8>
 80168ce:	2000      	movs	r0, #0
 80168d0:	e008      	b.n	80168e4 <_printf_common+0xa8>
 80168d2:	2301      	movs	r3, #1
 80168d4:	4652      	mov	r2, sl
 80168d6:	4641      	mov	r1, r8
 80168d8:	4638      	mov	r0, r7
 80168da:	47c8      	blx	r9
 80168dc:	3001      	adds	r0, #1
 80168de:	d103      	bne.n	80168e8 <_printf_common+0xac>
 80168e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80168e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168e8:	3501      	adds	r5, #1
 80168ea:	e7c6      	b.n	801687a <_printf_common+0x3e>
 80168ec:	18e1      	adds	r1, r4, r3
 80168ee:	1c5a      	adds	r2, r3, #1
 80168f0:	2030      	movs	r0, #48	@ 0x30
 80168f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80168f6:	4422      	add	r2, r4
 80168f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80168fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016900:	3302      	adds	r3, #2
 8016902:	e7c7      	b.n	8016894 <_printf_common+0x58>
 8016904:	2301      	movs	r3, #1
 8016906:	4622      	mov	r2, r4
 8016908:	4641      	mov	r1, r8
 801690a:	4638      	mov	r0, r7
 801690c:	47c8      	blx	r9
 801690e:	3001      	adds	r0, #1
 8016910:	d0e6      	beq.n	80168e0 <_printf_common+0xa4>
 8016912:	3601      	adds	r6, #1
 8016914:	e7d9      	b.n	80168ca <_printf_common+0x8e>
	...

08016918 <_printf_i>:
 8016918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801691c:	7e0f      	ldrb	r7, [r1, #24]
 801691e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016920:	2f78      	cmp	r7, #120	@ 0x78
 8016922:	4691      	mov	r9, r2
 8016924:	4680      	mov	r8, r0
 8016926:	460c      	mov	r4, r1
 8016928:	469a      	mov	sl, r3
 801692a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801692e:	d807      	bhi.n	8016940 <_printf_i+0x28>
 8016930:	2f62      	cmp	r7, #98	@ 0x62
 8016932:	d80a      	bhi.n	801694a <_printf_i+0x32>
 8016934:	2f00      	cmp	r7, #0
 8016936:	f000 80d2 	beq.w	8016ade <_printf_i+0x1c6>
 801693a:	2f58      	cmp	r7, #88	@ 0x58
 801693c:	f000 80b9 	beq.w	8016ab2 <_printf_i+0x19a>
 8016940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016948:	e03a      	b.n	80169c0 <_printf_i+0xa8>
 801694a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801694e:	2b15      	cmp	r3, #21
 8016950:	d8f6      	bhi.n	8016940 <_printf_i+0x28>
 8016952:	a101      	add	r1, pc, #4	@ (adr r1, 8016958 <_printf_i+0x40>)
 8016954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016958:	080169b1 	.word	0x080169b1
 801695c:	080169c5 	.word	0x080169c5
 8016960:	08016941 	.word	0x08016941
 8016964:	08016941 	.word	0x08016941
 8016968:	08016941 	.word	0x08016941
 801696c:	08016941 	.word	0x08016941
 8016970:	080169c5 	.word	0x080169c5
 8016974:	08016941 	.word	0x08016941
 8016978:	08016941 	.word	0x08016941
 801697c:	08016941 	.word	0x08016941
 8016980:	08016941 	.word	0x08016941
 8016984:	08016ac5 	.word	0x08016ac5
 8016988:	080169ef 	.word	0x080169ef
 801698c:	08016a7f 	.word	0x08016a7f
 8016990:	08016941 	.word	0x08016941
 8016994:	08016941 	.word	0x08016941
 8016998:	08016ae7 	.word	0x08016ae7
 801699c:	08016941 	.word	0x08016941
 80169a0:	080169ef 	.word	0x080169ef
 80169a4:	08016941 	.word	0x08016941
 80169a8:	08016941 	.word	0x08016941
 80169ac:	08016a87 	.word	0x08016a87
 80169b0:	6833      	ldr	r3, [r6, #0]
 80169b2:	1d1a      	adds	r2, r3, #4
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	6032      	str	r2, [r6, #0]
 80169b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80169bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80169c0:	2301      	movs	r3, #1
 80169c2:	e09d      	b.n	8016b00 <_printf_i+0x1e8>
 80169c4:	6833      	ldr	r3, [r6, #0]
 80169c6:	6820      	ldr	r0, [r4, #0]
 80169c8:	1d19      	adds	r1, r3, #4
 80169ca:	6031      	str	r1, [r6, #0]
 80169cc:	0606      	lsls	r6, r0, #24
 80169ce:	d501      	bpl.n	80169d4 <_printf_i+0xbc>
 80169d0:	681d      	ldr	r5, [r3, #0]
 80169d2:	e003      	b.n	80169dc <_printf_i+0xc4>
 80169d4:	0645      	lsls	r5, r0, #25
 80169d6:	d5fb      	bpl.n	80169d0 <_printf_i+0xb8>
 80169d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80169dc:	2d00      	cmp	r5, #0
 80169de:	da03      	bge.n	80169e8 <_printf_i+0xd0>
 80169e0:	232d      	movs	r3, #45	@ 0x2d
 80169e2:	426d      	negs	r5, r5
 80169e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80169e8:	4859      	ldr	r0, [pc, #356]	@ (8016b50 <_printf_i+0x238>)
 80169ea:	230a      	movs	r3, #10
 80169ec:	e011      	b.n	8016a12 <_printf_i+0xfa>
 80169ee:	6821      	ldr	r1, [r4, #0]
 80169f0:	6833      	ldr	r3, [r6, #0]
 80169f2:	0608      	lsls	r0, r1, #24
 80169f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80169f8:	d402      	bmi.n	8016a00 <_printf_i+0xe8>
 80169fa:	0649      	lsls	r1, r1, #25
 80169fc:	bf48      	it	mi
 80169fe:	b2ad      	uxthmi	r5, r5
 8016a00:	2f6f      	cmp	r7, #111	@ 0x6f
 8016a02:	4853      	ldr	r0, [pc, #332]	@ (8016b50 <_printf_i+0x238>)
 8016a04:	6033      	str	r3, [r6, #0]
 8016a06:	bf14      	ite	ne
 8016a08:	230a      	movne	r3, #10
 8016a0a:	2308      	moveq	r3, #8
 8016a0c:	2100      	movs	r1, #0
 8016a0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016a12:	6866      	ldr	r6, [r4, #4]
 8016a14:	60a6      	str	r6, [r4, #8]
 8016a16:	2e00      	cmp	r6, #0
 8016a18:	bfa2      	ittt	ge
 8016a1a:	6821      	ldrge	r1, [r4, #0]
 8016a1c:	f021 0104 	bicge.w	r1, r1, #4
 8016a20:	6021      	strge	r1, [r4, #0]
 8016a22:	b90d      	cbnz	r5, 8016a28 <_printf_i+0x110>
 8016a24:	2e00      	cmp	r6, #0
 8016a26:	d04b      	beq.n	8016ac0 <_printf_i+0x1a8>
 8016a28:	4616      	mov	r6, r2
 8016a2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8016a2e:	fb03 5711 	mls	r7, r3, r1, r5
 8016a32:	5dc7      	ldrb	r7, [r0, r7]
 8016a34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a38:	462f      	mov	r7, r5
 8016a3a:	42bb      	cmp	r3, r7
 8016a3c:	460d      	mov	r5, r1
 8016a3e:	d9f4      	bls.n	8016a2a <_printf_i+0x112>
 8016a40:	2b08      	cmp	r3, #8
 8016a42:	d10b      	bne.n	8016a5c <_printf_i+0x144>
 8016a44:	6823      	ldr	r3, [r4, #0]
 8016a46:	07df      	lsls	r7, r3, #31
 8016a48:	d508      	bpl.n	8016a5c <_printf_i+0x144>
 8016a4a:	6923      	ldr	r3, [r4, #16]
 8016a4c:	6861      	ldr	r1, [r4, #4]
 8016a4e:	4299      	cmp	r1, r3
 8016a50:	bfde      	ittt	le
 8016a52:	2330      	movle	r3, #48	@ 0x30
 8016a54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8016a5c:	1b92      	subs	r2, r2, r6
 8016a5e:	6122      	str	r2, [r4, #16]
 8016a60:	f8cd a000 	str.w	sl, [sp]
 8016a64:	464b      	mov	r3, r9
 8016a66:	aa03      	add	r2, sp, #12
 8016a68:	4621      	mov	r1, r4
 8016a6a:	4640      	mov	r0, r8
 8016a6c:	f7ff fee6 	bl	801683c <_printf_common>
 8016a70:	3001      	adds	r0, #1
 8016a72:	d14a      	bne.n	8016b0a <_printf_i+0x1f2>
 8016a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016a78:	b004      	add	sp, #16
 8016a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	f043 0320 	orr.w	r3, r3, #32
 8016a84:	6023      	str	r3, [r4, #0]
 8016a86:	4833      	ldr	r0, [pc, #204]	@ (8016b54 <_printf_i+0x23c>)
 8016a88:	2778      	movs	r7, #120	@ 0x78
 8016a8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016a8e:	6823      	ldr	r3, [r4, #0]
 8016a90:	6831      	ldr	r1, [r6, #0]
 8016a92:	061f      	lsls	r7, r3, #24
 8016a94:	f851 5b04 	ldr.w	r5, [r1], #4
 8016a98:	d402      	bmi.n	8016aa0 <_printf_i+0x188>
 8016a9a:	065f      	lsls	r7, r3, #25
 8016a9c:	bf48      	it	mi
 8016a9e:	b2ad      	uxthmi	r5, r5
 8016aa0:	6031      	str	r1, [r6, #0]
 8016aa2:	07d9      	lsls	r1, r3, #31
 8016aa4:	bf44      	itt	mi
 8016aa6:	f043 0320 	orrmi.w	r3, r3, #32
 8016aaa:	6023      	strmi	r3, [r4, #0]
 8016aac:	b11d      	cbz	r5, 8016ab6 <_printf_i+0x19e>
 8016aae:	2310      	movs	r3, #16
 8016ab0:	e7ac      	b.n	8016a0c <_printf_i+0xf4>
 8016ab2:	4827      	ldr	r0, [pc, #156]	@ (8016b50 <_printf_i+0x238>)
 8016ab4:	e7e9      	b.n	8016a8a <_printf_i+0x172>
 8016ab6:	6823      	ldr	r3, [r4, #0]
 8016ab8:	f023 0320 	bic.w	r3, r3, #32
 8016abc:	6023      	str	r3, [r4, #0]
 8016abe:	e7f6      	b.n	8016aae <_printf_i+0x196>
 8016ac0:	4616      	mov	r6, r2
 8016ac2:	e7bd      	b.n	8016a40 <_printf_i+0x128>
 8016ac4:	6833      	ldr	r3, [r6, #0]
 8016ac6:	6825      	ldr	r5, [r4, #0]
 8016ac8:	6961      	ldr	r1, [r4, #20]
 8016aca:	1d18      	adds	r0, r3, #4
 8016acc:	6030      	str	r0, [r6, #0]
 8016ace:	062e      	lsls	r6, r5, #24
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	d501      	bpl.n	8016ad8 <_printf_i+0x1c0>
 8016ad4:	6019      	str	r1, [r3, #0]
 8016ad6:	e002      	b.n	8016ade <_printf_i+0x1c6>
 8016ad8:	0668      	lsls	r0, r5, #25
 8016ada:	d5fb      	bpl.n	8016ad4 <_printf_i+0x1bc>
 8016adc:	8019      	strh	r1, [r3, #0]
 8016ade:	2300      	movs	r3, #0
 8016ae0:	6123      	str	r3, [r4, #16]
 8016ae2:	4616      	mov	r6, r2
 8016ae4:	e7bc      	b.n	8016a60 <_printf_i+0x148>
 8016ae6:	6833      	ldr	r3, [r6, #0]
 8016ae8:	1d1a      	adds	r2, r3, #4
 8016aea:	6032      	str	r2, [r6, #0]
 8016aec:	681e      	ldr	r6, [r3, #0]
 8016aee:	6862      	ldr	r2, [r4, #4]
 8016af0:	2100      	movs	r1, #0
 8016af2:	4630      	mov	r0, r6
 8016af4:	f7e9 fb9c 	bl	8000230 <memchr>
 8016af8:	b108      	cbz	r0, 8016afe <_printf_i+0x1e6>
 8016afa:	1b80      	subs	r0, r0, r6
 8016afc:	6060      	str	r0, [r4, #4]
 8016afe:	6863      	ldr	r3, [r4, #4]
 8016b00:	6123      	str	r3, [r4, #16]
 8016b02:	2300      	movs	r3, #0
 8016b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016b08:	e7aa      	b.n	8016a60 <_printf_i+0x148>
 8016b0a:	6923      	ldr	r3, [r4, #16]
 8016b0c:	4632      	mov	r2, r6
 8016b0e:	4649      	mov	r1, r9
 8016b10:	4640      	mov	r0, r8
 8016b12:	47d0      	blx	sl
 8016b14:	3001      	adds	r0, #1
 8016b16:	d0ad      	beq.n	8016a74 <_printf_i+0x15c>
 8016b18:	6823      	ldr	r3, [r4, #0]
 8016b1a:	079b      	lsls	r3, r3, #30
 8016b1c:	d413      	bmi.n	8016b46 <_printf_i+0x22e>
 8016b1e:	68e0      	ldr	r0, [r4, #12]
 8016b20:	9b03      	ldr	r3, [sp, #12]
 8016b22:	4298      	cmp	r0, r3
 8016b24:	bfb8      	it	lt
 8016b26:	4618      	movlt	r0, r3
 8016b28:	e7a6      	b.n	8016a78 <_printf_i+0x160>
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	4632      	mov	r2, r6
 8016b2e:	4649      	mov	r1, r9
 8016b30:	4640      	mov	r0, r8
 8016b32:	47d0      	blx	sl
 8016b34:	3001      	adds	r0, #1
 8016b36:	d09d      	beq.n	8016a74 <_printf_i+0x15c>
 8016b38:	3501      	adds	r5, #1
 8016b3a:	68e3      	ldr	r3, [r4, #12]
 8016b3c:	9903      	ldr	r1, [sp, #12]
 8016b3e:	1a5b      	subs	r3, r3, r1
 8016b40:	42ab      	cmp	r3, r5
 8016b42:	dcf2      	bgt.n	8016b2a <_printf_i+0x212>
 8016b44:	e7eb      	b.n	8016b1e <_printf_i+0x206>
 8016b46:	2500      	movs	r5, #0
 8016b48:	f104 0619 	add.w	r6, r4, #25
 8016b4c:	e7f5      	b.n	8016b3a <_printf_i+0x222>
 8016b4e:	bf00      	nop
 8016b50:	0801a0b5 	.word	0x0801a0b5
 8016b54:	0801a0c6 	.word	0x0801a0c6

08016b58 <std>:
 8016b58:	2300      	movs	r3, #0
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	4604      	mov	r4, r0
 8016b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8016b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b66:	6083      	str	r3, [r0, #8]
 8016b68:	8181      	strh	r1, [r0, #12]
 8016b6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016b6c:	81c2      	strh	r2, [r0, #14]
 8016b6e:	6183      	str	r3, [r0, #24]
 8016b70:	4619      	mov	r1, r3
 8016b72:	2208      	movs	r2, #8
 8016b74:	305c      	adds	r0, #92	@ 0x5c
 8016b76:	f000 faab 	bl	80170d0 <memset>
 8016b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8016bb0 <std+0x58>)
 8016b7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8016bb4 <std+0x5c>)
 8016b80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016b82:	4b0d      	ldr	r3, [pc, #52]	@ (8016bb8 <std+0x60>)
 8016b84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016b86:	4b0d      	ldr	r3, [pc, #52]	@ (8016bbc <std+0x64>)
 8016b88:	6323      	str	r3, [r4, #48]	@ 0x30
 8016b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc0 <std+0x68>)
 8016b8c:	6224      	str	r4, [r4, #32]
 8016b8e:	429c      	cmp	r4, r3
 8016b90:	d006      	beq.n	8016ba0 <std+0x48>
 8016b92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016b96:	4294      	cmp	r4, r2
 8016b98:	d002      	beq.n	8016ba0 <std+0x48>
 8016b9a:	33d0      	adds	r3, #208	@ 0xd0
 8016b9c:	429c      	cmp	r4, r3
 8016b9e:	d105      	bne.n	8016bac <std+0x54>
 8016ba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ba8:	f000 bbaa 	b.w	8017300 <__retarget_lock_init_recursive>
 8016bac:	bd10      	pop	{r4, pc}
 8016bae:	bf00      	nop
 8016bb0:	08016e5d 	.word	0x08016e5d
 8016bb4:	08016e7f 	.word	0x08016e7f
 8016bb8:	08016eb7 	.word	0x08016eb7
 8016bbc:	08016edb 	.word	0x08016edb
 8016bc0:	20017abc 	.word	0x20017abc

08016bc4 <stdio_exit_handler>:
 8016bc4:	4a02      	ldr	r2, [pc, #8]	@ (8016bd0 <stdio_exit_handler+0xc>)
 8016bc6:	4903      	ldr	r1, [pc, #12]	@ (8016bd4 <stdio_exit_handler+0x10>)
 8016bc8:	4803      	ldr	r0, [pc, #12]	@ (8016bd8 <stdio_exit_handler+0x14>)
 8016bca:	f000 b869 	b.w	8016ca0 <_fwalk_sglue>
 8016bce:	bf00      	nop
 8016bd0:	200000bc 	.word	0x200000bc
 8016bd4:	08018e05 	.word	0x08018e05
 8016bd8:	200000cc 	.word	0x200000cc

08016bdc <cleanup_stdio>:
 8016bdc:	6841      	ldr	r1, [r0, #4]
 8016bde:	4b0c      	ldr	r3, [pc, #48]	@ (8016c10 <cleanup_stdio+0x34>)
 8016be0:	4299      	cmp	r1, r3
 8016be2:	b510      	push	{r4, lr}
 8016be4:	4604      	mov	r4, r0
 8016be6:	d001      	beq.n	8016bec <cleanup_stdio+0x10>
 8016be8:	f002 f90c 	bl	8018e04 <_fflush_r>
 8016bec:	68a1      	ldr	r1, [r4, #8]
 8016bee:	4b09      	ldr	r3, [pc, #36]	@ (8016c14 <cleanup_stdio+0x38>)
 8016bf0:	4299      	cmp	r1, r3
 8016bf2:	d002      	beq.n	8016bfa <cleanup_stdio+0x1e>
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	f002 f905 	bl	8018e04 <_fflush_r>
 8016bfa:	68e1      	ldr	r1, [r4, #12]
 8016bfc:	4b06      	ldr	r3, [pc, #24]	@ (8016c18 <cleanup_stdio+0x3c>)
 8016bfe:	4299      	cmp	r1, r3
 8016c00:	d004      	beq.n	8016c0c <cleanup_stdio+0x30>
 8016c02:	4620      	mov	r0, r4
 8016c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c08:	f002 b8fc 	b.w	8018e04 <_fflush_r>
 8016c0c:	bd10      	pop	{r4, pc}
 8016c0e:	bf00      	nop
 8016c10:	20017abc 	.word	0x20017abc
 8016c14:	20017b24 	.word	0x20017b24
 8016c18:	20017b8c 	.word	0x20017b8c

08016c1c <global_stdio_init.part.0>:
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8016c4c <global_stdio_init.part.0+0x30>)
 8016c20:	4c0b      	ldr	r4, [pc, #44]	@ (8016c50 <global_stdio_init.part.0+0x34>)
 8016c22:	4a0c      	ldr	r2, [pc, #48]	@ (8016c54 <global_stdio_init.part.0+0x38>)
 8016c24:	601a      	str	r2, [r3, #0]
 8016c26:	4620      	mov	r0, r4
 8016c28:	2200      	movs	r2, #0
 8016c2a:	2104      	movs	r1, #4
 8016c2c:	f7ff ff94 	bl	8016b58 <std>
 8016c30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016c34:	2201      	movs	r2, #1
 8016c36:	2109      	movs	r1, #9
 8016c38:	f7ff ff8e 	bl	8016b58 <std>
 8016c3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016c40:	2202      	movs	r2, #2
 8016c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c46:	2112      	movs	r1, #18
 8016c48:	f7ff bf86 	b.w	8016b58 <std>
 8016c4c:	20017bf4 	.word	0x20017bf4
 8016c50:	20017abc 	.word	0x20017abc
 8016c54:	08016bc5 	.word	0x08016bc5

08016c58 <__sfp_lock_acquire>:
 8016c58:	4801      	ldr	r0, [pc, #4]	@ (8016c60 <__sfp_lock_acquire+0x8>)
 8016c5a:	f000 bb52 	b.w	8017302 <__retarget_lock_acquire_recursive>
 8016c5e:	bf00      	nop
 8016c60:	20017bfe 	.word	0x20017bfe

08016c64 <__sfp_lock_release>:
 8016c64:	4801      	ldr	r0, [pc, #4]	@ (8016c6c <__sfp_lock_release+0x8>)
 8016c66:	f000 bb4d 	b.w	8017304 <__retarget_lock_release_recursive>
 8016c6a:	bf00      	nop
 8016c6c:	20017bfe 	.word	0x20017bfe

08016c70 <__sinit>:
 8016c70:	b510      	push	{r4, lr}
 8016c72:	4604      	mov	r4, r0
 8016c74:	f7ff fff0 	bl	8016c58 <__sfp_lock_acquire>
 8016c78:	6a23      	ldr	r3, [r4, #32]
 8016c7a:	b11b      	cbz	r3, 8016c84 <__sinit+0x14>
 8016c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c80:	f7ff bff0 	b.w	8016c64 <__sfp_lock_release>
 8016c84:	4b04      	ldr	r3, [pc, #16]	@ (8016c98 <__sinit+0x28>)
 8016c86:	6223      	str	r3, [r4, #32]
 8016c88:	4b04      	ldr	r3, [pc, #16]	@ (8016c9c <__sinit+0x2c>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d1f5      	bne.n	8016c7c <__sinit+0xc>
 8016c90:	f7ff ffc4 	bl	8016c1c <global_stdio_init.part.0>
 8016c94:	e7f2      	b.n	8016c7c <__sinit+0xc>
 8016c96:	bf00      	nop
 8016c98:	08016bdd 	.word	0x08016bdd
 8016c9c:	20017bf4 	.word	0x20017bf4

08016ca0 <_fwalk_sglue>:
 8016ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ca4:	4607      	mov	r7, r0
 8016ca6:	4688      	mov	r8, r1
 8016ca8:	4614      	mov	r4, r2
 8016caa:	2600      	movs	r6, #0
 8016cac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016cb0:	f1b9 0901 	subs.w	r9, r9, #1
 8016cb4:	d505      	bpl.n	8016cc2 <_fwalk_sglue+0x22>
 8016cb6:	6824      	ldr	r4, [r4, #0]
 8016cb8:	2c00      	cmp	r4, #0
 8016cba:	d1f7      	bne.n	8016cac <_fwalk_sglue+0xc>
 8016cbc:	4630      	mov	r0, r6
 8016cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016cc2:	89ab      	ldrh	r3, [r5, #12]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d907      	bls.n	8016cd8 <_fwalk_sglue+0x38>
 8016cc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ccc:	3301      	adds	r3, #1
 8016cce:	d003      	beq.n	8016cd8 <_fwalk_sglue+0x38>
 8016cd0:	4629      	mov	r1, r5
 8016cd2:	4638      	mov	r0, r7
 8016cd4:	47c0      	blx	r8
 8016cd6:	4306      	orrs	r6, r0
 8016cd8:	3568      	adds	r5, #104	@ 0x68
 8016cda:	e7e9      	b.n	8016cb0 <_fwalk_sglue+0x10>

08016cdc <_fwrite_r>:
 8016cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ce0:	9c08      	ldr	r4, [sp, #32]
 8016ce2:	468a      	mov	sl, r1
 8016ce4:	4690      	mov	r8, r2
 8016ce6:	fb02 f903 	mul.w	r9, r2, r3
 8016cea:	4606      	mov	r6, r0
 8016cec:	b118      	cbz	r0, 8016cf6 <_fwrite_r+0x1a>
 8016cee:	6a03      	ldr	r3, [r0, #32]
 8016cf0:	b90b      	cbnz	r3, 8016cf6 <_fwrite_r+0x1a>
 8016cf2:	f7ff ffbd 	bl	8016c70 <__sinit>
 8016cf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016cf8:	07dd      	lsls	r5, r3, #31
 8016cfa:	d405      	bmi.n	8016d08 <_fwrite_r+0x2c>
 8016cfc:	89a3      	ldrh	r3, [r4, #12]
 8016cfe:	0598      	lsls	r0, r3, #22
 8016d00:	d402      	bmi.n	8016d08 <_fwrite_r+0x2c>
 8016d02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d04:	f000 fafd 	bl	8017302 <__retarget_lock_acquire_recursive>
 8016d08:	89a3      	ldrh	r3, [r4, #12]
 8016d0a:	0719      	lsls	r1, r3, #28
 8016d0c:	d516      	bpl.n	8016d3c <_fwrite_r+0x60>
 8016d0e:	6923      	ldr	r3, [r4, #16]
 8016d10:	b1a3      	cbz	r3, 8016d3c <_fwrite_r+0x60>
 8016d12:	2500      	movs	r5, #0
 8016d14:	454d      	cmp	r5, r9
 8016d16:	d01f      	beq.n	8016d58 <_fwrite_r+0x7c>
 8016d18:	68a7      	ldr	r7, [r4, #8]
 8016d1a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8016d1e:	3f01      	subs	r7, #1
 8016d20:	2f00      	cmp	r7, #0
 8016d22:	60a7      	str	r7, [r4, #8]
 8016d24:	da04      	bge.n	8016d30 <_fwrite_r+0x54>
 8016d26:	69a3      	ldr	r3, [r4, #24]
 8016d28:	429f      	cmp	r7, r3
 8016d2a:	db0f      	blt.n	8016d4c <_fwrite_r+0x70>
 8016d2c:	290a      	cmp	r1, #10
 8016d2e:	d00d      	beq.n	8016d4c <_fwrite_r+0x70>
 8016d30:	6823      	ldr	r3, [r4, #0]
 8016d32:	1c5a      	adds	r2, r3, #1
 8016d34:	6022      	str	r2, [r4, #0]
 8016d36:	7019      	strb	r1, [r3, #0]
 8016d38:	3501      	adds	r5, #1
 8016d3a:	e7eb      	b.n	8016d14 <_fwrite_r+0x38>
 8016d3c:	4621      	mov	r1, r4
 8016d3e:	4630      	mov	r0, r6
 8016d40:	f000 f946 	bl	8016fd0 <__swsetup_r>
 8016d44:	2800      	cmp	r0, #0
 8016d46:	d0e4      	beq.n	8016d12 <_fwrite_r+0x36>
 8016d48:	2500      	movs	r5, #0
 8016d4a:	e005      	b.n	8016d58 <_fwrite_r+0x7c>
 8016d4c:	4622      	mov	r2, r4
 8016d4e:	4630      	mov	r0, r6
 8016d50:	f000 f900 	bl	8016f54 <__swbuf_r>
 8016d54:	3001      	adds	r0, #1
 8016d56:	d1ef      	bne.n	8016d38 <_fwrite_r+0x5c>
 8016d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016d5a:	07da      	lsls	r2, r3, #31
 8016d5c:	d405      	bmi.n	8016d6a <_fwrite_r+0x8e>
 8016d5e:	89a3      	ldrh	r3, [r4, #12]
 8016d60:	059b      	lsls	r3, r3, #22
 8016d62:	d402      	bmi.n	8016d6a <_fwrite_r+0x8e>
 8016d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016d66:	f000 facd 	bl	8017304 <__retarget_lock_release_recursive>
 8016d6a:	fbb5 f0f8 	udiv	r0, r5, r8
 8016d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016d74 <fwrite>:
 8016d74:	b507      	push	{r0, r1, r2, lr}
 8016d76:	9300      	str	r3, [sp, #0]
 8016d78:	4613      	mov	r3, r2
 8016d7a:	460a      	mov	r2, r1
 8016d7c:	4601      	mov	r1, r0
 8016d7e:	4803      	ldr	r0, [pc, #12]	@ (8016d8c <fwrite+0x18>)
 8016d80:	6800      	ldr	r0, [r0, #0]
 8016d82:	f7ff ffab 	bl	8016cdc <_fwrite_r>
 8016d86:	b003      	add	sp, #12
 8016d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d8c:	200000c8 	.word	0x200000c8

08016d90 <iprintf>:
 8016d90:	b40f      	push	{r0, r1, r2, r3}
 8016d92:	b507      	push	{r0, r1, r2, lr}
 8016d94:	4906      	ldr	r1, [pc, #24]	@ (8016db0 <iprintf+0x20>)
 8016d96:	ab04      	add	r3, sp, #16
 8016d98:	6808      	ldr	r0, [r1, #0]
 8016d9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d9e:	6881      	ldr	r1, [r0, #8]
 8016da0:	9301      	str	r3, [sp, #4]
 8016da2:	f001 fe93 	bl	8018acc <_vfiprintf_r>
 8016da6:	b003      	add	sp, #12
 8016da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dac:	b004      	add	sp, #16
 8016dae:	4770      	bx	lr
 8016db0:	200000c8 	.word	0x200000c8

08016db4 <sniprintf>:
 8016db4:	b40c      	push	{r2, r3}
 8016db6:	b530      	push	{r4, r5, lr}
 8016db8:	4b17      	ldr	r3, [pc, #92]	@ (8016e18 <sniprintf+0x64>)
 8016dba:	1e0c      	subs	r4, r1, #0
 8016dbc:	681d      	ldr	r5, [r3, #0]
 8016dbe:	b09d      	sub	sp, #116	@ 0x74
 8016dc0:	da08      	bge.n	8016dd4 <sniprintf+0x20>
 8016dc2:	238b      	movs	r3, #139	@ 0x8b
 8016dc4:	602b      	str	r3, [r5, #0]
 8016dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016dca:	b01d      	add	sp, #116	@ 0x74
 8016dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016dd0:	b002      	add	sp, #8
 8016dd2:	4770      	bx	lr
 8016dd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016dd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ddc:	bf14      	ite	ne
 8016dde:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016de2:	4623      	moveq	r3, r4
 8016de4:	9304      	str	r3, [sp, #16]
 8016de6:	9307      	str	r3, [sp, #28]
 8016de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016dec:	9002      	str	r0, [sp, #8]
 8016dee:	9006      	str	r0, [sp, #24]
 8016df0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016df4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016df6:	ab21      	add	r3, sp, #132	@ 0x84
 8016df8:	a902      	add	r1, sp, #8
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	f001 fd3f 	bl	8018880 <_svfiprintf_r>
 8016e02:	1c43      	adds	r3, r0, #1
 8016e04:	bfbc      	itt	lt
 8016e06:	238b      	movlt	r3, #139	@ 0x8b
 8016e08:	602b      	strlt	r3, [r5, #0]
 8016e0a:	2c00      	cmp	r4, #0
 8016e0c:	d0dd      	beq.n	8016dca <sniprintf+0x16>
 8016e0e:	9b02      	ldr	r3, [sp, #8]
 8016e10:	2200      	movs	r2, #0
 8016e12:	701a      	strb	r2, [r3, #0]
 8016e14:	e7d9      	b.n	8016dca <sniprintf+0x16>
 8016e16:	bf00      	nop
 8016e18:	200000c8 	.word	0x200000c8

08016e1c <siprintf>:
 8016e1c:	b40e      	push	{r1, r2, r3}
 8016e1e:	b500      	push	{lr}
 8016e20:	b09c      	sub	sp, #112	@ 0x70
 8016e22:	ab1d      	add	r3, sp, #116	@ 0x74
 8016e24:	9002      	str	r0, [sp, #8]
 8016e26:	9006      	str	r0, [sp, #24]
 8016e28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e2c:	4809      	ldr	r0, [pc, #36]	@ (8016e54 <siprintf+0x38>)
 8016e2e:	9107      	str	r1, [sp, #28]
 8016e30:	9104      	str	r1, [sp, #16]
 8016e32:	4909      	ldr	r1, [pc, #36]	@ (8016e58 <siprintf+0x3c>)
 8016e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e38:	9105      	str	r1, [sp, #20]
 8016e3a:	6800      	ldr	r0, [r0, #0]
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	a902      	add	r1, sp, #8
 8016e40:	f001 fd1e 	bl	8018880 <_svfiprintf_r>
 8016e44:	9b02      	ldr	r3, [sp, #8]
 8016e46:	2200      	movs	r2, #0
 8016e48:	701a      	strb	r2, [r3, #0]
 8016e4a:	b01c      	add	sp, #112	@ 0x70
 8016e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e50:	b003      	add	sp, #12
 8016e52:	4770      	bx	lr
 8016e54:	200000c8 	.word	0x200000c8
 8016e58:	ffff0208 	.word	0xffff0208

08016e5c <__sread>:
 8016e5c:	b510      	push	{r4, lr}
 8016e5e:	460c      	mov	r4, r1
 8016e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e64:	f000 f9ee 	bl	8017244 <_read_r>
 8016e68:	2800      	cmp	r0, #0
 8016e6a:	bfab      	itete	ge
 8016e6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8016e70:	181b      	addge	r3, r3, r0
 8016e72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e76:	bfac      	ite	ge
 8016e78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016e7a:	81a3      	strhlt	r3, [r4, #12]
 8016e7c:	bd10      	pop	{r4, pc}

08016e7e <__swrite>:
 8016e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e82:	461f      	mov	r7, r3
 8016e84:	898b      	ldrh	r3, [r1, #12]
 8016e86:	05db      	lsls	r3, r3, #23
 8016e88:	4605      	mov	r5, r0
 8016e8a:	460c      	mov	r4, r1
 8016e8c:	4616      	mov	r6, r2
 8016e8e:	d505      	bpl.n	8016e9c <__swrite+0x1e>
 8016e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e94:	2302      	movs	r3, #2
 8016e96:	2200      	movs	r2, #0
 8016e98:	f000 f9c2 	bl	8017220 <_lseek_r>
 8016e9c:	89a3      	ldrh	r3, [r4, #12]
 8016e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ea2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016ea6:	81a3      	strh	r3, [r4, #12]
 8016ea8:	4632      	mov	r2, r6
 8016eaa:	463b      	mov	r3, r7
 8016eac:	4628      	mov	r0, r5
 8016eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb2:	f000 b9e9 	b.w	8017288 <_write_r>

08016eb6 <__sseek>:
 8016eb6:	b510      	push	{r4, lr}
 8016eb8:	460c      	mov	r4, r1
 8016eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ebe:	f000 f9af 	bl	8017220 <_lseek_r>
 8016ec2:	1c43      	adds	r3, r0, #1
 8016ec4:	89a3      	ldrh	r3, [r4, #12]
 8016ec6:	bf15      	itete	ne
 8016ec8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016eca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016ece:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016ed2:	81a3      	strheq	r3, [r4, #12]
 8016ed4:	bf18      	it	ne
 8016ed6:	81a3      	strhne	r3, [r4, #12]
 8016ed8:	bd10      	pop	{r4, pc}

08016eda <__sclose>:
 8016eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ede:	f000 b939 	b.w	8017154 <_close_r>

08016ee2 <_vsniprintf_r>:
 8016ee2:	b530      	push	{r4, r5, lr}
 8016ee4:	4614      	mov	r4, r2
 8016ee6:	2c00      	cmp	r4, #0
 8016ee8:	b09b      	sub	sp, #108	@ 0x6c
 8016eea:	4605      	mov	r5, r0
 8016eec:	461a      	mov	r2, r3
 8016eee:	da05      	bge.n	8016efc <_vsniprintf_r+0x1a>
 8016ef0:	238b      	movs	r3, #139	@ 0x8b
 8016ef2:	6003      	str	r3, [r0, #0]
 8016ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ef8:	b01b      	add	sp, #108	@ 0x6c
 8016efa:	bd30      	pop	{r4, r5, pc}
 8016efc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f04:	bf14      	ite	ne
 8016f06:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016f0a:	4623      	moveq	r3, r4
 8016f0c:	9302      	str	r3, [sp, #8]
 8016f0e:	9305      	str	r3, [sp, #20]
 8016f10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f14:	9100      	str	r1, [sp, #0]
 8016f16:	9104      	str	r1, [sp, #16]
 8016f18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f1c:	4669      	mov	r1, sp
 8016f1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016f20:	f001 fcae 	bl	8018880 <_svfiprintf_r>
 8016f24:	1c43      	adds	r3, r0, #1
 8016f26:	bfbc      	itt	lt
 8016f28:	238b      	movlt	r3, #139	@ 0x8b
 8016f2a:	602b      	strlt	r3, [r5, #0]
 8016f2c:	2c00      	cmp	r4, #0
 8016f2e:	d0e3      	beq.n	8016ef8 <_vsniprintf_r+0x16>
 8016f30:	9b00      	ldr	r3, [sp, #0]
 8016f32:	2200      	movs	r2, #0
 8016f34:	701a      	strb	r2, [r3, #0]
 8016f36:	e7df      	b.n	8016ef8 <_vsniprintf_r+0x16>

08016f38 <vsniprintf>:
 8016f38:	b507      	push	{r0, r1, r2, lr}
 8016f3a:	9300      	str	r3, [sp, #0]
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	460a      	mov	r2, r1
 8016f40:	4601      	mov	r1, r0
 8016f42:	4803      	ldr	r0, [pc, #12]	@ (8016f50 <vsniprintf+0x18>)
 8016f44:	6800      	ldr	r0, [r0, #0]
 8016f46:	f7ff ffcc 	bl	8016ee2 <_vsniprintf_r>
 8016f4a:	b003      	add	sp, #12
 8016f4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f50:	200000c8 	.word	0x200000c8

08016f54 <__swbuf_r>:
 8016f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f56:	460e      	mov	r6, r1
 8016f58:	4614      	mov	r4, r2
 8016f5a:	4605      	mov	r5, r0
 8016f5c:	b118      	cbz	r0, 8016f66 <__swbuf_r+0x12>
 8016f5e:	6a03      	ldr	r3, [r0, #32]
 8016f60:	b90b      	cbnz	r3, 8016f66 <__swbuf_r+0x12>
 8016f62:	f7ff fe85 	bl	8016c70 <__sinit>
 8016f66:	69a3      	ldr	r3, [r4, #24]
 8016f68:	60a3      	str	r3, [r4, #8]
 8016f6a:	89a3      	ldrh	r3, [r4, #12]
 8016f6c:	071a      	lsls	r2, r3, #28
 8016f6e:	d501      	bpl.n	8016f74 <__swbuf_r+0x20>
 8016f70:	6923      	ldr	r3, [r4, #16]
 8016f72:	b943      	cbnz	r3, 8016f86 <__swbuf_r+0x32>
 8016f74:	4621      	mov	r1, r4
 8016f76:	4628      	mov	r0, r5
 8016f78:	f000 f82a 	bl	8016fd0 <__swsetup_r>
 8016f7c:	b118      	cbz	r0, 8016f86 <__swbuf_r+0x32>
 8016f7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016f82:	4638      	mov	r0, r7
 8016f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f86:	6823      	ldr	r3, [r4, #0]
 8016f88:	6922      	ldr	r2, [r4, #16]
 8016f8a:	1a98      	subs	r0, r3, r2
 8016f8c:	6963      	ldr	r3, [r4, #20]
 8016f8e:	b2f6      	uxtb	r6, r6
 8016f90:	4283      	cmp	r3, r0
 8016f92:	4637      	mov	r7, r6
 8016f94:	dc05      	bgt.n	8016fa2 <__swbuf_r+0x4e>
 8016f96:	4621      	mov	r1, r4
 8016f98:	4628      	mov	r0, r5
 8016f9a:	f001 ff33 	bl	8018e04 <_fflush_r>
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d1ed      	bne.n	8016f7e <__swbuf_r+0x2a>
 8016fa2:	68a3      	ldr	r3, [r4, #8]
 8016fa4:	3b01      	subs	r3, #1
 8016fa6:	60a3      	str	r3, [r4, #8]
 8016fa8:	6823      	ldr	r3, [r4, #0]
 8016faa:	1c5a      	adds	r2, r3, #1
 8016fac:	6022      	str	r2, [r4, #0]
 8016fae:	701e      	strb	r6, [r3, #0]
 8016fb0:	6962      	ldr	r2, [r4, #20]
 8016fb2:	1c43      	adds	r3, r0, #1
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d004      	beq.n	8016fc2 <__swbuf_r+0x6e>
 8016fb8:	89a3      	ldrh	r3, [r4, #12]
 8016fba:	07db      	lsls	r3, r3, #31
 8016fbc:	d5e1      	bpl.n	8016f82 <__swbuf_r+0x2e>
 8016fbe:	2e0a      	cmp	r6, #10
 8016fc0:	d1df      	bne.n	8016f82 <__swbuf_r+0x2e>
 8016fc2:	4621      	mov	r1, r4
 8016fc4:	4628      	mov	r0, r5
 8016fc6:	f001 ff1d 	bl	8018e04 <_fflush_r>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d0d9      	beq.n	8016f82 <__swbuf_r+0x2e>
 8016fce:	e7d6      	b.n	8016f7e <__swbuf_r+0x2a>

08016fd0 <__swsetup_r>:
 8016fd0:	b538      	push	{r3, r4, r5, lr}
 8016fd2:	4b29      	ldr	r3, [pc, #164]	@ (8017078 <__swsetup_r+0xa8>)
 8016fd4:	4605      	mov	r5, r0
 8016fd6:	6818      	ldr	r0, [r3, #0]
 8016fd8:	460c      	mov	r4, r1
 8016fda:	b118      	cbz	r0, 8016fe4 <__swsetup_r+0x14>
 8016fdc:	6a03      	ldr	r3, [r0, #32]
 8016fde:	b90b      	cbnz	r3, 8016fe4 <__swsetup_r+0x14>
 8016fe0:	f7ff fe46 	bl	8016c70 <__sinit>
 8016fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fe8:	0719      	lsls	r1, r3, #28
 8016fea:	d422      	bmi.n	8017032 <__swsetup_r+0x62>
 8016fec:	06da      	lsls	r2, r3, #27
 8016fee:	d407      	bmi.n	8017000 <__swsetup_r+0x30>
 8016ff0:	2209      	movs	r2, #9
 8016ff2:	602a      	str	r2, [r5, #0]
 8016ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ff8:	81a3      	strh	r3, [r4, #12]
 8016ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ffe:	e033      	b.n	8017068 <__swsetup_r+0x98>
 8017000:	0758      	lsls	r0, r3, #29
 8017002:	d512      	bpl.n	801702a <__swsetup_r+0x5a>
 8017004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017006:	b141      	cbz	r1, 801701a <__swsetup_r+0x4a>
 8017008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801700c:	4299      	cmp	r1, r3
 801700e:	d002      	beq.n	8017016 <__swsetup_r+0x46>
 8017010:	4628      	mov	r0, r5
 8017012:	f001 f805 	bl	8018020 <_free_r>
 8017016:	2300      	movs	r3, #0
 8017018:	6363      	str	r3, [r4, #52]	@ 0x34
 801701a:	89a3      	ldrh	r3, [r4, #12]
 801701c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017020:	81a3      	strh	r3, [r4, #12]
 8017022:	2300      	movs	r3, #0
 8017024:	6063      	str	r3, [r4, #4]
 8017026:	6923      	ldr	r3, [r4, #16]
 8017028:	6023      	str	r3, [r4, #0]
 801702a:	89a3      	ldrh	r3, [r4, #12]
 801702c:	f043 0308 	orr.w	r3, r3, #8
 8017030:	81a3      	strh	r3, [r4, #12]
 8017032:	6923      	ldr	r3, [r4, #16]
 8017034:	b94b      	cbnz	r3, 801704a <__swsetup_r+0x7a>
 8017036:	89a3      	ldrh	r3, [r4, #12]
 8017038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801703c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017040:	d003      	beq.n	801704a <__swsetup_r+0x7a>
 8017042:	4621      	mov	r1, r4
 8017044:	4628      	mov	r0, r5
 8017046:	f001 ff3d 	bl	8018ec4 <__smakebuf_r>
 801704a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801704e:	f013 0201 	ands.w	r2, r3, #1
 8017052:	d00a      	beq.n	801706a <__swsetup_r+0x9a>
 8017054:	2200      	movs	r2, #0
 8017056:	60a2      	str	r2, [r4, #8]
 8017058:	6962      	ldr	r2, [r4, #20]
 801705a:	4252      	negs	r2, r2
 801705c:	61a2      	str	r2, [r4, #24]
 801705e:	6922      	ldr	r2, [r4, #16]
 8017060:	b942      	cbnz	r2, 8017074 <__swsetup_r+0xa4>
 8017062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017066:	d1c5      	bne.n	8016ff4 <__swsetup_r+0x24>
 8017068:	bd38      	pop	{r3, r4, r5, pc}
 801706a:	0799      	lsls	r1, r3, #30
 801706c:	bf58      	it	pl
 801706e:	6962      	ldrpl	r2, [r4, #20]
 8017070:	60a2      	str	r2, [r4, #8]
 8017072:	e7f4      	b.n	801705e <__swsetup_r+0x8e>
 8017074:	2000      	movs	r0, #0
 8017076:	e7f7      	b.n	8017068 <__swsetup_r+0x98>
 8017078:	200000c8 	.word	0x200000c8

0801707c <memcmp>:
 801707c:	b510      	push	{r4, lr}
 801707e:	3901      	subs	r1, #1
 8017080:	4402      	add	r2, r0
 8017082:	4290      	cmp	r0, r2
 8017084:	d101      	bne.n	801708a <memcmp+0xe>
 8017086:	2000      	movs	r0, #0
 8017088:	e005      	b.n	8017096 <memcmp+0x1a>
 801708a:	7803      	ldrb	r3, [r0, #0]
 801708c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017090:	42a3      	cmp	r3, r4
 8017092:	d001      	beq.n	8017098 <memcmp+0x1c>
 8017094:	1b18      	subs	r0, r3, r4
 8017096:	bd10      	pop	{r4, pc}
 8017098:	3001      	adds	r0, #1
 801709a:	e7f2      	b.n	8017082 <memcmp+0x6>

0801709c <memmove>:
 801709c:	4288      	cmp	r0, r1
 801709e:	b510      	push	{r4, lr}
 80170a0:	eb01 0402 	add.w	r4, r1, r2
 80170a4:	d902      	bls.n	80170ac <memmove+0x10>
 80170a6:	4284      	cmp	r4, r0
 80170a8:	4623      	mov	r3, r4
 80170aa:	d807      	bhi.n	80170bc <memmove+0x20>
 80170ac:	1e43      	subs	r3, r0, #1
 80170ae:	42a1      	cmp	r1, r4
 80170b0:	d008      	beq.n	80170c4 <memmove+0x28>
 80170b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80170b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80170ba:	e7f8      	b.n	80170ae <memmove+0x12>
 80170bc:	4402      	add	r2, r0
 80170be:	4601      	mov	r1, r0
 80170c0:	428a      	cmp	r2, r1
 80170c2:	d100      	bne.n	80170c6 <memmove+0x2a>
 80170c4:	bd10      	pop	{r4, pc}
 80170c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170ce:	e7f7      	b.n	80170c0 <memmove+0x24>

080170d0 <memset>:
 80170d0:	4402      	add	r2, r0
 80170d2:	4603      	mov	r3, r0
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d100      	bne.n	80170da <memset+0xa>
 80170d8:	4770      	bx	lr
 80170da:	f803 1b01 	strb.w	r1, [r3], #1
 80170de:	e7f9      	b.n	80170d4 <memset+0x4>

080170e0 <strchr>:
 80170e0:	b2c9      	uxtb	r1, r1
 80170e2:	4603      	mov	r3, r0
 80170e4:	4618      	mov	r0, r3
 80170e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ea:	b112      	cbz	r2, 80170f2 <strchr+0x12>
 80170ec:	428a      	cmp	r2, r1
 80170ee:	d1f9      	bne.n	80170e4 <strchr+0x4>
 80170f0:	4770      	bx	lr
 80170f2:	2900      	cmp	r1, #0
 80170f4:	bf18      	it	ne
 80170f6:	2000      	movne	r0, #0
 80170f8:	4770      	bx	lr

080170fa <strncmp>:
 80170fa:	b510      	push	{r4, lr}
 80170fc:	b16a      	cbz	r2, 801711a <strncmp+0x20>
 80170fe:	3901      	subs	r1, #1
 8017100:	1884      	adds	r4, r0, r2
 8017102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017106:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801710a:	429a      	cmp	r2, r3
 801710c:	d103      	bne.n	8017116 <strncmp+0x1c>
 801710e:	42a0      	cmp	r0, r4
 8017110:	d001      	beq.n	8017116 <strncmp+0x1c>
 8017112:	2a00      	cmp	r2, #0
 8017114:	d1f5      	bne.n	8017102 <strncmp+0x8>
 8017116:	1ad0      	subs	r0, r2, r3
 8017118:	bd10      	pop	{r4, pc}
 801711a:	4610      	mov	r0, r2
 801711c:	e7fc      	b.n	8017118 <strncmp+0x1e>

0801711e <strstr>:
 801711e:	780a      	ldrb	r2, [r1, #0]
 8017120:	b570      	push	{r4, r5, r6, lr}
 8017122:	b96a      	cbnz	r2, 8017140 <strstr+0x22>
 8017124:	bd70      	pop	{r4, r5, r6, pc}
 8017126:	429a      	cmp	r2, r3
 8017128:	d109      	bne.n	801713e <strstr+0x20>
 801712a:	460c      	mov	r4, r1
 801712c:	4605      	mov	r5, r0
 801712e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017132:	2b00      	cmp	r3, #0
 8017134:	d0f6      	beq.n	8017124 <strstr+0x6>
 8017136:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801713a:	429e      	cmp	r6, r3
 801713c:	d0f7      	beq.n	801712e <strstr+0x10>
 801713e:	3001      	adds	r0, #1
 8017140:	7803      	ldrb	r3, [r0, #0]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d1ef      	bne.n	8017126 <strstr+0x8>
 8017146:	4618      	mov	r0, r3
 8017148:	e7ec      	b.n	8017124 <strstr+0x6>
	...

0801714c <_localeconv_r>:
 801714c:	4800      	ldr	r0, [pc, #0]	@ (8017150 <_localeconv_r+0x4>)
 801714e:	4770      	bx	lr
 8017150:	20000208 	.word	0x20000208

08017154 <_close_r>:
 8017154:	b538      	push	{r3, r4, r5, lr}
 8017156:	4d06      	ldr	r5, [pc, #24]	@ (8017170 <_close_r+0x1c>)
 8017158:	2300      	movs	r3, #0
 801715a:	4604      	mov	r4, r0
 801715c:	4608      	mov	r0, r1
 801715e:	602b      	str	r3, [r5, #0]
 8017160:	f7eb fb50 	bl	8002804 <_close>
 8017164:	1c43      	adds	r3, r0, #1
 8017166:	d102      	bne.n	801716e <_close_r+0x1a>
 8017168:	682b      	ldr	r3, [r5, #0]
 801716a:	b103      	cbz	r3, 801716e <_close_r+0x1a>
 801716c:	6023      	str	r3, [r4, #0]
 801716e:	bd38      	pop	{r3, r4, r5, pc}
 8017170:	20017bf8 	.word	0x20017bf8

08017174 <_reclaim_reent>:
 8017174:	4b29      	ldr	r3, [pc, #164]	@ (801721c <_reclaim_reent+0xa8>)
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4283      	cmp	r3, r0
 801717a:	b570      	push	{r4, r5, r6, lr}
 801717c:	4604      	mov	r4, r0
 801717e:	d04b      	beq.n	8017218 <_reclaim_reent+0xa4>
 8017180:	69c3      	ldr	r3, [r0, #28]
 8017182:	b1ab      	cbz	r3, 80171b0 <_reclaim_reent+0x3c>
 8017184:	68db      	ldr	r3, [r3, #12]
 8017186:	b16b      	cbz	r3, 80171a4 <_reclaim_reent+0x30>
 8017188:	2500      	movs	r5, #0
 801718a:	69e3      	ldr	r3, [r4, #28]
 801718c:	68db      	ldr	r3, [r3, #12]
 801718e:	5959      	ldr	r1, [r3, r5]
 8017190:	2900      	cmp	r1, #0
 8017192:	d13b      	bne.n	801720c <_reclaim_reent+0x98>
 8017194:	3504      	adds	r5, #4
 8017196:	2d80      	cmp	r5, #128	@ 0x80
 8017198:	d1f7      	bne.n	801718a <_reclaim_reent+0x16>
 801719a:	69e3      	ldr	r3, [r4, #28]
 801719c:	4620      	mov	r0, r4
 801719e:	68d9      	ldr	r1, [r3, #12]
 80171a0:	f000 ff3e 	bl	8018020 <_free_r>
 80171a4:	69e3      	ldr	r3, [r4, #28]
 80171a6:	6819      	ldr	r1, [r3, #0]
 80171a8:	b111      	cbz	r1, 80171b0 <_reclaim_reent+0x3c>
 80171aa:	4620      	mov	r0, r4
 80171ac:	f000 ff38 	bl	8018020 <_free_r>
 80171b0:	6961      	ldr	r1, [r4, #20]
 80171b2:	b111      	cbz	r1, 80171ba <_reclaim_reent+0x46>
 80171b4:	4620      	mov	r0, r4
 80171b6:	f000 ff33 	bl	8018020 <_free_r>
 80171ba:	69e1      	ldr	r1, [r4, #28]
 80171bc:	b111      	cbz	r1, 80171c4 <_reclaim_reent+0x50>
 80171be:	4620      	mov	r0, r4
 80171c0:	f000 ff2e 	bl	8018020 <_free_r>
 80171c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80171c6:	b111      	cbz	r1, 80171ce <_reclaim_reent+0x5a>
 80171c8:	4620      	mov	r0, r4
 80171ca:	f000 ff29 	bl	8018020 <_free_r>
 80171ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80171d0:	b111      	cbz	r1, 80171d8 <_reclaim_reent+0x64>
 80171d2:	4620      	mov	r0, r4
 80171d4:	f000 ff24 	bl	8018020 <_free_r>
 80171d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80171da:	b111      	cbz	r1, 80171e2 <_reclaim_reent+0x6e>
 80171dc:	4620      	mov	r0, r4
 80171de:	f000 ff1f 	bl	8018020 <_free_r>
 80171e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80171e4:	b111      	cbz	r1, 80171ec <_reclaim_reent+0x78>
 80171e6:	4620      	mov	r0, r4
 80171e8:	f000 ff1a 	bl	8018020 <_free_r>
 80171ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80171ee:	b111      	cbz	r1, 80171f6 <_reclaim_reent+0x82>
 80171f0:	4620      	mov	r0, r4
 80171f2:	f000 ff15 	bl	8018020 <_free_r>
 80171f6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80171f8:	b111      	cbz	r1, 8017200 <_reclaim_reent+0x8c>
 80171fa:	4620      	mov	r0, r4
 80171fc:	f000 ff10 	bl	8018020 <_free_r>
 8017200:	6a23      	ldr	r3, [r4, #32]
 8017202:	b14b      	cbz	r3, 8017218 <_reclaim_reent+0xa4>
 8017204:	4620      	mov	r0, r4
 8017206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801720a:	4718      	bx	r3
 801720c:	680e      	ldr	r6, [r1, #0]
 801720e:	4620      	mov	r0, r4
 8017210:	f000 ff06 	bl	8018020 <_free_r>
 8017214:	4631      	mov	r1, r6
 8017216:	e7bb      	b.n	8017190 <_reclaim_reent+0x1c>
 8017218:	bd70      	pop	{r4, r5, r6, pc}
 801721a:	bf00      	nop
 801721c:	200000c8 	.word	0x200000c8

08017220 <_lseek_r>:
 8017220:	b538      	push	{r3, r4, r5, lr}
 8017222:	4d07      	ldr	r5, [pc, #28]	@ (8017240 <_lseek_r+0x20>)
 8017224:	4604      	mov	r4, r0
 8017226:	4608      	mov	r0, r1
 8017228:	4611      	mov	r1, r2
 801722a:	2200      	movs	r2, #0
 801722c:	602a      	str	r2, [r5, #0]
 801722e:	461a      	mov	r2, r3
 8017230:	f7eb fb0f 	bl	8002852 <_lseek>
 8017234:	1c43      	adds	r3, r0, #1
 8017236:	d102      	bne.n	801723e <_lseek_r+0x1e>
 8017238:	682b      	ldr	r3, [r5, #0]
 801723a:	b103      	cbz	r3, 801723e <_lseek_r+0x1e>
 801723c:	6023      	str	r3, [r4, #0]
 801723e:	bd38      	pop	{r3, r4, r5, pc}
 8017240:	20017bf8 	.word	0x20017bf8

08017244 <_read_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	4d07      	ldr	r5, [pc, #28]	@ (8017264 <_read_r+0x20>)
 8017248:	4604      	mov	r4, r0
 801724a:	4608      	mov	r0, r1
 801724c:	4611      	mov	r1, r2
 801724e:	2200      	movs	r2, #0
 8017250:	602a      	str	r2, [r5, #0]
 8017252:	461a      	mov	r2, r3
 8017254:	f7eb fa9d 	bl	8002792 <_read>
 8017258:	1c43      	adds	r3, r0, #1
 801725a:	d102      	bne.n	8017262 <_read_r+0x1e>
 801725c:	682b      	ldr	r3, [r5, #0]
 801725e:	b103      	cbz	r3, 8017262 <_read_r+0x1e>
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	bd38      	pop	{r3, r4, r5, pc}
 8017264:	20017bf8 	.word	0x20017bf8

08017268 <_sbrk_r>:
 8017268:	b538      	push	{r3, r4, r5, lr}
 801726a:	4d06      	ldr	r5, [pc, #24]	@ (8017284 <_sbrk_r+0x1c>)
 801726c:	2300      	movs	r3, #0
 801726e:	4604      	mov	r4, r0
 8017270:	4608      	mov	r0, r1
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	f7eb fafa 	bl	800286c <_sbrk>
 8017278:	1c43      	adds	r3, r0, #1
 801727a:	d102      	bne.n	8017282 <_sbrk_r+0x1a>
 801727c:	682b      	ldr	r3, [r5, #0]
 801727e:	b103      	cbz	r3, 8017282 <_sbrk_r+0x1a>
 8017280:	6023      	str	r3, [r4, #0]
 8017282:	bd38      	pop	{r3, r4, r5, pc}
 8017284:	20017bf8 	.word	0x20017bf8

08017288 <_write_r>:
 8017288:	b538      	push	{r3, r4, r5, lr}
 801728a:	4d07      	ldr	r5, [pc, #28]	@ (80172a8 <_write_r+0x20>)
 801728c:	4604      	mov	r4, r0
 801728e:	4608      	mov	r0, r1
 8017290:	4611      	mov	r1, r2
 8017292:	2200      	movs	r2, #0
 8017294:	602a      	str	r2, [r5, #0]
 8017296:	461a      	mov	r2, r3
 8017298:	f7eb fa98 	bl	80027cc <_write>
 801729c:	1c43      	adds	r3, r0, #1
 801729e:	d102      	bne.n	80172a6 <_write_r+0x1e>
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	b103      	cbz	r3, 80172a6 <_write_r+0x1e>
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	bd38      	pop	{r3, r4, r5, pc}
 80172a8:	20017bf8 	.word	0x20017bf8

080172ac <__errno>:
 80172ac:	4b01      	ldr	r3, [pc, #4]	@ (80172b4 <__errno+0x8>)
 80172ae:	6818      	ldr	r0, [r3, #0]
 80172b0:	4770      	bx	lr
 80172b2:	bf00      	nop
 80172b4:	200000c8 	.word	0x200000c8

080172b8 <__libc_init_array>:
 80172b8:	b570      	push	{r4, r5, r6, lr}
 80172ba:	4d0d      	ldr	r5, [pc, #52]	@ (80172f0 <__libc_init_array+0x38>)
 80172bc:	4c0d      	ldr	r4, [pc, #52]	@ (80172f4 <__libc_init_array+0x3c>)
 80172be:	1b64      	subs	r4, r4, r5
 80172c0:	10a4      	asrs	r4, r4, #2
 80172c2:	2600      	movs	r6, #0
 80172c4:	42a6      	cmp	r6, r4
 80172c6:	d109      	bne.n	80172dc <__libc_init_array+0x24>
 80172c8:	4d0b      	ldr	r5, [pc, #44]	@ (80172f8 <__libc_init_array+0x40>)
 80172ca:	4c0c      	ldr	r4, [pc, #48]	@ (80172fc <__libc_init_array+0x44>)
 80172cc:	f001 fec2 	bl	8019054 <_init>
 80172d0:	1b64      	subs	r4, r4, r5
 80172d2:	10a4      	asrs	r4, r4, #2
 80172d4:	2600      	movs	r6, #0
 80172d6:	42a6      	cmp	r6, r4
 80172d8:	d105      	bne.n	80172e6 <__libc_init_array+0x2e>
 80172da:	bd70      	pop	{r4, r5, r6, pc}
 80172dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80172e0:	4798      	blx	r3
 80172e2:	3601      	adds	r6, #1
 80172e4:	e7ee      	b.n	80172c4 <__libc_init_array+0xc>
 80172e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80172ea:	4798      	blx	r3
 80172ec:	3601      	adds	r6, #1
 80172ee:	e7f2      	b.n	80172d6 <__libc_init_array+0x1e>
 80172f0:	0801a304 	.word	0x0801a304
 80172f4:	0801a304 	.word	0x0801a304
 80172f8:	0801a304 	.word	0x0801a304
 80172fc:	0801a30c 	.word	0x0801a30c

08017300 <__retarget_lock_init_recursive>:
 8017300:	4770      	bx	lr

08017302 <__retarget_lock_acquire_recursive>:
 8017302:	4770      	bx	lr

08017304 <__retarget_lock_release_recursive>:
 8017304:	4770      	bx	lr

08017306 <strcpy>:
 8017306:	4603      	mov	r3, r0
 8017308:	f811 2b01 	ldrb.w	r2, [r1], #1
 801730c:	f803 2b01 	strb.w	r2, [r3], #1
 8017310:	2a00      	cmp	r2, #0
 8017312:	d1f9      	bne.n	8017308 <strcpy+0x2>
 8017314:	4770      	bx	lr

08017316 <memcpy>:
 8017316:	440a      	add	r2, r1
 8017318:	4291      	cmp	r1, r2
 801731a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801731e:	d100      	bne.n	8017322 <memcpy+0xc>
 8017320:	4770      	bx	lr
 8017322:	b510      	push	{r4, lr}
 8017324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017328:	f803 4f01 	strb.w	r4, [r3, #1]!
 801732c:	4291      	cmp	r1, r2
 801732e:	d1f9      	bne.n	8017324 <memcpy+0xe>
 8017330:	bd10      	pop	{r4, pc}
	...

08017334 <__assert_func>:
 8017334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017336:	4614      	mov	r4, r2
 8017338:	461a      	mov	r2, r3
 801733a:	4b09      	ldr	r3, [pc, #36]	@ (8017360 <__assert_func+0x2c>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	4605      	mov	r5, r0
 8017340:	68d8      	ldr	r0, [r3, #12]
 8017342:	b954      	cbnz	r4, 801735a <__assert_func+0x26>
 8017344:	4b07      	ldr	r3, [pc, #28]	@ (8017364 <__assert_func+0x30>)
 8017346:	461c      	mov	r4, r3
 8017348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801734c:	9100      	str	r1, [sp, #0]
 801734e:	462b      	mov	r3, r5
 8017350:	4905      	ldr	r1, [pc, #20]	@ (8017368 <__assert_func+0x34>)
 8017352:	f001 fd7f 	bl	8018e54 <fiprintf>
 8017356:	f001 fe13 	bl	8018f80 <abort>
 801735a:	4b04      	ldr	r3, [pc, #16]	@ (801736c <__assert_func+0x38>)
 801735c:	e7f4      	b.n	8017348 <__assert_func+0x14>
 801735e:	bf00      	nop
 8017360:	200000c8 	.word	0x200000c8
 8017364:	0801a112 	.word	0x0801a112
 8017368:	0801a0e4 	.word	0x0801a0e4
 801736c:	0801a0d7 	.word	0x0801a0d7

08017370 <quorem>:
 8017370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017374:	6903      	ldr	r3, [r0, #16]
 8017376:	690c      	ldr	r4, [r1, #16]
 8017378:	42a3      	cmp	r3, r4
 801737a:	4607      	mov	r7, r0
 801737c:	db7e      	blt.n	801747c <quorem+0x10c>
 801737e:	3c01      	subs	r4, #1
 8017380:	f101 0814 	add.w	r8, r1, #20
 8017384:	00a3      	lsls	r3, r4, #2
 8017386:	f100 0514 	add.w	r5, r0, #20
 801738a:	9300      	str	r3, [sp, #0]
 801738c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017390:	9301      	str	r3, [sp, #4]
 8017392:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017396:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801739a:	3301      	adds	r3, #1
 801739c:	429a      	cmp	r2, r3
 801739e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80173a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80173a6:	d32e      	bcc.n	8017406 <quorem+0x96>
 80173a8:	f04f 0a00 	mov.w	sl, #0
 80173ac:	46c4      	mov	ip, r8
 80173ae:	46ae      	mov	lr, r5
 80173b0:	46d3      	mov	fp, sl
 80173b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80173b6:	b298      	uxth	r0, r3
 80173b8:	fb06 a000 	mla	r0, r6, r0, sl
 80173bc:	0c02      	lsrs	r2, r0, #16
 80173be:	0c1b      	lsrs	r3, r3, #16
 80173c0:	fb06 2303 	mla	r3, r6, r3, r2
 80173c4:	f8de 2000 	ldr.w	r2, [lr]
 80173c8:	b280      	uxth	r0, r0
 80173ca:	b292      	uxth	r2, r2
 80173cc:	1a12      	subs	r2, r2, r0
 80173ce:	445a      	add	r2, fp
 80173d0:	f8de 0000 	ldr.w	r0, [lr]
 80173d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80173d8:	b29b      	uxth	r3, r3
 80173da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80173de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80173e2:	b292      	uxth	r2, r2
 80173e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80173e8:	45e1      	cmp	r9, ip
 80173ea:	f84e 2b04 	str.w	r2, [lr], #4
 80173ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80173f2:	d2de      	bcs.n	80173b2 <quorem+0x42>
 80173f4:	9b00      	ldr	r3, [sp, #0]
 80173f6:	58eb      	ldr	r3, [r5, r3]
 80173f8:	b92b      	cbnz	r3, 8017406 <quorem+0x96>
 80173fa:	9b01      	ldr	r3, [sp, #4]
 80173fc:	3b04      	subs	r3, #4
 80173fe:	429d      	cmp	r5, r3
 8017400:	461a      	mov	r2, r3
 8017402:	d32f      	bcc.n	8017464 <quorem+0xf4>
 8017404:	613c      	str	r4, [r7, #16]
 8017406:	4638      	mov	r0, r7
 8017408:	f001 f8ce 	bl	80185a8 <__mcmp>
 801740c:	2800      	cmp	r0, #0
 801740e:	db25      	blt.n	801745c <quorem+0xec>
 8017410:	4629      	mov	r1, r5
 8017412:	2000      	movs	r0, #0
 8017414:	f858 2b04 	ldr.w	r2, [r8], #4
 8017418:	f8d1 c000 	ldr.w	ip, [r1]
 801741c:	fa1f fe82 	uxth.w	lr, r2
 8017420:	fa1f f38c 	uxth.w	r3, ip
 8017424:	eba3 030e 	sub.w	r3, r3, lr
 8017428:	4403      	add	r3, r0
 801742a:	0c12      	lsrs	r2, r2, #16
 801742c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017430:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017434:	b29b      	uxth	r3, r3
 8017436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801743a:	45c1      	cmp	r9, r8
 801743c:	f841 3b04 	str.w	r3, [r1], #4
 8017440:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017444:	d2e6      	bcs.n	8017414 <quorem+0xa4>
 8017446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801744a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801744e:	b922      	cbnz	r2, 801745a <quorem+0xea>
 8017450:	3b04      	subs	r3, #4
 8017452:	429d      	cmp	r5, r3
 8017454:	461a      	mov	r2, r3
 8017456:	d30b      	bcc.n	8017470 <quorem+0x100>
 8017458:	613c      	str	r4, [r7, #16]
 801745a:	3601      	adds	r6, #1
 801745c:	4630      	mov	r0, r6
 801745e:	b003      	add	sp, #12
 8017460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017464:	6812      	ldr	r2, [r2, #0]
 8017466:	3b04      	subs	r3, #4
 8017468:	2a00      	cmp	r2, #0
 801746a:	d1cb      	bne.n	8017404 <quorem+0x94>
 801746c:	3c01      	subs	r4, #1
 801746e:	e7c6      	b.n	80173fe <quorem+0x8e>
 8017470:	6812      	ldr	r2, [r2, #0]
 8017472:	3b04      	subs	r3, #4
 8017474:	2a00      	cmp	r2, #0
 8017476:	d1ef      	bne.n	8017458 <quorem+0xe8>
 8017478:	3c01      	subs	r4, #1
 801747a:	e7ea      	b.n	8017452 <quorem+0xe2>
 801747c:	2000      	movs	r0, #0
 801747e:	e7ee      	b.n	801745e <quorem+0xee>

08017480 <_dtoa_r>:
 8017480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017484:	69c7      	ldr	r7, [r0, #28]
 8017486:	b099      	sub	sp, #100	@ 0x64
 8017488:	ed8d 0b02 	vstr	d0, [sp, #8]
 801748c:	ec55 4b10 	vmov	r4, r5, d0
 8017490:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017492:	9109      	str	r1, [sp, #36]	@ 0x24
 8017494:	4683      	mov	fp, r0
 8017496:	920e      	str	r2, [sp, #56]	@ 0x38
 8017498:	9313      	str	r3, [sp, #76]	@ 0x4c
 801749a:	b97f      	cbnz	r7, 80174bc <_dtoa_r+0x3c>
 801749c:	2010      	movs	r0, #16
 801749e:	f7fe fce9 	bl	8015e74 <malloc>
 80174a2:	4602      	mov	r2, r0
 80174a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80174a8:	b920      	cbnz	r0, 80174b4 <_dtoa_r+0x34>
 80174aa:	4ba7      	ldr	r3, [pc, #668]	@ (8017748 <_dtoa_r+0x2c8>)
 80174ac:	21ef      	movs	r1, #239	@ 0xef
 80174ae:	48a7      	ldr	r0, [pc, #668]	@ (801774c <_dtoa_r+0x2cc>)
 80174b0:	f7ff ff40 	bl	8017334 <__assert_func>
 80174b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80174b8:	6007      	str	r7, [r0, #0]
 80174ba:	60c7      	str	r7, [r0, #12]
 80174bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80174c0:	6819      	ldr	r1, [r3, #0]
 80174c2:	b159      	cbz	r1, 80174dc <_dtoa_r+0x5c>
 80174c4:	685a      	ldr	r2, [r3, #4]
 80174c6:	604a      	str	r2, [r1, #4]
 80174c8:	2301      	movs	r3, #1
 80174ca:	4093      	lsls	r3, r2
 80174cc:	608b      	str	r3, [r1, #8]
 80174ce:	4658      	mov	r0, fp
 80174d0:	f000 fe30 	bl	8018134 <_Bfree>
 80174d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80174d8:	2200      	movs	r2, #0
 80174da:	601a      	str	r2, [r3, #0]
 80174dc:	1e2b      	subs	r3, r5, #0
 80174de:	bfb9      	ittee	lt
 80174e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80174e4:	9303      	strlt	r3, [sp, #12]
 80174e6:	2300      	movge	r3, #0
 80174e8:	6033      	strge	r3, [r6, #0]
 80174ea:	9f03      	ldr	r7, [sp, #12]
 80174ec:	4b98      	ldr	r3, [pc, #608]	@ (8017750 <_dtoa_r+0x2d0>)
 80174ee:	bfbc      	itt	lt
 80174f0:	2201      	movlt	r2, #1
 80174f2:	6032      	strlt	r2, [r6, #0]
 80174f4:	43bb      	bics	r3, r7
 80174f6:	d112      	bne.n	801751e <_dtoa_r+0x9e>
 80174f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80174fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80174fe:	6013      	str	r3, [r2, #0]
 8017500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017504:	4323      	orrs	r3, r4
 8017506:	f000 854d 	beq.w	8017fa4 <_dtoa_r+0xb24>
 801750a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801750c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8017764 <_dtoa_r+0x2e4>
 8017510:	2b00      	cmp	r3, #0
 8017512:	f000 854f 	beq.w	8017fb4 <_dtoa_r+0xb34>
 8017516:	f10a 0303 	add.w	r3, sl, #3
 801751a:	f000 bd49 	b.w	8017fb0 <_dtoa_r+0xb30>
 801751e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017522:	2200      	movs	r2, #0
 8017524:	ec51 0b17 	vmov	r0, r1, d7
 8017528:	2300      	movs	r3, #0
 801752a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801752e:	f7e9 fafb 	bl	8000b28 <__aeabi_dcmpeq>
 8017532:	4680      	mov	r8, r0
 8017534:	b158      	cbz	r0, 801754e <_dtoa_r+0xce>
 8017536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017538:	2301      	movs	r3, #1
 801753a:	6013      	str	r3, [r2, #0]
 801753c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801753e:	b113      	cbz	r3, 8017546 <_dtoa_r+0xc6>
 8017540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017542:	4b84      	ldr	r3, [pc, #528]	@ (8017754 <_dtoa_r+0x2d4>)
 8017544:	6013      	str	r3, [r2, #0]
 8017546:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8017768 <_dtoa_r+0x2e8>
 801754a:	f000 bd33 	b.w	8017fb4 <_dtoa_r+0xb34>
 801754e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8017552:	aa16      	add	r2, sp, #88	@ 0x58
 8017554:	a917      	add	r1, sp, #92	@ 0x5c
 8017556:	4658      	mov	r0, fp
 8017558:	f001 f8d6 	bl	8018708 <__d2b>
 801755c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8017560:	4681      	mov	r9, r0
 8017562:	2e00      	cmp	r6, #0
 8017564:	d077      	beq.n	8017656 <_dtoa_r+0x1d6>
 8017566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017568:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801756c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801757c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017580:	4619      	mov	r1, r3
 8017582:	2200      	movs	r2, #0
 8017584:	4b74      	ldr	r3, [pc, #464]	@ (8017758 <_dtoa_r+0x2d8>)
 8017586:	f7e8 feaf 	bl	80002e8 <__aeabi_dsub>
 801758a:	a369      	add	r3, pc, #420	@ (adr r3, 8017730 <_dtoa_r+0x2b0>)
 801758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017590:	f7e9 f862 	bl	8000658 <__aeabi_dmul>
 8017594:	a368      	add	r3, pc, #416	@ (adr r3, 8017738 <_dtoa_r+0x2b8>)
 8017596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801759a:	f7e8 fea7 	bl	80002ec <__adddf3>
 801759e:	4604      	mov	r4, r0
 80175a0:	4630      	mov	r0, r6
 80175a2:	460d      	mov	r5, r1
 80175a4:	f7e8 ffee 	bl	8000584 <__aeabi_i2d>
 80175a8:	a365      	add	r3, pc, #404	@ (adr r3, 8017740 <_dtoa_r+0x2c0>)
 80175aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ae:	f7e9 f853 	bl	8000658 <__aeabi_dmul>
 80175b2:	4602      	mov	r2, r0
 80175b4:	460b      	mov	r3, r1
 80175b6:	4620      	mov	r0, r4
 80175b8:	4629      	mov	r1, r5
 80175ba:	f7e8 fe97 	bl	80002ec <__adddf3>
 80175be:	4604      	mov	r4, r0
 80175c0:	460d      	mov	r5, r1
 80175c2:	f7e9 faf9 	bl	8000bb8 <__aeabi_d2iz>
 80175c6:	2200      	movs	r2, #0
 80175c8:	4607      	mov	r7, r0
 80175ca:	2300      	movs	r3, #0
 80175cc:	4620      	mov	r0, r4
 80175ce:	4629      	mov	r1, r5
 80175d0:	f7e9 fab4 	bl	8000b3c <__aeabi_dcmplt>
 80175d4:	b140      	cbz	r0, 80175e8 <_dtoa_r+0x168>
 80175d6:	4638      	mov	r0, r7
 80175d8:	f7e8 ffd4 	bl	8000584 <__aeabi_i2d>
 80175dc:	4622      	mov	r2, r4
 80175de:	462b      	mov	r3, r5
 80175e0:	f7e9 faa2 	bl	8000b28 <__aeabi_dcmpeq>
 80175e4:	b900      	cbnz	r0, 80175e8 <_dtoa_r+0x168>
 80175e6:	3f01      	subs	r7, #1
 80175e8:	2f16      	cmp	r7, #22
 80175ea:	d851      	bhi.n	8017690 <_dtoa_r+0x210>
 80175ec:	4b5b      	ldr	r3, [pc, #364]	@ (801775c <_dtoa_r+0x2dc>)
 80175ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80175f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80175fa:	f7e9 fa9f 	bl	8000b3c <__aeabi_dcmplt>
 80175fe:	2800      	cmp	r0, #0
 8017600:	d048      	beq.n	8017694 <_dtoa_r+0x214>
 8017602:	3f01      	subs	r7, #1
 8017604:	2300      	movs	r3, #0
 8017606:	9312      	str	r3, [sp, #72]	@ 0x48
 8017608:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801760a:	1b9b      	subs	r3, r3, r6
 801760c:	1e5a      	subs	r2, r3, #1
 801760e:	bf44      	itt	mi
 8017610:	f1c3 0801 	rsbmi	r8, r3, #1
 8017614:	2300      	movmi	r3, #0
 8017616:	9208      	str	r2, [sp, #32]
 8017618:	bf54      	ite	pl
 801761a:	f04f 0800 	movpl.w	r8, #0
 801761e:	9308      	strmi	r3, [sp, #32]
 8017620:	2f00      	cmp	r7, #0
 8017622:	db39      	blt.n	8017698 <_dtoa_r+0x218>
 8017624:	9b08      	ldr	r3, [sp, #32]
 8017626:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017628:	443b      	add	r3, r7
 801762a:	9308      	str	r3, [sp, #32]
 801762c:	2300      	movs	r3, #0
 801762e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017632:	2b09      	cmp	r3, #9
 8017634:	d864      	bhi.n	8017700 <_dtoa_r+0x280>
 8017636:	2b05      	cmp	r3, #5
 8017638:	bfc4      	itt	gt
 801763a:	3b04      	subgt	r3, #4
 801763c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801763e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017640:	f1a3 0302 	sub.w	r3, r3, #2
 8017644:	bfcc      	ite	gt
 8017646:	2400      	movgt	r4, #0
 8017648:	2401      	movle	r4, #1
 801764a:	2b03      	cmp	r3, #3
 801764c:	d863      	bhi.n	8017716 <_dtoa_r+0x296>
 801764e:	e8df f003 	tbb	[pc, r3]
 8017652:	372a      	.short	0x372a
 8017654:	5535      	.short	0x5535
 8017656:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801765a:	441e      	add	r6, r3
 801765c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8017660:	2b20      	cmp	r3, #32
 8017662:	bfc1      	itttt	gt
 8017664:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8017668:	409f      	lslgt	r7, r3
 801766a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801766e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8017672:	bfd6      	itet	le
 8017674:	f1c3 0320 	rsble	r3, r3, #32
 8017678:	ea47 0003 	orrgt.w	r0, r7, r3
 801767c:	fa04 f003 	lslle.w	r0, r4, r3
 8017680:	f7e8 ff70 	bl	8000564 <__aeabi_ui2d>
 8017684:	2201      	movs	r2, #1
 8017686:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801768a:	3e01      	subs	r6, #1
 801768c:	9214      	str	r2, [sp, #80]	@ 0x50
 801768e:	e777      	b.n	8017580 <_dtoa_r+0x100>
 8017690:	2301      	movs	r3, #1
 8017692:	e7b8      	b.n	8017606 <_dtoa_r+0x186>
 8017694:	9012      	str	r0, [sp, #72]	@ 0x48
 8017696:	e7b7      	b.n	8017608 <_dtoa_r+0x188>
 8017698:	427b      	negs	r3, r7
 801769a:	930a      	str	r3, [sp, #40]	@ 0x28
 801769c:	2300      	movs	r3, #0
 801769e:	eba8 0807 	sub.w	r8, r8, r7
 80176a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80176a4:	e7c4      	b.n	8017630 <_dtoa_r+0x1b0>
 80176a6:	2300      	movs	r3, #0
 80176a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80176aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	dc35      	bgt.n	801771c <_dtoa_r+0x29c>
 80176b0:	2301      	movs	r3, #1
 80176b2:	9300      	str	r3, [sp, #0]
 80176b4:	9307      	str	r3, [sp, #28]
 80176b6:	461a      	mov	r2, r3
 80176b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80176ba:	e00b      	b.n	80176d4 <_dtoa_r+0x254>
 80176bc:	2301      	movs	r3, #1
 80176be:	e7f3      	b.n	80176a8 <_dtoa_r+0x228>
 80176c0:	2300      	movs	r3, #0
 80176c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80176c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176c6:	18fb      	adds	r3, r7, r3
 80176c8:	9300      	str	r3, [sp, #0]
 80176ca:	3301      	adds	r3, #1
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	9307      	str	r3, [sp, #28]
 80176d0:	bfb8      	it	lt
 80176d2:	2301      	movlt	r3, #1
 80176d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80176d8:	2100      	movs	r1, #0
 80176da:	2204      	movs	r2, #4
 80176dc:	f102 0514 	add.w	r5, r2, #20
 80176e0:	429d      	cmp	r5, r3
 80176e2:	d91f      	bls.n	8017724 <_dtoa_r+0x2a4>
 80176e4:	6041      	str	r1, [r0, #4]
 80176e6:	4658      	mov	r0, fp
 80176e8:	f000 fce4 	bl	80180b4 <_Balloc>
 80176ec:	4682      	mov	sl, r0
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d13c      	bne.n	801776c <_dtoa_r+0x2ec>
 80176f2:	4b1b      	ldr	r3, [pc, #108]	@ (8017760 <_dtoa_r+0x2e0>)
 80176f4:	4602      	mov	r2, r0
 80176f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80176fa:	e6d8      	b.n	80174ae <_dtoa_r+0x2e>
 80176fc:	2301      	movs	r3, #1
 80176fe:	e7e0      	b.n	80176c2 <_dtoa_r+0x242>
 8017700:	2401      	movs	r4, #1
 8017702:	2300      	movs	r3, #0
 8017704:	9309      	str	r3, [sp, #36]	@ 0x24
 8017706:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801770c:	9300      	str	r3, [sp, #0]
 801770e:	9307      	str	r3, [sp, #28]
 8017710:	2200      	movs	r2, #0
 8017712:	2312      	movs	r3, #18
 8017714:	e7d0      	b.n	80176b8 <_dtoa_r+0x238>
 8017716:	2301      	movs	r3, #1
 8017718:	930b      	str	r3, [sp, #44]	@ 0x2c
 801771a:	e7f5      	b.n	8017708 <_dtoa_r+0x288>
 801771c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801771e:	9300      	str	r3, [sp, #0]
 8017720:	9307      	str	r3, [sp, #28]
 8017722:	e7d7      	b.n	80176d4 <_dtoa_r+0x254>
 8017724:	3101      	adds	r1, #1
 8017726:	0052      	lsls	r2, r2, #1
 8017728:	e7d8      	b.n	80176dc <_dtoa_r+0x25c>
 801772a:	bf00      	nop
 801772c:	f3af 8000 	nop.w
 8017730:	636f4361 	.word	0x636f4361
 8017734:	3fd287a7 	.word	0x3fd287a7
 8017738:	8b60c8b3 	.word	0x8b60c8b3
 801773c:	3fc68a28 	.word	0x3fc68a28
 8017740:	509f79fb 	.word	0x509f79fb
 8017744:	3fd34413 	.word	0x3fd34413
 8017748:	08019f0e 	.word	0x08019f0e
 801774c:	0801a120 	.word	0x0801a120
 8017750:	7ff00000 	.word	0x7ff00000
 8017754:	0801a0b4 	.word	0x0801a0b4
 8017758:	3ff80000 	.word	0x3ff80000
 801775c:	0801a218 	.word	0x0801a218
 8017760:	0801a178 	.word	0x0801a178
 8017764:	0801a11c 	.word	0x0801a11c
 8017768:	0801a0b3 	.word	0x0801a0b3
 801776c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017770:	6018      	str	r0, [r3, #0]
 8017772:	9b07      	ldr	r3, [sp, #28]
 8017774:	2b0e      	cmp	r3, #14
 8017776:	f200 80a4 	bhi.w	80178c2 <_dtoa_r+0x442>
 801777a:	2c00      	cmp	r4, #0
 801777c:	f000 80a1 	beq.w	80178c2 <_dtoa_r+0x442>
 8017780:	2f00      	cmp	r7, #0
 8017782:	dd33      	ble.n	80177ec <_dtoa_r+0x36c>
 8017784:	4bad      	ldr	r3, [pc, #692]	@ (8017a3c <_dtoa_r+0x5bc>)
 8017786:	f007 020f 	and.w	r2, r7, #15
 801778a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801778e:	ed93 7b00 	vldr	d7, [r3]
 8017792:	05f8      	lsls	r0, r7, #23
 8017794:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017798:	ea4f 1427 	mov.w	r4, r7, asr #4
 801779c:	d516      	bpl.n	80177cc <_dtoa_r+0x34c>
 801779e:	4ba8      	ldr	r3, [pc, #672]	@ (8017a40 <_dtoa_r+0x5c0>)
 80177a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80177a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80177a8:	f7e9 f880 	bl	80008ac <__aeabi_ddiv>
 80177ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80177b0:	f004 040f 	and.w	r4, r4, #15
 80177b4:	2603      	movs	r6, #3
 80177b6:	4da2      	ldr	r5, [pc, #648]	@ (8017a40 <_dtoa_r+0x5c0>)
 80177b8:	b954      	cbnz	r4, 80177d0 <_dtoa_r+0x350>
 80177ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80177be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177c2:	f7e9 f873 	bl	80008ac <__aeabi_ddiv>
 80177c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80177ca:	e028      	b.n	801781e <_dtoa_r+0x39e>
 80177cc:	2602      	movs	r6, #2
 80177ce:	e7f2      	b.n	80177b6 <_dtoa_r+0x336>
 80177d0:	07e1      	lsls	r1, r4, #31
 80177d2:	d508      	bpl.n	80177e6 <_dtoa_r+0x366>
 80177d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80177d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177dc:	f7e8 ff3c 	bl	8000658 <__aeabi_dmul>
 80177e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80177e4:	3601      	adds	r6, #1
 80177e6:	1064      	asrs	r4, r4, #1
 80177e8:	3508      	adds	r5, #8
 80177ea:	e7e5      	b.n	80177b8 <_dtoa_r+0x338>
 80177ec:	f000 80d2 	beq.w	8017994 <_dtoa_r+0x514>
 80177f0:	427c      	negs	r4, r7
 80177f2:	4b92      	ldr	r3, [pc, #584]	@ (8017a3c <_dtoa_r+0x5bc>)
 80177f4:	4d92      	ldr	r5, [pc, #584]	@ (8017a40 <_dtoa_r+0x5c0>)
 80177f6:	f004 020f 	and.w	r2, r4, #15
 80177fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80177fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017806:	f7e8 ff27 	bl	8000658 <__aeabi_dmul>
 801780a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801780e:	1124      	asrs	r4, r4, #4
 8017810:	2300      	movs	r3, #0
 8017812:	2602      	movs	r6, #2
 8017814:	2c00      	cmp	r4, #0
 8017816:	f040 80b2 	bne.w	801797e <_dtoa_r+0x4fe>
 801781a:	2b00      	cmp	r3, #0
 801781c:	d1d3      	bne.n	80177c6 <_dtoa_r+0x346>
 801781e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017824:	2b00      	cmp	r3, #0
 8017826:	f000 80b7 	beq.w	8017998 <_dtoa_r+0x518>
 801782a:	4b86      	ldr	r3, [pc, #536]	@ (8017a44 <_dtoa_r+0x5c4>)
 801782c:	2200      	movs	r2, #0
 801782e:	4620      	mov	r0, r4
 8017830:	4629      	mov	r1, r5
 8017832:	f7e9 f983 	bl	8000b3c <__aeabi_dcmplt>
 8017836:	2800      	cmp	r0, #0
 8017838:	f000 80ae 	beq.w	8017998 <_dtoa_r+0x518>
 801783c:	9b07      	ldr	r3, [sp, #28]
 801783e:	2b00      	cmp	r3, #0
 8017840:	f000 80aa 	beq.w	8017998 <_dtoa_r+0x518>
 8017844:	9b00      	ldr	r3, [sp, #0]
 8017846:	2b00      	cmp	r3, #0
 8017848:	dd37      	ble.n	80178ba <_dtoa_r+0x43a>
 801784a:	1e7b      	subs	r3, r7, #1
 801784c:	9304      	str	r3, [sp, #16]
 801784e:	4620      	mov	r0, r4
 8017850:	4b7d      	ldr	r3, [pc, #500]	@ (8017a48 <_dtoa_r+0x5c8>)
 8017852:	2200      	movs	r2, #0
 8017854:	4629      	mov	r1, r5
 8017856:	f7e8 feff 	bl	8000658 <__aeabi_dmul>
 801785a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801785e:	9c00      	ldr	r4, [sp, #0]
 8017860:	3601      	adds	r6, #1
 8017862:	4630      	mov	r0, r6
 8017864:	f7e8 fe8e 	bl	8000584 <__aeabi_i2d>
 8017868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801786c:	f7e8 fef4 	bl	8000658 <__aeabi_dmul>
 8017870:	4b76      	ldr	r3, [pc, #472]	@ (8017a4c <_dtoa_r+0x5cc>)
 8017872:	2200      	movs	r2, #0
 8017874:	f7e8 fd3a 	bl	80002ec <__adddf3>
 8017878:	4605      	mov	r5, r0
 801787a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801787e:	2c00      	cmp	r4, #0
 8017880:	f040 808d 	bne.w	801799e <_dtoa_r+0x51e>
 8017884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017888:	4b71      	ldr	r3, [pc, #452]	@ (8017a50 <_dtoa_r+0x5d0>)
 801788a:	2200      	movs	r2, #0
 801788c:	f7e8 fd2c 	bl	80002e8 <__aeabi_dsub>
 8017890:	4602      	mov	r2, r0
 8017892:	460b      	mov	r3, r1
 8017894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017898:	462a      	mov	r2, r5
 801789a:	4633      	mov	r3, r6
 801789c:	f7e9 f96c 	bl	8000b78 <__aeabi_dcmpgt>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	f040 828b 	bne.w	8017dbc <_dtoa_r+0x93c>
 80178a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178aa:	462a      	mov	r2, r5
 80178ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80178b0:	f7e9 f944 	bl	8000b3c <__aeabi_dcmplt>
 80178b4:	2800      	cmp	r0, #0
 80178b6:	f040 8128 	bne.w	8017b0a <_dtoa_r+0x68a>
 80178ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80178be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80178c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	f2c0 815a 	blt.w	8017b7e <_dtoa_r+0x6fe>
 80178ca:	2f0e      	cmp	r7, #14
 80178cc:	f300 8157 	bgt.w	8017b7e <_dtoa_r+0x6fe>
 80178d0:	4b5a      	ldr	r3, [pc, #360]	@ (8017a3c <_dtoa_r+0x5bc>)
 80178d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80178d6:	ed93 7b00 	vldr	d7, [r3]
 80178da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178dc:	2b00      	cmp	r3, #0
 80178de:	ed8d 7b00 	vstr	d7, [sp]
 80178e2:	da03      	bge.n	80178ec <_dtoa_r+0x46c>
 80178e4:	9b07      	ldr	r3, [sp, #28]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	f340 8101 	ble.w	8017aee <_dtoa_r+0x66e>
 80178ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80178f0:	4656      	mov	r6, sl
 80178f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178f6:	4620      	mov	r0, r4
 80178f8:	4629      	mov	r1, r5
 80178fa:	f7e8 ffd7 	bl	80008ac <__aeabi_ddiv>
 80178fe:	f7e9 f95b 	bl	8000bb8 <__aeabi_d2iz>
 8017902:	4680      	mov	r8, r0
 8017904:	f7e8 fe3e 	bl	8000584 <__aeabi_i2d>
 8017908:	e9dd 2300 	ldrd	r2, r3, [sp]
 801790c:	f7e8 fea4 	bl	8000658 <__aeabi_dmul>
 8017910:	4602      	mov	r2, r0
 8017912:	460b      	mov	r3, r1
 8017914:	4620      	mov	r0, r4
 8017916:	4629      	mov	r1, r5
 8017918:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801791c:	f7e8 fce4 	bl	80002e8 <__aeabi_dsub>
 8017920:	f806 4b01 	strb.w	r4, [r6], #1
 8017924:	9d07      	ldr	r5, [sp, #28]
 8017926:	eba6 040a 	sub.w	r4, r6, sl
 801792a:	42a5      	cmp	r5, r4
 801792c:	4602      	mov	r2, r0
 801792e:	460b      	mov	r3, r1
 8017930:	f040 8117 	bne.w	8017b62 <_dtoa_r+0x6e2>
 8017934:	f7e8 fcda 	bl	80002ec <__adddf3>
 8017938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801793c:	4604      	mov	r4, r0
 801793e:	460d      	mov	r5, r1
 8017940:	f7e9 f91a 	bl	8000b78 <__aeabi_dcmpgt>
 8017944:	2800      	cmp	r0, #0
 8017946:	f040 80f9 	bne.w	8017b3c <_dtoa_r+0x6bc>
 801794a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801794e:	4620      	mov	r0, r4
 8017950:	4629      	mov	r1, r5
 8017952:	f7e9 f8e9 	bl	8000b28 <__aeabi_dcmpeq>
 8017956:	b118      	cbz	r0, 8017960 <_dtoa_r+0x4e0>
 8017958:	f018 0f01 	tst.w	r8, #1
 801795c:	f040 80ee 	bne.w	8017b3c <_dtoa_r+0x6bc>
 8017960:	4649      	mov	r1, r9
 8017962:	4658      	mov	r0, fp
 8017964:	f000 fbe6 	bl	8018134 <_Bfree>
 8017968:	2300      	movs	r3, #0
 801796a:	7033      	strb	r3, [r6, #0]
 801796c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801796e:	3701      	adds	r7, #1
 8017970:	601f      	str	r7, [r3, #0]
 8017972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017974:	2b00      	cmp	r3, #0
 8017976:	f000 831d 	beq.w	8017fb4 <_dtoa_r+0xb34>
 801797a:	601e      	str	r6, [r3, #0]
 801797c:	e31a      	b.n	8017fb4 <_dtoa_r+0xb34>
 801797e:	07e2      	lsls	r2, r4, #31
 8017980:	d505      	bpl.n	801798e <_dtoa_r+0x50e>
 8017982:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017986:	f7e8 fe67 	bl	8000658 <__aeabi_dmul>
 801798a:	3601      	adds	r6, #1
 801798c:	2301      	movs	r3, #1
 801798e:	1064      	asrs	r4, r4, #1
 8017990:	3508      	adds	r5, #8
 8017992:	e73f      	b.n	8017814 <_dtoa_r+0x394>
 8017994:	2602      	movs	r6, #2
 8017996:	e742      	b.n	801781e <_dtoa_r+0x39e>
 8017998:	9c07      	ldr	r4, [sp, #28]
 801799a:	9704      	str	r7, [sp, #16]
 801799c:	e761      	b.n	8017862 <_dtoa_r+0x3e2>
 801799e:	4b27      	ldr	r3, [pc, #156]	@ (8017a3c <_dtoa_r+0x5bc>)
 80179a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80179a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80179a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80179aa:	4454      	add	r4, sl
 80179ac:	2900      	cmp	r1, #0
 80179ae:	d053      	beq.n	8017a58 <_dtoa_r+0x5d8>
 80179b0:	4928      	ldr	r1, [pc, #160]	@ (8017a54 <_dtoa_r+0x5d4>)
 80179b2:	2000      	movs	r0, #0
 80179b4:	f7e8 ff7a 	bl	80008ac <__aeabi_ddiv>
 80179b8:	4633      	mov	r3, r6
 80179ba:	462a      	mov	r2, r5
 80179bc:	f7e8 fc94 	bl	80002e8 <__aeabi_dsub>
 80179c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80179c4:	4656      	mov	r6, sl
 80179c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179ca:	f7e9 f8f5 	bl	8000bb8 <__aeabi_d2iz>
 80179ce:	4605      	mov	r5, r0
 80179d0:	f7e8 fdd8 	bl	8000584 <__aeabi_i2d>
 80179d4:	4602      	mov	r2, r0
 80179d6:	460b      	mov	r3, r1
 80179d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179dc:	f7e8 fc84 	bl	80002e8 <__aeabi_dsub>
 80179e0:	3530      	adds	r5, #48	@ 0x30
 80179e2:	4602      	mov	r2, r0
 80179e4:	460b      	mov	r3, r1
 80179e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80179ea:	f806 5b01 	strb.w	r5, [r6], #1
 80179ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80179f2:	f7e9 f8a3 	bl	8000b3c <__aeabi_dcmplt>
 80179f6:	2800      	cmp	r0, #0
 80179f8:	d171      	bne.n	8017ade <_dtoa_r+0x65e>
 80179fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179fe:	4911      	ldr	r1, [pc, #68]	@ (8017a44 <_dtoa_r+0x5c4>)
 8017a00:	2000      	movs	r0, #0
 8017a02:	f7e8 fc71 	bl	80002e8 <__aeabi_dsub>
 8017a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017a0a:	f7e9 f897 	bl	8000b3c <__aeabi_dcmplt>
 8017a0e:	2800      	cmp	r0, #0
 8017a10:	f040 8095 	bne.w	8017b3e <_dtoa_r+0x6be>
 8017a14:	42a6      	cmp	r6, r4
 8017a16:	f43f af50 	beq.w	80178ba <_dtoa_r+0x43a>
 8017a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8017a48 <_dtoa_r+0x5c8>)
 8017a20:	2200      	movs	r2, #0
 8017a22:	f7e8 fe19 	bl	8000658 <__aeabi_dmul>
 8017a26:	4b08      	ldr	r3, [pc, #32]	@ (8017a48 <_dtoa_r+0x5c8>)
 8017a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a32:	f7e8 fe11 	bl	8000658 <__aeabi_dmul>
 8017a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017a3a:	e7c4      	b.n	80179c6 <_dtoa_r+0x546>
 8017a3c:	0801a218 	.word	0x0801a218
 8017a40:	0801a1f0 	.word	0x0801a1f0
 8017a44:	3ff00000 	.word	0x3ff00000
 8017a48:	40240000 	.word	0x40240000
 8017a4c:	401c0000 	.word	0x401c0000
 8017a50:	40140000 	.word	0x40140000
 8017a54:	3fe00000 	.word	0x3fe00000
 8017a58:	4631      	mov	r1, r6
 8017a5a:	4628      	mov	r0, r5
 8017a5c:	f7e8 fdfc 	bl	8000658 <__aeabi_dmul>
 8017a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017a64:	9415      	str	r4, [sp, #84]	@ 0x54
 8017a66:	4656      	mov	r6, sl
 8017a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a6c:	f7e9 f8a4 	bl	8000bb8 <__aeabi_d2iz>
 8017a70:	4605      	mov	r5, r0
 8017a72:	f7e8 fd87 	bl	8000584 <__aeabi_i2d>
 8017a76:	4602      	mov	r2, r0
 8017a78:	460b      	mov	r3, r1
 8017a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a7e:	f7e8 fc33 	bl	80002e8 <__aeabi_dsub>
 8017a82:	3530      	adds	r5, #48	@ 0x30
 8017a84:	f806 5b01 	strb.w	r5, [r6], #1
 8017a88:	4602      	mov	r2, r0
 8017a8a:	460b      	mov	r3, r1
 8017a8c:	42a6      	cmp	r6, r4
 8017a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017a92:	f04f 0200 	mov.w	r2, #0
 8017a96:	d124      	bne.n	8017ae2 <_dtoa_r+0x662>
 8017a98:	4bac      	ldr	r3, [pc, #688]	@ (8017d4c <_dtoa_r+0x8cc>)
 8017a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017a9e:	f7e8 fc25 	bl	80002ec <__adddf3>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017aaa:	f7e9 f865 	bl	8000b78 <__aeabi_dcmpgt>
 8017aae:	2800      	cmp	r0, #0
 8017ab0:	d145      	bne.n	8017b3e <_dtoa_r+0x6be>
 8017ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017ab6:	49a5      	ldr	r1, [pc, #660]	@ (8017d4c <_dtoa_r+0x8cc>)
 8017ab8:	2000      	movs	r0, #0
 8017aba:	f7e8 fc15 	bl	80002e8 <__aeabi_dsub>
 8017abe:	4602      	mov	r2, r0
 8017ac0:	460b      	mov	r3, r1
 8017ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ac6:	f7e9 f839 	bl	8000b3c <__aeabi_dcmplt>
 8017aca:	2800      	cmp	r0, #0
 8017acc:	f43f aef5 	beq.w	80178ba <_dtoa_r+0x43a>
 8017ad0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017ad2:	1e73      	subs	r3, r6, #1
 8017ad4:	9315      	str	r3, [sp, #84]	@ 0x54
 8017ad6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ada:	2b30      	cmp	r3, #48	@ 0x30
 8017adc:	d0f8      	beq.n	8017ad0 <_dtoa_r+0x650>
 8017ade:	9f04      	ldr	r7, [sp, #16]
 8017ae0:	e73e      	b.n	8017960 <_dtoa_r+0x4e0>
 8017ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8017d50 <_dtoa_r+0x8d0>)
 8017ae4:	f7e8 fdb8 	bl	8000658 <__aeabi_dmul>
 8017ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017aec:	e7bc      	b.n	8017a68 <_dtoa_r+0x5e8>
 8017aee:	d10c      	bne.n	8017b0a <_dtoa_r+0x68a>
 8017af0:	4b98      	ldr	r3, [pc, #608]	@ (8017d54 <_dtoa_r+0x8d4>)
 8017af2:	2200      	movs	r2, #0
 8017af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017af8:	f7e8 fdae 	bl	8000658 <__aeabi_dmul>
 8017afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b00:	f7e9 f830 	bl	8000b64 <__aeabi_dcmpge>
 8017b04:	2800      	cmp	r0, #0
 8017b06:	f000 8157 	beq.w	8017db8 <_dtoa_r+0x938>
 8017b0a:	2400      	movs	r4, #0
 8017b0c:	4625      	mov	r5, r4
 8017b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017b10:	43db      	mvns	r3, r3
 8017b12:	9304      	str	r3, [sp, #16]
 8017b14:	4656      	mov	r6, sl
 8017b16:	2700      	movs	r7, #0
 8017b18:	4621      	mov	r1, r4
 8017b1a:	4658      	mov	r0, fp
 8017b1c:	f000 fb0a 	bl	8018134 <_Bfree>
 8017b20:	2d00      	cmp	r5, #0
 8017b22:	d0dc      	beq.n	8017ade <_dtoa_r+0x65e>
 8017b24:	b12f      	cbz	r7, 8017b32 <_dtoa_r+0x6b2>
 8017b26:	42af      	cmp	r7, r5
 8017b28:	d003      	beq.n	8017b32 <_dtoa_r+0x6b2>
 8017b2a:	4639      	mov	r1, r7
 8017b2c:	4658      	mov	r0, fp
 8017b2e:	f000 fb01 	bl	8018134 <_Bfree>
 8017b32:	4629      	mov	r1, r5
 8017b34:	4658      	mov	r0, fp
 8017b36:	f000 fafd 	bl	8018134 <_Bfree>
 8017b3a:	e7d0      	b.n	8017ade <_dtoa_r+0x65e>
 8017b3c:	9704      	str	r7, [sp, #16]
 8017b3e:	4633      	mov	r3, r6
 8017b40:	461e      	mov	r6, r3
 8017b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b46:	2a39      	cmp	r2, #57	@ 0x39
 8017b48:	d107      	bne.n	8017b5a <_dtoa_r+0x6da>
 8017b4a:	459a      	cmp	sl, r3
 8017b4c:	d1f8      	bne.n	8017b40 <_dtoa_r+0x6c0>
 8017b4e:	9a04      	ldr	r2, [sp, #16]
 8017b50:	3201      	adds	r2, #1
 8017b52:	9204      	str	r2, [sp, #16]
 8017b54:	2230      	movs	r2, #48	@ 0x30
 8017b56:	f88a 2000 	strb.w	r2, [sl]
 8017b5a:	781a      	ldrb	r2, [r3, #0]
 8017b5c:	3201      	adds	r2, #1
 8017b5e:	701a      	strb	r2, [r3, #0]
 8017b60:	e7bd      	b.n	8017ade <_dtoa_r+0x65e>
 8017b62:	4b7b      	ldr	r3, [pc, #492]	@ (8017d50 <_dtoa_r+0x8d0>)
 8017b64:	2200      	movs	r2, #0
 8017b66:	f7e8 fd77 	bl	8000658 <__aeabi_dmul>
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	4604      	mov	r4, r0
 8017b70:	460d      	mov	r5, r1
 8017b72:	f7e8 ffd9 	bl	8000b28 <__aeabi_dcmpeq>
 8017b76:	2800      	cmp	r0, #0
 8017b78:	f43f aebb 	beq.w	80178f2 <_dtoa_r+0x472>
 8017b7c:	e6f0      	b.n	8017960 <_dtoa_r+0x4e0>
 8017b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017b80:	2a00      	cmp	r2, #0
 8017b82:	f000 80db 	beq.w	8017d3c <_dtoa_r+0x8bc>
 8017b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b88:	2a01      	cmp	r2, #1
 8017b8a:	f300 80bf 	bgt.w	8017d0c <_dtoa_r+0x88c>
 8017b8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017b90:	2a00      	cmp	r2, #0
 8017b92:	f000 80b7 	beq.w	8017d04 <_dtoa_r+0x884>
 8017b96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8017b9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017b9c:	4646      	mov	r6, r8
 8017b9e:	9a08      	ldr	r2, [sp, #32]
 8017ba0:	2101      	movs	r1, #1
 8017ba2:	441a      	add	r2, r3
 8017ba4:	4658      	mov	r0, fp
 8017ba6:	4498      	add	r8, r3
 8017ba8:	9208      	str	r2, [sp, #32]
 8017baa:	f000 fb77 	bl	801829c <__i2b>
 8017bae:	4605      	mov	r5, r0
 8017bb0:	b15e      	cbz	r6, 8017bca <_dtoa_r+0x74a>
 8017bb2:	9b08      	ldr	r3, [sp, #32]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	dd08      	ble.n	8017bca <_dtoa_r+0x74a>
 8017bb8:	42b3      	cmp	r3, r6
 8017bba:	9a08      	ldr	r2, [sp, #32]
 8017bbc:	bfa8      	it	ge
 8017bbe:	4633      	movge	r3, r6
 8017bc0:	eba8 0803 	sub.w	r8, r8, r3
 8017bc4:	1af6      	subs	r6, r6, r3
 8017bc6:	1ad3      	subs	r3, r2, r3
 8017bc8:	9308      	str	r3, [sp, #32]
 8017bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bcc:	b1f3      	cbz	r3, 8017c0c <_dtoa_r+0x78c>
 8017bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	f000 80b7 	beq.w	8017d44 <_dtoa_r+0x8c4>
 8017bd6:	b18c      	cbz	r4, 8017bfc <_dtoa_r+0x77c>
 8017bd8:	4629      	mov	r1, r5
 8017bda:	4622      	mov	r2, r4
 8017bdc:	4658      	mov	r0, fp
 8017bde:	f000 fc1d 	bl	801841c <__pow5mult>
 8017be2:	464a      	mov	r2, r9
 8017be4:	4601      	mov	r1, r0
 8017be6:	4605      	mov	r5, r0
 8017be8:	4658      	mov	r0, fp
 8017bea:	f000 fb6d 	bl	80182c8 <__multiply>
 8017bee:	4649      	mov	r1, r9
 8017bf0:	9004      	str	r0, [sp, #16]
 8017bf2:	4658      	mov	r0, fp
 8017bf4:	f000 fa9e 	bl	8018134 <_Bfree>
 8017bf8:	9b04      	ldr	r3, [sp, #16]
 8017bfa:	4699      	mov	r9, r3
 8017bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017bfe:	1b1a      	subs	r2, r3, r4
 8017c00:	d004      	beq.n	8017c0c <_dtoa_r+0x78c>
 8017c02:	4649      	mov	r1, r9
 8017c04:	4658      	mov	r0, fp
 8017c06:	f000 fc09 	bl	801841c <__pow5mult>
 8017c0a:	4681      	mov	r9, r0
 8017c0c:	2101      	movs	r1, #1
 8017c0e:	4658      	mov	r0, fp
 8017c10:	f000 fb44 	bl	801829c <__i2b>
 8017c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c16:	4604      	mov	r4, r0
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	f000 81cf 	beq.w	8017fbc <_dtoa_r+0xb3c>
 8017c1e:	461a      	mov	r2, r3
 8017c20:	4601      	mov	r1, r0
 8017c22:	4658      	mov	r0, fp
 8017c24:	f000 fbfa 	bl	801841c <__pow5mult>
 8017c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c2a:	2b01      	cmp	r3, #1
 8017c2c:	4604      	mov	r4, r0
 8017c2e:	f300 8095 	bgt.w	8017d5c <_dtoa_r+0x8dc>
 8017c32:	9b02      	ldr	r3, [sp, #8]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	f040 8087 	bne.w	8017d48 <_dtoa_r+0x8c8>
 8017c3a:	9b03      	ldr	r3, [sp, #12]
 8017c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	f040 8089 	bne.w	8017d58 <_dtoa_r+0x8d8>
 8017c46:	9b03      	ldr	r3, [sp, #12]
 8017c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017c4c:	0d1b      	lsrs	r3, r3, #20
 8017c4e:	051b      	lsls	r3, r3, #20
 8017c50:	b12b      	cbz	r3, 8017c5e <_dtoa_r+0x7de>
 8017c52:	9b08      	ldr	r3, [sp, #32]
 8017c54:	3301      	adds	r3, #1
 8017c56:	9308      	str	r3, [sp, #32]
 8017c58:	f108 0801 	add.w	r8, r8, #1
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f000 81b0 	beq.w	8017fc8 <_dtoa_r+0xb48>
 8017c68:	6923      	ldr	r3, [r4, #16]
 8017c6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c6e:	6918      	ldr	r0, [r3, #16]
 8017c70:	f000 fac8 	bl	8018204 <__hi0bits>
 8017c74:	f1c0 0020 	rsb	r0, r0, #32
 8017c78:	9b08      	ldr	r3, [sp, #32]
 8017c7a:	4418      	add	r0, r3
 8017c7c:	f010 001f 	ands.w	r0, r0, #31
 8017c80:	d077      	beq.n	8017d72 <_dtoa_r+0x8f2>
 8017c82:	f1c0 0320 	rsb	r3, r0, #32
 8017c86:	2b04      	cmp	r3, #4
 8017c88:	dd6b      	ble.n	8017d62 <_dtoa_r+0x8e2>
 8017c8a:	9b08      	ldr	r3, [sp, #32]
 8017c8c:	f1c0 001c 	rsb	r0, r0, #28
 8017c90:	4403      	add	r3, r0
 8017c92:	4480      	add	r8, r0
 8017c94:	4406      	add	r6, r0
 8017c96:	9308      	str	r3, [sp, #32]
 8017c98:	f1b8 0f00 	cmp.w	r8, #0
 8017c9c:	dd05      	ble.n	8017caa <_dtoa_r+0x82a>
 8017c9e:	4649      	mov	r1, r9
 8017ca0:	4642      	mov	r2, r8
 8017ca2:	4658      	mov	r0, fp
 8017ca4:	f000 fc14 	bl	80184d0 <__lshift>
 8017ca8:	4681      	mov	r9, r0
 8017caa:	9b08      	ldr	r3, [sp, #32]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	dd05      	ble.n	8017cbc <_dtoa_r+0x83c>
 8017cb0:	4621      	mov	r1, r4
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	4658      	mov	r0, fp
 8017cb6:	f000 fc0b 	bl	80184d0 <__lshift>
 8017cba:	4604      	mov	r4, r0
 8017cbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d059      	beq.n	8017d76 <_dtoa_r+0x8f6>
 8017cc2:	4621      	mov	r1, r4
 8017cc4:	4648      	mov	r0, r9
 8017cc6:	f000 fc6f 	bl	80185a8 <__mcmp>
 8017cca:	2800      	cmp	r0, #0
 8017ccc:	da53      	bge.n	8017d76 <_dtoa_r+0x8f6>
 8017cce:	1e7b      	subs	r3, r7, #1
 8017cd0:	9304      	str	r3, [sp, #16]
 8017cd2:	4649      	mov	r1, r9
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	220a      	movs	r2, #10
 8017cd8:	4658      	mov	r0, fp
 8017cda:	f000 fa4d 	bl	8018178 <__multadd>
 8017cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ce0:	4681      	mov	r9, r0
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	f000 8172 	beq.w	8017fcc <_dtoa_r+0xb4c>
 8017ce8:	2300      	movs	r3, #0
 8017cea:	4629      	mov	r1, r5
 8017cec:	220a      	movs	r2, #10
 8017cee:	4658      	mov	r0, fp
 8017cf0:	f000 fa42 	bl	8018178 <__multadd>
 8017cf4:	9b00      	ldr	r3, [sp, #0]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	4605      	mov	r5, r0
 8017cfa:	dc67      	bgt.n	8017dcc <_dtoa_r+0x94c>
 8017cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cfe:	2b02      	cmp	r3, #2
 8017d00:	dc41      	bgt.n	8017d86 <_dtoa_r+0x906>
 8017d02:	e063      	b.n	8017dcc <_dtoa_r+0x94c>
 8017d04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017d06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017d0a:	e746      	b.n	8017b9a <_dtoa_r+0x71a>
 8017d0c:	9b07      	ldr	r3, [sp, #28]
 8017d0e:	1e5c      	subs	r4, r3, #1
 8017d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017d12:	42a3      	cmp	r3, r4
 8017d14:	bfbf      	itttt	lt
 8017d16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017d18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017d1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017d1c:	1ae3      	sublt	r3, r4, r3
 8017d1e:	bfb4      	ite	lt
 8017d20:	18d2      	addlt	r2, r2, r3
 8017d22:	1b1c      	subge	r4, r3, r4
 8017d24:	9b07      	ldr	r3, [sp, #28]
 8017d26:	bfbc      	itt	lt
 8017d28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017d2a:	2400      	movlt	r4, #0
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	bfb5      	itete	lt
 8017d30:	eba8 0603 	sublt.w	r6, r8, r3
 8017d34:	9b07      	ldrge	r3, [sp, #28]
 8017d36:	2300      	movlt	r3, #0
 8017d38:	4646      	movge	r6, r8
 8017d3a:	e730      	b.n	8017b9e <_dtoa_r+0x71e>
 8017d3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017d3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017d40:	4646      	mov	r6, r8
 8017d42:	e735      	b.n	8017bb0 <_dtoa_r+0x730>
 8017d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017d46:	e75c      	b.n	8017c02 <_dtoa_r+0x782>
 8017d48:	2300      	movs	r3, #0
 8017d4a:	e788      	b.n	8017c5e <_dtoa_r+0x7de>
 8017d4c:	3fe00000 	.word	0x3fe00000
 8017d50:	40240000 	.word	0x40240000
 8017d54:	40140000 	.word	0x40140000
 8017d58:	9b02      	ldr	r3, [sp, #8]
 8017d5a:	e780      	b.n	8017c5e <_dtoa_r+0x7de>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d60:	e782      	b.n	8017c68 <_dtoa_r+0x7e8>
 8017d62:	d099      	beq.n	8017c98 <_dtoa_r+0x818>
 8017d64:	9a08      	ldr	r2, [sp, #32]
 8017d66:	331c      	adds	r3, #28
 8017d68:	441a      	add	r2, r3
 8017d6a:	4498      	add	r8, r3
 8017d6c:	441e      	add	r6, r3
 8017d6e:	9208      	str	r2, [sp, #32]
 8017d70:	e792      	b.n	8017c98 <_dtoa_r+0x818>
 8017d72:	4603      	mov	r3, r0
 8017d74:	e7f6      	b.n	8017d64 <_dtoa_r+0x8e4>
 8017d76:	9b07      	ldr	r3, [sp, #28]
 8017d78:	9704      	str	r7, [sp, #16]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	dc20      	bgt.n	8017dc0 <_dtoa_r+0x940>
 8017d7e:	9300      	str	r3, [sp, #0]
 8017d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d82:	2b02      	cmp	r3, #2
 8017d84:	dd1e      	ble.n	8017dc4 <_dtoa_r+0x944>
 8017d86:	9b00      	ldr	r3, [sp, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f47f aec0 	bne.w	8017b0e <_dtoa_r+0x68e>
 8017d8e:	4621      	mov	r1, r4
 8017d90:	2205      	movs	r2, #5
 8017d92:	4658      	mov	r0, fp
 8017d94:	f000 f9f0 	bl	8018178 <__multadd>
 8017d98:	4601      	mov	r1, r0
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	4648      	mov	r0, r9
 8017d9e:	f000 fc03 	bl	80185a8 <__mcmp>
 8017da2:	2800      	cmp	r0, #0
 8017da4:	f77f aeb3 	ble.w	8017b0e <_dtoa_r+0x68e>
 8017da8:	4656      	mov	r6, sl
 8017daa:	2331      	movs	r3, #49	@ 0x31
 8017dac:	f806 3b01 	strb.w	r3, [r6], #1
 8017db0:	9b04      	ldr	r3, [sp, #16]
 8017db2:	3301      	adds	r3, #1
 8017db4:	9304      	str	r3, [sp, #16]
 8017db6:	e6ae      	b.n	8017b16 <_dtoa_r+0x696>
 8017db8:	9c07      	ldr	r4, [sp, #28]
 8017dba:	9704      	str	r7, [sp, #16]
 8017dbc:	4625      	mov	r5, r4
 8017dbe:	e7f3      	b.n	8017da8 <_dtoa_r+0x928>
 8017dc0:	9b07      	ldr	r3, [sp, #28]
 8017dc2:	9300      	str	r3, [sp, #0]
 8017dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	f000 8104 	beq.w	8017fd4 <_dtoa_r+0xb54>
 8017dcc:	2e00      	cmp	r6, #0
 8017dce:	dd05      	ble.n	8017ddc <_dtoa_r+0x95c>
 8017dd0:	4629      	mov	r1, r5
 8017dd2:	4632      	mov	r2, r6
 8017dd4:	4658      	mov	r0, fp
 8017dd6:	f000 fb7b 	bl	80184d0 <__lshift>
 8017dda:	4605      	mov	r5, r0
 8017ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d05a      	beq.n	8017e98 <_dtoa_r+0xa18>
 8017de2:	6869      	ldr	r1, [r5, #4]
 8017de4:	4658      	mov	r0, fp
 8017de6:	f000 f965 	bl	80180b4 <_Balloc>
 8017dea:	4606      	mov	r6, r0
 8017dec:	b928      	cbnz	r0, 8017dfa <_dtoa_r+0x97a>
 8017dee:	4b84      	ldr	r3, [pc, #528]	@ (8018000 <_dtoa_r+0xb80>)
 8017df0:	4602      	mov	r2, r0
 8017df2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017df6:	f7ff bb5a 	b.w	80174ae <_dtoa_r+0x2e>
 8017dfa:	692a      	ldr	r2, [r5, #16]
 8017dfc:	3202      	adds	r2, #2
 8017dfe:	0092      	lsls	r2, r2, #2
 8017e00:	f105 010c 	add.w	r1, r5, #12
 8017e04:	300c      	adds	r0, #12
 8017e06:	f7ff fa86 	bl	8017316 <memcpy>
 8017e0a:	2201      	movs	r2, #1
 8017e0c:	4631      	mov	r1, r6
 8017e0e:	4658      	mov	r0, fp
 8017e10:	f000 fb5e 	bl	80184d0 <__lshift>
 8017e14:	f10a 0301 	add.w	r3, sl, #1
 8017e18:	9307      	str	r3, [sp, #28]
 8017e1a:	9b00      	ldr	r3, [sp, #0]
 8017e1c:	4453      	add	r3, sl
 8017e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e20:	9b02      	ldr	r3, [sp, #8]
 8017e22:	f003 0301 	and.w	r3, r3, #1
 8017e26:	462f      	mov	r7, r5
 8017e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e2a:	4605      	mov	r5, r0
 8017e2c:	9b07      	ldr	r3, [sp, #28]
 8017e2e:	4621      	mov	r1, r4
 8017e30:	3b01      	subs	r3, #1
 8017e32:	4648      	mov	r0, r9
 8017e34:	9300      	str	r3, [sp, #0]
 8017e36:	f7ff fa9b 	bl	8017370 <quorem>
 8017e3a:	4639      	mov	r1, r7
 8017e3c:	9002      	str	r0, [sp, #8]
 8017e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017e42:	4648      	mov	r0, r9
 8017e44:	f000 fbb0 	bl	80185a8 <__mcmp>
 8017e48:	462a      	mov	r2, r5
 8017e4a:	9008      	str	r0, [sp, #32]
 8017e4c:	4621      	mov	r1, r4
 8017e4e:	4658      	mov	r0, fp
 8017e50:	f000 fbc6 	bl	80185e0 <__mdiff>
 8017e54:	68c2      	ldr	r2, [r0, #12]
 8017e56:	4606      	mov	r6, r0
 8017e58:	bb02      	cbnz	r2, 8017e9c <_dtoa_r+0xa1c>
 8017e5a:	4601      	mov	r1, r0
 8017e5c:	4648      	mov	r0, r9
 8017e5e:	f000 fba3 	bl	80185a8 <__mcmp>
 8017e62:	4602      	mov	r2, r0
 8017e64:	4631      	mov	r1, r6
 8017e66:	4658      	mov	r0, fp
 8017e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8017e6a:	f000 f963 	bl	8018134 <_Bfree>
 8017e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e72:	9e07      	ldr	r6, [sp, #28]
 8017e74:	ea43 0102 	orr.w	r1, r3, r2
 8017e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017e7a:	4319      	orrs	r1, r3
 8017e7c:	d110      	bne.n	8017ea0 <_dtoa_r+0xa20>
 8017e7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017e82:	d029      	beq.n	8017ed8 <_dtoa_r+0xa58>
 8017e84:	9b08      	ldr	r3, [sp, #32]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	dd02      	ble.n	8017e90 <_dtoa_r+0xa10>
 8017e8a:	9b02      	ldr	r3, [sp, #8]
 8017e8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017e90:	9b00      	ldr	r3, [sp, #0]
 8017e92:	f883 8000 	strb.w	r8, [r3]
 8017e96:	e63f      	b.n	8017b18 <_dtoa_r+0x698>
 8017e98:	4628      	mov	r0, r5
 8017e9a:	e7bb      	b.n	8017e14 <_dtoa_r+0x994>
 8017e9c:	2201      	movs	r2, #1
 8017e9e:	e7e1      	b.n	8017e64 <_dtoa_r+0x9e4>
 8017ea0:	9b08      	ldr	r3, [sp, #32]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	db04      	blt.n	8017eb0 <_dtoa_r+0xa30>
 8017ea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017ea8:	430b      	orrs	r3, r1
 8017eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017eac:	430b      	orrs	r3, r1
 8017eae:	d120      	bne.n	8017ef2 <_dtoa_r+0xa72>
 8017eb0:	2a00      	cmp	r2, #0
 8017eb2:	dded      	ble.n	8017e90 <_dtoa_r+0xa10>
 8017eb4:	4649      	mov	r1, r9
 8017eb6:	2201      	movs	r2, #1
 8017eb8:	4658      	mov	r0, fp
 8017eba:	f000 fb09 	bl	80184d0 <__lshift>
 8017ebe:	4621      	mov	r1, r4
 8017ec0:	4681      	mov	r9, r0
 8017ec2:	f000 fb71 	bl	80185a8 <__mcmp>
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	dc03      	bgt.n	8017ed2 <_dtoa_r+0xa52>
 8017eca:	d1e1      	bne.n	8017e90 <_dtoa_r+0xa10>
 8017ecc:	f018 0f01 	tst.w	r8, #1
 8017ed0:	d0de      	beq.n	8017e90 <_dtoa_r+0xa10>
 8017ed2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017ed6:	d1d8      	bne.n	8017e8a <_dtoa_r+0xa0a>
 8017ed8:	9a00      	ldr	r2, [sp, #0]
 8017eda:	2339      	movs	r3, #57	@ 0x39
 8017edc:	7013      	strb	r3, [r2, #0]
 8017ede:	4633      	mov	r3, r6
 8017ee0:	461e      	mov	r6, r3
 8017ee2:	3b01      	subs	r3, #1
 8017ee4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017ee8:	2a39      	cmp	r2, #57	@ 0x39
 8017eea:	d052      	beq.n	8017f92 <_dtoa_r+0xb12>
 8017eec:	3201      	adds	r2, #1
 8017eee:	701a      	strb	r2, [r3, #0]
 8017ef0:	e612      	b.n	8017b18 <_dtoa_r+0x698>
 8017ef2:	2a00      	cmp	r2, #0
 8017ef4:	dd07      	ble.n	8017f06 <_dtoa_r+0xa86>
 8017ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017efa:	d0ed      	beq.n	8017ed8 <_dtoa_r+0xa58>
 8017efc:	9a00      	ldr	r2, [sp, #0]
 8017efe:	f108 0301 	add.w	r3, r8, #1
 8017f02:	7013      	strb	r3, [r2, #0]
 8017f04:	e608      	b.n	8017b18 <_dtoa_r+0x698>
 8017f06:	9b07      	ldr	r3, [sp, #28]
 8017f08:	9a07      	ldr	r2, [sp, #28]
 8017f0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f10:	4293      	cmp	r3, r2
 8017f12:	d028      	beq.n	8017f66 <_dtoa_r+0xae6>
 8017f14:	4649      	mov	r1, r9
 8017f16:	2300      	movs	r3, #0
 8017f18:	220a      	movs	r2, #10
 8017f1a:	4658      	mov	r0, fp
 8017f1c:	f000 f92c 	bl	8018178 <__multadd>
 8017f20:	42af      	cmp	r7, r5
 8017f22:	4681      	mov	r9, r0
 8017f24:	f04f 0300 	mov.w	r3, #0
 8017f28:	f04f 020a 	mov.w	r2, #10
 8017f2c:	4639      	mov	r1, r7
 8017f2e:	4658      	mov	r0, fp
 8017f30:	d107      	bne.n	8017f42 <_dtoa_r+0xac2>
 8017f32:	f000 f921 	bl	8018178 <__multadd>
 8017f36:	4607      	mov	r7, r0
 8017f38:	4605      	mov	r5, r0
 8017f3a:	9b07      	ldr	r3, [sp, #28]
 8017f3c:	3301      	adds	r3, #1
 8017f3e:	9307      	str	r3, [sp, #28]
 8017f40:	e774      	b.n	8017e2c <_dtoa_r+0x9ac>
 8017f42:	f000 f919 	bl	8018178 <__multadd>
 8017f46:	4629      	mov	r1, r5
 8017f48:	4607      	mov	r7, r0
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	220a      	movs	r2, #10
 8017f4e:	4658      	mov	r0, fp
 8017f50:	f000 f912 	bl	8018178 <__multadd>
 8017f54:	4605      	mov	r5, r0
 8017f56:	e7f0      	b.n	8017f3a <_dtoa_r+0xaba>
 8017f58:	9b00      	ldr	r3, [sp, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	bfcc      	ite	gt
 8017f5e:	461e      	movgt	r6, r3
 8017f60:	2601      	movle	r6, #1
 8017f62:	4456      	add	r6, sl
 8017f64:	2700      	movs	r7, #0
 8017f66:	4649      	mov	r1, r9
 8017f68:	2201      	movs	r2, #1
 8017f6a:	4658      	mov	r0, fp
 8017f6c:	f000 fab0 	bl	80184d0 <__lshift>
 8017f70:	4621      	mov	r1, r4
 8017f72:	4681      	mov	r9, r0
 8017f74:	f000 fb18 	bl	80185a8 <__mcmp>
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	dcb0      	bgt.n	8017ede <_dtoa_r+0xa5e>
 8017f7c:	d102      	bne.n	8017f84 <_dtoa_r+0xb04>
 8017f7e:	f018 0f01 	tst.w	r8, #1
 8017f82:	d1ac      	bne.n	8017ede <_dtoa_r+0xa5e>
 8017f84:	4633      	mov	r3, r6
 8017f86:	461e      	mov	r6, r3
 8017f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017f8c:	2a30      	cmp	r2, #48	@ 0x30
 8017f8e:	d0fa      	beq.n	8017f86 <_dtoa_r+0xb06>
 8017f90:	e5c2      	b.n	8017b18 <_dtoa_r+0x698>
 8017f92:	459a      	cmp	sl, r3
 8017f94:	d1a4      	bne.n	8017ee0 <_dtoa_r+0xa60>
 8017f96:	9b04      	ldr	r3, [sp, #16]
 8017f98:	3301      	adds	r3, #1
 8017f9a:	9304      	str	r3, [sp, #16]
 8017f9c:	2331      	movs	r3, #49	@ 0x31
 8017f9e:	f88a 3000 	strb.w	r3, [sl]
 8017fa2:	e5b9      	b.n	8017b18 <_dtoa_r+0x698>
 8017fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017fa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018004 <_dtoa_r+0xb84>
 8017faa:	b11b      	cbz	r3, 8017fb4 <_dtoa_r+0xb34>
 8017fac:	f10a 0308 	add.w	r3, sl, #8
 8017fb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017fb2:	6013      	str	r3, [r2, #0]
 8017fb4:	4650      	mov	r0, sl
 8017fb6:	b019      	add	sp, #100	@ 0x64
 8017fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	f77f ae37 	ble.w	8017c32 <_dtoa_r+0x7b2>
 8017fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017fc8:	2001      	movs	r0, #1
 8017fca:	e655      	b.n	8017c78 <_dtoa_r+0x7f8>
 8017fcc:	9b00      	ldr	r3, [sp, #0]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	f77f aed6 	ble.w	8017d80 <_dtoa_r+0x900>
 8017fd4:	4656      	mov	r6, sl
 8017fd6:	4621      	mov	r1, r4
 8017fd8:	4648      	mov	r0, r9
 8017fda:	f7ff f9c9 	bl	8017370 <quorem>
 8017fde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017fe2:	f806 8b01 	strb.w	r8, [r6], #1
 8017fe6:	9b00      	ldr	r3, [sp, #0]
 8017fe8:	eba6 020a 	sub.w	r2, r6, sl
 8017fec:	4293      	cmp	r3, r2
 8017fee:	ddb3      	ble.n	8017f58 <_dtoa_r+0xad8>
 8017ff0:	4649      	mov	r1, r9
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	220a      	movs	r2, #10
 8017ff6:	4658      	mov	r0, fp
 8017ff8:	f000 f8be 	bl	8018178 <__multadd>
 8017ffc:	4681      	mov	r9, r0
 8017ffe:	e7ea      	b.n	8017fd6 <_dtoa_r+0xb56>
 8018000:	0801a178 	.word	0x0801a178
 8018004:	0801a113 	.word	0x0801a113

08018008 <__env_lock>:
 8018008:	4801      	ldr	r0, [pc, #4]	@ (8018010 <__env_lock+0x8>)
 801800a:	f7ff b97a 	b.w	8017302 <__retarget_lock_acquire_recursive>
 801800e:	bf00      	nop
 8018010:	20017bfc 	.word	0x20017bfc

08018014 <__env_unlock>:
 8018014:	4801      	ldr	r0, [pc, #4]	@ (801801c <__env_unlock+0x8>)
 8018016:	f7ff b975 	b.w	8017304 <__retarget_lock_release_recursive>
 801801a:	bf00      	nop
 801801c:	20017bfc 	.word	0x20017bfc

08018020 <_free_r>:
 8018020:	b538      	push	{r3, r4, r5, lr}
 8018022:	4605      	mov	r5, r0
 8018024:	2900      	cmp	r1, #0
 8018026:	d041      	beq.n	80180ac <_free_r+0x8c>
 8018028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801802c:	1f0c      	subs	r4, r1, #4
 801802e:	2b00      	cmp	r3, #0
 8018030:	bfb8      	it	lt
 8018032:	18e4      	addlt	r4, r4, r3
 8018034:	f7fd ffd0 	bl	8015fd8 <__malloc_lock>
 8018038:	4a1d      	ldr	r2, [pc, #116]	@ (80180b0 <_free_r+0x90>)
 801803a:	6813      	ldr	r3, [r2, #0]
 801803c:	b933      	cbnz	r3, 801804c <_free_r+0x2c>
 801803e:	6063      	str	r3, [r4, #4]
 8018040:	6014      	str	r4, [r2, #0]
 8018042:	4628      	mov	r0, r5
 8018044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018048:	f7fd bfcc 	b.w	8015fe4 <__malloc_unlock>
 801804c:	42a3      	cmp	r3, r4
 801804e:	d908      	bls.n	8018062 <_free_r+0x42>
 8018050:	6820      	ldr	r0, [r4, #0]
 8018052:	1821      	adds	r1, r4, r0
 8018054:	428b      	cmp	r3, r1
 8018056:	bf01      	itttt	eq
 8018058:	6819      	ldreq	r1, [r3, #0]
 801805a:	685b      	ldreq	r3, [r3, #4]
 801805c:	1809      	addeq	r1, r1, r0
 801805e:	6021      	streq	r1, [r4, #0]
 8018060:	e7ed      	b.n	801803e <_free_r+0x1e>
 8018062:	461a      	mov	r2, r3
 8018064:	685b      	ldr	r3, [r3, #4]
 8018066:	b10b      	cbz	r3, 801806c <_free_r+0x4c>
 8018068:	42a3      	cmp	r3, r4
 801806a:	d9fa      	bls.n	8018062 <_free_r+0x42>
 801806c:	6811      	ldr	r1, [r2, #0]
 801806e:	1850      	adds	r0, r2, r1
 8018070:	42a0      	cmp	r0, r4
 8018072:	d10b      	bne.n	801808c <_free_r+0x6c>
 8018074:	6820      	ldr	r0, [r4, #0]
 8018076:	4401      	add	r1, r0
 8018078:	1850      	adds	r0, r2, r1
 801807a:	4283      	cmp	r3, r0
 801807c:	6011      	str	r1, [r2, #0]
 801807e:	d1e0      	bne.n	8018042 <_free_r+0x22>
 8018080:	6818      	ldr	r0, [r3, #0]
 8018082:	685b      	ldr	r3, [r3, #4]
 8018084:	6053      	str	r3, [r2, #4]
 8018086:	4408      	add	r0, r1
 8018088:	6010      	str	r0, [r2, #0]
 801808a:	e7da      	b.n	8018042 <_free_r+0x22>
 801808c:	d902      	bls.n	8018094 <_free_r+0x74>
 801808e:	230c      	movs	r3, #12
 8018090:	602b      	str	r3, [r5, #0]
 8018092:	e7d6      	b.n	8018042 <_free_r+0x22>
 8018094:	6820      	ldr	r0, [r4, #0]
 8018096:	1821      	adds	r1, r4, r0
 8018098:	428b      	cmp	r3, r1
 801809a:	bf04      	itt	eq
 801809c:	6819      	ldreq	r1, [r3, #0]
 801809e:	685b      	ldreq	r3, [r3, #4]
 80180a0:	6063      	str	r3, [r4, #4]
 80180a2:	bf04      	itt	eq
 80180a4:	1809      	addeq	r1, r1, r0
 80180a6:	6021      	streq	r1, [r4, #0]
 80180a8:	6054      	str	r4, [r2, #4]
 80180aa:	e7ca      	b.n	8018042 <_free_r+0x22>
 80180ac:	bd38      	pop	{r3, r4, r5, pc}
 80180ae:	bf00      	nop
 80180b0:	20017ab8 	.word	0x20017ab8

080180b4 <_Balloc>:
 80180b4:	b570      	push	{r4, r5, r6, lr}
 80180b6:	69c6      	ldr	r6, [r0, #28]
 80180b8:	4604      	mov	r4, r0
 80180ba:	460d      	mov	r5, r1
 80180bc:	b976      	cbnz	r6, 80180dc <_Balloc+0x28>
 80180be:	2010      	movs	r0, #16
 80180c0:	f7fd fed8 	bl	8015e74 <malloc>
 80180c4:	4602      	mov	r2, r0
 80180c6:	61e0      	str	r0, [r4, #28]
 80180c8:	b920      	cbnz	r0, 80180d4 <_Balloc+0x20>
 80180ca:	4b18      	ldr	r3, [pc, #96]	@ (801812c <_Balloc+0x78>)
 80180cc:	4818      	ldr	r0, [pc, #96]	@ (8018130 <_Balloc+0x7c>)
 80180ce:	216b      	movs	r1, #107	@ 0x6b
 80180d0:	f7ff f930 	bl	8017334 <__assert_func>
 80180d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80180d8:	6006      	str	r6, [r0, #0]
 80180da:	60c6      	str	r6, [r0, #12]
 80180dc:	69e6      	ldr	r6, [r4, #28]
 80180de:	68f3      	ldr	r3, [r6, #12]
 80180e0:	b183      	cbz	r3, 8018104 <_Balloc+0x50>
 80180e2:	69e3      	ldr	r3, [r4, #28]
 80180e4:	68db      	ldr	r3, [r3, #12]
 80180e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80180ea:	b9b8      	cbnz	r0, 801811c <_Balloc+0x68>
 80180ec:	2101      	movs	r1, #1
 80180ee:	fa01 f605 	lsl.w	r6, r1, r5
 80180f2:	1d72      	adds	r2, r6, #5
 80180f4:	0092      	lsls	r2, r2, #2
 80180f6:	4620      	mov	r0, r4
 80180f8:	f7fd fe34 	bl	8015d64 <_calloc_r>
 80180fc:	b160      	cbz	r0, 8018118 <_Balloc+0x64>
 80180fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018102:	e00e      	b.n	8018122 <_Balloc+0x6e>
 8018104:	2221      	movs	r2, #33	@ 0x21
 8018106:	2104      	movs	r1, #4
 8018108:	4620      	mov	r0, r4
 801810a:	f7fd fe2b 	bl	8015d64 <_calloc_r>
 801810e:	69e3      	ldr	r3, [r4, #28]
 8018110:	60f0      	str	r0, [r6, #12]
 8018112:	68db      	ldr	r3, [r3, #12]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d1e4      	bne.n	80180e2 <_Balloc+0x2e>
 8018118:	2000      	movs	r0, #0
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	6802      	ldr	r2, [r0, #0]
 801811e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018122:	2300      	movs	r3, #0
 8018124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018128:	e7f7      	b.n	801811a <_Balloc+0x66>
 801812a:	bf00      	nop
 801812c:	08019f0e 	.word	0x08019f0e
 8018130:	0801a189 	.word	0x0801a189

08018134 <_Bfree>:
 8018134:	b570      	push	{r4, r5, r6, lr}
 8018136:	69c6      	ldr	r6, [r0, #28]
 8018138:	4605      	mov	r5, r0
 801813a:	460c      	mov	r4, r1
 801813c:	b976      	cbnz	r6, 801815c <_Bfree+0x28>
 801813e:	2010      	movs	r0, #16
 8018140:	f7fd fe98 	bl	8015e74 <malloc>
 8018144:	4602      	mov	r2, r0
 8018146:	61e8      	str	r0, [r5, #28]
 8018148:	b920      	cbnz	r0, 8018154 <_Bfree+0x20>
 801814a:	4b09      	ldr	r3, [pc, #36]	@ (8018170 <_Bfree+0x3c>)
 801814c:	4809      	ldr	r0, [pc, #36]	@ (8018174 <_Bfree+0x40>)
 801814e:	218f      	movs	r1, #143	@ 0x8f
 8018150:	f7ff f8f0 	bl	8017334 <__assert_func>
 8018154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018158:	6006      	str	r6, [r0, #0]
 801815a:	60c6      	str	r6, [r0, #12]
 801815c:	b13c      	cbz	r4, 801816e <_Bfree+0x3a>
 801815e:	69eb      	ldr	r3, [r5, #28]
 8018160:	6862      	ldr	r2, [r4, #4]
 8018162:	68db      	ldr	r3, [r3, #12]
 8018164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018168:	6021      	str	r1, [r4, #0]
 801816a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801816e:	bd70      	pop	{r4, r5, r6, pc}
 8018170:	08019f0e 	.word	0x08019f0e
 8018174:	0801a189 	.word	0x0801a189

08018178 <__multadd>:
 8018178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801817c:	690d      	ldr	r5, [r1, #16]
 801817e:	4607      	mov	r7, r0
 8018180:	460c      	mov	r4, r1
 8018182:	461e      	mov	r6, r3
 8018184:	f101 0c14 	add.w	ip, r1, #20
 8018188:	2000      	movs	r0, #0
 801818a:	f8dc 3000 	ldr.w	r3, [ip]
 801818e:	b299      	uxth	r1, r3
 8018190:	fb02 6101 	mla	r1, r2, r1, r6
 8018194:	0c1e      	lsrs	r6, r3, #16
 8018196:	0c0b      	lsrs	r3, r1, #16
 8018198:	fb02 3306 	mla	r3, r2, r6, r3
 801819c:	b289      	uxth	r1, r1
 801819e:	3001      	adds	r0, #1
 80181a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80181a4:	4285      	cmp	r5, r0
 80181a6:	f84c 1b04 	str.w	r1, [ip], #4
 80181aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80181ae:	dcec      	bgt.n	801818a <__multadd+0x12>
 80181b0:	b30e      	cbz	r6, 80181f6 <__multadd+0x7e>
 80181b2:	68a3      	ldr	r3, [r4, #8]
 80181b4:	42ab      	cmp	r3, r5
 80181b6:	dc19      	bgt.n	80181ec <__multadd+0x74>
 80181b8:	6861      	ldr	r1, [r4, #4]
 80181ba:	4638      	mov	r0, r7
 80181bc:	3101      	adds	r1, #1
 80181be:	f7ff ff79 	bl	80180b4 <_Balloc>
 80181c2:	4680      	mov	r8, r0
 80181c4:	b928      	cbnz	r0, 80181d2 <__multadd+0x5a>
 80181c6:	4602      	mov	r2, r0
 80181c8:	4b0c      	ldr	r3, [pc, #48]	@ (80181fc <__multadd+0x84>)
 80181ca:	480d      	ldr	r0, [pc, #52]	@ (8018200 <__multadd+0x88>)
 80181cc:	21ba      	movs	r1, #186	@ 0xba
 80181ce:	f7ff f8b1 	bl	8017334 <__assert_func>
 80181d2:	6922      	ldr	r2, [r4, #16]
 80181d4:	3202      	adds	r2, #2
 80181d6:	f104 010c 	add.w	r1, r4, #12
 80181da:	0092      	lsls	r2, r2, #2
 80181dc:	300c      	adds	r0, #12
 80181de:	f7ff f89a 	bl	8017316 <memcpy>
 80181e2:	4621      	mov	r1, r4
 80181e4:	4638      	mov	r0, r7
 80181e6:	f7ff ffa5 	bl	8018134 <_Bfree>
 80181ea:	4644      	mov	r4, r8
 80181ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80181f0:	3501      	adds	r5, #1
 80181f2:	615e      	str	r6, [r3, #20]
 80181f4:	6125      	str	r5, [r4, #16]
 80181f6:	4620      	mov	r0, r4
 80181f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181fc:	0801a178 	.word	0x0801a178
 8018200:	0801a189 	.word	0x0801a189

08018204 <__hi0bits>:
 8018204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018208:	4603      	mov	r3, r0
 801820a:	bf36      	itet	cc
 801820c:	0403      	lslcc	r3, r0, #16
 801820e:	2000      	movcs	r0, #0
 8018210:	2010      	movcc	r0, #16
 8018212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018216:	bf3c      	itt	cc
 8018218:	021b      	lslcc	r3, r3, #8
 801821a:	3008      	addcc	r0, #8
 801821c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018220:	bf3c      	itt	cc
 8018222:	011b      	lslcc	r3, r3, #4
 8018224:	3004      	addcc	r0, #4
 8018226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801822a:	bf3c      	itt	cc
 801822c:	009b      	lslcc	r3, r3, #2
 801822e:	3002      	addcc	r0, #2
 8018230:	2b00      	cmp	r3, #0
 8018232:	db05      	blt.n	8018240 <__hi0bits+0x3c>
 8018234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018238:	f100 0001 	add.w	r0, r0, #1
 801823c:	bf08      	it	eq
 801823e:	2020      	moveq	r0, #32
 8018240:	4770      	bx	lr

08018242 <__lo0bits>:
 8018242:	6803      	ldr	r3, [r0, #0]
 8018244:	4602      	mov	r2, r0
 8018246:	f013 0007 	ands.w	r0, r3, #7
 801824a:	d00b      	beq.n	8018264 <__lo0bits+0x22>
 801824c:	07d9      	lsls	r1, r3, #31
 801824e:	d421      	bmi.n	8018294 <__lo0bits+0x52>
 8018250:	0798      	lsls	r0, r3, #30
 8018252:	bf49      	itett	mi
 8018254:	085b      	lsrmi	r3, r3, #1
 8018256:	089b      	lsrpl	r3, r3, #2
 8018258:	2001      	movmi	r0, #1
 801825a:	6013      	strmi	r3, [r2, #0]
 801825c:	bf5c      	itt	pl
 801825e:	6013      	strpl	r3, [r2, #0]
 8018260:	2002      	movpl	r0, #2
 8018262:	4770      	bx	lr
 8018264:	b299      	uxth	r1, r3
 8018266:	b909      	cbnz	r1, 801826c <__lo0bits+0x2a>
 8018268:	0c1b      	lsrs	r3, r3, #16
 801826a:	2010      	movs	r0, #16
 801826c:	b2d9      	uxtb	r1, r3
 801826e:	b909      	cbnz	r1, 8018274 <__lo0bits+0x32>
 8018270:	3008      	adds	r0, #8
 8018272:	0a1b      	lsrs	r3, r3, #8
 8018274:	0719      	lsls	r1, r3, #28
 8018276:	bf04      	itt	eq
 8018278:	091b      	lsreq	r3, r3, #4
 801827a:	3004      	addeq	r0, #4
 801827c:	0799      	lsls	r1, r3, #30
 801827e:	bf04      	itt	eq
 8018280:	089b      	lsreq	r3, r3, #2
 8018282:	3002      	addeq	r0, #2
 8018284:	07d9      	lsls	r1, r3, #31
 8018286:	d403      	bmi.n	8018290 <__lo0bits+0x4e>
 8018288:	085b      	lsrs	r3, r3, #1
 801828a:	f100 0001 	add.w	r0, r0, #1
 801828e:	d003      	beq.n	8018298 <__lo0bits+0x56>
 8018290:	6013      	str	r3, [r2, #0]
 8018292:	4770      	bx	lr
 8018294:	2000      	movs	r0, #0
 8018296:	4770      	bx	lr
 8018298:	2020      	movs	r0, #32
 801829a:	4770      	bx	lr

0801829c <__i2b>:
 801829c:	b510      	push	{r4, lr}
 801829e:	460c      	mov	r4, r1
 80182a0:	2101      	movs	r1, #1
 80182a2:	f7ff ff07 	bl	80180b4 <_Balloc>
 80182a6:	4602      	mov	r2, r0
 80182a8:	b928      	cbnz	r0, 80182b6 <__i2b+0x1a>
 80182aa:	4b05      	ldr	r3, [pc, #20]	@ (80182c0 <__i2b+0x24>)
 80182ac:	4805      	ldr	r0, [pc, #20]	@ (80182c4 <__i2b+0x28>)
 80182ae:	f240 1145 	movw	r1, #325	@ 0x145
 80182b2:	f7ff f83f 	bl	8017334 <__assert_func>
 80182b6:	2301      	movs	r3, #1
 80182b8:	6144      	str	r4, [r0, #20]
 80182ba:	6103      	str	r3, [r0, #16]
 80182bc:	bd10      	pop	{r4, pc}
 80182be:	bf00      	nop
 80182c0:	0801a178 	.word	0x0801a178
 80182c4:	0801a189 	.word	0x0801a189

080182c8 <__multiply>:
 80182c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182cc:	4614      	mov	r4, r2
 80182ce:	690a      	ldr	r2, [r1, #16]
 80182d0:	6923      	ldr	r3, [r4, #16]
 80182d2:	429a      	cmp	r2, r3
 80182d4:	bfa8      	it	ge
 80182d6:	4623      	movge	r3, r4
 80182d8:	460f      	mov	r7, r1
 80182da:	bfa4      	itt	ge
 80182dc:	460c      	movge	r4, r1
 80182de:	461f      	movge	r7, r3
 80182e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80182e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80182e8:	68a3      	ldr	r3, [r4, #8]
 80182ea:	6861      	ldr	r1, [r4, #4]
 80182ec:	eb0a 0609 	add.w	r6, sl, r9
 80182f0:	42b3      	cmp	r3, r6
 80182f2:	b085      	sub	sp, #20
 80182f4:	bfb8      	it	lt
 80182f6:	3101      	addlt	r1, #1
 80182f8:	f7ff fedc 	bl	80180b4 <_Balloc>
 80182fc:	b930      	cbnz	r0, 801830c <__multiply+0x44>
 80182fe:	4602      	mov	r2, r0
 8018300:	4b44      	ldr	r3, [pc, #272]	@ (8018414 <__multiply+0x14c>)
 8018302:	4845      	ldr	r0, [pc, #276]	@ (8018418 <__multiply+0x150>)
 8018304:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018308:	f7ff f814 	bl	8017334 <__assert_func>
 801830c:	f100 0514 	add.w	r5, r0, #20
 8018310:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018314:	462b      	mov	r3, r5
 8018316:	2200      	movs	r2, #0
 8018318:	4543      	cmp	r3, r8
 801831a:	d321      	bcc.n	8018360 <__multiply+0x98>
 801831c:	f107 0114 	add.w	r1, r7, #20
 8018320:	f104 0214 	add.w	r2, r4, #20
 8018324:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018328:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801832c:	9302      	str	r3, [sp, #8]
 801832e:	1b13      	subs	r3, r2, r4
 8018330:	3b15      	subs	r3, #21
 8018332:	f023 0303 	bic.w	r3, r3, #3
 8018336:	3304      	adds	r3, #4
 8018338:	f104 0715 	add.w	r7, r4, #21
 801833c:	42ba      	cmp	r2, r7
 801833e:	bf38      	it	cc
 8018340:	2304      	movcc	r3, #4
 8018342:	9301      	str	r3, [sp, #4]
 8018344:	9b02      	ldr	r3, [sp, #8]
 8018346:	9103      	str	r1, [sp, #12]
 8018348:	428b      	cmp	r3, r1
 801834a:	d80c      	bhi.n	8018366 <__multiply+0x9e>
 801834c:	2e00      	cmp	r6, #0
 801834e:	dd03      	ble.n	8018358 <__multiply+0x90>
 8018350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018354:	2b00      	cmp	r3, #0
 8018356:	d05b      	beq.n	8018410 <__multiply+0x148>
 8018358:	6106      	str	r6, [r0, #16]
 801835a:	b005      	add	sp, #20
 801835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018360:	f843 2b04 	str.w	r2, [r3], #4
 8018364:	e7d8      	b.n	8018318 <__multiply+0x50>
 8018366:	f8b1 a000 	ldrh.w	sl, [r1]
 801836a:	f1ba 0f00 	cmp.w	sl, #0
 801836e:	d024      	beq.n	80183ba <__multiply+0xf2>
 8018370:	f104 0e14 	add.w	lr, r4, #20
 8018374:	46a9      	mov	r9, r5
 8018376:	f04f 0c00 	mov.w	ip, #0
 801837a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801837e:	f8d9 3000 	ldr.w	r3, [r9]
 8018382:	fa1f fb87 	uxth.w	fp, r7
 8018386:	b29b      	uxth	r3, r3
 8018388:	fb0a 330b 	mla	r3, sl, fp, r3
 801838c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018390:	f8d9 7000 	ldr.w	r7, [r9]
 8018394:	4463      	add	r3, ip
 8018396:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801839a:	fb0a c70b 	mla	r7, sl, fp, ip
 801839e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80183a8:	4572      	cmp	r2, lr
 80183aa:	f849 3b04 	str.w	r3, [r9], #4
 80183ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80183b2:	d8e2      	bhi.n	801837a <__multiply+0xb2>
 80183b4:	9b01      	ldr	r3, [sp, #4]
 80183b6:	f845 c003 	str.w	ip, [r5, r3]
 80183ba:	9b03      	ldr	r3, [sp, #12]
 80183bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80183c0:	3104      	adds	r1, #4
 80183c2:	f1b9 0f00 	cmp.w	r9, #0
 80183c6:	d021      	beq.n	801840c <__multiply+0x144>
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	f104 0c14 	add.w	ip, r4, #20
 80183ce:	46ae      	mov	lr, r5
 80183d0:	f04f 0a00 	mov.w	sl, #0
 80183d4:	f8bc b000 	ldrh.w	fp, [ip]
 80183d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80183dc:	fb09 770b 	mla	r7, r9, fp, r7
 80183e0:	4457      	add	r7, sl
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80183e8:	f84e 3b04 	str.w	r3, [lr], #4
 80183ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80183f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80183f4:	f8be 3000 	ldrh.w	r3, [lr]
 80183f8:	fb09 330a 	mla	r3, r9, sl, r3
 80183fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018400:	4562      	cmp	r2, ip
 8018402:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018406:	d8e5      	bhi.n	80183d4 <__multiply+0x10c>
 8018408:	9f01      	ldr	r7, [sp, #4]
 801840a:	51eb      	str	r3, [r5, r7]
 801840c:	3504      	adds	r5, #4
 801840e:	e799      	b.n	8018344 <__multiply+0x7c>
 8018410:	3e01      	subs	r6, #1
 8018412:	e79b      	b.n	801834c <__multiply+0x84>
 8018414:	0801a178 	.word	0x0801a178
 8018418:	0801a189 	.word	0x0801a189

0801841c <__pow5mult>:
 801841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018420:	4615      	mov	r5, r2
 8018422:	f012 0203 	ands.w	r2, r2, #3
 8018426:	4607      	mov	r7, r0
 8018428:	460e      	mov	r6, r1
 801842a:	d007      	beq.n	801843c <__pow5mult+0x20>
 801842c:	4c25      	ldr	r4, [pc, #148]	@ (80184c4 <__pow5mult+0xa8>)
 801842e:	3a01      	subs	r2, #1
 8018430:	2300      	movs	r3, #0
 8018432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018436:	f7ff fe9f 	bl	8018178 <__multadd>
 801843a:	4606      	mov	r6, r0
 801843c:	10ad      	asrs	r5, r5, #2
 801843e:	d03d      	beq.n	80184bc <__pow5mult+0xa0>
 8018440:	69fc      	ldr	r4, [r7, #28]
 8018442:	b97c      	cbnz	r4, 8018464 <__pow5mult+0x48>
 8018444:	2010      	movs	r0, #16
 8018446:	f7fd fd15 	bl	8015e74 <malloc>
 801844a:	4602      	mov	r2, r0
 801844c:	61f8      	str	r0, [r7, #28]
 801844e:	b928      	cbnz	r0, 801845c <__pow5mult+0x40>
 8018450:	4b1d      	ldr	r3, [pc, #116]	@ (80184c8 <__pow5mult+0xac>)
 8018452:	481e      	ldr	r0, [pc, #120]	@ (80184cc <__pow5mult+0xb0>)
 8018454:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018458:	f7fe ff6c 	bl	8017334 <__assert_func>
 801845c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018460:	6004      	str	r4, [r0, #0]
 8018462:	60c4      	str	r4, [r0, #12]
 8018464:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801846c:	b94c      	cbnz	r4, 8018482 <__pow5mult+0x66>
 801846e:	f240 2171 	movw	r1, #625	@ 0x271
 8018472:	4638      	mov	r0, r7
 8018474:	f7ff ff12 	bl	801829c <__i2b>
 8018478:	2300      	movs	r3, #0
 801847a:	f8c8 0008 	str.w	r0, [r8, #8]
 801847e:	4604      	mov	r4, r0
 8018480:	6003      	str	r3, [r0, #0]
 8018482:	f04f 0900 	mov.w	r9, #0
 8018486:	07eb      	lsls	r3, r5, #31
 8018488:	d50a      	bpl.n	80184a0 <__pow5mult+0x84>
 801848a:	4631      	mov	r1, r6
 801848c:	4622      	mov	r2, r4
 801848e:	4638      	mov	r0, r7
 8018490:	f7ff ff1a 	bl	80182c8 <__multiply>
 8018494:	4631      	mov	r1, r6
 8018496:	4680      	mov	r8, r0
 8018498:	4638      	mov	r0, r7
 801849a:	f7ff fe4b 	bl	8018134 <_Bfree>
 801849e:	4646      	mov	r6, r8
 80184a0:	106d      	asrs	r5, r5, #1
 80184a2:	d00b      	beq.n	80184bc <__pow5mult+0xa0>
 80184a4:	6820      	ldr	r0, [r4, #0]
 80184a6:	b938      	cbnz	r0, 80184b8 <__pow5mult+0x9c>
 80184a8:	4622      	mov	r2, r4
 80184aa:	4621      	mov	r1, r4
 80184ac:	4638      	mov	r0, r7
 80184ae:	f7ff ff0b 	bl	80182c8 <__multiply>
 80184b2:	6020      	str	r0, [r4, #0]
 80184b4:	f8c0 9000 	str.w	r9, [r0]
 80184b8:	4604      	mov	r4, r0
 80184ba:	e7e4      	b.n	8018486 <__pow5mult+0x6a>
 80184bc:	4630      	mov	r0, r6
 80184be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184c2:	bf00      	nop
 80184c4:	0801a1e4 	.word	0x0801a1e4
 80184c8:	08019f0e 	.word	0x08019f0e
 80184cc:	0801a189 	.word	0x0801a189

080184d0 <__lshift>:
 80184d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184d4:	460c      	mov	r4, r1
 80184d6:	6849      	ldr	r1, [r1, #4]
 80184d8:	6923      	ldr	r3, [r4, #16]
 80184da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80184de:	68a3      	ldr	r3, [r4, #8]
 80184e0:	4607      	mov	r7, r0
 80184e2:	4691      	mov	r9, r2
 80184e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80184e8:	f108 0601 	add.w	r6, r8, #1
 80184ec:	42b3      	cmp	r3, r6
 80184ee:	db0b      	blt.n	8018508 <__lshift+0x38>
 80184f0:	4638      	mov	r0, r7
 80184f2:	f7ff fddf 	bl	80180b4 <_Balloc>
 80184f6:	4605      	mov	r5, r0
 80184f8:	b948      	cbnz	r0, 801850e <__lshift+0x3e>
 80184fa:	4602      	mov	r2, r0
 80184fc:	4b28      	ldr	r3, [pc, #160]	@ (80185a0 <__lshift+0xd0>)
 80184fe:	4829      	ldr	r0, [pc, #164]	@ (80185a4 <__lshift+0xd4>)
 8018500:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018504:	f7fe ff16 	bl	8017334 <__assert_func>
 8018508:	3101      	adds	r1, #1
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	e7ee      	b.n	80184ec <__lshift+0x1c>
 801850e:	2300      	movs	r3, #0
 8018510:	f100 0114 	add.w	r1, r0, #20
 8018514:	f100 0210 	add.w	r2, r0, #16
 8018518:	4618      	mov	r0, r3
 801851a:	4553      	cmp	r3, sl
 801851c:	db33      	blt.n	8018586 <__lshift+0xb6>
 801851e:	6920      	ldr	r0, [r4, #16]
 8018520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018524:	f104 0314 	add.w	r3, r4, #20
 8018528:	f019 091f 	ands.w	r9, r9, #31
 801852c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018534:	d02b      	beq.n	801858e <__lshift+0xbe>
 8018536:	f1c9 0e20 	rsb	lr, r9, #32
 801853a:	468a      	mov	sl, r1
 801853c:	2200      	movs	r2, #0
 801853e:	6818      	ldr	r0, [r3, #0]
 8018540:	fa00 f009 	lsl.w	r0, r0, r9
 8018544:	4310      	orrs	r0, r2
 8018546:	f84a 0b04 	str.w	r0, [sl], #4
 801854a:	f853 2b04 	ldr.w	r2, [r3], #4
 801854e:	459c      	cmp	ip, r3
 8018550:	fa22 f20e 	lsr.w	r2, r2, lr
 8018554:	d8f3      	bhi.n	801853e <__lshift+0x6e>
 8018556:	ebac 0304 	sub.w	r3, ip, r4
 801855a:	3b15      	subs	r3, #21
 801855c:	f023 0303 	bic.w	r3, r3, #3
 8018560:	3304      	adds	r3, #4
 8018562:	f104 0015 	add.w	r0, r4, #21
 8018566:	4584      	cmp	ip, r0
 8018568:	bf38      	it	cc
 801856a:	2304      	movcc	r3, #4
 801856c:	50ca      	str	r2, [r1, r3]
 801856e:	b10a      	cbz	r2, 8018574 <__lshift+0xa4>
 8018570:	f108 0602 	add.w	r6, r8, #2
 8018574:	3e01      	subs	r6, #1
 8018576:	4638      	mov	r0, r7
 8018578:	612e      	str	r6, [r5, #16]
 801857a:	4621      	mov	r1, r4
 801857c:	f7ff fdda 	bl	8018134 <_Bfree>
 8018580:	4628      	mov	r0, r5
 8018582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018586:	f842 0f04 	str.w	r0, [r2, #4]!
 801858a:	3301      	adds	r3, #1
 801858c:	e7c5      	b.n	801851a <__lshift+0x4a>
 801858e:	3904      	subs	r1, #4
 8018590:	f853 2b04 	ldr.w	r2, [r3], #4
 8018594:	f841 2f04 	str.w	r2, [r1, #4]!
 8018598:	459c      	cmp	ip, r3
 801859a:	d8f9      	bhi.n	8018590 <__lshift+0xc0>
 801859c:	e7ea      	b.n	8018574 <__lshift+0xa4>
 801859e:	bf00      	nop
 80185a0:	0801a178 	.word	0x0801a178
 80185a4:	0801a189 	.word	0x0801a189

080185a8 <__mcmp>:
 80185a8:	690a      	ldr	r2, [r1, #16]
 80185aa:	4603      	mov	r3, r0
 80185ac:	6900      	ldr	r0, [r0, #16]
 80185ae:	1a80      	subs	r0, r0, r2
 80185b0:	b530      	push	{r4, r5, lr}
 80185b2:	d10e      	bne.n	80185d2 <__mcmp+0x2a>
 80185b4:	3314      	adds	r3, #20
 80185b6:	3114      	adds	r1, #20
 80185b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80185bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80185c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80185c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80185c8:	4295      	cmp	r5, r2
 80185ca:	d003      	beq.n	80185d4 <__mcmp+0x2c>
 80185cc:	d205      	bcs.n	80185da <__mcmp+0x32>
 80185ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80185d2:	bd30      	pop	{r4, r5, pc}
 80185d4:	42a3      	cmp	r3, r4
 80185d6:	d3f3      	bcc.n	80185c0 <__mcmp+0x18>
 80185d8:	e7fb      	b.n	80185d2 <__mcmp+0x2a>
 80185da:	2001      	movs	r0, #1
 80185dc:	e7f9      	b.n	80185d2 <__mcmp+0x2a>
	...

080185e0 <__mdiff>:
 80185e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e4:	4689      	mov	r9, r1
 80185e6:	4606      	mov	r6, r0
 80185e8:	4611      	mov	r1, r2
 80185ea:	4648      	mov	r0, r9
 80185ec:	4614      	mov	r4, r2
 80185ee:	f7ff ffdb 	bl	80185a8 <__mcmp>
 80185f2:	1e05      	subs	r5, r0, #0
 80185f4:	d112      	bne.n	801861c <__mdiff+0x3c>
 80185f6:	4629      	mov	r1, r5
 80185f8:	4630      	mov	r0, r6
 80185fa:	f7ff fd5b 	bl	80180b4 <_Balloc>
 80185fe:	4602      	mov	r2, r0
 8018600:	b928      	cbnz	r0, 801860e <__mdiff+0x2e>
 8018602:	4b3f      	ldr	r3, [pc, #252]	@ (8018700 <__mdiff+0x120>)
 8018604:	f240 2137 	movw	r1, #567	@ 0x237
 8018608:	483e      	ldr	r0, [pc, #248]	@ (8018704 <__mdiff+0x124>)
 801860a:	f7fe fe93 	bl	8017334 <__assert_func>
 801860e:	2301      	movs	r3, #1
 8018610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018614:	4610      	mov	r0, r2
 8018616:	b003      	add	sp, #12
 8018618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801861c:	bfbc      	itt	lt
 801861e:	464b      	movlt	r3, r9
 8018620:	46a1      	movlt	r9, r4
 8018622:	4630      	mov	r0, r6
 8018624:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018628:	bfba      	itte	lt
 801862a:	461c      	movlt	r4, r3
 801862c:	2501      	movlt	r5, #1
 801862e:	2500      	movge	r5, #0
 8018630:	f7ff fd40 	bl	80180b4 <_Balloc>
 8018634:	4602      	mov	r2, r0
 8018636:	b918      	cbnz	r0, 8018640 <__mdiff+0x60>
 8018638:	4b31      	ldr	r3, [pc, #196]	@ (8018700 <__mdiff+0x120>)
 801863a:	f240 2145 	movw	r1, #581	@ 0x245
 801863e:	e7e3      	b.n	8018608 <__mdiff+0x28>
 8018640:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018644:	6926      	ldr	r6, [r4, #16]
 8018646:	60c5      	str	r5, [r0, #12]
 8018648:	f109 0310 	add.w	r3, r9, #16
 801864c:	f109 0514 	add.w	r5, r9, #20
 8018650:	f104 0e14 	add.w	lr, r4, #20
 8018654:	f100 0b14 	add.w	fp, r0, #20
 8018658:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801865c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018660:	9301      	str	r3, [sp, #4]
 8018662:	46d9      	mov	r9, fp
 8018664:	f04f 0c00 	mov.w	ip, #0
 8018668:	9b01      	ldr	r3, [sp, #4]
 801866a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801866e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018672:	9301      	str	r3, [sp, #4]
 8018674:	fa1f f38a 	uxth.w	r3, sl
 8018678:	4619      	mov	r1, r3
 801867a:	b283      	uxth	r3, r0
 801867c:	1acb      	subs	r3, r1, r3
 801867e:	0c00      	lsrs	r0, r0, #16
 8018680:	4463      	add	r3, ip
 8018682:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018686:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801868a:	b29b      	uxth	r3, r3
 801868c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018690:	4576      	cmp	r6, lr
 8018692:	f849 3b04 	str.w	r3, [r9], #4
 8018696:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801869a:	d8e5      	bhi.n	8018668 <__mdiff+0x88>
 801869c:	1b33      	subs	r3, r6, r4
 801869e:	3b15      	subs	r3, #21
 80186a0:	f023 0303 	bic.w	r3, r3, #3
 80186a4:	3415      	adds	r4, #21
 80186a6:	3304      	adds	r3, #4
 80186a8:	42a6      	cmp	r6, r4
 80186aa:	bf38      	it	cc
 80186ac:	2304      	movcc	r3, #4
 80186ae:	441d      	add	r5, r3
 80186b0:	445b      	add	r3, fp
 80186b2:	461e      	mov	r6, r3
 80186b4:	462c      	mov	r4, r5
 80186b6:	4544      	cmp	r4, r8
 80186b8:	d30e      	bcc.n	80186d8 <__mdiff+0xf8>
 80186ba:	f108 0103 	add.w	r1, r8, #3
 80186be:	1b49      	subs	r1, r1, r5
 80186c0:	f021 0103 	bic.w	r1, r1, #3
 80186c4:	3d03      	subs	r5, #3
 80186c6:	45a8      	cmp	r8, r5
 80186c8:	bf38      	it	cc
 80186ca:	2100      	movcc	r1, #0
 80186cc:	440b      	add	r3, r1
 80186ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80186d2:	b191      	cbz	r1, 80186fa <__mdiff+0x11a>
 80186d4:	6117      	str	r7, [r2, #16]
 80186d6:	e79d      	b.n	8018614 <__mdiff+0x34>
 80186d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80186dc:	46e6      	mov	lr, ip
 80186de:	0c08      	lsrs	r0, r1, #16
 80186e0:	fa1c fc81 	uxtah	ip, ip, r1
 80186e4:	4471      	add	r1, lr
 80186e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80186ea:	b289      	uxth	r1, r1
 80186ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80186f0:	f846 1b04 	str.w	r1, [r6], #4
 80186f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80186f8:	e7dd      	b.n	80186b6 <__mdiff+0xd6>
 80186fa:	3f01      	subs	r7, #1
 80186fc:	e7e7      	b.n	80186ce <__mdiff+0xee>
 80186fe:	bf00      	nop
 8018700:	0801a178 	.word	0x0801a178
 8018704:	0801a189 	.word	0x0801a189

08018708 <__d2b>:
 8018708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801870c:	460f      	mov	r7, r1
 801870e:	2101      	movs	r1, #1
 8018710:	ec59 8b10 	vmov	r8, r9, d0
 8018714:	4616      	mov	r6, r2
 8018716:	f7ff fccd 	bl	80180b4 <_Balloc>
 801871a:	4604      	mov	r4, r0
 801871c:	b930      	cbnz	r0, 801872c <__d2b+0x24>
 801871e:	4602      	mov	r2, r0
 8018720:	4b23      	ldr	r3, [pc, #140]	@ (80187b0 <__d2b+0xa8>)
 8018722:	4824      	ldr	r0, [pc, #144]	@ (80187b4 <__d2b+0xac>)
 8018724:	f240 310f 	movw	r1, #783	@ 0x30f
 8018728:	f7fe fe04 	bl	8017334 <__assert_func>
 801872c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018734:	b10d      	cbz	r5, 801873a <__d2b+0x32>
 8018736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801873a:	9301      	str	r3, [sp, #4]
 801873c:	f1b8 0300 	subs.w	r3, r8, #0
 8018740:	d023      	beq.n	801878a <__d2b+0x82>
 8018742:	4668      	mov	r0, sp
 8018744:	9300      	str	r3, [sp, #0]
 8018746:	f7ff fd7c 	bl	8018242 <__lo0bits>
 801874a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801874e:	b1d0      	cbz	r0, 8018786 <__d2b+0x7e>
 8018750:	f1c0 0320 	rsb	r3, r0, #32
 8018754:	fa02 f303 	lsl.w	r3, r2, r3
 8018758:	430b      	orrs	r3, r1
 801875a:	40c2      	lsrs	r2, r0
 801875c:	6163      	str	r3, [r4, #20]
 801875e:	9201      	str	r2, [sp, #4]
 8018760:	9b01      	ldr	r3, [sp, #4]
 8018762:	61a3      	str	r3, [r4, #24]
 8018764:	2b00      	cmp	r3, #0
 8018766:	bf0c      	ite	eq
 8018768:	2201      	moveq	r2, #1
 801876a:	2202      	movne	r2, #2
 801876c:	6122      	str	r2, [r4, #16]
 801876e:	b1a5      	cbz	r5, 801879a <__d2b+0x92>
 8018770:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018774:	4405      	add	r5, r0
 8018776:	603d      	str	r5, [r7, #0]
 8018778:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801877c:	6030      	str	r0, [r6, #0]
 801877e:	4620      	mov	r0, r4
 8018780:	b003      	add	sp, #12
 8018782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018786:	6161      	str	r1, [r4, #20]
 8018788:	e7ea      	b.n	8018760 <__d2b+0x58>
 801878a:	a801      	add	r0, sp, #4
 801878c:	f7ff fd59 	bl	8018242 <__lo0bits>
 8018790:	9b01      	ldr	r3, [sp, #4]
 8018792:	6163      	str	r3, [r4, #20]
 8018794:	3020      	adds	r0, #32
 8018796:	2201      	movs	r2, #1
 8018798:	e7e8      	b.n	801876c <__d2b+0x64>
 801879a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801879e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80187a2:	6038      	str	r0, [r7, #0]
 80187a4:	6918      	ldr	r0, [r3, #16]
 80187a6:	f7ff fd2d 	bl	8018204 <__hi0bits>
 80187aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80187ae:	e7e5      	b.n	801877c <__d2b+0x74>
 80187b0:	0801a178 	.word	0x0801a178
 80187b4:	0801a189 	.word	0x0801a189

080187b8 <_malloc_usable_size_r>:
 80187b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187bc:	1f18      	subs	r0, r3, #4
 80187be:	2b00      	cmp	r3, #0
 80187c0:	bfbc      	itt	lt
 80187c2:	580b      	ldrlt	r3, [r1, r0]
 80187c4:	18c0      	addlt	r0, r0, r3
 80187c6:	4770      	bx	lr

080187c8 <__ssputs_r>:
 80187c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187cc:	688e      	ldr	r6, [r1, #8]
 80187ce:	461f      	mov	r7, r3
 80187d0:	42be      	cmp	r6, r7
 80187d2:	680b      	ldr	r3, [r1, #0]
 80187d4:	4682      	mov	sl, r0
 80187d6:	460c      	mov	r4, r1
 80187d8:	4690      	mov	r8, r2
 80187da:	d82d      	bhi.n	8018838 <__ssputs_r+0x70>
 80187dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80187e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80187e4:	d026      	beq.n	8018834 <__ssputs_r+0x6c>
 80187e6:	6965      	ldr	r5, [r4, #20]
 80187e8:	6909      	ldr	r1, [r1, #16]
 80187ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187ee:	eba3 0901 	sub.w	r9, r3, r1
 80187f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80187f6:	1c7b      	adds	r3, r7, #1
 80187f8:	444b      	add	r3, r9
 80187fa:	106d      	asrs	r5, r5, #1
 80187fc:	429d      	cmp	r5, r3
 80187fe:	bf38      	it	cc
 8018800:	461d      	movcc	r5, r3
 8018802:	0553      	lsls	r3, r2, #21
 8018804:	d527      	bpl.n	8018856 <__ssputs_r+0x8e>
 8018806:	4629      	mov	r1, r5
 8018808:	f7fd fb66 	bl	8015ed8 <_malloc_r>
 801880c:	4606      	mov	r6, r0
 801880e:	b360      	cbz	r0, 801886a <__ssputs_r+0xa2>
 8018810:	6921      	ldr	r1, [r4, #16]
 8018812:	464a      	mov	r2, r9
 8018814:	f7fe fd7f 	bl	8017316 <memcpy>
 8018818:	89a3      	ldrh	r3, [r4, #12]
 801881a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801881e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018822:	81a3      	strh	r3, [r4, #12]
 8018824:	6126      	str	r6, [r4, #16]
 8018826:	6165      	str	r5, [r4, #20]
 8018828:	444e      	add	r6, r9
 801882a:	eba5 0509 	sub.w	r5, r5, r9
 801882e:	6026      	str	r6, [r4, #0]
 8018830:	60a5      	str	r5, [r4, #8]
 8018832:	463e      	mov	r6, r7
 8018834:	42be      	cmp	r6, r7
 8018836:	d900      	bls.n	801883a <__ssputs_r+0x72>
 8018838:	463e      	mov	r6, r7
 801883a:	6820      	ldr	r0, [r4, #0]
 801883c:	4632      	mov	r2, r6
 801883e:	4641      	mov	r1, r8
 8018840:	f7fe fc2c 	bl	801709c <memmove>
 8018844:	68a3      	ldr	r3, [r4, #8]
 8018846:	1b9b      	subs	r3, r3, r6
 8018848:	60a3      	str	r3, [r4, #8]
 801884a:	6823      	ldr	r3, [r4, #0]
 801884c:	4433      	add	r3, r6
 801884e:	6023      	str	r3, [r4, #0]
 8018850:	2000      	movs	r0, #0
 8018852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018856:	462a      	mov	r2, r5
 8018858:	f7fd fc3e 	bl	80160d8 <_realloc_r>
 801885c:	4606      	mov	r6, r0
 801885e:	2800      	cmp	r0, #0
 8018860:	d1e0      	bne.n	8018824 <__ssputs_r+0x5c>
 8018862:	6921      	ldr	r1, [r4, #16]
 8018864:	4650      	mov	r0, sl
 8018866:	f7ff fbdb 	bl	8018020 <_free_r>
 801886a:	230c      	movs	r3, #12
 801886c:	f8ca 3000 	str.w	r3, [sl]
 8018870:	89a3      	ldrh	r3, [r4, #12]
 8018872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018876:	81a3      	strh	r3, [r4, #12]
 8018878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801887c:	e7e9      	b.n	8018852 <__ssputs_r+0x8a>
	...

08018880 <_svfiprintf_r>:
 8018880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018884:	4698      	mov	r8, r3
 8018886:	898b      	ldrh	r3, [r1, #12]
 8018888:	061b      	lsls	r3, r3, #24
 801888a:	b09d      	sub	sp, #116	@ 0x74
 801888c:	4607      	mov	r7, r0
 801888e:	460d      	mov	r5, r1
 8018890:	4614      	mov	r4, r2
 8018892:	d510      	bpl.n	80188b6 <_svfiprintf_r+0x36>
 8018894:	690b      	ldr	r3, [r1, #16]
 8018896:	b973      	cbnz	r3, 80188b6 <_svfiprintf_r+0x36>
 8018898:	2140      	movs	r1, #64	@ 0x40
 801889a:	f7fd fb1d 	bl	8015ed8 <_malloc_r>
 801889e:	6028      	str	r0, [r5, #0]
 80188a0:	6128      	str	r0, [r5, #16]
 80188a2:	b930      	cbnz	r0, 80188b2 <_svfiprintf_r+0x32>
 80188a4:	230c      	movs	r3, #12
 80188a6:	603b      	str	r3, [r7, #0]
 80188a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188ac:	b01d      	add	sp, #116	@ 0x74
 80188ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b2:	2340      	movs	r3, #64	@ 0x40
 80188b4:	616b      	str	r3, [r5, #20]
 80188b6:	2300      	movs	r3, #0
 80188b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80188ba:	2320      	movs	r3, #32
 80188bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80188c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80188c4:	2330      	movs	r3, #48	@ 0x30
 80188c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018a64 <_svfiprintf_r+0x1e4>
 80188ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80188ce:	f04f 0901 	mov.w	r9, #1
 80188d2:	4623      	mov	r3, r4
 80188d4:	469a      	mov	sl, r3
 80188d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188da:	b10a      	cbz	r2, 80188e0 <_svfiprintf_r+0x60>
 80188dc:	2a25      	cmp	r2, #37	@ 0x25
 80188de:	d1f9      	bne.n	80188d4 <_svfiprintf_r+0x54>
 80188e0:	ebba 0b04 	subs.w	fp, sl, r4
 80188e4:	d00b      	beq.n	80188fe <_svfiprintf_r+0x7e>
 80188e6:	465b      	mov	r3, fp
 80188e8:	4622      	mov	r2, r4
 80188ea:	4629      	mov	r1, r5
 80188ec:	4638      	mov	r0, r7
 80188ee:	f7ff ff6b 	bl	80187c8 <__ssputs_r>
 80188f2:	3001      	adds	r0, #1
 80188f4:	f000 80a7 	beq.w	8018a46 <_svfiprintf_r+0x1c6>
 80188f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188fa:	445a      	add	r2, fp
 80188fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80188fe:	f89a 3000 	ldrb.w	r3, [sl]
 8018902:	2b00      	cmp	r3, #0
 8018904:	f000 809f 	beq.w	8018a46 <_svfiprintf_r+0x1c6>
 8018908:	2300      	movs	r3, #0
 801890a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801890e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018912:	f10a 0a01 	add.w	sl, sl, #1
 8018916:	9304      	str	r3, [sp, #16]
 8018918:	9307      	str	r3, [sp, #28]
 801891a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801891e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018920:	4654      	mov	r4, sl
 8018922:	2205      	movs	r2, #5
 8018924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018928:	484e      	ldr	r0, [pc, #312]	@ (8018a64 <_svfiprintf_r+0x1e4>)
 801892a:	f7e7 fc81 	bl	8000230 <memchr>
 801892e:	9a04      	ldr	r2, [sp, #16]
 8018930:	b9d8      	cbnz	r0, 801896a <_svfiprintf_r+0xea>
 8018932:	06d0      	lsls	r0, r2, #27
 8018934:	bf44      	itt	mi
 8018936:	2320      	movmi	r3, #32
 8018938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801893c:	0711      	lsls	r1, r2, #28
 801893e:	bf44      	itt	mi
 8018940:	232b      	movmi	r3, #43	@ 0x2b
 8018942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018946:	f89a 3000 	ldrb.w	r3, [sl]
 801894a:	2b2a      	cmp	r3, #42	@ 0x2a
 801894c:	d015      	beq.n	801897a <_svfiprintf_r+0xfa>
 801894e:	9a07      	ldr	r2, [sp, #28]
 8018950:	4654      	mov	r4, sl
 8018952:	2000      	movs	r0, #0
 8018954:	f04f 0c0a 	mov.w	ip, #10
 8018958:	4621      	mov	r1, r4
 801895a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801895e:	3b30      	subs	r3, #48	@ 0x30
 8018960:	2b09      	cmp	r3, #9
 8018962:	d94b      	bls.n	80189fc <_svfiprintf_r+0x17c>
 8018964:	b1b0      	cbz	r0, 8018994 <_svfiprintf_r+0x114>
 8018966:	9207      	str	r2, [sp, #28]
 8018968:	e014      	b.n	8018994 <_svfiprintf_r+0x114>
 801896a:	eba0 0308 	sub.w	r3, r0, r8
 801896e:	fa09 f303 	lsl.w	r3, r9, r3
 8018972:	4313      	orrs	r3, r2
 8018974:	9304      	str	r3, [sp, #16]
 8018976:	46a2      	mov	sl, r4
 8018978:	e7d2      	b.n	8018920 <_svfiprintf_r+0xa0>
 801897a:	9b03      	ldr	r3, [sp, #12]
 801897c:	1d19      	adds	r1, r3, #4
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	9103      	str	r1, [sp, #12]
 8018982:	2b00      	cmp	r3, #0
 8018984:	bfbb      	ittet	lt
 8018986:	425b      	neglt	r3, r3
 8018988:	f042 0202 	orrlt.w	r2, r2, #2
 801898c:	9307      	strge	r3, [sp, #28]
 801898e:	9307      	strlt	r3, [sp, #28]
 8018990:	bfb8      	it	lt
 8018992:	9204      	strlt	r2, [sp, #16]
 8018994:	7823      	ldrb	r3, [r4, #0]
 8018996:	2b2e      	cmp	r3, #46	@ 0x2e
 8018998:	d10a      	bne.n	80189b0 <_svfiprintf_r+0x130>
 801899a:	7863      	ldrb	r3, [r4, #1]
 801899c:	2b2a      	cmp	r3, #42	@ 0x2a
 801899e:	d132      	bne.n	8018a06 <_svfiprintf_r+0x186>
 80189a0:	9b03      	ldr	r3, [sp, #12]
 80189a2:	1d1a      	adds	r2, r3, #4
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	9203      	str	r2, [sp, #12]
 80189a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80189ac:	3402      	adds	r4, #2
 80189ae:	9305      	str	r3, [sp, #20]
 80189b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018a74 <_svfiprintf_r+0x1f4>
 80189b4:	7821      	ldrb	r1, [r4, #0]
 80189b6:	2203      	movs	r2, #3
 80189b8:	4650      	mov	r0, sl
 80189ba:	f7e7 fc39 	bl	8000230 <memchr>
 80189be:	b138      	cbz	r0, 80189d0 <_svfiprintf_r+0x150>
 80189c0:	9b04      	ldr	r3, [sp, #16]
 80189c2:	eba0 000a 	sub.w	r0, r0, sl
 80189c6:	2240      	movs	r2, #64	@ 0x40
 80189c8:	4082      	lsls	r2, r0
 80189ca:	4313      	orrs	r3, r2
 80189cc:	3401      	adds	r4, #1
 80189ce:	9304      	str	r3, [sp, #16]
 80189d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189d4:	4824      	ldr	r0, [pc, #144]	@ (8018a68 <_svfiprintf_r+0x1e8>)
 80189d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80189da:	2206      	movs	r2, #6
 80189dc:	f7e7 fc28 	bl	8000230 <memchr>
 80189e0:	2800      	cmp	r0, #0
 80189e2:	d036      	beq.n	8018a52 <_svfiprintf_r+0x1d2>
 80189e4:	4b21      	ldr	r3, [pc, #132]	@ (8018a6c <_svfiprintf_r+0x1ec>)
 80189e6:	bb1b      	cbnz	r3, 8018a30 <_svfiprintf_r+0x1b0>
 80189e8:	9b03      	ldr	r3, [sp, #12]
 80189ea:	3307      	adds	r3, #7
 80189ec:	f023 0307 	bic.w	r3, r3, #7
 80189f0:	3308      	adds	r3, #8
 80189f2:	9303      	str	r3, [sp, #12]
 80189f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189f6:	4433      	add	r3, r6
 80189f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80189fa:	e76a      	b.n	80188d2 <_svfiprintf_r+0x52>
 80189fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8018a00:	460c      	mov	r4, r1
 8018a02:	2001      	movs	r0, #1
 8018a04:	e7a8      	b.n	8018958 <_svfiprintf_r+0xd8>
 8018a06:	2300      	movs	r3, #0
 8018a08:	3401      	adds	r4, #1
 8018a0a:	9305      	str	r3, [sp, #20]
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	f04f 0c0a 	mov.w	ip, #10
 8018a12:	4620      	mov	r0, r4
 8018a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a18:	3a30      	subs	r2, #48	@ 0x30
 8018a1a:	2a09      	cmp	r2, #9
 8018a1c:	d903      	bls.n	8018a26 <_svfiprintf_r+0x1a6>
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d0c6      	beq.n	80189b0 <_svfiprintf_r+0x130>
 8018a22:	9105      	str	r1, [sp, #20]
 8018a24:	e7c4      	b.n	80189b0 <_svfiprintf_r+0x130>
 8018a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8018a2a:	4604      	mov	r4, r0
 8018a2c:	2301      	movs	r3, #1
 8018a2e:	e7f0      	b.n	8018a12 <_svfiprintf_r+0x192>
 8018a30:	ab03      	add	r3, sp, #12
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	462a      	mov	r2, r5
 8018a36:	4b0e      	ldr	r3, [pc, #56]	@ (8018a70 <_svfiprintf_r+0x1f0>)
 8018a38:	a904      	add	r1, sp, #16
 8018a3a:	4638      	mov	r0, r7
 8018a3c:	f7fd fcd4 	bl	80163e8 <_printf_float>
 8018a40:	1c42      	adds	r2, r0, #1
 8018a42:	4606      	mov	r6, r0
 8018a44:	d1d6      	bne.n	80189f4 <_svfiprintf_r+0x174>
 8018a46:	89ab      	ldrh	r3, [r5, #12]
 8018a48:	065b      	lsls	r3, r3, #25
 8018a4a:	f53f af2d 	bmi.w	80188a8 <_svfiprintf_r+0x28>
 8018a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018a50:	e72c      	b.n	80188ac <_svfiprintf_r+0x2c>
 8018a52:	ab03      	add	r3, sp, #12
 8018a54:	9300      	str	r3, [sp, #0]
 8018a56:	462a      	mov	r2, r5
 8018a58:	4b05      	ldr	r3, [pc, #20]	@ (8018a70 <_svfiprintf_r+0x1f0>)
 8018a5a:	a904      	add	r1, sp, #16
 8018a5c:	4638      	mov	r0, r7
 8018a5e:	f7fd ff5b 	bl	8016918 <_printf_i>
 8018a62:	e7ed      	b.n	8018a40 <_svfiprintf_r+0x1c0>
 8018a64:	0801a2e0 	.word	0x0801a2e0
 8018a68:	0801a2ea 	.word	0x0801a2ea
 8018a6c:	080163e9 	.word	0x080163e9
 8018a70:	080187c9 	.word	0x080187c9
 8018a74:	0801a2e6 	.word	0x0801a2e6

08018a78 <__sfputc_r>:
 8018a78:	6893      	ldr	r3, [r2, #8]
 8018a7a:	3b01      	subs	r3, #1
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	b410      	push	{r4}
 8018a80:	6093      	str	r3, [r2, #8]
 8018a82:	da08      	bge.n	8018a96 <__sfputc_r+0x1e>
 8018a84:	6994      	ldr	r4, [r2, #24]
 8018a86:	42a3      	cmp	r3, r4
 8018a88:	db01      	blt.n	8018a8e <__sfputc_r+0x16>
 8018a8a:	290a      	cmp	r1, #10
 8018a8c:	d103      	bne.n	8018a96 <__sfputc_r+0x1e>
 8018a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a92:	f7fe ba5f 	b.w	8016f54 <__swbuf_r>
 8018a96:	6813      	ldr	r3, [r2, #0]
 8018a98:	1c58      	adds	r0, r3, #1
 8018a9a:	6010      	str	r0, [r2, #0]
 8018a9c:	7019      	strb	r1, [r3, #0]
 8018a9e:	4608      	mov	r0, r1
 8018aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aa4:	4770      	bx	lr

08018aa6 <__sfputs_r>:
 8018aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa8:	4606      	mov	r6, r0
 8018aaa:	460f      	mov	r7, r1
 8018aac:	4614      	mov	r4, r2
 8018aae:	18d5      	adds	r5, r2, r3
 8018ab0:	42ac      	cmp	r4, r5
 8018ab2:	d101      	bne.n	8018ab8 <__sfputs_r+0x12>
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	e007      	b.n	8018ac8 <__sfputs_r+0x22>
 8018ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018abc:	463a      	mov	r2, r7
 8018abe:	4630      	mov	r0, r6
 8018ac0:	f7ff ffda 	bl	8018a78 <__sfputc_r>
 8018ac4:	1c43      	adds	r3, r0, #1
 8018ac6:	d1f3      	bne.n	8018ab0 <__sfputs_r+0xa>
 8018ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018acc <_vfiprintf_r>:
 8018acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad0:	460d      	mov	r5, r1
 8018ad2:	b09d      	sub	sp, #116	@ 0x74
 8018ad4:	4614      	mov	r4, r2
 8018ad6:	4698      	mov	r8, r3
 8018ad8:	4606      	mov	r6, r0
 8018ada:	b118      	cbz	r0, 8018ae4 <_vfiprintf_r+0x18>
 8018adc:	6a03      	ldr	r3, [r0, #32]
 8018ade:	b90b      	cbnz	r3, 8018ae4 <_vfiprintf_r+0x18>
 8018ae0:	f7fe f8c6 	bl	8016c70 <__sinit>
 8018ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ae6:	07d9      	lsls	r1, r3, #31
 8018ae8:	d405      	bmi.n	8018af6 <_vfiprintf_r+0x2a>
 8018aea:	89ab      	ldrh	r3, [r5, #12]
 8018aec:	059a      	lsls	r2, r3, #22
 8018aee:	d402      	bmi.n	8018af6 <_vfiprintf_r+0x2a>
 8018af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018af2:	f7fe fc06 	bl	8017302 <__retarget_lock_acquire_recursive>
 8018af6:	89ab      	ldrh	r3, [r5, #12]
 8018af8:	071b      	lsls	r3, r3, #28
 8018afa:	d501      	bpl.n	8018b00 <_vfiprintf_r+0x34>
 8018afc:	692b      	ldr	r3, [r5, #16]
 8018afe:	b99b      	cbnz	r3, 8018b28 <_vfiprintf_r+0x5c>
 8018b00:	4629      	mov	r1, r5
 8018b02:	4630      	mov	r0, r6
 8018b04:	f7fe fa64 	bl	8016fd0 <__swsetup_r>
 8018b08:	b170      	cbz	r0, 8018b28 <_vfiprintf_r+0x5c>
 8018b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b0c:	07dc      	lsls	r4, r3, #31
 8018b0e:	d504      	bpl.n	8018b1a <_vfiprintf_r+0x4e>
 8018b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018b14:	b01d      	add	sp, #116	@ 0x74
 8018b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b1a:	89ab      	ldrh	r3, [r5, #12]
 8018b1c:	0598      	lsls	r0, r3, #22
 8018b1e:	d4f7      	bmi.n	8018b10 <_vfiprintf_r+0x44>
 8018b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b22:	f7fe fbef 	bl	8017304 <__retarget_lock_release_recursive>
 8018b26:	e7f3      	b.n	8018b10 <_vfiprintf_r+0x44>
 8018b28:	2300      	movs	r3, #0
 8018b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b2c:	2320      	movs	r3, #32
 8018b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b36:	2330      	movs	r3, #48	@ 0x30
 8018b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018ce8 <_vfiprintf_r+0x21c>
 8018b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018b40:	f04f 0901 	mov.w	r9, #1
 8018b44:	4623      	mov	r3, r4
 8018b46:	469a      	mov	sl, r3
 8018b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b4c:	b10a      	cbz	r2, 8018b52 <_vfiprintf_r+0x86>
 8018b4e:	2a25      	cmp	r2, #37	@ 0x25
 8018b50:	d1f9      	bne.n	8018b46 <_vfiprintf_r+0x7a>
 8018b52:	ebba 0b04 	subs.w	fp, sl, r4
 8018b56:	d00b      	beq.n	8018b70 <_vfiprintf_r+0xa4>
 8018b58:	465b      	mov	r3, fp
 8018b5a:	4622      	mov	r2, r4
 8018b5c:	4629      	mov	r1, r5
 8018b5e:	4630      	mov	r0, r6
 8018b60:	f7ff ffa1 	bl	8018aa6 <__sfputs_r>
 8018b64:	3001      	adds	r0, #1
 8018b66:	f000 80a7 	beq.w	8018cb8 <_vfiprintf_r+0x1ec>
 8018b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b6c:	445a      	add	r2, fp
 8018b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018b70:	f89a 3000 	ldrb.w	r3, [sl]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	f000 809f 	beq.w	8018cb8 <_vfiprintf_r+0x1ec>
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018b84:	f10a 0a01 	add.w	sl, sl, #1
 8018b88:	9304      	str	r3, [sp, #16]
 8018b8a:	9307      	str	r3, [sp, #28]
 8018b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8018b92:	4654      	mov	r4, sl
 8018b94:	2205      	movs	r2, #5
 8018b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b9a:	4853      	ldr	r0, [pc, #332]	@ (8018ce8 <_vfiprintf_r+0x21c>)
 8018b9c:	f7e7 fb48 	bl	8000230 <memchr>
 8018ba0:	9a04      	ldr	r2, [sp, #16]
 8018ba2:	b9d8      	cbnz	r0, 8018bdc <_vfiprintf_r+0x110>
 8018ba4:	06d1      	lsls	r1, r2, #27
 8018ba6:	bf44      	itt	mi
 8018ba8:	2320      	movmi	r3, #32
 8018baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bae:	0713      	lsls	r3, r2, #28
 8018bb0:	bf44      	itt	mi
 8018bb2:	232b      	movmi	r3, #43	@ 0x2b
 8018bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8018bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8018bbe:	d015      	beq.n	8018bec <_vfiprintf_r+0x120>
 8018bc0:	9a07      	ldr	r2, [sp, #28]
 8018bc2:	4654      	mov	r4, sl
 8018bc4:	2000      	movs	r0, #0
 8018bc6:	f04f 0c0a 	mov.w	ip, #10
 8018bca:	4621      	mov	r1, r4
 8018bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bd0:	3b30      	subs	r3, #48	@ 0x30
 8018bd2:	2b09      	cmp	r3, #9
 8018bd4:	d94b      	bls.n	8018c6e <_vfiprintf_r+0x1a2>
 8018bd6:	b1b0      	cbz	r0, 8018c06 <_vfiprintf_r+0x13a>
 8018bd8:	9207      	str	r2, [sp, #28]
 8018bda:	e014      	b.n	8018c06 <_vfiprintf_r+0x13a>
 8018bdc:	eba0 0308 	sub.w	r3, r0, r8
 8018be0:	fa09 f303 	lsl.w	r3, r9, r3
 8018be4:	4313      	orrs	r3, r2
 8018be6:	9304      	str	r3, [sp, #16]
 8018be8:	46a2      	mov	sl, r4
 8018bea:	e7d2      	b.n	8018b92 <_vfiprintf_r+0xc6>
 8018bec:	9b03      	ldr	r3, [sp, #12]
 8018bee:	1d19      	adds	r1, r3, #4
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	9103      	str	r1, [sp, #12]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	bfbb      	ittet	lt
 8018bf8:	425b      	neglt	r3, r3
 8018bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8018bfe:	9307      	strge	r3, [sp, #28]
 8018c00:	9307      	strlt	r3, [sp, #28]
 8018c02:	bfb8      	it	lt
 8018c04:	9204      	strlt	r2, [sp, #16]
 8018c06:	7823      	ldrb	r3, [r4, #0]
 8018c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8018c0a:	d10a      	bne.n	8018c22 <_vfiprintf_r+0x156>
 8018c0c:	7863      	ldrb	r3, [r4, #1]
 8018c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c10:	d132      	bne.n	8018c78 <_vfiprintf_r+0x1ac>
 8018c12:	9b03      	ldr	r3, [sp, #12]
 8018c14:	1d1a      	adds	r2, r3, #4
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	9203      	str	r2, [sp, #12]
 8018c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018c1e:	3402      	adds	r4, #2
 8018c20:	9305      	str	r3, [sp, #20]
 8018c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018cf8 <_vfiprintf_r+0x22c>
 8018c26:	7821      	ldrb	r1, [r4, #0]
 8018c28:	2203      	movs	r2, #3
 8018c2a:	4650      	mov	r0, sl
 8018c2c:	f7e7 fb00 	bl	8000230 <memchr>
 8018c30:	b138      	cbz	r0, 8018c42 <_vfiprintf_r+0x176>
 8018c32:	9b04      	ldr	r3, [sp, #16]
 8018c34:	eba0 000a 	sub.w	r0, r0, sl
 8018c38:	2240      	movs	r2, #64	@ 0x40
 8018c3a:	4082      	lsls	r2, r0
 8018c3c:	4313      	orrs	r3, r2
 8018c3e:	3401      	adds	r4, #1
 8018c40:	9304      	str	r3, [sp, #16]
 8018c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c46:	4829      	ldr	r0, [pc, #164]	@ (8018cec <_vfiprintf_r+0x220>)
 8018c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018c4c:	2206      	movs	r2, #6
 8018c4e:	f7e7 faef 	bl	8000230 <memchr>
 8018c52:	2800      	cmp	r0, #0
 8018c54:	d03f      	beq.n	8018cd6 <_vfiprintf_r+0x20a>
 8018c56:	4b26      	ldr	r3, [pc, #152]	@ (8018cf0 <_vfiprintf_r+0x224>)
 8018c58:	bb1b      	cbnz	r3, 8018ca2 <_vfiprintf_r+0x1d6>
 8018c5a:	9b03      	ldr	r3, [sp, #12]
 8018c5c:	3307      	adds	r3, #7
 8018c5e:	f023 0307 	bic.w	r3, r3, #7
 8018c62:	3308      	adds	r3, #8
 8018c64:	9303      	str	r3, [sp, #12]
 8018c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c68:	443b      	add	r3, r7
 8018c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018c6c:	e76a      	b.n	8018b44 <_vfiprintf_r+0x78>
 8018c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018c72:	460c      	mov	r4, r1
 8018c74:	2001      	movs	r0, #1
 8018c76:	e7a8      	b.n	8018bca <_vfiprintf_r+0xfe>
 8018c78:	2300      	movs	r3, #0
 8018c7a:	3401      	adds	r4, #1
 8018c7c:	9305      	str	r3, [sp, #20]
 8018c7e:	4619      	mov	r1, r3
 8018c80:	f04f 0c0a 	mov.w	ip, #10
 8018c84:	4620      	mov	r0, r4
 8018c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c8a:	3a30      	subs	r2, #48	@ 0x30
 8018c8c:	2a09      	cmp	r2, #9
 8018c8e:	d903      	bls.n	8018c98 <_vfiprintf_r+0x1cc>
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d0c6      	beq.n	8018c22 <_vfiprintf_r+0x156>
 8018c94:	9105      	str	r1, [sp, #20]
 8018c96:	e7c4      	b.n	8018c22 <_vfiprintf_r+0x156>
 8018c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c9c:	4604      	mov	r4, r0
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	e7f0      	b.n	8018c84 <_vfiprintf_r+0x1b8>
 8018ca2:	ab03      	add	r3, sp, #12
 8018ca4:	9300      	str	r3, [sp, #0]
 8018ca6:	462a      	mov	r2, r5
 8018ca8:	4b12      	ldr	r3, [pc, #72]	@ (8018cf4 <_vfiprintf_r+0x228>)
 8018caa:	a904      	add	r1, sp, #16
 8018cac:	4630      	mov	r0, r6
 8018cae:	f7fd fb9b 	bl	80163e8 <_printf_float>
 8018cb2:	4607      	mov	r7, r0
 8018cb4:	1c78      	adds	r0, r7, #1
 8018cb6:	d1d6      	bne.n	8018c66 <_vfiprintf_r+0x19a>
 8018cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018cba:	07d9      	lsls	r1, r3, #31
 8018cbc:	d405      	bmi.n	8018cca <_vfiprintf_r+0x1fe>
 8018cbe:	89ab      	ldrh	r3, [r5, #12]
 8018cc0:	059a      	lsls	r2, r3, #22
 8018cc2:	d402      	bmi.n	8018cca <_vfiprintf_r+0x1fe>
 8018cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018cc6:	f7fe fb1d 	bl	8017304 <__retarget_lock_release_recursive>
 8018cca:	89ab      	ldrh	r3, [r5, #12]
 8018ccc:	065b      	lsls	r3, r3, #25
 8018cce:	f53f af1f 	bmi.w	8018b10 <_vfiprintf_r+0x44>
 8018cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018cd4:	e71e      	b.n	8018b14 <_vfiprintf_r+0x48>
 8018cd6:	ab03      	add	r3, sp, #12
 8018cd8:	9300      	str	r3, [sp, #0]
 8018cda:	462a      	mov	r2, r5
 8018cdc:	4b05      	ldr	r3, [pc, #20]	@ (8018cf4 <_vfiprintf_r+0x228>)
 8018cde:	a904      	add	r1, sp, #16
 8018ce0:	4630      	mov	r0, r6
 8018ce2:	f7fd fe19 	bl	8016918 <_printf_i>
 8018ce6:	e7e4      	b.n	8018cb2 <_vfiprintf_r+0x1e6>
 8018ce8:	0801a2e0 	.word	0x0801a2e0
 8018cec:	0801a2ea 	.word	0x0801a2ea
 8018cf0:	080163e9 	.word	0x080163e9
 8018cf4:	08018aa7 	.word	0x08018aa7
 8018cf8:	0801a2e6 	.word	0x0801a2e6

08018cfc <__sflush_r>:
 8018cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d04:	0716      	lsls	r6, r2, #28
 8018d06:	4605      	mov	r5, r0
 8018d08:	460c      	mov	r4, r1
 8018d0a:	d454      	bmi.n	8018db6 <__sflush_r+0xba>
 8018d0c:	684b      	ldr	r3, [r1, #4]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	dc02      	bgt.n	8018d18 <__sflush_r+0x1c>
 8018d12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	dd48      	ble.n	8018daa <__sflush_r+0xae>
 8018d18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	d045      	beq.n	8018daa <__sflush_r+0xae>
 8018d1e:	2300      	movs	r3, #0
 8018d20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018d24:	682f      	ldr	r7, [r5, #0]
 8018d26:	6a21      	ldr	r1, [r4, #32]
 8018d28:	602b      	str	r3, [r5, #0]
 8018d2a:	d030      	beq.n	8018d8e <__sflush_r+0x92>
 8018d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018d2e:	89a3      	ldrh	r3, [r4, #12]
 8018d30:	0759      	lsls	r1, r3, #29
 8018d32:	d505      	bpl.n	8018d40 <__sflush_r+0x44>
 8018d34:	6863      	ldr	r3, [r4, #4]
 8018d36:	1ad2      	subs	r2, r2, r3
 8018d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018d3a:	b10b      	cbz	r3, 8018d40 <__sflush_r+0x44>
 8018d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018d3e:	1ad2      	subs	r2, r2, r3
 8018d40:	2300      	movs	r3, #0
 8018d42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018d44:	6a21      	ldr	r1, [r4, #32]
 8018d46:	4628      	mov	r0, r5
 8018d48:	47b0      	blx	r6
 8018d4a:	1c43      	adds	r3, r0, #1
 8018d4c:	89a3      	ldrh	r3, [r4, #12]
 8018d4e:	d106      	bne.n	8018d5e <__sflush_r+0x62>
 8018d50:	6829      	ldr	r1, [r5, #0]
 8018d52:	291d      	cmp	r1, #29
 8018d54:	d82b      	bhi.n	8018dae <__sflush_r+0xb2>
 8018d56:	4a2a      	ldr	r2, [pc, #168]	@ (8018e00 <__sflush_r+0x104>)
 8018d58:	410a      	asrs	r2, r1
 8018d5a:	07d6      	lsls	r6, r2, #31
 8018d5c:	d427      	bmi.n	8018dae <__sflush_r+0xb2>
 8018d5e:	2200      	movs	r2, #0
 8018d60:	6062      	str	r2, [r4, #4]
 8018d62:	04d9      	lsls	r1, r3, #19
 8018d64:	6922      	ldr	r2, [r4, #16]
 8018d66:	6022      	str	r2, [r4, #0]
 8018d68:	d504      	bpl.n	8018d74 <__sflush_r+0x78>
 8018d6a:	1c42      	adds	r2, r0, #1
 8018d6c:	d101      	bne.n	8018d72 <__sflush_r+0x76>
 8018d6e:	682b      	ldr	r3, [r5, #0]
 8018d70:	b903      	cbnz	r3, 8018d74 <__sflush_r+0x78>
 8018d72:	6560      	str	r0, [r4, #84]	@ 0x54
 8018d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018d76:	602f      	str	r7, [r5, #0]
 8018d78:	b1b9      	cbz	r1, 8018daa <__sflush_r+0xae>
 8018d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018d7e:	4299      	cmp	r1, r3
 8018d80:	d002      	beq.n	8018d88 <__sflush_r+0x8c>
 8018d82:	4628      	mov	r0, r5
 8018d84:	f7ff f94c 	bl	8018020 <_free_r>
 8018d88:	2300      	movs	r3, #0
 8018d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8018d8c:	e00d      	b.n	8018daa <__sflush_r+0xae>
 8018d8e:	2301      	movs	r3, #1
 8018d90:	4628      	mov	r0, r5
 8018d92:	47b0      	blx	r6
 8018d94:	4602      	mov	r2, r0
 8018d96:	1c50      	adds	r0, r2, #1
 8018d98:	d1c9      	bne.n	8018d2e <__sflush_r+0x32>
 8018d9a:	682b      	ldr	r3, [r5, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d0c6      	beq.n	8018d2e <__sflush_r+0x32>
 8018da0:	2b1d      	cmp	r3, #29
 8018da2:	d001      	beq.n	8018da8 <__sflush_r+0xac>
 8018da4:	2b16      	cmp	r3, #22
 8018da6:	d11e      	bne.n	8018de6 <__sflush_r+0xea>
 8018da8:	602f      	str	r7, [r5, #0]
 8018daa:	2000      	movs	r0, #0
 8018dac:	e022      	b.n	8018df4 <__sflush_r+0xf8>
 8018dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018db2:	b21b      	sxth	r3, r3
 8018db4:	e01b      	b.n	8018dee <__sflush_r+0xf2>
 8018db6:	690f      	ldr	r7, [r1, #16]
 8018db8:	2f00      	cmp	r7, #0
 8018dba:	d0f6      	beq.n	8018daa <__sflush_r+0xae>
 8018dbc:	0793      	lsls	r3, r2, #30
 8018dbe:	680e      	ldr	r6, [r1, #0]
 8018dc0:	bf08      	it	eq
 8018dc2:	694b      	ldreq	r3, [r1, #20]
 8018dc4:	600f      	str	r7, [r1, #0]
 8018dc6:	bf18      	it	ne
 8018dc8:	2300      	movne	r3, #0
 8018dca:	eba6 0807 	sub.w	r8, r6, r7
 8018dce:	608b      	str	r3, [r1, #8]
 8018dd0:	f1b8 0f00 	cmp.w	r8, #0
 8018dd4:	dde9      	ble.n	8018daa <__sflush_r+0xae>
 8018dd6:	6a21      	ldr	r1, [r4, #32]
 8018dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018dda:	4643      	mov	r3, r8
 8018ddc:	463a      	mov	r2, r7
 8018dde:	4628      	mov	r0, r5
 8018de0:	47b0      	blx	r6
 8018de2:	2800      	cmp	r0, #0
 8018de4:	dc08      	bgt.n	8018df8 <__sflush_r+0xfc>
 8018de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018dee:	81a3      	strh	r3, [r4, #12]
 8018df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018df8:	4407      	add	r7, r0
 8018dfa:	eba8 0800 	sub.w	r8, r8, r0
 8018dfe:	e7e7      	b.n	8018dd0 <__sflush_r+0xd4>
 8018e00:	dfbffffe 	.word	0xdfbffffe

08018e04 <_fflush_r>:
 8018e04:	b538      	push	{r3, r4, r5, lr}
 8018e06:	690b      	ldr	r3, [r1, #16]
 8018e08:	4605      	mov	r5, r0
 8018e0a:	460c      	mov	r4, r1
 8018e0c:	b913      	cbnz	r3, 8018e14 <_fflush_r+0x10>
 8018e0e:	2500      	movs	r5, #0
 8018e10:	4628      	mov	r0, r5
 8018e12:	bd38      	pop	{r3, r4, r5, pc}
 8018e14:	b118      	cbz	r0, 8018e1e <_fflush_r+0x1a>
 8018e16:	6a03      	ldr	r3, [r0, #32]
 8018e18:	b90b      	cbnz	r3, 8018e1e <_fflush_r+0x1a>
 8018e1a:	f7fd ff29 	bl	8016c70 <__sinit>
 8018e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d0f3      	beq.n	8018e0e <_fflush_r+0xa>
 8018e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018e28:	07d0      	lsls	r0, r2, #31
 8018e2a:	d404      	bmi.n	8018e36 <_fflush_r+0x32>
 8018e2c:	0599      	lsls	r1, r3, #22
 8018e2e:	d402      	bmi.n	8018e36 <_fflush_r+0x32>
 8018e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e32:	f7fe fa66 	bl	8017302 <__retarget_lock_acquire_recursive>
 8018e36:	4628      	mov	r0, r5
 8018e38:	4621      	mov	r1, r4
 8018e3a:	f7ff ff5f 	bl	8018cfc <__sflush_r>
 8018e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018e40:	07da      	lsls	r2, r3, #31
 8018e42:	4605      	mov	r5, r0
 8018e44:	d4e4      	bmi.n	8018e10 <_fflush_r+0xc>
 8018e46:	89a3      	ldrh	r3, [r4, #12]
 8018e48:	059b      	lsls	r3, r3, #22
 8018e4a:	d4e1      	bmi.n	8018e10 <_fflush_r+0xc>
 8018e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018e4e:	f7fe fa59 	bl	8017304 <__retarget_lock_release_recursive>
 8018e52:	e7dd      	b.n	8018e10 <_fflush_r+0xc>

08018e54 <fiprintf>:
 8018e54:	b40e      	push	{r1, r2, r3}
 8018e56:	b503      	push	{r0, r1, lr}
 8018e58:	4601      	mov	r1, r0
 8018e5a:	ab03      	add	r3, sp, #12
 8018e5c:	4805      	ldr	r0, [pc, #20]	@ (8018e74 <fiprintf+0x20>)
 8018e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e62:	6800      	ldr	r0, [r0, #0]
 8018e64:	9301      	str	r3, [sp, #4]
 8018e66:	f7ff fe31 	bl	8018acc <_vfiprintf_r>
 8018e6a:	b002      	add	sp, #8
 8018e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e70:	b003      	add	sp, #12
 8018e72:	4770      	bx	lr
 8018e74:	200000c8 	.word	0x200000c8

08018e78 <__swhatbuf_r>:
 8018e78:	b570      	push	{r4, r5, r6, lr}
 8018e7a:	460c      	mov	r4, r1
 8018e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e80:	2900      	cmp	r1, #0
 8018e82:	b096      	sub	sp, #88	@ 0x58
 8018e84:	4615      	mov	r5, r2
 8018e86:	461e      	mov	r6, r3
 8018e88:	da0d      	bge.n	8018ea6 <__swhatbuf_r+0x2e>
 8018e8a:	89a3      	ldrh	r3, [r4, #12]
 8018e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018e90:	f04f 0100 	mov.w	r1, #0
 8018e94:	bf14      	ite	ne
 8018e96:	2340      	movne	r3, #64	@ 0x40
 8018e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018e9c:	2000      	movs	r0, #0
 8018e9e:	6031      	str	r1, [r6, #0]
 8018ea0:	602b      	str	r3, [r5, #0]
 8018ea2:	b016      	add	sp, #88	@ 0x58
 8018ea4:	bd70      	pop	{r4, r5, r6, pc}
 8018ea6:	466a      	mov	r2, sp
 8018ea8:	f000 f848 	bl	8018f3c <_fstat_r>
 8018eac:	2800      	cmp	r0, #0
 8018eae:	dbec      	blt.n	8018e8a <__swhatbuf_r+0x12>
 8018eb0:	9901      	ldr	r1, [sp, #4]
 8018eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018eba:	4259      	negs	r1, r3
 8018ebc:	4159      	adcs	r1, r3
 8018ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018ec2:	e7eb      	b.n	8018e9c <__swhatbuf_r+0x24>

08018ec4 <__smakebuf_r>:
 8018ec4:	898b      	ldrh	r3, [r1, #12]
 8018ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ec8:	079d      	lsls	r5, r3, #30
 8018eca:	4606      	mov	r6, r0
 8018ecc:	460c      	mov	r4, r1
 8018ece:	d507      	bpl.n	8018ee0 <__smakebuf_r+0x1c>
 8018ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018ed4:	6023      	str	r3, [r4, #0]
 8018ed6:	6123      	str	r3, [r4, #16]
 8018ed8:	2301      	movs	r3, #1
 8018eda:	6163      	str	r3, [r4, #20]
 8018edc:	b003      	add	sp, #12
 8018ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ee0:	ab01      	add	r3, sp, #4
 8018ee2:	466a      	mov	r2, sp
 8018ee4:	f7ff ffc8 	bl	8018e78 <__swhatbuf_r>
 8018ee8:	9f00      	ldr	r7, [sp, #0]
 8018eea:	4605      	mov	r5, r0
 8018eec:	4639      	mov	r1, r7
 8018eee:	4630      	mov	r0, r6
 8018ef0:	f7fc fff2 	bl	8015ed8 <_malloc_r>
 8018ef4:	b948      	cbnz	r0, 8018f0a <__smakebuf_r+0x46>
 8018ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018efa:	059a      	lsls	r2, r3, #22
 8018efc:	d4ee      	bmi.n	8018edc <__smakebuf_r+0x18>
 8018efe:	f023 0303 	bic.w	r3, r3, #3
 8018f02:	f043 0302 	orr.w	r3, r3, #2
 8018f06:	81a3      	strh	r3, [r4, #12]
 8018f08:	e7e2      	b.n	8018ed0 <__smakebuf_r+0xc>
 8018f0a:	89a3      	ldrh	r3, [r4, #12]
 8018f0c:	6020      	str	r0, [r4, #0]
 8018f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018f12:	81a3      	strh	r3, [r4, #12]
 8018f14:	9b01      	ldr	r3, [sp, #4]
 8018f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018f1a:	b15b      	cbz	r3, 8018f34 <__smakebuf_r+0x70>
 8018f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f20:	4630      	mov	r0, r6
 8018f22:	f000 f81d 	bl	8018f60 <_isatty_r>
 8018f26:	b128      	cbz	r0, 8018f34 <__smakebuf_r+0x70>
 8018f28:	89a3      	ldrh	r3, [r4, #12]
 8018f2a:	f023 0303 	bic.w	r3, r3, #3
 8018f2e:	f043 0301 	orr.w	r3, r3, #1
 8018f32:	81a3      	strh	r3, [r4, #12]
 8018f34:	89a3      	ldrh	r3, [r4, #12]
 8018f36:	431d      	orrs	r5, r3
 8018f38:	81a5      	strh	r5, [r4, #12]
 8018f3a:	e7cf      	b.n	8018edc <__smakebuf_r+0x18>

08018f3c <_fstat_r>:
 8018f3c:	b538      	push	{r3, r4, r5, lr}
 8018f3e:	4d07      	ldr	r5, [pc, #28]	@ (8018f5c <_fstat_r+0x20>)
 8018f40:	2300      	movs	r3, #0
 8018f42:	4604      	mov	r4, r0
 8018f44:	4608      	mov	r0, r1
 8018f46:	4611      	mov	r1, r2
 8018f48:	602b      	str	r3, [r5, #0]
 8018f4a:	f7e9 fc67 	bl	800281c <_fstat>
 8018f4e:	1c43      	adds	r3, r0, #1
 8018f50:	d102      	bne.n	8018f58 <_fstat_r+0x1c>
 8018f52:	682b      	ldr	r3, [r5, #0]
 8018f54:	b103      	cbz	r3, 8018f58 <_fstat_r+0x1c>
 8018f56:	6023      	str	r3, [r4, #0]
 8018f58:	bd38      	pop	{r3, r4, r5, pc}
 8018f5a:	bf00      	nop
 8018f5c:	20017bf8 	.word	0x20017bf8

08018f60 <_isatty_r>:
 8018f60:	b538      	push	{r3, r4, r5, lr}
 8018f62:	4d06      	ldr	r5, [pc, #24]	@ (8018f7c <_isatty_r+0x1c>)
 8018f64:	2300      	movs	r3, #0
 8018f66:	4604      	mov	r4, r0
 8018f68:	4608      	mov	r0, r1
 8018f6a:	602b      	str	r3, [r5, #0]
 8018f6c:	f7e9 fc66 	bl	800283c <_isatty>
 8018f70:	1c43      	adds	r3, r0, #1
 8018f72:	d102      	bne.n	8018f7a <_isatty_r+0x1a>
 8018f74:	682b      	ldr	r3, [r5, #0]
 8018f76:	b103      	cbz	r3, 8018f7a <_isatty_r+0x1a>
 8018f78:	6023      	str	r3, [r4, #0]
 8018f7a:	bd38      	pop	{r3, r4, r5, pc}
 8018f7c:	20017bf8 	.word	0x20017bf8

08018f80 <abort>:
 8018f80:	b508      	push	{r3, lr}
 8018f82:	2006      	movs	r0, #6
 8018f84:	f000 f84a 	bl	801901c <raise>
 8018f88:	2001      	movs	r0, #1
 8018f8a:	f7e9 fbf7 	bl	800277c <_exit>

08018f8e <__ascii_mbtowc>:
 8018f8e:	b082      	sub	sp, #8
 8018f90:	b901      	cbnz	r1, 8018f94 <__ascii_mbtowc+0x6>
 8018f92:	a901      	add	r1, sp, #4
 8018f94:	b142      	cbz	r2, 8018fa8 <__ascii_mbtowc+0x1a>
 8018f96:	b14b      	cbz	r3, 8018fac <__ascii_mbtowc+0x1e>
 8018f98:	7813      	ldrb	r3, [r2, #0]
 8018f9a:	600b      	str	r3, [r1, #0]
 8018f9c:	7812      	ldrb	r2, [r2, #0]
 8018f9e:	1e10      	subs	r0, r2, #0
 8018fa0:	bf18      	it	ne
 8018fa2:	2001      	movne	r0, #1
 8018fa4:	b002      	add	sp, #8
 8018fa6:	4770      	bx	lr
 8018fa8:	4610      	mov	r0, r2
 8018faa:	e7fb      	b.n	8018fa4 <__ascii_mbtowc+0x16>
 8018fac:	f06f 0001 	mvn.w	r0, #1
 8018fb0:	e7f8      	b.n	8018fa4 <__ascii_mbtowc+0x16>

08018fb2 <__ascii_wctomb>:
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	4608      	mov	r0, r1
 8018fb6:	b141      	cbz	r1, 8018fca <__ascii_wctomb+0x18>
 8018fb8:	2aff      	cmp	r2, #255	@ 0xff
 8018fba:	d904      	bls.n	8018fc6 <__ascii_wctomb+0x14>
 8018fbc:	228a      	movs	r2, #138	@ 0x8a
 8018fbe:	601a      	str	r2, [r3, #0]
 8018fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018fc4:	4770      	bx	lr
 8018fc6:	700a      	strb	r2, [r1, #0]
 8018fc8:	2001      	movs	r0, #1
 8018fca:	4770      	bx	lr

08018fcc <_raise_r>:
 8018fcc:	291f      	cmp	r1, #31
 8018fce:	b538      	push	{r3, r4, r5, lr}
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	460c      	mov	r4, r1
 8018fd4:	d904      	bls.n	8018fe0 <_raise_r+0x14>
 8018fd6:	2316      	movs	r3, #22
 8018fd8:	6003      	str	r3, [r0, #0]
 8018fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018fde:	bd38      	pop	{r3, r4, r5, pc}
 8018fe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018fe2:	b112      	cbz	r2, 8018fea <_raise_r+0x1e>
 8018fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018fe8:	b94b      	cbnz	r3, 8018ffe <_raise_r+0x32>
 8018fea:	4628      	mov	r0, r5
 8018fec:	f000 f830 	bl	8019050 <_getpid_r>
 8018ff0:	4622      	mov	r2, r4
 8018ff2:	4601      	mov	r1, r0
 8018ff4:	4628      	mov	r0, r5
 8018ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018ffa:	f000 b817 	b.w	801902c <_kill_r>
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	d00a      	beq.n	8019018 <_raise_r+0x4c>
 8019002:	1c59      	adds	r1, r3, #1
 8019004:	d103      	bne.n	801900e <_raise_r+0x42>
 8019006:	2316      	movs	r3, #22
 8019008:	6003      	str	r3, [r0, #0]
 801900a:	2001      	movs	r0, #1
 801900c:	e7e7      	b.n	8018fde <_raise_r+0x12>
 801900e:	2100      	movs	r1, #0
 8019010:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019014:	4620      	mov	r0, r4
 8019016:	4798      	blx	r3
 8019018:	2000      	movs	r0, #0
 801901a:	e7e0      	b.n	8018fde <_raise_r+0x12>

0801901c <raise>:
 801901c:	4b02      	ldr	r3, [pc, #8]	@ (8019028 <raise+0xc>)
 801901e:	4601      	mov	r1, r0
 8019020:	6818      	ldr	r0, [r3, #0]
 8019022:	f7ff bfd3 	b.w	8018fcc <_raise_r>
 8019026:	bf00      	nop
 8019028:	200000c8 	.word	0x200000c8

0801902c <_kill_r>:
 801902c:	b538      	push	{r3, r4, r5, lr}
 801902e:	4d07      	ldr	r5, [pc, #28]	@ (801904c <_kill_r+0x20>)
 8019030:	2300      	movs	r3, #0
 8019032:	4604      	mov	r4, r0
 8019034:	4608      	mov	r0, r1
 8019036:	4611      	mov	r1, r2
 8019038:	602b      	str	r3, [r5, #0]
 801903a:	f7e9 fb8f 	bl	800275c <_kill>
 801903e:	1c43      	adds	r3, r0, #1
 8019040:	d102      	bne.n	8019048 <_kill_r+0x1c>
 8019042:	682b      	ldr	r3, [r5, #0]
 8019044:	b103      	cbz	r3, 8019048 <_kill_r+0x1c>
 8019046:	6023      	str	r3, [r4, #0]
 8019048:	bd38      	pop	{r3, r4, r5, pc}
 801904a:	bf00      	nop
 801904c:	20017bf8 	.word	0x20017bf8

08019050 <_getpid_r>:
 8019050:	f7e9 bb7c 	b.w	800274c <_getpid>

08019054 <_init>:
 8019054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019056:	bf00      	nop
 8019058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801905a:	bc08      	pop	{r3}
 801905c:	469e      	mov	lr, r3
 801905e:	4770      	bx	lr

08019060 <_fini>:
 8019060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019062:	bf00      	nop
 8019064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019066:	bc08      	pop	{r3}
 8019068:	469e      	mov	lr, r3
 801906a:	4770      	bx	lr
