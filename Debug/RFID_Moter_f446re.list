
RFID_Moter_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018cf4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  08018ec8  08018ec8  00019ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a13c  0801a13c  0001c284  2**0
                  CONTENTS
  4 .ARM          00000008  0801a13c  0801a13c  0001b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a144  0801a144  0001c284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a144  0801a144  0001b144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a14c  0801a14c  0001b14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801a150  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c2c  20000288  0801a3d4  0001c288  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010eb4  0801a3d4  0001ceb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc0d  00000000  00000000  0001c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004877  00000000  00000000  00037ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0003c738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108c  00000000  00000000  0003dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028220  00000000  00000000  0003ed6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e1b9  00000000  00000000  00066f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e61c3  00000000  00000000  00085145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0016b308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c80  00000000  00000000  0016b380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00172000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000288 	.word	0x20000288
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018eac 	.word	0x08018eac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000028c 	.word	0x2000028c
 800020c:	08018eac 	.word	0x08018eac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9b5 	b.w	8000f94 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b96a 	b.w	8000f94 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	460c      	mov	r4, r1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d14e      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	458c      	cmp	ip, r1
 8000ce8:	4686      	mov	lr, r0
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	d962      	bls.n	8000db6 <__udivmoddi4+0xde>
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0320 	rsb	r3, r2, #32
 8000cf6:	4091      	lsls	r1, r2
 8000cf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0a:	fa1f f68c 	uxth.w	r6, ip
 8000d0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d16:	fb07 1114 	mls	r1, r7, r4, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb04 f106 	mul.w	r1, r4, r6
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d2e:	f080 8112 	bcs.w	8000f56 <__udivmoddi4+0x27e>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 810f 	bls.w	8000f56 <__udivmoddi4+0x27e>
 8000d38:	3c02      	subs	r4, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	fa1f f38e 	uxth.w	r3, lr
 8000d42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d46:	fb07 1110 	mls	r1, r7, r0, r1
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f606 	mul.w	r6, r0, r6
 8000d52:	429e      	cmp	r6, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x94>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d5e:	f080 80fc 	bcs.w	8000f5a <__udivmoddi4+0x282>
 8000d62:	429e      	cmp	r6, r3
 8000d64:	f240 80f9 	bls.w	8000f5a <__udivmoddi4+0x282>
 8000d68:	4463      	add	r3, ip
 8000d6a:	3802      	subs	r0, #2
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d72:	2100      	movs	r1, #0
 8000d74:	b11d      	cbz	r5, 8000d7e <__udivmoddi4+0xa6>
 8000d76:	40d3      	lsrs	r3, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d905      	bls.n	8000d92 <__udivmoddi4+0xba>
 8000d86:	b10d      	cbz	r5, 8000d8c <__udivmoddi4+0xb4>
 8000d88:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e7f5      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000d92:	fab3 f183 	clz	r1, r3
 8000d96:	2900      	cmp	r1, #0
 8000d98:	d146      	bne.n	8000e28 <__udivmoddi4+0x150>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d302      	bcc.n	8000da4 <__udivmoddi4+0xcc>
 8000d9e:	4290      	cmp	r0, r2
 8000da0:	f0c0 80f0 	bcc.w	8000f84 <__udivmoddi4+0x2ac>
 8000da4:	1a86      	subs	r6, r0, r2
 8000da6:	eb64 0303 	sbc.w	r3, r4, r3
 8000daa:	2001      	movs	r0, #1
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d0e6      	beq.n	8000d7e <__udivmoddi4+0xa6>
 8000db0:	e9c5 6300 	strd	r6, r3, [r5]
 8000db4:	e7e3      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000db6:	2a00      	cmp	r2, #0
 8000db8:	f040 8090 	bne.w	8000edc <__udivmoddi4+0x204>
 8000dbc:	eba1 040c 	sub.w	r4, r1, ip
 8000dc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc4:	fa1f f78c 	uxth.w	r7, ip
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dda:	fb07 f006 	mul.w	r0, r7, r6
 8000dde:	4298      	cmp	r0, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x11c>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x11a>
 8000dec:	4298      	cmp	r0, r3
 8000dee:	f200 80cd 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000df2:	4626      	mov	r6, r4
 8000df4:	1a1c      	subs	r4, r3, r0
 8000df6:	fa1f f38e 	uxth.w	r3, lr
 8000dfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000e02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e06:	fb00 f707 	mul.w	r7, r0, r7
 8000e0a:	429f      	cmp	r7, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x148>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x146>
 8000e18:	429f      	cmp	r7, r3
 8000e1a:	f200 80b0 	bhi.w	8000f7e <__udivmoddi4+0x2a6>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	1bdb      	subs	r3, r3, r7
 8000e22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0x9c>
 8000e28:	f1c1 0620 	rsb	r6, r1, #32
 8000e2c:	408b      	lsls	r3, r1
 8000e2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e32:	431f      	orrs	r7, r3
 8000e34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e38:	fa04 f301 	lsl.w	r3, r4, r1
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	40f4      	lsrs	r4, r6
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	0c38      	lsrs	r0, r7, #16
 8000e48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fb00 441e 	mls	r4, r0, lr, r4
 8000e58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e60:	45a1      	cmp	r9, r4
 8000e62:	fa02 f201 	lsl.w	r2, r2, r1
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x1a6>
 8000e68:	193c      	adds	r4, r7, r4
 8000e6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e6e:	f080 8084 	bcs.w	8000f7a <__udivmoddi4+0x2a2>
 8000e72:	45a1      	cmp	r9, r4
 8000e74:	f240 8081 	bls.w	8000f7a <__udivmoddi4+0x2a2>
 8000e78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e7c:	443c      	add	r4, r7
 8000e7e:	eba4 0409 	sub.w	r4, r4, r9
 8000e82:	fa1f f983 	uxth.w	r9, r3
 8000e86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e96:	45a4      	cmp	ip, r4
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x1d2>
 8000e9a:	193c      	adds	r4, r7, r4
 8000e9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ea0:	d267      	bcs.n	8000f72 <__udivmoddi4+0x29a>
 8000ea2:	45a4      	cmp	ip, r4
 8000ea4:	d965      	bls.n	8000f72 <__udivmoddi4+0x29a>
 8000ea6:	3b02      	subs	r3, #2
 8000ea8:	443c      	add	r4, r7
 8000eaa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eae:	fba0 9302 	umull	r9, r3, r0, r2
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	429c      	cmp	r4, r3
 8000eb8:	46ce      	mov	lr, r9
 8000eba:	469c      	mov	ip, r3
 8000ebc:	d351      	bcc.n	8000f62 <__udivmoddi4+0x28a>
 8000ebe:	d04e      	beq.n	8000f5e <__udivmoddi4+0x286>
 8000ec0:	b155      	cbz	r5, 8000ed8 <__udivmoddi4+0x200>
 8000ec2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eca:	fa04 f606 	lsl.w	r6, r4, r6
 8000ece:	40cb      	lsrs	r3, r1
 8000ed0:	431e      	orrs	r6, r3
 8000ed2:	40cc      	lsrs	r4, r1
 8000ed4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e750      	b.n	8000d7e <__udivmoddi4+0xa6>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eec:	4094      	lsls	r4, r2
 8000eee:	430c      	orrs	r4, r1
 8000ef0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef8:	fa1f f78c 	uxth.w	r7, ip
 8000efc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f00:	fb08 3110 	mls	r1, r8, r0, r3
 8000f04:	0c23      	lsrs	r3, r4, #16
 8000f06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f0a:	fb00 f107 	mul.w	r1, r0, r7
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x24c>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f1a:	d22c      	bcs.n	8000f76 <__udivmoddi4+0x29e>
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	d92a      	bls.n	8000f76 <__udivmoddi4+0x29e>
 8000f20:	3802      	subs	r0, #2
 8000f22:	4463      	add	r3, ip
 8000f24:	1a5b      	subs	r3, r3, r1
 8000f26:	b2a4      	uxth	r4, r4
 8000f28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f34:	fb01 f307 	mul.w	r3, r1, r7
 8000f38:	42a3      	cmp	r3, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x276>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f44:	d213      	bcs.n	8000f6e <__udivmoddi4+0x296>
 8000f46:	42a3      	cmp	r3, r4
 8000f48:	d911      	bls.n	8000f6e <__udivmoddi4+0x296>
 8000f4a:	3902      	subs	r1, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	1ae4      	subs	r4, r4, r3
 8000f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f54:	e739      	b.n	8000dca <__udivmoddi4+0xf2>
 8000f56:	4604      	mov	r4, r0
 8000f58:	e6f0      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e706      	b.n	8000d6c <__udivmoddi4+0x94>
 8000f5e:	45c8      	cmp	r8, r9
 8000f60:	d2ae      	bcs.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f6a:	3801      	subs	r0, #1
 8000f6c:	e7a8      	b.n	8000ec0 <__udivmoddi4+0x1e8>
 8000f6e:	4631      	mov	r1, r6
 8000f70:	e7ed      	b.n	8000f4e <__udivmoddi4+0x276>
 8000f72:	4603      	mov	r3, r0
 8000f74:	e799      	b.n	8000eaa <__udivmoddi4+0x1d2>
 8000f76:	4630      	mov	r0, r6
 8000f78:	e7d4      	b.n	8000f24 <__udivmoddi4+0x24c>
 8000f7a:	46d6      	mov	lr, sl
 8000f7c:	e77f      	b.n	8000e7e <__udivmoddi4+0x1a6>
 8000f7e:	4463      	add	r3, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e74d      	b.n	8000e20 <__udivmoddi4+0x148>
 8000f84:	4606      	mov	r6, r0
 8000f86:	4623      	mov	r3, r4
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e70f      	b.n	8000dac <__udivmoddi4+0xd4>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	e730      	b.n	8000df4 <__udivmoddi4+0x11c>
 8000f92:	bf00      	nop

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000fa4:	f007 f856 	bl	8008054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000fb0:	f000 f986 	bl	80012c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f040 8090 	bne.w	80010e2 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01e      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fc8:	2208      	movs	r2, #8
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d015      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f023 0307 	bic.w	r3, r3, #7
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d06a      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
 800100c:	4b43      	ldr	r3, [pc, #268]	@ (800111c <pvPortMallocMicroROS+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d865      	bhi.n	80010e2 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001016:	4b42      	ldr	r3, [pc, #264]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 8001018:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800101a:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <pvPortMallocMicroROS+0x188>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001020:	e004      	b.n	800102c <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	d903      	bls.n	800103e <pvPortMallocMicroROS+0xa6>
 8001036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800103e:	4b35      	ldr	r3, [pc, #212]	@ (8001114 <pvPortMallocMicroROS+0x17c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	429a      	cmp	r2, r3
 8001046:	d04c      	beq.n	80010e2 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2208      	movs	r2, #8
 800104e:	4413      	add	r3, r2
 8001050:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	1ad2      	subs	r2, r2, r3
 8001062:	2308      	movs	r3, #8
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	429a      	cmp	r2, r3
 8001068:	d920      	bls.n	80010ac <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800106a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800107c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001080:	f383 8811 	msr	BASEPRI, r3
 8001084:	f3bf 8f6f 	isb	sy
 8001088:	f3bf 8f4f 	dsb	sy
 800108c:	613b      	str	r3, [r7, #16]
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1ad2      	subs	r2, r2, r3
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80010a6:	69b8      	ldr	r0, [r7, #24]
 80010a8:	f000 f96c 	bl	8001384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d203      	bcs.n	80010ce <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <pvPortMallocMicroROS+0x184>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <pvPortMallocMicroROS+0x18c>)
 80010cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <pvPortMallocMicroROS+0x180>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010e2:	f006 ffc5 	bl	8008070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00b      	beq.n	8001108 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	60fb      	str	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20003eac 	.word	0x20003eac
 8001118:	20003eb8 	.word	0x20003eb8
 800111c:	20003eb0 	.word	0x20003eb0
 8001120:	20003ea4 	.word	0x20003ea4
 8001124:	20003eb4 	.word	0x20003eb4

08001128 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d04a      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800113a:	2308      	movs	r3, #8
 800113c:	425b      	negs	r3, r3
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <vPortFreeMicroROS+0x46>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	60fb      	str	r3, [r7, #12]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117a:	f383 8811 	msr	BASEPRI, r3
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	f3bf 8f4f 	dsb	sy
 8001186:	60bb      	str	r3, [r7, #8]
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	e7fd      	b.n	800118a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d019      	beq.n	80011d0 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d115      	bne.n	80011d0 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <vPortFreeMicroROS+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011b4:	f006 ff4e 	bl	8008054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a06      	ldr	r2, [pc, #24]	@ (80011dc <vPortFreeMicroROS+0xb4>)
 80011c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f000 f8dc 	bl	8001384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011cc:	f006 ff50 	bl	8008070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20003eb8 	.word	0x20003eb8
 80011dc:	20003eb0 	.word	0x20003eb0

080011e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011ec:	2308      	movs	r3, #8
 80011ee:	425b      	negs	r3, r3
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4413      	add	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <getBlockSize+0x38>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	43db      	mvns	r3, r3
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]

	return count;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20003eb8 	.word	0x20003eb8

0800121c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001226:	f006 ff15 	bl	8008054 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff feb4 	bl	8000f98 <pvPortMallocMicroROS>
 8001230:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d017      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d014      	beq.n	8001268 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffce 	bl	80011e0 <getBlockSize>
 8001244:	4603      	mov	r3, r0
 8001246:	2208      	movs	r2, #8
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d201      	bcs.n	8001258 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68b8      	ldr	r0, [r7, #8]
 800125e:	f015 ff84 	bl	801716a <memcpy>

		vPortFreeMicroROS(pv);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff60 	bl	8001128 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001268:	f006 ff02 	bl	8008070 <xTaskResumeAll>

	return newmem;
 800126c:	68bb      	ldr	r3, [r7, #8]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001280:	f006 fee8 	bl	8008054 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff fe82 	bl	8000f98 <pvPortMallocMicroROS>
 8001294:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	613b      	str	r3, [r7, #16]

  	while(count--)
 800129a:	e004      	b.n	80012a6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	613a      	str	r2, [r7, #16]
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	617a      	str	r2, [r7, #20]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f5      	bne.n	800129c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80012b0:	f006 fede 	bl	8008070 <xTaskResumeAll>
  	return mem;
 80012b4:	68fb      	ldr	r3, [r7, #12]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012cc:	4b27      	ldr	r3, [pc, #156]	@ (800136c <prvHeapInit+0xac>)
 80012ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00c      	beq.n	80012f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3307      	adds	r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <prvHeapInit+0xac>)
 80012f0:	4413      	add	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <prvHeapInit+0xb0>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <prvHeapInit+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800130c:	2208      	movs	r2, #8
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a15      	ldr	r2, [pc, #84]	@ (8001374 <prvHeapInit+0xb4>)
 8001320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <prvHeapInit+0xb4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <prvHeapInit+0xb4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <prvHeapInit+0xb4>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <prvHeapInit+0xb8>)
 800134e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a09      	ldr	r2, [pc, #36]	@ (800137c <prvHeapInit+0xbc>)
 8001356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <prvHeapInit+0xc0>)
 800135a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	200002a4 	.word	0x200002a4
 8001370:	20003ea4 	.word	0x20003ea4
 8001374:	20003eac 	.word	0x20003eac
 8001378:	20003eb4 	.word	0x20003eb4
 800137c:	20003eb0 	.word	0x20003eb0
 8001380:	20003eb8 	.word	0x20003eb8

08001384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800138c:	4b28      	ldr	r3, [pc, #160]	@ (8001430 <prvInsertBlockIntoFreeList+0xac>)
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	e002      	b.n	8001398 <prvInsertBlockIntoFreeList+0x14>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d8f7      	bhi.n	8001392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d108      	bne.n	80013c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	441a      	add	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d118      	bne.n	800140c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d00d      	beq.n	8001402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	441a      	add	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e008      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <prvInsertBlockIntoFreeList+0xb0>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e003      	b.n	8001414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d002      	beq.n	8001422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20003ea4 	.word	0x20003ea4
 8001434:	20003eac 	.word	0x20003eac

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_DMA_Init+0x98>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_DMA_Init+0x98>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	200b      	movs	r0, #11
 800147c:	f002 f9c8 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001480:	200b      	movs	r0, #11
 8001482:	f002 f9e1 	bl	8003848 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2105      	movs	r1, #5
 800148a:	2010      	movs	r0, #16
 800148c:	f002 f9c0 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001490:	2010      	movs	r0, #16
 8001492:	f002 f9d9 	bl	8003848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2039      	movs	r0, #57	@ 0x39
 800149c:	f002 f9b8 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014a0:	2039      	movs	r0, #57	@ 0x39
 80014a2:	f002 f9d1 	bl	8003848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2044      	movs	r0, #68	@ 0x44
 80014ac:	f002 f9b0 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80014b0:	2044      	movs	r0, #68	@ 0x44
 80014b2:	f002 f9c9 	bl	8003848 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	2045      	movs	r0, #69	@ 0x45
 80014bc:	f002 f9a8 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80014c0:	2045      	movs	r0, #69	@ 0x45
 80014c2:	f002 f9c1 	bl	8003848 <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014e2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014e8:	4904      	ldr	r1, [pc, #16]	@ (80014fc <cubemx_transport_open+0x28>)
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f004 fe42 	bl	8006174 <HAL_UART_Receive_DMA>
    return true;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20003ebc 	.word	0x20003ebc

08001500 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800150e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f004 fe54 	bl	80061be <HAL_UART_DMAStop>
    return true;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001534:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b20      	cmp	r3, #32
 8001540:	d11c      	bne.n	800157c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f004 fda2 	bl	8006094 <HAL_UART_Transmit_DMA>
 8001550:	4603      	mov	r3, r0
 8001552:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001554:	e002      	b.n	800155c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001556:	2001      	movs	r0, #1
 8001558:	f006 f8b3 	bl	80076c2 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800155c:	7cfb      	ldrb	r3, [r7, #19]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <cubemx_transport_write+0x4e>
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	d1f3      	bne.n	8001556 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <cubemx_transport_write+0x58>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	e002      	b.n	800157e <cubemx_transport_write+0x5e>
 8001578:	2300      	movs	r3, #0
 800157a:	e000      	b.n	800157e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800157c:	2300      	movs	r3, #0
    }
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800159c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a2:	b672      	cpsid	i
}
 80015a4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80015b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
}
 80015b8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f006 f87e 	bl	80076c2 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <cubemx_transport_read+0x9c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d103      	bne.n	80015da <cubemx_transport_read+0x52>
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbe3      	blt.n	80015a2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015de:	e011      	b.n	8001604 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	440b      	add	r3, r1
 80015ea:	4910      	ldr	r1, [pc, #64]	@ (800162c <cubemx_transport_read+0xa4>)
 80015ec:	5c8a      	ldrb	r2, [r1, r2]
 80015ee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <cubemx_transport_read+0xa0>)
 80015fc:	6013      	str	r3, [r2, #0]
        wrote++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3301      	adds	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <cubemx_transport_read+0xa0>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <cubemx_transport_read+0x9c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d003      	beq.n	8001618 <cubemx_transport_read+0x90>
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3e3      	bcc.n	80015e0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001618:	69bb      	ldr	r3, [r7, #24]
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200046c0 	.word	0x200046c0
 8001628:	200046bc 	.word	0x200046bc
 800162c:	20003ebc 	.word	0x20003ebc

08001630 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a07      	ldr	r2, [pc, #28]	@ (800165c <vApplicationGetIdleTaskMemory+0x2c>)
 8001640:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <vApplicationGetIdleTaskMemory+0x30>)
 8001646:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000769c 	.word	0x2000769c
 8001660:	2000773c 	.word	0x2000773c

08001664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b0b2      	sub	sp, #200	@ 0xc8
 8001668:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 400);
 800166a:	4b43      	ldr	r3, [pc, #268]	@ (8001778 <MX_FREERTOS_Init+0x114>)
 800166c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001670:	461d      	mov	r5, r3
 8001672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800167a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800167e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f005 ffd0 	bl	800762a <osThreadCreate>
 800168a:	4603      	mov	r3, r0
 800168c:	4a3b      	ldr	r2, [pc, #236]	@ (800177c <MX_FREERTOS_Init+0x118>)
 800168e:	6013      	str	r3, [r2, #0]

  /* definition and creation of rfidExecuteTask */
  osThreadDef(rfidExecuteTask, StartRfidExecuteTask, osPriorityNormal, 0, 128);
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MX_FREERTOS_Init+0x11c>)
 8001692:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8001696:	461d      	mov	r5, r3
 8001698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800169a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfidExecuteTaskHandle = osThreadCreate(osThread(rfidExecuteTask), NULL);
 80016a4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f005 ffbd 	bl	800762a <osThreadCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a34      	ldr	r2, [pc, #208]	@ (8001784 <MX_FREERTOS_Init+0x120>)
 80016b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tagNumTransmitT */
  osThreadDef(tagNumTransmitT, StartTagNumTransmitTask, osPriorityNormal, 0, 128);
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <MX_FREERTOS_Init+0x124>)
 80016b8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80016bc:	461d      	mov	r5, r3
 80016be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tagNumTransmitTHandle = osThreadCreate(osThread(tagNumTransmitT), NULL);
 80016ca:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f005 ffaa 	bl	800762a <osThreadCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a2c      	ldr	r2, [pc, #176]	@ (800178c <MX_FREERTOS_Init+0x128>)
 80016da:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, controlmotor, osPriorityLow, 0, 128);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <MX_FREERTOS_Init+0x12c>)
 80016de:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80016e2:	461d      	mov	r5, r3
 80016e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 80016f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f005 ff97 	bl	800762a <osThreadCreate>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <MX_FREERTOS_Init+0x130>)
 8001700:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitTask2 */
  osThreadDef(transmitTask2, StarttransmitTask2, osPriorityNormal, 0, 128);
 8001702:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <MX_FREERTOS_Init+0x134>)
 8001704:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001708:	461d      	mov	r5, r3
 800170a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitTask2Handle = osThreadCreate(osThread(transmitTask2), NULL);
 8001716:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f005 ff84 	bl	800762a <osThreadCreate>
 8001722:	4603      	mov	r3, r0
 8001724:	4a1d      	ldr	r2, [pc, #116]	@ (800179c <MX_FREERTOS_Init+0x138>)
 8001726:	6013      	str	r3, [r2, #0]

  /* definition and creation of RosTask */
  osThreadStaticDef(RosTask, StartRosTask, osPriorityAboveNormal, 0, 3000, RosTaskBuffer, &RosTaskControlBlock);
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_FREERTOS_Init+0x13c>)
 800172a:	f107 0420 	add.w	r4, r7, #32
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RosTaskHandle = osThreadCreate(osThread(RosTask), NULL);
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f005 ff71 	bl	800762a <osThreadCreate>
 8001748:	4603      	mov	r3, r0
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <MX_FREERTOS_Init+0x140>)
 800174c:	6013      	str	r3, [r2, #0]

  /* definition and creation of transePosition */
  osThreadDef(transePosition, StartTransePosition, osPriorityIdle, 0, 128);
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_FREERTOS_Init+0x144>)
 8001750:	1d3c      	adds	r4, r7, #4
 8001752:	461d      	mov	r5, r3
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800175c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transePositionHandle = osThreadCreate(osThread(transePosition), NULL);
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 ff60 	bl	800762a <osThreadCreate>
 800176a:	4603      	mov	r3, r0
 800176c:	4a0f      	ldr	r2, [pc, #60]	@ (80017ac <MX_FREERTOS_Init+0x148>)
 800176e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001770:	bf00      	nop
 8001772:	37c8      	adds	r7, #200	@ 0xc8
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	08018ed4 	.word	0x08018ed4
 800177c:	20004700 	.word	0x20004700
 8001780:	08018f00 	.word	0x08018f00
 8001784:	20004704 	.word	0x20004704
 8001788:	08018f2c 	.word	0x08018f2c
 800178c:	20004708 	.word	0x20004708
 8001790:	08018f54 	.word	0x08018f54
 8001794:	2000470c 	.word	0x2000470c
 8001798:	08018f80 	.word	0x08018f80
 800179c:	20004710 	.word	0x20004710
 80017a0:	08018fa4 	.word	0x08018fa4
 80017a4:	20004714 	.word	0x20004714
 80017a8:	08018fd0 	.word	0x08018fd0
 80017ac:	20007698 	.word	0x20007698

080017b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	read_rfid_number();
 80017b8:	f001 f99a 	bl	8002af0 <read_rfid_number>
	read_location();
 80017bc:	f001 fac2 	bl	8002d44 <read_location>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //LED turned off
 80017c0:	2200      	movs	r2, #0
 80017c2:	2120      	movs	r1, #32
 80017c4:	4808      	ldr	r0, [pc, #32]	@ (80017e8 <StartDefaultTask+0x38>)
 80017c6:	f002 fdfb 	bl	80043c0 <HAL_GPIO_WritePin>
//	read_command();
	if(HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_RESET){
 80017ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <StartDefaultTask+0x3c>)
 80017d0:	f002 fdde 	bl	8004390 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <StartDefaultTask+0x30>
		pub_status = 1;
 80017da:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <StartDefaultTask+0x40>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
	}
    osDelay(50);
 80017e0:	2032      	movs	r0, #50	@ 0x32
 80017e2:	f005 ff6e 	bl	80076c2 <osDelay>
	read_rfid_number();
 80017e6:	e7e7      	b.n	80017b8 <StartDefaultTask+0x8>
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020800 	.word	0x40020800
 80017f0:	200046e8 	.word	0x200046e8

080017f4 <StartRfidExecuteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRfidExecuteTask */
void StartRfidExecuteTask(void const * argument)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfidExecuteTask */
	  uint8_t read_tag_single_time[] = {0xBB, 0x00, 0x22, 0x00, 0x00, 0x22, 0x7E};
 80017fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <StartRfidExecuteTask+0x44>)
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001806:	6018      	str	r0, [r3, #0]
 8001808:	3304      	adds	r3, #4
 800180a:	8019      	strh	r1, [r3, #0]
 800180c:	3302      	adds	r3, #2
 800180e:	0c0a      	lsrs	r2, r1, #16
 8001810:	701a      	strb	r2, [r3, #0]
	  vTaskSuspend(rfidExecuteTaskHandle);
 8001812:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <StartRfidExecuteTask+0x48>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f006 fa8e 	bl	8007d38 <vTaskSuspend>
	  /* Infinite loop */
	  for(;;)
	  {
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 800181c:	f107 0108 	add.w	r1, r7, #8
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001824:	2207      	movs	r2, #7
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <StartRfidExecuteTask+0x4c>)
 8001828:	f004 fb84 	bl	8005f34 <HAL_UART_Transmit>

		//vTaskResume(defaultTaskHandle);
	    osDelay(300);
 800182c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001830:	f005 ff47 	bl	80076c2 <osDelay>
		HAL_UART_Transmit(&huart1, read_tag_single_time, sizeof(read_tag_single_time), HAL_MAX_DELAY);
 8001834:	bf00      	nop
 8001836:	e7f1      	b.n	800181c <StartRfidExecuteTask+0x28>
 8001838:	08018fec 	.word	0x08018fec
 800183c:	20004704 	.word	0x20004704
 8001840:	20008194 	.word	0x20008194

08001844 <StartTagNumTransmitTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTagNumTransmitTask */
void StartTagNumTransmitTask(void const * argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
//	  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
	event = osSignalWait(transmitSignal, 100);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	2264      	movs	r2, #100	@ 0x64
 8001852:	2101      	movs	r1, #1
 8001854:	4618      	mov	r0, r3
 8001856:	f005 ff89 	bl	800776c <osSignalWait>
	if(event.value.signals == transmitSignal){
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <StartTagNumTransmitTask+0x20>
		transmitData();
 8001860:	f001 f9a0 	bl	8002ba4 <transmitData>
		}
	osDelay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f005 ff2c 	bl	80076c2 <osDelay>
	event = osSignalWait(transmitSignal, 100);
 800186a:	e7ef      	b.n	800184c <StartTagNumTransmitTask+0x8>

0800186c <controlmotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlmotor */
void controlmotor(void const * argument)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlmotor */
  /* Infinite loop */
	vTaskSuspend(motorTaskHandle);
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <controlmotor+0x34>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fa5d 	bl	8007d38 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	  if(motor_status == 0){
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <controlmotor+0x38>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <controlmotor+0x20>
		  scan_motor_up();
 8001886:	f000 fd63 	bl	8002350 <scan_motor_up>
 800188a:	e005      	b.n	8001898 <controlmotor+0x2c>
	  }else if(motor_status == 1){
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <controlmotor+0x38>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <controlmotor+0x2c>
		  scan_motor_down();
 8001894:	f000 fd8e 	bl	80023b4 <scan_motor_down>
	  }
	  osDelay(100);
 8001898:	2064      	movs	r0, #100	@ 0x64
 800189a:	f005 ff12 	bl	80076c2 <osDelay>
	  if(motor_status == 0){
 800189e:	e7ee      	b.n	800187e <controlmotor+0x12>
 80018a0:	2000470c 	.word	0x2000470c
 80018a4:	200046e4 	.word	0x200046e4

080018a8 <StarttransmitTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarttransmitTask2 */
void StarttransmitTask2(void const * argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarttransmitTask2 */
	osEvent event;
  /* Infinite loop */
	  for(;;)
	  {
		  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 80018b0:	220c      	movs	r2, #12
 80018b2:	490a      	ldr	r1, [pc, #40]	@ (80018dc <StarttransmitTask2+0x34>)
 80018b4:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <StarttransmitTask2+0x38>)
 80018b6:	f004 fbc8 	bl	800604a <HAL_UART_Receive_IT>
		  event = osSignalWait(transmitSignal2, 100);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	2264      	movs	r2, #100	@ 0x64
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 ff52 	bl	800776c <osSignalWait>
		  if(event.value.signals == transmitSignal2){
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d101      	bne.n	80018d2 <StarttransmitTask2+0x2a>
			  transmitCommand();
 80018ce:	f001 fa85 	bl	8002ddc <transmitCommand>
		  }
		  osDelay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f005 fef5 	bl	80076c2 <osDelay>
		  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 80018d8:	e7ea      	b.n	80018b0 <StarttransmitTask2+0x8>
 80018da:	bf00      	nop
 80018dc:	200080e8 	.word	0x200080e8
 80018e0:	2000814c 	.word	0x2000814c

080018e4 <subscription_str_callback>:
#define ARRAY_LEN 200
#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}

void subscription_str_callback(const void * msgin)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b09c      	sub	sp, #112	@ 0x70
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  std_msgs__msg__String * msg = (std_msgs__msg__String *)msgin;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pub_str_msg = *msg;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <subscription_str_callback+0x54>)
 80018f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  char str[100];
  strcpy(str, msg->data.data);
 80018fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f015 fc28 	bl	801715a <strcpy>
  if(!strcmp(str,"motor_scan")){
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	490b      	ldr	r1, [pc, #44]	@ (800193c <subscription_str_callback+0x58>)
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fc7d 	bl	8000210 <strcmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <subscription_str_callback+0x4c>
	  vTaskResume(motorTaskHandle);
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <subscription_str_callback+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f006 facf 	bl	8007ec4 <vTaskResume>
	  vTaskResume(rfidExecuteTaskHandle);
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <subscription_str_callback+0x60>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f006 faca 	bl	8007ec4 <vTaskResume>
  }

}
 8001930:	bf00      	nop
 8001932:	3770      	adds	r7, #112	@ 0x70
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200046cc 	.word	0x200046cc
 800193c:	08018ff4 	.word	0x08018ff4
 8001940:	2000470c 	.word	0x2000470c
 8001944:	20004704 	.word	0x20004704

08001948 <StartRosTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRosTask */
void StartRosTask(void const * argument)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800194e:	af02      	add	r7, sp, #8
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001958:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartRosTask */
	  // micro-ROS configuration


	  char test_array[ARRAY_LEN];
	  memset(test_array,'z',ARRAY_LEN);
 800195a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800195e:	22c8      	movs	r2, #200	@ 0xc8
 8001960:	217a      	movs	r1, #122	@ 0x7a
 8001962:	4618      	mov	r0, r3
 8001964:	f015 fade 	bl	8016f24 <memset>

	  rmw_uros_set_custom_transport(
 8001968:	4b9d      	ldr	r3, [pc, #628]	@ (8001be0 <StartRosTask+0x298>)
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	4b9d      	ldr	r3, [pc, #628]	@ (8001be4 <StartRosTask+0x29c>)
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4b9d      	ldr	r3, [pc, #628]	@ (8001be8 <StartRosTask+0x2a0>)
 8001972:	4a9e      	ldr	r2, [pc, #632]	@ (8001bec <StartRosTask+0x2a4>)
 8001974:	499e      	ldr	r1, [pc, #632]	@ (8001bf0 <StartRosTask+0x2a8>)
 8001976:	2001      	movs	r0, #1
 8001978:	f008 fdd6 	bl	800a528 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800197c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001980:	4618      	mov	r0, r3
 8001982:	f008 fd03 	bl	800a38c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001986:	4b9b      	ldr	r3, [pc, #620]	@ (8001bf4 <StartRosTask+0x2ac>)
 8001988:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800198c:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf8 <StartRosTask+0x2b0>)
 800198e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001992:	4b9a      	ldr	r3, [pc, #616]	@ (8001bfc <StartRosTask+0x2b4>)
 8001994:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001998:	4b99      	ldr	r3, [pc, #612]	@ (8001c00 <StartRosTask+0x2b8>)
 800199a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800199e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019a2:	4618      	mov	r0, r3
 80019a4:	f008 fd00 	bl	800a3a8 <rcutils_set_default_allocator>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f083 0301 	eor.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <StartRosTask+0x76>
	    printf("Error on default allocators (line %d)\n", __LINE__);
 80019b4:	f240 1179 	movw	r1, #377	@ 0x179
 80019b8:	4892      	ldr	r0, [pc, #584]	@ (8001c04 <StartRosTask+0x2bc>)
 80019ba:	f015 f913 	bl	8016be4 <iprintf>
	  std_msgs__msg__String sub_str_msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 74a8 	sub.w	r4, r3, #336	@ 0x150
 80019c6:	463b      	mov	r3, r7
 80019c8:	4618      	mov	r0, r3
 80019ca:	f008 fd0b 	bl	800a3e4 <rcutils_get_default_allocator>
 80019ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d2:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80019d6:	461d      	mov	r5, r3
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	6023      	str	r3, [r4, #0]

	  // create init_options
	  RCCHECK(rclc_support_init(&support, 0, NULL, &allocator));
 80019e0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80019e4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	f008 fbd8 	bl	800a1a0 <rclc_support_init>
 80019f0:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
 80019f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <StartRosTask+0xc4>
 80019fc:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8001a00:	f240 1185 	movw	r1, #389	@ 0x185
 8001a04:	4880      	ldr	r0, [pc, #512]	@ (8001c08 <StartRosTask+0x2c0>)
 8001a06:	f015 f8ed 	bl	8016be4 <iprintf>
 8001a0a:	e0e0      	b.n	8001bce <StartRosTask+0x286>

	  // create node
	  RCCHECK(rclc_node_init_default(&node, "f446re_node", "", &support));
 8001a0c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a10:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001a14:	4a7d      	ldr	r2, [pc, #500]	@ (8001c0c <StartRosTask+0x2c4>)
 8001a16:	497e      	ldr	r1, [pc, #504]	@ (8001c10 <StartRosTask+0x2c8>)
 8001a18:	f008 fc0c 	bl	800a234 <rclc_node_init_default>
 8001a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d007      	beq.n	8001a38 <StartRosTask+0xf0>
 8001a28:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8001a2c:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8001a30:	4875      	ldr	r0, [pc, #468]	@ (8001c08 <StartRosTask+0x2c0>)
 8001a32:	f015 f8d7 	bl	8016be4 <iprintf>
 8001a36:	e0ca      	b.n	8001bce <StartRosTask+0x286>

	  // create publisher
	  RCCHECK(rclc_publisher_init_best_effort(
 8001a38:	f009 faa2 	bl	800af80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a42:	4b74      	ldr	r3, [pc, #464]	@ (8001c14 <StartRosTask+0x2cc>)
 8001a44:	4874      	ldr	r0, [pc, #464]	@ (8001c18 <StartRosTask+0x2d0>)
 8001a46:	f008 fc31 	bl	800a2ac <rclc_publisher_init_best_effort>
 8001a4a:	f8c7 01f4 	str.w	r0, [r7, #500]	@ 0x1f4
 8001a4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <StartRosTask+0x11e>
 8001a56:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8001a5a:	f240 118b 	movw	r1, #395	@ 0x18b
 8001a5e:	486a      	ldr	r0, [pc, #424]	@ (8001c08 <StartRosTask+0x2c0>)
 8001a60:	f015 f8c0 	bl	8016be4 <iprintf>
 8001a64:	e0b3      	b.n	8001bce <StartRosTask+0x286>
	    &publisher_string_scan,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_status"));

	  RCCHECK(rclc_publisher_init_best_effort(
 8001a66:	f009 fa8b 	bl	800af80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a70:	4b6a      	ldr	r3, [pc, #424]	@ (8001c1c <StartRosTask+0x2d4>)
 8001a72:	486b      	ldr	r0, [pc, #428]	@ (8001c20 <StartRosTask+0x2d8>)
 8001a74:	f008 fc1a 	bl	800a2ac <rclc_publisher_init_best_effort>
 8001a78:	f8c7 01f0 	str.w	r0, [r7, #496]	@ 0x1f0
 8001a7c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <StartRosTask+0x14c>
 8001a84:	f8d7 21f0 	ldr.w	r2, [r7, #496]	@ 0x1f0
 8001a88:	f240 1191 	movw	r1, #401	@ 0x191
 8001a8c:	485e      	ldr	r0, [pc, #376]	@ (8001c08 <StartRosTask+0x2c0>)
 8001a8e:	f015 f8a9 	bl	8016be4 <iprintf>
 8001a92:	e09c      	b.n	8001bce <StartRosTask+0x286>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_nav_pos"));

	  // create subscriber
	  RCCHECK(rclc_subscription_init_default(
 8001a94:	f009 fa74 	bl	800af80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001a9e:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 8001aa2:	4b60      	ldr	r3, [pc, #384]	@ (8001c24 <StartRosTask+0x2dc>)
 8001aa4:	f008 fc36 	bl	800a314 <rclc_subscription_init_default>
 8001aa8:	f8c7 01ec 	str.w	r0, [r7, #492]	@ 0x1ec
 8001aac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <StartRosTask+0x17c>
 8001ab4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	@ 0x1ec
 8001ab8:	f44f 71cc 	mov.w	r1, #408	@ 0x198
 8001abc:	4852      	ldr	r0, [pc, #328]	@ (8001c08 <StartRosTask+0x2c0>)
 8001abe:	f015 f891 	bl	8016be4 <iprintf>
 8001ac2:	e084      	b.n	8001bce <StartRosTask+0x286>
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	    "/f446re_scan_oper"));

	  // create executor
	  rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f008 f893 	bl	8009bf8 <rclc_executor_get_zero_initialized_executor>
	  RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8001ad2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ad6:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001ada:	f107 0020 	add.w	r0, r7, #32
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f008 f896 	bl	8009c10 <rclc_executor_init>
 8001ae4:	f8c7 01e8 	str.w	r0, [r7, #488]	@ 0x1e8
 8001ae8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d007      	beq.n	8001b00 <StartRosTask+0x1b8>
 8001af0:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8001af4:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001af8:	4843      	ldr	r0, [pc, #268]	@ (8001c08 <StartRosTask+0x2c0>)
 8001afa:	f015 f873 	bl	8016be4 <iprintf>
 8001afe:	e066      	b.n	8001bce <StartRosTask+0x286>
	  RCCHECK(rclc_executor_add_subscription(&executor, &subscriber_oper, &sub_str_msg, &subscription_str_callback, ON_NEW_DATA));
 8001b00:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8001b04:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8001b08:	f107 0020 	add.w	r0, r7, #32
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <StartRosTask+0x2e0>)
 8001b12:	f008 f8ed 	bl	8009cf0 <rclc_executor_add_subscription>
 8001b16:	f8c7 01e4 	str.w	r0, [r7, #484]	@ 0x1e4
 8001b1a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <StartRosTask+0x1ea>
 8001b22:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 8001b26:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001b2a:	4837      	ldr	r0, [pc, #220]	@ (8001c08 <StartRosTask+0x2c0>)
 8001b2c:	f015 f85a 	bl	8016be4 <iprintf>
 8001b30:	e04d      	b.n	8001bce <StartRosTask+0x286>

	  // initialize message memory
	  pub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b32:	20c8      	movs	r0, #200	@ 0xc8
 8001b34:	f014 f8c8 	bl	8015cc8 <malloc>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <StartRosTask+0x2e4>)
 8001b3e:	601a      	str	r2, [r3, #0]
	  pub_str_msg.data.size = 0;
 8001b40:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <StartRosTask+0x2e4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
	  pub_str_msg.data.capacity = ARRAY_LEN;
 8001b46:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <StartRosTask+0x2e4>)
 8001b48:	22c8      	movs	r2, #200	@ 0xc8
 8001b4a:	609a      	str	r2, [r3, #8]

	  pub_str_pos.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b4c:	20c8      	movs	r0, #200	@ 0xc8
 8001b4e:	f014 f8bb 	bl	8015cc8 <malloc>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <StartRosTask+0x2e8>)
 8001b58:	601a      	str	r2, [r3, #0]
	  pub_str_pos.data.size = 0;
 8001b5a:	4b35      	ldr	r3, [pc, #212]	@ (8001c30 <StartRosTask+0x2e8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
	  pub_str_pos.data.capacity = ARRAY_LEN;
 8001b60:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <StartRosTask+0x2e8>)
 8001b62:	22c8      	movs	r2, #200	@ 0xc8
 8001b64:	609a      	str	r2, [r3, #8]

	  sub_str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8001b66:	20c8      	movs	r0, #200	@ 0xc8
 8001b68:	f014 f8ae 	bl	8015cc8 <malloc>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b78:	601a      	str	r2, [r3, #0]
	  sub_str_msg.data.size = 0;
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
	  sub_str_msg.data.capacity = ARRAY_LEN;
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b8e:	22c8      	movs	r2, #200	@ 0xc8
 8001b90:	609a      	str	r2, [r3, #8]
	  /* Infinite loop */

  for(;;)
  {

	  if(pub_nav){
 8001b92:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <StartRosTask+0x2ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <StartRosTask+0x25c>
		  Publisher_pos();
 8001b9a:	f001 fce9 	bl	8003570 <Publisher_pos>
		  pub_nav = 0;
 8001b9e:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <StartRosTask+0x2ec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
	  }
	  if(pub_status){
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <StartRosTask+0x2f0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <StartRosTask+0x26e>
		  Publisher_state();
 8001bac:	f001 fcb6 	bl	800351c <Publisher_state>
		  pub_status = 0;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <StartRosTask+0x2f0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
	  }
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001bb6:	f107 0120 	add.w	r1, r7, #32
 8001bba:	a307      	add	r3, pc, #28	@ (adr r3, 8001bd8 <StartRosTask+0x290>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	4608      	mov	r0, r1
 8001bc2:	f008 fab5 	bl	800a130 <rclc_executor_spin_some>
	  osDelay(100);
 8001bc6:	2064      	movs	r0, #100	@ 0x64
 8001bc8:	f005 fd7b 	bl	80076c2 <osDelay>
	  if(pub_nav){
 8001bcc:	e7e1      	b.n	8001b92 <StartRosTask+0x24a>

  }

  /* USER CODE END StartRosTask */
}
 8001bce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	05f5e100 	.word	0x05f5e100
 8001bdc:	00000000 	.word	0x00000000
 8001be0:	08001589 	.word	0x08001589
 8001be4:	08001521 	.word	0x08001521
 8001be8:	08001501 	.word	0x08001501
 8001bec:	080014d5 	.word	0x080014d5
 8001bf0:	2000826c 	.word	0x2000826c
 8001bf4:	08002085 	.word	0x08002085
 8001bf8:	080020c9 	.word	0x080020c9
 8001bfc:	08002101 	.word	0x08002101
 8001c00:	0800216d 	.word	0x0800216d
 8001c04:	08019000 	.word	0x08019000
 8001c08:	08019028 	.word	0x08019028
 8001c0c:	08019054 	.word	0x08019054
 8001c10:	08019058 	.word	0x08019058
 8001c14:	08019064 	.word	0x08019064
 8001c18:	200046c4 	.word	0x200046c4
 8001c1c:	08019078 	.word	0x08019078
 8001c20:	200046c8 	.word	0x200046c8
 8001c24:	08019088 	.word	0x08019088
 8001c28:	080018e5 	.word	0x080018e5
 8001c2c:	200046cc 	.word	0x200046cc
 8001c30:	200046d8 	.word	0x200046d8
 8001c34:	200046ec 	.word	0x200046ec
 8001c38:	200046e8 	.word	0x200046e8

08001c3c <StartTransePosition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransePosition */
void StartTransePosition(void const * argument)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransePosition */
  /* Infinite loop */
	osEvent event;
  for(;;)
  {
	  event = osSignalWait(positionSignal, 100);
 8001c44:	f107 0308 	add.w	r3, r7, #8
 8001c48:	2264      	movs	r2, #100	@ 0x64
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fd8d 	bl	800776c <osSignalWait>
	  	if(event.value.signals == positionSignal){
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d132      	bne.n	8001cbe <StartTransePosition+0x82>
			HAL_UART_Transmit(&huart2, BLE_RX_BUF, 12, 1000);
 8001c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5c:	220c      	movs	r2, #12
 8001c5e:	491a      	ldr	r1, [pc, #104]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001c60:	481a      	ldr	r0, [pc, #104]	@ (8001ccc <StartTransePosition+0x90>)
 8001c62:	f004 f967 	bl	8005f34 <HAL_UART_Transmit>
			if(BLE_RX_BUF[0] == 'z'){
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b7a      	cmp	r3, #122	@ 0x7a
 8001c6c:	d01d      	beq.n	8001caa <StartTransePosition+0x6e>
				//정비시작
				int a;
			}
			else{
				//book location move
				for(int i=0;i<6;i++){
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e014      	b.n	8001c9e <StartTransePosition+0x62>
					xChar[i] = BLE_RX_BUF[i];
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4413      	add	r3, r2
 8001c7a:	7819      	ldrb	r1, [r3, #0]
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <StartTransePosition+0x94>)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4413      	add	r3, r2
 8001c82:	460a      	mov	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
					yChar[i] = BLE_RX_BUF[i+6];
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3306      	adds	r3, #6
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001c8c:	5cd1      	ldrb	r1, [r2, r3]
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <StartTransePosition+0x98>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4413      	add	r3, r2
 8001c94:	460a      	mov	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<6;i++){
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	dde7      	ble.n	8001c74 <StartTransePosition+0x38>
				}
				pub_nav = 1;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <StartTransePosition+0x9c>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
			}

			HAL_UART_Receive_IT(&huart5, BLE_RX_BUF,12);
 8001caa:	220c      	movs	r2, #12
 8001cac:	4906      	ldr	r1, [pc, #24]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001cae:	480b      	ldr	r0, [pc, #44]	@ (8001cdc <StartTransePosition+0xa0>)
 8001cb0:	f004 f9cb 	bl	800604a <HAL_UART_Receive_IT>

			memset(BLE_RX_BUF,0,sizeof(BLE_RX_BUF));
 8001cb4:	2264      	movs	r2, #100	@ 0x64
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4803      	ldr	r0, [pc, #12]	@ (8001cc8 <StartTransePosition+0x8c>)
 8001cba:	f015 f933 	bl	8016f24 <memset>
	  	}

    osDelay(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f005 fcff 	bl	80076c2 <osDelay>
	  event = osSignalWait(positionSignal, 100);
 8001cc4:	e7be      	b.n	8001c44 <StartTransePosition+0x8>
 8001cc6:	bf00      	nop
 8001cc8:	200080e8 	.word	0x200080e8
 8001ccc:	200081dc 	.word	0x200081dc
 8001cd0:	200046f0 	.word	0x200046f0
 8001cd4:	200046f8 	.word	0x200046f8
 8001cd8:	200046ec 	.word	0x200046ec
 8001cdc:	2000814c 	.word	0x2000814c

08001ce0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	4b49      	ldr	r3, [pc, #292]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a48      	ldr	r2, [pc, #288]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b46      	ldr	r3, [pc, #280]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b42      	ldr	r3, [pc, #264]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a41      	ldr	r2, [pc, #260]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b3b      	ldr	r3, [pc, #236]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a3a      	ldr	r2, [pc, #232]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a33      	ldr	r2, [pc, #204]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b2a      	ldr	r3, [pc, #168]	@ (8001e20 <MX_GPIO_Init+0x140>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2120      	movs	r1, #32
 8001d86:	4827      	ldr	r0, [pc, #156]	@ (8001e24 <MX_GPIO_Init+0x144>)
 8001d88:	f002 fb1a 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direction0_Pin|Direction1_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001d92:	4825      	ldr	r0, [pc, #148]	@ (8001e28 <MX_GPIO_Init+0x148>)
 8001d94:	f002 fb14 	bl	80043c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8001d98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	481e      	ldr	r0, [pc, #120]	@ (8001e28 <MX_GPIO_Init+0x148>)
 8001dae:	f002 f95b 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001db2:	2320      	movs	r3, #32
 8001db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4816      	ldr	r0, [pc, #88]	@ (8001e24 <MX_GPIO_Init+0x144>)
 8001dca:	f002 f94d 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Direction0_Pin|Direction1_Pin;
 8001dce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4810      	ldr	r0, [pc, #64]	@ (8001e28 <MX_GPIO_Init+0x148>)
 8001de8:	f002 f93e 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Limit_switch_up_Pin|Limit_switch_down_Pin;
 8001dec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001df2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <MX_GPIO_Init+0x14c>)
 8001e04:	f002 f930 	bl	8004068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2105      	movs	r1, #5
 8001e0c:	2017      	movs	r0, #23
 8001e0e:	f001 fcff 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e12:	2017      	movs	r0, #23
 8001e14:	f001 fd18 	bl	8003848 <HAL_NVIC_EnableIRQ>

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	@ 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020800 	.word	0x40020800
 8001e2c:	40020400 	.word	0x40020400

08001e30 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
	static uint32_t before_tick1 = 0;
	static uint32_t before_tick2 = 0;

	if(GPIO_Pin == Limit_switch_up_Pin){
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e40:	d124      	bne.n	8001e8c <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GetTick() - before_tick1 >= 300){
 8001e42:	f001 fc21 	bl	8003688 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_GPIO_EXTI_Callback+0xac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001e52:	d33e      	bcc.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
			if(!limit_switch_up){
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d13a      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //LED turned on
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2120      	movs	r1, #32
 8001e60:	4820      	ldr	r0, [pc, #128]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001e62:	f002 faad 	bl	80043c0 <HAL_GPIO_WritePin>
				before_tick1 = HAL_GetTick();
 8001e66:	f001 fc0f 	bl	8003688 <HAL_GetTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001edc <HAL_GPIO_EXTI_Callback+0xac>)
 8001e6e:	6013      	str	r3, [r2, #0]
				TIM2->CCR4 = 0;
 8001e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40
				change_motor_direction(2);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f000 facd 	bl	8002418 <change_motor_direction>
				limit_switch_up = 1;
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
				limit_switch_down = 0;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
				limit_switch_up = 0;
			}

		}
	}
}
 8001e8a:	e022      	b.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
	}else if(GPIO_Pin == Limit_switch_down_Pin){
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e92:	d11e      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
		if(HAL_GetTick() - before_tick2 >= 300){
 8001e94:	f001 fbf8 	bl	8003688 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001ea4:	d315      	bcc.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
			if(!limit_switch_down){
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d111      	bne.n	8001ed2 <HAL_GPIO_EXTI_Callback+0xa2>
				before_tick2 = HAL_GetTick();
 8001eae:	f001 fbeb 	bl	8003688 <HAL_GetTick>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <HAL_GPIO_EXTI_Callback+0xbc>)
 8001eb6:	6013      	str	r3, [r2, #0]
				TIM2->CCR4 = 0;
 8001eb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
				change_motor_direction(2);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f000 faa9 	bl	8002418 <change_motor_direction>
				limit_switch_down = 1;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
				limit_switch_up = 0;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000793c 	.word	0x2000793c
 8001ee0:	2000794c 	.word	0x2000794c
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	20007950 	.word	0x20007950
 8001eec:	20007940 	.word	0x20007940

08001ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef4:	f001 fb92 	bl	800361c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef8:	f000 f83a 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efc:	f7ff fef0 	bl	8001ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f00:	f7ff fa9a 	bl	8001438 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f04:	f000 ffec 	bl	8002ee0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f08:	f000 ffc0 	bl	8002e8c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f0c:	f001 f812 	bl	8002f34 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001f10:	f001 f83a 	bl	8002f88 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001f14:	f000 fcc6 	bl	80028a4 <MX_TIM2_Init>
  MX_UART5_Init();
 8001f18:	f000 ff8e 	bl	8002e38 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  uart_init();
 8001f1c:	f000 fd72 	bl	8002a04 <uart_init>
//  uart2_init();
  HAL_UART_Receive_IT(&huart5, BLE_RX_BUF, 12);
 8001f20:	220c      	movs	r2, #12
 8001f22:	490f      	ldr	r1, [pc, #60]	@ (8001f60 <main+0x70>)
 8001f24:	480f      	ldr	r0, [pc, #60]	@ (8001f64 <main+0x74>)
 8001f26:	f004 f890 	bl	800604a <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f2a:	210c      	movs	r1, #12
 8001f2c:	480e      	ldr	r0, [pc, #56]	@ (8001f68 <main+0x78>)
 8001f2e:	f003 f9fd 	bl	800532c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	480c      	ldr	r0, [pc, #48]	@ (8001f6c <main+0x7c>)
 8001f3a:	f002 fa41 	bl	80043c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f44:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <main+0x7c>)
 8001f46:	f002 fa3b 	bl	80043c0 <HAL_GPIO_WritePin>
  TIM2->CCR4 = 0;
 8001f4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	@ 0x40

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f52:	f7ff fb87 	bl	8001664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f56:	f005 fb61 	bl	800761c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <main+0x6a>
 8001f5e:	bf00      	nop
 8001f60:	200080e8 	.word	0x200080e8
 8001f64:	2000814c 	.word	0x2000814c
 8001f68:	200079a4 	.word	0x200079a4
 8001f6c:	40020800 	.word	0x40020800

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	@ 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	2234      	movs	r2, #52	@ 0x34
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f014 ffd0 	bl	8016f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 0308 	add.w	r3, r7, #8
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <SystemClock_Config+0xdc>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <SystemClock_Config+0xdc>)
 8001f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <SystemClock_Config+0xdc>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <SystemClock_Config+0xe0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <SystemClock_Config+0xe0>)
 8001fba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <SystemClock_Config+0xe0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001fe4:	23b4      	movs	r3, #180	@ 0xb4
 8001fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fddf 	bl	8004bbc <HAL_RCC_OscConfig>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002004:	f000 f838 	bl	8002078 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002008:	f002 fa0c 	bl	8004424 <HAL_PWREx_EnableOverDrive>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002012:	f000 f831 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002022:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800202c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	2105      	movs	r1, #5
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fa45 	bl	80044c4 <HAL_RCC_ClockConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002040:	f000 f81a 	bl	8002078 <Error_Handler>
  }
}
 8002044:	bf00      	nop
 8002046:	3750      	adds	r7, #80	@ 0x50
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d101      	bne.n	800206a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002066:	f001 fafb 	bl	8003660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40000800 	.word	0x40000800

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <Error_Handler+0x8>

08002084 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <microros_allocate+0x3c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4413      	add	r3, r2
 8002098:	461a      	mov	r2, r3
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <microros_allocate+0x3c>)
 800209c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <microros_allocate+0x40>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <microros_allocate+0x40>)
 80020ac:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe ff72 	bl	8000f98 <pvPortMallocMicroROS>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20007944 	.word	0x20007944
 80020c4:	20007948 	.word	0x20007948

080020c8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00c      	beq.n	80020f2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff f881 	bl	80011e0 <getBlockSize>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a06      	ldr	r2, [pc, #24]	@ (80020fc <microros_deallocate+0x34>)
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <microros_deallocate+0x34>)
 80020ea:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff f81b 	bl	8001128 <vPortFreeMicroROS>
  }
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20007948 	.word	0x20007948

08002100 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800210c:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <microros_reallocate+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4413      	add	r3, r2
 8002116:	461a      	mov	r2, r3
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <microros_reallocate+0x64>)
 800211a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <microros_reallocate+0x68>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4413      	add	r3, r2
 8002126:	461a      	mov	r2, r3
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <microros_reallocate+0x68>)
 800212a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d104      	bne.n	800213c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002132:	68b8      	ldr	r0, [r7, #8]
 8002134:	f7fe ff30 	bl	8000f98 <pvPortMallocMicroROS>
 8002138:	4603      	mov	r3, r0
 800213a:	e00e      	b.n	800215a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff f84f 	bl	80011e0 <getBlockSize>
 8002142:	4603      	mov	r3, r0
 8002144:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <microros_reallocate+0x68>)
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <microros_reallocate+0x68>)
 800214e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff f862 	bl	800121c <pvPortReallocMicroROS>
 8002158:	4603      	mov	r3, r0
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20007944 	.word	0x20007944
 8002168:	20007948 	.word	0x20007948

0800216c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	fb02 f303 	mul.w	r3, r2, r3
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <microros_zero_allocate+0x48>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	4413      	add	r3, r2
 8002186:	461a      	mov	r2, r3
 8002188:	4b0a      	ldr	r3, [pc, #40]	@ (80021b4 <microros_zero_allocate+0x48>)
 800218a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	fb02 f303 	mul.w	r3, r2, r3
 8002194:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <microros_zero_allocate+0x4c>)
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4413      	add	r3, r2
 800219a:	461a      	mov	r2, r3
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <microros_zero_allocate+0x4c>)
 800219e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff f867 	bl	8001276 <pvPortCallocMicroROS>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20007944 	.word	0x20007944
 80021b8:	20007948 	.word	0x20007948
 80021bc:	00000000 	.word	0x00000000

080021c0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80021c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80021d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d6:	a320      	add	r3, pc, #128	@ (adr r3, 8002258 <UTILS_NanosecondsToTimespec+0x98>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fd14 	bl	8000c08 <__aeabi_ldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80021ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8002258 <UTILS_NanosecondsToTimespec+0x98>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fd08 	bl	8000c08 <__aeabi_ldivmod>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da20      	bge.n	8002246 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a11      	ldr	r2, [pc, #68]	@ (8002250 <UTILS_NanosecondsToTimespec+0x90>)
 800220a:	fb82 1203 	smull	r1, r2, r2, r3
 800220e:	1712      	asrs	r2, r2, #28
 8002210:	17db      	asrs	r3, r3, #31
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	6979      	ldr	r1, [r7, #20]
 8002220:	17c8      	asrs	r0, r1, #31
 8002222:	460c      	mov	r4, r1
 8002224:	4605      	mov	r5, r0
 8002226:	ebb2 0804 	subs.w	r8, r2, r4
 800222a:	eb63 0905 	sbc.w	r9, r3, r5
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4906      	ldr	r1, [pc, #24]	@ (8002254 <UTILS_NanosecondsToTimespec+0x94>)
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	441a      	add	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
    }
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002250:	44b82fa1 	.word	0x44b82fa1
 8002254:	3b9aca00 	.word	0x3b9aca00
 8002258:	3b9aca00 	.word	0x3b9aca00
 800225c:	00000000 	.word	0x00000000

08002260 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002264:	b08e      	sub	sp, #56	@ 0x38
 8002266:	af00      	add	r7, sp, #0
 8002268:	6278      	str	r0, [r7, #36]	@ 0x24
 800226a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800226c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002270:	2300      	movs	r3, #0
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	f04f 0300 	mov.w	r3, #0
 800227e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002286:	4618      	mov	r0, r3
 8002288:	f006 f8ae 	bl	80083e8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800228c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228e:	17da      	asrs	r2, r3, #31
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	61fa      	str	r2, [r7, #28]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	69b9      	ldr	r1, [r7, #24]
 800229e:	000b      	movs	r3, r1
 80022a0:	2200      	movs	r2, #0
 80022a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80022a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022a8:	2200      	movs	r2, #0
 80022aa:	461c      	mov	r4, r3
 80022ac:	4615      	mov	r5, r2
 80022ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022b2:	1911      	adds	r1, r2, r4
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	416b      	adcs	r3, r5
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022be:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80022c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	f04f 0500 	mov.w	r5, #0
 80022d2:	015d      	lsls	r5, r3, #5
 80022d4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80022d8:	0154      	lsls	r4, r2, #5
 80022da:	4622      	mov	r2, r4
 80022dc:	462b      	mov	r3, r5
 80022de:	ebb2 0800 	subs.w	r8, r2, r0
 80022e2:	eb63 0901 	sbc.w	r9, r3, r1
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80022f2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80022f6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80022fa:	4690      	mov	r8, r2
 80022fc:	4699      	mov	r9, r3
 80022fe:	eb18 0a00 	adds.w	sl, r8, r0
 8002302:	eb49 0b01 	adc.w	fp, r9, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002312:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002316:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800231a:	ebb2 040a 	subs.w	r4, r2, sl
 800231e:	603c      	str	r4, [r7, #0]
 8002320:	eb63 030b 	sbc.w	r3, r3, fp
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232a:	4623      	mov	r3, r4
 800232c:	181b      	adds	r3, r3, r0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	462b      	mov	r3, r5
 8002332:	eb41 0303 	adc.w	r3, r1, r3
 8002336:	617b      	str	r3, [r7, #20]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800233e:	f7ff ff3f 	bl	80021c0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002342:	2300      	movs	r3, #0
 8002344:	4618      	mov	r0, r3
 8002346:	3738      	adds	r7, #56	@ 0x38
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002350 <scan_motor_up>:
extern int motor_status;
extern int pub_status;
extern osThreadId motorTaskHandle;
extern osThreadId rfidExecuteTaskHandle;

void scan_motor_up(){
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	if(limit_switch_up){
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <scan_motor_up+0x50>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d017      	beq.n	800238c <scan_motor_up+0x3c>
		TIM2->CCR4 = 0;
 800235c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 1;
 8002364:	4b0f      	ldr	r3, [pc, #60]	@ (80023a4 <scan_motor_up+0x54>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
		limit_switch_up = 0;
 800236a:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <scan_motor_up+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
		pub_status = 1;
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <scan_motor_up+0x58>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
		vTaskSuspend(rfidExecuteTaskHandle);
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <scan_motor_up+0x5c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f005 fcdc 	bl	8007d38 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <scan_motor_up+0x60>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f005 fcd7 	bl	8007d38 <vTaskSuspend>
	}else{
		change_motor_direction(1);
		TIM2->CCR4 = 550;
	}
}
 800238a:	e007      	b.n	800239c <scan_motor_up+0x4c>
		change_motor_direction(1);
 800238c:	2001      	movs	r0, #1
 800238e:	f000 f843 	bl	8002418 <change_motor_direction>
		TIM2->CCR4 = 550;
 8002392:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002396:	f240 2226 	movw	r2, #550	@ 0x226
 800239a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000794c 	.word	0x2000794c
 80023a4:	200046e4 	.word	0x200046e4
 80023a8:	200046e8 	.word	0x200046e8
 80023ac:	20004704 	.word	0x20004704
 80023b0:	2000470c 	.word	0x2000470c

080023b4 <scan_motor_down>:

void scan_motor_down(){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	if(limit_switch_down){
 80023b8:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <scan_motor_down+0x50>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <scan_motor_down+0x3c>
		TIM2->CCR4 = 0;
 80023c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
		motor_status = 0;
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <scan_motor_down+0x54>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
		limit_switch_down = 0;
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <scan_motor_down+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
		pub_status = 1;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	@ (800240c <scan_motor_down+0x58>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
		vTaskSuspend(rfidExecuteTaskHandle);
 80023da:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <scan_motor_down+0x5c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fcaa 	bl	8007d38 <vTaskSuspend>
		vTaskSuspend(motorTaskHandle);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <scan_motor_down+0x60>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f005 fca5 	bl	8007d38 <vTaskSuspend>
	}else{
		change_motor_direction(0);
		TIM2->CCR4 = 300;
	}
}
 80023ee:	e007      	b.n	8002400 <scan_motor_down+0x4c>
		change_motor_direction(0);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f000 f811 	bl	8002418 <change_motor_direction>
		TIM2->CCR4 = 300;
 80023f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20007950 	.word	0x20007950
 8002408:	200046e4 	.word	0x200046e4
 800240c:	200046e8 	.word	0x200046e8
 8002410:	20004704 	.word	0x20004704
 8002414:	2000470c 	.word	0x2000470c

08002418 <change_motor_direction>:

/* 1:반시계 0:시계*/
void change_motor_direction(int direction){
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if(direction == 1){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d10c      	bne.n	8002440 <change_motor_direction+0x28>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800242c:	4816      	ldr	r0, [pc, #88]	@ (8002488 <change_motor_direction+0x70>)
 800242e:	f001 ffc7 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002438:	4813      	ldr	r0, [pc, #76]	@ (8002488 <change_motor_direction+0x70>)
 800243a:	f001 ffc1 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
	}else if(direction == 2){
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
	}
}
 800243e:	e01e      	b.n	800247e <change_motor_direction+0x66>
	}else if(direction == 0){
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <change_motor_direction+0x48>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800244c:	480e      	ldr	r0, [pc, #56]	@ (8002488 <change_motor_direction+0x70>)
 800244e:	f001 ffb7 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002458:	480b      	ldr	r0, [pc, #44]	@ (8002488 <change_motor_direction+0x70>)
 800245a:	f001 ffb1 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800245e:	e00e      	b.n	800247e <change_motor_direction+0x66>
	}else if(direction == 2){
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d10b      	bne.n	800247e <change_motor_direction+0x66>
		HAL_GPIO_WritePin(Direction0_GPIO_Port, Direction0_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800246c:	4806      	ldr	r0, [pc, #24]	@ (8002488 <change_motor_direction+0x70>)
 800246e:	f001 ffa7 	bl	80043c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Direction1_GPIO_Port, Direction1_Pin, GPIO_PIN_RESET);
 8002472:	2200      	movs	r2, #0
 8002474:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002478:	4803      	ldr	r0, [pc, #12]	@ (8002488 <change_motor_direction+0x70>)
 800247a:	f001 ffa1 	bl	80043c0 <HAL_GPIO_WritePin>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40020800 	.word	0x40020800

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_MspInit+0x54>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249a:	4a11      	ldr	r2, [pc, #68]	@ (80024e0 <HAL_MspInit+0x54>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_MspInit+0x54>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <HAL_MspInit+0x54>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <HAL_MspInit+0x54>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <HAL_MspInit+0x54>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	210f      	movs	r1, #15
 80024ce:	f06f 0001 	mvn.w	r0, #1
 80024d2:	f001 f99d 	bl	8003810 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	@ 0x38
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_InitTick+0xe4>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	4a32      	ldr	r2, [pc, #200]	@ (80025c8 <HAL_InitTick+0xe4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6413      	str	r3, [r2, #64]	@ 0x40
 8002504:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <HAL_InitTick+0xe4>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002510:	f107 0210 	add.w	r2, r7, #16
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f002 f8ec 	bl	80046f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800252a:	f002 f8bd 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 800252e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002530:	e004      	b.n	800253c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002532:	f002 f8b9 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8002536:	4603      	mov	r3, r0
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800253c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800253e:	4a23      	ldr	r2, [pc, #140]	@ (80025cc <HAL_InitTick+0xe8>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9b      	lsrs	r3, r3, #18
 8002546:	3b01      	subs	r3, #1
 8002548:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800254a:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <HAL_InitTick+0xec>)
 800254c:	4a21      	ldr	r2, [pc, #132]	@ (80025d4 <HAL_InitTick+0xf0>)
 800254e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <HAL_InitTick+0xec>)
 8002552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002556:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002558:	4a1d      	ldr	r2, [pc, #116]	@ (80025d0 <HAL_InitTick+0xec>)
 800255a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255c:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <HAL_InitTick+0xec>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <HAL_InitTick+0xec>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <HAL_InitTick+0xec>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002570:	4817      	ldr	r0, [pc, #92]	@ (80025d0 <HAL_InitTick+0xec>)
 8002572:	f002 fdc1 	bl	80050f8 <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800257c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11b      	bne.n	80025bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002584:	4812      	ldr	r0, [pc, #72]	@ (80025d0 <HAL_InitTick+0xec>)
 8002586:	f002 fe11 	bl	80051ac <HAL_TIM_Base_Start_IT>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002590:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002598:	201e      	movs	r0, #30
 800259a:	f001 f955 	bl	8003848 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d808      	bhi.n	80025b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	201e      	movs	r0, #30
 80025aa:	f001 f931 	bl	8003810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_InitTick+0xf4>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e002      	b.n	80025bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3738      	adds	r7, #56	@ 0x38
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	20007954 	.word	0x20007954
 80025d4:	40000800 	.word	0x40000800
 80025d8:	20000010 	.word	0x20000010

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <NMI_Handler+0x4>

080025e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <HardFault_Handler+0x4>

080025ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f0:	bf00      	nop
 80025f2:	e7fd      	b.n	80025f0 <MemManage_Handler+0x4>

080025f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <BusFault_Handler+0x4>

080025fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <UsageFault_Handler+0x4>

08002604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	@ (8002624 <DMA1_Stream0_IRQHandler+0x10>)
 800261a:	f001 fabb 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200082b4 	.word	0x200082b4

08002628 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <DMA1_Stream5_IRQHandler+0x10>)
 800262e:	f001 fab1 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20008374 	.word	0x20008374

0800263c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_up_Pin);
 8002640:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002644:	f001 fed6 	bl	80043f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_switch_down_Pin);
 8002648:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800264c:	f001 fed2 	bl	80043f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002658:	4802      	ldr	r0, [pc, #8]	@ (8002664 <TIM4_IRQHandler+0x10>)
 800265a:	f002 ff2f 	bl	80054bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20007954 	.word	0x20007954

08002668 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800266c:	4802      	ldr	r0, [pc, #8]	@ (8002678 <USART1_IRQHandler+0x10>)
 800266e:	f003 fe25 	bl	80062bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20008194 	.word	0x20008194

0800267c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <USART3_IRQHandler+0x10>)
 8002682:	f003 fe1b 	bl	80062bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20008224 	.word	0x20008224

08002690 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <UART5_IRQHandler+0x10>)
 8002696:	f003 fe11 	bl	80062bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000814c 	.word	0x2000814c

080026a4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80026a8:	4802      	ldr	r0, [pc, #8]	@ (80026b4 <DMA2_Stream1_IRQHandler+0x10>)
 80026aa:	f001 fa73 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200083d4 	.word	0x200083d4

080026b8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80026bc:	4802      	ldr	r0, [pc, #8]	@ (80026c8 <DMA2_Stream5_IRQHandler+0x10>)
 80026be:	f001 fa69 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20008314 	.word	0x20008314

080026cc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80026d0:	4802      	ldr	r0, [pc, #8]	@ (80026dc <DMA2_Stream6_IRQHandler+0x10>)
 80026d2:	f001 fa5f 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20008434 	.word	0x20008434

080026e0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80026e4:	4802      	ldr	r0, [pc, #8]	@ (80026f0 <USART6_IRQHandler+0x10>)
 80026e6:	f003 fde9 	bl	80062bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000826c 	.word	0x2000826c

080026f4 <_getpid>:
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	2301      	movs	r3, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_kill>:
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	f014 fcf7 	bl	8017100 <__errno>
 8002712:	4603      	mov	r3, r0
 8002714:	2216      	movs	r2, #22
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <_exit>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ffe7 	bl	8002704 <_kill>
 8002736:	bf00      	nop
 8002738:	e7fd      	b.n	8002736 <_exit+0x12>

0800273a <_read>:
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e00a      	b.n	8002762 <_read+0x28>
 800274c:	f3af 8000 	nop.w
 8002750:	4601      	mov	r1, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	60ba      	str	r2, [r7, #8]
 8002758:	b2ca      	uxtb	r2, r1
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	dbf0      	blt.n	800274c <_read+0x12>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_write>:
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	e009      	b.n	800279a <_write+0x26>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	60ba      	str	r2, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f3af 8000 	nop.w
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3301      	adds	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dbf1      	blt.n	8002786 <_write+0x12>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_close>:
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_fstat>:
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	2300      	movs	r3, #0
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_isatty>:
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	2301      	movs	r3, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <_lseek>:
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	2300      	movs	r3, #0
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <_sbrk>:
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
 8002844:	f014 fc5c 	bl	8017100 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20020000 	.word	0x20020000
 8002874:	00000400 	.word	0x00000400
 8002878:	200079a0 	.word	0x200079a0
 800287c:	20010eb8 	.word	0x20010eb8

08002880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <SystemInit+0x20>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <SystemInit+0x20>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	@ 0x28
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	611a      	str	r2, [r3, #16]
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028c6:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028d0:	2259      	movs	r2, #89	@ 0x59
 80028d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80028da:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028ee:	4818      	ldr	r0, [pc, #96]	@ (8002950 <MX_TIM2_Init+0xac>)
 80028f0:	f002 fccc 	bl	800528c <HAL_TIM_PWM_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028fa:	f7ff fbbd 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	4619      	mov	r1, r3
 800290c:	4810      	ldr	r0, [pc, #64]	@ (8002950 <MX_TIM2_Init+0xac>)
 800290e:	f003 fa31 	bl	8005d74 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002918:	f7ff fbae 	bl	8002078 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291c:	2360      	movs	r3, #96	@ 0x60
 800291e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	220c      	movs	r2, #12
 8002930:	4619      	mov	r1, r3
 8002932:	4807      	ldr	r0, [pc, #28]	@ (8002950 <MX_TIM2_Init+0xac>)
 8002934:	f002 feb2 	bl	800569c <HAL_TIM_PWM_ConfigChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800293e:	f7ff fb9b 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002942:	4803      	ldr	r0, [pc, #12]	@ (8002950 <MX_TIM2_Init+0xac>)
 8002944:	f000 f826 	bl	8002994 <HAL_TIM_MspPostInit>

}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	@ 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	200079a4 	.word	0x200079a4

08002954 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002964:	d10d      	bne.n	8002982 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <HAL_TIM_PWM_MspInit+0x3c>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <HAL_TIM_PWM_MspInit+0x3c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6413      	str	r3, [r2, #64]	@ 0x40
 8002976:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_TIM_PWM_MspInit+0x3c>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029b4:	d11d      	bne.n	80029f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <HAL_TIM_MspPostInit+0x68>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a0f      	ldr	r2, [pc, #60]	@ (80029fc <HAL_TIM_MspPostInit+0x68>)
 80029c0:	f043 0302 	orr.w	r3, r3, #2
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <HAL_TIM_MspPostInit+0x68>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB2     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029d2:	2304      	movs	r3, #4
 80029d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e2:	2301      	movs	r3, #1
 80029e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f107 030c 	add.w	r3, r7, #12
 80029ea:	4619      	mov	r1, r3
 80029ec:	4804      	ldr	r0, [pc, #16]	@ (8002a00 <HAL_TIM_MspPostInit+0x6c>)
 80029ee:	f001 fb3b 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020400 	.word	0x40020400

08002a04 <uart_init>:

queue8_t uart_queue;
queue8_t uart2_queue;
queue8_t uart5_queue;

void uart_init(){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart1, uart_queue.buf, QUEUE_BUF_MAX) ;
 8002a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a0c:	490a      	ldr	r1, [pc, #40]	@ (8002a38 <uart_init+0x34>)
 8002a0e:	480b      	ldr	r0, [pc, #44]	@ (8002a3c <uart_init+0x38>)
 8002a10:	f003 fbb0 	bl	8006174 <HAL_UART_Receive_DMA>
	uart_queue.q_in_index = 0;
 8002a14:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <uart_init+0x34>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	uart_queue.q_out_index = 0;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <uart_init+0x34>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

//	HAL_UART_Receive_DMA(&huart5, uart5_queue.buf, QUEUE_BUF_MAX);
		uart5_queue.q_in_index = 0;
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <uart_init+0x3c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		uart5_queue.q_out_index = 0;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <uart_init+0x3c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200079ec 	.word	0x200079ec
 8002a3c:	20008194 	.word	0x20008194
 8002a40:	20007af0 	.word	0x20007af0

08002a44 <uart_available>:

uint32_t uart_available(void){
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]
	uart_queue.q_in_index = (QUEUE_BUF_MAX - huart1.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002a4e:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <uart_available+0x50>)
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <uart_available+0x54>)
 8002a64:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart_queue.q_in_index - uart_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <uart_available+0x54>)
 8002a6a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002a6e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <uart_available+0x54>)
 8002a74:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	425a      	negs	r2, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	bf58      	it	pl
 8002a82:	4253      	negpl	r3, r2
 8002a84:	607b      	str	r3, [r7, #4]

	return ret;
 8002a86:	687b      	ldr	r3, [r7, #4]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	20008194 	.word	0x20008194
 8002a98:	200079ec 	.word	0x200079ec

08002a9c <uart_q8_read>:

uint8_t uart_q8_read(void){
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71fb      	strb	r3, [r7, #7]
	if(uart_queue.q_out_index != uart_queue.q_in_index){
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <uart_q8_read+0x50>)
 8002aa8:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002aac:	4b0f      	ldr	r3, [pc, #60]	@ (8002aec <uart_q8_read+0x50>)
 8002aae:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d013      	beq.n	8002ade <uart_q8_read+0x42>
		ret = uart_queue.buf[uart_queue.q_out_index];
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <uart_q8_read+0x50>)
 8002ab8:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <uart_q8_read+0x50>)
 8002ac0:	5c9b      	ldrb	r3, [r3, r2]
 8002ac2:	71fb      	strb	r3, [r7, #7]
		uart_queue.q_out_index = (uart_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <uart_q8_read+0x50>)
 8002ac6:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002aca:	3301      	adds	r3, #1
 8002acc:	425a      	negs	r2, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	bf58      	it	pl
 8002ad4:	4253      	negpl	r3, r2
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	4b04      	ldr	r3, [pc, #16]	@ (8002aec <uart_q8_read+0x50>)
 8002ada:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8002ade:	79fb      	ldrb	r3, [r7, #7]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	200079ec 	.word	0x200079ec

08002af0 <read_rfid_number>:

uint8_t rfid_number[READ_BOOK_MAX_SIZE][12] = {0,}; //파싱한 rfid 번호 저장
uint8_t recive_data[24] = {0,}; //RFID 태그 한개에서 receive 한 data 저장
uint8_t book_num = 0;  //책 순서
uint8_t book_byte_num = 0; //책 태그의 바이트 순서
void read_rfid_number(){
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
	uint8_t i;
	if(uart_available()){ // 데이터 있으면
 8002af6:	f7ff ffa5 	bl	8002a44 <uart_available>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d042      	beq.n	8002b86 <read_rfid_number+0x96>
		uint8_t read_byte =  uart_q8_read(); // 버퍼에서 1byte 읽고
 8002b00:	f7ff ffcc 	bl	8002a9c <uart_q8_read>
 8002b04:	4603      	mov	r3, r0
 8002b06:	71bb      	strb	r3, [r7, #6]
		recive_data[book_byte_num++] = read_byte;
 8002b08:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <read_rfid_number+0xa0>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	b2d1      	uxtb	r1, r2
 8002b10:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <read_rfid_number+0xa0>)
 8002b12:	7011      	strb	r1, [r2, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <read_rfid_number+0xa4>)
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	5453      	strb	r3, [r2, r1]
		if(read_byte == 0x7E) { // 마지막 데이터이면
 8002b1c:	79bb      	ldrb	r3, [r7, #6]
 8002b1e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002b20:	d126      	bne.n	8002b70 <read_rfid_number+0x80>
			if(recive_data[1] != 0x01){ //인식이 된 경우 8~19 12byte rfid number
 8002b22:	4b1c      	ldr	r3, [pc, #112]	@ (8002b94 <read_rfid_number+0xa4>)
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d01f      	beq.n	8002b6a <read_rfid_number+0x7a>
				for( i=8; i<=19; i ++)
 8002b2a:	2308      	movs	r3, #8
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	e013      	b.n	8002b58 <read_rfid_number+0x68>
					rfid_number[book_num][i-8] = recive_data[i];
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	4a19      	ldr	r2, [pc, #100]	@ (8002b98 <read_rfid_number+0xa8>)
 8002b34:	7812      	ldrb	r2, [r2, #0]
 8002b36:	4610      	mov	r0, r2
 8002b38:	79fa      	ldrb	r2, [r7, #7]
 8002b3a:	3a08      	subs	r2, #8
 8002b3c:	4915      	ldr	r1, [pc, #84]	@ (8002b94 <read_rfid_number+0xa4>)
 8002b3e:	5ccc      	ldrb	r4, [r1, r3]
 8002b40:	4916      	ldr	r1, [pc, #88]	@ (8002b9c <read_rfid_number+0xac>)
 8002b42:	4603      	mov	r3, r0
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4403      	add	r3, r0
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4622      	mov	r2, r4
 8002b50:	701a      	strb	r2, [r3, #0]
				for( i=8; i<=19; i ++)
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	3301      	adds	r3, #1
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	2b13      	cmp	r3, #19
 8002b5c:	d9e8      	bls.n	8002b30 <read_rfid_number+0x40>
				book_num ++;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <read_rfid_number+0xa8>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <read_rfid_number+0xa8>)
 8002b68:	701a      	strb	r2, [r3, #0]
			}
			book_byte_num = 0;
 8002b6a:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <read_rfid_number+0xa0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
		}
		if(!uart_available()){ //다 읽었으면
 8002b70:	f7ff ff68 	bl	8002a44 <uart_available>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <read_rfid_number+0x96>
			osSignalSet(tagNumTransmitTHandle, transmitSignal); //전송 이벤트 생성
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <read_rfid_number+0xb0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 fdb3 	bl	80076ec <osSignalSet>
			//vTaskSuspend(defaultTaskHandle);
			}
		}
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200080bd 	.word	0x200080bd
 8002b94:	200080a4 	.word	0x200080a4
 8002b98:	200080bc 	.word	0x200080bc
 8002b9c:	20007bf4 	.word	0x20007bf4
 8002ba0:	20004708 	.word	0x20004708

08002ba4 <transmitData>:
//robot initial location
int robotLocation=0;
void transmitData(){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
	int i=0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
	char location[15];
	memset(location,'0',15);
 8002bae:	1d3b      	adds	r3, r7, #4
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	2130      	movs	r1, #48	@ 0x30
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f014 f9b5 	bl	8016f24 <memset>
	while(rfid_number[i][0] != 0){
 8002bba:	e02d      	b.n	8002c18 <transmitData+0x74>
		if(robotLocation != 0){
 8002bbc:	4b22      	ldr	r3, [pc, #136]	@ (8002c48 <transmitData+0xa4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <transmitData+0x2e>
			itoa(robotLocation,location,10);
 8002bc4:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <transmitData+0xa4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1d39      	adds	r1, r7, #4
 8002bca:	220a      	movs	r2, #10
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f013 f879 	bl	8015cc4 <itoa>
		}
		// 위치 + RFID태그값 문자열 합침
 		locationCatRfid(location,rfid_number[i]);
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c4c <transmitData+0xa8>)
 8002bde:	441a      	add	r2, r3
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f839 	bl	8002c5c <locationCatRfid>
		//computer
		HAL_UART_Transmit(&huart2, location, 15, 500);
 8002bea:	1d39      	adds	r1, r7, #4
 8002bec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	4817      	ldr	r0, [pc, #92]	@ (8002c50 <transmitData+0xac>)
 8002bf4:	f003 f99e 	bl	8005f34 <HAL_UART_Transmit>
		//esp32
		HAL_UART_Transmit(&huart3, location, 15, 500);
 8002bf8:	1d39      	adds	r1, r7, #4
 8002bfa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bfe:	220f      	movs	r2, #15
 8002c00:	4814      	ldr	r0, [pc, #80]	@ (8002c54 <transmitData+0xb0>)
 8002c02:	f003 f997 	bl	8005f34 <HAL_UART_Transmit>

		i++;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	617b      	str	r3, [r7, #20]
		memset(location,'0',15);
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	220f      	movs	r2, #15
 8002c10:	2130      	movs	r1, #48	@ 0x30
 8002c12:	4618      	mov	r0, r3
 8002c14:	f014 f986 	bl	8016f24 <memset>
	while(rfid_number[i][0] != 0){
 8002c18:	490c      	ldr	r1, [pc, #48]	@ (8002c4c <transmitData+0xa8>)
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c7      	bne.n	8002bbc <transmitData+0x18>
		}
	memset(rfid_number,0,sizeof(rfid_number));
 8002c2c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002c30:	2100      	movs	r1, #0
 8002c32:	4806      	ldr	r0, [pc, #24]	@ (8002c4c <transmitData+0xa8>)
 8002c34:	f014 f976 	bl	8016f24 <memset>
	book_num =0;
 8002c38:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <transmitData+0xb4>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]

}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200080c0 	.word	0x200080c0
 8002c4c:	20007bf4 	.word	0x20007bf4
 8002c50:	200081dc 	.word	0x200081dc
 8002c54:	20008224 	.word	0x20008224
 8002c58:	200080bc 	.word	0x200080bc

08002c5c <locationCatRfid>:
void locationCatRfid(char *location, const char *tagNum){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	for(int i=3;i<15;i++){
 8002c66:	2303      	movs	r3, #3
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e00b      	b.n	8002c84 <locationCatRfid+0x28>
		location[i] = tagNum[i-3];
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b03      	subs	r3, #3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	441a      	add	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	440b      	add	r3, r1
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]
	for(int i=3;i<15;i++){
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b0e      	cmp	r3, #14
 8002c88:	ddf0      	ble.n	8002c6c <locationCatRfid+0x10>
	}
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <uart5_available>:

uint32_t uart5_available(void){
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
	uart5_queue.q_in_index = (QUEUE_BUF_MAX - huart5.hdmarx->Instance->NDTR) % QUEUE_BUF_MAX; //원형 큐
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <uart5_available+0x50>)
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <uart5_available+0x54>)
 8002cb8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
//	hdmarx->Instance->CNDTR
	ret = (QUEUE_BUF_MAX + uart5_queue.q_in_index - uart5_queue.q_out_index) % QUEUE_BUF_MAX; // 버퍼 데이터 개수
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <uart5_available+0x54>)
 8002cbe:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002cc2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <uart5_available+0x54>)
 8002cc8:	f8b2 2102 	ldrh.w	r2, [r2, #258]	@ 0x102
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	425a      	negs	r2, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	bf58      	it	pl
 8002cd6:	4253      	negpl	r3, r2
 8002cd8:	607b      	str	r3, [r7, #4]

	return ret;
 8002cda:	687b      	ldr	r3, [r7, #4]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	2000814c 	.word	0x2000814c
 8002cec:	20007af0 	.word	0x20007af0

08002cf0 <uart5_q8_read>:

uint8_t uart5_q8_read(void){
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
	uint8_t ret =0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	if(uart5_queue.q_out_index != uart5_queue.q_in_index){
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <uart5_q8_read+0x50>)
 8002cfc:	f8b3 2102 	ldrh.w	r2, [r3, #258]	@ 0x102
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <uart5_q8_read+0x50>)
 8002d02:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d013      	beq.n	8002d32 <uart5_q8_read+0x42>
		ret = uart5_queue.buf[uart5_queue.q_out_index];
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <uart5_q8_read+0x50>)
 8002d0c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <uart5_q8_read+0x50>)
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	71fb      	strb	r3, [r7, #7]
		uart5_queue.q_out_index = (uart5_queue.q_out_index +1) % QUEUE_BUF_MAX;
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <uart5_q8_read+0x50>)
 8002d1a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8002d1e:	3301      	adds	r3, #1
 8002d20:	425a      	negs	r2, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	bf58      	it	pl
 8002d28:	4253      	negpl	r3, r2
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b04      	ldr	r3, [pc, #16]	@ (8002d40 <uart5_q8_read+0x50>)
 8002d2e:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
	}

	return ret;
 8002d32:	79fb      	ldrb	r3, [r7, #7]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	20007af0 	.word	0x20007af0

08002d44 <read_location>:
uint8_t recive_data2[12];
uint8_t indexXY;
void read_location(){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
	char xChar[6],yChar[6];
	if(uart5_available()){
 8002d4a:	f7ff ffa5 	bl	8002c98 <uart5_available>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d039      	beq.n	8002dc8 <read_location+0x84>
/*//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);*/
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2120      	movs	r1, #32
 8002d58:	481d      	ldr	r0, [pc, #116]	@ (8002dd0 <read_location+0x8c>)
 8002d5a:	f001 fb31 	bl	80043c0 <HAL_GPIO_WritePin>
		uint8_t read_byte =  uart5_q8_read(); // 버퍼에서 1byte 읽고
 8002d5e:	f7ff ffc7 	bl	8002cf0 <uart5_q8_read>
 8002d62:	4603      	mov	r3, r0
 8002d64:	74fb      	strb	r3, [r7, #19]
		recive_data2[indexXY++] = read_byte;
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <read_location+0x90>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	b2d1      	uxtb	r1, r2
 8002d6e:	4a19      	ldr	r2, [pc, #100]	@ (8002dd4 <read_location+0x90>)
 8002d70:	7011      	strb	r1, [r2, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <read_location+0x94>)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	5453      	strb	r3, [r2, r1]
		if(indexXY == 12){
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <read_location+0x90>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d122      	bne.n	8002dc8 <read_location+0x84>

			if(recive_data2[0] == 'z'){
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <read_location+0x94>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b7a      	cmp	r3, #122	@ 0x7a
 8002d88:	d01b      	beq.n	8002dc2 <read_location+0x7e>
				//정비시작
				int a;
			}
			else{
				//book location move
				for(int i=0;i<6;i++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e015      	b.n	8002dbc <read_location+0x78>
					xChar[i] = recive_data2[i];
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <read_location+0x94>)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4413      	add	r3, r2
 8002d96:	7819      	ldrb	r1, [r3, #0]
 8002d98:	f107 020c 	add.w	r2, r7, #12
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4413      	add	r3, r2
 8002da0:	460a      	mov	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
					yChar[i] = recive_data2[i+6];
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3306      	adds	r3, #6
 8002da8:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <read_location+0x94>)
 8002daa:	5cd1      	ldrb	r1, [r2, r3]
 8002dac:	1d3a      	adds	r2, r7, #4
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	4413      	add	r3, r2
 8002db2:	460a      	mov	r2, r1
 8002db4:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<6;i++){
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b05      	cmp	r3, #5
 8002dc0:	dde6      	ble.n	8002d90 <read_location+0x4c>
				}
//				Publisher_pos(xChar,yChar);
			}
			indexXY=0;
 8002dc2:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <read_location+0x90>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	200080d0 	.word	0x200080d0
 8002dd8:	200080c4 	.word	0x200080c4

08002ddc <transmitCommand>:
}

char motor_command1[] = "scan\n";
char motor_command2[] = "stop\n";

void transmitCommand(){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
//	int i=0;
//	while(scan_command[i] != 10){
//		HAL_UART_Transmit(&huart2, scan_command[i], sizeof(scan_command[i]), 1);
//		i++;
//	}
	if(!(strchr(scan_command,motor_command1))){
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <transmitCommand+0x44>)
 8002de2:	4619      	mov	r1, r3
 8002de4:	480f      	ldr	r0, [pc, #60]	@ (8002e24 <transmitCommand+0x48>)
 8002de6:	f014 f8a5 	bl	8016f34 <strchr>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10f      	bne.n	8002e10 <transmitCommand+0x34>
		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
 8002df0:	2301      	movs	r3, #1
 8002df2:	2205      	movs	r2, #5
 8002df4:	490c      	ldr	r1, [pc, #48]	@ (8002e28 <transmitCommand+0x4c>)
 8002df6:	480d      	ldr	r0, [pc, #52]	@ (8002e2c <transmitCommand+0x50>)
 8002df8:	f003 f89c 	bl	8005f34 <HAL_UART_Transmit>
		vTaskResume(motorTaskHandle);
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <transmitCommand+0x54>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f005 f85f 	bl	8007ec4 <vTaskResume>
		vTaskResume(rfidExecuteTaskHandle);
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <transmitCommand+0x58>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 f85a 	bl	8007ec4 <vTaskResume>
	}
//	}else if(!(strchr(scan_command,motor_command2))){
//		HAL_UART_Transmit(&huart2, "ok\r\n", sizeof("ok\r\n"), 1);
//		vTaskSuspend(rfidExecuteHandle);
//	}
	memset(scan_command,0,sizeof(scan_command));
 8002e10:	2214      	movs	r2, #20
 8002e12:	2100      	movs	r1, #0
 8002e14:	4803      	ldr	r0, [pc, #12]	@ (8002e24 <transmitCommand+0x48>)
 8002e16:	f014 f885 	bl	8016f24 <memset>
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008
 8002e24:	200080d4 	.word	0x200080d4
 8002e28:	0801909c 	.word	0x0801909c
 8002e2c:	200081dc 	.word	0x200081dc
 8002e30:	2000470c 	.word	0x2000470c
 8002e34:	20004704 	.word	0x20004704

08002e38 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	@ (8002e88 <MX_UART5_Init+0x50>)
 8002e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e5e:	220c      	movs	r2, #12
 8002e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e68:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e6e:	4805      	ldr	r0, [pc, #20]	@ (8002e84 <MX_UART5_Init+0x4c>)
 8002e70:	f003 f810 	bl	8005e94 <HAL_UART_Init>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e7a:	f7ff f8fd 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	2000814c 	.word	0x2000814c
 8002e88:	40005000 	.word	0x40005000

08002e8c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e90:	4b11      	ldr	r3, [pc, #68]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002e92:	4a12      	ldr	r2, [pc, #72]	@ (8002edc <MX_USART1_UART_Init+0x50>)
 8002e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e96:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eb2:	220c      	movs	r2, #12
 8002eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ec2:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <MX_USART1_UART_Init+0x4c>)
 8002ec4:	f002 ffe6 	bl	8005e94 <HAL_UART_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ece:	f7ff f8d3 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20008194 	.word	0x20008194
 8002edc:	40011000 	.word	0x40011000

08002ee0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ee4:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002ee6:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <MX_USART2_UART_Init+0x50>)
 8002ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002eec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002f06:	220c      	movs	r2, #12
 8002f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0a:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f16:	4805      	ldr	r0, [pc, #20]	@ (8002f2c <MX_USART2_UART_Init+0x4c>)
 8002f18:	f002 ffbc 	bl	8005e94 <HAL_UART_Init>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f22:	f7ff f8a9 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200081dc 	.word	0x200081dc
 8002f30:	40004400 	.word	0x40004400

08002f34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f38:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f3a:	4a12      	ldr	r2, [pc, #72]	@ (8002f84 <MX_USART3_UART_Init+0x50>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f3e:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f6a:	4805      	ldr	r0, [pc, #20]	@ (8002f80 <MX_USART3_UART_Init+0x4c>)
 8002f6c:	f002 ff92 	bl	8005e94 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f76:	f7ff f87f 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20008224 	.word	0x20008224
 8002f84:	40004800 	.word	0x40004800

08002f88 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <MX_USART6_UART_Init+0x50>)
 8002f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fae:	220c      	movs	r2, #12
 8002fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fbe:	4805      	ldr	r0, [pc, #20]	@ (8002fd4 <MX_USART6_UART_Init+0x4c>)
 8002fc0:	f002 ff68 	bl	8005e94 <HAL_UART_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fca:	f7ff f855 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000826c 	.word	0x2000826c
 8002fd8:	40011400 	.word	0x40011400

08002fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b094      	sub	sp, #80	@ 0x50
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
 8002ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a78      	ldr	r2, [pc, #480]	@ (80031dc <HAL_UART_MspInit+0x200>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	f040 8083 	bne.w	8003106 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003000:	2300      	movs	r3, #0
 8003002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003004:	4b76      	ldr	r3, [pc, #472]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	4a75      	ldr	r2, [pc, #468]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003010:	4b73      	ldr	r3, [pc, #460]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003018:	63bb      	str	r3, [r7, #56]	@ 0x38
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003020:	4b6f      	ldr	r3, [pc, #444]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003024:	4a6e      	ldr	r2, [pc, #440]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6313      	str	r3, [r2, #48]	@ 0x30
 800302c:	4b6c      	ldr	r3, [pc, #432]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	637b      	str	r3, [r7, #52]	@ 0x34
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	633b      	str	r3, [r7, #48]	@ 0x30
 800303c:	4b68      	ldr	r3, [pc, #416]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	4a67      	ldr	r2, [pc, #412]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003042:	f043 0308 	orr.w	r3, r3, #8
 8003046:	6313      	str	r3, [r2, #48]	@ 0x30
 8003048:	4b65      	ldr	r3, [pc, #404]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	633b      	str	r3, [r7, #48]	@ 0x30
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = F103re_TX_Pin;
 8003054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003058:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003066:	2308      	movs	r3, #8
 8003068:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(F103re_TX_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800306e:	4619      	mov	r1, r3
 8003070:	485c      	ldr	r0, [pc, #368]	@ (80031e4 <HAL_UART_MspInit+0x208>)
 8003072:	f000 fff9 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F103re_RX_Pin;
 8003076:	2304      	movs	r3, #4
 8003078:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307a:	2302      	movs	r3, #2
 800307c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003082:	2303      	movs	r3, #3
 8003084:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003086:	2308      	movs	r3, #8
 8003088:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(F103re_RX_GPIO_Port, &GPIO_InitStruct);
 800308a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800308e:	4619      	mov	r1, r3
 8003090:	4855      	ldr	r0, [pc, #340]	@ (80031e8 <HAL_UART_MspInit+0x20c>)
 8003092:	f000 ffe9 	bl	8004068 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003096:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <HAL_UART_MspInit+0x210>)
 8003098:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_UART_MspInit+0x214>)
 800309a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800309c:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <HAL_UART_MspInit+0x210>)
 800309e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a4:	4b51      	ldr	r3, [pc, #324]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030aa:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030b0:	4b4e      	ldr	r3, [pc, #312]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030b6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b8:	4b4c      	ldr	r3, [pc, #304]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030be:	4b4b      	ldr	r3, [pc, #300]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80030c4:	4b49      	ldr	r3, [pc, #292]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030ca:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030cc:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d2:	4b46      	ldr	r3, [pc, #280]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80030d8:	4844      	ldr	r0, [pc, #272]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030da:	f000 fbc3 	bl	8003864 <HAL_DMA_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80030e4:	f7fe ffc8 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a40      	ldr	r2, [pc, #256]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030ee:	4a3f      	ldr	r2, [pc, #252]	@ (80031ec <HAL_UART_MspInit+0x210>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80030f4:	2200      	movs	r2, #0
 80030f6:	2105      	movs	r1, #5
 80030f8:	2035      	movs	r0, #53	@ 0x35
 80030fa:	f000 fb89 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80030fe:	2035      	movs	r0, #53	@ 0x35
 8003100:	f000 fba2 	bl	8003848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003104:	e1e0      	b.n	80034c8 <HAL_UART_MspInit+0x4ec>
  else if(uartHandle->Instance==USART1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3a      	ldr	r2, [pc, #232]	@ (80031f4 <HAL_UART_MspInit+0x218>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d179      	bne.n	8003204 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003114:	4b32      	ldr	r3, [pc, #200]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003118:	4a31      	ldr	r2, [pc, #196]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003120:	4b2f      	ldr	r3, [pc, #188]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003130:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	4a2a      	ldr	r2, [pc, #168]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6313      	str	r3, [r2, #48]	@ 0x30
 800313c:	4b28      	ldr	r3, [pc, #160]	@ (80031e0 <HAL_UART_MspInit+0x204>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = UHF01_TX_Pin|UHF01_RX_Pin;
 8003148:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800314c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800315a:	2307      	movs	r3, #7
 800315c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003162:	4619      	mov	r1, r3
 8003164:	4824      	ldr	r0, [pc, #144]	@ (80031f8 <HAL_UART_MspInit+0x21c>)
 8003166:	f000 ff7f 	bl	8004068 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800316a:	4b24      	ldr	r3, [pc, #144]	@ (80031fc <HAL_UART_MspInit+0x220>)
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <HAL_UART_MspInit+0x224>)
 800316e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003170:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <HAL_UART_MspInit+0x220>)
 8003172:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003176:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003178:	4b20      	ldr	r3, [pc, #128]	@ (80031fc <HAL_UART_MspInit+0x220>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <HAL_UART_MspInit+0x220>)
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003184:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <HAL_UART_MspInit+0x220>)
 8003186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_UART_MspInit+0x220>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003192:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_UART_MspInit+0x220>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003198:	4b18      	ldr	r3, [pc, #96]	@ (80031fc <HAL_UART_MspInit+0x220>)
 800319a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800319e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031a0:	4b16      	ldr	r3, [pc, #88]	@ (80031fc <HAL_UART_MspInit+0x220>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <HAL_UART_MspInit+0x220>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031ac:	4813      	ldr	r0, [pc, #76]	@ (80031fc <HAL_UART_MspInit+0x220>)
 80031ae:	f000 fb59 	bl	8003864 <HAL_DMA_Init>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80031b8:	f7fe ff5e 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0f      	ldr	r2, [pc, #60]	@ (80031fc <HAL_UART_MspInit+0x220>)
 80031c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031c2:	4a0e      	ldr	r2, [pc, #56]	@ (80031fc <HAL_UART_MspInit+0x220>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2105      	movs	r1, #5
 80031cc:	2025      	movs	r0, #37	@ 0x25
 80031ce:	f000 fb1f 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d2:	2025      	movs	r0, #37	@ 0x25
 80031d4:	f000 fb38 	bl	8003848 <HAL_NVIC_EnableIRQ>
}
 80031d8:	e176      	b.n	80034c8 <HAL_UART_MspInit+0x4ec>
 80031da:	bf00      	nop
 80031dc:	40005000 	.word	0x40005000
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020c00 	.word	0x40020c00
 80031ec:	200082b4 	.word	0x200082b4
 80031f0:	40026010 	.word	0x40026010
 80031f4:	40011000 	.word	0x40011000
 80031f8:	40020000 	.word	0x40020000
 80031fc:	20008314 	.word	0x20008314
 8003200:	40026488 	.word	0x40026488
  else if(uartHandle->Instance==USART2)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a5b      	ldr	r2, [pc, #364]	@ (8003378 <HAL_UART_MspInit+0x39c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d15a      	bne.n	80032c4 <HAL_UART_MspInit+0x2e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
 8003212:	4b5a      	ldr	r3, [pc, #360]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	4a59      	ldr	r2, [pc, #356]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	6413      	str	r3, [r2, #64]	@ 0x40
 800321e:	4b57      	ldr	r3, [pc, #348]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	4b53      	ldr	r3, [pc, #332]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003232:	4a52      	ldr	r2, [pc, #328]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	@ 0x30
 800323a:	4b50      	ldr	r3, [pc, #320]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = com_TX_Pin|com_RX_Pin;
 8003246:	230c      	movs	r3, #12
 8003248:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003256:	2307      	movs	r3, #7
 8003258:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800325e:	4619      	mov	r1, r3
 8003260:	4847      	ldr	r0, [pc, #284]	@ (8003380 <HAL_UART_MspInit+0x3a4>)
 8003262:	f000 ff01 	bl	8004068 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 8003268:	4a47      	ldr	r2, [pc, #284]	@ (8003388 <HAL_UART_MspInit+0x3ac>)
 800326a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800326c:	4b45      	ldr	r3, [pc, #276]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 800326e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003272:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003274:	4b43      	ldr	r3, [pc, #268]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327a:	4b42      	ldr	r3, [pc, #264]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 800327c:	2200      	movs	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003280:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 8003282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003286:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003288:	4b3e      	ldr	r3, [pc, #248]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 800328a:	2200      	movs	r2, #0
 800328c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328e:	4b3d      	ldr	r3, [pc, #244]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003294:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800329a:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032a0:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032a6:	4837      	ldr	r0, [pc, #220]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 80032a8:	f000 fadc 	bl	8003864 <HAL_DMA_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_UART_MspInit+0x2da>
      Error_Handler();
 80032b2:	f7fe fee1 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a32      	ldr	r2, [pc, #200]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 80032ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032bc:	4a31      	ldr	r2, [pc, #196]	@ (8003384 <HAL_UART_MspInit+0x3a8>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80032c2:	e101      	b.n	80034c8 <HAL_UART_MspInit+0x4ec>
  else if(uartHandle->Instance==USART3)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a30      	ldr	r2, [pc, #192]	@ (800338c <HAL_UART_MspInit+0x3b0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d164      	bne.n	8003398 <HAL_UART_MspInit+0x3bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	4b2a      	ldr	r3, [pc, #168]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	4b27      	ldr	r3, [pc, #156]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	4b23      	ldr	r3, [pc, #140]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	4a22      	ldr	r2, [pc, #136]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fa:	4b20      	ldr	r3, [pc, #128]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a1b      	ldr	r2, [pc, #108]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003310:	f043 0302 	orr.w	r3, r3, #2
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_UART_MspInit+0x3a0>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = esp32_RX_Pin;
 8003322:	2320      	movs	r3, #32
 8003324:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003332:	2307      	movs	r3, #7
 8003334:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_RX_GPIO_Port, &GPIO_InitStruct);
 8003336:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800333a:	4619      	mov	r1, r3
 800333c:	4814      	ldr	r0, [pc, #80]	@ (8003390 <HAL_UART_MspInit+0x3b4>)
 800333e:	f000 fe93 	bl	8004068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = esp32_TX_Pin;
 8003342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003346:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003354:	2307      	movs	r3, #7
 8003356:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(esp32_TX_GPIO_Port, &GPIO_InitStruct);
 8003358:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800335c:	4619      	mov	r1, r3
 800335e:	480d      	ldr	r0, [pc, #52]	@ (8003394 <HAL_UART_MspInit+0x3b8>)
 8003360:	f000 fe82 	bl	8004068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003364:	2200      	movs	r2, #0
 8003366:	2105      	movs	r1, #5
 8003368:	2027      	movs	r0, #39	@ 0x27
 800336a:	f000 fa51 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800336e:	2027      	movs	r0, #39	@ 0x27
 8003370:	f000 fa6a 	bl	8003848 <HAL_NVIC_EnableIRQ>
}
 8003374:	e0a8      	b.n	80034c8 <HAL_UART_MspInit+0x4ec>
 8003376:	bf00      	nop
 8003378:	40004400 	.word	0x40004400
 800337c:	40023800 	.word	0x40023800
 8003380:	40020000 	.word	0x40020000
 8003384:	20008374 	.word	0x20008374
 8003388:	40026088 	.word	0x40026088
 800338c:	40004800 	.word	0x40004800
 8003390:	40020800 	.word	0x40020800
 8003394:	40020400 	.word	0x40020400
  else if(uartHandle->Instance==USART6)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a4c      	ldr	r2, [pc, #304]	@ (80034d0 <HAL_UART_MspInit+0x4f4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	f040 8092 	bne.w	80034c8 <HAL_UART_MspInit+0x4ec>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	4a49      	ldr	r2, [pc, #292]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033ae:	f043 0320 	orr.w	r3, r3, #32
 80033b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b4:	4b47      	ldr	r3, [pc, #284]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d0:	4b40      	ldr	r3, [pc, #256]	@ (80034d4 <HAL_UART_MspInit+0x4f8>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Micro_ROS_TX_Pin|Micro_ROS_RX_Pin;
 80033dc:	23c0      	movs	r3, #192	@ 0xc0
 80033de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033ec:	2308      	movs	r3, #8
 80033ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80033f4:	4619      	mov	r1, r3
 80033f6:	4838      	ldr	r0, [pc, #224]	@ (80034d8 <HAL_UART_MspInit+0x4fc>)
 80033f8:	f000 fe36 	bl	8004068 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80033fc:	4b37      	ldr	r3, [pc, #220]	@ (80034dc <HAL_UART_MspInit+0x500>)
 80033fe:	4a38      	ldr	r2, [pc, #224]	@ (80034e0 <HAL_UART_MspInit+0x504>)
 8003400:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003404:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003408:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800340a:	4b34      	ldr	r3, [pc, #208]	@ (80034dc <HAL_UART_MspInit+0x500>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003410:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003416:	4b31      	ldr	r3, [pc, #196]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003418:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800341c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800341e:	4b2f      	ldr	r3, [pc, #188]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800342a:	4b2c      	ldr	r3, [pc, #176]	@ (80034dc <HAL_UART_MspInit+0x500>)
 800342c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003430:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003432:	4b2a      	ldr	r3, [pc, #168]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003434:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003438:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800343a:	4b28      	ldr	r3, [pc, #160]	@ (80034dc <HAL_UART_MspInit+0x500>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003440:	4826      	ldr	r0, [pc, #152]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003442:	f000 fa0f 	bl	8003864 <HAL_DMA_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x474>
      Error_Handler();
 800344c:	f7fe fe14 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003454:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003456:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <HAL_UART_MspInit+0x500>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 800345e:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_UART_MspInit+0x50c>)
 8003460:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003464:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003468:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800346a:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 800346c:	2240      	movs	r2, #64	@ 0x40
 800346e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003470:	4b1c      	ldr	r3, [pc, #112]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003476:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003478:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347e:	4b19      	ldr	r3, [pc, #100]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003480:	2200      	movs	r2, #0
 8003482:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003484:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003486:	2200      	movs	r2, #0
 8003488:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800348a:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 800348c:	2200      	movs	r2, #0
 800348e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003490:	4b14      	ldr	r3, [pc, #80]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003492:	2200      	movs	r2, #0
 8003494:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003496:	4b13      	ldr	r3, [pc, #76]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 8003498:	2200      	movs	r2, #0
 800349a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800349c:	4811      	ldr	r0, [pc, #68]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 800349e:	f000 f9e1 	bl	8003864 <HAL_DMA_Init>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_UART_MspInit+0x4d0>
      Error_Handler();
 80034a8:	f7fe fde6 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0d      	ldr	r2, [pc, #52]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80034b2:	4a0c      	ldr	r2, [pc, #48]	@ (80034e4 <HAL_UART_MspInit+0x508>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	2105      	movs	r1, #5
 80034bc:	2047      	movs	r0, #71	@ 0x47
 80034be:	f000 f9a7 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80034c2:	2047      	movs	r0, #71	@ 0x47
 80034c4:	f000 f9c0 	bl	8003848 <HAL_NVIC_EnableIRQ>
}
 80034c8:	bf00      	nop
 80034ca:	3750      	adds	r7, #80	@ 0x50
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40011400 	.word	0x40011400
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40020800 	.word	0x40020800
 80034dc:	200083d4 	.word	0x200083d4
 80034e0:	40026428 	.word	0x40026428
 80034e4:	20008434 	.word	0x20008434
 80034e8:	400264a0 	.word	0x400264a0

080034ec <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
char c;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

	//446re
	if(huart->Instance == UART5){
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a06      	ldr	r2, [pc, #24]	@ (8003514 <HAL_UART_RxCpltCallback+0x28>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d105      	bne.n	800350a <HAL_UART_RxCpltCallback+0x1e>
		osSignalSet(transePositionHandle, positionSignal);
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <HAL_UART_RxCpltCallback+0x2c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2103      	movs	r1, #3
 8003504:	4618      	mov	r0, r3
 8003506:	f004 f8f1 	bl	80076ec <osSignalSet>
	}

}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40005000 	.word	0x40005000
 8003518:	20007698 	.word	0x20007698

0800351c <Publisher_state>:
extern rcl_publisher_t publisher_string_scan;
extern rcl_publisher_t publisher_string_pos;
extern UART_HandleTypeDef huart2;
extern char xChar[6],yChar[6];

void Publisher_state(){
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[20] = "finish";
 8003522:	4a11      	ldr	r2, [pc, #68]	@ (8003568 <Publisher_state+0x4c>)
 8003524:	463b      	mov	r3, r7
 8003526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800352a:	6018      	str	r0, [r3, #0]
 800352c:	3304      	adds	r3, #4
 800352e:	8019      	strh	r1, [r3, #0]
 8003530:	3302      	adds	r3, #2
 8003532:	0c0a      	lsrs	r2, r1, #16
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	731a      	strb	r2, [r3, #12]
	msg.data.data = str;
 8003542:	463b      	mov	r3, r7
 8003544:	617b      	str	r3, [r7, #20]
	msg.data.size = strlen(str);
 8003546:	463b      	mov	r3, r7
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc fec1 	bl	80002d0 <strlen>
 800354e:	4603      	mov	r3, r0
 8003550:	61bb      	str	r3, [r7, #24]
	rcl_publish(&publisher_string_scan, &msg, NULL);
 8003552:	f107 0314 	add.w	r3, r7, #20
 8003556:	2200      	movs	r2, #0
 8003558:	4619      	mov	r1, r3
 800355a:	4804      	ldr	r0, [pc, #16]	@ (800356c <Publisher_state+0x50>)
 800355c:	f005 ffbe 	bl	80094dc <rcl_publish>
}
 8003560:	bf00      	nop
 8003562:	3720      	adds	r7, #32
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	080190a4 	.word	0x080190a4
 800356c:	200046c4 	.word	0x200046c4

08003570 <Publisher_pos>:
	msg.data.size = strlen(str);
	rcl_publish(&publisher_string_scan, &msg, NULL);
}

/*double type input X,Y */
void Publisher_pos(){
 8003570:	b580      	push	{r7, lr}
 8003572:	b09c      	sub	sp, #112	@ 0x70
 8003574:	af00      	add	r7, sp, #0
	std_msgs__msg__String msg;
	char str[100] = "";
 8003576:	2300      	movs	r3, #0
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	2260      	movs	r2, #96	@ 0x60
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f013 fccf 	bl	8016f24 <memset>
	sprintf(str, "x%s y%s", xChar,yChar);
 8003586:	4638      	mov	r0, r7
 8003588:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <Publisher_pos+0x48>)
 800358a:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <Publisher_pos+0x4c>)
 800358c:	490c      	ldr	r1, [pc, #48]	@ (80035c0 <Publisher_pos+0x50>)
 800358e:	f013 fb6f 	bl	8016c70 <siprintf>
	msg.data.data = str;
 8003592:	463b      	mov	r3, r7
 8003594:	667b      	str	r3, [r7, #100]	@ 0x64
	msg.data.size = strlen(str);
 8003596:	463b      	mov	r3, r7
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc fe99 	bl	80002d0 <strlen>
 800359e:	4603      	mov	r3, r0
 80035a0:	66bb      	str	r3, [r7, #104]	@ 0x68
	//HAL_UART_Transmit(&huart2, str, 12, 1000);
	rcl_publish(&publisher_string_pos, &msg, NULL);
 80035a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80035a6:	2200      	movs	r2, #0
 80035a8:	4619      	mov	r1, r3
 80035aa:	4806      	ldr	r0, [pc, #24]	@ (80035c4 <Publisher_pos+0x54>)
 80035ac:	f005 ff96 	bl	80094dc <rcl_publish>
}
 80035b0:	bf00      	nop
 80035b2:	3770      	adds	r7, #112	@ 0x70
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	200046f8 	.word	0x200046f8
 80035bc:	200046f0 	.word	0x200046f0
 80035c0:	080190cc 	.word	0x080190cc
 80035c4:	200046c8 	.word	0x200046c8

080035c8 <Reset_Handler>:
 80035c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003600 <LoopFillZerobss+0xe>
 80035cc:	f7ff f958 	bl	8002880 <SystemInit>
 80035d0:	480c      	ldr	r0, [pc, #48]	@ (8003604 <LoopFillZerobss+0x12>)
 80035d2:	490d      	ldr	r1, [pc, #52]	@ (8003608 <LoopFillZerobss+0x16>)
 80035d4:	4a0d      	ldr	r2, [pc, #52]	@ (800360c <LoopFillZerobss+0x1a>)
 80035d6:	2300      	movs	r3, #0
 80035d8:	e002      	b.n	80035e0 <LoopCopyDataInit>

080035da <CopyDataInit>:
 80035da:	58d4      	ldr	r4, [r2, r3]
 80035dc:	50c4      	str	r4, [r0, r3]
 80035de:	3304      	adds	r3, #4

080035e0 <LoopCopyDataInit>:
 80035e0:	18c4      	adds	r4, r0, r3
 80035e2:	428c      	cmp	r4, r1
 80035e4:	d3f9      	bcc.n	80035da <CopyDataInit>
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <LoopFillZerobss+0x1e>)
 80035e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003614 <LoopFillZerobss+0x22>)
 80035ea:	2300      	movs	r3, #0
 80035ec:	e001      	b.n	80035f2 <LoopFillZerobss>

080035ee <FillZerobss>:
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	3204      	adds	r2, #4

080035f2 <LoopFillZerobss>:
 80035f2:	42a2      	cmp	r2, r4
 80035f4:	d3fb      	bcc.n	80035ee <FillZerobss>
 80035f6:	f013 fd89 	bl	801710c <__libc_init_array>
 80035fa:	f7fe fc79 	bl	8001ef0 <main>
 80035fe:	4770      	bx	lr
 8003600:	20020000 	.word	0x20020000
 8003604:	20000000 	.word	0x20000000
 8003608:	20000284 	.word	0x20000284
 800360c:	0801a150 	.word	0x0801a150
 8003610:	20000288 	.word	0x20000288
 8003614:	20010eb4 	.word	0x20010eb4

08003618 <ADC_IRQHandler>:
 8003618:	e7fe      	b.n	8003618 <ADC_IRQHandler>
	...

0800361c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003620:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <HAL_Init+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <HAL_Init+0x40>)
 8003626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800362a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <HAL_Init+0x40>)
 8003632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003638:	4b08      	ldr	r3, [pc, #32]	@ (800365c <HAL_Init+0x40>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a07      	ldr	r2, [pc, #28]	@ (800365c <HAL_Init+0x40>)
 800363e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003644:	2003      	movs	r0, #3
 8003646:	f000 f8d8 	bl	80037fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800364a:	200f      	movs	r0, #15
 800364c:	f7fe ff4a 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003650:	f7fe ff1c 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023c00 	.word	0x40023c00

08003660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_IncTick+0x20>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	461a      	mov	r2, r3
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <HAL_IncTick+0x24>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4413      	add	r3, r2
 8003670:	4a04      	ldr	r2, [pc, #16]	@ (8003684 <HAL_IncTick+0x24>)
 8003672:	6013      	str	r3, [r2, #0]
}
 8003674:	bf00      	nop
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000014 	.word	0x20000014
 8003684:	20008494 	.word	0x20008494

08003688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return uwTick;
 800368c:	4b03      	ldr	r3, [pc, #12]	@ (800369c <HAL_GetTick+0x14>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	4618      	mov	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	20008494 	.word	0x20008494

080036a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036bc:	4013      	ands	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d2:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	60d3      	str	r3, [r2, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ec:	4b04      	ldr	r3, [pc, #16]	@ (8003700 <__NVIC_GetPriorityGrouping+0x18>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0307 	and.w	r3, r3, #7
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db0b      	blt.n	800372e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4907      	ldr	r1, [pc, #28]	@ (800373c <__NVIC_EnableIRQ+0x38>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2001      	movs	r0, #1
 8003726:	fa00 f202 	lsl.w	r2, r0, r2
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e100 	.word	0xe000e100

08003740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db0a      	blt.n	800376a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	490c      	ldr	r1, [pc, #48]	@ (800378c <__NVIC_SetPriority+0x4c>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	440b      	add	r3, r1
 8003764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003768:	e00a      	b.n	8003780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4908      	ldr	r1, [pc, #32]	@ (8003790 <__NVIC_SetPriority+0x50>)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3b04      	subs	r3, #4
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	440b      	add	r3, r1
 800377e:	761a      	strb	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	@ 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f1c3 0307 	rsb	r3, r3, #7
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	bf28      	it	cs
 80037b2:	2304      	movcs	r3, #4
 80037b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d902      	bls.n	80037c4 <NVIC_EncodePriority+0x30>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3b03      	subs	r3, #3
 80037c2:	e000      	b.n	80037c6 <NVIC_EncodePriority+0x32>
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	401a      	ands	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	4313      	orrs	r3, r2
         );
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	@ 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff ff4c 	bl	80036a0 <__NVIC_SetPriorityGrouping>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003822:	f7ff ff61 	bl	80036e8 <__NVIC_GetPriorityGrouping>
 8003826:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	6978      	ldr	r0, [r7, #20]
 800382e:	f7ff ffb1 	bl	8003794 <NVIC_EncodePriority>
 8003832:	4602      	mov	r2, r0
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff ff80 	bl	8003740 <__NVIC_SetPriority>
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff54 	bl	8003704 <__NVIC_EnableIRQ>
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ff0a 	bl	8003688 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e099      	b.n	80039b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a0:	e00f      	b.n	80038c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a2:	f7ff fef1 	bl	8003688 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d908      	bls.n	80038c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e078      	b.n	80039b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e8      	bne.n	80038a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4b38      	ldr	r3, [pc, #224]	@ (80039bc <HAL_DMA_Init+0x158>)
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d107      	bne.n	800392c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0307 	bic.w	r3, r3, #7
 8003942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2b04      	cmp	r3, #4
 8003954:	d117      	bne.n	8003986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fb01 	bl	8003f70 <DMA_CheckFifoParam>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003982:	2301      	movs	r3, #1
 8003984:	e016      	b.n	80039b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fab8 	bl	8003f04 <DMA_CalcBaseAndBitshift>
 8003994:	4603      	mov	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399c:	223f      	movs	r2, #63	@ 0x3f
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	f010803f 	.word	0xf010803f

080039c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_Start_IT+0x26>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e040      	b.n	8003a68 <HAL_DMA_Start_IT+0xa8>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d12f      	bne.n	8003a5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fa4a 	bl	8003ea8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	223f      	movs	r2, #63	@ 0x3f
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0216 	orr.w	r2, r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e005      	b.n	8003a66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a7e:	f7ff fe03 	bl	8003688 <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d008      	beq.n	8003aa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	@ 0x80
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e052      	b.n	8003b48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0216 	bic.w	r2, r2, #22
 8003ab0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_DMA_Abort+0x62>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af2:	e013      	b.n	8003b1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003af4:	f7ff fdc8 	bl	8003688 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d90c      	bls.n	8003b1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e015      	b.n	8003b48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e4      	bne.n	8003af4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2e:	223f      	movs	r2, #63	@ 0x3f
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00c      	b.n	8003b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8003ddc <HAL_DMA_IRQHandler+0x248>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a8e      	ldr	r2, [pc, #568]	@ (8003de0 <HAL_DMA_IRQHandler+0x24c>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bec:	2208      	movs	r2, #8
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	2201      	movs	r2, #1
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	2201      	movs	r2, #1
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2e:	f043 0202 	orr.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	2204      	movs	r2, #4
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c70:	2210      	movs	r2, #16
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d043      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03c      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8e:	2210      	movs	r2, #16
 8003c90:	409a      	lsls	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d024      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e01f      	b.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01b      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e016      	b.n	8003d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0208 	bic.w	r2, r2, #8
 8003cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	2220      	movs	r2, #32
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 808f 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8087 	beq.w	8003e34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d136      	bne.n	8003dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0216 	bic.w	r2, r2, #22
 8003d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x1da>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0208 	bic.w	r2, r2, #8
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d82:	223f      	movs	r2, #63	@ 0x3f
 8003d84:	409a      	lsls	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d07e      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
        }
        return;
 8003daa:	e079      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01d      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d031      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
 8003dd8:	e02c      	b.n	8003e34 <HAL_DMA_IRQHandler+0x2a0>
 8003dda:	bf00      	nop
 8003ddc:	20000004 	.word	0x20000004
 8003de0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
 8003df4:	e01e      	b.n	8003e34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10f      	bne.n	8003e24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0210 	bic.w	r2, r2, #16
 8003e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d032      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2205      	movs	r2, #5
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d307      	bcc.n	8003e7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f2      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x2cc>
 8003e7a:	e000      	b.n	8003e7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d005      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	4798      	blx	r3
 8003e9e:	e000      	b.n	8003ea2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ea0:	bf00      	nop
    }
  }
}
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d108      	bne.n	8003ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ee6:	e007      	b.n	8003ef8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	3b10      	subs	r3, #16
 8003f14:	4a14      	ldr	r2, [pc, #80]	@ (8003f68 <DMA_CalcBaseAndBitshift+0x64>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f1e:	4a13      	ldr	r2, [pc, #76]	@ (8003f6c <DMA_CalcBaseAndBitshift+0x68>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d909      	bls.n	8003f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f44:	e007      	b.n	8003f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	aaaaaaab 	.word	0xaaaaaaab
 8003f6c:	08019110 	.word	0x08019110

08003f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11f      	bne.n	8003fca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d856      	bhi.n	800403e <DMA_CheckFifoParam+0xce>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <DMA_CheckFifoParam+0x28>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fbb 	.word	0x08003fbb
 8003fa0:	08003fa9 	.word	0x08003fa9
 8003fa4:	0800403f 	.word	0x0800403f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d046      	beq.n	8004042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e043      	b.n	8004042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fc2:	d140      	bne.n	8004046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e03d      	b.n	8004046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd2:	d121      	bne.n	8004018 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d837      	bhi.n	800404a <DMA_CheckFifoParam+0xda>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <DMA_CheckFifoParam+0x70>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ff7 	.word	0x08003ff7
 8003fe8:	08003ff1 	.word	0x08003ff1
 8003fec:	08004009 	.word	0x08004009
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e030      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d025      	beq.n	800404e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004006:	e022      	b.n	800404e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004010:	d11f      	bne.n	8004052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004016:	e01c      	b.n	8004052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d903      	bls.n	8004026 <DMA_CheckFifoParam+0xb6>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d003      	beq.n	800402c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004024:	e018      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
      break;
 800402a:	e015      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e00b      	b.n	8004056 <DMA_CheckFifoParam+0xe6>
      break;
 800403e:	bf00      	nop
 8004040:	e00a      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004042:	bf00      	nop
 8004044:	e008      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004046:	bf00      	nop
 8004048:	e006      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 800404a:	bf00      	nop
 800404c:	e004      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;   
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
    }
  } 
  
  return status; 
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	@ 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e165      	b.n	8004350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	f040 8154 	bne.w	800434a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d005      	beq.n	80040ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d017      	beq.n	8004158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80ae 	beq.w	800434a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b5d      	ldr	r3, [pc, #372]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004368 <HAL_GPIO_Init+0x300>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041fe:	4b5a      	ldr	r3, [pc, #360]	@ (8004368 <HAL_GPIO_Init+0x300>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420a:	4a58      	ldr	r2, [pc, #352]	@ (800436c <HAL_GPIO_Init+0x304>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4f      	ldr	r2, [pc, #316]	@ (8004370 <HAL_GPIO_Init+0x308>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d025      	beq.n	8004282 <HAL_GPIO_Init+0x21a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a4e      	ldr	r2, [pc, #312]	@ (8004374 <HAL_GPIO_Init+0x30c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01f      	beq.n	800427e <HAL_GPIO_Init+0x216>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a4d      	ldr	r2, [pc, #308]	@ (8004378 <HAL_GPIO_Init+0x310>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d019      	beq.n	800427a <HAL_GPIO_Init+0x212>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4c      	ldr	r2, [pc, #304]	@ (800437c <HAL_GPIO_Init+0x314>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <HAL_GPIO_Init+0x20e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <HAL_GPIO_Init+0x318>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00d      	beq.n	8004272 <HAL_GPIO_Init+0x20a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4a      	ldr	r2, [pc, #296]	@ (8004384 <HAL_GPIO_Init+0x31c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <HAL_GPIO_Init+0x206>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a49      	ldr	r2, [pc, #292]	@ (8004388 <HAL_GPIO_Init+0x320>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <HAL_GPIO_Init+0x202>
 8004266:	2306      	movs	r3, #6
 8004268:	e00c      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 800426a:	2307      	movs	r3, #7
 800426c:	e00a      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 800426e:	2305      	movs	r3, #5
 8004270:	e008      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 8004272:	2304      	movs	r3, #4
 8004274:	e006      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 8004276:	2303      	movs	r3, #3
 8004278:	e004      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 800427a:	2302      	movs	r3, #2
 800427c:	e002      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <HAL_GPIO_Init+0x21c>
 8004282:	2300      	movs	r3, #0
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f002 0203 	and.w	r2, r2, #3
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	4093      	lsls	r3, r2
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004294:	4935      	ldr	r1, [pc, #212]	@ (800436c <HAL_GPIO_Init+0x304>)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	089b      	lsrs	r3, r3, #2
 800429a:	3302      	adds	r3, #2
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a2:	4b3a      	ldr	r3, [pc, #232]	@ (800438c <HAL_GPIO_Init+0x324>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c6:	4a31      	ldr	r2, [pc, #196]	@ (800438c <HAL_GPIO_Init+0x324>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042cc:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <HAL_GPIO_Init+0x324>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f0:	4a26      	ldr	r2, [pc, #152]	@ (800438c <HAL_GPIO_Init+0x324>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042f6:	4b25      	ldr	r3, [pc, #148]	@ (800438c <HAL_GPIO_Init+0x324>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	43db      	mvns	r3, r3
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	4013      	ands	r3, r2
 8004304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <HAL_GPIO_Init+0x324>)
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <HAL_GPIO_Init+0x324>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004344:	4a11      	ldr	r2, [pc, #68]	@ (800438c <HAL_GPIO_Init+0x324>)
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b0f      	cmp	r3, #15
 8004354:	f67f ae96 	bls.w	8004084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop
 800435c:	3724      	adds	r7, #36	@ 0x24
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40023800 	.word	0x40023800
 800436c:	40013800 	.word	0x40013800
 8004370:	40020000 	.word	0x40020000
 8004374:	40020400 	.word	0x40020400
 8004378:	40020800 	.word	0x40020800
 800437c:	40020c00 	.word	0x40020c00
 8004380:	40021000 	.word	0x40021000
 8004384:	40021400 	.word	0x40021400
 8004388:	40021800 	.word	0x40021800
 800438c:	40013c00 	.word	0x40013c00

08004390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
 80043cc:	4613      	mov	r3, r2
 80043ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043dc:	e003      	b.n	80043e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043de:	887b      	ldrh	r3, [r7, #2]
 80043e0:	041a      	lsls	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	619a      	str	r2, [r3, #24]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440a:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd fd0c 	bl	8001e30 <HAL_GPIO_EXTI_Callback>
  }
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40013c00 	.word	0x40013c00

08004424 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	4a1f      	ldr	r2, [pc, #124]	@ (80044b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	@ 0x40
 800443e:	4b1d      	ldr	r3, [pc, #116]	@ (80044b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800444a:	4b1b      	ldr	r3, [pc, #108]	@ (80044b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004450:	f7ff f91a 	bl	8003688 <HAL_GetTick>
 8004454:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004456:	e009      	b.n	800446c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004458:	f7ff f916 	bl	8003688 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004466:	d901      	bls.n	800446c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e01f      	b.n	80044ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800446c:	4b13      	ldr	r3, [pc, #76]	@ (80044bc <HAL_PWREx_EnableOverDrive+0x98>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004478:	d1ee      	bne.n	8004458 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004480:	f7ff f902 	bl	8003688 <HAL_GetTick>
 8004484:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004486:	e009      	b.n	800449c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004488:	f7ff f8fe 	bl	8003688 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004496:	d901      	bls.n	800449c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e007      	b.n	80044ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800449c:	4b07      	ldr	r3, [pc, #28]	@ (80044bc <HAL_PWREx_EnableOverDrive+0x98>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044a8:	d1ee      	bne.n	8004488 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	40023800 	.word	0x40023800
 80044b8:	420e0040 	.word	0x420e0040
 80044bc:	40007000 	.word	0x40007000
 80044c0:	420e0044 	.word	0x420e0044

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0cc      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d8:	4b68      	ldr	r3, [pc, #416]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d90c      	bls.n	8004500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b65      	ldr	r3, [pc, #404]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b63      	ldr	r3, [pc, #396]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0b8      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d020      	beq.n	800454e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004518:	4b59      	ldr	r3, [pc, #356]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a58      	ldr	r2, [pc, #352]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004530:	4b53      	ldr	r3, [pc, #332]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a52      	ldr	r2, [pc, #328]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800453a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	494d      	ldr	r1, [pc, #308]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d044      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b47      	ldr	r3, [pc, #284]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	2b03      	cmp	r3, #3
 8004580:	d107      	bne.n	8004592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	4b3f      	ldr	r3, [pc, #252]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e067      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045a2:	4b37      	ldr	r3, [pc, #220]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 0203 	bic.w	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4934      	ldr	r1, [pc, #208]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b4:	f7ff f868 	bl	8003688 <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	e00a      	b.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045bc:	f7ff f864 	bl	8003688 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e04f      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 020c 	and.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d1eb      	bne.n	80045bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e4:	4b25      	ldr	r3, [pc, #148]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20c      	bcs.n	800460c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b22      	ldr	r3, [pc, #136]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b20      	ldr	r3, [pc, #128]	@ (800467c <HAL_RCC_ClockConfig+0x1b8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e032      	b.n	8004672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004618:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4916      	ldr	r1, [pc, #88]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004636:	4b12      	ldr	r3, [pc, #72]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	490e      	ldr	r1, [pc, #56]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800464a:	f000 f887 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800464e:	4602      	mov	r2, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	091b      	lsrs	r3, r3, #4
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	490a      	ldr	r1, [pc, #40]	@ (8004684 <HAL_RCC_ClockConfig+0x1c0>)
 800465c:	5ccb      	ldrb	r3, [r1, r3]
 800465e:	fa22 f303 	lsr.w	r3, r2, r3
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004666:	4b09      	ldr	r3, [pc, #36]	@ (800468c <HAL_RCC_ClockConfig+0x1c8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd ff3a 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00
 8004680:	40023800 	.word	0x40023800
 8004684:	080190f8 	.word	0x080190f8
 8004688:	20000004 	.word	0x20000004
 800468c:	20000010 	.word	0x20000010

08004690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046ac:	f7ff fff0 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08019108 	.word	0x08019108

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046d4:	f7ff ffdc 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0b5b      	lsrs	r3, r3, #13
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	08019108 	.word	0x08019108

080046f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	220f      	movs	r2, #15
 8004706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004708:	4b12      	ldr	r3, [pc, #72]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0203 	and.w	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004720:	4b0c      	ldr	r3, [pc, #48]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800472c:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <HAL_RCC_GetClockConfig+0x5c>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800473a:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <HAL_RCC_GetClockConfig+0x60>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 020f 	and.w	r2, r3, #15
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	601a      	str	r2, [r3, #0]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	40023c00 	.word	0x40023c00

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b0ae      	sub	sp, #184	@ 0xb8
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004782:	4bcb      	ldr	r3, [pc, #812]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
 800478a:	2b0c      	cmp	r3, #12
 800478c:	f200 8206 	bhi.w	8004b9c <HAL_RCC_GetSysClockFreq+0x440>
 8004790:	a201      	add	r2, pc, #4	@ (adr r2, 8004798 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047cd 	.word	0x080047cd
 800479c:	08004b9d 	.word	0x08004b9d
 80047a0:	08004b9d 	.word	0x08004b9d
 80047a4:	08004b9d 	.word	0x08004b9d
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	08004b9d 	.word	0x08004b9d
 80047b0:	08004b9d 	.word	0x08004b9d
 80047b4:	08004b9d 	.word	0x08004b9d
 80047b8:	080047dd 	.word	0x080047dd
 80047bc:	08004b9d 	.word	0x08004b9d
 80047c0:	08004b9d 	.word	0x08004b9d
 80047c4:	08004b9d 	.word	0x08004b9d
 80047c8:	080049cd 	.word	0x080049cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x358>)
 80047ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80047d2:	e1e7      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d4:	4bb8      	ldr	r3, [pc, #736]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80047d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047da:	e1e3      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047dc:	4bb4      	ldr	r3, [pc, #720]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e8:	4bb1      	ldr	r3, [pc, #708]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d071      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f4:	4bae      	ldr	r3, [pc, #696]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	099b      	lsrs	r3, r3, #6
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800481a:	4622      	mov	r2, r4
 800481c:	462b      	mov	r3, r5
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	0159      	lsls	r1, r3, #5
 8004828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482c:	0150      	lsls	r0, r2, #5
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4621      	mov	r1, r4
 8004834:	1a51      	subs	r1, r2, r1
 8004836:	6439      	str	r1, [r7, #64]	@ 0x40
 8004838:	4629      	mov	r1, r5
 800483a:	eb63 0301 	sbc.w	r3, r3, r1
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800484c:	4649      	mov	r1, r9
 800484e:	018b      	lsls	r3, r1, #6
 8004850:	4641      	mov	r1, r8
 8004852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004856:	4641      	mov	r1, r8
 8004858:	018a      	lsls	r2, r1, #6
 800485a:	4641      	mov	r1, r8
 800485c:	1a51      	subs	r1, r2, r1
 800485e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004860:	4649      	mov	r1, r9
 8004862:	eb63 0301 	sbc.w	r3, r3, r1
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004874:	4649      	mov	r1, r9
 8004876:	00cb      	lsls	r3, r1, #3
 8004878:	4641      	mov	r1, r8
 800487a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800487e:	4641      	mov	r1, r8
 8004880:	00ca      	lsls	r2, r1, #3
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	4603      	mov	r3, r0
 8004888:	4622      	mov	r2, r4
 800488a:	189b      	adds	r3, r3, r2
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
 800488e:	462b      	mov	r3, r5
 8004890:	460a      	mov	r2, r1
 8004892:	eb42 0303 	adc.w	r3, r2, r3
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048a4:	4629      	mov	r1, r5
 80048a6:	024b      	lsls	r3, r1, #9
 80048a8:	4621      	mov	r1, r4
 80048aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ae:	4621      	mov	r1, r4
 80048b0:	024a      	lsls	r2, r1, #9
 80048b2:	4610      	mov	r0, r2
 80048b4:	4619      	mov	r1, r3
 80048b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80048c8:	f7fc f9ee 	bl	8000ca8 <__aeabi_uldivmod>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4613      	mov	r3, r2
 80048d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048d6:	e067      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d8:	4b75      	ldr	r3, [pc, #468]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	099b      	lsrs	r3, r3, #6
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80048e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048f2:	2300      	movs	r3, #0
 80048f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800492c:	4649      	mov	r1, r9
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4641      	mov	r1, r8
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4641      	mov	r1, r8
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4641      	mov	r1, r8
 800493c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004940:	4649      	mov	r1, r9
 8004942:	eb63 0b01 	sbc.w	fp, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004952:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800495a:	4692      	mov	sl, r2
 800495c:	469b      	mov	fp, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb1a 0303 	adds.w	r3, sl, r3
 8004964:	623b      	str	r3, [r7, #32]
 8004966:	462b      	mov	r3, r5
 8004968:	eb4b 0303 	adc.w	r3, fp, r3
 800496c:	627b      	str	r3, [r7, #36]	@ 0x24
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004990:	2200      	movs	r2, #0
 8004992:	673b      	str	r3, [r7, #112]	@ 0x70
 8004994:	677a      	str	r2, [r7, #116]	@ 0x74
 8004996:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800499a:	f7fc f985 	bl	8000ca8 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4613      	mov	r3, r2
 80049a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a8:	4b41      	ldr	r3, [pc, #260]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	3301      	adds	r3, #1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80049ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049ca:	e0eb      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049cc:	4b38      	ldr	r3, [pc, #224]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d06b      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049e4:	4b32      	ldr	r3, [pc, #200]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x354>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	099b      	lsrs	r3, r3, #6
 80049ea:	2200      	movs	r2, #0
 80049ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f8:	2300      	movs	r3, #0
 80049fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80049fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004a00:	4622      	mov	r2, r4
 8004a02:	462b      	mov	r3, r5
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0159      	lsls	r1, r3, #5
 8004a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a12:	0150      	lsls	r0, r2, #5
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4621      	mov	r1, r4
 8004a1a:	1a51      	subs	r1, r2, r1
 8004a1c:	61b9      	str	r1, [r7, #24]
 8004a1e:	4629      	mov	r1, r5
 8004a20:	eb63 0301 	sbc.w	r3, r3, r1
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	f04f 0300 	mov.w	r3, #0
 8004a2e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004a32:	4659      	mov	r1, fp
 8004a34:	018b      	lsls	r3, r1, #6
 8004a36:	4651      	mov	r1, sl
 8004a38:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	018a      	lsls	r2, r1, #6
 8004a40:	4651      	mov	r1, sl
 8004a42:	ebb2 0801 	subs.w	r8, r2, r1
 8004a46:	4659      	mov	r1, fp
 8004a48:	eb63 0901 	sbc.w	r9, r3, r1
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a60:	4690      	mov	r8, r2
 8004a62:	4699      	mov	r9, r3
 8004a64:	4623      	mov	r3, r4
 8004a66:	eb18 0303 	adds.w	r3, r8, r3
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a80:	4629      	mov	r1, r5
 8004a82:	024b      	lsls	r3, r1, #9
 8004a84:	4621      	mov	r1, r4
 8004a86:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	024a      	lsls	r2, r1, #9
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4619      	mov	r1, r3
 8004a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a96:	2200      	movs	r2, #0
 8004a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a9a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004aa0:	f7fc f902 	bl	8000ca8 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004aae:	e065      	b.n	8004b7c <HAL_RCC_GetSysClockFreq+0x420>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	099b      	lsrs	r3, r3, #6
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004acc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ace:	2300      	movs	r3, #0
 8004ad0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ad6:	4642      	mov	r2, r8
 8004ad8:	464b      	mov	r3, r9
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	0159      	lsls	r1, r3, #5
 8004ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae8:	0150      	lsls	r0, r2, #5
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4641      	mov	r1, r8
 8004af0:	1a51      	subs	r1, r2, r1
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	4649      	mov	r1, r9
 8004af6:	eb63 0301 	sbc.w	r3, r3, r1
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b12:	4651      	mov	r1, sl
 8004b14:	018a      	lsls	r2, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	1a54      	subs	r4, r2, r1
 8004b1a:	4659      	mov	r1, fp
 8004b1c:	eb63 0501 	sbc.w	r5, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	00eb      	lsls	r3, r5, #3
 8004b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b2e:	00e2      	lsls	r2, r4, #3
 8004b30:	4614      	mov	r4, r2
 8004b32:	461d      	mov	r5, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	18e3      	adds	r3, r4, r3
 8004b38:	603b      	str	r3, [r7, #0]
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	eb45 0303 	adc.w	r3, r5, r3
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b4e:	4629      	mov	r1, r5
 8004b50:	028b      	lsls	r3, r1, #10
 8004b52:	4621      	mov	r1, r4
 8004b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b58:	4621      	mov	r1, r4
 8004b5a:	028a      	lsls	r2, r1, #10
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b64:	2200      	movs	r2, #0
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b6e:	f7fc f89b 	bl	8000ca8 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4613      	mov	r3, r2
 8004b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	0f1b      	lsrs	r3, r3, #28
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004b8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ba2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	37b8      	adds	r7, #184	@ 0xb8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e28d      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8083 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bdc:	4b94      	ldr	r3, [pc, #592]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d019      	beq.n	8004c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004be8:	4b91      	ldr	r3, [pc, #580]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bf4:	4b8e      	ldr	r3, [pc, #568]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c00:	d00c      	beq.n	8004c1c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c02:	4b8b      	ldr	r3, [pc, #556]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d112      	bne.n	8004c34 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0e:	4b88      	ldr	r3, [pc, #544]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c1a:	d10b      	bne.n	8004c34 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1c:	4b84      	ldr	r3, [pc, #528]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d05b      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x124>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d157      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e25a      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCC_OscConfig+0x90>
 8004c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a7b      	ldr	r2, [pc, #492]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e01d      	b.n	8004c88 <HAL_RCC_OscConfig+0xcc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCC_OscConfig+0xb4>
 8004c56:	4b76      	ldr	r3, [pc, #472]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a75      	ldr	r2, [pc, #468]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	4b73      	ldr	r3, [pc, #460]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a72      	ldr	r2, [pc, #456]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e00b      	b.n	8004c88 <HAL_RCC_OscConfig+0xcc>
 8004c70:	4b6f      	ldr	r3, [pc, #444]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a6e      	ldr	r2, [pc, #440]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6b      	ldr	r2, [pc, #428]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d013      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fe fcfa 	bl	8003688 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c98:	f7fe fcf6 	bl	8003688 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b64      	cmp	r3, #100	@ 0x64
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e21f      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0xdc>
 8004cb6:	e014      	b.n	8004ce2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fce6 	bl	8003688 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7fe fce2 	bl	8003688 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	@ 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e20b      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd2:	4b57      	ldr	r3, [pc, #348]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x104>
 8004cde:	e000      	b.n	8004ce2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d06f      	beq.n	8004dce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cee:	4b50      	ldr	r3, [pc, #320]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 030c 	and.w	r3, r3, #12
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d017      	beq.n	8004d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d105      	bne.n	8004d12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d06:	4b4a      	ldr	r3, [pc, #296]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d12:	4b47      	ldr	r3, [pc, #284]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d1a:	2b0c      	cmp	r3, #12
 8004d1c:	d11c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1e:	4b44      	ldr	r3, [pc, #272]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d116      	bne.n	8004d58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	4b41      	ldr	r3, [pc, #260]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d005      	beq.n	8004d42 <HAL_RCC_OscConfig+0x186>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e1d3      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d42:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4937      	ldr	r1, [pc, #220]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d56:	e03a      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d020      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d60:	4b34      	ldr	r3, [pc, #208]	@ (8004e34 <HAL_RCC_OscConfig+0x278>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d66:	f7fe fc8f 	bl	8003688 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d6e:	f7fe fc8b 	bl	8003688 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e1b4      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d80:	4b2b      	ldr	r3, [pc, #172]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	4b28      	ldr	r3, [pc, #160]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	4925      	ldr	r1, [pc, #148]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	600b      	str	r3, [r1, #0]
 8004da0:	e015      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da2:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCC_OscConfig+0x278>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fe fc6e 	bl	8003688 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db0:	f7fe fc6a 	bl	8003688 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e193      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d036      	beq.n	8004e48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <HAL_RCC_OscConfig+0x27c>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fe fc4e 	bl	8003688 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df0:	f7fe fc4a 	bl	8003688 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e173      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e02:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <HAL_RCC_OscConfig+0x274>)
 8004e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x234>
 8004e0e:	e01b      	b.n	8004e48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fe fc37 	bl	8003688 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1c:	e00e      	b.n	8004e3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fe fc33 	bl	8003688 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d907      	bls.n	8004e3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e15c      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	42470000 	.word	0x42470000
 8004e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3c:	4b8a      	ldr	r3, [pc, #552]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ea      	bne.n	8004e1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8097 	beq.w	8004f84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e5a:	4b83      	ldr	r3, [pc, #524]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10f      	bne.n	8004e86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	60bb      	str	r3, [r7, #8]
 8004e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e76:	4b7c      	ldr	r3, [pc, #496]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e86:	4b79      	ldr	r3, [pc, #484]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d118      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e92:	4b76      	ldr	r3, [pc, #472]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a75      	ldr	r2, [pc, #468]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe fbf3 	bl	8003688 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea4:	e008      	b.n	8004eb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea6:	f7fe fbef 	bl	8003688 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e118      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb8:	4b6c      	ldr	r3, [pc, #432]	@ (800506c <HAL_RCC_OscConfig+0x4b0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <HAL_RCC_OscConfig+0x31e>
 8004ecc:	4b66      	ldr	r3, [pc, #408]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed0:	4a65      	ldr	r2, [pc, #404]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed8:	e01c      	b.n	8004f14 <HAL_RCC_OscConfig+0x358>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x340>
 8004ee2:	4b61      	ldr	r3, [pc, #388]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a60      	ldr	r2, [pc, #384]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eee:	4b5e      	ldr	r3, [pc, #376]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	4a5d      	ldr	r2, [pc, #372]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0x358>
 8004efc:	4b5a      	ldr	r3, [pc, #360]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f00:	4a59      	ldr	r2, [pc, #356]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f08:	4b57      	ldr	r3, [pc, #348]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0c:	4a56      	ldr	r2, [pc, #344]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	f023 0304 	bic.w	r3, r3, #4
 8004f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d015      	beq.n	8004f48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fbb4 	bl	8003688 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe fbb0 	bl	8003688 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0d7      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0ee      	beq.n	8004f24 <HAL_RCC_OscConfig+0x368>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fe fb9e 	bl	8003688 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4e:	e00a      	b.n	8004f66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f50:	f7fe fb9a 	bl	8003688 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e0c1      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f66:	4b40      	ldr	r3, [pc, #256]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ee      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f78:	4b3b      	ldr	r3, [pc, #236]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80ad 	beq.w	80050e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8e:	4b36      	ldr	r3, [pc, #216]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 030c 	and.w	r3, r3, #12
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d060      	beq.n	800505c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d145      	bne.n	800502e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b33      	ldr	r3, [pc, #204]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fe fb6e 	bl	8003688 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fe fb6a 	bl	8003688 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e093      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc2:	4b29      	ldr	r3, [pc, #164]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff8:	071b      	lsls	r3, r3, #28
 8004ffa:	491b      	ldr	r1, [pc, #108]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005000:	4b1b      	ldr	r3, [pc, #108]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fe fb3f 	bl	8003688 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800500e:	f7fe fb3b 	bl	8003688 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e064      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005020:	4b11      	ldr	r3, [pc, #68]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x452>
 800502c:	e05c      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <HAL_RCC_OscConfig+0x4b4>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe fb28 	bl	8003688 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7fe fb24 	bl	8003688 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e04d      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <HAL_RCC_OscConfig+0x4ac>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x480>
 800505a:	e045      	b.n	80050e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e040      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
 8005068:	40023800 	.word	0x40023800
 800506c:	40007000 	.word	0x40007000
 8005070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005074:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <HAL_RCC_OscConfig+0x538>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d030      	beq.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d129      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d122      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d119      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	3b01      	subs	r3, #1
 80050be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d10f      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800

080050f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e041      	b.n	800518e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f839 	bl	8005196 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f000 fb9a 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d001      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e04e      	b.n	8005262 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a23      	ldr	r2, [pc, #140]	@ (8005270 <HAL_TIM_Base_Start_IT+0xc4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d022      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ee:	d01d      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <HAL_TIM_Base_Start_IT+0xc8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d018      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <HAL_TIM_Base_Start_IT+0xcc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1c      	ldr	r2, [pc, #112]	@ (800527c <HAL_TIM_Base_Start_IT+0xd0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1b      	ldr	r2, [pc, #108]	@ (8005280 <HAL_TIM_Base_Start_IT+0xd4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a19      	ldr	r2, [pc, #100]	@ (8005284 <HAL_TIM_Base_Start_IT+0xd8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x80>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a18      	ldr	r2, [pc, #96]	@ (8005288 <HAL_TIM_Base_Start_IT+0xdc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d111      	bne.n	8005250 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d010      	beq.n	8005260 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800524e:	e007      	b.n	8005260 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40010000 	.word	0x40010000
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800
 800527c:	40000c00 	.word	0x40000c00
 8005280:	40010400 	.word	0x40010400
 8005284:	40014000 	.word	0x40014000
 8005288:	40001800 	.word	0x40001800

0800528c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e041      	b.n	8005322 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fd fb4e 	bl	8002954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4619      	mov	r1, r3
 80052ca:	4610      	mov	r0, r2
 80052cc:	f000 fad0 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d109      	bne.n	8005350 <HAL_TIM_PWM_Start+0x24>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e022      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d109      	bne.n	800536a <HAL_TIM_PWM_Start+0x3e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	bf14      	ite	ne
 8005362:	2301      	movne	r3, #1
 8005364:	2300      	moveq	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	e015      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d109      	bne.n	8005384 <HAL_TIM_PWM_Start+0x58>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	bf14      	ite	ne
 800537c:	2301      	movne	r3, #1
 800537e:	2300      	moveq	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e008      	b.n	8005396 <HAL_TIM_PWM_Start+0x6a>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	bf14      	ite	ne
 8005390:	2301      	movne	r3, #1
 8005392:	2300      	moveq	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e07c      	b.n	8005498 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <HAL_TIM_PWM_Start+0x82>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053ac:	e013      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d104      	bne.n	80053be <HAL_TIM_PWM_Start+0x92>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053bc:	e00b      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_PWM_Start+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	e003      	b.n	80053d6 <HAL_TIM_PWM_Start+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2201      	movs	r2, #1
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fca2 	bl	8005d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2d      	ldr	r2, [pc, #180]	@ (80054a0 <HAL_TIM_PWM_Start+0x174>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_PWM_Start+0xcc>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2c      	ldr	r2, [pc, #176]	@ (80054a4 <HAL_TIM_PWM_Start+0x178>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_PWM_Start+0xd0>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_TIM_PWM_Start+0xd2>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a22      	ldr	r2, [pc, #136]	@ (80054a0 <HAL_TIM_PWM_Start+0x174>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <HAL_TIM_PWM_Start+0x17c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <HAL_TIM_PWM_Start+0x180>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <HAL_TIM_PWM_Start+0x184>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <HAL_TIM_PWM_Start+0x178>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	@ (80054b4 <HAL_TIM_PWM_Start+0x188>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIM_PWM_Start+0x136>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <HAL_TIM_PWM_Start+0x18c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d111      	bne.n	8005486 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d010      	beq.n	8005496 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	e007      	b.n	8005496 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40010400 	.word	0x40010400
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40001800 	.word	0x40001800

080054bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d020      	beq.n	8005520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0202 	mvn.w	r2, #2
 80054f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f994 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f986 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f997 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0204 	mvn.w	r2, #4
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2202      	movs	r2, #2
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f96e 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f960 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f971 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0308 	and.w	r3, r3, #8
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0208 	mvn.w	r2, #8
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f948 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f93a 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f94b 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0310 	and.w	r3, r3, #16
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01b      	beq.n	8005604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0210 	mvn.w	r2, #16
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2208      	movs	r2, #8
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f922 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f914 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f925 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00c      	beq.n	8005628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0201 	mvn.w	r2, #1
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fc fd16 	bl	8002054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00c      	beq.n	800564c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fc1a 	bl	8005e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8f6 	bl	800585c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00c      	beq.n	8005694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0220 	mvn.w	r2, #32
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fbec 	bl	8005e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056b6:	2302      	movs	r3, #2
 80056b8:	e0ae      	b.n	8005818 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	f200 809f 	bhi.w	8005808 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ca:	a201      	add	r2, pc, #4	@ (adr r2, 80056d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	08005705 	.word	0x08005705
 80056d4:	08005809 	.word	0x08005809
 80056d8:	08005809 	.word	0x08005809
 80056dc:	08005809 	.word	0x08005809
 80056e0:	08005745 	.word	0x08005745
 80056e4:	08005809 	.word	0x08005809
 80056e8:	08005809 	.word	0x08005809
 80056ec:	08005809 	.word	0x08005809
 80056f0:	08005787 	.word	0x08005787
 80056f4:	08005809 	.word	0x08005809
 80056f8:	08005809 	.word	0x08005809
 80056fc:	08005809 	.word	0x08005809
 8005700:	080057c7 	.word	0x080057c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f95c 	bl	80059c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0208 	orr.w	r2, r2, #8
 800571e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0204 	bic.w	r2, r2, #4
 800572e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6999      	ldr	r1, [r3, #24]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	619a      	str	r2, [r3, #24]
      break;
 8005742:	e064      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f9ac 	bl	8005aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800575e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]
      break;
 8005784:	e043      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68b9      	ldr	r1, [r7, #8]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 fa01 	bl	8005b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0208 	orr.w	r2, r2, #8
 80057a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69da      	ldr	r2, [r3, #28]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0204 	bic.w	r2, r2, #4
 80057b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69d9      	ldr	r1, [r3, #28]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	61da      	str	r2, [r3, #28]
      break;
 80057c4:	e023      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fa55 	bl	8005c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69da      	ldr	r2, [r3, #28]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69d9      	ldr	r1, [r3, #28]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	61da      	str	r2, [r3, #28]
      break;
 8005806:	e002      	b.n	800580e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	75fb      	strb	r3, [r7, #23]
      break;
 800580c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a46      	ldr	r2, [pc, #280]	@ (800599c <TIM_Base_SetConfig+0x12c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a43      	ldr	r2, [pc, #268]	@ (80059a0 <TIM_Base_SetConfig+0x130>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a42      	ldr	r2, [pc, #264]	@ (80059a4 <TIM_Base_SetConfig+0x134>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a41      	ldr	r2, [pc, #260]	@ (80059a8 <TIM_Base_SetConfig+0x138>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a40      	ldr	r2, [pc, #256]	@ (80059ac <TIM_Base_SetConfig+0x13c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a35      	ldr	r2, [pc, #212]	@ (800599c <TIM_Base_SetConfig+0x12c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d02b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d0:	d027      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a32      	ldr	r2, [pc, #200]	@ (80059a0 <TIM_Base_SetConfig+0x130>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d023      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a31      	ldr	r2, [pc, #196]	@ (80059a4 <TIM_Base_SetConfig+0x134>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01f      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a30      	ldr	r2, [pc, #192]	@ (80059a8 <TIM_Base_SetConfig+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a2f      	ldr	r2, [pc, #188]	@ (80059ac <TIM_Base_SetConfig+0x13c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d017      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2e      	ldr	r2, [pc, #184]	@ (80059b0 <TIM_Base_SetConfig+0x140>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2d      	ldr	r2, [pc, #180]	@ (80059b4 <TIM_Base_SetConfig+0x144>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2c      	ldr	r2, [pc, #176]	@ (80059b8 <TIM_Base_SetConfig+0x148>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2b      	ldr	r2, [pc, #172]	@ (80059bc <TIM_Base_SetConfig+0x14c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a2a      	ldr	r2, [pc, #168]	@ (80059c0 <TIM_Base_SetConfig+0x150>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a29      	ldr	r2, [pc, #164]	@ (80059c4 <TIM_Base_SetConfig+0x154>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a10      	ldr	r2, [pc, #64]	@ (800599c <TIM_Base_SetConfig+0x12c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a12      	ldr	r2, [pc, #72]	@ (80059ac <TIM_Base_SetConfig+0x13c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d103      	bne.n	8005970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b01      	cmp	r3, #1
 8005980:	d105      	bne.n	800598e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f023 0201 	bic.w	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	611a      	str	r2, [r3, #16]
  }
}
 800598e:	bf00      	nop
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800
 80059bc:	40001800 	.word	0x40001800
 80059c0:	40001c00 	.word	0x40001c00
 80059c4:	40002000 	.word	0x40002000

080059c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f023 0201 	bic.w	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0303 	bic.w	r3, r3, #3
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f023 0302 	bic.w	r3, r3, #2
 8005a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a20      	ldr	r2, [pc, #128]	@ (8005aa0 <TIM_OC1_SetConfig+0xd8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_OC1_SetConfig+0x64>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1f      	ldr	r2, [pc, #124]	@ (8005aa4 <TIM_OC1_SetConfig+0xdc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d10c      	bne.n	8005a46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0308 	bic.w	r3, r3, #8
 8005a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f023 0304 	bic.w	r3, r3, #4
 8005a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <TIM_OC1_SetConfig+0xd8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC1_SetConfig+0x8e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a14      	ldr	r2, [pc, #80]	@ (8005aa4 <TIM_OC1_SetConfig+0xdc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d111      	bne.n	8005a7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40010400 	.word	0x40010400

08005aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0210 	bic.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 0320 	bic.w	r3, r3, #32
 8005af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a22      	ldr	r2, [pc, #136]	@ (8005b8c <TIM_OC2_SetConfig+0xe4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_OC2_SetConfig+0x68>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a21      	ldr	r2, [pc, #132]	@ (8005b90 <TIM_OC2_SetConfig+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC2_SetConfig+0xe4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC2_SetConfig+0x94>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_OC2_SetConfig+0xe8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d113      	bne.n	8005b64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	621a      	str	r2, [r3, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40010000 	.word	0x40010000
 8005b90:	40010400 	.word	0x40010400

08005b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a21      	ldr	r2, [pc, #132]	@ (8005c74 <TIM_OC3_SetConfig+0xe0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d003      	beq.n	8005bfa <TIM_OC3_SetConfig+0x66>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	@ (8005c78 <TIM_OC3_SetConfig+0xe4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10d      	bne.n	8005c16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a16      	ldr	r2, [pc, #88]	@ (8005c74 <TIM_OC3_SetConfig+0xe0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x92>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a15      	ldr	r2, [pc, #84]	@ (8005c78 <TIM_OC3_SetConfig+0xe4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a12      	ldr	r2, [pc, #72]	@ (8005d20 <TIM_OC4_SetConfig+0xa4>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC4_SetConfig+0x68>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a11      	ldr	r2, [pc, #68]	@ (8005d24 <TIM_OC4_SetConfig+0xa8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	401a      	ands	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1a      	ldr	r2, [r3, #32]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	431a      	orrs	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e05a      	b.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd8:	d01d      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a15      	ldr	r2, [pc, #84]	@ (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10c      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40001800 	.word	0x40001800

08005e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e042      	b.n	8005f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fd f88e 	bl	8002fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	@ 0x24
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f901 	bl	80070e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3708      	adds	r7, #8
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af02      	add	r7, sp, #8
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d175      	bne.n	8006040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_UART_Transmit+0x2c>
 8005f5a:	88fb      	ldrh	r3, [r7, #6]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e06e      	b.n	8006042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2221      	movs	r2, #33	@ 0x21
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f72:	f7fd fb89 	bl	8003688 <HAL_GetTick>
 8005f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	88fa      	ldrh	r2, [r7, #6]
 8005f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d108      	bne.n	8005fa0 <HAL_UART_Transmit+0x6c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	e003      	b.n	8005fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fa8:	e02e      	b.n	8006008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	@ 0x80
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fda0 	bl	8006afa <UART_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e03a      	b.n	8006042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10b      	bne.n	8005fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	61bb      	str	r3, [r7, #24]
 8005fe8:	e007      	b.n	8005ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1cb      	bne.n	8005faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2200      	movs	r2, #0
 800601a:	2140      	movs	r1, #64	@ 0x40
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fd6c 	bl	8006afa <UART_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e006      	b.n	8006042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	e000      	b.n	8006042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006040:	2302      	movs	r3, #2
  }
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b20      	cmp	r3, #32
 8006062:	d112      	bne.n	800608a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Receive_IT+0x26>
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e00b      	b.n	800608c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	461a      	mov	r2, r3
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fd93 	bl	8006bac <UART_Start_Receive_IT>
 8006086:	4603      	mov	r3, r0
 8006088:	e000      	b.n	800608c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800608a:	2302      	movs	r3, #2
  }
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b08c      	sub	sp, #48	@ 0x30
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b20      	cmp	r3, #32
 80060ac:	d156      	bne.n	800615c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_UART_Transmit_DMA+0x26>
 80060b4:	88fb      	ldrh	r3, [r7, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e04f      	b.n	800615e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	88fa      	ldrh	r2, [r7, #6]
 80060ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2221      	movs	r2, #33	@ 0x21
 80060da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e2:	4a21      	ldr	r2, [pc, #132]	@ (8006168 <HAL_UART_Transmit_DMA+0xd4>)
 80060e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	4a20      	ldr	r2, [pc, #128]	@ (800616c <HAL_UART_Transmit_DMA+0xd8>)
 80060ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006170 <HAL_UART_Transmit_DMA+0xdc>)
 80060f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060fa:	2200      	movs	r2, #0
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	6819      	ldr	r1, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3304      	adds	r3, #4
 8006112:	461a      	mov	r2, r3
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	f7fd fc53 	bl	80039c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006122:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3314      	adds	r3, #20
 800612a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	e853 3f00 	ldrex	r3, [r3]
 8006132:	617b      	str	r3, [r7, #20]
   return(result);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3314      	adds	r3, #20
 8006142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006144:	627a      	str	r2, [r7, #36]	@ 0x24
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006148:	6a39      	ldr	r1, [r7, #32]
 800614a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614c:	e841 2300 	strex	r3, r2, [r1]
 8006150:	61fb      	str	r3, [r7, #28]
   return(result);
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e5      	bne.n	8006124 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	e000      	b.n	800615e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800615c:	2302      	movs	r3, #2
  }
}
 800615e:	4618      	mov	r0, r3
 8006160:	3730      	adds	r7, #48	@ 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	08006849 	.word	0x08006849
 800616c:	080068e3 	.word	0x080068e3
 8006170:	08006a67 	.word	0x08006a67

08006174 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b20      	cmp	r3, #32
 800618c:	d112      	bne.n	80061b4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <HAL_UART_Receive_DMA+0x26>
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e00b      	b.n	80061b6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fd38 	bl	8006c20 <UART_Start_Receive_DMA>
 80061b0:	4603      	mov	r3, r0
 80061b2:	e000      	b.n	80061b6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b090      	sub	sp, #64	@ 0x40
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b80      	cmp	r3, #128	@ 0x80
 80061d6:	bf0c      	ite	eq
 80061d8:	2301      	moveq	r3, #1
 80061da:	2300      	movne	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b21      	cmp	r3, #33	@ 0x21
 80061ea:	d128      	bne.n	800623e <HAL_UART_DMAStop+0x80>
 80061ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d025      	beq.n	800623e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	e853 3f00 	ldrex	r3, [r3]
 8006200:	623b      	str	r3, [r7, #32]
   return(result);
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006208:	63bb      	str	r3, [r7, #56]	@ 0x38
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3314      	adds	r3, #20
 8006210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006212:	633a      	str	r2, [r7, #48]	@ 0x30
 8006214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e5      	bne.n	80061f2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d004      	beq.n	8006238 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd fc1c 	bl	8003a70 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fd8b 	bl	8006d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b22      	cmp	r3, #34	@ 0x22
 800625e:	d128      	bne.n	80062b2 <HAL_UART_DMAStop+0xf4>
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d025      	beq.n	80062b2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	60fb      	str	r3, [r7, #12]
   return(result);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006286:	61fa      	str	r2, [r7, #28]
 8006288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	69b9      	ldr	r1, [r7, #24]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	617b      	str	r3, [r7, #20]
   return(result);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e5      	bne.n	8006266 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd fbe2 	bl	8003a70 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd79 	bl	8006da4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3740      	adds	r7, #64	@ 0x40
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b0ba      	sub	sp, #232	@ 0xe8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10f      	bne.n	8006322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_UART_IRQHandler+0x66>
 800630e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fe21 	bl	8006f62 <UART_Receive_IT>
      return;
 8006320:	e25b      	b.n	80067da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 80de 	beq.w	80064e8 <HAL_UART_IRQHandler+0x22c>
 800632c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800633c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80d1 	beq.w	80064e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <HAL_UART_IRQHandler+0xae>
 8006352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	f043 0201 	orr.w	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800636a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HAL_UART_IRQHandler+0xd2>
 8006376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f043 0202 	orr.w	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00b      	beq.n	80063b2 <HAL_UART_IRQHandler+0xf6>
 800639a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063aa:	f043 0204 	orr.w	r2, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <HAL_UART_IRQHandler+0x126>
 80063be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063da:	f043 0208 	orr.w	r2, r3, #8
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 81f2 	beq.w	80067d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_UART_IRQHandler+0x14e>
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fdac 	bl	8006f62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006414:	2b40      	cmp	r3, #64	@ 0x40
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <HAL_UART_IRQHandler+0x17a>
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006432:	2b00      	cmp	r3, #0
 8006434:	d04f      	beq.n	80064d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fcb4 	bl	8006da4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006446:	2b40      	cmp	r3, #64	@ 0x40
 8006448:	d141      	bne.n	80064ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800647a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800648e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1d9      	bne.n	800644a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d013      	beq.n	80064c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a2:	4a7e      	ldr	r2, [pc, #504]	@ (800669c <HAL_UART_IRQHandler+0x3e0>)
 80064a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fd fb50 	bl	8003b50 <HAL_DMA_Abort_IT>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064c0:	4610      	mov	r0, r2
 80064c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	e00e      	b.n	80064e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9a8 	bl	800681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064cc:	e00a      	b.n	80064e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9a4 	bl	800681c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	e006      	b.n	80064e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9a0 	bl	800681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064e2:	e175      	b.n	80067d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	bf00      	nop
    return;
 80064e6:	e173      	b.n	80067d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	f040 814f 	bne.w	8006790 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 8148 	beq.w	8006790 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8141 	beq.w	8006790 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60bb      	str	r3, [r7, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	f040 80b6 	bne.w	80066a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8145 	beq.w	80067d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800654e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006552:	429a      	cmp	r2, r3
 8006554:	f080 813e 	bcs.w	80067d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800655e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656a:	f000 8088 	beq.w	800667e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800658c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800659a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800659e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1d9      	bne.n	800656e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e1      	bne.n	80065ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3314      	adds	r3, #20
 80065fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800660c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3314      	adds	r3, #20
 8006616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800661a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800661c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006620:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e3      	bne.n	80065f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	330c      	adds	r3, #12
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800664c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664e:	f023 0310 	bic.w	r3, r3, #16
 8006652:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006660:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006662:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006666:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800666e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e3      	bne.n	800663c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006678:	4618      	mov	r0, r3
 800667a:	f7fd f9f9 	bl	8003a70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800668c:	b29b      	uxth	r3, r3
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	b29b      	uxth	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8cb 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800669a:	e09b      	b.n	80067d4 <HAL_UART_IRQHandler+0x518>
 800669c:	08006e6b 	.word	0x08006e6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 808e 	beq.w	80067d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80066bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8089 	beq.w	80067d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	330c      	adds	r3, #12
 80066cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80066ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066f2:	e841 2300 	strex	r3, r2, [r1]
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e3      	bne.n	80066c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	3314      	adds	r3, #20
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	623b      	str	r3, [r7, #32]
   return(result);
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	f023 0301 	bic.w	r3, r3, #1
 8006714:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006722:	633a      	str	r2, [r7, #48]	@ 0x30
 8006724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e3      	bne.n	80066fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	e853 3f00 	ldrex	r3, [r3]
 8006752:	60fb      	str	r3, [r7, #12]
   return(result);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0310 	bic.w	r3, r3, #16
 800675a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006768:	61fa      	str	r2, [r7, #28]
 800676a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	617b      	str	r3, [r7, #20]
   return(result);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e3      	bne.n	8006744 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006782:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f851 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800678e:	e023      	b.n	80067d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006798:	2b00      	cmp	r3, #0
 800679a:	d009      	beq.n	80067b0 <HAL_UART_IRQHandler+0x4f4>
 800679c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fb72 	bl	8006e92 <UART_Transmit_IT>
    return;
 80067ae:	e014      	b.n	80067da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00e      	beq.n	80067da <HAL_UART_IRQHandler+0x51e>
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fbb2 	bl	8006f32 <UART_EndTransmit_IT>
    return;
 80067ce:	e004      	b.n	80067da <HAL_UART_IRQHandler+0x51e>
    return;
 80067d0:	bf00      	nop
 80067d2:	e002      	b.n	80067da <HAL_UART_IRQHandler+0x51e>
      return;
 80067d4:	bf00      	nop
 80067d6:	e000      	b.n	80067da <HAL_UART_IRQHandler+0x51e>
      return;
 80067d8:	bf00      	nop
  }
}
 80067da:	37e8      	adds	r7, #232	@ 0xe8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b090      	sub	sp, #64	@ 0x40
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d137      	bne.n	80068d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006866:	2200      	movs	r2, #0
 8006868:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800686a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3314      	adds	r3, #20
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	623b      	str	r3, [r7, #32]
   return(result);
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3314      	adds	r3, #20
 8006888:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800688a:	633a      	str	r2, [r7, #48]	@ 0x30
 800688c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e5      	bne.n	800686a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800689e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068be:	61fa      	str	r2, [r7, #28]
 80068c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	69b9      	ldr	r1, [r7, #24]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	617b      	str	r3, [r7, #20]
   return(result);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e5      	bne.n	800689e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068d2:	e002      	b.n	80068da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80068d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068d6:	f7ff ff83 	bl	80067e0 <HAL_UART_TxCpltCallback>
}
 80068da:	bf00      	nop
 80068dc:	3740      	adds	r7, #64	@ 0x40
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f7ff ff7f 	bl	80067f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b09c      	sub	sp, #112	@ 0x70
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d172      	bne.n	8006a00 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800691a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800691c:	2200      	movs	r2, #0
 800691e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006932:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006936:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006940:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006942:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800694e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	667b      	str	r3, [r7, #100]	@ 0x64
 800696c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3314      	adds	r3, #20
 8006972:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006974:	647a      	str	r2, [r7, #68]	@ 0x44
 8006976:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3314      	adds	r3, #20
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006992:	e853 3f00 	ldrex	r3, [r3]
 8006996:	623b      	str	r3, [r7, #32]
   return(result);
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800699e:	663b      	str	r3, [r7, #96]	@ 0x60
 80069a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b0:	e841 2300 	strex	r3, r2, [r1]
 80069b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e5      	bne.n	8006988 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069be:	2220      	movs	r2, #32
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d119      	bne.n	8006a00 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60fb      	str	r3, [r7, #12]
   return(result);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0310 	bic.w	r3, r3, #16
 80069e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80069e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80069ec:	61fa      	str	r2, [r7, #28]
 80069ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	617b      	str	r3, [r7, #20]
   return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a02:	2200      	movs	r2, #0
 8006a04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a12:	4619      	mov	r1, r3
 8006a14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a16:	f7ff ff0b 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a1a:	e002      	b.n	8006a22 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a1e:	f7fc fd65 	bl	80034ec <HAL_UART_RxCpltCallback>
}
 8006a22:	bf00      	nop
 8006a24:	3770      	adds	r7, #112	@ 0x70
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d108      	bne.n	8006a58 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff feed 	bl	8006830 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a56:	e002      	b.n	8006a5e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff fed5 	bl	8006808 <HAL_UART_RxHalfCpltCallback>
}
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a82:	2b80      	cmp	r3, #128	@ 0x80
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b21      	cmp	r3, #33	@ 0x21
 8006a98:	d108      	bne.n	8006aac <UART_DMAError+0x46>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006aa6:	68b8      	ldr	r0, [r7, #8]
 8006aa8:	f000 f954 	bl	8006d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b22      	cmp	r3, #34	@ 0x22
 8006acc:	d108      	bne.n	8006ae0 <UART_DMAError+0x7a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f000 f962 	bl	8006da4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae4:	f043 0210 	orr.w	r2, r3, #16
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aec:	68b8      	ldr	r0, [r7, #8]
 8006aee:	f7ff fe95 	bl	800681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	603b      	str	r3, [r7, #0]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0a:	e03b      	b.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b12:	d037      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fc fdb8 	bl	8003688 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e03a      	b.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d023      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b80      	cmp	r3, #128	@ 0x80
 8006b40:	d020      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b40      	cmp	r3, #64	@ 0x40
 8006b46:	d01d      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d116      	bne.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f919 	bl	8006da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2208      	movs	r2, #8
 8006b76:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e00f      	b.n	8006ba4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d0b4      	beq.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	88fa      	ldrh	r2, [r7, #6]
 8006bca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2222      	movs	r2, #34	@ 0x22
 8006bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0220 	orr.w	r2, r2, #32
 8006c10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b098      	sub	sp, #96	@ 0x60
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2222      	movs	r2, #34	@ 0x22
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006d48 <UART_Start_Receive_DMA+0x128>)
 8006c4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c54:	4a3d      	ldr	r2, [pc, #244]	@ (8006d4c <UART_Start_Receive_DMA+0x12c>)
 8006c56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8006d50 <UART_Start_Receive_DMA+0x130>)
 8006c5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	2200      	movs	r2, #0
 8006c66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3304      	adds	r3, #4
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	f7fc fe9e 	bl	80039c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d019      	beq.n	8006cd6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cc2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006cc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e5      	bne.n	8006ca2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3314      	adds	r3, #20
 8006cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cf6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006cfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e5      	bne.n	8006cd6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3314      	adds	r3, #20
 8006d10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d20:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3314      	adds	r3, #20
 8006d28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6a39      	ldr	r1, [r7, #32]
 8006d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3760      	adds	r7, #96	@ 0x60
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	080068ff 	.word	0x080068ff
 8006d4c:	08006a2b 	.word	0x08006a2b
 8006d50:	08006a67 	.word	0x08006a67

08006d54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	@ 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	61ba      	str	r2, [r7, #24]
 8006d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e5      	bne.n	8006d5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006d98:	bf00      	nop
 8006d9a:	3724      	adds	r7, #36	@ 0x24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b095      	sub	sp, #84	@ 0x54
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006dcc:	643a      	str	r2, [r7, #64]	@ 0x40
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e02:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e08:	e841 2300 	strex	r3, r2, [r1]
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e5      	bne.n	8006de0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d119      	bne.n	8006e50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f023 0310 	bic.w	r3, r3, #16
 8006e32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e3c:	61ba      	str	r2, [r7, #24]
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6979      	ldr	r1, [r7, #20]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	613b      	str	r3, [r7, #16]
   return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e5e:	bf00      	nop
 8006e60:	3754      	adds	r7, #84	@ 0x54
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f7ff fcc9 	bl	800681c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	@ 0x21
 8006ea4:	d13e      	bne.n	8006f24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eae:	d114      	bne.n	8006eda <UART_Transmit_IT+0x48>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d110      	bne.n	8006eda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ecc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	e008      	b.n	8006eec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	1c59      	adds	r1, r3, #1
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6211      	str	r1, [r2, #32]
 8006ee4:	781a      	ldrb	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10f      	bne.n	8006f20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	e000      	b.n	8006f26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f24:	2302      	movs	r3, #2
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68da      	ldr	r2, [r3, #12]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fc44 	bl	80067e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b08c      	sub	sp, #48	@ 0x30
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b22      	cmp	r3, #34	@ 0x22
 8006f74:	f040 80ae 	bne.w	80070d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f80:	d117      	bne.n	8006fb2 <UART_Receive_IT+0x50>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d113      	bne.n	8006fb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006faa:	1c9a      	adds	r2, r3, #2
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	629a      	str	r2, [r3, #40]	@ 0x28
 8006fb0:	e026      	b.n	8007000 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc4:	d007      	beq.n	8006fd6 <UART_Receive_IT+0x74>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10a      	bne.n	8006fe4 <UART_Receive_IT+0x82>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d106      	bne.n	8006fe4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	e008      	b.n	8006ff6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4619      	mov	r1, r3
 800700e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007010:	2b00      	cmp	r3, #0
 8007012:	d15d      	bne.n	80070d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0220 	bic.w	r2, r2, #32
 8007022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695a      	ldr	r2, [r3, #20]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 0201 	bic.w	r2, r2, #1
 8007042:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2220      	movs	r2, #32
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	2b01      	cmp	r3, #1
 8007058:	d135      	bne.n	80070c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	330c      	adds	r3, #12
 8007066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	613b      	str	r3, [r7, #16]
   return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f023 0310 	bic.w	r3, r3, #16
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007080:	623a      	str	r2, [r7, #32]
 8007082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	69f9      	ldr	r1, [r7, #28]
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	61bb      	str	r3, [r7, #24]
   return(result);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0310 	and.w	r3, r3, #16
 800709e:	2b10      	cmp	r3, #16
 80070a0:	d10a      	bne.n	80070b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fbb6 	bl	8006830 <HAL_UARTEx_RxEventCallback>
 80070c4:	e002      	b.n	80070cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fc fa10 	bl	80034ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e002      	b.n	80070d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e000      	b.n	80070d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
  }
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3730      	adds	r7, #48	@ 0x30
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
	...

080070e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070e4:	b0c0      	sub	sp, #256	@ 0x100
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fc:	68d9      	ldr	r1, [r3, #12]
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	ea40 0301 	orr.w	r3, r0, r1
 8007108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800710a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	431a      	orrs	r2, r3
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	431a      	orrs	r2, r3
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007138:	f021 010c 	bic.w	r1, r1, #12
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007146:	430b      	orrs	r3, r1
 8007148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800714a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715a:	6999      	ldr	r1, [r3, #24]
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	ea40 0301 	orr.w	r3, r0, r1
 8007166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b8f      	ldr	r3, [pc, #572]	@ (80073ac <UART_SetConfig+0x2cc>)
 8007170:	429a      	cmp	r2, r3
 8007172:	d005      	beq.n	8007180 <UART_SetConfig+0xa0>
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b8d      	ldr	r3, [pc, #564]	@ (80073b0 <UART_SetConfig+0x2d0>)
 800717c:	429a      	cmp	r2, r3
 800717e:	d104      	bne.n	800718a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fd faa6 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8007184:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007188:	e003      	b.n	8007192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800718a:	f7fd fa8d 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 800718e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800719c:	f040 810c 	bne.w	80073b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071ba:	415b      	adcs	r3, r3
 80071bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071c2:	4621      	mov	r1, r4
 80071c4:	eb12 0801 	adds.w	r8, r2, r1
 80071c8:	4629      	mov	r1, r5
 80071ca:	eb43 0901 	adc.w	r9, r3, r1
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071e2:	4690      	mov	r8, r2
 80071e4:	4699      	mov	r9, r3
 80071e6:	4623      	mov	r3, r4
 80071e8:	eb18 0303 	adds.w	r3, r8, r3
 80071ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071f0:	462b      	mov	r3, r5
 80071f2:	eb49 0303 	adc.w	r3, r9, r3
 80071f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007206:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800720a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800720e:	460b      	mov	r3, r1
 8007210:	18db      	adds	r3, r3, r3
 8007212:	653b      	str	r3, [r7, #80]	@ 0x50
 8007214:	4613      	mov	r3, r2
 8007216:	eb42 0303 	adc.w	r3, r2, r3
 800721a:	657b      	str	r3, [r7, #84]	@ 0x54
 800721c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007224:	f7f9 fd40 	bl	8000ca8 <__aeabi_uldivmod>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4b61      	ldr	r3, [pc, #388]	@ (80073b4 <UART_SetConfig+0x2d4>)
 800722e:	fba3 2302 	umull	r2, r3, r3, r2
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	011c      	lsls	r4, r3, #4
 8007236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800723a:	2200      	movs	r2, #0
 800723c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007240:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007248:	4642      	mov	r2, r8
 800724a:	464b      	mov	r3, r9
 800724c:	1891      	adds	r1, r2, r2
 800724e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007250:	415b      	adcs	r3, r3
 8007252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007258:	4641      	mov	r1, r8
 800725a:	eb12 0a01 	adds.w	sl, r2, r1
 800725e:	4649      	mov	r1, r9
 8007260:	eb43 0b01 	adc.w	fp, r3, r1
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	f04f 0300 	mov.w	r3, #0
 800726c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007278:	4692      	mov	sl, r2
 800727a:	469b      	mov	fp, r3
 800727c:	4643      	mov	r3, r8
 800727e:	eb1a 0303 	adds.w	r3, sl, r3
 8007282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007286:	464b      	mov	r3, r9
 8007288:	eb4b 0303 	adc.w	r3, fp, r3
 800728c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800729c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072a4:	460b      	mov	r3, r1
 80072a6:	18db      	adds	r3, r3, r3
 80072a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072aa:	4613      	mov	r3, r2
 80072ac:	eb42 0303 	adc.w	r3, r2, r3
 80072b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072ba:	f7f9 fcf5 	bl	8000ca8 <__aeabi_uldivmod>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	4b3b      	ldr	r3, [pc, #236]	@ (80073b4 <UART_SetConfig+0x2d4>)
 80072c6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	2264      	movs	r2, #100	@ 0x64
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	1acb      	subs	r3, r1, r3
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072da:	4b36      	ldr	r3, [pc, #216]	@ (80073b4 <UART_SetConfig+0x2d4>)
 80072dc:	fba3 2302 	umull	r2, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072e8:	441c      	add	r4, r3
 80072ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072fc:	4642      	mov	r2, r8
 80072fe:	464b      	mov	r3, r9
 8007300:	1891      	adds	r1, r2, r2
 8007302:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007304:	415b      	adcs	r3, r3
 8007306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800730c:	4641      	mov	r1, r8
 800730e:	1851      	adds	r1, r2, r1
 8007310:	6339      	str	r1, [r7, #48]	@ 0x30
 8007312:	4649      	mov	r1, r9
 8007314:	414b      	adcs	r3, r1
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007324:	4659      	mov	r1, fp
 8007326:	00cb      	lsls	r3, r1, #3
 8007328:	4651      	mov	r1, sl
 800732a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800732e:	4651      	mov	r1, sl
 8007330:	00ca      	lsls	r2, r1, #3
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	4603      	mov	r3, r0
 8007338:	4642      	mov	r2, r8
 800733a:	189b      	adds	r3, r3, r2
 800733c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007340:	464b      	mov	r3, r9
 8007342:	460a      	mov	r2, r1
 8007344:	eb42 0303 	adc.w	r3, r2, r3
 8007348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007358:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800735c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007360:	460b      	mov	r3, r1
 8007362:	18db      	adds	r3, r3, r3
 8007364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007366:	4613      	mov	r3, r2
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800736e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007376:	f7f9 fc97 	bl	8000ca8 <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <UART_SetConfig+0x2d4>)
 8007380:	fba3 1302 	umull	r1, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	2164      	movs	r1, #100	@ 0x64
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	3332      	adds	r3, #50	@ 0x32
 8007392:	4a08      	ldr	r2, [pc, #32]	@ (80073b4 <UART_SetConfig+0x2d4>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f003 0207 	and.w	r2, r3, #7
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4422      	add	r2, r4
 80073a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073a8:	e106      	b.n	80075b8 <UART_SetConfig+0x4d8>
 80073aa:	bf00      	nop
 80073ac:	40011000 	.word	0x40011000
 80073b0:	40011400 	.word	0x40011400
 80073b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073ca:	4642      	mov	r2, r8
 80073cc:	464b      	mov	r3, r9
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	6239      	str	r1, [r7, #32]
 80073d2:	415b      	adcs	r3, r3
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073da:	4641      	mov	r1, r8
 80073dc:	1854      	adds	r4, r2, r1
 80073de:	4649      	mov	r1, r9
 80073e0:	eb43 0501 	adc.w	r5, r3, r1
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	00eb      	lsls	r3, r5, #3
 80073ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073f2:	00e2      	lsls	r2, r4, #3
 80073f4:	4614      	mov	r4, r2
 80073f6:	461d      	mov	r5, r3
 80073f8:	4643      	mov	r3, r8
 80073fa:	18e3      	adds	r3, r4, r3
 80073fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007400:	464b      	mov	r3, r9
 8007402:	eb45 0303 	adc.w	r3, r5, r3
 8007406:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007416:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007426:	4629      	mov	r1, r5
 8007428:	008b      	lsls	r3, r1, #2
 800742a:	4621      	mov	r1, r4
 800742c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007430:	4621      	mov	r1, r4
 8007432:	008a      	lsls	r2, r1, #2
 8007434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007438:	f7f9 fc36 	bl	8000ca8 <__aeabi_uldivmod>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4b60      	ldr	r3, [pc, #384]	@ (80075c4 <UART_SetConfig+0x4e4>)
 8007442:	fba3 2302 	umull	r2, r3, r3, r2
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	011c      	lsls	r4, r3, #4
 800744a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800744e:	2200      	movs	r2, #0
 8007450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007454:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800745c:	4642      	mov	r2, r8
 800745e:	464b      	mov	r3, r9
 8007460:	1891      	adds	r1, r2, r2
 8007462:	61b9      	str	r1, [r7, #24]
 8007464:	415b      	adcs	r3, r3
 8007466:	61fb      	str	r3, [r7, #28]
 8007468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800746c:	4641      	mov	r1, r8
 800746e:	1851      	adds	r1, r2, r1
 8007470:	6139      	str	r1, [r7, #16]
 8007472:	4649      	mov	r1, r9
 8007474:	414b      	adcs	r3, r1
 8007476:	617b      	str	r3, [r7, #20]
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007484:	4659      	mov	r1, fp
 8007486:	00cb      	lsls	r3, r1, #3
 8007488:	4651      	mov	r1, sl
 800748a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800748e:	4651      	mov	r1, sl
 8007490:	00ca      	lsls	r2, r1, #3
 8007492:	4610      	mov	r0, r2
 8007494:	4619      	mov	r1, r3
 8007496:	4603      	mov	r3, r0
 8007498:	4642      	mov	r2, r8
 800749a:	189b      	adds	r3, r3, r2
 800749c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074a0:	464b      	mov	r3, r9
 80074a2:	460a      	mov	r2, r1
 80074a4:	eb42 0303 	adc.w	r3, r2, r3
 80074a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074c4:	4649      	mov	r1, r9
 80074c6:	008b      	lsls	r3, r1, #2
 80074c8:	4641      	mov	r1, r8
 80074ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ce:	4641      	mov	r1, r8
 80074d0:	008a      	lsls	r2, r1, #2
 80074d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074d6:	f7f9 fbe7 	bl	8000ca8 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	4b38      	ldr	r3, [pc, #224]	@ (80075c4 <UART_SetConfig+0x4e4>)
 80074e2:	fba3 2301 	umull	r2, r3, r3, r1
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	2264      	movs	r2, #100	@ 0x64
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	1acb      	subs	r3, r1, r3
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	3332      	adds	r3, #50	@ 0x32
 80074f4:	4a33      	ldr	r2, [pc, #204]	@ (80075c4 <UART_SetConfig+0x4e4>)
 80074f6:	fba2 2303 	umull	r2, r3, r2, r3
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007500:	441c      	add	r4, r3
 8007502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007506:	2200      	movs	r2, #0
 8007508:	673b      	str	r3, [r7, #112]	@ 0x70
 800750a:	677a      	str	r2, [r7, #116]	@ 0x74
 800750c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007510:	4642      	mov	r2, r8
 8007512:	464b      	mov	r3, r9
 8007514:	1891      	adds	r1, r2, r2
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	415b      	adcs	r3, r3
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007520:	4641      	mov	r1, r8
 8007522:	1851      	adds	r1, r2, r1
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	4649      	mov	r1, r9
 8007528:	414b      	adcs	r3, r1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007538:	4659      	mov	r1, fp
 800753a:	00cb      	lsls	r3, r1, #3
 800753c:	4651      	mov	r1, sl
 800753e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007542:	4651      	mov	r1, sl
 8007544:	00ca      	lsls	r2, r1, #3
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	4603      	mov	r3, r0
 800754c:	4642      	mov	r2, r8
 800754e:	189b      	adds	r3, r3, r2
 8007550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007552:	464b      	mov	r3, r9
 8007554:	460a      	mov	r2, r1
 8007556:	eb42 0303 	adc.w	r3, r2, r3
 800755a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	663b      	str	r3, [r7, #96]	@ 0x60
 8007566:	667a      	str	r2, [r7, #100]	@ 0x64
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007574:	4649      	mov	r1, r9
 8007576:	008b      	lsls	r3, r1, #2
 8007578:	4641      	mov	r1, r8
 800757a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757e:	4641      	mov	r1, r8
 8007580:	008a      	lsls	r2, r1, #2
 8007582:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007586:	f7f9 fb8f 	bl	8000ca8 <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <UART_SetConfig+0x4e4>)
 8007590:	fba3 1302 	umull	r1, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	2164      	movs	r1, #100	@ 0x64
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	3332      	adds	r3, #50	@ 0x32
 80075a2:	4a08      	ldr	r2, [pc, #32]	@ (80075c4 <UART_SetConfig+0x4e4>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f003 020f 	and.w	r2, r3, #15
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4422      	add	r2, r4
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075be:	46bd      	mov	sp, r7
 80075c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075c4:	51eb851f 	.word	0x51eb851f

080075c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075da:	2b84      	cmp	r3, #132	@ 0x84
 80075dc:	d005      	beq.n	80075ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	3303      	adds	r3, #3
 80075e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075ea:	68fb      	ldr	r3, [r7, #12]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075fe:	f3ef 8305 	mrs	r3, IPSR
 8007602:	607b      	str	r3, [r7, #4]
  return(result);
 8007604:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2301      	movne	r3, #1
 800760c:	2300      	moveq	r3, #0
 800760e:	b2db      	uxtb	r3, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007620:	f000 fcae 	bl	8007f80 <vTaskStartScheduler>
  
  return osOK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	bd80      	pop	{r7, pc}

0800762a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800762a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800762c:	b089      	sub	sp, #36	@ 0x24
 800762e:	af04      	add	r7, sp, #16
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d020      	beq.n	800767e <osThreadCreate+0x54>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d01c      	beq.n	800767e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685c      	ldr	r4, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691e      	ldr	r6, [r3, #16]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff ffb6 	bl	80075c8 <makeFreeRtosPriority>
 800765c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	9100      	str	r1, [sp, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4632      	mov	r2, r6
 8007670:	4629      	mov	r1, r5
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f97a 	bl	800796c <xTaskCreateStatic>
 8007678:	4603      	mov	r3, r0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e01c      	b.n	80076b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685c      	ldr	r4, [r3, #4]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800768a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff ff98 	bl	80075c8 <makeFreeRtosPriority>
 8007698:	4602      	mov	r2, r0
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	9200      	str	r2, [sp, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	4632      	mov	r2, r6
 80076a6:	4629      	mov	r1, r5
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f9bf 	bl	8007a2c <xTaskCreate>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d001      	beq.n	80076b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	e000      	b.n	80076ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <osDelay+0x16>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	e000      	b.n	80076da <osDelay+0x18>
 80076d8:	2301      	movs	r3, #1
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 faf6 	bl	8007ccc <vTaskDelay>
  
  return osOK;
 80076e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80076fe:	f7ff ff7b 	bl	80075f8 <inHandlerMode>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01c      	beq.n	8007742 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	f107 0208 	add.w	r2, r7, #8
 800770e:	f107 030c 	add.w	r3, r7, #12
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	2201      	movs	r2, #1
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f001 f88b 	bl	8008834 <xTaskGenericNotifyFromISR>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d002      	beq.n	800772a <osSignalSet+0x3e>
      return 0x80000000;
 8007724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007728:	e019      	b.n	800775e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d015      	beq.n	800775c <osSignalSet+0x70>
 8007730:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <osSignalSet+0x7c>)
 8007732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	e00c      	b.n	800775c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	f107 0308 	add.w	r3, r7, #8
 8007748:	2201      	movs	r2, #1
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 ffb0 	bl	80086b0 <xTaskGenericNotify>
 8007750:	4603      	mov	r3, r0
 8007752:	2b01      	cmp	r3, #1
 8007754:	d002      	beq.n	800775c <osSignalSet+0x70>
    return 0x80000000;
 8007756:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800775a:	e000      	b.n	800775e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800775c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b089      	sub	sp, #36	@ 0x24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007786:	d103      	bne.n	8007790 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8007788:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800778c:	61fb      	str	r3, [r7, #28]
 800778e:	e009      	b.n	80077a4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <osSignalWait+0x38>
      ticks = 1;
 80077a0:	2301      	movs	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80077a4:	f7ff ff28 	bl	80075f8 <inHandlerMode>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80077ae:	2382      	movs	r3, #130	@ 0x82
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	e01b      	b.n	80077ec <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80077b4:	68b9      	ldr	r1, [r7, #8]
 80077b6:	f107 0310 	add.w	r3, r7, #16
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2000      	movs	r0, #0
 80077c0:	f000 ff16 	bl	80085f0 <xTaskNotifyWait>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d008      	beq.n	80077dc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <osSignalWait+0x6a>
 80077d0:	2300      	movs	r3, #0
 80077d2:	613b      	str	r3, [r7, #16]
 80077d4:	e00a      	b.n	80077ec <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80077d6:	2340      	movs	r3, #64	@ 0x40
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	e007      	b.n	80077ec <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da02      	bge.n	80077e8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80077e2:	2386      	movs	r3, #134	@ 0x86
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	e001      	b.n	80077ec <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80077e8:	2308      	movs	r3, #8
 80077ea:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	461c      	mov	r4, r3
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	3724      	adds	r7, #36	@ 0x24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd90      	pop	{r4, r7, pc}

08007804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f103 0208 	add.w	r2, r3, #8
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800781c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f103 0208 	add.w	r2, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f103 0208 	add.w	r2, r3, #8
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	1c5a      	adds	r2, r3, #1
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
}
 800789a:	bf00      	nop
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078bc:	d103      	bne.n	80078c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e00c      	b.n	80078e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	3308      	adds	r3, #8
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e002      	b.n	80078d4 <vListInsert+0x2e>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d2f6      	bcs.n	80078ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
}
 800790c:	bf00      	nop
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6892      	ldr	r2, [r2, #8]
 800792e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6852      	ldr	r2, [r2, #4]
 8007938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	d103      	bne.n	800794c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1e5a      	subs	r2, r3, #1
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08e      	sub	sp, #56	@ 0x38
 8007970:	af04      	add	r7, sp, #16
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
 8007978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800797a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10b      	bne.n	8007998 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	623b      	str	r3, [r7, #32]
}
 8007992:	bf00      	nop
 8007994:	bf00      	nop
 8007996:	e7fd      	b.n	8007994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61fb      	str	r3, [r7, #28]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079b6:	23a0      	movs	r3, #160	@ 0xa0
 80079b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80079be:	d00b      	beq.n	80079d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	61bb      	str	r3, [r7, #24]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01e      	beq.n	8007a1e <xTaskCreateStatic+0xb2>
 80079e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01b      	beq.n	8007a1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079f8:	2300      	movs	r3, #0
 80079fa:	9303      	str	r3, [sp, #12]
 80079fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fe:	9302      	str	r3, [sp, #8]
 8007a00:	f107 0314 	add.w	r3, r7, #20
 8007a04:	9301      	str	r3, [sp, #4]
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f851 	bl	8007ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a18:	f000 f8ee 	bl	8007bf8 <prvAddNewTaskToReadyList>
 8007a1c:	e001      	b.n	8007a22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a22:	697b      	ldr	r3, [r7, #20]
	}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3728      	adds	r7, #40	@ 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08c      	sub	sp, #48	@ 0x30
 8007a30:	af04      	add	r7, sp, #16
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 fa93 	bl	8008f6c <pvPortMalloc>
 8007a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00e      	beq.n	8007a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a4e:	20a0      	movs	r0, #160	@ 0xa0
 8007a50:	f001 fa8c 	bl	8008f6c <pvPortMalloc>
 8007a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a62:	e005      	b.n	8007a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a64:	6978      	ldr	r0, [r7, #20]
 8007a66:	f001 fb4f 	bl	8009108 <vPortFree>
 8007a6a:	e001      	b.n	8007a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d017      	beq.n	8007aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a7e:	88fa      	ldrh	r2, [r7, #6]
 8007a80:	2300      	movs	r3, #0
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 f80f 	bl	8007ab8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a9a:	69f8      	ldr	r0, [r7, #28]
 8007a9c:	f000 f8ac 	bl	8007bf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	61bb      	str	r3, [r7, #24]
 8007aa4:	e002      	b.n	8007aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007aa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007aac:	69bb      	ldr	r3, [r7, #24]
	}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f023 0307 	bic.w	r3, r3, #7
 8007ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	617b      	str	r3, [r7, #20]
}
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	e7fd      	b.n	8007afe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01f      	beq.n	8007b48 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
 8007b0c:	e012      	b.n	8007b34 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	7819      	ldrb	r1, [r3, #0]
 8007b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	3334      	adds	r3, #52	@ 0x34
 8007b1e:	460a      	mov	r2, r1
 8007b20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d006      	beq.n	8007b3c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	3301      	adds	r3, #1
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d9e9      	bls.n	8007b0e <prvInitialiseNewTask+0x56>
 8007b3a:	e000      	b.n	8007b3e <prvInitialiseNewTask+0x86>
			{
				break;
 8007b3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b46:	e003      	b.n	8007b50 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d901      	bls.n	8007b5a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b56:	2306      	movs	r3, #6
 8007b58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b64:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	2200      	movs	r2, #0
 8007b6a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fe67 	bl	8007844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b78:	3318      	adds	r3, #24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fe62 	bl	8007844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b88:	f1c3 0207 	rsb	r2, r3, #7
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	334c      	adds	r3, #76	@ 0x4c
 8007baa:	224c      	movs	r2, #76	@ 0x4c
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f00f f9b8 	bl	8016f24 <memset>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8007bec <prvInitialiseNewTask+0x134>)
 8007bb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf0 <prvInitialiseNewTask+0x138>)
 8007bbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bf4 <prvInitialiseNewTask+0x13c>)
 8007bc4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	68f9      	ldr	r1, [r7, #12]
 8007bca:	69b8      	ldr	r0, [r7, #24]
 8007bcc:	f000 ff7e 	bl	8008acc <pxPortInitialiseStack>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007be2:	bf00      	nop
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20010d70 	.word	0x20010d70
 8007bf0:	20010dd8 	.word	0x20010dd8
 8007bf4:	20010e40 	.word	0x20010e40

08007bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c00:	f001 f892 	bl	8008d28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c04:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb0 <prvAddNewTaskToReadyList+0xb8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	4a29      	ldr	r2, [pc, #164]	@ (8007cb0 <prvAddNewTaskToReadyList+0xb8>)
 8007c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c0e:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <prvAddNewTaskToReadyList+0xbc>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c16:	4a27      	ldr	r2, [pc, #156]	@ (8007cb4 <prvAddNewTaskToReadyList+0xbc>)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c1c:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <prvAddNewTaskToReadyList+0xb8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d110      	bne.n	8007c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c24:	f000 fc20 	bl	8008468 <prvInitialiseTaskLists>
 8007c28:	e00d      	b.n	8007c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c2a:	4b23      	ldr	r3, [pc, #140]	@ (8007cb8 <prvAddNewTaskToReadyList+0xc0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d109      	bne.n	8007c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c32:	4b20      	ldr	r3, [pc, #128]	@ (8007cb4 <prvAddNewTaskToReadyList+0xbc>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d802      	bhi.n	8007c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c40:	4a1c      	ldr	r2, [pc, #112]	@ (8007cb4 <prvAddNewTaskToReadyList+0xbc>)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c46:	4b1d      	ldr	r3, [pc, #116]	@ (8007cbc <prvAddNewTaskToReadyList+0xc4>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cbc <prvAddNewTaskToReadyList+0xc4>)
 8007c4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	2201      	movs	r2, #1
 8007c56:	409a      	lsls	r2, r3
 8007c58:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <prvAddNewTaskToReadyList+0xc8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	4a18      	ldr	r2, [pc, #96]	@ (8007cc0 <prvAddNewTaskToReadyList+0xc8>)
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <prvAddNewTaskToReadyList+0xcc>)
 8007c70:	441a      	add	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f7ff fdf0 	bl	800785e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c7e:	f001 f885 	bl	8008d8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c82:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb8 <prvAddNewTaskToReadyList+0xc0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00e      	beq.n	8007ca8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007cb4 <prvAddNewTaskToReadyList+0xbc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d207      	bcs.n	8007ca8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c98:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc8 <prvAddNewTaskToReadyList+0xd0>)
 8007c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	20008598 	.word	0x20008598
 8007cb4:	20008498 	.word	0x20008498
 8007cb8:	200085a4 	.word	0x200085a4
 8007cbc:	200085b4 	.word	0x200085b4
 8007cc0:	200085a0 	.word	0x200085a0
 8007cc4:	2000849c 	.word	0x2000849c
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d018      	beq.n	8007d10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cde:	4b14      	ldr	r3, [pc, #80]	@ (8007d30 <vTaskDelay+0x64>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <vTaskDelay+0x32>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	60bb      	str	r3, [r7, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cfe:	f000 f9a9 	bl	8008054 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe7b 	bl	8008a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d0a:	f000 f9b1 	bl	8008070 <xTaskResumeAll>
 8007d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d16:	4b07      	ldr	r3, [pc, #28]	@ (8007d34 <vTaskDelay+0x68>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	200085c0 	.word	0x200085c0
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d40:	f000 fff2 	bl	8008d28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d102      	bne.n	8007d50 <vTaskSuspend+0x18>
 8007d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8007e40 <vTaskSuspend+0x108>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	e000      	b.n	8007d52 <vTaskSuspend+0x1a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff fddd 	bl	8007918 <uxListRemove>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d115      	bne.n	8007d90 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d68:	4936      	ldr	r1, [pc, #216]	@ (8007e44 <vTaskSuspend+0x10c>)
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	440b      	add	r3, r1
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <vTaskSuspend+0x58>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7e:	2201      	movs	r2, #1
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	43da      	mvns	r2, r3
 8007d86:	4b30      	ldr	r3, [pc, #192]	@ (8007e48 <vTaskSuspend+0x110>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e48 <vTaskSuspend+0x110>)
 8007d8e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3318      	adds	r3, #24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fdbb 	bl	8007918 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4828      	ldr	r0, [pc, #160]	@ (8007e4c <vTaskSuspend+0x114>)
 8007daa:	f7ff fd58 	bl	800785e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d103      	bne.n	8007dc2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007dc2:	f000 ffe3 	bl	8008d8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007dc6:	4b22      	ldr	r3, [pc, #136]	@ (8007e50 <vTaskSuspend+0x118>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007dce:	f000 ffab 	bl	8008d28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007dd2:	f000 fbed 	bl	80085b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007dd6:	f000 ffd9 	bl	8008d8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007dda:	4b19      	ldr	r3, [pc, #100]	@ (8007e40 <vTaskSuspend+0x108>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d128      	bne.n	8007e36 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8007de4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e50 <vTaskSuspend+0x118>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d018      	beq.n	8007e1e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007dec:	4b19      	ldr	r3, [pc, #100]	@ (8007e54 <vTaskSuspend+0x11c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00b      	beq.n	8007e0c <vTaskSuspend+0xd4>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	60bb      	str	r3, [r7, #8]
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	e7fd      	b.n	8007e08 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007e0c:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <vTaskSuspend+0x120>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e1c:	e00b      	b.n	8007e36 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007e4c <vTaskSuspend+0x114>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	4b0e      	ldr	r3, [pc, #56]	@ (8007e5c <vTaskSuspend+0x124>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d103      	bne.n	8007e32 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <vTaskSuspend+0x108>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
	}
 8007e30:	e001      	b.n	8007e36 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8007e32:	f000 fa75 	bl	8008320 <vTaskSwitchContext>
	}
 8007e36:	bf00      	nop
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20008498 	.word	0x20008498
 8007e44:	2000849c 	.word	0x2000849c
 8007e48:	200085a0 	.word	0x200085a0
 8007e4c:	20008584 	.word	0x20008584
 8007e50:	200085a4 	.word	0x200085a4
 8007e54:	200085c0 	.word	0x200085c0
 8007e58:	e000ed04 	.word	0xe000ed04
 8007e5c:	20008598 	.word	0x20008598

08007e60 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10b      	bne.n	8007e8e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	60fb      	str	r3, [r7, #12]
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	e7fd      	b.n	8007e8a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	4a0a      	ldr	r2, [pc, #40]	@ (8007ebc <prvTaskIsTaskSuspended+0x5c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10a      	bne.n	8007eae <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	4a08      	ldr	r2, [pc, #32]	@ (8007ec0 <prvTaskIsTaskSuspended+0x60>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d005      	beq.n	8007eae <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eae:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	371c      	adds	r7, #28
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20008584 	.word	0x20008584
 8007ec0:	20008558 	.word	0x20008558

08007ec4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10b      	bne.n	8007eee <vTaskResume+0x2a>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	60bb      	str	r3, [r7, #8]
}
 8007ee8:	bf00      	nop
 8007eea:	bf00      	nop
 8007eec:	e7fd      	b.n	8007eea <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007eee:	4b20      	ldr	r3, [pc, #128]	@ (8007f70 <vTaskResume+0xac>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d037      	beq.n	8007f68 <vTaskResume+0xa4>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d034      	beq.n	8007f68 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8007efe:	f000 ff13 	bl	8008d28 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff ffac 	bl	8007e60 <prvTaskIsTaskSuspended>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d02a      	beq.n	8007f64 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fd00 	bl	8007918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	4b14      	ldr	r3, [pc, #80]	@ (8007f74 <vTaskResume+0xb0>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	4a13      	ldr	r2, [pc, #76]	@ (8007f74 <vTaskResume+0xb0>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2e:	4613      	mov	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4a10      	ldr	r2, [pc, #64]	@ (8007f78 <vTaskResume+0xb4>)
 8007f38:	441a      	add	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7ff fc8c 	bl	800785e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4a:	4b09      	ldr	r3, [pc, #36]	@ (8007f70 <vTaskResume+0xac>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d307      	bcc.n	8007f64 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007f54:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <vTaskResume+0xb8>)
 8007f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007f64:	f000 ff12 	bl	8008d8c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20008498 	.word	0x20008498
 8007f74:	200085a0 	.word	0x200085a0
 8007f78:	2000849c 	.word	0x2000849c
 8007f7c:	e000ed04 	.word	0xe000ed04

08007f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	@ 0x28
 8007f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f8e:	463a      	mov	r2, r7
 8007f90:	1d39      	adds	r1, r7, #4
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7f9 fb4a 	bl	8001630 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	9202      	str	r2, [sp, #8]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	460a      	mov	r2, r1
 8007fae:	4921      	ldr	r1, [pc, #132]	@ (8008034 <vTaskStartScheduler+0xb4>)
 8007fb0:	4821      	ldr	r0, [pc, #132]	@ (8008038 <vTaskStartScheduler+0xb8>)
 8007fb2:	f7ff fcdb 	bl	800796c <xTaskCreateStatic>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4a20      	ldr	r2, [pc, #128]	@ (800803c <vTaskStartScheduler+0xbc>)
 8007fba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800803c <vTaskStartScheduler+0xbc>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e001      	b.n	8007fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d11b      	bne.n	800800c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	613b      	str	r3, [r7, #16]
}
 8007fe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fe8:	4b15      	ldr	r3, [pc, #84]	@ (8008040 <vTaskStartScheduler+0xc0>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	334c      	adds	r3, #76	@ 0x4c
 8007fee:	4a15      	ldr	r2, [pc, #84]	@ (8008044 <vTaskStartScheduler+0xc4>)
 8007ff0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff2:	4b15      	ldr	r3, [pc, #84]	@ (8008048 <vTaskStartScheduler+0xc8>)
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ffa:	4b14      	ldr	r3, [pc, #80]	@ (800804c <vTaskStartScheduler+0xcc>)
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008000:	4b13      	ldr	r3, [pc, #76]	@ (8008050 <vTaskStartScheduler+0xd0>)
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008006:	f000 fdeb 	bl	8008be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800800a:	e00f      	b.n	800802c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008012:	d10b      	bne.n	800802c <vTaskStartScheduler+0xac>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	60fb      	str	r3, [r7, #12]
}
 8008026:	bf00      	nop
 8008028:	bf00      	nop
 800802a:	e7fd      	b.n	8008028 <vTaskStartScheduler+0xa8>
}
 800802c:	bf00      	nop
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	080190d4 	.word	0x080190d4
 8008038:	08008439 	.word	0x08008439
 800803c:	200085bc 	.word	0x200085bc
 8008040:	20008498 	.word	0x20008498
 8008044:	200000c8 	.word	0x200000c8
 8008048:	200085b8 	.word	0x200085b8
 800804c:	200085a4 	.word	0x200085a4
 8008050:	2000859c 	.word	0x2000859c

08008054 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008058:	4b04      	ldr	r3, [pc, #16]	@ (800806c <vTaskSuspendAll+0x18>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	4a03      	ldr	r2, [pc, #12]	@ (800806c <vTaskSuspendAll+0x18>)
 8008060:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008062:	bf00      	nop
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	200085c0 	.word	0x200085c0

08008070 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800807a:	2300      	movs	r3, #0
 800807c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800807e:	4b42      	ldr	r3, [pc, #264]	@ (8008188 <xTaskResumeAll+0x118>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <xTaskResumeAll+0x2e>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	603b      	str	r3, [r7, #0]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800809e:	f000 fe43 	bl	8008d28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080a2:	4b39      	ldr	r3, [pc, #228]	@ (8008188 <xTaskResumeAll+0x118>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a37      	ldr	r2, [pc, #220]	@ (8008188 <xTaskResumeAll+0x118>)
 80080aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ac:	4b36      	ldr	r3, [pc, #216]	@ (8008188 <xTaskResumeAll+0x118>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d161      	bne.n	8008178 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080b4:	4b35      	ldr	r3, [pc, #212]	@ (800818c <xTaskResumeAll+0x11c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05d      	beq.n	8008178 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080bc:	e02e      	b.n	800811c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080be:	4b34      	ldr	r3, [pc, #208]	@ (8008190 <xTaskResumeAll+0x120>)
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3318      	adds	r3, #24
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fc24 	bl	8007918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7ff fc1f 	bl	8007918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080de:	2201      	movs	r2, #1
 80080e0:	409a      	lsls	r2, r3
 80080e2:	4b2c      	ldr	r3, [pc, #176]	@ (8008194 <xTaskResumeAll+0x124>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	4a2a      	ldr	r2, [pc, #168]	@ (8008194 <xTaskResumeAll+0x124>)
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4a27      	ldr	r2, [pc, #156]	@ (8008198 <xTaskResumeAll+0x128>)
 80080fa:	441a      	add	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7ff fbab 	bl	800785e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810c:	4b23      	ldr	r3, [pc, #140]	@ (800819c <xTaskResumeAll+0x12c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	429a      	cmp	r2, r3
 8008114:	d302      	bcc.n	800811c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008116:	4b22      	ldr	r3, [pc, #136]	@ (80081a0 <xTaskResumeAll+0x130>)
 8008118:	2201      	movs	r2, #1
 800811a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800811c:	4b1c      	ldr	r3, [pc, #112]	@ (8008190 <xTaskResumeAll+0x120>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1cc      	bne.n	80080be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800812a:	f000 fa41 	bl	80085b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800812e:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <xTaskResumeAll+0x134>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d010      	beq.n	800815c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800813a:	f000 f837 	bl	80081ac <xTaskIncrementTick>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008144:	4b16      	ldr	r3, [pc, #88]	@ (80081a0 <xTaskResumeAll+0x130>)
 8008146:	2201      	movs	r2, #1
 8008148:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3b01      	subs	r3, #1
 800814e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1f1      	bne.n	800813a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008156:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <xTaskResumeAll+0x134>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800815c:	4b10      	ldr	r3, [pc, #64]	@ (80081a0 <xTaskResumeAll+0x130>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008164:	2301      	movs	r3, #1
 8008166:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008168:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <xTaskResumeAll+0x138>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008178:	f000 fe08 	bl	8008d8c <vPortExitCritical>

	return xAlreadyYielded;
 800817c:	68bb      	ldr	r3, [r7, #8]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200085c0 	.word	0x200085c0
 800818c:	20008598 	.word	0x20008598
 8008190:	20008558 	.word	0x20008558
 8008194:	200085a0 	.word	0x200085a0
 8008198:	2000849c 	.word	0x2000849c
 800819c:	20008498 	.word	0x20008498
 80081a0:	200085ac 	.word	0x200085ac
 80081a4:	200085a8 	.word	0x200085a8
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b6:	4b4f      	ldr	r3, [pc, #316]	@ (80082f4 <xTaskIncrementTick+0x148>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f040 808f 	bne.w	80082de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081c0:	4b4d      	ldr	r3, [pc, #308]	@ (80082f8 <xTaskIncrementTick+0x14c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3301      	adds	r3, #1
 80081c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081c8:	4a4b      	ldr	r2, [pc, #300]	@ (80082f8 <xTaskIncrementTick+0x14c>)
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d121      	bne.n	8008218 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081d4:	4b49      	ldr	r3, [pc, #292]	@ (80082fc <xTaskIncrementTick+0x150>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	603b      	str	r3, [r7, #0]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <xTaskIncrementTick+0x46>
 80081f6:	4b41      	ldr	r3, [pc, #260]	@ (80082fc <xTaskIncrementTick+0x150>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	4b40      	ldr	r3, [pc, #256]	@ (8008300 <xTaskIncrementTick+0x154>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3e      	ldr	r2, [pc, #248]	@ (80082fc <xTaskIncrementTick+0x150>)
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	4a3e      	ldr	r2, [pc, #248]	@ (8008300 <xTaskIncrementTick+0x154>)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <xTaskIncrementTick+0x158>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	4a3c      	ldr	r2, [pc, #240]	@ (8008304 <xTaskIncrementTick+0x158>)
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	f000 f9cc 	bl	80085b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008218:	4b3b      	ldr	r3, [pc, #236]	@ (8008308 <xTaskIncrementTick+0x15c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	429a      	cmp	r2, r3
 8008220:	d348      	bcc.n	80082b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008222:	4b36      	ldr	r3, [pc, #216]	@ (80082fc <xTaskIncrementTick+0x150>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822c:	4b36      	ldr	r3, [pc, #216]	@ (8008308 <xTaskIncrementTick+0x15c>)
 800822e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008232:	601a      	str	r2, [r3, #0]
					break;
 8008234:	e03e      	b.n	80082b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008236:	4b31      	ldr	r3, [pc, #196]	@ (80082fc <xTaskIncrementTick+0x150>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d203      	bcs.n	8008256 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800824e:	4a2e      	ldr	r2, [pc, #184]	@ (8008308 <xTaskIncrementTick+0x15c>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008254:	e02e      	b.n	80082b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	3304      	adds	r3, #4
 800825a:	4618      	mov	r0, r3
 800825c:	f7ff fb5c 	bl	8007918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008264:	2b00      	cmp	r3, #0
 8008266:	d004      	beq.n	8008272 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	3318      	adds	r3, #24
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fb53 	bl	8007918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008276:	2201      	movs	r2, #1
 8008278:	409a      	lsls	r2, r3
 800827a:	4b24      	ldr	r3, [pc, #144]	@ (800830c <xTaskIncrementTick+0x160>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4313      	orrs	r3, r2
 8008280:	4a22      	ldr	r2, [pc, #136]	@ (800830c <xTaskIncrementTick+0x160>)
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4a1f      	ldr	r2, [pc, #124]	@ (8008310 <xTaskIncrementTick+0x164>)
 8008292:	441a      	add	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7ff fadf 	bl	800785e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a4:	4b1b      	ldr	r3, [pc, #108]	@ (8008314 <xTaskIncrementTick+0x168>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d3b9      	bcc.n	8008222 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80082ae:	2301      	movs	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082b2:	e7b6      	b.n	8008222 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082b4:	4b17      	ldr	r3, [pc, #92]	@ (8008314 <xTaskIncrementTick+0x168>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ba:	4915      	ldr	r1, [pc, #84]	@ (8008310 <xTaskIncrementTick+0x164>)
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d901      	bls.n	80082d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80082cc:	2301      	movs	r3, #1
 80082ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80082d0:	4b11      	ldr	r3, [pc, #68]	@ (8008318 <xTaskIncrementTick+0x16c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d007      	beq.n	80082e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e004      	b.n	80082e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80082de:	4b0f      	ldr	r3, [pc, #60]	@ (800831c <xTaskIncrementTick+0x170>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	4a0d      	ldr	r2, [pc, #52]	@ (800831c <xTaskIncrementTick+0x170>)
 80082e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80082e8:	697b      	ldr	r3, [r7, #20]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3718      	adds	r7, #24
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	200085c0 	.word	0x200085c0
 80082f8:	2000859c 	.word	0x2000859c
 80082fc:	20008550 	.word	0x20008550
 8008300:	20008554 	.word	0x20008554
 8008304:	200085b0 	.word	0x200085b0
 8008308:	200085b8 	.word	0x200085b8
 800830c:	200085a0 	.word	0x200085a0
 8008310:	2000849c 	.word	0x2000849c
 8008314:	20008498 	.word	0x20008498
 8008318:	200085ac 	.word	0x200085ac
 800831c:	200085a8 	.word	0x200085a8

08008320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008326:	4b2a      	ldr	r3, [pc, #168]	@ (80083d0 <vTaskSwitchContext+0xb0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800832e:	4b29      	ldr	r3, [pc, #164]	@ (80083d4 <vTaskSwitchContext+0xb4>)
 8008330:	2201      	movs	r2, #1
 8008332:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008334:	e045      	b.n	80083c2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008336:	4b27      	ldr	r3, [pc, #156]	@ (80083d4 <vTaskSwitchContext+0xb4>)
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800833c:	4b26      	ldr	r3, [pc, #152]	@ (80083d8 <vTaskSwitchContext+0xb8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	fab3 f383 	clz	r3, r3
 8008348:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	f1c3 031f 	rsb	r3, r3, #31
 8008350:	617b      	str	r3, [r7, #20]
 8008352:	4922      	ldr	r1, [pc, #136]	@ (80083dc <vTaskSwitchContext+0xbc>)
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	440b      	add	r3, r1
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10b      	bne.n	800837e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	607b      	str	r3, [r7, #4]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <vTaskSwitchContext+0x5a>
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4a14      	ldr	r2, [pc, #80]	@ (80083dc <vTaskSwitchContext+0xbc>)
 800838a:	4413      	add	r3, r2
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	3308      	adds	r3, #8
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d104      	bne.n	80083ae <vTaskSwitchContext+0x8e>
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	605a      	str	r2, [r3, #4]
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	4a0a      	ldr	r2, [pc, #40]	@ (80083e0 <vTaskSwitchContext+0xc0>)
 80083b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083b8:	4b09      	ldr	r3, [pc, #36]	@ (80083e0 <vTaskSwitchContext+0xc0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	334c      	adds	r3, #76	@ 0x4c
 80083be:	4a09      	ldr	r2, [pc, #36]	@ (80083e4 <vTaskSwitchContext+0xc4>)
 80083c0:	6013      	str	r3, [r2, #0]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	200085c0 	.word	0x200085c0
 80083d4:	200085ac 	.word	0x200085ac
 80083d8:	200085a0 	.word	0x200085a0
 80083dc:	2000849c 	.word	0x2000849c
 80083e0:	20008498 	.word	0x20008498
 80083e4:	200000c8 	.word	0x200000c8

080083e8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <vTaskSetTimeOutState+0x26>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800840e:	f000 fc8b 	bl	8008d28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008412:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <vTaskSetTimeOutState+0x48>)
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800841a:	4b06      	ldr	r3, [pc, #24]	@ (8008434 <vTaskSetTimeOutState+0x4c>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008422:	f000 fcb3 	bl	8008d8c <vPortExitCritical>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	200085b0 	.word	0x200085b0
 8008434:	2000859c 	.word	0x2000859c

08008438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008440:	f000 f852 	bl	80084e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008444:	4b06      	ldr	r3, [pc, #24]	@ (8008460 <prvIdleTask+0x28>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d9f9      	bls.n	8008440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800844c:	4b05      	ldr	r3, [pc, #20]	@ (8008464 <prvIdleTask+0x2c>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800845c:	e7f0      	b.n	8008440 <prvIdleTask+0x8>
 800845e:	bf00      	nop
 8008460:	2000849c 	.word	0x2000849c
 8008464:	e000ed04 	.word	0xe000ed04

08008468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	e00c      	b.n	800848e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4a12      	ldr	r2, [pc, #72]	@ (80084c8 <prvInitialiseTaskLists+0x60>)
 8008480:	4413      	add	r3, r2
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f9be 	bl	8007804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3301      	adds	r3, #1
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b06      	cmp	r3, #6
 8008492:	d9ef      	bls.n	8008474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008494:	480d      	ldr	r0, [pc, #52]	@ (80084cc <prvInitialiseTaskLists+0x64>)
 8008496:	f7ff f9b5 	bl	8007804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800849a:	480d      	ldr	r0, [pc, #52]	@ (80084d0 <prvInitialiseTaskLists+0x68>)
 800849c:	f7ff f9b2 	bl	8007804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a0:	480c      	ldr	r0, [pc, #48]	@ (80084d4 <prvInitialiseTaskLists+0x6c>)
 80084a2:	f7ff f9af 	bl	8007804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084a6:	480c      	ldr	r0, [pc, #48]	@ (80084d8 <prvInitialiseTaskLists+0x70>)
 80084a8:	f7ff f9ac 	bl	8007804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084ac:	480b      	ldr	r0, [pc, #44]	@ (80084dc <prvInitialiseTaskLists+0x74>)
 80084ae:	f7ff f9a9 	bl	8007804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084b2:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <prvInitialiseTaskLists+0x78>)
 80084b4:	4a05      	ldr	r2, [pc, #20]	@ (80084cc <prvInitialiseTaskLists+0x64>)
 80084b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084b8:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <prvInitialiseTaskLists+0x7c>)
 80084ba:	4a05      	ldr	r2, [pc, #20]	@ (80084d0 <prvInitialiseTaskLists+0x68>)
 80084bc:	601a      	str	r2, [r3, #0]
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	2000849c 	.word	0x2000849c
 80084cc:	20008528 	.word	0x20008528
 80084d0:	2000853c 	.word	0x2000853c
 80084d4:	20008558 	.word	0x20008558
 80084d8:	2000856c 	.word	0x2000856c
 80084dc:	20008584 	.word	0x20008584
 80084e0:	20008550 	.word	0x20008550
 80084e4:	20008554 	.word	0x20008554

080084e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084ee:	e019      	b.n	8008524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084f0:	f000 fc1a 	bl	8008d28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f4:	4b10      	ldr	r3, [pc, #64]	@ (8008538 <prvCheckTasksWaitingTermination+0x50>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3304      	adds	r3, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f7ff fa09 	bl	8007918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <prvCheckTasksWaitingTermination+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	4a0b      	ldr	r2, [pc, #44]	@ (800853c <prvCheckTasksWaitingTermination+0x54>)
 800850e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008510:	4b0b      	ldr	r3, [pc, #44]	@ (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3b01      	subs	r3, #1
 8008516:	4a0a      	ldr	r2, [pc, #40]	@ (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800851a:	f000 fc37 	bl	8008d8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f810 	bl	8008544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008524:	4b06      	ldr	r3, [pc, #24]	@ (8008540 <prvCheckTasksWaitingTermination+0x58>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e1      	bne.n	80084f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800852c:	bf00      	nop
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	2000856c 	.word	0x2000856c
 800853c:	20008598 	.word	0x20008598
 8008540:	20008580 	.word	0x20008580

08008544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	334c      	adds	r3, #76	@ 0x4c
 8008550:	4618      	mov	r0, r3
 8008552:	f00e fd39 	bl	8016fc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800855c:	2b00      	cmp	r3, #0
 800855e:	d108      	bne.n	8008572 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fdcf 	bl	8009108 <vPortFree>
				vPortFree( pxTCB );
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fdcc 	bl	8009108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008570:	e019      	b.n	80085a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008578:	2b01      	cmp	r3, #1
 800857a:	d103      	bne.n	8008584 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fdc3 	bl	8009108 <vPortFree>
	}
 8008582:	e010      	b.n	80085a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800858a:	2b02      	cmp	r3, #2
 800858c:	d00b      	beq.n	80085a6 <prvDeleteTCB+0x62>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	60fb      	str	r3, [r7, #12]
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	e7fd      	b.n	80085a2 <prvDeleteTCB+0x5e>
	}
 80085a6:	bf00      	nop
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b6:	4b0c      	ldr	r3, [pc, #48]	@ (80085e8 <prvResetNextTaskUnblockTime+0x38>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085c0:	4b0a      	ldr	r3, [pc, #40]	@ (80085ec <prvResetNextTaskUnblockTime+0x3c>)
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c8:	e008      	b.n	80085dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ca:	4b07      	ldr	r3, [pc, #28]	@ (80085e8 <prvResetNextTaskUnblockTime+0x38>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4a04      	ldr	r2, [pc, #16]	@ (80085ec <prvResetNextTaskUnblockTime+0x3c>)
 80085da:	6013      	str	r3, [r2, #0]
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20008550 	.word	0x20008550
 80085ec:	200085b8 	.word	0x200085b8

080085f0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80085fe:	f000 fb93 	bl	8008d28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008602:	4b29      	ldr	r3, [pc, #164]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d01c      	beq.n	800864a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008610:	4b25      	ldr	r3, [pc, #148]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	43d2      	mvns	r2, r2
 800861c:	400a      	ands	r2, r1
 800861e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008622:	4b21      	ldr	r3, [pc, #132]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008632:	2101      	movs	r1, #1
 8008634:	6838      	ldr	r0, [r7, #0]
 8008636:	f000 f9e3 	bl	8008a00 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800863a:	4b1c      	ldr	r3, [pc, #112]	@ (80086ac <xTaskNotifyWait+0xbc>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800864a:	f000 fb9f 	bl	8008d8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800864e:	f000 fb6b 	bl	8008d28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008658:	4b13      	ldr	r3, [pc, #76]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008664:	4b10      	ldr	r3, [pc, #64]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b02      	cmp	r3, #2
 8008670:	d002      	beq.n	8008678 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]
 8008676:	e00a      	b.n	800868e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008678:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	43d2      	mvns	r2, r2
 8008684:	400a      	ands	r2, r1
 8008686:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 800868a:	2301      	movs	r3, #1
 800868c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800868e:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <xTaskNotifyWait+0xb8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8008698:	f000 fb78 	bl	8008d8c <vPortExitCritical>

		return xReturn;
 800869c:	697b      	ldr	r3, [r7, #20]
	}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20008498 	.word	0x20008498
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	@ 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80086c0:	2301      	movs	r3, #1
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <xTaskGenericNotify+0x32>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	61bb      	str	r3, [r7, #24]
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	e7fd      	b.n	80086de <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80086e6:	f000 fb1f 	bl	8008d28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8008700:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	2b04      	cmp	r3, #4
 800870e:	d82e      	bhi.n	800876e <xTaskGenericNotify+0xbe>
 8008710:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <xTaskGenericNotify+0x68>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	08008793 	.word	0x08008793
 800871c:	0800872d 	.word	0x0800872d
 8008720:	0800873f 	.word	0x0800873f
 8008724:	0800874f 	.word	0x0800874f
 8008728:	08008759 	.word	0x08008759
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	431a      	orrs	r2, r3
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800873c:	e02c      	b.n	8008798 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 800874c:	e024      	b.n	8008798 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	68ba      	ldr	r2, [r7, #8]
 8008752:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8008756:	e01f      	b.n	8008798 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008758:	7ffb      	ldrb	r3, [r7, #31]
 800875a:	2b02      	cmp	r3, #2
 800875c:	d004      	beq.n	8008768 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008766:	e017      	b.n	8008798 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8008768:	2300      	movs	r3, #0
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800876c:	e014      	b.n	8008798 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008778:	d00d      	beq.n	8008796 <xTaskGenericNotify+0xe6>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	617b      	str	r3, [r7, #20]
}
 800878c:	bf00      	nop
 800878e:	bf00      	nop
 8008790:	e7fd      	b.n	800878e <xTaskGenericNotify+0xde>
					break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <xTaskGenericNotify+0xe8>

					break;
 8008796:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008798:	7ffb      	ldrb	r3, [r7, #31]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d13a      	bne.n	8008814 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7ff f8b8 	bl	8007918 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	2201      	movs	r2, #1
 80087ae:	409a      	lsls	r2, r3
 80087b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008824 <xTaskGenericNotify+0x174>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008824 <xTaskGenericNotify+0x174>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a18      	ldr	r2, [pc, #96]	@ (8008828 <xTaskGenericNotify+0x178>)
 80087c8:	441a      	add	r2, r3
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7ff f844 	bl	800785e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <xTaskGenericNotify+0x146>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	613b      	str	r3, [r7, #16]
}
 80087f0:	bf00      	nop
 80087f2:	bf00      	nop
 80087f4:	e7fd      	b.n	80087f2 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <xTaskGenericNotify+0x17c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	429a      	cmp	r2, r3
 8008802:	d907      	bls.n	8008814 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008804:	4b0a      	ldr	r3, [pc, #40]	@ (8008830 <xTaskGenericNotify+0x180>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008814:	f000 faba 	bl	8008d8c <vPortExitCritical>

		return xReturn;
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800881a:	4618      	mov	r0, r3
 800881c:	3728      	adds	r7, #40	@ 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200085a0 	.word	0x200085a0
 8008828:	2000849c 	.word	0x2000849c
 800882c:	20008498 	.word	0x20008498
 8008830:	e000ed04 	.word	0xe000ed04

08008834 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08e      	sub	sp, #56	@ 0x38
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	4613      	mov	r3, r2
 8008842:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008844:	2301      	movs	r3, #1
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10b      	bne.n	8008866 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008860:	bf00      	nop
 8008862:	bf00      	nop
 8008864:	e7fd      	b.n	8008862 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008866:	f000 fb3f 	bl	8008ee8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800886e:	f3ef 8211 	mrs	r2, BASEPRI
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	623a      	str	r2, [r7, #32]
 8008884:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008886:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008888:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800889a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80088a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d82e      	bhi.n	8008910 <xTaskGenericNotifyFromISR+0xdc>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <xTaskGenericNotifyFromISR+0x84>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	08008935 	.word	0x08008935
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	080088df 	.word	0x080088df
 80088c4:	080088ef 	.word	0x080088ef
 80088c8:	080088f9 	.word	0x080088f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80088cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80088dc:	e02d      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80088ec:	e025      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80088f6:	e020      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80088f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d004      	beq.n	800890a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008908:	e017      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800890e:	e014      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800891a:	d00d      	beq.n	8008938 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	61bb      	str	r3, [r7, #24]
}
 800892e:	bf00      	nop
 8008930:	bf00      	nop
 8008932:	e7fd      	b.n	8008930 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008934:	bf00      	nop
 8008936:	e000      	b.n	800893a <xTaskGenericNotifyFromISR+0x106>
					break;
 8008938:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800893a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800893e:	2b01      	cmp	r3, #1
 8008940:	d146      	bne.n	80089d0 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	617b      	str	r3, [r7, #20]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008962:	4b21      	ldr	r3, [pc, #132]	@ (80089e8 <xTaskGenericNotifyFromISR+0x1b4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d11c      	bne.n	80089a4 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800896a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896c:	3304      	adds	r3, #4
 800896e:	4618      	mov	r0, r3
 8008970:	f7fe ffd2 	bl	8007918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008978:	2201      	movs	r2, #1
 800897a:	409a      	lsls	r2, r3
 800897c:	4b1b      	ldr	r3, [pc, #108]	@ (80089ec <xTaskGenericNotifyFromISR+0x1b8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4313      	orrs	r3, r2
 8008982:	4a1a      	ldr	r2, [pc, #104]	@ (80089ec <xTaskGenericNotifyFromISR+0x1b8>)
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4a17      	ldr	r2, [pc, #92]	@ (80089f0 <xTaskGenericNotifyFromISR+0x1bc>)
 8008994:	441a      	add	r2, r3
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	3304      	adds	r3, #4
 800899a:	4619      	mov	r1, r3
 800899c:	4610      	mov	r0, r2
 800899e:	f7fe ff5e 	bl	800785e <vListInsertEnd>
 80089a2:	e005      	b.n	80089b0 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	3318      	adds	r3, #24
 80089a8:	4619      	mov	r1, r3
 80089aa:	4812      	ldr	r0, [pc, #72]	@ (80089f4 <xTaskGenericNotifyFromISR+0x1c0>)
 80089ac:	f7fe ff57 	bl	800785e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b4:	4b10      	ldr	r3, [pc, #64]	@ (80089f8 <xTaskGenericNotifyFromISR+0x1c4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d908      	bls.n	80089d0 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80089be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80089c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80089ca:	4b0c      	ldr	r3, [pc, #48]	@ (80089fc <xTaskGenericNotifyFromISR+0x1c8>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80089da:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80089dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80089de:	4618      	mov	r0, r3
 80089e0:	3738      	adds	r7, #56	@ 0x38
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	200085c0 	.word	0x200085c0
 80089ec:	200085a0 	.word	0x200085a0
 80089f0:	2000849c 	.word	0x2000849c
 80089f4:	20008558 	.word	0x20008558
 80089f8:	20008498 	.word	0x20008498
 80089fc:	200085ac 	.word	0x200085ac

08008a00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a0a:	4b29      	ldr	r3, [pc, #164]	@ (8008ab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a10:	4b28      	ldr	r3, [pc, #160]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3304      	adds	r3, #4
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7fe ff7e 	bl	8007918 <uxListRemove>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10b      	bne.n	8008a3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008a22:	4b24      	ldr	r3, [pc, #144]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a28:	2201      	movs	r2, #1
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43da      	mvns	r2, r3
 8008a30:	4b21      	ldr	r3, [pc, #132]	@ (8008ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4013      	ands	r3, r2
 8008a36:	4a20      	ldr	r2, [pc, #128]	@ (8008ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008a38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a40:	d10a      	bne.n	8008a58 <prvAddCurrentTaskToDelayedList+0x58>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a48:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	3304      	adds	r3, #4
 8008a4e:	4619      	mov	r1, r3
 8008a50:	481a      	ldr	r0, [pc, #104]	@ (8008abc <prvAddCurrentTaskToDelayedList+0xbc>)
 8008a52:	f7fe ff04 	bl	800785e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a56:	e026      	b.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a60:	4b14      	ldr	r3, [pc, #80]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d209      	bcs.n	8008a84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a70:	4b13      	ldr	r3, [pc, #76]	@ (8008ac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fe ff12 	bl	80078a6 <vListInsert>
}
 8008a82:	e010      	b.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a84:	4b0f      	ldr	r3, [pc, #60]	@ (8008ac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7fe ff08 	bl	80078a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d202      	bcs.n	8008aa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008aa0:	4a09      	ldr	r2, [pc, #36]	@ (8008ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	6013      	str	r3, [r2, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	2000859c 	.word	0x2000859c
 8008ab4:	20008498 	.word	0x20008498
 8008ab8:	200085a0 	.word	0x200085a0
 8008abc:	20008584 	.word	0x20008584
 8008ac0:	20008554 	.word	0x20008554
 8008ac4:	20008550 	.word	0x20008550
 8008ac8:	200085b8 	.word	0x200085b8

08008acc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	3b04      	subs	r3, #4
 8008adc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	3b04      	subs	r3, #4
 8008aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f023 0201 	bic.w	r2, r3, #1
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008afc:	4a0c      	ldr	r2, [pc, #48]	@ (8008b30 <pxPortInitialiseStack+0x64>)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3b14      	subs	r3, #20
 8008b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3b04      	subs	r3, #4
 8008b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f06f 0202 	mvn.w	r2, #2
 8008b1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	3b20      	subs	r3, #32
 8008b20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b22:	68fb      	ldr	r3, [r7, #12]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	08008b35 	.word	0x08008b35

08008b34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b3e:	4b13      	ldr	r3, [pc, #76]	@ (8008b8c <prvTaskExitError+0x58>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b46:	d00b      	beq.n	8008b60 <prvTaskExitError+0x2c>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	60fb      	str	r3, [r7, #12]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <prvTaskExitError+0x28>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	60bb      	str	r3, [r7, #8]
}
 8008b72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b74:	bf00      	nop
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0fc      	beq.n	8008b76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20000018 	.word	0x20000018

08008b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b90:	4b07      	ldr	r3, [pc, #28]	@ (8008bb0 <pxCurrentTCBConst2>)
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	6808      	ldr	r0, [r1, #0]
 8008b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b9a:	f380 8809 	msr	PSP, r0
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f04f 0000 	mov.w	r0, #0
 8008ba6:	f380 8811 	msr	BASEPRI, r0
 8008baa:	4770      	bx	lr
 8008bac:	f3af 8000 	nop.w

08008bb0 <pxCurrentTCBConst2>:
 8008bb0:	20008498 	.word	0x20008498
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop

08008bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bb8:	4808      	ldr	r0, [pc, #32]	@ (8008bdc <prvPortStartFirstTask+0x24>)
 8008bba:	6800      	ldr	r0, [r0, #0]
 8008bbc:	6800      	ldr	r0, [r0, #0]
 8008bbe:	f380 8808 	msr	MSP, r0
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f380 8814 	msr	CONTROL, r0
 8008bca:	b662      	cpsie	i
 8008bcc:	b661      	cpsie	f
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	df00      	svc	0
 8008bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008bda:	bf00      	nop
 8008bdc:	e000ed08 	.word	0xe000ed08

08008be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008be6:	4b47      	ldr	r3, [pc, #284]	@ (8008d04 <xPortStartScheduler+0x124>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a47      	ldr	r2, [pc, #284]	@ (8008d08 <xPortStartScheduler+0x128>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d10b      	bne.n	8008c08 <xPortStartScheduler+0x28>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c08:	4b3e      	ldr	r3, [pc, #248]	@ (8008d04 <xPortStartScheduler+0x124>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d0c <xPortStartScheduler+0x12c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d10b      	bne.n	8008c2a <xPortStartScheduler+0x4a>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60fb      	str	r3, [r7, #12]
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop
 8008c28:	e7fd      	b.n	8008c26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c2a:	4b39      	ldr	r3, [pc, #228]	@ (8008d10 <xPortStartScheduler+0x130>)
 8008c2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	22ff      	movs	r2, #255	@ 0xff
 8008c3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b31      	ldr	r3, [pc, #196]	@ (8008d14 <xPortStartScheduler+0x134>)
 8008c50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c52:	4b31      	ldr	r3, [pc, #196]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008c54:	2207      	movs	r2, #7
 8008c56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c58:	e009      	b.n	8008c6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	4a2d      	ldr	r2, [pc, #180]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008c62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c76:	2b80      	cmp	r3, #128	@ 0x80
 8008c78:	d0ef      	beq.n	8008c5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c7a:	4b27      	ldr	r3, [pc, #156]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f1c3 0307 	rsb	r3, r3, #7
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d00b      	beq.n	8008c9e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	60bb      	str	r3, [r7, #8]
}
 8008c98:	bf00      	nop
 8008c9a:	bf00      	nop
 8008c9c:	e7fd      	b.n	8008c9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008ca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cb0:	4a19      	ldr	r2, [pc, #100]	@ (8008d18 <xPortStartScheduler+0x138>)
 8008cb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cbc:	4b17      	ldr	r3, [pc, #92]	@ (8008d1c <xPortStartScheduler+0x13c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a16      	ldr	r2, [pc, #88]	@ (8008d1c <xPortStartScheduler+0x13c>)
 8008cc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008cc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cc8:	4b14      	ldr	r3, [pc, #80]	@ (8008d1c <xPortStartScheduler+0x13c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a13      	ldr	r2, [pc, #76]	@ (8008d1c <xPortStartScheduler+0x13c>)
 8008cce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008cd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cd4:	f000 f8da 	bl	8008e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cd8:	4b11      	ldr	r3, [pc, #68]	@ (8008d20 <xPortStartScheduler+0x140>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008cde:	f000 f8f9 	bl	8008ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ce2:	4b10      	ldr	r3, [pc, #64]	@ (8008d24 <xPortStartScheduler+0x144>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8008d24 <xPortStartScheduler+0x144>)
 8008ce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008cec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cee:	f7ff ff63 	bl	8008bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cf2:	f7ff fb15 	bl	8008320 <vTaskSwitchContext>
	prvTaskExitError();
 8008cf6:	f7ff ff1d 	bl	8008b34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	e000ed00 	.word	0xe000ed00
 8008d08:	410fc271 	.word	0x410fc271
 8008d0c:	410fc270 	.word	0x410fc270
 8008d10:	e000e400 	.word	0xe000e400
 8008d14:	200085c4 	.word	0x200085c4
 8008d18:	200085c8 	.word	0x200085c8
 8008d1c:	e000ed20 	.word	0xe000ed20
 8008d20:	20000018 	.word	0x20000018
 8008d24:	e000ef34 	.word	0xe000ef34

08008d28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	607b      	str	r3, [r7, #4]
}
 8008d40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d42:	4b10      	ldr	r3, [pc, #64]	@ (8008d84 <vPortEnterCritical+0x5c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	4a0e      	ldr	r2, [pc, #56]	@ (8008d84 <vPortEnterCritical+0x5c>)
 8008d4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008d84 <vPortEnterCritical+0x5c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d110      	bne.n	8008d76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d54:	4b0c      	ldr	r3, [pc, #48]	@ (8008d88 <vPortEnterCritical+0x60>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00b      	beq.n	8008d76 <vPortEnterCritical+0x4e>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	603b      	str	r3, [r7, #0]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <vPortEnterCritical+0x4a>
	}
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000018 	.word	0x20000018
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d92:	4b12      	ldr	r3, [pc, #72]	@ (8008ddc <vPortExitCritical+0x50>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10b      	bne.n	8008db2 <vPortExitCritical+0x26>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	607b      	str	r3, [r7, #4]
}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	e7fd      	b.n	8008dae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008db2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <vPortExitCritical+0x50>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <vPortExitCritical+0x50>)
 8008dba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008dbc:	4b07      	ldr	r3, [pc, #28]	@ (8008ddc <vPortExitCritical+0x50>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d105      	bne.n	8008dd0 <vPortExitCritical+0x44>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	f383 8811 	msr	BASEPRI, r3
}
 8008dce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	20000018 	.word	0x20000018

08008de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008de0:	f3ef 8009 	mrs	r0, PSP
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	4b15      	ldr	r3, [pc, #84]	@ (8008e40 <pxCurrentTCBConst>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	f01e 0f10 	tst.w	lr, #16
 8008df0:	bf08      	it	eq
 8008df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfa:	6010      	str	r0, [r2, #0]
 8008dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e04:	f380 8811 	msr	BASEPRI, r0
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f7ff fa86 	bl	8008320 <vTaskSwitchContext>
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f380 8811 	msr	BASEPRI, r0
 8008e1c:	bc09      	pop	{r0, r3}
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6808      	ldr	r0, [r1, #0]
 8008e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e26:	f01e 0f10 	tst.w	lr, #16
 8008e2a:	bf08      	it	eq
 8008e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e30:	f380 8809 	msr	PSP, r0
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w

08008e40 <pxCurrentTCBConst>:
 8008e40:	20008498 	.word	0x20008498
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop

08008e48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e62:	f7ff f9a3 	bl	80081ac <xTaskIncrementTick>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e6c:	4b06      	ldr	r3, [pc, #24]	@ (8008e88 <SysTick_Handler+0x40>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f383 8811 	msr	BASEPRI, r3
}
 8008e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	e000ed04 	.word	0xe000ed04

08008e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e90:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e96:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <vPortSetupTimerInterrupt+0x38>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec8 <vPortSetupTimerInterrupt+0x3c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ecc <vPortSetupTimerInterrupt+0x40>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	099b      	lsrs	r3, r3, #6
 8008ea8:	4a09      	ldr	r2, [pc, #36]	@ (8008ed0 <vPortSetupTimerInterrupt+0x44>)
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eae:	4b04      	ldr	r3, [pc, #16]	@ (8008ec0 <vPortSetupTimerInterrupt+0x34>)
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	601a      	str	r2, [r3, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	e000e010 	.word	0xe000e010
 8008ec4:	e000e018 	.word	0xe000e018
 8008ec8:	20000004 	.word	0x20000004
 8008ecc:	10624dd3 	.word	0x10624dd3
 8008ed0:	e000e014 	.word	0xe000e014

08008ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ee4 <vPortEnableVFP+0x10>
 8008ed8:	6801      	ldr	r1, [r0, #0]
 8008eda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ede:	6001      	str	r1, [r0, #0]
 8008ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ee2:	bf00      	nop
 8008ee4:	e000ed88 	.word	0xe000ed88

08008ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d915      	bls.n	8008f26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008efa:	4a18      	ldr	r2, [pc, #96]	@ (8008f5c <vPortValidateInterruptPriority+0x74>)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f04:	4b16      	ldr	r3, [pc, #88]	@ (8008f60 <vPortValidateInterruptPriority+0x78>)
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	7afa      	ldrb	r2, [r7, #11]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d20b      	bcs.n	8008f26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	e7fd      	b.n	8008f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f26:	4b0f      	ldr	r3, [pc, #60]	@ (8008f64 <vPortValidateInterruptPriority+0x7c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f68 <vPortValidateInterruptPriority+0x80>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90b      	bls.n	8008f4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3a:	f383 8811 	msr	BASEPRI, r3
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	603b      	str	r3, [r7, #0]
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	e7fd      	b.n	8008f4a <vPortValidateInterruptPriority+0x62>
	}
 8008f4e:	bf00      	nop
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	e000e3f0 	.word	0xe000e3f0
 8008f60:	200085c4 	.word	0x200085c4
 8008f64:	e000ed0c 	.word	0xe000ed0c
 8008f68:	200085c8 	.word	0x200085c8

08008f6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	@ 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f78:	f7ff f86c 	bl	8008054 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80090f0 <pvPortMalloc+0x184>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f84:	f000 f924 	bl	80091d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f88:	4b5a      	ldr	r3, [pc, #360]	@ (80090f4 <pvPortMalloc+0x188>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4013      	ands	r3, r2
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 8095 	bne.w	80090c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d01e      	beq.n	8008fda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f9c:	2208      	movs	r2, #8
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d015      	beq.n	8008fda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f023 0307 	bic.w	r3, r3, #7
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00b      	beq.n	8008fda <pvPortMalloc+0x6e>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	617b      	str	r3, [r7, #20]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d06f      	beq.n	80090c0 <pvPortMalloc+0x154>
 8008fe0:	4b45      	ldr	r3, [pc, #276]	@ (80090f8 <pvPortMalloc+0x18c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d86a      	bhi.n	80090c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008fea:	4b44      	ldr	r3, [pc, #272]	@ (80090fc <pvPortMalloc+0x190>)
 8008fec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008fee:	4b43      	ldr	r3, [pc, #268]	@ (80090fc <pvPortMalloc+0x190>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ff4:	e004      	b.n	8009000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	429a      	cmp	r2, r3
 8009008:	d903      	bls.n	8009012 <pvPortMalloc+0xa6>
 800900a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1f1      	bne.n	8008ff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009012:	4b37      	ldr	r3, [pc, #220]	@ (80090f0 <pvPortMalloc+0x184>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009018:	429a      	cmp	r2, r3
 800901a:	d051      	beq.n	80090c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2208      	movs	r2, #8
 8009022:	4413      	add	r3, r2
 8009024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	1ad2      	subs	r2, r2, r3
 8009036:	2308      	movs	r3, #8
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	429a      	cmp	r2, r3
 800903c:	d920      	bls.n	8009080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800903e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4413      	add	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00b      	beq.n	8009068 <pvPortMalloc+0xfc>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	613b      	str	r3, [r7, #16]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800907a:	69b8      	ldr	r0, [r7, #24]
 800907c:	f000 f90a 	bl	8009294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009080:	4b1d      	ldr	r3, [pc, #116]	@ (80090f8 <pvPortMalloc+0x18c>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	4a1b      	ldr	r2, [pc, #108]	@ (80090f8 <pvPortMalloc+0x18c>)
 800908c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800908e:	4b1a      	ldr	r3, [pc, #104]	@ (80090f8 <pvPortMalloc+0x18c>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <pvPortMalloc+0x194>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d203      	bcs.n	80090a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800909a:	4b17      	ldr	r3, [pc, #92]	@ (80090f8 <pvPortMalloc+0x18c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a18      	ldr	r2, [pc, #96]	@ (8009100 <pvPortMalloc+0x194>)
 80090a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	4b13      	ldr	r3, [pc, #76]	@ (80090f4 <pvPortMalloc+0x188>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	431a      	orrs	r2, r3
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090b6:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <pvPortMalloc+0x198>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3301      	adds	r3, #1
 80090bc:	4a11      	ldr	r2, [pc, #68]	@ (8009104 <pvPortMalloc+0x198>)
 80090be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c0:	f7fe ffd6 	bl	8008070 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f003 0307 	and.w	r3, r3, #7
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <pvPortMalloc+0x17a>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	60fb      	str	r3, [r7, #12]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <pvPortMalloc+0x176>
	return pvReturn;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3728      	adds	r7, #40	@ 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	2000c1d4 	.word	0x2000c1d4
 80090f4:	2000c1e8 	.word	0x2000c1e8
 80090f8:	2000c1d8 	.word	0x2000c1d8
 80090fc:	2000c1cc 	.word	0x2000c1cc
 8009100:	2000c1dc 	.word	0x2000c1dc
 8009104:	2000c1e0 	.word	0x2000c1e0

08009108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d04f      	beq.n	80091ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800911a:	2308      	movs	r3, #8
 800911c:	425b      	negs	r3, r3
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	4413      	add	r3, r2
 8009122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	4b25      	ldr	r3, [pc, #148]	@ (80091c4 <vPortFree+0xbc>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10b      	bne.n	800914e <vPortFree+0x46>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60fb      	str	r3, [r7, #12]
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	e7fd      	b.n	800914a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <vPortFree+0x66>
	__asm volatile
 8009156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915a:	f383 8811 	msr	BASEPRI, r3
 800915e:	f3bf 8f6f 	isb	sy
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	60bb      	str	r3, [r7, #8]
}
 8009168:	bf00      	nop
 800916a:	bf00      	nop
 800916c:	e7fd      	b.n	800916a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	4b14      	ldr	r3, [pc, #80]	@ (80091c4 <vPortFree+0xbc>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4013      	ands	r3, r2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01e      	beq.n	80091ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d11a      	bne.n	80091ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	4b0e      	ldr	r3, [pc, #56]	@ (80091c4 <vPortFree+0xbc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	43db      	mvns	r3, r3
 800918e:	401a      	ands	r2, r3
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009194:	f7fe ff5e 	bl	8008054 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <vPortFree+0xc0>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4413      	add	r3, r2
 80091a2:	4a09      	ldr	r2, [pc, #36]	@ (80091c8 <vPortFree+0xc0>)
 80091a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091a6:	6938      	ldr	r0, [r7, #16]
 80091a8:	f000 f874 	bl	8009294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091ac:	4b07      	ldr	r3, [pc, #28]	@ (80091cc <vPortFree+0xc4>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3301      	adds	r3, #1
 80091b2:	4a06      	ldr	r2, [pc, #24]	@ (80091cc <vPortFree+0xc4>)
 80091b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091b6:	f7fe ff5b 	bl	8008070 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ba:	bf00      	nop
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	2000c1e8 	.word	0x2000c1e8
 80091c8:	2000c1d8 	.word	0x2000c1d8
 80091cc:	2000c1e4 	.word	0x2000c1e4

080091d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80091da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091dc:	4b27      	ldr	r3, [pc, #156]	@ (800927c <prvHeapInit+0xac>)
 80091de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f003 0307 	and.w	r3, r3, #7
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00c      	beq.n	8009204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3307      	adds	r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0307 	bic.w	r3, r3, #7
 80091f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	4a1f      	ldr	r2, [pc, #124]	@ (800927c <prvHeapInit+0xac>)
 8009200:	4413      	add	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009208:	4a1d      	ldr	r2, [pc, #116]	@ (8009280 <prvHeapInit+0xb0>)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800920e:	4b1c      	ldr	r3, [pc, #112]	@ (8009280 <prvHeapInit+0xb0>)
 8009210:	2200      	movs	r2, #0
 8009212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	4413      	add	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800921c:	2208      	movs	r2, #8
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0307 	bic.w	r3, r3, #7
 800922a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4a15      	ldr	r2, [pc, #84]	@ (8009284 <prvHeapInit+0xb4>)
 8009230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009232:	4b14      	ldr	r3, [pc, #80]	@ (8009284 <prvHeapInit+0xb4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800923a:	4b12      	ldr	r3, [pc, #72]	@ (8009284 <prvHeapInit+0xb4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009250:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <prvHeapInit+0xb4>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4a0a      	ldr	r2, [pc, #40]	@ (8009288 <prvHeapInit+0xb8>)
 800925e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4a09      	ldr	r2, [pc, #36]	@ (800928c <prvHeapInit+0xbc>)
 8009266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009268:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <prvHeapInit+0xc0>)
 800926a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800926e:	601a      	str	r2, [r3, #0]
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	200085cc 	.word	0x200085cc
 8009280:	2000c1cc 	.word	0x2000c1cc
 8009284:	2000c1d4 	.word	0x2000c1d4
 8009288:	2000c1dc 	.word	0x2000c1dc
 800928c:	2000c1d8 	.word	0x2000c1d8
 8009290:	2000c1e8 	.word	0x2000c1e8

08009294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800929c:	4b28      	ldr	r3, [pc, #160]	@ (8009340 <prvInsertBlockIntoFreeList+0xac>)
 800929e:	60fb      	str	r3, [r7, #12]
 80092a0:	e002      	b.n	80092a8 <prvInsertBlockIntoFreeList+0x14>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d8f7      	bhi.n	80092a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d108      	bne.n	80092d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	441a      	add	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	441a      	add	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d118      	bne.n	800931c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b15      	ldr	r3, [pc, #84]	@ (8009344 <prvInsertBlockIntoFreeList+0xb0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d00d      	beq.n	8009312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685a      	ldr	r2, [r3, #4]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	441a      	add	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	e008      	b.n	8009324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009312:	4b0c      	ldr	r3, [pc, #48]	@ (8009344 <prvInsertBlockIntoFreeList+0xb0>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	e003      	b.n	8009324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d002      	beq.n	8009332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	2000c1cc 	.word	0x2000c1cc
 8009344:	2000c1d4 	.word	0x2000c1d4

08009348 <rcl_get_zero_initialized_publisher>:
 8009348:	4b01      	ldr	r3, [pc, #4]	@ (8009350 <rcl_get_zero_initialized_publisher+0x8>)
 800934a:	6818      	ldr	r0, [r3, #0]
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	08019118 	.word	0x08019118

08009354 <rcl_publisher_init>:
 8009354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	b088      	sub	sp, #32
 800935a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800935c:	2d00      	cmp	r5, #0
 800935e:	d069      	beq.n	8009434 <rcl_publisher_init+0xe0>
 8009360:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009364:	4604      	mov	r4, r0
 8009366:	4648      	mov	r0, r9
 8009368:	460e      	mov	r6, r1
 800936a:	4690      	mov	r8, r2
 800936c:	461f      	mov	r7, r3
 800936e:	f001 f847 	bl	800a400 <rcutils_allocator_is_valid>
 8009372:	2800      	cmp	r0, #0
 8009374:	d05e      	beq.n	8009434 <rcl_publisher_init+0xe0>
 8009376:	2c00      	cmp	r4, #0
 8009378:	d05c      	beq.n	8009434 <rcl_publisher_init+0xe0>
 800937a:	f8d4 a000 	ldr.w	sl, [r4]
 800937e:	f1ba 0f00 	cmp.w	sl, #0
 8009382:	d004      	beq.n	800938e <rcl_publisher_init+0x3a>
 8009384:	2764      	movs	r7, #100	@ 0x64
 8009386:	4638      	mov	r0, r7
 8009388:	b008      	add	sp, #32
 800938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938e:	4630      	mov	r0, r6
 8009390:	f005 faac 	bl	800e8ec <rcl_node_is_valid>
 8009394:	2800      	cmp	r0, #0
 8009396:	d052      	beq.n	800943e <rcl_publisher_init+0xea>
 8009398:	f1b8 0f00 	cmp.w	r8, #0
 800939c:	d04a      	beq.n	8009434 <rcl_publisher_init+0xe0>
 800939e:	2f00      	cmp	r7, #0
 80093a0:	d048      	beq.n	8009434 <rcl_publisher_init+0xe0>
 80093a2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80093a6:	aa07      	add	r2, sp, #28
 80093a8:	9205      	str	r2, [sp, #20]
 80093aa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80093ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80093b6:	f8cd a01c 	str.w	sl, [sp, #28]
 80093ba:	4639      	mov	r1, r7
 80093bc:	e899 000c 	ldmia.w	r9, {r2, r3}
 80093c0:	4630      	mov	r0, r6
 80093c2:	f005 fae7 	bl	800e994 <rcl_node_resolve_name>
 80093c6:	4607      	mov	r7, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d14f      	bne.n	800946c <rcl_publisher_init+0x118>
 80093cc:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80093ce:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80093d0:	20c8      	movs	r0, #200	@ 0xc8
 80093d2:	4798      	blx	r3
 80093d4:	6020      	str	r0, [r4, #0]
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d04e      	beq.n	8009478 <rcl_publisher_init+0x124>
 80093da:	4630      	mov	r0, r6
 80093dc:	f005 faa8 	bl	800e930 <rcl_node_get_rmw_handle>
 80093e0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	9a07      	ldr	r2, [sp, #28]
 80093e8:	6827      	ldr	r7, [r4, #0]
 80093ea:	462b      	mov	r3, r5
 80093ec:	4641      	mov	r1, r8
 80093ee:	f001 f915 	bl	800a61c <rmw_create_publisher>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80093f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80093fc:	b370      	cbz	r0, 800945c <rcl_publisher_init+0x108>
 80093fe:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8009402:	f001 f9e9 	bl	800a7d8 <rmw_publisher_get_actual_qos>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	4607      	mov	r7, r0
 800940a:	b9d0      	cbnz	r0, 8009442 <rcl_publisher_init+0xee>
 800940c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8009410:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009414:	4629      	mov	r1, r5
 8009416:	2270      	movs	r2, #112	@ 0x70
 8009418:	4618      	mov	r0, r3
 800941a:	f00d fea6 	bl	801716a <memcpy>
 800941e:	6832      	ldr	r2, [r6, #0]
 8009420:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009424:	9807      	ldr	r0, [sp, #28]
 8009426:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009428:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800942a:	4798      	blx	r3
 800942c:	4638      	mov	r0, r7
 800942e:	b008      	add	sp, #32
 8009430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009434:	270b      	movs	r7, #11
 8009436:	4638      	mov	r0, r7
 8009438:	b008      	add	sp, #32
 800943a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943e:	27c8      	movs	r7, #200	@ 0xc8
 8009440:	e7a1      	b.n	8009386 <rcl_publisher_init+0x32>
 8009442:	b18b      	cbz	r3, 8009468 <rcl_publisher_init+0x114>
 8009444:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009448:	b142      	cbz	r2, 800945c <rcl_publisher_init+0x108>
 800944a:	4630      	mov	r0, r6
 800944c:	f005 fa70 	bl	800e930 <rcl_node_get_rmw_handle>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009456:	f001 f9cf 	bl	800a7f8 <rmw_destroy_publisher>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800945e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009460:	4618      	mov	r0, r3
 8009462:	4790      	blx	r2
 8009464:	2300      	movs	r3, #0
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	2701      	movs	r7, #1
 800946a:	e7db      	b.n	8009424 <rcl_publisher_init+0xd0>
 800946c:	2867      	cmp	r0, #103	@ 0x67
 800946e:	d0d9      	beq.n	8009424 <rcl_publisher_init+0xd0>
 8009470:	2869      	cmp	r0, #105	@ 0x69
 8009472:	d003      	beq.n	800947c <rcl_publisher_init+0x128>
 8009474:	280a      	cmp	r0, #10
 8009476:	d1f7      	bne.n	8009468 <rcl_publisher_init+0x114>
 8009478:	270a      	movs	r7, #10
 800947a:	e7d3      	b.n	8009424 <rcl_publisher_init+0xd0>
 800947c:	2767      	movs	r7, #103	@ 0x67
 800947e:	e7d1      	b.n	8009424 <rcl_publisher_init+0xd0>

08009480 <rcl_publisher_get_default_options>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	4d14      	ldr	r5, [pc, #80]	@ (80094d4 <rcl_publisher_get_default_options+0x54>)
 8009484:	4914      	ldr	r1, [pc, #80]	@ (80094d8 <rcl_publisher_get_default_options+0x58>)
 8009486:	b088      	sub	sp, #32
 8009488:	4604      	mov	r4, r0
 800948a:	2250      	movs	r2, #80	@ 0x50
 800948c:	4628      	mov	r0, r5
 800948e:	f00d fe6c 	bl	801716a <memcpy>
 8009492:	a802      	add	r0, sp, #8
 8009494:	f000 ffa6 	bl	800a3e4 <rcutils_get_default_allocator>
 8009498:	f10d 0c08 	add.w	ip, sp, #8
 800949c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80094a0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80094a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80094a8:	466e      	mov	r6, sp
 80094aa:	f8dc 3000 	ldr.w	r3, [ip]
 80094ae:	f8ce 3000 	str.w	r3, [lr]
 80094b2:	4630      	mov	r0, r6
 80094b4:	f001 f834 	bl	800a520 <rmw_get_default_publisher_options>
 80094b8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80094bc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80094c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80094c4:	2270      	movs	r2, #112	@ 0x70
 80094c6:	4629      	mov	r1, r5
 80094c8:	4620      	mov	r0, r4
 80094ca:	f00d fe4e 	bl	801716a <memcpy>
 80094ce:	4620      	mov	r0, r4
 80094d0:	b008      	add	sp, #32
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	2000c1f0 	.word	0x2000c1f0
 80094d8:	08019120 	.word	0x08019120

080094dc <rcl_publish>:
 80094dc:	b1f8      	cbz	r0, 800951e <rcl_publish+0x42>
 80094de:	6803      	ldr	r3, [r0, #0]
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4604      	mov	r4, r0
 80094e4:	b1b3      	cbz	r3, 8009514 <rcl_publish+0x38>
 80094e6:	4616      	mov	r6, r2
 80094e8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80094ec:	b192      	cbz	r2, 8009514 <rcl_publish+0x38>
 80094ee:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80094f2:	460d      	mov	r5, r1
 80094f4:	f004 fe20 	bl	800e138 <rcl_context_is_valid>
 80094f8:	b160      	cbz	r0, 8009514 <rcl_publish+0x38>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009500:	b140      	cbz	r0, 8009514 <rcl_publish+0x38>
 8009502:	b155      	cbz	r5, 800951a <rcl_publish+0x3e>
 8009504:	4632      	mov	r2, r6
 8009506:	4629      	mov	r1, r5
 8009508:	f001 f828 	bl	800a55c <rmw_publish>
 800950c:	3800      	subs	r0, #0
 800950e:	bf18      	it	ne
 8009510:	2001      	movne	r0, #1
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	200b      	movs	r0, #11
 800951c:	bd70      	pop	{r4, r5, r6, pc}
 800951e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009522:	4770      	bx	lr

08009524 <rcl_publisher_is_valid>:
 8009524:	b1a0      	cbz	r0, 8009550 <rcl_publisher_is_valid+0x2c>
 8009526:	6803      	ldr	r3, [r0, #0]
 8009528:	b510      	push	{r4, lr}
 800952a:	4604      	mov	r4, r0
 800952c:	b173      	cbz	r3, 800954c <rcl_publisher_is_valid+0x28>
 800952e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009532:	b15a      	cbz	r2, 800954c <rcl_publisher_is_valid+0x28>
 8009534:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009538:	f004 fdfe 	bl	800e138 <rcl_context_is_valid>
 800953c:	b130      	cbz	r0, 800954c <rcl_publisher_is_valid+0x28>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009544:	3800      	subs	r0, #0
 8009546:	bf18      	it	ne
 8009548:	2001      	movne	r0, #1
 800954a:	bd10      	pop	{r4, pc}
 800954c:	2000      	movs	r0, #0
 800954e:	bd10      	pop	{r4, pc}
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr

08009554 <rcl_publisher_is_valid_except_context>:
 8009554:	b130      	cbz	r0, 8009564 <rcl_publisher_is_valid_except_context+0x10>
 8009556:	6800      	ldr	r0, [r0, #0]
 8009558:	b120      	cbz	r0, 8009564 <rcl_publisher_is_valid_except_context+0x10>
 800955a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800955e:	3800      	subs	r0, #0
 8009560:	bf18      	it	ne
 8009562:	2001      	movne	r0, #1
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop

08009568 <_rclc_check_for_new_data>:
 8009568:	2800      	cmp	r0, #0
 800956a:	d046      	beq.n	80095fa <_rclc_check_for_new_data+0x92>
 800956c:	b510      	push	{r4, lr}
 800956e:	7802      	ldrb	r2, [r0, #0]
 8009570:	b084      	sub	sp, #16
 8009572:	4603      	mov	r3, r0
 8009574:	2a0a      	cmp	r2, #10
 8009576:	d842      	bhi.n	80095fe <_rclc_check_for_new_data+0x96>
 8009578:	e8df f002 	tbb	[pc, r2]
 800957c:	14181212 	.word	0x14181212
 8009580:	06060614 	.word	0x06060614
 8009584:	2e1a      	.short	0x2e1a
 8009586:	16          	.byte	0x16
 8009587:	00          	.byte	0x00
 8009588:	6a0a      	ldr	r2, [r1, #32]
 800958a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800958c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009590:	2000      	movs	r0, #0
 8009592:	1a12      	subs	r2, r2, r0
 8009594:	bf18      	it	ne
 8009596:	2201      	movne	r2, #1
 8009598:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800959c:	b004      	add	sp, #16
 800959e:	bd10      	pop	{r4, pc}
 80095a0:	680a      	ldr	r2, [r1, #0]
 80095a2:	e7f2      	b.n	800958a <_rclc_check_for_new_data+0x22>
 80095a4:	698a      	ldr	r2, [r1, #24]
 80095a6:	e7f0      	b.n	800958a <_rclc_check_for_new_data+0x22>
 80095a8:	688a      	ldr	r2, [r1, #8]
 80095aa:	e7ee      	b.n	800958a <_rclc_check_for_new_data+0x22>
 80095ac:	690a      	ldr	r2, [r1, #16]
 80095ae:	e7ec      	b.n	800958a <_rclc_check_for_new_data+0x22>
 80095b0:	685c      	ldr	r4, [r3, #4]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80095b8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80095bc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80095c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80095ca:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80095ce:	f104 0110 	add.w	r1, r4, #16
 80095d2:	f006 fead 	bl	8010330 <rcl_action_client_wait_set_get_entities_ready>
 80095d6:	e7e1      	b.n	800959c <_rclc_check_for_new_data+0x34>
 80095d8:	685c      	ldr	r4, [r3, #4]
 80095da:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80095de:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80095e2:	e9cd 3200 	strd	r3, r2, [sp]
 80095e6:	4608      	mov	r0, r1
 80095e8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80095ec:	f104 0220 	add.w	r2, r4, #32
 80095f0:	f104 0110 	add.w	r1, r4, #16
 80095f4:	f007 f8b4 	bl	8010760 <rcl_action_server_wait_set_get_entities_ready>
 80095f8:	e7d0      	b.n	800959c <_rclc_check_for_new_data+0x34>
 80095fa:	200b      	movs	r0, #11
 80095fc:	4770      	bx	lr
 80095fe:	2001      	movs	r0, #1
 8009600:	e7cc      	b.n	800959c <_rclc_check_for_new_data+0x34>
 8009602:	bf00      	nop

08009604 <_rclc_take_new_data>:
 8009604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009606:	b09b      	sub	sp, #108	@ 0x6c
 8009608:	2800      	cmp	r0, #0
 800960a:	f000 8088 	beq.w	800971e <_rclc_take_new_data+0x11a>
 800960e:	7803      	ldrb	r3, [r0, #0]
 8009610:	4604      	mov	r4, r0
 8009612:	2b0a      	cmp	r3, #10
 8009614:	f200 8167 	bhi.w	80098e6 <_rclc_take_new_data+0x2e2>
 8009618:	e8df f003 	tbb	[pc, r3]
 800961c:	44152d2d 	.word	0x44152d2d
 8009620:	19191944 	.word	0x19191944
 8009624:	065a      	.short	0x065a
 8009626:	15          	.byte	0x15
 8009627:	00          	.byte	0x00
 8009628:	6840      	ldr	r0, [r0, #4]
 800962a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 80b2 	bne.w	8009798 <_rclc_take_new_data+0x194>
 8009634:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 80e4 	bne.w	8009806 <_rclc_take_new_data+0x202>
 800963e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009642:	2b00      	cmp	r3, #0
 8009644:	d16f      	bne.n	8009726 <_rclc_take_new_data+0x122>
 8009646:	2500      	movs	r5, #0
 8009648:	4628      	mov	r0, r5
 800964a:	b01b      	add	sp, #108	@ 0x6c
 800964c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800964e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009650:	6a0b      	ldr	r3, [r1, #32]
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0f5      	beq.n	8009646 <_rclc_take_new_data+0x42>
 800965a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800965e:	f104 0110 	add.w	r1, r4, #16
 8009662:	f005 fb41 	bl	800ece8 <rcl_take_request>
 8009666:	4605      	mov	r5, r0
 8009668:	2800      	cmp	r0, #0
 800966a:	d0ec      	beq.n	8009646 <_rclc_take_new_data+0x42>
 800966c:	f240 2359 	movw	r3, #601	@ 0x259
 8009670:	4298      	cmp	r0, r3
 8009672:	d013      	beq.n	800969c <_rclc_take_new_data+0x98>
 8009674:	e029      	b.n	80096ca <_rclc_take_new_data+0xc6>
 8009676:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009678:	680b      	ldr	r3, [r1, #0]
 800967a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0e1      	beq.n	8009646 <_rclc_take_new_data+0x42>
 8009682:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009686:	2300      	movs	r3, #0
 8009688:	aa0a      	add	r2, sp, #40	@ 0x28
 800968a:	f005 fc6b 	bl	800ef64 <rcl_take>
 800968e:	4605      	mov	r5, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d0d9      	beq.n	8009648 <_rclc_take_new_data+0x44>
 8009694:	f240 1391 	movw	r3, #401	@ 0x191
 8009698:	4298      	cmp	r0, r3
 800969a:	d116      	bne.n	80096ca <_rclc_take_new_data+0xc6>
 800969c:	2300      	movs	r3, #0
 800969e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80096a2:	e7d1      	b.n	8009648 <_rclc_take_new_data+0x44>
 80096a4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80096a6:	698b      	ldr	r3, [r1, #24]
 80096a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d0ca      	beq.n	8009646 <_rclc_take_new_data+0x42>
 80096b0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80096b4:	f104 0110 	add.w	r1, r4, #16
 80096b8:	f004 fcce 	bl	800e058 <rcl_take_response>
 80096bc:	4605      	mov	r5, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0c1      	beq.n	8009646 <_rclc_take_new_data+0x42>
 80096c2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80096c6:	4298      	cmp	r0, r3
 80096c8:	d0be      	beq.n	8009648 <_rclc_take_new_data+0x44>
 80096ca:	f000 febd 	bl	800a448 <rcutils_reset_error>
 80096ce:	e7bb      	b.n	8009648 <_rclc_take_new_data+0x44>
 80096d0:	6840      	ldr	r0, [r0, #4]
 80096d2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d17d      	bne.n	80097d6 <_rclc_take_new_data+0x1d2>
 80096da:	69c3      	ldr	r3, [r0, #28]
 80096dc:	b11b      	cbz	r3, 80096e6 <_rclc_take_new_data+0xe2>
 80096de:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d144      	bne.n	8009770 <_rclc_take_new_data+0x16c>
 80096e6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 80ac 	bne.w	8009848 <_rclc_take_new_data+0x244>
 80096f0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0a6      	beq.n	8009646 <_rclc_take_new_data+0x42>
 80096f8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80096fa:	a90a      	add	r1, sp, #40	@ 0x28
 80096fc:	3010      	adds	r0, #16
 80096fe:	f006 fcef 	bl	80100e0 <rcl_action_take_result_response>
 8009702:	4605      	mov	r5, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d1e0      	bne.n	80096ca <_rclc_take_new_data+0xc6>
 8009708:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800970c:	6860      	ldr	r0, [r4, #4]
 800970e:	f007 f94b 	bl	80109a8 <rclc_action_find_handle_by_result_request_sequence_number>
 8009712:	2800      	cmp	r0, #0
 8009714:	d098      	beq.n	8009648 <_rclc_take_new_data+0x44>
 8009716:	2301      	movs	r3, #1
 8009718:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800971c:	e794      	b.n	8009648 <_rclc_take_new_data+0x44>
 800971e:	250b      	movs	r5, #11
 8009720:	4628      	mov	r0, r5
 8009722:	b01b      	add	sp, #108	@ 0x6c
 8009724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009726:	ae04      	add	r6, sp, #16
 8009728:	aa0a      	add	r2, sp, #40	@ 0x28
 800972a:	3010      	adds	r0, #16
 800972c:	4631      	mov	r1, r6
 800972e:	f006 ff4b 	bl	80105c8 <rcl_action_take_cancel_request>
 8009732:	4605      	mov	r5, r0
 8009734:	2800      	cmp	r0, #0
 8009736:	d1c8      	bne.n	80096ca <_rclc_take_new_data+0xc6>
 8009738:	6860      	ldr	r0, [r4, #4]
 800973a:	a90a      	add	r1, sp, #40	@ 0x28
 800973c:	f007 f8f2 	bl	8010924 <rclc_action_find_goal_handle_by_uuid>
 8009740:	4607      	mov	r7, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	f000 80bb 	beq.w	80098be <_rclc_take_new_data+0x2ba>
 8009748:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800974c:	2101      	movs	r1, #1
 800974e:	f007 f873 	bl	8010838 <rcl_action_transition_goal_state>
 8009752:	2803      	cmp	r0, #3
 8009754:	4684      	mov	ip, r0
 8009756:	f040 80a7 	bne.w	80098a8 <_rclc_take_new_data+0x2a4>
 800975a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800975c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009762:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009766:	e884 0003 	stmia.w	r4, {r0, r1}
 800976a:	f887 c008 	strb.w	ip, [r7, #8]
 800976e:	e76b      	b.n	8009648 <_rclc_take_new_data+0x44>
 8009770:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009772:	3010      	adds	r0, #16
 8009774:	f006 fd34 	bl	80101e0 <rcl_action_take_feedback>
 8009778:	4605      	mov	r5, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d1a5      	bne.n	80096ca <_rclc_take_new_data+0xc6>
 800977e:	6860      	ldr	r0, [r4, #4]
 8009780:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009782:	f007 f8cf 	bl	8010924 <rclc_action_find_goal_handle_by_uuid>
 8009786:	4603      	mov	r3, r0
 8009788:	2800      	cmp	r0, #0
 800978a:	f000 80a3 	beq.w	80098d4 <_rclc_take_new_data+0x2d0>
 800978e:	2201      	movs	r2, #1
 8009790:	6860      	ldr	r0, [r4, #4]
 8009792:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009796:	e7a6      	b.n	80096e6 <_rclc_take_new_data+0xe2>
 8009798:	f007 f89e 	bl	80108d8 <rclc_action_take_goal_handle>
 800979c:	4606      	mov	r6, r0
 800979e:	6860      	ldr	r0, [r4, #4]
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	f43f af47 	beq.w	8009634 <_rclc_take_new_data+0x30>
 80097a6:	6070      	str	r0, [r6, #4]
 80097a8:	69f2      	ldr	r2, [r6, #28]
 80097aa:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80097ae:	3010      	adds	r0, #16
 80097b0:	f006 fe52 	bl	8010458 <rcl_action_take_goal_request>
 80097b4:	4605      	mov	r5, r0
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f040 808e 	bne.w	80098d8 <_rclc_take_new_data+0x2d4>
 80097bc:	69f7      	ldr	r7, [r6, #28]
 80097be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80097c0:	7235      	strb	r5, [r6, #8]
 80097c2:	f8c6 0009 	str.w	r0, [r6, #9]
 80097c6:	f8c6 100d 	str.w	r1, [r6, #13]
 80097ca:	6860      	ldr	r0, [r4, #4]
 80097cc:	f8c6 2011 	str.w	r2, [r6, #17]
 80097d0:	f8c6 3015 	str.w	r3, [r6, #21]
 80097d4:	e72e      	b.n	8009634 <_rclc_take_new_data+0x30>
 80097d6:	aa04      	add	r2, sp, #16
 80097d8:	a90a      	add	r1, sp, #40	@ 0x28
 80097da:	3010      	adds	r0, #16
 80097dc:	f006 fc08 	bl	800fff0 <rcl_action_take_goal_response>
 80097e0:	4605      	mov	r5, r0
 80097e2:	2800      	cmp	r0, #0
 80097e4:	f47f af71 	bne.w	80096ca <_rclc_take_new_data+0xc6>
 80097e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097ec:	6860      	ldr	r0, [r4, #4]
 80097ee:	f007 f8c9 	bl	8010984 <rclc_action_find_handle_by_goal_request_sequence_number>
 80097f2:	b130      	cbz	r0, 8009802 <_rclc_take_new_data+0x1fe>
 80097f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80097f8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 80097fc:	2201      	movs	r2, #1
 80097fe:	f880 2020 	strb.w	r2, [r0, #32]
 8009802:	6860      	ldr	r0, [r4, #4]
 8009804:	e769      	b.n	80096da <_rclc_take_new_data+0xd6>
 8009806:	aa04      	add	r2, sp, #16
 8009808:	3010      	adds	r0, #16
 800980a:	a90a      	add	r1, sp, #40	@ 0x28
 800980c:	f006 fe9c 	bl	8010548 <rcl_action_take_result_request>
 8009810:	4605      	mov	r5, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	f47f af59 	bne.w	80096ca <_rclc_take_new_data+0xc6>
 8009818:	6860      	ldr	r0, [r4, #4]
 800981a:	a904      	add	r1, sp, #16
 800981c:	f007 f882 	bl	8010924 <rclc_action_find_goal_handle_by_uuid>
 8009820:	4607      	mov	r7, r0
 8009822:	b160      	cbz	r0, 800983e <_rclc_take_new_data+0x23a>
 8009824:	ad0a      	add	r5, sp, #40	@ 0x28
 8009826:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800982a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800982c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800982e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009832:	f04f 0c02 	mov.w	ip, #2
 8009836:	e886 0003 	stmia.w	r6, {r0, r1}
 800983a:	f887 c008 	strb.w	ip, [r7, #8]
 800983e:	6860      	ldr	r0, [r4, #4]
 8009840:	2300      	movs	r3, #0
 8009842:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009846:	e6fa      	b.n	800963e <_rclc_take_new_data+0x3a>
 8009848:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800984c:	a90a      	add	r1, sp, #40	@ 0x28
 800984e:	3010      	adds	r0, #16
 8009850:	f006 fc86 	bl	8010160 <rcl_action_take_cancel_response>
 8009854:	4605      	mov	r5, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	f47f af37 	bne.w	80096ca <_rclc_take_new_data+0xc6>
 800985c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009860:	6860      	ldr	r0, [r4, #4]
 8009862:	f007 f8b3 	bl	80109cc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009866:	4606      	mov	r6, r0
 8009868:	6860      	ldr	r0, [r4, #4]
 800986a:	2e00      	cmp	r6, #0
 800986c:	f43f af40 	beq.w	80096f0 <_rclc_take_new_data+0xec>
 8009870:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009872:	2701      	movs	r7, #1
 8009874:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009876:	2b00      	cmp	r3, #0
 8009878:	f43f af3a 	beq.w	80096f0 <_rclc_take_new_data+0xec>
 800987c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800987e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009882:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009886:	f007 f84d 	bl	8010924 <rclc_action_find_goal_handle_by_uuid>
 800988a:	b138      	cbz	r0, 800989c <_rclc_take_new_data+0x298>
 800988c:	6860      	ldr	r0, [r4, #4]
 800988e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009890:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009894:	3501      	adds	r5, #1
 8009896:	42ab      	cmp	r3, r5
 8009898:	d8f0      	bhi.n	800987c <_rclc_take_new_data+0x278>
 800989a:	e729      	b.n	80096f0 <_rclc_take_new_data+0xec>
 800989c:	6860      	ldr	r0, [r4, #4]
 800989e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80098a0:	3501      	adds	r5, #1
 80098a2:	42ab      	cmp	r3, r5
 80098a4:	d8ea      	bhi.n	800987c <_rclc_take_new_data+0x278>
 80098a6:	e723      	b.n	80096f0 <_rclc_take_new_data+0xec>
 80098a8:	ab06      	add	r3, sp, #24
 80098aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80098b0:	2103      	movs	r1, #3
 80098b2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80098b6:	6860      	ldr	r0, [r4, #4]
 80098b8:	f007 f8fe 	bl	8010ab8 <rclc_action_server_goal_cancel_reject>
 80098bc:	e6c4      	b.n	8009648 <_rclc_take_new_data+0x44>
 80098be:	ab06      	add	r3, sp, #24
 80098c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80098c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80098c6:	2102      	movs	r1, #2
 80098c8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80098cc:	6860      	ldr	r0, [r4, #4]
 80098ce:	f007 f8f3 	bl	8010ab8 <rclc_action_server_goal_cancel_reject>
 80098d2:	e6b9      	b.n	8009648 <_rclc_take_new_data+0x44>
 80098d4:	6860      	ldr	r0, [r4, #4]
 80098d6:	e706      	b.n	80096e6 <_rclc_take_new_data+0xe2>
 80098d8:	6860      	ldr	r0, [r4, #4]
 80098da:	4631      	mov	r1, r6
 80098dc:	f007 f80c 	bl	80108f8 <rclc_action_remove_used_goal_handle>
 80098e0:	f000 fdb2 	bl	800a448 <rcutils_reset_error>
 80098e4:	e6b0      	b.n	8009648 <_rclc_take_new_data+0x44>
 80098e6:	2501      	movs	r5, #1
 80098e8:	e6ae      	b.n	8009648 <_rclc_take_new_data+0x44>
 80098ea:	bf00      	nop

080098ec <_rclc_execute.part.0>:
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	7803      	ldrb	r3, [r0, #0]
 80098f0:	b087      	sub	sp, #28
 80098f2:	4604      	mov	r4, r0
 80098f4:	2b0a      	cmp	r3, #10
 80098f6:	f200 8136 	bhi.w	8009b66 <_rclc_execute.part.0+0x27a>
 80098fa:	e8df f003 	tbb	[pc, r3]
 80098fe:	435e      	.short	0x435e
 8009900:	06a1664f 	.word	0x06a1664f
 8009904:	6c1e0606 	.word	0x6c1e0606
 8009908:	59          	.byte	0x59
 8009909:	00          	.byte	0x00
 800990a:	2b06      	cmp	r3, #6
 800990c:	f000 8122 	beq.w	8009b54 <_rclc_execute.part.0+0x268>
 8009910:	2b07      	cmp	r3, #7
 8009912:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009914:	f040 8118 	bne.w	8009b48 <_rclc_execute.part.0+0x25c>
 8009918:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800991c:	6880      	ldr	r0, [r0, #8]
 800991e:	4798      	blx	r3
 8009920:	f104 0110 	add.w	r1, r4, #16
 8009924:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009926:	6860      	ldr	r0, [r4, #4]
 8009928:	f005 fa1e 	bl	800ed68 <rcl_send_response>
 800992c:	2800      	cmp	r0, #0
 800992e:	d033      	beq.n	8009998 <_rclc_execute.part.0+0xac>
 8009930:	9005      	str	r0, [sp, #20]
 8009932:	f000 fd89 	bl	800a448 <rcutils_reset_error>
 8009936:	9805      	ldr	r0, [sp, #20]
 8009938:	e02e      	b.n	8009998 <_rclc_execute.part.0+0xac>
 800993a:	6840      	ldr	r0, [r0, #4]
 800993c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 8086 	beq.w	8009a52 <_rclc_execute.part.0+0x166>
 8009946:	2600      	movs	r6, #0
 8009948:	2701      	movs	r7, #1
 800994a:	e004      	b.n	8009956 <_rclc_execute.part.0+0x6a>
 800994c:	f006 ff9e 	bl	801088c <rclc_action_send_result_request>
 8009950:	b998      	cbnz	r0, 800997a <_rclc_execute.part.0+0x8e>
 8009952:	722f      	strb	r7, [r5, #8]
 8009954:	6860      	ldr	r0, [r4, #4]
 8009956:	f007 f84b 	bl	80109f0 <rclc_action_find_first_handle_with_goal_response>
 800995a:	4605      	mov	r5, r0
 800995c:	2800      	cmp	r0, #0
 800995e:	d077      	beq.n	8009a50 <_rclc_execute.part.0+0x164>
 8009960:	6863      	ldr	r3, [r4, #4]
 8009962:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800996a:	f885 6020 	strb.w	r6, [r5, #32]
 800996e:	4798      	blx	r3
 8009970:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009974:	4628      	mov	r0, r5
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1e8      	bne.n	800994c <_rclc_execute.part.0+0x60>
 800997a:	6860      	ldr	r0, [r4, #4]
 800997c:	4629      	mov	r1, r5
 800997e:	f006 ffbb 	bl	80108f8 <rclc_action_remove_used_goal_handle>
 8009982:	e7e7      	b.n	8009954 <_rclc_execute.part.0+0x68>
 8009984:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009988:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800998c:	2d00      	cmp	r5, #0
 800998e:	f000 80c9 	beq.w	8009b24 <_rclc_execute.part.0+0x238>
 8009992:	6880      	ldr	r0, [r0, #8]
 8009994:	4798      	blx	r3
 8009996:	2000      	movs	r0, #0
 8009998:	b007      	add	sp, #28
 800999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800999c:	6840      	ldr	r0, [r0, #4]
 800999e:	f005 fbe5 	bl	800f16c <rcl_timer_call>
 80099a2:	f240 3321 	movw	r3, #801	@ 0x321
 80099a6:	4298      	cmp	r0, r3
 80099a8:	d004      	beq.n	80099b4 <_rclc_execute.part.0+0xc8>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	d0f4      	beq.n	8009998 <_rclc_execute.part.0+0xac>
 80099ae:	e7bf      	b.n	8009930 <_rclc_execute.part.0+0x44>
 80099b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099b2:	4798      	blx	r3
 80099b4:	2000      	movs	r0, #0
 80099b6:	b007      	add	sp, #28
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 80099be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099c0:	b925      	cbnz	r5, 80099cc <_rclc_execute.part.0+0xe0>
 80099c2:	4628      	mov	r0, r5
 80099c4:	4798      	blx	r3
 80099c6:	4628      	mov	r0, r5
 80099c8:	e7e6      	b.n	8009998 <_rclc_execute.part.0+0xac>
 80099ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80099cc:	68a0      	ldr	r0, [r4, #8]
 80099ce:	4798      	blx	r3
 80099d0:	2000      	movs	r0, #0
 80099d2:	b007      	add	sp, #28
 80099d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d6:	6840      	ldr	r0, [r0, #4]
 80099d8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80099dc:	bb3b      	cbnz	r3, 8009a2e <_rclc_execute.part.0+0x142>
 80099de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d07b      	beq.n	8009ade <_rclc_execute.part.0+0x1f2>
 80099e6:	f640 0634 	movw	r6, #2100	@ 0x834
 80099ea:	2701      	movs	r7, #1
 80099ec:	e007      	b.n	80099fe <_rclc_execute.part.0+0x112>
 80099ee:	4628      	mov	r0, r5
 80099f0:	f007 f816 	bl	8010a20 <rclc_action_server_response_goal_request>
 80099f4:	6860      	ldr	r0, [r4, #4]
 80099f6:	4629      	mov	r1, r5
 80099f8:	f006 ff7e 	bl	80108f8 <rclc_action_remove_used_goal_handle>
 80099fc:	6860      	ldr	r0, [r4, #4]
 80099fe:	2100      	movs	r1, #0
 8009a00:	f006 ffa8 	bl	8010954 <rclc_action_find_first_handle_by_status>
 8009a04:	4605      	mov	r5, r0
 8009a06:	2800      	cmp	r0, #0
 8009a08:	d066      	beq.n	8009ad8 <_rclc_execute.part.0+0x1ec>
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	4798      	blx	r3
 8009a12:	42b0      	cmp	r0, r6
 8009a14:	f04f 0100 	mov.w	r1, #0
 8009a18:	d1e9      	bne.n	80099ee <_rclc_execute.part.0+0x102>
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	f006 ffff 	bl	8010a20 <rclc_action_server_response_goal_request>
 8009a22:	722f      	strb	r7, [r5, #8]
 8009a24:	e7ea      	b.n	80099fc <_rclc_execute.part.0+0x110>
 8009a26:	6848      	ldr	r0, [r1, #4]
 8009a28:	f006 ff66 	bl	80108f8 <rclc_action_remove_used_goal_handle>
 8009a2c:	6860      	ldr	r0, [r4, #4]
 8009a2e:	f006 ff9d 	bl	801096c <rclc_action_find_first_terminated_handle>
 8009a32:	4601      	mov	r1, r0
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d1f6      	bne.n	8009a26 <_rclc_execute.part.0+0x13a>
 8009a38:	6860      	ldr	r0, [r4, #4]
 8009a3a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009a3e:	e7ce      	b.n	80099de <_rclc_execute.part.0+0xf2>
 8009a40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009a42:	6880      	ldr	r0, [r0, #8]
 8009a44:	f104 0110 	add.w	r1, r4, #16
 8009a48:	4798      	blx	r3
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	b007      	add	sp, #28
 8009a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a50:	6860      	ldr	r0, [r4, #4]
 8009a52:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009a56:	b18b      	cbz	r3, 8009a7c <_rclc_execute.part.0+0x190>
 8009a58:	68c5      	ldr	r5, [r0, #12]
 8009a5a:	b32d      	cbz	r5, 8009aa8 <_rclc_execute.part.0+0x1bc>
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009a62:	b143      	cbz	r3, 8009a76 <_rclc_execute.part.0+0x18a>
 8009a64:	69c3      	ldr	r3, [r0, #28]
 8009a66:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009a6a:	b123      	cbz	r3, 8009a76 <_rclc_execute.part.0+0x18a>
 8009a6c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a6e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a70:	4628      	mov	r0, r5
 8009a72:	4798      	blx	r3
 8009a74:	6860      	ldr	r0, [r4, #4]
 8009a76:	682d      	ldr	r5, [r5, #0]
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	d1f0      	bne.n	8009a5e <_rclc_execute.part.0+0x172>
 8009a7c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009a80:	b193      	cbz	r3, 8009aa8 <_rclc_execute.part.0+0x1bc>
 8009a82:	68c5      	ldr	r5, [r0, #12]
 8009a84:	b185      	cbz	r5, 8009aa8 <_rclc_execute.part.0+0x1bc>
 8009a86:	2600      	movs	r6, #0
 8009a88:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009a8c:	b14b      	cbz	r3, 8009aa2 <_rclc_execute.part.0+0x1b6>
 8009a8e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a90:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009a94:	b12b      	cbz	r3, 8009aa2 <_rclc_execute.part.0+0x1b6>
 8009a96:	4628      	mov	r0, r5
 8009a98:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009a9c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a9e:	4798      	blx	r3
 8009aa0:	6860      	ldr	r0, [r4, #4]
 8009aa2:	682d      	ldr	r5, [r5, #0]
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	d1ef      	bne.n	8009a88 <_rclc_execute.part.0+0x19c>
 8009aa8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d081      	beq.n	80099b4 <_rclc_execute.part.0+0xc8>
 8009ab0:	2700      	movs	r7, #0
 8009ab2:	e00b      	b.n	8009acc <_rclc_execute.part.0+0x1e0>
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009aba:	6a1e      	ldr	r6, [r3, #32]
 8009abc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009ac0:	47b0      	blx	r6
 8009ac2:	6860      	ldr	r0, [r4, #4]
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f006 ff17 	bl	80108f8 <rclc_action_remove_used_goal_handle>
 8009aca:	6860      	ldr	r0, [r4, #4]
 8009acc:	f006 ff9c 	bl	8010a08 <rclc_action_find_first_handle_with_result_response>
 8009ad0:	4605      	mov	r5, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d1ee      	bne.n	8009ab4 <_rclc_execute.part.0+0x1c8>
 8009ad6:	e76d      	b.n	80099b4 <_rclc_execute.part.0+0xc8>
 8009ad8:	6860      	ldr	r0, [r4, #4]
 8009ada:	f880 5020 	strb.w	r5, [r0, #32]
 8009ade:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f43f af66 	beq.w	80099b4 <_rclc_execute.part.0+0xc8>
 8009ae8:	68c5      	ldr	r5, [r0, #12]
 8009aea:	b1b5      	cbz	r5, 8009b1a <_rclc_execute.part.0+0x22e>
 8009aec:	2602      	movs	r6, #2
 8009aee:	e001      	b.n	8009af4 <_rclc_execute.part.0+0x208>
 8009af0:	682d      	ldr	r5, [r5, #0]
 8009af2:	b195      	cbz	r5, 8009b1a <_rclc_execute.part.0+0x22e>
 8009af4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009af8:	2b03      	cmp	r3, #3
 8009afa:	d1f9      	bne.n	8009af0 <_rclc_execute.part.0+0x204>
 8009afc:	69c3      	ldr	r3, [r0, #28]
 8009afe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b00:	4628      	mov	r0, r5
 8009b02:	4798      	blx	r3
 8009b04:	4603      	mov	r3, r0
 8009b06:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009b10:	b163      	cbz	r3, 8009b2c <_rclc_execute.part.0+0x240>
 8009b12:	f006 ffa5 	bl	8010a60 <rclc_action_server_goal_cancel_accept>
 8009b16:	6860      	ldr	r0, [r4, #4]
 8009b18:	e7ea      	b.n	8009af0 <_rclc_execute.part.0+0x204>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009b20:	4618      	mov	r0, r3
 8009b22:	e739      	b.n	8009998 <_rclc_execute.part.0+0xac>
 8009b24:	4628      	mov	r0, r5
 8009b26:	4798      	blx	r3
 8009b28:	4628      	mov	r0, r5
 8009b2a:	e735      	b.n	8009998 <_rclc_execute.part.0+0xac>
 8009b2c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009b2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009b32:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3a:	6860      	ldr	r0, [r4, #4]
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	f006 ffbb 	bl	8010ab8 <rclc_action_server_goal_cancel_reject>
 8009b42:	722e      	strb	r6, [r5, #8]
 8009b44:	6860      	ldr	r0, [r4, #4]
 8009b46:	e7d3      	b.n	8009af0 <_rclc_execute.part.0+0x204>
 8009b48:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009b4a:	6880      	ldr	r0, [r0, #8]
 8009b4c:	4798      	blx	r3
 8009b4e:	f104 0110 	add.w	r1, r4, #16
 8009b52:	e6e7      	b.n	8009924 <_rclc_execute.part.0+0x38>
 8009b54:	f100 0110 	add.w	r1, r0, #16
 8009b58:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009b5a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8009b5c:	6880      	ldr	r0, [r0, #8]
 8009b5e:	9105      	str	r1, [sp, #20]
 8009b60:	4798      	blx	r3
 8009b62:	9905      	ldr	r1, [sp, #20]
 8009b64:	e6de      	b.n	8009924 <_rclc_execute.part.0+0x38>
 8009b66:	2001      	movs	r0, #1
 8009b68:	e716      	b.n	8009998 <_rclc_execute.part.0+0xac>
 8009b6a:	bf00      	nop

08009b6c <rclc_executor_trigger_any>:
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d03f      	beq.n	8009bf0 <rclc_executor_trigger_any+0x84>
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d03e      	beq.n	8009bf2 <rclc_executor_trigger_any+0x86>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d037      	beq.n	8009bf0 <rclc_executor_trigger_any+0x84>
 8009b80:	b430      	push	{r4, r5}
 8009b82:	f893 c000 	ldrb.w	ip, [r3]
 8009b86:	f1bc 0f08 	cmp.w	ip, #8
 8009b8a:	d11e      	bne.n	8009bca <rclc_executor_trigger_any+0x5e>
 8009b8c:	685c      	ldr	r4, [r3, #4]
 8009b8e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009b90:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009b94:	d105      	bne.n	8009ba2 <rclc_executor_trigger_any+0x36>
 8009b96:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009b9a:	b910      	cbnz	r0, 8009ba2 <rclc_executor_trigger_any+0x36>
 8009b9c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009ba0:	b128      	cbz	r0, 8009bae <rclc_executor_trigger_any+0x42>
 8009ba2:	bc30      	pop	{r4, r5}
 8009ba4:	4770      	bx	lr
 8009ba6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d1f9      	bne.n	8009ba2 <rclc_executor_trigger_any+0x36>
 8009bae:	3201      	adds	r2, #1
 8009bb0:	4291      	cmp	r1, r2
 8009bb2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009bb6:	d018      	beq.n	8009bea <rclc_executor_trigger_any+0x7e>
 8009bb8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d0f0      	beq.n	8009ba2 <rclc_executor_trigger_any+0x36>
 8009bc0:	f893 c000 	ldrb.w	ip, [r3]
 8009bc4:	f1bc 0f08 	cmp.w	ip, #8
 8009bc8:	d0e0      	beq.n	8009b8c <rclc_executor_trigger_any+0x20>
 8009bca:	f1bc 0f09 	cmp.w	ip, #9
 8009bce:	d1ea      	bne.n	8009ba6 <rclc_executor_trigger_any+0x3a>
 8009bd0:	685c      	ldr	r4, [r3, #4]
 8009bd2:	6a25      	ldr	r5, [r4, #32]
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	d1e4      	bne.n	8009ba2 <rclc_executor_trigger_any+0x36>
 8009bd8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1e0      	bne.n	8009ba2 <rclc_executor_trigger_any+0x36>
 8009be0:	3201      	adds	r2, #1
 8009be2:	4291      	cmp	r1, r2
 8009be4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009be8:	d1e6      	bne.n	8009bb8 <rclc_executor_trigger_any+0x4c>
 8009bea:	2000      	movs	r0, #0
 8009bec:	bc30      	pop	{r4, r5}
 8009bee:	4770      	bx	lr
 8009bf0:	4770      	bx	lr
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop

08009bf8 <rclc_executor_get_zero_initialized_executor>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4903      	ldr	r1, [pc, #12]	@ (8009c08 <rclc_executor_get_zero_initialized_executor+0x10>)
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	2288      	movs	r2, #136	@ 0x88
 8009c00:	f00d fab3 	bl	801716a <memcpy>
 8009c04:	4620      	mov	r0, r4
 8009c06:	bd10      	pop	{r4, pc}
 8009c08:	08019170 	.word	0x08019170
 8009c0c:	00000000 	.word	0x00000000

08009c10 <rclc_executor_init>:
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d05f      	beq.n	8009cd4 <rclc_executor_init+0xc4>
 8009c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c18:	460c      	mov	r4, r1
 8009c1a:	b0b0      	sub	sp, #192	@ 0xc0
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	d051      	beq.n	8009cc4 <rclc_executor_init+0xb4>
 8009c20:	4605      	mov	r5, r0
 8009c22:	4618      	mov	r0, r3
 8009c24:	4616      	mov	r6, r2
 8009c26:	461f      	mov	r7, r3
 8009c28:	f000 fbea 	bl	800a400 <rcutils_allocator_is_valid>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d049      	beq.n	8009cc4 <rclc_executor_init+0xb4>
 8009c30:	2e00      	cmp	r6, #0
 8009c32:	d047      	beq.n	8009cc4 <rclc_executor_init+0xb4>
 8009c34:	492c      	ldr	r1, [pc, #176]	@ (8009ce8 <rclc_executor_init+0xd8>)
 8009c36:	2288      	movs	r2, #136	@ 0x88
 8009c38:	a80e      	add	r0, sp, #56	@ 0x38
 8009c3a:	f00d fa96 	bl	801716a <memcpy>
 8009c3e:	a90e      	add	r1, sp, #56	@ 0x38
 8009c40:	2288      	movs	r2, #136	@ 0x88
 8009c42:	4628      	mov	r0, r5
 8009c44:	f00d fa91 	bl	801716a <memcpy>
 8009c48:	602c      	str	r4, [r5, #0]
 8009c4a:	4668      	mov	r0, sp
 8009c4c:	60ae      	str	r6, [r5, #8]
 8009c4e:	466c      	mov	r4, sp
 8009c50:	f005 fbfe 	bl	800f450 <rcl_get_zero_initialized_wait_set>
 8009c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c56:	f105 0c14 	add.w	ip, r5, #20
 8009c5a:	f8d7 8000 	ldr.w	r8, [r7]
 8009c5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c6e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009ce0 <rclc_executor_init+0xd0>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	f8cc 3000 	str.w	r3, [ip]
 8009c78:	6939      	ldr	r1, [r7, #16]
 8009c7a:	612f      	str	r7, [r5, #16]
 8009c7c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8009c80:	01b0      	lsls	r0, r6, #6
 8009c82:	47c0      	blx	r8
 8009c84:	6068      	str	r0, [r5, #4]
 8009c86:	b338      	cbz	r0, 8009cd8 <rclc_executor_init+0xc8>
 8009c88:	2400      	movs	r4, #0
 8009c8a:	e000      	b.n	8009c8e <rclc_executor_init+0x7e>
 8009c8c:	6868      	ldr	r0, [r5, #4]
 8009c8e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009c92:	4631      	mov	r1, r6
 8009c94:	3401      	adds	r4, #1
 8009c96:	f000 fa6b 	bl	800a170 <rclc_executor_handle_init>
 8009c9a:	42a6      	cmp	r6, r4
 8009c9c:	d1f6      	bne.n	8009c8c <rclc_executor_init+0x7c>
 8009c9e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8009ca2:	f000 fa5b 	bl	800a15c <rclc_executor_handle_counters_zero_init>
 8009ca6:	4a11      	ldr	r2, [pc, #68]	@ (8009cec <rclc_executor_init+0xdc>)
 8009ca8:	686b      	ldr	r3, [r5, #4]
 8009caa:	2000      	movs	r0, #0
 8009cac:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8009cb0:	b163      	cbz	r3, 8009ccc <rclc_executor_init+0xbc>
 8009cb2:	692b      	ldr	r3, [r5, #16]
 8009cb4:	b153      	cbz	r3, 8009ccc <rclc_executor_init+0xbc>
 8009cb6:	68ab      	ldr	r3, [r5, #8]
 8009cb8:	b143      	cbz	r3, 8009ccc <rclc_executor_init+0xbc>
 8009cba:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8009cbe:	b030      	add	sp, #192	@ 0xc0
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	200b      	movs	r0, #11
 8009cc6:	b030      	add	sp, #192	@ 0xc0
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	b030      	add	sp, #192	@ 0xc0
 8009cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cd4:	200b      	movs	r0, #11
 8009cd6:	4770      	bx	lr
 8009cd8:	200a      	movs	r0, #10
 8009cda:	e7f4      	b.n	8009cc6 <rclc_executor_init+0xb6>
 8009cdc:	f3af 8000 	nop.w
 8009ce0:	3b9aca00 	.word	0x3b9aca00
 8009ce4:	00000000 	.word	0x00000000
 8009ce8:	08019170 	.word	0x08019170
 8009cec:	08009b6d 	.word	0x08009b6d

08009cf0 <rclc_executor_add_subscription>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009cf6:	b338      	cbz	r0, 8009d48 <rclc_executor_add_subscription+0x58>
 8009cf8:	b331      	cbz	r1, 8009d48 <rclc_executor_add_subscription+0x58>
 8009cfa:	b32a      	cbz	r2, 8009d48 <rclc_executor_add_subscription+0x58>
 8009cfc:	b323      	cbz	r3, 8009d48 <rclc_executor_add_subscription+0x58>
 8009cfe:	4604      	mov	r4, r0
 8009d00:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009d04:	42a8      	cmp	r0, r5
 8009d06:	d301      	bcc.n	8009d0c <rclc_executor_add_subscription+0x1c>
 8009d08:	2001      	movs	r0, #1
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	6866      	ldr	r6, [r4, #4]
 8009d0e:	0187      	lsls	r7, r0, #6
 8009d10:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009d14:	2500      	movs	r5, #0
 8009d16:	55f5      	strb	r5, [r6, r7]
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8009d1e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8009d22:	2301      	movs	r3, #1
 8009d24:	f104 0514 	add.w	r5, r4, #20
 8009d28:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009d2c:	f88c e001 	strb.w	lr, [ip, #1]
 8009d30:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8009d34:	60e0      	str	r0, [r4, #12]
 8009d36:	4628      	mov	r0, r5
 8009d38:	f005 fb9e 	bl	800f478 <rcl_wait_set_is_valid>
 8009d3c:	b930      	cbnz	r0, 8009d4c <rclc_executor_add_subscription+0x5c>
 8009d3e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009d40:	3301      	adds	r3, #1
 8009d42:	2000      	movs	r0, #0
 8009d44:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d48:	200b      	movs	r0, #11
 8009d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f005 fb99 	bl	800f484 <rcl_wait_set_fini>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d0f3      	beq.n	8009d3e <rclc_executor_add_subscription+0x4e>
 8009d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d58 <rclc_executor_prepare>:
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d044      	beq.n	8009de6 <rclc_executor_prepare+0x8e>
 8009d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5e:	f100 0514 	add.w	r5, r0, #20
 8009d62:	b09b      	sub	sp, #108	@ 0x6c
 8009d64:	4604      	mov	r4, r0
 8009d66:	4628      	mov	r0, r5
 8009d68:	f005 fb86 	bl	800f478 <rcl_wait_set_is_valid>
 8009d6c:	b110      	cbz	r0, 8009d74 <rclc_executor_prepare+0x1c>
 8009d6e:	2000      	movs	r0, #0
 8009d70:	b01b      	add	sp, #108	@ 0x6c
 8009d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d74:	4628      	mov	r0, r5
 8009d76:	f005 fb85 	bl	800f484 <rcl_wait_set_fini>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d130      	bne.n	8009de0 <rclc_executor_prepare+0x88>
 8009d7e:	a80c      	add	r0, sp, #48	@ 0x30
 8009d80:	f005 fb66 	bl	800f450 <rcl_get_zero_initialized_wait_set>
 8009d84:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009d88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d8c:	46ae      	mov	lr, r5
 8009d8e:	6927      	ldr	r7, [r4, #16]
 8009d90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009d98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009d9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009da0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009da4:	f8dc 3000 	ldr.w	r3, [ip]
 8009da8:	f8ce 3000 	str.w	r3, [lr]
 8009dac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009dae:	ae04      	add	r6, sp, #16
 8009db0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6822      	ldr	r2, [r4, #0]
 8009db6:	6033      	str	r3, [r6, #0]
 8009db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dba:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8009dbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009dc0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8009dc4:	e9cd 2100 	strd	r2, r1, [sp]
 8009dc8:	4628      	mov	r0, r5
 8009dca:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8009dcc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009dce:	f005 fe57 	bl	800fa80 <rcl_wait_set_init>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d0cc      	beq.n	8009d70 <rclc_executor_prepare+0x18>
 8009dd6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009dd8:	f000 fb36 	bl	800a448 <rcutils_reset_error>
 8009ddc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009dde:	e7c7      	b.n	8009d70 <rclc_executor_prepare+0x18>
 8009de0:	f000 fb32 	bl	800a448 <rcutils_reset_error>
 8009de4:	e7cb      	b.n	8009d7e <rclc_executor_prepare+0x26>
 8009de6:	200b      	movs	r0, #11
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop

08009dec <rclc_executor_spin_some.part.0>:
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	f100 0614 	add.w	r6, r0, #20
 8009df4:	b083      	sub	sp, #12
 8009df6:	4691      	mov	r9, r2
 8009df8:	4698      	mov	r8, r3
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	f7ff ffac 	bl	8009d58 <rclc_executor_prepare>
 8009e00:	4630      	mov	r0, r6
 8009e02:	f005 fc0b 	bl	800f61c <rcl_wait_set_clear>
 8009e06:	4607      	mov	r7, r0
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f040 80ed 	bne.w	8009fe8 <rclc_executor_spin_some.part.0+0x1fc>
 8009e0e:	68ab      	ldr	r3, [r5, #8]
 8009e10:	4604      	mov	r4, r0
 8009e12:	b303      	cbz	r3, 8009e56 <rclc_executor_spin_some.part.0+0x6a>
 8009e14:	6869      	ldr	r1, [r5, #4]
 8009e16:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009e1a:	01a2      	lsls	r2, r4, #6
 8009e1c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009e20:	b1cb      	cbz	r3, 8009e56 <rclc_executor_spin_some.part.0+0x6a>
 8009e22:	5c8b      	ldrb	r3, [r1, r2]
 8009e24:	2b0a      	cmp	r3, #10
 8009e26:	f200 80d8 	bhi.w	8009fda <rclc_executor_spin_some.part.0+0x1ee>
 8009e2a:	e8df f003 	tbb	[pc, r3]
 8009e2e:	9c9c      	.short	0x9c9c
 8009e30:	068c8ca7 	.word	0x068c8ca7
 8009e34:	bdc90606 	.word	0xbdc90606
 8009e38:	b2          	.byte	0xb2
 8009e39:	00          	.byte	0x00
 8009e3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e3e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009e42:	4630      	mov	r0, r6
 8009e44:	f005 ff32 	bl	800fcac <rcl_wait_set_add_service>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f040 8086 	bne.w	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009e4e:	68ab      	ldr	r3, [r5, #8]
 8009e50:	3401      	adds	r4, #1
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d3de      	bcc.n	8009e14 <rclc_executor_spin_some.part.0+0x28>
 8009e56:	4643      	mov	r3, r8
 8009e58:	464a      	mov	r2, r9
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f005 ff54 	bl	800fd08 <rcl_wait>
 8009e60:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 80c7 	beq.w	8009ff8 <rclc_executor_spin_some.part.0+0x20c>
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	f040 80b5 	bne.w	8009fda <rclc_executor_spin_some.part.0+0x1ee>
 8009e70:	68ab      	ldr	r3, [r5, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 8159 	beq.w	800a12a <rclc_executor_spin_some.part.0+0x33e>
 8009e78:	2400      	movs	r4, #0
 8009e7a:	46a0      	mov	r8, r4
 8009e7c:	f240 1991 	movw	r9, #401	@ 0x191
 8009e80:	e00a      	b.n	8009e98 <rclc_executor_spin_some.part.0+0xac>
 8009e82:	f7ff fb71 	bl	8009568 <_rclc_check_for_new_data>
 8009e86:	4604      	mov	r4, r0
 8009e88:	b110      	cbz	r0, 8009e90 <rclc_executor_spin_some.part.0+0xa4>
 8009e8a:	4548      	cmp	r0, r9
 8009e8c:	f040 80b2 	bne.w	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009e90:	68ab      	ldr	r3, [r5, #8]
 8009e92:	4598      	cmp	r8, r3
 8009e94:	f080 8126 	bcs.w	800a0e4 <rclc_executor_spin_some.part.0+0x2f8>
 8009e98:	686a      	ldr	r2, [r5, #4]
 8009e9a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8009ea4:	f108 0801 	add.w	r8, r8, #1
 8009ea8:	f1bc 0f00 	cmp.w	ip, #0
 8009eac:	d1e9      	bne.n	8009e82 <rclc_executor_spin_some.part.0+0x96>
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8009eb6:	4798      	blx	r3
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	f000 809b 	beq.w	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009ebe:	68ab      	ldr	r3, [r5, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8097 	beq.w	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009ec6:	f04f 0800 	mov.w	r8, #0
 8009eca:	f240 1991 	movw	r9, #401	@ 0x191
 8009ece:	e009      	b.n	8009ee4 <rclc_executor_spin_some.part.0+0xf8>
 8009ed0:	f7ff fb98 	bl	8009604 <_rclc_take_new_data>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	b110      	cbz	r0, 8009ede <rclc_executor_spin_some.part.0+0xf2>
 8009ed8:	4548      	cmp	r0, r9
 8009eda:	f040 808b 	bne.w	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009ede:	68ab      	ldr	r3, [r5, #8]
 8009ee0:	4598      	cmp	r8, r3
 8009ee2:	d209      	bcs.n	8009ef8 <rclc_executor_spin_some.part.0+0x10c>
 8009ee4:	6868      	ldr	r0, [r5, #4]
 8009ee6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009eea:	4631      	mov	r1, r6
 8009eec:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009ef0:	f108 0801 	add.w	r8, r8, #1
 8009ef4:	2a00      	cmp	r2, #0
 8009ef6:	d1eb      	bne.n	8009ed0 <rclc_executor_spin_some.part.0+0xe4>
 8009ef8:	2600      	movs	r6, #0
 8009efa:	b97b      	cbnz	r3, 8009f1c <rclc_executor_spin_some.part.0+0x130>
 8009efc:	e07a      	b.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009efe:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009f02:	2a08      	cmp	r2, #8
 8009f04:	f000 80fd 	beq.w	800a102 <rclc_executor_spin_some.part.0+0x316>
 8009f08:	2a09      	cmp	r2, #9
 8009f0a:	f000 80ef 	beq.w	800a0ec <rclc_executor_spin_some.part.0+0x300>
 8009f0e:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 8009f12:	b98a      	cbnz	r2, 8009f38 <rclc_executor_spin_some.part.0+0x14c>
 8009f14:	3601      	adds	r6, #1
 8009f16:	429e      	cmp	r6, r3
 8009f18:	d262      	bcs.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 8009f1a:	2400      	movs	r4, #0
 8009f1c:	686a      	ldr	r2, [r5, #4]
 8009f1e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009f22:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009f26:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8009f2a:	2900      	cmp	r1, #0
 8009f2c:	d062      	beq.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 8009f2e:	7841      	ldrb	r1, [r0, #1]
 8009f30:	2900      	cmp	r1, #0
 8009f32:	d0e4      	beq.n	8009efe <rclc_executor_spin_some.part.0+0x112>
 8009f34:	2901      	cmp	r1, #1
 8009f36:	d1ed      	bne.n	8009f14 <rclc_executor_spin_some.part.0+0x128>
 8009f38:	f7ff fcd8 	bl	80098ec <_rclc_execute.part.0>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	f040 80b6 	bne.w	800a0ae <rclc_executor_spin_some.part.0+0x2c2>
 8009f42:	68ab      	ldr	r3, [r5, #8]
 8009f44:	e7e6      	b.n	8009f14 <rclc_executor_spin_some.part.0+0x128>
 8009f46:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f4a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f005 fe80 	bl	800fc54 <rcl_wait_set_add_client>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f af7a 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009f5a:	9001      	str	r0, [sp, #4]
 8009f5c:	f000 fa74 	bl	800a448 <rcutils_reset_error>
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	4607      	mov	r7, r0
 8009f64:	e03c      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 8009f66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f6a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f005 fb28 	bl	800f5c4 <rcl_wait_set_add_subscription>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f43f af6a 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009f7a:	e7ee      	b.n	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009f7c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f80:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f84:	4630      	mov	r0, r6
 8009f86:	f005 fe35 	bl	800fbf4 <rcl_wait_set_add_timer>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	f43f af5f 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009f90:	e7e3      	b.n	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009f92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009f96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f005 fdfe 	bl	800fb9c <rcl_wait_set_add_guard_condition>
 8009fa0:	2800      	cmp	r0, #0
 8009fa2:	f43f af54 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009fa6:	e7d8      	b.n	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009fa8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009fac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009fb0:	3110      	adds	r1, #16
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f006 fb80 	bl	80106b8 <rcl_action_wait_set_add_action_server>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	f43f af48 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009fbe:	e7cc      	b.n	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009fc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009fc4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009fc8:	3110      	adds	r1, #16
 8009fca:	2300      	movs	r3, #0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f006 f94b 	bl	8010268 <rcl_action_wait_set_add_action_client>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f43f af3b 	beq.w	8009e4e <rclc_executor_spin_some.part.0+0x62>
 8009fd8:	e7bf      	b.n	8009f5a <rclc_executor_spin_some.part.0+0x16e>
 8009fda:	f000 fa35 	bl	800a448 <rcutils_reset_error>
 8009fde:	2701      	movs	r7, #1
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	b003      	add	sp, #12
 8009fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe8:	f000 fa2e 	bl	800a448 <rcutils_reset_error>
 8009fec:	4638      	mov	r0, r7
 8009fee:	b003      	add	sp, #12
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff4:	4627      	mov	r7, r4
 8009ff6:	e7f3      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 8009ff8:	68ab      	ldr	r3, [r5, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 8092 	beq.w	800a124 <rclc_executor_spin_some.part.0+0x338>
 800a000:	2400      	movs	r4, #0
 800a002:	46a0      	mov	r8, r4
 800a004:	f240 1991 	movw	r9, #401	@ 0x191
 800a008:	e008      	b.n	800a01c <rclc_executor_spin_some.part.0+0x230>
 800a00a:	f7ff faad 	bl	8009568 <_rclc_check_for_new_data>
 800a00e:	4604      	mov	r4, r0
 800a010:	b108      	cbz	r0, 800a016 <rclc_executor_spin_some.part.0+0x22a>
 800a012:	4548      	cmp	r0, r9
 800a014:	d1ee      	bne.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 800a016:	68ab      	ldr	r3, [r5, #8]
 800a018:	4598      	cmp	r8, r3
 800a01a:	d265      	bcs.n	800a0e8 <rclc_executor_spin_some.part.0+0x2fc>
 800a01c:	686a      	ldr	r2, [r5, #4]
 800a01e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a022:	4631      	mov	r1, r6
 800a024:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a028:	f108 0801 	add.w	r8, r8, #1
 800a02c:	f1bc 0f00 	cmp.w	ip, #0
 800a030:	d1eb      	bne.n	800a00a <rclc_executor_spin_some.part.0+0x21e>
 800a032:	4619      	mov	r1, r3
 800a034:	4610      	mov	r0, r2
 800a036:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a03a:	4798      	blx	r3
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0d9      	beq.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 800a040:	68ab      	ldr	r3, [r5, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0d6      	beq.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 800a046:	f04f 0800 	mov.w	r8, #0
 800a04a:	f240 1991 	movw	r9, #401	@ 0x191
 800a04e:	f240 2a59 	movw	sl, #601	@ 0x259
 800a052:	e00e      	b.n	800a072 <rclc_executor_spin_some.part.0+0x286>
 800a054:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a058:	2b08      	cmp	r3, #8
 800a05a:	d033      	beq.n	800a0c4 <rclc_executor_spin_some.part.0+0x2d8>
 800a05c:	2b09      	cmp	r3, #9
 800a05e:	d028      	beq.n	800a0b2 <rclc_executor_spin_some.part.0+0x2c6>
 800a060:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a064:	b9fb      	cbnz	r3, 800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a066:	68ab      	ldr	r3, [r5, #8]
 800a068:	f108 0801 	add.w	r8, r8, #1
 800a06c:	4598      	cmp	r8, r3
 800a06e:	d2b7      	bcs.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 800a070:	2400      	movs	r4, #0
 800a072:	6868      	ldr	r0, [r5, #4]
 800a074:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a078:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a07c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0b7      	beq.n	8009ff4 <rclc_executor_spin_some.part.0+0x208>
 800a084:	4631      	mov	r1, r6
 800a086:	f7ff fabd 	bl	8009604 <_rclc_take_new_data>
 800a08a:	b118      	cbz	r0, 800a094 <rclc_executor_spin_some.part.0+0x2a8>
 800a08c:	4548      	cmp	r0, r9
 800a08e:	d001      	beq.n	800a094 <rclc_executor_spin_some.part.0+0x2a8>
 800a090:	4550      	cmp	r0, sl
 800a092:	d10c      	bne.n	800a0ae <rclc_executor_spin_some.part.0+0x2c2>
 800a094:	686b      	ldr	r3, [r5, #4]
 800a096:	eb13 000b 	adds.w	r0, r3, fp
 800a09a:	d021      	beq.n	800a0e0 <rclc_executor_spin_some.part.0+0x2f4>
 800a09c:	7842      	ldrb	r2, [r0, #1]
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	d0d8      	beq.n	800a054 <rclc_executor_spin_some.part.0+0x268>
 800a0a2:	2a01      	cmp	r2, #1
 800a0a4:	d1df      	bne.n	800a066 <rclc_executor_spin_some.part.0+0x27a>
 800a0a6:	f7ff fc21 	bl	80098ec <_rclc_execute.part.0>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0db      	beq.n	800a066 <rclc_executor_spin_some.part.0+0x27a>
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	e796      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 800a0b2:	6843      	ldr	r3, [r0, #4]
 800a0b4:	6a1a      	ldr	r2, [r3, #32]
 800a0b6:	2a00      	cmp	r2, #0
 800a0b8:	d1f5      	bne.n	800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a0ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0d1      	beq.n	800a066 <rclc_executor_spin_some.part.0+0x27a>
 800a0c2:	e7f0      	b.n	800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a0c4:	6843      	ldr	r3, [r0, #4]
 800a0c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a0c8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a0cc:	d1eb      	bne.n	800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a0ce:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a0d2:	2a00      	cmp	r2, #0
 800a0d4:	d1e7      	bne.n	800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a0d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0c3      	beq.n	800a066 <rclc_executor_spin_some.part.0+0x27a>
 800a0de:	e7e2      	b.n	800a0a6 <rclc_executor_spin_some.part.0+0x2ba>
 800a0e0:	270b      	movs	r7, #11
 800a0e2:	e77d      	b.n	8009fe0 <rclc_executor_spin_some.part.0+0x1f4>
 800a0e4:	686a      	ldr	r2, [r5, #4]
 800a0e6:	e6e2      	b.n	8009eae <rclc_executor_spin_some.part.0+0xc2>
 800a0e8:	686a      	ldr	r2, [r5, #4]
 800a0ea:	e7a2      	b.n	800a032 <rclc_executor_spin_some.part.0+0x246>
 800a0ec:	6842      	ldr	r2, [r0, #4]
 800a0ee:	6a11      	ldr	r1, [r2, #32]
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	f47f af21 	bne.w	8009f38 <rclc_executor_spin_some.part.0+0x14c>
 800a0f6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	f43f af0a 	beq.w	8009f14 <rclc_executor_spin_some.part.0+0x128>
 800a100:	e71a      	b.n	8009f38 <rclc_executor_spin_some.part.0+0x14c>
 800a102:	6842      	ldr	r2, [r0, #4]
 800a104:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a106:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a10a:	f47f af15 	bne.w	8009f38 <rclc_executor_spin_some.part.0+0x14c>
 800a10e:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a112:	2900      	cmp	r1, #0
 800a114:	f47f af10 	bne.w	8009f38 <rclc_executor_spin_some.part.0+0x14c>
 800a118:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	f43f aef9 	beq.w	8009f14 <rclc_executor_spin_some.part.0+0x128>
 800a122:	e709      	b.n	8009f38 <rclc_executor_spin_some.part.0+0x14c>
 800a124:	686a      	ldr	r2, [r5, #4]
 800a126:	461c      	mov	r4, r3
 800a128:	e783      	b.n	800a032 <rclc_executor_spin_some.part.0+0x246>
 800a12a:	686a      	ldr	r2, [r5, #4]
 800a12c:	461c      	mov	r4, r3
 800a12e:	e6be      	b.n	8009eae <rclc_executor_spin_some.part.0+0xc2>

0800a130 <rclc_executor_spin_some>:
 800a130:	b190      	cbz	r0, 800a158 <rclc_executor_spin_some+0x28>
 800a132:	b570      	push	{r4, r5, r6, lr}
 800a134:	4604      	mov	r4, r0
 800a136:	6800      	ldr	r0, [r0, #0]
 800a138:	4616      	mov	r6, r2
 800a13a:	461d      	mov	r5, r3
 800a13c:	f003 fffc 	bl	800e138 <rcl_context_is_valid>
 800a140:	b130      	cbz	r0, 800a150 <rclc_executor_spin_some+0x20>
 800a142:	4632      	mov	r2, r6
 800a144:	462b      	mov	r3, r5
 800a146:	4620      	mov	r0, r4
 800a148:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a14c:	f7ff be4e 	b.w	8009dec <rclc_executor_spin_some.part.0>
 800a150:	f000 f97a 	bl	800a448 <rcutils_reset_error>
 800a154:	2001      	movs	r0, #1
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	200b      	movs	r0, #11
 800a15a:	4770      	bx	lr

0800a15c <rclc_executor_handle_counters_zero_init>:
 800a15c:	b130      	cbz	r0, 800a16c <rclc_executor_handle_counters_zero_init+0x10>
 800a15e:	b508      	push	{r3, lr}
 800a160:	2220      	movs	r2, #32
 800a162:	2100      	movs	r1, #0
 800a164:	f00c fede 	bl	8016f24 <memset>
 800a168:	2000      	movs	r0, #0
 800a16a:	bd08      	pop	{r3, pc}
 800a16c:	200b      	movs	r0, #11
 800a16e:	4770      	bx	lr

0800a170 <rclc_executor_handle_init>:
 800a170:	b168      	cbz	r0, 800a18e <rclc_executor_handle_init+0x1e>
 800a172:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a198 <rclc_executor_handle_init+0x28>
 800a176:	2300      	movs	r3, #0
 800a178:	220b      	movs	r2, #11
 800a17a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a17e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a182:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a186:	8002      	strh	r2, [r0, #0]
 800a188:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a18a:	4618      	mov	r0, r3
 800a18c:	4770      	bx	lr
 800a18e:	200b      	movs	r0, #11
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	f3af 8000 	nop.w
	...

0800a1a0 <rclc_support_init>:
 800a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a4:	b086      	sub	sp, #24
 800a1a6:	b3b8      	cbz	r0, 800a218 <rclc_support_init+0x78>
 800a1a8:	461c      	mov	r4, r3
 800a1aa:	b3ab      	cbz	r3, 800a218 <rclc_support_init+0x78>
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	4690      	mov	r8, r2
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	f004 f92b 	bl	800e40c <rcl_get_zero_initialized_init_options>
 800a1b6:	f104 030c 	add.w	r3, r4, #12
 800a1ba:	9005      	str	r0, [sp, #20]
 800a1bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a1c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a1c4:	a805      	add	r0, sp, #20
 800a1c6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a1ca:	f004 f921 	bl	800e410 <rcl_init_options_init>
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b9e0      	cbnz	r0, 800a20c <rclc_support_init+0x6c>
 800a1d2:	ad02      	add	r5, sp, #8
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f003 ffa5 	bl	800e124 <rcl_get_zero_initialized_context>
 800a1da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a1de:	4633      	mov	r3, r6
 800a1e0:	e886 0003 	stmia.w	r6, {r0, r1}
 800a1e4:	aa05      	add	r2, sp, #20
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f004 f80b 	bl	800e204 <rcl_init>
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b9b8      	cbnz	r0, 800a222 <rclc_support_init+0x82>
 800a1f2:	60b4      	str	r4, [r6, #8]
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	f106 010c 	add.w	r1, r6, #12
 800a1fa:	2003      	movs	r0, #3
 800a1fc:	f004 ff32 	bl	800f064 <rcl_clock_init>
 800a200:	4605      	mov	r5, r0
 800a202:	b970      	cbnz	r0, 800a222 <rclc_support_init+0x82>
 800a204:	a805      	add	r0, sp, #20
 800a206:	f004 f969 	bl	800e4dc <rcl_init_options_fini>
 800a20a:	b108      	cbz	r0, 800a210 <rclc_support_init+0x70>
 800a20c:	f000 f91c 	bl	800a448 <rcutils_reset_error>
 800a210:	4628      	mov	r0, r5
 800a212:	b006      	add	sp, #24
 800a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a218:	250b      	movs	r5, #11
 800a21a:	4628      	mov	r0, r5
 800a21c:	b006      	add	sp, #24
 800a21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a222:	f000 f911 	bl	800a448 <rcutils_reset_error>
 800a226:	a805      	add	r0, sp, #20
 800a228:	f004 f958 	bl	800e4dc <rcl_init_options_fini>
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d0ef      	beq.n	800a210 <rclc_support_init+0x70>
 800a230:	e7ec      	b.n	800a20c <rclc_support_init+0x6c>
 800a232:	bf00      	nop

0800a234 <rclc_node_init_default>:
 800a234:	b3b8      	cbz	r0, 800a2a6 <rclc_node_init_default+0x72>
 800a236:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a23a:	460d      	mov	r5, r1
 800a23c:	b0a1      	sub	sp, #132	@ 0x84
 800a23e:	b329      	cbz	r1, 800a28c <rclc_node_init_default+0x58>
 800a240:	4616      	mov	r6, r2
 800a242:	b31a      	cbz	r2, 800a28c <rclc_node_init_default+0x58>
 800a244:	461f      	mov	r7, r3
 800a246:	b30b      	cbz	r3, 800a28c <rclc_node_init_default+0x58>
 800a248:	f10d 0810 	add.w	r8, sp, #16
 800a24c:	4604      	mov	r4, r0
 800a24e:	4640      	mov	r0, r8
 800a250:	f004 f9fc 	bl	800e64c <rcl_get_zero_initialized_node>
 800a254:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a258:	f10d 0918 	add.w	r9, sp, #24
 800a25c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a260:	4648      	mov	r0, r9
 800a262:	f004 fb6b 	bl	800e93c <rcl_node_get_default_options>
 800a266:	4640      	mov	r0, r8
 800a268:	f004 f9f0 	bl	800e64c <rcl_get_zero_initialized_node>
 800a26c:	f8cd 9000 	str.w	r9, [sp]
 800a270:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a274:	463b      	mov	r3, r7
 800a276:	e884 0003 	stmia.w	r4, {r0, r1}
 800a27a:	4632      	mov	r2, r6
 800a27c:	4629      	mov	r1, r5
 800a27e:	4620      	mov	r0, r4
 800a280:	f004 f9ee 	bl	800e660 <rcl_node_init>
 800a284:	b930      	cbnz	r0, 800a294 <rclc_node_init_default+0x60>
 800a286:	b021      	add	sp, #132	@ 0x84
 800a288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a28c:	200b      	movs	r0, #11
 800a28e:	b021      	add	sp, #132	@ 0x84
 800a290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a294:	9003      	str	r0, [sp, #12]
 800a296:	f000 f8d7 	bl	800a448 <rcutils_reset_error>
 800a29a:	f000 f8d5 	bl	800a448 <rcutils_reset_error>
 800a29e:	9803      	ldr	r0, [sp, #12]
 800a2a0:	b021      	add	sp, #132	@ 0x84
 800a2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2a6:	200b      	movs	r0, #11
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop

0800a2ac <rclc_publisher_init_best_effort>:
 800a2ac:	b368      	cbz	r0, 800a30a <rclc_publisher_init_best_effort+0x5e>
 800a2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b2:	460d      	mov	r5, r1
 800a2b4:	b0a0      	sub	sp, #128	@ 0x80
 800a2b6:	b321      	cbz	r1, 800a302 <rclc_publisher_init_best_effort+0x56>
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	b312      	cbz	r2, 800a302 <rclc_publisher_init_best_effort+0x56>
 800a2bc:	461f      	mov	r7, r3
 800a2be:	b303      	cbz	r3, 800a302 <rclc_publisher_init_best_effort+0x56>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	f7ff f841 	bl	8009348 <rcl_get_zero_initialized_publisher>
 800a2c6:	f10d 0810 	add.w	r8, sp, #16
 800a2ca:	6020      	str	r0, [r4, #0]
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	f7ff f8d7 	bl	8009480 <rcl_publisher_get_default_options>
 800a2d2:	490f      	ldr	r1, [pc, #60]	@ (800a310 <rclc_publisher_init_best_effort+0x64>)
 800a2d4:	2250      	movs	r2, #80	@ 0x50
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	f00c ff47 	bl	801716a <memcpy>
 800a2dc:	f8cd 8000 	str.w	r8, [sp]
 800a2e0:	463b      	mov	r3, r7
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7ff f834 	bl	8009354 <rcl_publisher_init>
 800a2ec:	b910      	cbnz	r0, 800a2f4 <rclc_publisher_init_best_effort+0x48>
 800a2ee:	b020      	add	sp, #128	@ 0x80
 800a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2f4:	9003      	str	r0, [sp, #12]
 800a2f6:	f000 f8a7 	bl	800a448 <rcutils_reset_error>
 800a2fa:	9803      	ldr	r0, [sp, #12]
 800a2fc:	b020      	add	sp, #128	@ 0x80
 800a2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a302:	200b      	movs	r0, #11
 800a304:	b020      	add	sp, #128	@ 0x80
 800a306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a30a:	200b      	movs	r0, #11
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	080191f8 	.word	0x080191f8

0800a314 <rclc_subscription_init_default>:
 800a314:	b368      	cbz	r0, 800a372 <rclc_subscription_init_default+0x5e>
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	460d      	mov	r5, r1
 800a31c:	b0a0      	sub	sp, #128	@ 0x80
 800a31e:	b321      	cbz	r1, 800a36a <rclc_subscription_init_default+0x56>
 800a320:	4616      	mov	r6, r2
 800a322:	b312      	cbz	r2, 800a36a <rclc_subscription_init_default+0x56>
 800a324:	461f      	mov	r7, r3
 800a326:	b303      	cbz	r3, 800a36a <rclc_subscription_init_default+0x56>
 800a328:	4604      	mov	r4, r0
 800a32a:	f004 fd3f 	bl	800edac <rcl_get_zero_initialized_subscription>
 800a32e:	f10d 0810 	add.w	r8, sp, #16
 800a332:	6020      	str	r0, [r4, #0]
 800a334:	4640      	mov	r0, r8
 800a336:	f004 fde7 	bl	800ef08 <rcl_subscription_get_default_options>
 800a33a:	490f      	ldr	r1, [pc, #60]	@ (800a378 <rclc_subscription_init_default+0x64>)
 800a33c:	2250      	movs	r2, #80	@ 0x50
 800a33e:	4640      	mov	r0, r8
 800a340:	f00c ff13 	bl	801716a <memcpy>
 800a344:	f8cd 8000 	str.w	r8, [sp]
 800a348:	463b      	mov	r3, r7
 800a34a:	4632      	mov	r2, r6
 800a34c:	4629      	mov	r1, r5
 800a34e:	4620      	mov	r0, r4
 800a350:	f004 fd32 	bl	800edb8 <rcl_subscription_init>
 800a354:	b910      	cbnz	r0, 800a35c <rclc_subscription_init_default+0x48>
 800a356:	b020      	add	sp, #128	@ 0x80
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	9003      	str	r0, [sp, #12]
 800a35e:	f000 f873 	bl	800a448 <rcutils_reset_error>
 800a362:	9803      	ldr	r0, [sp, #12]
 800a364:	b020      	add	sp, #128	@ 0x80
 800a366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36a:	200b      	movs	r0, #11
 800a36c:	b020      	add	sp, #128	@ 0x80
 800a36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a372:	200b      	movs	r0, #11
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	08019248 	.word	0x08019248

0800a37c <__default_zero_allocate>:
 800a37c:	f00b bc14 	b.w	8015ba8 <calloc>

0800a380 <__default_reallocate>:
 800a380:	f00b bdcc 	b.w	8015f1c <realloc>

0800a384 <__default_deallocate>:
 800a384:	f00b bca8 	b.w	8015cd8 <free>

0800a388 <__default_allocate>:
 800a388:	f00b bc9e 	b.w	8015cc8 <malloc>

0800a38c <rcutils_get_zero_initialized_allocator>:
 800a38c:	b510      	push	{r4, lr}
 800a38e:	4c05      	ldr	r4, [pc, #20]	@ (800a3a4 <rcutils_get_zero_initialized_allocator+0x18>)
 800a390:	4686      	mov	lr, r0
 800a392:	4684      	mov	ip, r0
 800a394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a396:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a39a:	6823      	ldr	r3, [r4, #0]
 800a39c:	f8cc 3000 	str.w	r3, [ip]
 800a3a0:	4670      	mov	r0, lr
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	08019298 	.word	0x08019298

0800a3a8 <rcutils_set_default_allocator>:
 800a3a8:	b1a8      	cbz	r0, 800a3d6 <rcutils_set_default_allocator+0x2e>
 800a3aa:	6802      	ldr	r2, [r0, #0]
 800a3ac:	b1a2      	cbz	r2, 800a3d8 <rcutils_set_default_allocator+0x30>
 800a3ae:	6841      	ldr	r1, [r0, #4]
 800a3b0:	b1a1      	cbz	r1, 800a3dc <rcutils_set_default_allocator+0x34>
 800a3b2:	b410      	push	{r4}
 800a3b4:	68c4      	ldr	r4, [r0, #12]
 800a3b6:	b164      	cbz	r4, 800a3d2 <rcutils_set_default_allocator+0x2a>
 800a3b8:	6880      	ldr	r0, [r0, #8]
 800a3ba:	b138      	cbz	r0, 800a3cc <rcutils_set_default_allocator+0x24>
 800a3bc:	4b08      	ldr	r3, [pc, #32]	@ (800a3e0 <rcutils_set_default_allocator+0x38>)
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a3c6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	e7fa      	b.n	800a3cc <rcutils_set_default_allocator+0x24>
 800a3d6:	4770      	bx	lr
 800a3d8:	4610      	mov	r0, r2
 800a3da:	4770      	bx	lr
 800a3dc:	4608      	mov	r0, r1
 800a3de:	4770      	bx	lr
 800a3e0:	2000001c 	.word	0x2000001c

0800a3e4 <rcutils_get_default_allocator>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	4c05      	ldr	r4, [pc, #20]	@ (800a3fc <rcutils_get_default_allocator+0x18>)
 800a3e8:	4686      	mov	lr, r0
 800a3ea:	4684      	mov	ip, r0
 800a3ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f8cc 3000 	str.w	r3, [ip]
 800a3f8:	4670      	mov	r0, lr
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	2000001c 	.word	0x2000001c

0800a400 <rcutils_allocator_is_valid>:
 800a400:	b158      	cbz	r0, 800a41a <rcutils_allocator_is_valid+0x1a>
 800a402:	6803      	ldr	r3, [r0, #0]
 800a404:	b143      	cbz	r3, 800a418 <rcutils_allocator_is_valid+0x18>
 800a406:	6843      	ldr	r3, [r0, #4]
 800a408:	b133      	cbz	r3, 800a418 <rcutils_allocator_is_valid+0x18>
 800a40a:	68c3      	ldr	r3, [r0, #12]
 800a40c:	b123      	cbz	r3, 800a418 <rcutils_allocator_is_valid+0x18>
 800a40e:	6880      	ldr	r0, [r0, #8]
 800a410:	3800      	subs	r0, #0
 800a412:	bf18      	it	ne
 800a414:	2001      	movne	r0, #1
 800a416:	4770      	bx	lr
 800a418:	4618      	mov	r0, r3
 800a41a:	4770      	bx	lr

0800a41c <rcutils_get_error_string>:
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <rcutils_get_error_string+0x1c>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b13b      	cbz	r3, 800a432 <rcutils_get_error_string+0x16>
 800a422:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <rcutils_get_error_string+0x20>)
 800a424:	781a      	ldrb	r2, [r3, #0]
 800a426:	b90a      	cbnz	r2, 800a42c <rcutils_get_error_string+0x10>
 800a428:	2201      	movs	r2, #1
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	4b04      	ldr	r3, [pc, #16]	@ (800a440 <rcutils_get_error_string+0x24>)
 800a42e:	7818      	ldrb	r0, [r3, #0]
 800a430:	4770      	bx	lr
 800a432:	4b04      	ldr	r3, [pc, #16]	@ (800a444 <rcutils_get_error_string+0x28>)
 800a434:	7818      	ldrb	r0, [r3, #0]
 800a436:	4770      	bx	lr
 800a438:	2000c260 	.word	0x2000c260
 800a43c:	2000c279 	.word	0x2000c279
 800a440:	2000c278 	.word	0x2000c278
 800a444:	080192ac 	.word	0x080192ac

0800a448 <rcutils_reset_error>:
 800a448:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a468 <rcutils_reset_error+0x20>
 800a44c:	4a08      	ldr	r2, [pc, #32]	@ (800a470 <rcutils_reset_error+0x28>)
 800a44e:	4809      	ldr	r0, [pc, #36]	@ (800a474 <rcutils_reset_error+0x2c>)
 800a450:	4909      	ldr	r1, [pc, #36]	@ (800a478 <rcutils_reset_error+0x30>)
 800a452:	2300      	movs	r3, #0
 800a454:	8013      	strh	r3, [r2, #0]
 800a456:	ed82 7b02 	vstr	d7, [r2, #8]
 800a45a:	4a08      	ldr	r2, [pc, #32]	@ (800a47c <rcutils_reset_error+0x34>)
 800a45c:	7003      	strb	r3, [r0, #0]
 800a45e:	700b      	strb	r3, [r1, #0]
 800a460:	7013      	strb	r3, [r2, #0]
 800a462:	4770      	bx	lr
 800a464:	f3af 8000 	nop.w
	...
 800a470:	2000c268 	.word	0x2000c268
 800a474:	2000c279 	.word	0x2000c279
 800a478:	2000c278 	.word	0x2000c278
 800a47c:	2000c260 	.word	0x2000c260

0800a480 <rcutils_system_time_now>:
 800a480:	b308      	cbz	r0, 800a4c6 <rcutils_system_time_now+0x46>
 800a482:	b570      	push	{r4, r5, r6, lr}
 800a484:	b084      	sub	sp, #16
 800a486:	4604      	mov	r4, r0
 800a488:	4669      	mov	r1, sp
 800a48a:	2001      	movs	r0, #1
 800a48c:	f7f7 fee8 	bl	8002260 <clock_gettime>
 800a490:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a494:	2d00      	cmp	r5, #0
 800a496:	db13      	blt.n	800a4c0 <rcutils_system_time_now+0x40>
 800a498:	9902      	ldr	r1, [sp, #8]
 800a49a:	2900      	cmp	r1, #0
 800a49c:	db0d      	blt.n	800a4ba <rcutils_system_time_now+0x3a>
 800a49e:	4e0b      	ldr	r6, [pc, #44]	@ (800a4cc <rcutils_system_time_now+0x4c>)
 800a4a0:	fba3 3206 	umull	r3, r2, r3, r6
 800a4a4:	185b      	adds	r3, r3, r1
 800a4a6:	fb06 2205 	mla	r2, r6, r5, r2
 800a4aa:	f04f 0000 	mov.w	r0, #0
 800a4ae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a4b2:	e9c4 3200 	strd	r3, r2, [r4]
 800a4b6:	b004      	add	sp, #16
 800a4b8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ba:	ea53 0205 	orrs.w	r2, r3, r5
 800a4be:	d1ee      	bne.n	800a49e <rcutils_system_time_now+0x1e>
 800a4c0:	2002      	movs	r0, #2
 800a4c2:	b004      	add	sp, #16
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	200b      	movs	r0, #11
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	3b9aca00 	.word	0x3b9aca00

0800a4d0 <rcutils_steady_time_now>:
 800a4d0:	b308      	cbz	r0, 800a516 <rcutils_steady_time_now+0x46>
 800a4d2:	b570      	push	{r4, r5, r6, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4669      	mov	r1, sp
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f7f7 fec0 	bl	8002260 <clock_gettime>
 800a4e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a4e4:	2d00      	cmp	r5, #0
 800a4e6:	db13      	blt.n	800a510 <rcutils_steady_time_now+0x40>
 800a4e8:	9902      	ldr	r1, [sp, #8]
 800a4ea:	2900      	cmp	r1, #0
 800a4ec:	db0d      	blt.n	800a50a <rcutils_steady_time_now+0x3a>
 800a4ee:	4e0b      	ldr	r6, [pc, #44]	@ (800a51c <rcutils_steady_time_now+0x4c>)
 800a4f0:	fba3 3206 	umull	r3, r2, r3, r6
 800a4f4:	185b      	adds	r3, r3, r1
 800a4f6:	fb06 2205 	mla	r2, r6, r5, r2
 800a4fa:	f04f 0000 	mov.w	r0, #0
 800a4fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a502:	e9c4 3200 	strd	r3, r2, [r4]
 800a506:	b004      	add	sp, #16
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	ea53 0205 	orrs.w	r2, r3, r5
 800a50e:	d1ee      	bne.n	800a4ee <rcutils_steady_time_now+0x1e>
 800a510:	2002      	movs	r0, #2
 800a512:	b004      	add	sp, #16
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	200b      	movs	r0, #11
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	3b9aca00 	.word	0x3b9aca00

0800a520 <rmw_get_default_publisher_options>:
 800a520:	2200      	movs	r2, #0
 800a522:	6002      	str	r2, [r0, #0]
 800a524:	7102      	strb	r2, [r0, #4]
 800a526:	4770      	bx	lr

0800a528 <rmw_uros_set_custom_transport>:
 800a528:	b470      	push	{r4, r5, r6}
 800a52a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a52e:	b162      	cbz	r2, 800a54a <rmw_uros_set_custom_transport+0x22>
 800a530:	b15b      	cbz	r3, 800a54a <rmw_uros_set_custom_transport+0x22>
 800a532:	b155      	cbz	r5, 800a54a <rmw_uros_set_custom_transport+0x22>
 800a534:	b14e      	cbz	r6, 800a54a <rmw_uros_set_custom_transport+0x22>
 800a536:	4c06      	ldr	r4, [pc, #24]	@ (800a550 <rmw_uros_set_custom_transport+0x28>)
 800a538:	7020      	strb	r0, [r4, #0]
 800a53a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a53e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a542:	6166      	str	r6, [r4, #20]
 800a544:	2000      	movs	r0, #0
 800a546:	bc70      	pop	{r4, r5, r6}
 800a548:	4770      	bx	lr
 800a54a:	200b      	movs	r0, #11
 800a54c:	bc70      	pop	{r4, r5, r6}
 800a54e:	4770      	bx	lr
 800a550:	2000c27c 	.word	0x2000c27c

0800a554 <flush_session>:
 800a554:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a556:	f001 bdcf 	b.w	800c0f8 <uxr_run_session_until_confirm_delivery>
 800a55a:	bf00      	nop

0800a55c <rmw_publish>:
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d053      	beq.n	800a608 <rmw_publish+0xac>
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	460d      	mov	r5, r1
 800a564:	b08e      	sub	sp, #56	@ 0x38
 800a566:	2900      	cmp	r1, #0
 800a568:	d04b      	beq.n	800a602 <rmw_publish+0xa6>
 800a56a:	4604      	mov	r4, r0
 800a56c:	6800      	ldr	r0, [r0, #0]
 800a56e:	f000 fced 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 800a572:	2800      	cmp	r0, #0
 800a574:	d045      	beq.n	800a602 <rmw_publish+0xa6>
 800a576:	6866      	ldr	r6, [r4, #4]
 800a578:	2e00      	cmp	r6, #0
 800a57a:	d042      	beq.n	800a602 <rmw_publish+0xa6>
 800a57c:	69b4      	ldr	r4, [r6, #24]
 800a57e:	4628      	mov	r0, r5
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	4798      	blx	r3
 800a584:	69f3      	ldr	r3, [r6, #28]
 800a586:	9005      	str	r0, [sp, #20]
 800a588:	b113      	cbz	r3, 800a590 <rmw_publish+0x34>
 800a58a:	a805      	add	r0, sp, #20
 800a58c:	4798      	blx	r3
 800a58e:	9805      	ldr	r0, [sp, #20]
 800a590:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	9000      	str	r0, [sp, #0]
 800a598:	6972      	ldr	r2, [r6, #20]
 800a59a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a59c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a5a0:	ab06      	add	r3, sp, #24
 800a5a2:	f002 fb95 	bl	800ccd0 <uxr_prepare_output_stream>
 800a5a6:	b1d8      	cbz	r0, 800a5e0 <rmw_publish+0x84>
 800a5a8:	68a3      	ldr	r3, [r4, #8]
 800a5aa:	a906      	add	r1, sp, #24
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	4798      	blx	r3
 800a5b0:	6a33      	ldr	r3, [r6, #32]
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	b10b      	cbz	r3, 800a5ba <rmw_publish+0x5e>
 800a5b6:	a806      	add	r0, sp, #24
 800a5b8:	4798      	blx	r3
 800a5ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a5c4:	d022      	beq.n	800a60c <rmw_publish+0xb0>
 800a5c6:	6918      	ldr	r0, [r3, #16]
 800a5c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a5ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5ce:	f001 fd93 	bl	800c0f8 <uxr_run_session_until_confirm_delivery>
 800a5d2:	4020      	ands	r0, r4
 800a5d4:	b2c4      	uxtb	r4, r0
 800a5d6:	f084 0001 	eor.w	r0, r4, #1
 800a5da:	b2c0      	uxtb	r0, r0
 800a5dc:	b00e      	add	sp, #56	@ 0x38
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a5e4:	6918      	ldr	r0, [r3, #16]
 800a5e6:	9b05      	ldr	r3, [sp, #20]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a618 <rmw_publish+0xbc>)
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	9602      	str	r6, [sp, #8]
 800a5f0:	6972      	ldr	r2, [r6, #20]
 800a5f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a5f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5f8:	ab06      	add	r3, sp, #24
 800a5fa:	f002 fb99 	bl	800cd30 <uxr_prepare_output_stream_fragmented>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1d2      	bne.n	800a5a8 <rmw_publish+0x4c>
 800a602:	2001      	movs	r0, #1
 800a604:	b00e      	add	sp, #56	@ 0x38
 800a606:	bd70      	pop	{r4, r5, r6, pc}
 800a608:	2001      	movs	r0, #1
 800a60a:	4770      	bx	lr
 800a60c:	6918      	ldr	r0, [r3, #16]
 800a60e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a612:	f001 f9b1 	bl	800b978 <uxr_flash_output_streams>
 800a616:	e7de      	b.n	800a5d6 <rmw_publish+0x7a>
 800a618:	0800a555 	.word	0x0800a555

0800a61c <rmw_create_publisher>:
 800a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	b087      	sub	sp, #28
 800a622:	2800      	cmp	r0, #0
 800a624:	f000 80cc 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a628:	460e      	mov	r6, r1
 800a62a:	2900      	cmp	r1, #0
 800a62c:	f000 80c8 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a630:	4604      	mov	r4, r0
 800a632:	6800      	ldr	r0, [r0, #0]
 800a634:	4615      	mov	r5, r2
 800a636:	4698      	mov	r8, r3
 800a638:	f000 fc88 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f000 80bf 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a642:	2d00      	cmp	r5, #0
 800a644:	f000 80bc 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a648:	782b      	ldrb	r3, [r5, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80b8 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	f000 80b4 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a658:	485c      	ldr	r0, [pc, #368]	@ (800a7cc <rmw_create_publisher+0x1b0>)
 800a65a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a65e:	f006 ffab 	bl	80115b8 <get_memory>
 800a662:	2800      	cmp	r0, #0
 800a664:	f000 80ac 	beq.w	800a7c0 <rmw_create_publisher+0x1a4>
 800a668:	6884      	ldr	r4, [r0, #8]
 800a66a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a66e:	f007 f80b 	bl	8011688 <rmw_get_implementation_identifier>
 800a672:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a676:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a67a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a67e:	4628      	mov	r0, r5
 800a680:	f7f5 fe26 	bl	80002d0 <strlen>
 800a684:	3001      	adds	r0, #1
 800a686:	283c      	cmp	r0, #60	@ 0x3c
 800a688:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a68c:	f200 8091 	bhi.w	800a7b2 <rmw_create_publisher+0x196>
 800a690:	4a4f      	ldr	r2, [pc, #316]	@ (800a7d0 <rmw_create_publisher+0x1b4>)
 800a692:	462b      	mov	r3, r5
 800a694:	213c      	movs	r1, #60	@ 0x3c
 800a696:	4650      	mov	r0, sl
 800a698:	f00c fab6 	bl	8016c08 <sniprintf>
 800a69c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a6a2:	4641      	mov	r1, r8
 800a6a4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a6a8:	2250      	movs	r2, #80	@ 0x50
 800a6aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a6ae:	f00c fd5c 	bl	801716a <memcpy>
 800a6b2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a6b6:	4947      	ldr	r1, [pc, #284]	@ (800a7d4 <rmw_create_publisher+0x1b8>)
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6be:	bf0c      	ite	eq
 800a6c0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a6c4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a6c8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 fc49 	bl	800af68 <get_message_typesupport_handle>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d06b      	beq.n	800a7b2 <rmw_create_publisher+0x196>
 800a6da:	6842      	ldr	r2, [r0, #4]
 800a6dc:	61a2      	str	r2, [r4, #24]
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	d067      	beq.n	800a7b2 <rmw_create_publisher+0x196>
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4643      	mov	r3, r8
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	f007 fa34 	bl	8011b54 <create_topic>
 800a6ec:	6260      	str	r0, [r4, #36]	@ 0x24
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d063      	beq.n	800a7ba <rmw_create_publisher+0x19e>
 800a6f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6fa:	2103      	movs	r1, #3
 800a6fc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a700:	1c42      	adds	r2, r0, #1
 800a702:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a706:	f000 ffe9 	bl	800b6dc <uxr_object_id>
 800a70a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a70e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a712:	6120      	str	r0, [r4, #16]
 800a714:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a718:	6910      	ldr	r0, [r2, #16]
 800a71a:	2506      	movs	r5, #6
 800a71c:	9500      	str	r5, [sp, #0]
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	6922      	ldr	r2, [r4, #16]
 800a722:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a726:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a72a:	f000 fe89 	bl	800b440 <uxr_buffer_create_publisher_bin>
 800a72e:	4602      	mov	r2, r0
 800a730:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a734:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a738:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a73c:	f000 fb86 	bl	800ae4c <run_xrce_session>
 800a740:	b3b8      	cbz	r0, 800a7b2 <rmw_create_publisher+0x196>
 800a742:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a74a:	2105      	movs	r1, #5
 800a74c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a750:	1c42      	adds	r2, r0, #1
 800a752:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a756:	f000 ffc1 	bl	800b6dc <uxr_object_id>
 800a75a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a75e:	6160      	str	r0, [r4, #20]
 800a760:	691e      	ldr	r6, [r3, #16]
 800a762:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a766:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a76a:	f10d 0a10 	add.w	sl, sp, #16
 800a76e:	4641      	mov	r1, r8
 800a770:	4650      	mov	r0, sl
 800a772:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800a776:	f000 fb85 	bl	800ae84 <convert_qos_profile>
 800a77a:	9503      	str	r5, [sp, #12]
 800a77c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a780:	9001      	str	r0, [sp, #4]
 800a782:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a786:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a790:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a794:	f8d8 1000 	ldr.w	r1, [r8]
 800a798:	4630      	mov	r0, r6
 800a79a:	f000 feb1 	bl	800b500 <uxr_buffer_create_datawriter_bin>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a7a4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a7a8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a7ac:	f000 fb4e 	bl	800ae4c <run_xrce_session>
 800a7b0:	b938      	cbnz	r0, 800a7c2 <rmw_create_publisher+0x1a6>
 800a7b2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a7b4:	b108      	cbz	r0, 800a7ba <rmw_create_publisher+0x19e>
 800a7b6:	f000 fa47 	bl	800ac48 <rmw_uxrce_fini_topic_memory>
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f000 f9ec 	bl	800ab98 <rmw_uxrce_fini_publisher_memory>
 800a7c0:	2700      	movs	r7, #0
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	b007      	add	sp, #28
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20010b74 	.word	0x20010b74
 800a7d0:	080192e4 	.word	0x080192e4
 800a7d4:	080192b0 	.word	0x080192b0

0800a7d8 <rmw_publisher_get_actual_qos>:
 800a7d8:	b150      	cbz	r0, 800a7f0 <rmw_publisher_get_actual_qos+0x18>
 800a7da:	b508      	push	{r3, lr}
 800a7dc:	460b      	mov	r3, r1
 800a7de:	b149      	cbz	r1, 800a7f4 <rmw_publisher_get_actual_qos+0x1c>
 800a7e0:	6841      	ldr	r1, [r0, #4]
 800a7e2:	2250      	movs	r2, #80	@ 0x50
 800a7e4:	3128      	adds	r1, #40	@ 0x28
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f00c fcbf 	bl	801716a <memcpy>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	bd08      	pop	{r3, pc}
 800a7f0:	200b      	movs	r0, #11
 800a7f2:	4770      	bx	lr
 800a7f4:	200b      	movs	r0, #11
 800a7f6:	bd08      	pop	{r3, pc}

0800a7f8 <rmw_destroy_publisher>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	b128      	cbz	r0, 800a808 <rmw_destroy_publisher+0x10>
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	460d      	mov	r5, r1
 800a802:	f000 fba3 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 800a806:	b910      	cbnz	r0, 800a80e <rmw_destroy_publisher+0x16>
 800a808:	2401      	movs	r4, #1
 800a80a:	4620      	mov	r0, r4
 800a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a80e:	6863      	ldr	r3, [r4, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0f9      	beq.n	800a808 <rmw_destroy_publisher+0x10>
 800a814:	2d00      	cmp	r5, #0
 800a816:	d0f7      	beq.n	800a808 <rmw_destroy_publisher+0x10>
 800a818:	6828      	ldr	r0, [r5, #0]
 800a81a:	f000 fb97 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d0f2      	beq.n	800a808 <rmw_destroy_publisher+0x10>
 800a822:	686c      	ldr	r4, [r5, #4]
 800a824:	2c00      	cmp	r4, #0
 800a826:	d0ef      	beq.n	800a808 <rmw_destroy_publisher+0x10>
 800a828:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a82a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a82e:	f007 f9e1 	bl	8011bf4 <destroy_topic>
 800a832:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a836:	6962      	ldr	r2, [r4, #20]
 800a838:	6918      	ldr	r0, [r3, #16]
 800a83a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a83e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a842:	6819      	ldr	r1, [r3, #0]
 800a844:	f000 fd48 	bl	800b2d8 <uxr_buffer_delete_entity>
 800a848:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800a854:	4604      	mov	r4, r0
 800a856:	6809      	ldr	r1, [r1, #0]
 800a858:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a85c:	f000 fd3c 	bl	800b2d8 <uxr_buffer_delete_entity>
 800a860:	693e      	ldr	r6, [r7, #16]
 800a862:	4622      	mov	r2, r4
 800a864:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a868:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a86c:	4604      	mov	r4, r0
 800a86e:	4630      	mov	r0, r6
 800a870:	f000 faec 	bl	800ae4c <run_xrce_session>
 800a874:	693e      	ldr	r6, [r7, #16]
 800a876:	4622      	mov	r2, r4
 800a878:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800a87c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800a880:	4604      	mov	r4, r0
 800a882:	4630      	mov	r0, r6
 800a884:	f000 fae2 	bl	800ae4c <run_xrce_session>
 800a888:	b12c      	cbz	r4, 800a896 <rmw_destroy_publisher+0x9e>
 800a88a:	b120      	cbz	r0, 800a896 <rmw_destroy_publisher+0x9e>
 800a88c:	2400      	movs	r4, #0
 800a88e:	4628      	mov	r0, r5
 800a890:	f000 f982 	bl	800ab98 <rmw_uxrce_fini_publisher_memory>
 800a894:	e7b9      	b.n	800a80a <rmw_destroy_publisher+0x12>
 800a896:	2402      	movs	r4, #2
 800a898:	e7f9      	b.n	800a88e <rmw_destroy_publisher+0x96>
 800a89a:	bf00      	nop

0800a89c <rmw_uxrce_init_service_memory>:
 800a89c:	b1e2      	cbz	r2, 800a8d8 <rmw_uxrce_init_service_memory+0x3c>
 800a89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a2:	7b05      	ldrb	r5, [r0, #12]
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	b9ad      	cbnz	r5, 800a8d4 <rmw_uxrce_init_service_memory+0x38>
 800a8a8:	23c8      	movs	r3, #200	@ 0xc8
 800a8aa:	e9c0 5500 	strd	r5, r5, [r0]
 800a8ae:	6083      	str	r3, [r0, #8]
 800a8b0:	f240 1301 	movw	r3, #257	@ 0x101
 800a8b4:	4617      	mov	r7, r2
 800a8b6:	8183      	strh	r3, [r0, #12]
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	46a8      	mov	r8, r5
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4630      	mov	r0, r6
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	f006 fe89 	bl	80115d8 <put_memory>
 800a8c6:	42af      	cmp	r7, r5
 800a8c8:	60a4      	str	r4, [r4, #8]
 800a8ca:	f884 800c 	strb.w	r8, [r4, #12]
 800a8ce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a8d2:	d1f3      	bne.n	800a8bc <rmw_uxrce_init_service_memory+0x20>
 800a8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop

0800a8dc <rmw_uxrce_init_client_memory>:
 800a8dc:	b1e2      	cbz	r2, 800a918 <rmw_uxrce_init_client_memory+0x3c>
 800a8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e2:	7b05      	ldrb	r5, [r0, #12]
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	b9ad      	cbnz	r5, 800a914 <rmw_uxrce_init_client_memory+0x38>
 800a8e8:	23c8      	movs	r3, #200	@ 0xc8
 800a8ea:	e9c0 5500 	strd	r5, r5, [r0]
 800a8ee:	6083      	str	r3, [r0, #8]
 800a8f0:	f240 1301 	movw	r3, #257	@ 0x101
 800a8f4:	4617      	mov	r7, r2
 800a8f6:	8183      	strh	r3, [r0, #12]
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	46a8      	mov	r8, r5
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	4630      	mov	r0, r6
 800a900:	3501      	adds	r5, #1
 800a902:	f006 fe69 	bl	80115d8 <put_memory>
 800a906:	42af      	cmp	r7, r5
 800a908:	60a4      	str	r4, [r4, #8]
 800a90a:	f884 800c 	strb.w	r8, [r4, #12]
 800a90e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a912:	d1f3      	bne.n	800a8fc <rmw_uxrce_init_client_memory+0x20>
 800a914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop

0800a91c <rmw_uxrce_init_publisher_memory>:
 800a91c:	b1e2      	cbz	r2, 800a958 <rmw_uxrce_init_publisher_memory+0x3c>
 800a91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a922:	7b05      	ldrb	r5, [r0, #12]
 800a924:	4606      	mov	r6, r0
 800a926:	b9ad      	cbnz	r5, 800a954 <rmw_uxrce_init_publisher_memory+0x38>
 800a928:	23d8      	movs	r3, #216	@ 0xd8
 800a92a:	e9c0 5500 	strd	r5, r5, [r0]
 800a92e:	6083      	str	r3, [r0, #8]
 800a930:	f240 1301 	movw	r3, #257	@ 0x101
 800a934:	4617      	mov	r7, r2
 800a936:	8183      	strh	r3, [r0, #12]
 800a938:	460c      	mov	r4, r1
 800a93a:	46a8      	mov	r8, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	4630      	mov	r0, r6
 800a940:	3501      	adds	r5, #1
 800a942:	f006 fe49 	bl	80115d8 <put_memory>
 800a946:	42af      	cmp	r7, r5
 800a948:	60a4      	str	r4, [r4, #8]
 800a94a:	f884 800c 	strb.w	r8, [r4, #12]
 800a94e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a952:	d1f3      	bne.n	800a93c <rmw_uxrce_init_publisher_memory+0x20>
 800a954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop

0800a95c <rmw_uxrce_init_subscription_memory>:
 800a95c:	b1e2      	cbz	r2, 800a998 <rmw_uxrce_init_subscription_memory+0x3c>
 800a95e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a962:	7b05      	ldrb	r5, [r0, #12]
 800a964:	4606      	mov	r6, r0
 800a966:	b9ad      	cbnz	r5, 800a994 <rmw_uxrce_init_subscription_memory+0x38>
 800a968:	23d8      	movs	r3, #216	@ 0xd8
 800a96a:	e9c0 5500 	strd	r5, r5, [r0]
 800a96e:	6083      	str	r3, [r0, #8]
 800a970:	f240 1301 	movw	r3, #257	@ 0x101
 800a974:	4617      	mov	r7, r2
 800a976:	8183      	strh	r3, [r0, #12]
 800a978:	460c      	mov	r4, r1
 800a97a:	46a8      	mov	r8, r5
 800a97c:	4621      	mov	r1, r4
 800a97e:	4630      	mov	r0, r6
 800a980:	3501      	adds	r5, #1
 800a982:	f006 fe29 	bl	80115d8 <put_memory>
 800a986:	42af      	cmp	r7, r5
 800a988:	60a4      	str	r4, [r4, #8]
 800a98a:	f884 800c 	strb.w	r8, [r4, #12]
 800a98e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a992:	d1f3      	bne.n	800a97c <rmw_uxrce_init_subscription_memory+0x20>
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop

0800a99c <rmw_uxrce_init_node_memory>:
 800a99c:	b1e2      	cbz	r2, 800a9d8 <rmw_uxrce_init_node_memory+0x3c>
 800a99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9a2:	7b05      	ldrb	r5, [r0, #12]
 800a9a4:	4606      	mov	r6, r0
 800a9a6:	b9ad      	cbnz	r5, 800a9d4 <rmw_uxrce_init_node_memory+0x38>
 800a9a8:	23a4      	movs	r3, #164	@ 0xa4
 800a9aa:	e9c0 5500 	strd	r5, r5, [r0]
 800a9ae:	6083      	str	r3, [r0, #8]
 800a9b0:	f240 1301 	movw	r3, #257	@ 0x101
 800a9b4:	4617      	mov	r7, r2
 800a9b6:	8183      	strh	r3, [r0, #12]
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	46a8      	mov	r8, r5
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4630      	mov	r0, r6
 800a9c0:	3501      	adds	r5, #1
 800a9c2:	f006 fe09 	bl	80115d8 <put_memory>
 800a9c6:	42af      	cmp	r7, r5
 800a9c8:	60a4      	str	r4, [r4, #8]
 800a9ca:	f884 800c 	strb.w	r8, [r4, #12]
 800a9ce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a9d2:	d1f3      	bne.n	800a9bc <rmw_uxrce_init_node_memory+0x20>
 800a9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop

0800a9dc <rmw_uxrce_init_session_memory>:
 800a9dc:	b1ea      	cbz	r2, 800aa1a <rmw_uxrce_init_session_memory+0x3e>
 800a9de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e2:	7b05      	ldrb	r5, [r0, #12]
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	b9b5      	cbnz	r5, 800aa16 <rmw_uxrce_init_session_memory+0x3a>
 800a9e8:	e9c0 5500 	strd	r5, r5, [r0]
 800a9ec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a9f0:	f240 1301 	movw	r3, #257	@ 0x101
 800a9f4:	4617      	mov	r7, r2
 800a9f6:	f8c0 8008 	str.w	r8, [r0, #8]
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	8183      	strh	r3, [r0, #12]
 800a9fe:	46a9      	mov	r9, r5
 800aa00:	4621      	mov	r1, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	3501      	adds	r5, #1
 800aa06:	f006 fde7 	bl	80115d8 <put_memory>
 800aa0a:	42af      	cmp	r7, r5
 800aa0c:	60a4      	str	r4, [r4, #8]
 800aa0e:	f884 900c 	strb.w	r9, [r4, #12]
 800aa12:	4444      	add	r4, r8
 800aa14:	d1f4      	bne.n	800aa00 <rmw_uxrce_init_session_memory+0x24>
 800aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	4770      	bx	lr

0800aa1c <rmw_uxrce_init_topic_memory>:
 800aa1c:	b1e2      	cbz	r2, 800aa58 <rmw_uxrce_init_topic_memory+0x3c>
 800aa1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa22:	7b05      	ldrb	r5, [r0, #12]
 800aa24:	4606      	mov	r6, r0
 800aa26:	b9ad      	cbnz	r5, 800aa54 <rmw_uxrce_init_topic_memory+0x38>
 800aa28:	231c      	movs	r3, #28
 800aa2a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa2e:	6083      	str	r3, [r0, #8]
 800aa30:	f240 1301 	movw	r3, #257	@ 0x101
 800aa34:	4617      	mov	r7, r2
 800aa36:	8183      	strh	r3, [r0, #12]
 800aa38:	460c      	mov	r4, r1
 800aa3a:	46a8      	mov	r8, r5
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4630      	mov	r0, r6
 800aa40:	3501      	adds	r5, #1
 800aa42:	f006 fdc9 	bl	80115d8 <put_memory>
 800aa46:	42af      	cmp	r7, r5
 800aa48:	60a4      	str	r4, [r4, #8]
 800aa4a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa4e:	f104 041c 	add.w	r4, r4, #28
 800aa52:	d1f3      	bne.n	800aa3c <rmw_uxrce_init_topic_memory+0x20>
 800aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop

0800aa5c <rmw_uxrce_init_static_input_buffer_memory>:
 800aa5c:	b1ea      	cbz	r2, 800aa9a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800aa5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa62:	7b05      	ldrb	r5, [r0, #12]
 800aa64:	4606      	mov	r6, r0
 800aa66:	b9b5      	cbnz	r5, 800aa96 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800aa68:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800aa6c:	e9c0 5500 	strd	r5, r5, [r0]
 800aa70:	6083      	str	r3, [r0, #8]
 800aa72:	f240 1301 	movw	r3, #257	@ 0x101
 800aa76:	4617      	mov	r7, r2
 800aa78:	8183      	strh	r3, [r0, #12]
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	46a8      	mov	r8, r5
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4630      	mov	r0, r6
 800aa82:	3501      	adds	r5, #1
 800aa84:	f006 fda8 	bl	80115d8 <put_memory>
 800aa88:	42af      	cmp	r7, r5
 800aa8a:	60a4      	str	r4, [r4, #8]
 800aa8c:	f884 800c 	strb.w	r8, [r4, #12]
 800aa90:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800aa94:	d1f3      	bne.n	800aa7e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800aa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa9a:	4770      	bx	lr

0800aa9c <rmw_uxrce_init_init_options_impl_memory>:
 800aa9c:	b1e2      	cbz	r2, 800aad8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa2:	7b05      	ldrb	r5, [r0, #12]
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	b9ad      	cbnz	r5, 800aad4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800aaa8:	232c      	movs	r3, #44	@ 0x2c
 800aaaa:	e9c0 5500 	strd	r5, r5, [r0]
 800aaae:	6083      	str	r3, [r0, #8]
 800aab0:	f240 1301 	movw	r3, #257	@ 0x101
 800aab4:	4617      	mov	r7, r2
 800aab6:	8183      	strh	r3, [r0, #12]
 800aab8:	460c      	mov	r4, r1
 800aaba:	46a8      	mov	r8, r5
 800aabc:	4621      	mov	r1, r4
 800aabe:	4630      	mov	r0, r6
 800aac0:	3501      	adds	r5, #1
 800aac2:	f006 fd89 	bl	80115d8 <put_memory>
 800aac6:	42af      	cmp	r7, r5
 800aac8:	60a4      	str	r4, [r4, #8]
 800aaca:	f884 800c 	strb.w	r8, [r4, #12]
 800aace:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800aad2:	d1f3      	bne.n	800aabc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop

0800aadc <rmw_uxrce_init_wait_set_memory>:
 800aadc:	b1e2      	cbz	r2, 800ab18 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae2:	7b05      	ldrb	r5, [r0, #12]
 800aae4:	4606      	mov	r6, r0
 800aae6:	b9ad      	cbnz	r5, 800ab14 <rmw_uxrce_init_wait_set_memory+0x38>
 800aae8:	231c      	movs	r3, #28
 800aaea:	e9c0 5500 	strd	r5, r5, [r0]
 800aaee:	6083      	str	r3, [r0, #8]
 800aaf0:	f240 1301 	movw	r3, #257	@ 0x101
 800aaf4:	4617      	mov	r7, r2
 800aaf6:	8183      	strh	r3, [r0, #12]
 800aaf8:	460c      	mov	r4, r1
 800aafa:	46a8      	mov	r8, r5
 800aafc:	4621      	mov	r1, r4
 800aafe:	4630      	mov	r0, r6
 800ab00:	3501      	adds	r5, #1
 800ab02:	f006 fd69 	bl	80115d8 <put_memory>
 800ab06:	42af      	cmp	r7, r5
 800ab08:	60a4      	str	r4, [r4, #8]
 800ab0a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab0e:	f104 041c 	add.w	r4, r4, #28
 800ab12:	d1f3      	bne.n	800aafc <rmw_uxrce_init_wait_set_memory+0x20>
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop

0800ab1c <rmw_uxrce_init_guard_condition_memory>:
 800ab1c:	b1e2      	cbz	r2, 800ab58 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ab1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab22:	7b05      	ldrb	r5, [r0, #12]
 800ab24:	4606      	mov	r6, r0
 800ab26:	b9ad      	cbnz	r5, 800ab54 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ab28:	2320      	movs	r3, #32
 800ab2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab2e:	6083      	str	r3, [r0, #8]
 800ab30:	f240 1301 	movw	r3, #257	@ 0x101
 800ab34:	4617      	mov	r7, r2
 800ab36:	8183      	strh	r3, [r0, #12]
 800ab38:	460c      	mov	r4, r1
 800ab3a:	46a8      	mov	r8, r5
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4630      	mov	r0, r6
 800ab40:	3501      	adds	r5, #1
 800ab42:	f006 fd49 	bl	80115d8 <put_memory>
 800ab46:	42af      	cmp	r7, r5
 800ab48:	60a4      	str	r4, [r4, #8]
 800ab4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab4e:	f104 0420 	add.w	r4, r4, #32
 800ab52:	d1f3      	bne.n	800ab3c <rmw_uxrce_init_guard_condition_memory+0x20>
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop

0800ab5c <rmw_uxrce_fini_session_memory>:
 800ab5c:	4601      	mov	r1, r0
 800ab5e:	4801      	ldr	r0, [pc, #4]	@ (800ab64 <rmw_uxrce_fini_session_memory+0x8>)
 800ab60:	f006 bd3a 	b.w	80115d8 <put_memory>
 800ab64:	20010b94 	.word	0x20010b94

0800ab68 <rmw_uxrce_fini_node_memory>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	6800      	ldr	r0, [r0, #0]
 800ab6e:	b128      	cbz	r0, 800ab7c <rmw_uxrce_fini_node_memory+0x14>
 800ab70:	4b07      	ldr	r3, [pc, #28]	@ (800ab90 <rmw_uxrce_fini_node_memory+0x28>)
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	f7f5 fb4c 	bl	8000210 <strcmp>
 800ab78:	b940      	cbnz	r0, 800ab8c <rmw_uxrce_fini_node_memory+0x24>
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	6861      	ldr	r1, [r4, #4]
 800ab7e:	b129      	cbz	r1, 800ab8c <rmw_uxrce_fini_node_memory+0x24>
 800ab80:	2500      	movs	r5, #0
 800ab82:	4804      	ldr	r0, [pc, #16]	@ (800ab94 <rmw_uxrce_fini_node_memory+0x2c>)
 800ab84:	610d      	str	r5, [r1, #16]
 800ab86:	f006 fd27 	bl	80115d8 <put_memory>
 800ab8a:	6065      	str	r5, [r4, #4]
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	bf00      	nop
 800ab90:	08019a04 	.word	0x08019a04
 800ab94:	20010b64 	.word	0x20010b64

0800ab98 <rmw_uxrce_fini_publisher_memory>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	6800      	ldr	r0, [r0, #0]
 800ab9e:	b128      	cbz	r0, 800abac <rmw_uxrce_fini_publisher_memory+0x14>
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <rmw_uxrce_fini_publisher_memory+0x24>)
 800aba2:	6819      	ldr	r1, [r3, #0]
 800aba4:	f7f5 fb34 	bl	8000210 <strcmp>
 800aba8:	b938      	cbnz	r0, 800abba <rmw_uxrce_fini_publisher_memory+0x22>
 800abaa:	6020      	str	r0, [r4, #0]
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	b121      	cbz	r1, 800abba <rmw_uxrce_fini_publisher_memory+0x22>
 800abb0:	4803      	ldr	r0, [pc, #12]	@ (800abc0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800abb2:	f006 fd11 	bl	80115d8 <put_memory>
 800abb6:	2300      	movs	r3, #0
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	bd10      	pop	{r4, pc}
 800abbc:	08019a04 	.word	0x08019a04
 800abc0:	20010b74 	.word	0x20010b74

0800abc4 <rmw_uxrce_fini_subscription_memory>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4604      	mov	r4, r0
 800abc8:	6800      	ldr	r0, [r0, #0]
 800abca:	b128      	cbz	r0, 800abd8 <rmw_uxrce_fini_subscription_memory+0x14>
 800abcc:	4b06      	ldr	r3, [pc, #24]	@ (800abe8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	f7f5 fb1e 	bl	8000210 <strcmp>
 800abd4:	b938      	cbnz	r0, 800abe6 <rmw_uxrce_fini_subscription_memory+0x22>
 800abd6:	6020      	str	r0, [r4, #0]
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	b121      	cbz	r1, 800abe6 <rmw_uxrce_fini_subscription_memory+0x22>
 800abdc:	4803      	ldr	r0, [pc, #12]	@ (800abec <rmw_uxrce_fini_subscription_memory+0x28>)
 800abde:	f006 fcfb 	bl	80115d8 <put_memory>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	bd10      	pop	{r4, pc}
 800abe8:	08019a04 	.word	0x08019a04
 800abec:	20010bb4 	.word	0x20010bb4

0800abf0 <rmw_uxrce_fini_service_memory>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	6800      	ldr	r0, [r0, #0]
 800abf6:	b128      	cbz	r0, 800ac04 <rmw_uxrce_fini_service_memory+0x14>
 800abf8:	4b06      	ldr	r3, [pc, #24]	@ (800ac14 <rmw_uxrce_fini_service_memory+0x24>)
 800abfa:	6819      	ldr	r1, [r3, #0]
 800abfc:	f7f5 fb08 	bl	8000210 <strcmp>
 800ac00:	b938      	cbnz	r0, 800ac12 <rmw_uxrce_fini_service_memory+0x22>
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	6861      	ldr	r1, [r4, #4]
 800ac06:	b121      	cbz	r1, 800ac12 <rmw_uxrce_fini_service_memory+0x22>
 800ac08:	4803      	ldr	r0, [pc, #12]	@ (800ac18 <rmw_uxrce_fini_service_memory+0x28>)
 800ac0a:	f006 fce5 	bl	80115d8 <put_memory>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6063      	str	r3, [r4, #4]
 800ac12:	bd10      	pop	{r4, pc}
 800ac14:	08019a04 	.word	0x08019a04
 800ac18:	20010b84 	.word	0x20010b84

0800ac1c <rmw_uxrce_fini_client_memory>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	6800      	ldr	r0, [r0, #0]
 800ac22:	b128      	cbz	r0, 800ac30 <rmw_uxrce_fini_client_memory+0x14>
 800ac24:	4b06      	ldr	r3, [pc, #24]	@ (800ac40 <rmw_uxrce_fini_client_memory+0x24>)
 800ac26:	6819      	ldr	r1, [r3, #0]
 800ac28:	f7f5 faf2 	bl	8000210 <strcmp>
 800ac2c:	b938      	cbnz	r0, 800ac3e <rmw_uxrce_fini_client_memory+0x22>
 800ac2e:	6020      	str	r0, [r4, #0]
 800ac30:	6861      	ldr	r1, [r4, #4]
 800ac32:	b121      	cbz	r1, 800ac3e <rmw_uxrce_fini_client_memory+0x22>
 800ac34:	4803      	ldr	r0, [pc, #12]	@ (800ac44 <rmw_uxrce_fini_client_memory+0x28>)
 800ac36:	f006 fccf 	bl	80115d8 <put_memory>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	6063      	str	r3, [r4, #4]
 800ac3e:	bd10      	pop	{r4, pc}
 800ac40:	08019a04 	.word	0x08019a04
 800ac44:	2000c298 	.word	0x2000c298

0800ac48 <rmw_uxrce_fini_topic_memory>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4803      	ldr	r0, [pc, #12]	@ (800ac5c <rmw_uxrce_fini_topic_memory+0x14>)
 800ac50:	f006 fcc2 	bl	80115d8 <put_memory>
 800ac54:	2300      	movs	r3, #0
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20010bc4 	.word	0x20010bc4

0800ac60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ac60:	b082      	sub	sp, #8
 800ac62:	b530      	push	{r4, r5, lr}
 800ac64:	4925      	ldr	r1, [pc, #148]	@ (800acfc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ac66:	680d      	ldr	r5, [r1, #0]
 800ac68:	ac03      	add	r4, sp, #12
 800ac6a:	e884 000c 	stmia.w	r4, {r2, r3}
 800ac6e:	461c      	mov	r4, r3
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	d041      	beq.n	800acf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ac74:	462b      	mov	r3, r5
 800ac76:	2100      	movs	r1, #0
 800ac78:	689a      	ldr	r2, [r3, #8]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800ac80:	4290      	cmp	r0, r2
 800ac82:	bf08      	it	eq
 800ac84:	3101      	addeq	r1, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1f6      	bne.n	800ac78 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ac8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d029      	beq.n	800ace6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac92:	d907      	bls.n	800aca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac94:	2b03      	cmp	r3, #3
 800ac96:	d005      	beq.n	800aca4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac98:	2100      	movs	r1, #0
 800ac9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac9e:	4608      	mov	r0, r1
 800aca0:	b002      	add	sp, #8
 800aca2:	4770      	bx	lr
 800aca4:	b314      	cbz	r4, 800acec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800aca6:	428c      	cmp	r4, r1
 800aca8:	d820      	bhi.n	800acec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800acaa:	2d00      	cmp	r5, #0
 800acac:	d0f4      	beq.n	800ac98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800acae:	2100      	movs	r1, #0
 800acb0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800acb4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800acb8:	e002      	b.n	800acc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800acba:	686d      	ldr	r5, [r5, #4]
 800acbc:	2d00      	cmp	r5, #0
 800acbe:	d0ec      	beq.n	800ac9a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800acc0:	68ab      	ldr	r3, [r5, #8]
 800acc2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800acc6:	4290      	cmp	r0, r2
 800acc8:	d1f7      	bne.n	800acba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800acca:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800acce:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800acd2:	4562      	cmp	r2, ip
 800acd4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800acd8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800acdc:	daed      	bge.n	800acba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800acde:	4694      	mov	ip, r2
 800ace0:	461c      	mov	r4, r3
 800ace2:	4629      	mov	r1, r5
 800ace4:	e7e9      	b.n	800acba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ace6:	b10c      	cbz	r4, 800acec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ace8:	428c      	cmp	r4, r1
 800acea:	d9d5      	bls.n	800ac98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800acec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acf0:	4802      	ldr	r0, [pc, #8]	@ (800acfc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800acf2:	b002      	add	sp, #8
 800acf4:	f006 bc60 	b.w	80115b8 <get_memory>
 800acf8:	4629      	mov	r1, r5
 800acfa:	e7c6      	b.n	800ac8a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800acfc:	20010ba4 	.word	0x20010ba4

0800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ad00:	4b11      	ldr	r3, [pc, #68]	@ (800ad48 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	b530      	push	{r4, r5, lr}
 800ad06:	b1e3      	cbz	r3, 800ad42 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ad08:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ad0c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ad10:	2400      	movs	r4, #0
 800ad12:	e001      	b.n	800ad18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b193      	cbz	r3, 800ad3e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ad1e:	4288      	cmp	r0, r1
 800ad20:	d1f8      	bne.n	800ad14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ad22:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ad26:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ad2a:	4571      	cmp	r1, lr
 800ad2c:	eb72 050c 	sbcs.w	r5, r2, ip
 800ad30:	daf0      	bge.n	800ad14 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ad32:	461c      	mov	r4, r3
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	468e      	mov	lr, r1
 800ad38:	4694      	mov	ip, r2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1ec      	bne.n	800ad18 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ad3e:	4620      	mov	r0, r4
 800ad40:	bd30      	pop	{r4, r5, pc}
 800ad42:	461c      	mov	r4, r3
 800ad44:	4620      	mov	r0, r4
 800ad46:	bd30      	pop	{r4, r5, pc}
 800ad48:	20010ba4 	.word	0x20010ba4
 800ad4c:	00000000 	.word	0x00000000

0800ad50 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	4b3c      	ldr	r3, [pc, #240]	@ (800ae48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ad56:	ed2d 8b06 	vpush	{d8-d10}
 800ad5a:	681f      	ldr	r7, [r3, #0]
 800ad5c:	b08d      	sub	sp, #52	@ 0x34
 800ad5e:	f007 fd69 	bl	8012834 <rmw_uros_epoch_nanos>
 800ad62:	2f00      	cmp	r7, #0
 800ad64:	d05d      	beq.n	800ae22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ad66:	46b8      	mov	r8, r7
 800ad68:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800ae30 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ad6c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ad70:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800ae38 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ad7a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800ae40 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ad7e:	4681      	mov	r9, r0
 800ad80:	468a      	mov	sl, r1
 800ad82:	ac04      	add	r4, sp, #16
 800ad84:	d03f      	beq.n	800ae06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ad86:	2b05      	cmp	r3, #5
 800ad88:	d044      	beq.n	800ae14 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d03b      	beq.n	800ae06 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ad8e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ad92:	ed8d ab06 	vstr	d10, [sp, #24]
 800ad96:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ad9a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800ad9e:	ab08      	add	r3, sp, #32
 800ada0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ada2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ada6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800adaa:	f006 fa39 	bl	8011220 <rmw_time_equal>
 800adae:	b118      	cbz	r0, 800adb8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800adb0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800adb4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800adb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800adbc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800adc0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800adc4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800adc8:	f006 fa7e 	bl	80112c8 <rmw_time_total_nsec>
 800adcc:	1830      	adds	r0, r6, r0
 800adce:	eb47 0101 	adc.w	r1, r7, r1
 800add2:	4548      	cmp	r0, r9
 800add4:	eb71 030a 	sbcs.w	r3, r1, sl
 800add8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800addc:	db05      	blt.n	800adea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800adde:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ade2:	4591      	cmp	r9, r2
 800ade4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ade8:	da03      	bge.n	800adf2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800adea:	4817      	ldr	r0, [pc, #92]	@ (800ae48 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800adec:	4641      	mov	r1, r8
 800adee:	f006 fbf3 	bl	80115d8 <put_memory>
 800adf2:	f1bb 0f00 	cmp.w	fp, #0
 800adf6:	d014      	beq.n	800ae22 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800adf8:	46d8      	mov	r8, fp
 800adfa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800adfe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d1bf      	bne.n	800ad86 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800ae06:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ae0a:	3340      	adds	r3, #64	@ 0x40
 800ae0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae12:	e7c0      	b.n	800ad96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ae14:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ae18:	3348      	adds	r3, #72	@ 0x48
 800ae1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ae20:	e7b9      	b.n	800ad96 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800ae22:	b00d      	add	sp, #52	@ 0x34
 800ae24:	ecbd 8b06 	vpop	{d8-d10}
 800ae28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2c:	f3af 8000 	nop.w
	...
 800ae38:	00000001 	.word	0x00000001
 800ae3c:	00000000 	.word	0x00000000
 800ae40:	0000001e 	.word	0x0000001e
 800ae44:	00000000 	.word	0x00000000
 800ae48:	20010ba4 	.word	0x20010ba4

0800ae4c <run_xrce_session>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	788c      	ldrb	r4, [r1, #2]
 800ae50:	b086      	sub	sp, #24
 800ae52:	2c01      	cmp	r4, #1
 800ae54:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ae58:	d00c      	beq.n	800ae74 <run_xrce_session+0x28>
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	f10d 020e 	add.w	r2, sp, #14
 800ae64:	f10d 0317 	add.w	r3, sp, #23
 800ae68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae6c:	f001 f96a 	bl	800c144 <uxr_run_session_until_all_status>
 800ae70:	b006      	add	sp, #24
 800ae72:	bd10      	pop	{r4, pc}
 800ae74:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ae78:	f000 fd7e 	bl	800b978 <uxr_flash_output_streams>
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	b006      	add	sp, #24
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	bf00      	nop

0800ae84 <convert_qos_profile>:
 800ae84:	7a4a      	ldrb	r2, [r1, #9]
 800ae86:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ae8a:	2a02      	cmp	r2, #2
 800ae8c:	bf18      	it	ne
 800ae8e:	2200      	movne	r2, #0
 800ae90:	7002      	strb	r2, [r0, #0]
 800ae92:	780a      	ldrb	r2, [r1, #0]
 800ae94:	8889      	ldrh	r1, [r1, #4]
 800ae96:	8081      	strh	r1, [r0, #4]
 800ae98:	f1ac 0c02 	sub.w	ip, ip, #2
 800ae9c:	f1a2 0202 	sub.w	r2, r2, #2
 800aea0:	fabc fc8c 	clz	ip, ip
 800aea4:	fab2 f282 	clz	r2, r2
 800aea8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800aeac:	0952      	lsrs	r2, r2, #5
 800aeae:	f880 c001 	strb.w	ip, [r0, #1]
 800aeb2:	7082      	strb	r2, [r0, #2]
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop

0800aeb8 <generate_type_name>:
 800aeb8:	b530      	push	{r4, r5, lr}
 800aeba:	2300      	movs	r3, #0
 800aebc:	700b      	strb	r3, [r1, #0]
 800aebe:	6803      	ldr	r3, [r0, #0]
 800aec0:	b087      	sub	sp, #28
 800aec2:	4614      	mov	r4, r2
 800aec4:	b1d3      	cbz	r3, 800aefc <generate_type_name+0x44>
 800aec6:	4a0f      	ldr	r2, [pc, #60]	@ (800af04 <generate_type_name+0x4c>)
 800aec8:	4615      	mov	r5, r2
 800aeca:	9203      	str	r2, [sp, #12]
 800aecc:	9500      	str	r5, [sp, #0]
 800aece:	6842      	ldr	r2, [r0, #4]
 800aed0:	480d      	ldr	r0, [pc, #52]	@ (800af08 <generate_type_name+0x50>)
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	4608      	mov	r0, r1
 800aed6:	490d      	ldr	r1, [pc, #52]	@ (800af0c <generate_type_name+0x54>)
 800aed8:	9204      	str	r2, [sp, #16]
 800aeda:	9105      	str	r1, [sp, #20]
 800aedc:	9102      	str	r1, [sp, #8]
 800aede:	4a0c      	ldr	r2, [pc, #48]	@ (800af10 <generate_type_name+0x58>)
 800aee0:	4621      	mov	r1, r4
 800aee2:	f00b fe91 	bl	8016c08 <sniprintf>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	db05      	blt.n	800aef6 <generate_type_name+0x3e>
 800aeea:	4284      	cmp	r4, r0
 800aeec:	bfd4      	ite	le
 800aeee:	2000      	movle	r0, #0
 800aef0:	2001      	movgt	r0, #1
 800aef2:	b007      	add	sp, #28
 800aef4:	bd30      	pop	{r4, r5, pc}
 800aef6:	2000      	movs	r0, #0
 800aef8:	b007      	add	sp, #28
 800aefa:	bd30      	pop	{r4, r5, pc}
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <generate_type_name+0x5c>)
 800aefe:	4a01      	ldr	r2, [pc, #4]	@ (800af04 <generate_type_name+0x4c>)
 800af00:	461d      	mov	r5, r3
 800af02:	e7e2      	b.n	800aeca <generate_type_name+0x12>
 800af04:	080192d4 	.word	0x080192d4
 800af08:	080192ec 	.word	0x080192ec
 800af0c:	080192e8 	.word	0x080192e8
 800af10:	080192d8 	.word	0x080192d8
 800af14:	08019ca8 	.word	0x08019ca8

0800af18 <generate_topic_name>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	4614      	mov	r4, r2
 800af1e:	9000      	str	r0, [sp, #0]
 800af20:	4b08      	ldr	r3, [pc, #32]	@ (800af44 <generate_topic_name+0x2c>)
 800af22:	4a09      	ldr	r2, [pc, #36]	@ (800af48 <generate_topic_name+0x30>)
 800af24:	4608      	mov	r0, r1
 800af26:	4621      	mov	r1, r4
 800af28:	f00b fe6e 	bl	8016c08 <sniprintf>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	db05      	blt.n	800af3c <generate_topic_name+0x24>
 800af30:	4284      	cmp	r4, r0
 800af32:	bfd4      	ite	le
 800af34:	2000      	movle	r0, #0
 800af36:	2001      	movgt	r0, #1
 800af38:	b002      	add	sp, #8
 800af3a:	bd10      	pop	{r4, pc}
 800af3c:	2000      	movs	r0, #0
 800af3e:	b002      	add	sp, #8
 800af40:	bd10      	pop	{r4, pc}
 800af42:	bf00      	nop
 800af44:	080192f8 	.word	0x080192f8
 800af48:	080192f0 	.word	0x080192f0

0800af4c <is_uxrce_rmw_identifier_valid>:
 800af4c:	b510      	push	{r4, lr}
 800af4e:	4604      	mov	r4, r0
 800af50:	b140      	cbz	r0, 800af64 <is_uxrce_rmw_identifier_valid+0x18>
 800af52:	f006 fb99 	bl	8011688 <rmw_get_implementation_identifier>
 800af56:	4601      	mov	r1, r0
 800af58:	4620      	mov	r0, r4
 800af5a:	f7f5 f959 	bl	8000210 <strcmp>
 800af5e:	fab0 f080 	clz	r0, r0
 800af62:	0940      	lsrs	r0, r0, #5
 800af64:	bd10      	pop	{r4, pc}
 800af66:	bf00      	nop

0800af68 <get_message_typesupport_handle>:
 800af68:	6883      	ldr	r3, [r0, #8]
 800af6a:	4718      	bx	r3

0800af6c <get_message_typesupport_handle_function>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	6800      	ldr	r0, [r0, #0]
 800af72:	f7f5 f94d 	bl	8000210 <strcmp>
 800af76:	2800      	cmp	r0, #0
 800af78:	bf0c      	ite	eq
 800af7a:	4620      	moveq	r0, r4
 800af7c:	2000      	movne	r0, #0
 800af7e:	bd10      	pop	{r4, pc}

0800af80 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800af80:	4b04      	ldr	r3, [pc, #16]	@ (800af94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	b10a      	cbz	r2, 800af8a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800af86:	4803      	ldr	r0, [pc, #12]	@ (800af94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800af88:	4770      	bx	lr
 800af8a:	4a03      	ldr	r2, [pc, #12]	@ (800af98 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800af8c:	4801      	ldr	r0, [pc, #4]	@ (800af94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800af8e:	6812      	ldr	r2, [r2, #0]
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	4770      	bx	lr
 800af94:	20000038 	.word	0x20000038
 800af98:	200000b4 	.word	0x200000b4

0800af9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 800af9c:	4a02      	ldr	r2, [pc, #8]	@ (800afa8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 800af9e:	4b03      	ldr	r3, [pc, #12]	@ (800afac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 800afa0:	6812      	ldr	r2, [r2, #0]
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	200000b4 	.word	0x200000b4
 800afac:	20000038 	.word	0x20000038

0800afb0 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 800afb0:	f007 bc7c 	b.w	80128ac <std_msgs__msg__String__init>

0800afb4 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 800afb4:	f007 bc8c 	b.w	80128d0 <std_msgs__msg__String__fini>

0800afb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	b10a      	cbz	r2, 800afc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 800afbe:	4803      	ldr	r0, [pc, #12]	@ (800afcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800afc0:	4770      	bx	lr
 800afc2:	4a03      	ldr	r2, [pc, #12]	@ (800afd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 800afc4:	4801      	ldr	r0, [pc, #4]	@ (800afcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 800afc6:	6812      	ldr	r2, [r2, #0]
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	4770      	bx	lr
 800afcc:	20000080 	.word	0x20000080
 800afd0:	200000b8 	.word	0x200000b8

0800afd4 <_String__max_serialized_size>:
 800afd4:	2000      	movs	r0, #0
 800afd6:	4770      	bx	lr

0800afd8 <_String__cdr_serialize>:
 800afd8:	b1c0      	cbz	r0, 800b00c <_String__cdr_serialize+0x34>
 800afda:	b570      	push	{r4, r5, r6, lr}
 800afdc:	6806      	ldr	r6, [r0, #0]
 800afde:	460d      	mov	r5, r1
 800afe0:	4604      	mov	r4, r0
 800afe2:	b156      	cbz	r6, 800affa <_String__cdr_serialize+0x22>
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7f5 f973 	bl	80002d0 <strlen>
 800afea:	4631      	mov	r1, r6
 800afec:	6060      	str	r0, [r4, #4]
 800afee:	1c42      	adds	r2, r0, #1
 800aff0:	4628      	mov	r0, r5
 800aff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aff6:	f000 b917 	b.w	800b228 <ucdr_serialize_sequence_char>
 800affa:	4630      	mov	r0, r6
 800affc:	6060      	str	r0, [r4, #4]
 800affe:	4632      	mov	r2, r6
 800b000:	4631      	mov	r1, r6
 800b002:	4628      	mov	r0, r5
 800b004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b008:	f000 b90e 	b.w	800b228 <ucdr_serialize_sequence_char>
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop

0800b010 <get_serialized_size_std_msgs__msg__String>:
 800b010:	b510      	push	{r4, lr}
 800b012:	4604      	mov	r4, r0
 800b014:	b138      	cbz	r0, 800b026 <get_serialized_size_std_msgs__msg__String+0x16>
 800b016:	460b      	mov	r3, r1
 800b018:	4618      	mov	r0, r3
 800b01a:	2104      	movs	r1, #4
 800b01c:	f000 f898 	bl	800b150 <ucdr_alignment>
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	3305      	adds	r3, #5
 800b024:	4418      	add	r0, r3
 800b026:	bd10      	pop	{r4, pc}

0800b028 <_String__cdr_deserialize>:
 800b028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b02a:	460c      	mov	r4, r1
 800b02c:	b083      	sub	sp, #12
 800b02e:	b1a1      	cbz	r1, 800b05a <_String__cdr_deserialize+0x32>
 800b030:	688f      	ldr	r7, [r1, #8]
 800b032:	6809      	ldr	r1, [r1, #0]
 800b034:	ab01      	add	r3, sp, #4
 800b036:	463a      	mov	r2, r7
 800b038:	4606      	mov	r6, r0
 800b03a:	f000 f907 	bl	800b24c <ucdr_deserialize_sequence_char>
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	4605      	mov	r5, r0
 800b042:	b920      	cbnz	r0, 800b04e <_String__cdr_deserialize+0x26>
 800b044:	429f      	cmp	r7, r3
 800b046:	d30c      	bcc.n	800b062 <_String__cdr_deserialize+0x3a>
 800b048:	4628      	mov	r0, r5
 800b04a:	b003      	add	sp, #12
 800b04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b04e:	b103      	cbz	r3, 800b052 <_String__cdr_deserialize+0x2a>
 800b050:	3b01      	subs	r3, #1
 800b052:	4628      	mov	r0, r5
 800b054:	6063      	str	r3, [r4, #4]
 800b056:	b003      	add	sp, #12
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05a:	460d      	mov	r5, r1
 800b05c:	4628      	mov	r0, r5
 800b05e:	b003      	add	sp, #12
 800b060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b062:	2101      	movs	r1, #1
 800b064:	75b0      	strb	r0, [r6, #22]
 800b066:	7571      	strb	r1, [r6, #21]
 800b068:	4630      	mov	r0, r6
 800b06a:	6065      	str	r5, [r4, #4]
 800b06c:	f000 f886 	bl	800b17c <ucdr_align_to>
 800b070:	4630      	mov	r0, r6
 800b072:	9901      	ldr	r1, [sp, #4]
 800b074:	f000 f8b8 	bl	800b1e8 <ucdr_advance_buffer>
 800b078:	4628      	mov	r0, r5
 800b07a:	b003      	add	sp, #12
 800b07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b07e:	bf00      	nop

0800b080 <_String__get_serialized_size>:
 800b080:	b510      	push	{r4, lr}
 800b082:	4604      	mov	r4, r0
 800b084:	b130      	cbz	r0, 800b094 <_String__get_serialized_size+0x14>
 800b086:	2104      	movs	r1, #4
 800b088:	2000      	movs	r0, #0
 800b08a:	f000 f861 	bl	800b150 <ucdr_alignment>
 800b08e:	6863      	ldr	r3, [r4, #4]
 800b090:	3305      	adds	r3, #5
 800b092:	4418      	add	r0, r3
 800b094:	bd10      	pop	{r4, pc}
 800b096:	bf00      	nop

0800b098 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 800b098:	4800      	ldr	r0, [pc, #0]	@ (800b09c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 800b09a:	4770      	bx	lr
 800b09c:	2000008c 	.word	0x2000008c

0800b0a0 <ucdr_check_buffer_available_for>:
 800b0a0:	7d83      	ldrb	r3, [r0, #22]
 800b0a2:	b93b      	cbnz	r3, 800b0b4 <ucdr_check_buffer_available_for+0x14>
 800b0a4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b0a8:	4419      	add	r1, r3
 800b0aa:	4288      	cmp	r0, r1
 800b0ac:	bf34      	ite	cc
 800b0ae:	2000      	movcc	r0, #0
 800b0b0:	2001      	movcs	r0, #1
 800b0b2:	4770      	bx	lr
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	4770      	bx	lr

0800b0b8 <ucdr_check_final_buffer_behavior>:
 800b0b8:	7d83      	ldrb	r3, [r0, #22]
 800b0ba:	b943      	cbnz	r3, 800b0ce <ucdr_check_final_buffer_behavior+0x16>
 800b0bc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800b0c0:	4291      	cmp	r1, r2
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	d205      	bcs.n	800b0d4 <ucdr_check_final_buffer_behavior+0x1c>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	bd10      	pop	{r4, pc}
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	4770      	bx	lr
 800b0d4:	6982      	ldr	r2, [r0, #24]
 800b0d6:	b13a      	cbz	r2, 800b0e8 <ucdr_check_final_buffer_behavior+0x30>
 800b0d8:	69c1      	ldr	r1, [r0, #28]
 800b0da:	4790      	blx	r2
 800b0dc:	f080 0301 	eor.w	r3, r0, #1
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	75a0      	strb	r0, [r4, #22]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	bd10      	pop	{r4, pc}
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	75a0      	strb	r0, [r4, #22]
 800b0ec:	e7fa      	b.n	800b0e4 <ucdr_check_final_buffer_behavior+0x2c>
 800b0ee:	bf00      	nop

0800b0f0 <ucdr_set_on_full_buffer_callback>:
 800b0f0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop

0800b0f8 <ucdr_init_buffer_origin_offset_endian>:
 800b0f8:	b410      	push	{r4}
 800b0fa:	9c01      	ldr	r4, [sp, #4]
 800b0fc:	6001      	str	r1, [r0, #0]
 800b0fe:	440a      	add	r2, r1
 800b100:	6042      	str	r2, [r0, #4]
 800b102:	190a      	adds	r2, r1, r4
 800b104:	441c      	add	r4, r3
 800b106:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800b10a:	6082      	str	r2, [r0, #8]
 800b10c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b110:	7503      	strb	r3, [r0, #20]
 800b112:	2200      	movs	r2, #0
 800b114:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800b118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11c:	7542      	strb	r2, [r0, #21]
 800b11e:	7582      	strb	r2, [r0, #22]
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <ucdr_init_buffer_origin_offset>:
 800b124:	b510      	push	{r4, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	9c04      	ldr	r4, [sp, #16]
 800b12a:	9400      	str	r4, [sp, #0]
 800b12c:	2401      	movs	r4, #1
 800b12e:	9401      	str	r4, [sp, #4]
 800b130:	f7ff ffe2 	bl	800b0f8 <ucdr_init_buffer_origin_offset_endian>
 800b134:	b002      	add	sp, #8
 800b136:	bd10      	pop	{r4, pc}

0800b138 <ucdr_init_buffer_origin>:
 800b138:	b510      	push	{r4, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	2400      	movs	r4, #0
 800b13e:	9400      	str	r4, [sp, #0]
 800b140:	f7ff fff0 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800b144:	b002      	add	sp, #8
 800b146:	bd10      	pop	{r4, pc}

0800b148 <ucdr_init_buffer>:
 800b148:	2300      	movs	r3, #0
 800b14a:	f7ff bff5 	b.w	800b138 <ucdr_init_buffer_origin>
 800b14e:	bf00      	nop

0800b150 <ucdr_alignment>:
 800b150:	fbb0 f3f1 	udiv	r3, r0, r1
 800b154:	fb03 0011 	mls	r0, r3, r1, r0
 800b158:	1a08      	subs	r0, r1, r0
 800b15a:	3901      	subs	r1, #1
 800b15c:	4008      	ands	r0, r1
 800b15e:	4770      	bx	lr

0800b160 <ucdr_buffer_alignment>:
 800b160:	7d43      	ldrb	r3, [r0, #21]
 800b162:	428b      	cmp	r3, r1
 800b164:	d208      	bcs.n	800b178 <ucdr_buffer_alignment+0x18>
 800b166:	6900      	ldr	r0, [r0, #16]
 800b168:	fbb0 f3f1 	udiv	r3, r0, r1
 800b16c:	fb01 0013 	mls	r0, r1, r3, r0
 800b170:	1a08      	subs	r0, r1, r0
 800b172:	3901      	subs	r1, #1
 800b174:	4008      	ands	r0, r1
 800b176:	4770      	bx	lr
 800b178:	2000      	movs	r0, #0
 800b17a:	4770      	bx	lr

0800b17c <ucdr_align_to>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4604      	mov	r4, r0
 800b180:	460d      	mov	r5, r1
 800b182:	f7ff ffed 	bl	800b160 <ucdr_buffer_alignment>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	6921      	ldr	r1, [r4, #16]
 800b18a:	7565      	strb	r5, [r4, #21]
 800b18c:	181a      	adds	r2, r3, r0
 800b18e:	6863      	ldr	r3, [r4, #4]
 800b190:	4293      	cmp	r3, r2
 800b192:	4408      	add	r0, r1
 800b194:	bf28      	it	cs
 800b196:	4613      	movcs	r3, r2
 800b198:	6120      	str	r0, [r4, #16]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	bd38      	pop	{r3, r4, r5, pc}
 800b19e:	bf00      	nop

0800b1a0 <ucdr_buffer_length>:
 800b1a0:	6882      	ldr	r2, [r0, #8]
 800b1a2:	6800      	ldr	r0, [r0, #0]
 800b1a4:	1a10      	subs	r0, r2, r0
 800b1a6:	4770      	bx	lr

0800b1a8 <ucdr_buffer_remaining>:
 800b1a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800b1ac:	1a10      	subs	r0, r2, r0
 800b1ae:	4770      	bx	lr

0800b1b0 <ucdr_check_final_buffer_behavior_array>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	7d83      	ldrb	r3, [r0, #22]
 800b1b4:	b963      	cbnz	r3, 800b1d0 <ucdr_check_final_buffer_behavior_array+0x20>
 800b1b6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	d308      	bcc.n	800b1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800b1c2:	b139      	cbz	r1, 800b1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800b1c4:	6983      	ldr	r3, [r0, #24]
 800b1c6:	b163      	cbz	r3, 800b1e2 <ucdr_check_final_buffer_behavior_array+0x32>
 800b1c8:	69c1      	ldr	r1, [r0, #28]
 800b1ca:	4798      	blx	r3
 800b1cc:	75a0      	strb	r0, [r4, #22]
 800b1ce:	b108      	cbz	r0, 800b1d4 <ucdr_check_final_buffer_behavior_array+0x24>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7ff ffe7 	bl	800b1a8 <ucdr_buffer_remaining>
 800b1da:	42a8      	cmp	r0, r5
 800b1dc:	bf28      	it	cs
 800b1de:	4628      	movcs	r0, r5
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	7583      	strb	r3, [r0, #22]
 800b1e6:	e7f3      	b.n	800b1d0 <ucdr_check_final_buffer_behavior_array+0x20>

0800b1e8 <ucdr_advance_buffer>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	f7ff ff57 	bl	800b0a0 <ucdr_check_buffer_available_for>
 800b1f2:	b178      	cbz	r0, 800b214 <ucdr_advance_buffer+0x2c>
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	68a2      	ldr	r2, [r4, #8]
 800b1f8:	442b      	add	r3, r5
 800b1fa:	6123      	str	r3, [r4, #16]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	442a      	add	r2, r5
 800b200:	7563      	strb	r3, [r4, #21]
 800b202:	60a2      	str	r2, [r4, #8]
 800b204:	bd38      	pop	{r3, r4, r5, pc}
 800b206:	68a2      	ldr	r2, [r4, #8]
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	4402      	add	r2, r0
 800b20c:	4403      	add	r3, r0
 800b20e:	1a2d      	subs	r5, r5, r0
 800b210:	60a2      	str	r2, [r4, #8]
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	4629      	mov	r1, r5
 800b216:	2201      	movs	r2, #1
 800b218:	4620      	mov	r0, r4
 800b21a:	f7ff ffc9 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d1f1      	bne.n	800b206 <ucdr_advance_buffer+0x1e>
 800b222:	2301      	movs	r3, #1
 800b224:	7563      	strb	r3, [r4, #21]
 800b226:	bd38      	pop	{r3, r4, r5, pc}

0800b228 <ucdr_serialize_sequence_char>:
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	4615      	mov	r5, r2
 800b22c:	460e      	mov	r6, r1
 800b22e:	7d01      	ldrb	r1, [r0, #20]
 800b230:	4604      	mov	r4, r0
 800b232:	f007 ff59 	bl	80130e8 <ucdr_serialize_endian_uint32_t>
 800b236:	b90d      	cbnz	r5, 800b23c <ucdr_serialize_sequence_char+0x14>
 800b238:	2001      	movs	r0, #1
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	7d21      	ldrb	r1, [r4, #20]
 800b23e:	462b      	mov	r3, r5
 800b240:	4632      	mov	r2, r6
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b248:	f007 bb46 	b.w	80128d8 <ucdr_serialize_endian_array_char>

0800b24c <ucdr_deserialize_sequence_char>:
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	461d      	mov	r5, r3
 800b252:	4616      	mov	r6, r2
 800b254:	460f      	mov	r7, r1
 800b256:	461a      	mov	r2, r3
 800b258:	7d01      	ldrb	r1, [r0, #20]
 800b25a:	4604      	mov	r4, r0
 800b25c:	f008 f86c 	bl	8013338 <ucdr_deserialize_endian_uint32_t>
 800b260:	682b      	ldr	r3, [r5, #0]
 800b262:	429e      	cmp	r6, r3
 800b264:	bf3c      	itt	cc
 800b266:	2201      	movcc	r2, #1
 800b268:	75a2      	strbcc	r2, [r4, #22]
 800b26a:	b913      	cbnz	r3, 800b272 <ucdr_deserialize_sequence_char+0x26>
 800b26c:	2001      	movs	r0, #1
 800b26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b272:	7d21      	ldrb	r1, [r4, #20]
 800b274:	463a      	mov	r2, r7
 800b276:	4620      	mov	r0, r4
 800b278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b27c:	f007 bb5e 	b.w	801293c <ucdr_deserialize_endian_array_char>

0800b280 <ucdr_serialize_sequence_uint8_t>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	4615      	mov	r5, r2
 800b284:	460e      	mov	r6, r1
 800b286:	7d01      	ldrb	r1, [r0, #20]
 800b288:	4604      	mov	r4, r0
 800b28a:	f007 ff2d 	bl	80130e8 <ucdr_serialize_endian_uint32_t>
 800b28e:	b90d      	cbnz	r5, 800b294 <ucdr_serialize_sequence_uint8_t+0x14>
 800b290:	2001      	movs	r0, #1
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	7d21      	ldrb	r1, [r4, #20]
 800b296:	462b      	mov	r3, r5
 800b298:	4632      	mov	r2, r6
 800b29a:	4620      	mov	r0, r4
 800b29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2a0:	f007 bbb0 	b.w	8012a04 <ucdr_serialize_endian_array_uint8_t>

0800b2a4 <ucdr_deserialize_sequence_uint8_t>:
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	461d      	mov	r5, r3
 800b2aa:	4616      	mov	r6, r2
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	7d01      	ldrb	r1, [r0, #20]
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f008 f840 	bl	8013338 <ucdr_deserialize_endian_uint32_t>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	429e      	cmp	r6, r3
 800b2bc:	bf3c      	itt	cc
 800b2be:	2201      	movcc	r2, #1
 800b2c0:	75a2      	strbcc	r2, [r4, #22]
 800b2c2:	b913      	cbnz	r3, 800b2ca <ucdr_deserialize_sequence_uint8_t+0x26>
 800b2c4:	2001      	movs	r0, #1
 800b2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ca:	7d21      	ldrb	r1, [r4, #20]
 800b2cc:	463a      	mov	r2, r7
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d4:	f007 bbfa 	b.w	8012acc <ucdr_deserialize_endian_array_uint8_t>

0800b2d8 <uxr_buffer_delete_entity>:
 800b2d8:	b510      	push	{r4, lr}
 800b2da:	2300      	movs	r3, #0
 800b2dc:	b08e      	sub	sp, #56	@ 0x38
 800b2de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	2204      	movs	r2, #4
 800b2e8:	ab06      	add	r3, sp, #24
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	9103      	str	r1, [sp, #12]
 800b2ee:	f001 f951 	bl	800c594 <uxr_prepare_stream_to_write_submessage>
 800b2f2:	b918      	cbnz	r0, 800b2fc <uxr_buffer_delete_entity+0x24>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	b00e      	add	sp, #56	@ 0x38
 800b2fa:	bd10      	pop	{r4, pc}
 800b2fc:	9902      	ldr	r1, [sp, #8]
 800b2fe:	aa05      	add	r2, sp, #20
 800b300:	4620      	mov	r0, r4
 800b302:	f001 fa7d 	bl	800c800 <uxr_init_base_object_request>
 800b306:	a905      	add	r1, sp, #20
 800b308:	4604      	mov	r4, r0
 800b30a:	a806      	add	r0, sp, #24
 800b30c:	f002 fcce 	bl	800dcac <uxr_serialize_DELETE_Payload>
 800b310:	4620      	mov	r0, r4
 800b312:	b00e      	add	sp, #56	@ 0x38
 800b314:	bd10      	pop	{r4, pc}
 800b316:	bf00      	nop

0800b318 <uxr_common_create_entity>:
 800b318:	b510      	push	{r4, lr}
 800b31a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b31e:	b08c      	sub	sp, #48	@ 0x30
 800b320:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b324:	f1bc 0f01 	cmp.w	ip, #1
 800b328:	bf0c      	ite	eq
 800b32a:	f003 0201 	andeq.w	r2, r3, #1
 800b32e:	2200      	movne	r2, #0
 800b330:	330e      	adds	r3, #14
 800b332:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800b336:	9101      	str	r1, [sp, #4]
 800b338:	441a      	add	r2, r3
 800b33a:	2301      	movs	r3, #1
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	9903      	ldr	r1, [sp, #12]
 800b340:	ab04      	add	r3, sp, #16
 800b342:	b292      	uxth	r2, r2
 800b344:	4604      	mov	r4, r0
 800b346:	f001 f925 	bl	800c594 <uxr_prepare_stream_to_write_submessage>
 800b34a:	b918      	cbnz	r0, 800b354 <uxr_common_create_entity+0x3c>
 800b34c:	4604      	mov	r4, r0
 800b34e:	4620      	mov	r0, r4
 800b350:	b00c      	add	sp, #48	@ 0x30
 800b352:	bd10      	pop	{r4, pc}
 800b354:	9902      	ldr	r1, [sp, #8]
 800b356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b358:	4620      	mov	r0, r4
 800b35a:	f001 fa51 	bl	800c800 <uxr_init_base_object_request>
 800b35e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b360:	4604      	mov	r4, r0
 800b362:	a804      	add	r0, sp, #16
 800b364:	f002 fbfe 	bl	800db64 <uxr_serialize_CREATE_Payload>
 800b368:	4620      	mov	r0, r4
 800b36a:	b00c      	add	sp, #48	@ 0x30
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop

0800b370 <uxr_buffer_create_participant_bin>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800b376:	ac11      	add	r4, sp, #68	@ 0x44
 800b378:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800b37c:	2303      	movs	r3, #3
 800b37e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b382:	7223      	strb	r3, [r4, #8]
 800b384:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800b386:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800b38a:	2201      	movs	r2, #1
 800b38c:	2100      	movs	r1, #0
 800b38e:	4605      	mov	r5, r0
 800b390:	7122      	strb	r2, [r4, #4]
 800b392:	f88d 1014 	strb.w	r1, [sp, #20]
 800b396:	b1cb      	cbz	r3, 800b3cc <uxr_buffer_create_participant_bin+0x5c>
 800b398:	f88d 201c 	strb.w	r2, [sp, #28]
 800b39c:	9308      	str	r3, [sp, #32]
 800b39e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3a2:	a915      	add	r1, sp, #84	@ 0x54
 800b3a4:	a809      	add	r0, sp, #36	@ 0x24
 800b3a6:	f7ff fecf 	bl	800b148 <ucdr_init_buffer>
 800b3aa:	a905      	add	r1, sp, #20
 800b3ac:	a809      	add	r0, sp, #36	@ 0x24
 800b3ae:	f001 ffbb 	bl	800d328 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b3b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3b4:	9600      	str	r6, [sp, #0]
 800b3b6:	9401      	str	r4, [sp, #4]
 800b3b8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b3bc:	60e3      	str	r3, [r4, #12]
 800b3be:	4628      	mov	r0, r5
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	f7ff ffa9 	bl	800b318 <uxr_common_create_entity>
 800b3c6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	f88d 301c 	strb.w	r3, [sp, #28]
 800b3d0:	e7e5      	b.n	800b39e <uxr_buffer_create_participant_bin+0x2e>
 800b3d2:	bf00      	nop

0800b3d4 <uxr_buffer_create_topic_bin>:
 800b3d4:	b570      	push	{r4, r5, r6, lr}
 800b3d6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800b3da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b3de:	9105      	str	r1, [sp, #20]
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	a997      	add	r1, sp, #604	@ 0x25c
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800b3ec:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800b3f0:	f000 f996 	bl	800b720 <uxr_object_id_to_raw>
 800b3f4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800b3f6:	9306      	str	r3, [sp, #24]
 800b3f8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800b3fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b402:	2301      	movs	r3, #1
 800b404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b408:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800b40c:	a917      	add	r1, sp, #92	@ 0x5c
 800b40e:	2300      	movs	r3, #0
 800b410:	a80b      	add	r0, sp, #44	@ 0x2c
 800b412:	f88d 301c 	strb.w	r3, [sp, #28]
 800b416:	f7ff fe97 	bl	800b148 <ucdr_init_buffer>
 800b41a:	a906      	add	r1, sp, #24
 800b41c:	a80b      	add	r0, sp, #44	@ 0x2c
 800b41e:	f001 ffa5 	bl	800d36c <uxr_serialize_OBJK_Topic_Binary>
 800b422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b424:	9316      	str	r3, [sp, #88]	@ 0x58
 800b426:	ac13      	add	r4, sp, #76	@ 0x4c
 800b428:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b42c:	9600      	str	r6, [sp, #0]
 800b42e:	9401      	str	r4, [sp, #4]
 800b430:	b29b      	uxth	r3, r3
 800b432:	4628      	mov	r0, r5
 800b434:	f7ff ff70 	bl	800b318 <uxr_common_create_entity>
 800b438:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800b43c:	bd70      	pop	{r4, r5, r6, pc}
 800b43e:	bf00      	nop

0800b440 <uxr_buffer_create_publisher_bin>:
 800b440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b442:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800b446:	4605      	mov	r5, r0
 800b448:	9105      	str	r1, [sp, #20]
 800b44a:	4618      	mov	r0, r3
 800b44c:	2603      	movs	r6, #3
 800b44e:	a992      	add	r1, sp, #584	@ 0x248
 800b450:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b454:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800b458:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800b45c:	f000 f960 	bl	800b720 <uxr_object_id_to_raw>
 800b460:	2300      	movs	r3, #0
 800b462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b466:	a912      	add	r1, sp, #72	@ 0x48
 800b468:	a806      	add	r0, sp, #24
 800b46a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b46e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b472:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800b476:	f7ff fe67 	bl	800b148 <ucdr_init_buffer>
 800b47a:	a993      	add	r1, sp, #588	@ 0x24c
 800b47c:	a806      	add	r0, sp, #24
 800b47e:	f002 f829 	bl	800d4d4 <uxr_serialize_OBJK_Publisher_Binary>
 800b482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b484:	9311      	str	r3, [sp, #68]	@ 0x44
 800b486:	ac0e      	add	r4, sp, #56	@ 0x38
 800b488:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b48c:	9700      	str	r7, [sp, #0]
 800b48e:	9401      	str	r4, [sp, #4]
 800b490:	b29b      	uxth	r3, r3
 800b492:	4628      	mov	r0, r5
 800b494:	f7ff ff40 	bl	800b318 <uxr_common_create_entity>
 800b498:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800b49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b49e:	bf00      	nop

0800b4a0 <uxr_buffer_create_subscriber_bin>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800b4a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b4aa:	9105      	str	r1, [sp, #20]
 800b4ac:	4605      	mov	r5, r0
 800b4ae:	a992      	add	r1, sp, #584	@ 0x248
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	2304      	movs	r3, #4
 800b4b4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800b4b8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800b4bc:	f000 f930 	bl	800b720 <uxr_object_id_to_raw>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4c6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800b4ca:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800b4ce:	a912      	add	r1, sp, #72	@ 0x48
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	a806      	add	r0, sp, #24
 800b4d4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800b4d8:	f7ff fe36 	bl	800b148 <ucdr_init_buffer>
 800b4dc:	a993      	add	r1, sp, #588	@ 0x24c
 800b4de:	a806      	add	r0, sp, #24
 800b4e0:	f002 f8a8 	bl	800d634 <uxr_serialize_OBJK_Subscriber_Binary>
 800b4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4e6:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4e8:	ac0e      	add	r4, sp, #56	@ 0x38
 800b4ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b4ee:	9600      	str	r6, [sp, #0]
 800b4f0:	9401      	str	r4, [sp, #4]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff ff0f 	bl	800b318 <uxr_common_create_entity>
 800b4fa:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800b4fe:	bd70      	pop	{r4, r5, r6, pc}

0800b500 <uxr_buffer_create_datawriter_bin>:
 800b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b504:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800b508:	ac1d      	add	r4, sp, #116	@ 0x74
 800b50a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b50e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800b512:	9105      	str	r1, [sp, #20]
 800b514:	4606      	mov	r6, r0
 800b516:	a9a1      	add	r1, sp, #644	@ 0x284
 800b518:	4618      	mov	r0, r3
 800b51a:	2305      	movs	r3, #5
 800b51c:	7123      	strb	r3, [r4, #4]
 800b51e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800b522:	2703      	movs	r7, #3
 800b524:	f000 f8fc 	bl	800b720 <uxr_object_id_to_raw>
 800b528:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800b52a:	7227      	strb	r7, [r4, #8]
 800b52c:	a90e      	add	r1, sp, #56	@ 0x38
 800b52e:	f000 f8f7 	bl	800b720 <uxr_object_id_to_raw>
 800b532:	2300      	movs	r3, #0
 800b534:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b538:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800b53c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b540:	3d00      	subs	r5, #0
 800b542:	bf18      	it	ne
 800b544:	2501      	movne	r5, #1
 800b546:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b54a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b54e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b552:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b556:	2301      	movs	r3, #1
 800b558:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b55c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b560:	bb8a      	cbnz	r2, 800b5c6 <uxr_buffer_create_datawriter_bin+0xc6>
 800b562:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b566:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b56a:	f04f 0c13 	mov.w	ip, #19
 800b56e:	250b      	movs	r5, #11
 800b570:	2221      	movs	r2, #33	@ 0x21
 800b572:	2111      	movs	r1, #17
 800b574:	2009      	movs	r0, #9
 800b576:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800b57a:	b923      	cbnz	r3, 800b586 <uxr_buffer_create_datawriter_bin+0x86>
 800b57c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b580:	4672      	mov	r2, lr
 800b582:	4661      	mov	r1, ip
 800b584:	4628      	mov	r0, r5
 800b586:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d025      	beq.n	800b5da <uxr_buffer_create_datawriter_bin+0xda>
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d029      	beq.n	800b5e6 <uxr_buffer_create_datawriter_bin+0xe6>
 800b592:	b32b      	cbz	r3, 800b5e0 <uxr_buffer_create_datawriter_bin+0xe0>
 800b594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b598:	a921      	add	r1, sp, #132	@ 0x84
 800b59a:	a806      	add	r0, sp, #24
 800b59c:	f7ff fdd4 	bl	800b148 <ucdr_init_buffer>
 800b5a0:	a90e      	add	r1, sp, #56	@ 0x38
 800b5a2:	a806      	add	r0, sp, #24
 800b5a4:	f002 f8f8 	bl	800d798 <uxr_serialize_OBJK_DataWriter_Binary>
 800b5a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5aa:	f8cd 8000 	str.w	r8, [sp]
 800b5ae:	9401      	str	r4, [sp, #4]
 800b5b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b5b4:	60e3      	str	r3, [r4, #12]
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	f7ff fead 	bl	800b318 <uxr_common_create_entity>
 800b5be:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800b5ca:	f04f 0c12 	mov.w	ip, #18
 800b5ce:	250a      	movs	r5, #10
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	2110      	movs	r1, #16
 800b5d4:	2008      	movs	r0, #8
 800b5d6:	2702      	movs	r7, #2
 800b5d8:	e7cd      	b.n	800b576 <uxr_buffer_create_datawriter_bin+0x76>
 800b5da:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800b5de:	e7d9      	b.n	800b594 <uxr_buffer_create_datawriter_bin+0x94>
 800b5e0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800b5e4:	e7d6      	b.n	800b594 <uxr_buffer_create_datawriter_bin+0x94>
 800b5e6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b5ea:	e7d3      	b.n	800b594 <uxr_buffer_create_datawriter_bin+0x94>

0800b5ec <uxr_buffer_create_datareader_bin>:
 800b5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f0:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800b5f4:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b5f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b5fa:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800b5fe:	9105      	str	r1, [sp, #20]
 800b600:	4606      	mov	r6, r0
 800b602:	a9a3      	add	r1, sp, #652	@ 0x28c
 800b604:	4618      	mov	r0, r3
 800b606:	2306      	movs	r3, #6
 800b608:	7123      	strb	r3, [r4, #4]
 800b60a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800b60e:	2703      	movs	r7, #3
 800b610:	f000 f886 	bl	800b720 <uxr_object_id_to_raw>
 800b614:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800b616:	7227      	strb	r7, [r4, #8]
 800b618:	a90e      	add	r1, sp, #56	@ 0x38
 800b61a:	f000 f881 	bl	800b720 <uxr_object_id_to_raw>
 800b61e:	2300      	movs	r3, #0
 800b620:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800b624:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800b628:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800b62c:	3d00      	subs	r5, #0
 800b62e:	bf18      	it	ne
 800b630:	2501      	movne	r5, #1
 800b632:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800b636:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800b63a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800b63e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800b642:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b646:	2301      	movs	r3, #1
 800b648:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800b64c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800b650:	bb8a      	cbnz	r2, 800b6b6 <uxr_buffer_create_datareader_bin+0xca>
 800b652:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b656:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800b65a:	f04f 0c13 	mov.w	ip, #19
 800b65e:	250b      	movs	r5, #11
 800b660:	2221      	movs	r2, #33	@ 0x21
 800b662:	2111      	movs	r1, #17
 800b664:	2009      	movs	r0, #9
 800b666:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800b66a:	b923      	cbnz	r3, 800b676 <uxr_buffer_create_datareader_bin+0x8a>
 800b66c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800b670:	4672      	mov	r2, lr
 800b672:	4661      	mov	r1, ip
 800b674:	4628      	mov	r0, r5
 800b676:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d025      	beq.n	800b6ca <uxr_buffer_create_datareader_bin+0xde>
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d029      	beq.n	800b6d6 <uxr_buffer_create_datareader_bin+0xea>
 800b682:	b32b      	cbz	r3, 800b6d0 <uxr_buffer_create_datareader_bin+0xe4>
 800b684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b688:	a923      	add	r1, sp, #140	@ 0x8c
 800b68a:	a806      	add	r0, sp, #24
 800b68c:	f7ff fd5c 	bl	800b148 <ucdr_init_buffer>
 800b690:	a90e      	add	r1, sp, #56	@ 0x38
 800b692:	a806      	add	r0, sp, #24
 800b694:	f002 f844 	bl	800d720 <uxr_serialize_OBJK_DataReader_Binary>
 800b698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b69a:	f8cd 8000 	str.w	r8, [sp]
 800b69e:	9401      	str	r4, [sp, #4]
 800b6a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b6a4:	60e3      	str	r3, [r4, #12]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f7ff fe35 	bl	800b318 <uxr_common_create_entity>
 800b6ae:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800b6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800b6ba:	f04f 0c12 	mov.w	ip, #18
 800b6be:	250a      	movs	r5, #10
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	2110      	movs	r1, #16
 800b6c4:	2008      	movs	r0, #8
 800b6c6:	2702      	movs	r7, #2
 800b6c8:	e7cd      	b.n	800b666 <uxr_buffer_create_datareader_bin+0x7a>
 800b6ca:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800b6ce:	e7d9      	b.n	800b684 <uxr_buffer_create_datareader_bin+0x98>
 800b6d0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800b6d4:	e7d6      	b.n	800b684 <uxr_buffer_create_datareader_bin+0x98>
 800b6d6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800b6da:	e7d3      	b.n	800b684 <uxr_buffer_create_datareader_bin+0x98>

0800b6dc <uxr_object_id>:
 800b6dc:	b082      	sub	sp, #8
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f88d 1006 	strb.w	r1, [sp, #6]
 800b6e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b6e8:	f360 030f 	bfi	r3, r0, #0, #16
 800b6ec:	f362 431f 	bfi	r3, r2, #16, #16
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	b002      	add	sp, #8
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop

0800b6f8 <uxr_object_id_from_raw>:
 800b6f8:	7843      	ldrb	r3, [r0, #1]
 800b6fa:	7801      	ldrb	r1, [r0, #0]
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	f003 020f 	and.w	r2, r3, #15
 800b702:	f88d 2006 	strb.w	r2, [sp, #6]
 800b706:	091b      	lsrs	r3, r3, #4
 800b708:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b70c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b710:	2000      	movs	r0, #0
 800b712:	f363 000f 	bfi	r0, r3, #0, #16
 800b716:	f362 401f 	bfi	r0, r2, #16, #16
 800b71a:	b002      	add	sp, #8
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop

0800b720 <uxr_object_id_to_raw>:
 800b720:	4602      	mov	r2, r0
 800b722:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b726:	b082      	sub	sp, #8
 800b728:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b72c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b730:	f881 c000 	strb.w	ip, [r1]
 800b734:	7048      	strb	r0, [r1, #1]
 800b736:	b002      	add	sp, #8
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop

0800b73c <on_get_fragmentation_info>:
 800b73c:	b500      	push	{lr}
 800b73e:	b08b      	sub	sp, #44	@ 0x2c
 800b740:	4601      	mov	r1, r0
 800b742:	2204      	movs	r2, #4
 800b744:	a802      	add	r0, sp, #8
 800b746:	f7ff fcff 	bl	800b148 <ucdr_init_buffer>
 800b74a:	f10d 0305 	add.w	r3, sp, #5
 800b74e:	f10d 0206 	add.w	r2, sp, #6
 800b752:	a901      	add	r1, sp, #4
 800b754:	a802      	add	r0, sp, #8
 800b756:	f001 f9d5 	bl	800cb04 <uxr_read_submessage_header>
 800b75a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b75e:	2b0d      	cmp	r3, #13
 800b760:	d003      	beq.n	800b76a <on_get_fragmentation_info+0x2e>
 800b762:	2000      	movs	r0, #0
 800b764:	b00b      	add	sp, #44	@ 0x2c
 800b766:	f85d fb04 	ldr.w	pc, [sp], #4
 800b76a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b76e:	f013 0f02 	tst.w	r3, #2
 800b772:	bf14      	ite	ne
 800b774:	2002      	movne	r0, #2
 800b776:	2001      	moveq	r0, #1
 800b778:	b00b      	add	sp, #44	@ 0x2c
 800b77a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b77e:	bf00      	nop

0800b780 <read_submessage_get_info>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	2500      	movs	r5, #0
 800b784:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800b788:	4604      	mov	r4, r0
 800b78a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800b78e:	460e      	mov	r6, r1
 800b790:	a810      	add	r0, sp, #64	@ 0x40
 800b792:	4629      	mov	r1, r5
 800b794:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b798:	f00b fbc4 	bl	8016f24 <memset>
 800b79c:	a903      	add	r1, sp, #12
 800b79e:	4630      	mov	r0, r6
 800b7a0:	f002 fa70 	bl	800dc84 <uxr_deserialize_GET_INFO_Payload>
 800b7a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b7a8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f001 f81f 	bl	800c7f0 <uxr_session_header_offset>
 800b7b2:	462b      	mov	r3, r5
 800b7b4:	9000      	str	r0, [sp, #0]
 800b7b6:	220c      	movs	r2, #12
 800b7b8:	a905      	add	r1, sp, #20
 800b7ba:	a808      	add	r0, sp, #32
 800b7bc:	f7ff fcb2 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800b7c0:	a910      	add	r1, sp, #64	@ 0x40
 800b7c2:	a808      	add	r0, sp, #32
 800b7c4:	f002 fad0 	bl	800dd68 <uxr_serialize_INFO_Payload>
 800b7c8:	9b08      	ldr	r3, [sp, #32]
 800b7ca:	462a      	mov	r2, r5
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 ffb8 	bl	800c744 <uxr_stamp_session_header>
 800b7d4:	a808      	add	r0, sp, #32
 800b7d6:	f7ff fce3 	bl	800b1a0 <ucdr_buffer_length>
 800b7da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b7dc:	4602      	mov	r2, r0
 800b7de:	a905      	add	r1, sp, #20
 800b7e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b7e4:	47a0      	blx	r4
 800b7e6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}

0800b7ec <write_submessage_acknack.isra.0>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	b092      	sub	sp, #72	@ 0x48
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	460e      	mov	r6, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	f000 fffb 	bl	800c7f0 <uxr_session_header_offset>
 800b7fa:	a905      	add	r1, sp, #20
 800b7fc:	9000      	str	r0, [sp, #0]
 800b7fe:	2300      	movs	r3, #0
 800b800:	a80a      	add	r0, sp, #40	@ 0x28
 800b802:	2211      	movs	r2, #17
 800b804:	f7ff fc8e 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800b808:	2218      	movs	r2, #24
 800b80a:	fb02 5404 	mla	r4, r2, r4, r5
 800b80e:	2300      	movs	r3, #0
 800b810:	2205      	movs	r2, #5
 800b812:	3450      	adds	r4, #80	@ 0x50
 800b814:	210a      	movs	r1, #10
 800b816:	a80a      	add	r0, sp, #40	@ 0x28
 800b818:	f001 f95a 	bl	800cad0 <uxr_buffer_submessage_header>
 800b81c:	a903      	add	r1, sp, #12
 800b81e:	4620      	mov	r0, r4
 800b820:	f008 fb88 	bl	8013f34 <uxr_compute_acknack>
 800b824:	ba40      	rev16	r0, r0
 800b826:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b82a:	a903      	add	r1, sp, #12
 800b82c:	a80a      	add	r0, sp, #40	@ 0x28
 800b82e:	f88d 6010 	strb.w	r6, [sp, #16]
 800b832:	f002 fb09 	bl	800de48 <uxr_serialize_ACKNACK_Payload>
 800b836:	2200      	movs	r2, #0
 800b838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b83a:	4611      	mov	r1, r2
 800b83c:	4628      	mov	r0, r5
 800b83e:	f000 ff81 	bl	800c744 <uxr_stamp_session_header>
 800b842:	a80a      	add	r0, sp, #40	@ 0x28
 800b844:	f7ff fcac 	bl	800b1a0 <ucdr_buffer_length>
 800b848:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b84a:	4602      	mov	r2, r0
 800b84c:	a905      	add	r1, sp, #20
 800b84e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b852:	47a0      	blx	r4
 800b854:	b012      	add	sp, #72	@ 0x48
 800b856:	bd70      	pop	{r4, r5, r6, pc}

0800b858 <uxr_init_session>:
 800b858:	b510      	push	{r4, lr}
 800b85a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800b890 <uxr_init_session+0x38>
 800b85e:	2300      	movs	r3, #0
 800b860:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800b864:	4604      	mov	r4, r0
 800b866:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800b86a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800b86e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800b872:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800b876:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800b87a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800b87e:	2181      	movs	r1, #129	@ 0x81
 800b880:	f000 fecc 	bl	800c61c <uxr_init_session_info>
 800b884:	f104 0008 	add.w	r0, r4, #8
 800b888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b88c:	f001 b83c 	b.w	800c908 <uxr_init_stream_storage>
	...

0800b898 <uxr_set_status_callback>:
 800b898:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop

0800b8a0 <uxr_set_topic_callback>:
 800b8a0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop

0800b8a8 <uxr_set_request_callback>:
 800b8a8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop

0800b8b0 <uxr_set_reply_callback>:
 800b8b0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop

0800b8b8 <uxr_create_output_best_effort_stream>:
 800b8b8:	b510      	push	{r4, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	e9cd 2100 	strd	r2, r1, [sp]
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	f000 ff95 	bl	800c7f0 <uxr_session_header_offset>
 800b8c6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f104 0008 	add.w	r0, r4, #8
 800b8d0:	b004      	add	sp, #16
 800b8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d6:	f001 b861 	b.w	800c99c <uxr_add_output_best_effort_buffer>
 800b8da:	bf00      	nop

0800b8dc <uxr_create_output_reliable_stream>:
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	f000 ff82 	bl	800c7f0 <uxr_session_header_offset>
 800b8ec:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b8f0:	9000      	str	r0, [sp, #0]
 800b8f2:	9905      	ldr	r1, [sp, #20]
 800b8f4:	f104 0008 	add.w	r0, r4, #8
 800b8f8:	f001 f864 	bl	800c9c4 <uxr_add_output_reliable_buffer>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	b2c3      	uxtb	r3, r0
 800b900:	f363 0207 	bfi	r2, r3, #0, #8
 800b904:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b908:	f363 220f 	bfi	r2, r3, #8, #8
 800b90c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b910:	f363 4217 	bfi	r2, r3, #16, #8
 800b914:	0e03      	lsrs	r3, r0, #24
 800b916:	f363 621f 	bfi	r2, r3, #24, #8
 800b91a:	4610      	mov	r0, r2
 800b91c:	b008      	add	sp, #32
 800b91e:	bd10      	pop	{r4, pc}

0800b920 <uxr_create_input_best_effort_stream>:
 800b920:	b082      	sub	sp, #8
 800b922:	3008      	adds	r0, #8
 800b924:	b002      	add	sp, #8
 800b926:	f001 b867 	b.w	800c9f8 <uxr_add_input_best_effort_buffer>
 800b92a:	bf00      	nop

0800b92c <uxr_create_input_reliable_stream>:
 800b92c:	b510      	push	{r4, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	4c0b      	ldr	r4, [pc, #44]	@ (800b960 <uxr_create_input_reliable_stream+0x34>)
 800b932:	9400      	str	r4, [sp, #0]
 800b934:	3008      	adds	r0, #8
 800b936:	f001 f875 	bl	800ca24 <uxr_add_input_reliable_buffer>
 800b93a:	2200      	movs	r2, #0
 800b93c:	b2c3      	uxtb	r3, r0
 800b93e:	f363 0207 	bfi	r2, r3, #0, #8
 800b942:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b946:	f363 220f 	bfi	r2, r3, #8, #8
 800b94a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b94e:	f363 4217 	bfi	r2, r3, #16, #8
 800b952:	0e03      	lsrs	r3, r0, #24
 800b954:	f363 621f 	bfi	r2, r3, #24, #8
 800b958:	4610      	mov	r0, r2
 800b95a:	b004      	add	sp, #16
 800b95c:	bd10      	pop	{r4, pc}
 800b95e:	bf00      	nop
 800b960:	0800b73d 	.word	0x0800b73d

0800b964 <uxr_epoch_nanos>:
 800b964:	b510      	push	{r4, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	f001 f912 	bl	800cb90 <uxr_nanos>
 800b96c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800b970:	1ac0      	subs	r0, r0, r3
 800b972:	eb61 0102 	sbc.w	r1, r1, r2
 800b976:	bd10      	pop	{r4, pc}

0800b978 <uxr_flash_output_streams>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	7e03      	ldrb	r3, [r0, #24]
 800b97e:	b084      	sub	sp, #16
 800b980:	4604      	mov	r4, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d035      	beq.n	800b9f2 <uxr_flash_output_streams+0x7a>
 800b986:	f04f 0900 	mov.w	r9, #0
 800b98a:	4648      	mov	r0, r9
 800b98c:	f10d 0802 	add.w	r8, sp, #2
 800b990:	af03      	add	r7, sp, #12
 800b992:	ae02      	add	r6, sp, #8
 800b994:	e006      	b.n	800b9a4 <uxr_flash_output_streams+0x2c>
 800b996:	7e23      	ldrb	r3, [r4, #24]
 800b998:	f109 0901 	add.w	r9, r9, #1
 800b99c:	fa5f f089 	uxtb.w	r0, r9
 800b9a0:	4283      	cmp	r3, r0
 800b9a2:	d926      	bls.n	800b9f2 <uxr_flash_output_streams+0x7a>
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b9ac:	f000 ff58 	bl	800c860 <uxr_stream_id>
 800b9b0:	3508      	adds	r5, #8
 800b9b2:	4684      	mov	ip, r0
 800b9b4:	4643      	mov	r3, r8
 800b9b6:	463a      	mov	r2, r7
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	f8cd c004 	str.w	ip, [sp, #4]
 800b9c0:	f008 fb3e 	bl	8014040 <uxr_prepare_best_effort_buffer_to_send>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d0e6      	beq.n	800b996 <uxr_flash_output_streams+0x1e>
 800b9c8:	9b02      	ldr	r3, [sp, #8]
 800b9ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b9ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 feb6 	bl	800c744 <uxr_stamp_session_header>
 800b9d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800b9da:	9a03      	ldr	r2, [sp, #12]
 800b9dc:	685d      	ldr	r5, [r3, #4]
 800b9de:	6818      	ldr	r0, [r3, #0]
 800b9e0:	9902      	ldr	r1, [sp, #8]
 800b9e2:	47a8      	blx	r5
 800b9e4:	f109 0901 	add.w	r9, r9, #1
 800b9e8:	7e23      	ldrb	r3, [r4, #24]
 800b9ea:	fa5f f089 	uxtb.w	r0, r9
 800b9ee:	4283      	cmp	r3, r0
 800b9f0:	d8d8      	bhi.n	800b9a4 <uxr_flash_output_streams+0x2c>
 800b9f2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800b9f6:	b38b      	cbz	r3, 800ba5c <uxr_flash_output_streams+0xe4>
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	f10d 0802 	add.w	r8, sp, #2
 800ba00:	af03      	add	r7, sp, #12
 800ba02:	ae02      	add	r6, sp, #8
 800ba04:	4648      	mov	r0, r9
 800ba06:	2201      	movs	r2, #1
 800ba08:	2102      	movs	r1, #2
 800ba0a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ba0e:	f000 ff27 	bl	800c860 <uxr_stream_id>
 800ba12:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ba16:	3520      	adds	r5, #32
 800ba18:	9001      	str	r0, [sp, #4]
 800ba1a:	e00d      	b.n	800ba38 <uxr_flash_output_streams+0xc0>
 800ba1c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ba20:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ba24:	9b02      	ldr	r3, [sp, #8]
 800ba26:	f000 fe8d 	bl	800c744 <uxr_stamp_session_header>
 800ba2a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ba2c:	9a03      	ldr	r2, [sp, #12]
 800ba2e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ba32:	9902      	ldr	r1, [sp, #8]
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	47d0      	blx	sl
 800ba38:	4643      	mov	r3, r8
 800ba3a:	463a      	mov	r2, r7
 800ba3c:	4631      	mov	r1, r6
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f008 fd1c 	bl	801447c <uxr_prepare_next_reliable_buffer_to_send>
 800ba44:	4603      	mov	r3, r0
 800ba46:	4620      	mov	r0, r4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1e7      	bne.n	800ba1c <uxr_flash_output_streams+0xa4>
 800ba4c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ba50:	f109 0901 	add.w	r9, r9, #1
 800ba54:	fa5f f089 	uxtb.w	r0, r9
 800ba58:	4283      	cmp	r3, r0
 800ba5a:	d8d4      	bhi.n	800ba06 <uxr_flash_output_streams+0x8e>
 800ba5c:	b004      	add	sp, #16
 800ba5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba62:	bf00      	nop

0800ba64 <read_submessage_info>:
 800ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba68:	460d      	mov	r5, r1
 800ba6a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ba6e:	4669      	mov	r1, sp
 800ba70:	4607      	mov	r7, r0
 800ba72:	4628      	mov	r0, r5
 800ba74:	f002 f814 	bl	800daa0 <uxr_deserialize_BaseObjectReply>
 800ba78:	a902      	add	r1, sp, #8
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ba82:	f007 f86b 	bl	8012b5c <ucdr_deserialize_bool>
 800ba86:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ba8a:	4004      	ands	r4, r0
 800ba8c:	b2e4      	uxtb	r4, r4
 800ba8e:	b95b      	cbnz	r3, 800baa8 <read_submessage_info+0x44>
 800ba90:	a987      	add	r1, sp, #540	@ 0x21c
 800ba92:	4628      	mov	r0, r5
 800ba94:	f007 f862 	bl	8012b5c <ucdr_deserialize_bool>
 800ba98:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	b94b      	cbnz	r3, 800bab4 <read_submessage_info+0x50>
 800baa0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa8:	a903      	add	r1, sp, #12
 800baaa:	4628      	mov	r0, r5
 800baac:	f001 fea0 	bl	800d7f0 <uxr_deserialize_ObjectVariant>
 800bab0:	4004      	ands	r4, r0
 800bab2:	e7ed      	b.n	800ba90 <read_submessage_info+0x2c>
 800bab4:	a988      	add	r1, sp, #544	@ 0x220
 800bab6:	4628      	mov	r0, r5
 800bab8:	f007 f87e 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800babc:	4234      	tst	r4, r6
 800babe:	d0ef      	beq.n	800baa0 <read_submessage_info+0x3c>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d0ed      	beq.n	800baa0 <read_submessage_info+0x3c>
 800bac4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800bac8:	2b0d      	cmp	r3, #13
 800baca:	d1e9      	bne.n	800baa0 <read_submessage_info+0x3c>
 800bacc:	a98a      	add	r1, sp, #552	@ 0x228
 800bace:	4628      	mov	r0, r5
 800bad0:	f007 fe18 	bl	8013704 <ucdr_deserialize_int16_t>
 800bad4:	b140      	cbz	r0, 800bae8 <read_submessage_info+0x84>
 800bad6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800bada:	2b00      	cmp	r3, #0
 800badc:	dd07      	ble.n	800baee <read_submessage_info+0x8a>
 800bade:	f1b8 0f00 	cmp.w	r8, #0
 800bae2:	bf14      	ite	ne
 800bae4:	2001      	movne	r0, #1
 800bae6:	2002      	moveq	r0, #2
 800bae8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800baec:	e7d8      	b.n	800baa0 <read_submessage_info+0x3c>
 800baee:	2000      	movs	r0, #0
 800baf0:	e7fa      	b.n	800bae8 <read_submessage_info+0x84>
 800baf2:	bf00      	nop

0800baf4 <read_submessage_list>:
 800baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	b097      	sub	sp, #92	@ 0x5c
 800bafa:	4ec1      	ldr	r6, [pc, #772]	@ (800be00 <read_submessage_list+0x30c>)
 800bafc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bafe:	4604      	mov	r4, r0
 800bb00:	460d      	mov	r5, r1
 800bb02:	f04f 0801 	mov.w	r8, #1
 800bb06:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800bb0a:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb0c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800bb10:	4628      	mov	r0, r5
 800bb12:	f000 fff7 	bl	800cb04 <uxr_read_submessage_header>
 800bb16:	2800      	cmp	r0, #0
 800bb18:	f000 813e 	beq.w	800bd98 <read_submessage_list+0x2a4>
 800bb1c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800bb20:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800bb24:	3b02      	subs	r3, #2
 800bb26:	2b0d      	cmp	r3, #13
 800bb28:	d8ed      	bhi.n	800bb06 <read_submessage_list+0x12>
 800bb2a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb30 <read_submessage_list+0x3c>)
 800bb2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb30:	0800bd8f 	.word	0x0800bd8f
 800bb34:	0800bb07 	.word	0x0800bb07
 800bb38:	0800bd7f 	.word	0x0800bd7f
 800bb3c:	0800bd1d 	.word	0x0800bd1d
 800bb40:	0800bd13 	.word	0x0800bd13
 800bb44:	0800bb07 	.word	0x0800bb07
 800bb48:	0800bb07 	.word	0x0800bb07
 800bb4c:	0800bc73 	.word	0x0800bc73
 800bb50:	0800bc03 	.word	0x0800bc03
 800bb54:	0800bbc3 	.word	0x0800bbc3
 800bb58:	0800bb07 	.word	0x0800bb07
 800bb5c:	0800bb07 	.word	0x0800bb07
 800bb60:	0800bb07 	.word	0x0800bb07
 800bb64:	0800bb69 	.word	0x0800bb69
 800bb68:	a910      	add	r1, sp, #64	@ 0x40
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f002 f9bc 	bl	800dee8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800bb70:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800bb74:	f1b9 0f00 	cmp.w	r9, #0
 800bb78:	f000 8116 	beq.w	800bda8 <read_submessage_list+0x2b4>
 800bb7c:	f001 f808 	bl	800cb90 <uxr_nanos>
 800bb80:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800bb82:	4602      	mov	r2, r0
 800bb84:	460b      	mov	r3, r1
 800bb86:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800bb88:	2100      	movs	r1, #0
 800bb8a:	468c      	mov	ip, r1
 800bb8c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800bb90:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800bb94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bb96:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800bb98:	468c      	mov	ip, r1
 800bb9a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800bb9e:	46e2      	mov	sl, ip
 800bba0:	46bc      	mov	ip, r7
 800bba2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800bba6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800bbaa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800bbae:	e9cd 7100 	strd	r7, r1, [sp]
 800bbb2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800bbb6:	9106      	str	r1, [sp, #24]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	47c8      	blx	r9
 800bbbc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800bbc0:	e7a1      	b.n	800bb06 <read_submessage_list+0x12>
 800bbc2:	a910      	add	r1, sp, #64	@ 0x40
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f002 f97d 	bl	800dec4 <uxr_deserialize_HEARTBEAT_Payload>
 800bbca:	2100      	movs	r1, #0
 800bbcc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800bbd0:	f000 fe70 	bl	800c8b4 <uxr_stream_id_from_raw>
 800bbd4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800bbd8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f104 0008 	add.w	r0, r4, #8
 800bbe0:	f000 ff56 	bl	800ca90 <uxr_get_input_reliable_stream>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d08e      	beq.n	800bb06 <read_submessage_list+0x12>
 800bbe8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800bbec:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800bbf0:	f008 f994 	bl	8013f1c <uxr_process_heartbeat>
 800bbf4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800bbf8:	463a      	mov	r2, r7
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff fdf6 	bl	800b7ec <write_submessage_acknack.isra.0>
 800bc00:	e781      	b.n	800bb06 <read_submessage_list+0x12>
 800bc02:	a910      	add	r1, sp, #64	@ 0x40
 800bc04:	4628      	mov	r0, r5
 800bc06:	f002 f935 	bl	800de74 <uxr_deserialize_ACKNACK_Payload>
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800bc10:	f000 fe50 	bl	800c8b4 <uxr_stream_id_from_raw>
 800bc14:	900d      	str	r0, [sp, #52]	@ 0x34
 800bc16:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800bc1a:	f104 0008 	add.w	r0, r4, #8
 800bc1e:	f000 ff23 	bl	800ca68 <uxr_get_output_reliable_stream>
 800bc22:	4607      	mov	r7, r0
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f43f af6e 	beq.w	800bb06 <read_submessage_list+0x12>
 800bc2a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800bc2e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800bc32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800bc36:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800bc3a:	b289      	uxth	r1, r1
 800bc3c:	f008 fcc8 	bl	80145d0 <uxr_process_acknack>
 800bc40:	4638      	mov	r0, r7
 800bc42:	f008 fc85 	bl	8014550 <uxr_begin_output_nack_buffer_it>
 800bc46:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800bc4a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800bc4e:	e006      	b.n	800bc5e <read_submessage_list+0x16a>
 800bc50:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bc52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc54:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bc58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc5a:	6818      	ldr	r0, [r3, #0]
 800bc5c:	47c8      	blx	r9
 800bc5e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800bc62:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bc64:	4651      	mov	r1, sl
 800bc66:	4638      	mov	r0, r7
 800bc68:	f008 fc74 	bl	8014554 <uxr_next_reliable_nack_buffer_to_send>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d1ef      	bne.n	800bc50 <read_submessage_list+0x15c>
 800bc70:	e749      	b.n	800bb06 <read_submessage_list+0x12>
 800bc72:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800bc76:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800bc7a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800bc7e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800bc82:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800bc86:	4651      	mov	r1, sl
 800bc88:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800bc8c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800bc90:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800bc94:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800bc9e:	f001 fe49 	bl	800d934 <uxr_deserialize_BaseObjectRequest>
 800bca2:	4650      	mov	r0, sl
 800bca4:	a90f      	add	r1, sp, #60	@ 0x3c
 800bca6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800bcaa:	f000 fdc7 	bl	800c83c <uxr_parse_base_object_request>
 800bcae:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800bcb2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bcb4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800bcb8:	9110      	str	r1, [sp, #64]	@ 0x40
 800bcba:	3f04      	subs	r7, #4
 800bcbc:	f009 090e 	and.w	r9, r9, #14
 800bcc0:	b2bf      	uxth	r7, r7
 800bcc2:	f1bb 0f00 	cmp.w	fp, #0
 800bcc6:	d006      	beq.n	800bcd6 <read_submessage_list+0x1e2>
 800bcc8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	4652      	mov	r2, sl
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	47d8      	blx	fp
 800bcd6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800bcd8:	b16a      	cbz	r2, 800bcf6 <read_submessage_list+0x202>
 800bcda:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800bcdc:	2100      	movs	r1, #0
 800bcde:	3802      	subs	r0, #2
 800bce0:	e002      	b.n	800bce8 <read_submessage_list+0x1f4>
 800bce2:	3101      	adds	r1, #1
 800bce4:	4291      	cmp	r1, r2
 800bce6:	d006      	beq.n	800bcf6 <read_submessage_list+0x202>
 800bce8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bcec:	4553      	cmp	r3, sl
 800bcee:	d1f8      	bne.n	800bce2 <read_submessage_list+0x1ee>
 800bcf0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	545a      	strb	r2, [r3, r1]
 800bcf6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800bcfa:	9102      	str	r1, [sp, #8]
 800bcfc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bcfe:	9101      	str	r1, [sp, #4]
 800bd00:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800bd02:	9100      	str	r1, [sp, #0]
 800bd04:	464b      	mov	r3, r9
 800bd06:	463a      	mov	r2, r7
 800bd08:	4629      	mov	r1, r5
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f008 fd1e 	bl	801474c <read_submessage_format>
 800bd10:	e6f9      	b.n	800bb06 <read_submessage_list+0x12>
 800bd12:	4629      	mov	r1, r5
 800bd14:	4620      	mov	r0, r4
 800bd16:	f7ff fea5 	bl	800ba64 <read_submessage_info>
 800bd1a:	e6f4      	b.n	800bb06 <read_submessage_list+0x12>
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d03e      	beq.n	800bd9e <read_submessage_list+0x2aa>
 800bd20:	a910      	add	r1, sp, #64	@ 0x40
 800bd22:	4628      	mov	r0, r5
 800bd24:	f002 f802 	bl	800dd2c <uxr_deserialize_STATUS_Payload>
 800bd28:	a90e      	add	r1, sp, #56	@ 0x38
 800bd2a:	aa0d      	add	r2, sp, #52	@ 0x34
 800bd2c:	a810      	add	r0, sp, #64	@ 0x40
 800bd2e:	f000 fd85 	bl	800c83c <uxr_parse_base_object_request>
 800bd32:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800bd36:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bd38:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800bd3c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800bd40:	910f      	str	r1, [sp, #60]	@ 0x3c
 800bd42:	f1ba 0f00 	cmp.w	sl, #0
 800bd46:	d006      	beq.n	800bd56 <read_submessage_list+0x262>
 800bd48:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	463a      	mov	r2, r7
 800bd50:	464b      	mov	r3, r9
 800bd52:	4620      	mov	r0, r4
 800bd54:	47d0      	blx	sl
 800bd56:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	f43f aed4 	beq.w	800bb06 <read_submessage_list+0x12>
 800bd5e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800bd60:	2100      	movs	r1, #0
 800bd62:	3802      	subs	r0, #2
 800bd64:	e003      	b.n	800bd6e <read_submessage_list+0x27a>
 800bd66:	3101      	adds	r1, #1
 800bd68:	4291      	cmp	r1, r2
 800bd6a:	f43f aecc 	beq.w	800bb06 <read_submessage_list+0x12>
 800bd6e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bd72:	42bb      	cmp	r3, r7
 800bd74:	d1f7      	bne.n	800bd66 <read_submessage_list+0x272>
 800bd76:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bd78:	f803 9001 	strb.w	r9, [r3, r1]
 800bd7c:	e6c3      	b.n	800bb06 <read_submessage_list+0x12>
 800bd7e:	2a00      	cmp	r2, #0
 800bd80:	f47f aec1 	bne.w	800bb06 <read_submessage_list+0x12>
 800bd84:	4629      	mov	r1, r5
 800bd86:	4620      	mov	r0, r4
 800bd88:	f000 fc9e 	bl	800c6c8 <uxr_read_create_session_status>
 800bd8c:	e6bb      	b.n	800bb06 <read_submessage_list+0x12>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff fcf5 	bl	800b780 <read_submessage_get_info>
 800bd96:	e6b6      	b.n	800bb06 <read_submessage_list+0x12>
 800bd98:	b017      	add	sp, #92	@ 0x5c
 800bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fc9d 	bl	800c6e0 <uxr_read_delete_session_status>
 800bda6:	e6ae      	b.n	800bb06 <read_submessage_list+0x12>
 800bda8:	f000 fef2 	bl	800cb90 <uxr_nanos>
 800bdac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bdb0:	464f      	mov	r7, r9
 800bdb2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800bdb6:	1812      	adds	r2, r2, r0
 800bdb8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bdba:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800bdbc:	eb47 0101 	adc.w	r1, r7, r1
 800bdc0:	464f      	mov	r7, r9
 800bdc2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	4684      	mov	ip, r0
 800bdca:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800bdce:	fbc7 0906 	smlal	r0, r9, r7, r6
 800bdd2:	eb1c 0c00 	adds.w	ip, ip, r0
 800bdd6:	464f      	mov	r7, r9
 800bdd8:	eb43 0307 	adc.w	r3, r3, r7
 800bddc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800bde0:	eb61 0303 	sbc.w	r3, r1, r3
 800bde4:	0fda      	lsrs	r2, r3, #31
 800bde6:	eb12 020c 	adds.w	r2, r2, ip
 800bdea:	f143 0300 	adc.w	r3, r3, #0
 800bdee:	0852      	lsrs	r2, r2, #1
 800bdf0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800bdf4:	105b      	asrs	r3, r3, #1
 800bdf6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800bdfa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800bdfe:	e6dd      	b.n	800bbbc <read_submessage_list+0xc8>
 800be00:	3b9aca00 	.word	0x3b9aca00

0800be04 <listen_message_reliably>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	1e0b      	subs	r3, r1, #0
 800be0a:	b09d      	sub	sp, #116	@ 0x74
 800be0c:	bfb8      	it	lt
 800be0e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800be12:	4680      	mov	r8, r0
 800be14:	9305      	str	r3, [sp, #20]
 800be16:	f000 fea1 	bl	800cb5c <uxr_millis>
 800be1a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800be1e:	4681      	mov	r9, r0
 800be20:	2a00      	cmp	r2, #0
 800be22:	f000 80a1 	beq.w	800bf68 <listen_message_reliably+0x164>
 800be26:	2600      	movs	r6, #0
 800be28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800be2c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800be30:	9303      	str	r3, [sp, #12]
 800be32:	4630      	mov	r0, r6
 800be34:	460f      	mov	r7, r1
 800be36:	e00f      	b.n	800be58 <listen_message_reliably+0x54>
 800be38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800be3c:	9903      	ldr	r1, [sp, #12]
 800be3e:	455a      	cmp	r2, fp
 800be40:	f106 0601 	add.w	r6, r6, #1
 800be44:	eb73 0101 	sbcs.w	r1, r3, r1
 800be48:	b2f0      	uxtb	r0, r6
 800be4a:	da01      	bge.n	800be50 <listen_message_reliably+0x4c>
 800be4c:	4693      	mov	fp, r2
 800be4e:	9303      	str	r3, [sp, #12]
 800be50:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800be54:	4283      	cmp	r3, r0
 800be56:	d960      	bls.n	800bf1a <listen_message_reliably+0x116>
 800be58:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800be5c:	2102      	movs	r1, #2
 800be5e:	2201      	movs	r2, #1
 800be60:	f000 fcfe 	bl	800c860 <uxr_stream_id>
 800be64:	00e4      	lsls	r4, r4, #3
 800be66:	f104 0520 	add.w	r5, r4, #32
 800be6a:	4445      	add	r5, r8
 800be6c:	4601      	mov	r1, r0
 800be6e:	463b      	mov	r3, r7
 800be70:	464a      	mov	r2, r9
 800be72:	4628      	mov	r0, r5
 800be74:	9109      	str	r1, [sp, #36]	@ 0x24
 800be76:	f008 fb41 	bl	80144fc <uxr_update_output_stream_heartbeat_timestamp>
 800be7a:	eb08 0304 	add.w	r3, r8, r4
 800be7e:	2800      	cmp	r0, #0
 800be80:	d0da      	beq.n	800be38 <listen_message_reliably+0x34>
 800be82:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800be86:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800be8a:	9304      	str	r3, [sp, #16]
 800be8c:	4640      	mov	r0, r8
 800be8e:	f000 fcaf 	bl	800c7f0 <uxr_session_header_offset>
 800be92:	3501      	adds	r5, #1
 800be94:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800be98:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800be9c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800bea0:	2300      	movs	r3, #0
 800bea2:	2211      	movs	r2, #17
 800bea4:	9000      	str	r0, [sp, #0]
 800bea6:	a90c      	add	r1, sp, #48	@ 0x30
 800bea8:	4650      	mov	r0, sl
 800beaa:	f7ff f93b 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800beae:	2300      	movs	r3, #0
 800beb0:	2205      	movs	r2, #5
 800beb2:	210b      	movs	r1, #11
 800beb4:	4650      	mov	r0, sl
 800beb6:	f000 fe0b 	bl	800cad0 <uxr_buffer_submessage_header>
 800beba:	8968      	ldrh	r0, [r5, #10]
 800bebc:	2101      	movs	r1, #1
 800bebe:	f008 fd0f 	bl	80148e0 <uxr_seq_num_add>
 800bec2:	892b      	ldrh	r3, [r5, #8]
 800bec4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800bec8:	4602      	mov	r2, r0
 800beca:	9b04      	ldr	r3, [sp, #16]
 800becc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800bed0:	a90a      	add	r1, sp, #40	@ 0x28
 800bed2:	4650      	mov	r0, sl
 800bed4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800bed8:	f001 ffe0 	bl	800de9c <uxr_serialize_HEARTBEAT_Payload>
 800bedc:	2200      	movs	r2, #0
 800bede:	4611      	mov	r1, r2
 800bee0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bee2:	4640      	mov	r0, r8
 800bee4:	f000 fc2e 	bl	800c744 <uxr_stamp_session_header>
 800bee8:	4650      	mov	r0, sl
 800beea:	f7ff f959 	bl	800b1a0 <ucdr_buffer_length>
 800beee:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800bef2:	4602      	mov	r2, r0
 800bef4:	a90c      	add	r1, sp, #48	@ 0x30
 800bef6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800befa:	4444      	add	r4, r8
 800befc:	47a8      	blx	r5
 800befe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800bf02:	9903      	ldr	r1, [sp, #12]
 800bf04:	455a      	cmp	r2, fp
 800bf06:	f106 0601 	add.w	r6, r6, #1
 800bf0a:	eb73 0101 	sbcs.w	r1, r3, r1
 800bf0e:	b2f0      	uxtb	r0, r6
 800bf10:	db9c      	blt.n	800be4c <listen_message_reliably+0x48>
 800bf12:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800bf16:	4283      	cmp	r3, r0
 800bf18:	d89e      	bhi.n	800be58 <listen_message_reliably+0x54>
 800bf1a:	9a03      	ldr	r2, [sp, #12]
 800bf1c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bf20:	429a      	cmp	r2, r3
 800bf22:	bf08      	it	eq
 800bf24:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800bf28:	d01e      	beq.n	800bf68 <listen_message_reliably+0x164>
 800bf2a:	ebab 0309 	sub.w	r3, fp, r9
 800bf2e:	9905      	ldr	r1, [sp, #20]
 800bf30:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	bf08      	it	eq
 800bf38:	2301      	moveq	r3, #1
 800bf3a:	4299      	cmp	r1, r3
 800bf3c:	bfa8      	it	ge
 800bf3e:	4619      	movge	r1, r3
 800bf40:	6894      	ldr	r4, [r2, #8]
 800bf42:	6810      	ldr	r0, [r2, #0]
 800bf44:	4689      	mov	r9, r1
 800bf46:	460b      	mov	r3, r1
 800bf48:	aa08      	add	r2, sp, #32
 800bf4a:	a907      	add	r1, sp, #28
 800bf4c:	47a0      	blx	r4
 800bf4e:	b968      	cbnz	r0, 800bf6c <listen_message_reliably+0x168>
 800bf50:	9b05      	ldr	r3, [sp, #20]
 800bf52:	eba3 0309 	sub.w	r3, r3, r9
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f73f af5c 	bgt.w	800be16 <listen_message_reliably+0x12>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4620      	mov	r0, r4
 800bf62:	b01d      	add	sp, #116	@ 0x74
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	9b05      	ldr	r3, [sp, #20]
 800bf6a:	e7e0      	b.n	800bf2e <listen_message_reliably+0x12a>
 800bf6c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800bf70:	4604      	mov	r4, r0
 800bf72:	a80c      	add	r0, sp, #48	@ 0x30
 800bf74:	f7ff f8e8 	bl	800b148 <ucdr_init_buffer>
 800bf78:	2500      	movs	r5, #0
 800bf7a:	f10d 031a 	add.w	r3, sp, #26
 800bf7e:	aa06      	add	r2, sp, #24
 800bf80:	a90c      	add	r1, sp, #48	@ 0x30
 800bf82:	4640      	mov	r0, r8
 800bf84:	f88d 5018 	strb.w	r5, [sp, #24]
 800bf88:	f000 fbf0 	bl	800c76c <uxr_read_session_header>
 800bf8c:	b918      	cbnz	r0, 800bf96 <listen_message_reliably+0x192>
 800bf8e:	4620      	mov	r0, r4
 800bf90:	b01d      	add	sp, #116	@ 0x74
 800bf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf96:	4629      	mov	r1, r5
 800bf98:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800bf9c:	f000 fc8a 	bl	800c8b4 <uxr_stream_id_from_raw>
 800bfa0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800bfa4:	2d01      	cmp	r5, #1
 800bfa6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800bfaa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800bfae:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800bfb2:	d04b      	beq.n	800c04c <listen_message_reliably+0x248>
 800bfb4:	2d02      	cmp	r5, #2
 800bfb6:	d00f      	beq.n	800bfd8 <listen_message_reliably+0x1d4>
 800bfb8:	2d00      	cmp	r5, #0
 800bfba:	d1e8      	bne.n	800bf8e <listen_message_reliably+0x18a>
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f000 fc78 	bl	800c8b4 <uxr_stream_id_from_raw>
 800bfc4:	a90c      	add	r1, sp, #48	@ 0x30
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	4640      	mov	r0, r8
 800bfca:	920a      	str	r2, [sp, #40]	@ 0x28
 800bfcc:	f7ff fd92 	bl	800baf4 <read_submessage_list>
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	b01d      	add	sp, #116	@ 0x74
 800bfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfd8:	4631      	mov	r1, r6
 800bfda:	f108 0008 	add.w	r0, r8, #8
 800bfde:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800bfe2:	f000 fd55 	bl	800ca90 <uxr_get_input_reliable_stream>
 800bfe6:	4607      	mov	r7, r0
 800bfe8:	b338      	cbz	r0, 800c03a <listen_message_reliably+0x236>
 800bfea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfec:	9203      	str	r2, [sp, #12]
 800bfee:	a80c      	add	r0, sp, #48	@ 0x30
 800bff0:	f7ff f8da 	bl	800b1a8 <ucdr_buffer_remaining>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f10d 0019 	add.w	r0, sp, #25
 800bffa:	9000      	str	r0, [sp, #0]
 800bffc:	9a03      	ldr	r2, [sp, #12]
 800bffe:	4651      	mov	r1, sl
 800c000:	4638      	mov	r0, r7
 800c002:	f007 fe91 	bl	8013d28 <uxr_receive_reliable_message>
 800c006:	b1c0      	cbz	r0, 800c03a <listen_message_reliably+0x236>
 800c008:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c00c:	b393      	cbz	r3, 800c074 <listen_message_reliably+0x270>
 800c00e:	ad14      	add	r5, sp, #80	@ 0x50
 800c010:	f04f 0a02 	mov.w	sl, #2
 800c014:	e00a      	b.n	800c02c <listen_message_reliably+0x228>
 800c016:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800c01a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800c01e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800c022:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c024:	4629      	mov	r1, r5
 800c026:	4640      	mov	r0, r8
 800c028:	f7ff fd64 	bl	800baf4 <read_submessage_list>
 800c02c:	2204      	movs	r2, #4
 800c02e:	4629      	mov	r1, r5
 800c030:	4638      	mov	r0, r7
 800c032:	f007 fef9 	bl	8013e28 <uxr_next_input_reliable_buffer_available>
 800c036:	2800      	cmp	r0, #0
 800c038:	d1ed      	bne.n	800c016 <listen_message_reliably+0x212>
 800c03a:	4640      	mov	r0, r8
 800c03c:	4632      	mov	r2, r6
 800c03e:	4649      	mov	r1, r9
 800c040:	f7ff fbd4 	bl	800b7ec <write_submessage_acknack.isra.0>
 800c044:	4620      	mov	r0, r4
 800c046:	b01d      	add	sp, #116	@ 0x74
 800c048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c04c:	4631      	mov	r1, r6
 800c04e:	f108 0008 	add.w	r0, r8, #8
 800c052:	f000 fd13 	bl	800ca7c <uxr_get_input_best_effort_stream>
 800c056:	2800      	cmp	r0, #0
 800c058:	d099      	beq.n	800bf8e <listen_message_reliably+0x18a>
 800c05a:	4651      	mov	r1, sl
 800c05c:	f007 fdd0 	bl	8013c00 <uxr_receive_best_effort_message>
 800c060:	2800      	cmp	r0, #0
 800c062:	d094      	beq.n	800bf8e <listen_message_reliably+0x18a>
 800c064:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c068:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c06a:	a90c      	add	r1, sp, #48	@ 0x30
 800c06c:	4640      	mov	r0, r8
 800c06e:	f7ff fd41 	bl	800baf4 <read_submessage_list>
 800c072:	e78c      	b.n	800bf8e <listen_message_reliably+0x18a>
 800c074:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c07a:	a90c      	add	r1, sp, #48	@ 0x30
 800c07c:	4640      	mov	r0, r8
 800c07e:	f7ff fd39 	bl	800baf4 <read_submessage_list>
 800c082:	e7c4      	b.n	800c00e <listen_message_reliably+0x20a>

0800c084 <uxr_run_session_timeout>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4604      	mov	r4, r0
 800c088:	460d      	mov	r5, r1
 800c08a:	f000 fd67 	bl	800cb5c <uxr_millis>
 800c08e:	4606      	mov	r6, r0
 800c090:	4620      	mov	r0, r4
 800c092:	f7ff fc71 	bl	800b978 <uxr_flash_output_streams>
 800c096:	4629      	mov	r1, r5
 800c098:	4620      	mov	r0, r4
 800c09a:	f7ff feb3 	bl	800be04 <listen_message_reliably>
 800c09e:	f000 fd5d 	bl	800cb5c <uxr_millis>
 800c0a2:	1b83      	subs	r3, r0, r6
 800c0a4:	1ae9      	subs	r1, r5, r3
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	dcf6      	bgt.n	800c098 <uxr_run_session_timeout+0x14>
 800c0aa:	f104 0008 	add.w	r0, r4, #8
 800c0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c0b2:	f000 bcf7 	b.w	800caa4 <uxr_output_streams_confirmed>
 800c0b6:	bf00      	nop

0800c0b8 <uxr_run_session_until_data>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	460d      	mov	r5, r1
 800c0be:	f000 fd4d 	bl	800cb5c <uxr_millis>
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f7ff fc57 	bl	800b978 <uxr_flash_output_streams>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	e005      	b.n	800c0e0 <uxr_run_session_until_data+0x28>
 800c0d4:	f000 fd42 	bl	800cb5c <uxr_millis>
 800c0d8:	1b83      	subs	r3, r0, r6
 800c0da:	1ae9      	subs	r1, r5, r3
 800c0dc:	2900      	cmp	r1, #0
 800c0de:	dd07      	ble.n	800c0f0 <uxr_run_session_until_data+0x38>
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f7ff fe8f 	bl	800be04 <listen_message_reliably>
 800c0e6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0f2      	beq.n	800c0d4 <uxr_run_session_until_data+0x1c>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
 800c0f6:	bf00      	nop

0800c0f8 <uxr_run_session_until_confirm_delivery>:
 800c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	460d      	mov	r5, r1
 800c100:	f000 fd2c 	bl	800cb5c <uxr_millis>
 800c104:	4607      	mov	r7, r0
 800c106:	4630      	mov	r0, r6
 800c108:	f7ff fc36 	bl	800b978 <uxr_flash_output_streams>
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	f106 0808 	add.w	r8, r6, #8
 800c112:	bfa8      	it	ge
 800c114:	462c      	movge	r4, r5
 800c116:	da07      	bge.n	800c128 <uxr_run_session_until_confirm_delivery+0x30>
 800c118:	e00e      	b.n	800c138 <uxr_run_session_until_confirm_delivery+0x40>
 800c11a:	f7ff fe73 	bl	800be04 <listen_message_reliably>
 800c11e:	f000 fd1d 	bl	800cb5c <uxr_millis>
 800c122:	1bc3      	subs	r3, r0, r7
 800c124:	1aec      	subs	r4, r5, r3
 800c126:	d407      	bmi.n	800c138 <uxr_run_session_until_confirm_delivery+0x40>
 800c128:	4640      	mov	r0, r8
 800c12a:	f000 fcbb 	bl	800caa4 <uxr_output_streams_confirmed>
 800c12e:	4603      	mov	r3, r0
 800c130:	4621      	mov	r1, r4
 800c132:	4630      	mov	r0, r6
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0f0      	beq.n	800c11a <uxr_run_session_until_confirm_delivery+0x22>
 800c138:	4640      	mov	r0, r8
 800c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	f000 bcb1 	b.w	800caa4 <uxr_output_streams_confirmed>
 800c142:	bf00      	nop

0800c144 <uxr_run_session_until_all_status>:
 800c144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c148:	9c08      	ldr	r4, [sp, #32]
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	4691      	mov	r9, r2
 800c150:	461d      	mov	r5, r3
 800c152:	f7ff fc11 	bl	800b978 <uxr_flash_output_streams>
 800c156:	b124      	cbz	r4, 800c162 <uxr_run_session_until_all_status+0x1e>
 800c158:	4622      	mov	r2, r4
 800c15a:	21ff      	movs	r1, #255	@ 0xff
 800c15c:	4628      	mov	r0, r5
 800c15e:	f00a fee1 	bl	8016f24 <memset>
 800c162:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800c166:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c168:	f000 fcf8 	bl	800cb5c <uxr_millis>
 800c16c:	3d01      	subs	r5, #1
 800c16e:	f1a9 0902 	sub.w	r9, r9, #2
 800c172:	4680      	mov	r8, r0
 800c174:	4639      	mov	r1, r7
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff fe44 	bl	800be04 <listen_message_reliably>
 800c17c:	f000 fcee 	bl	800cb5c <uxr_millis>
 800c180:	eba0 0008 	sub.w	r0, r0, r8
 800c184:	1a39      	subs	r1, r7, r0
 800c186:	b344      	cbz	r4, 800c1da <uxr_run_session_until_all_status+0x96>
 800c188:	4628      	mov	r0, r5
 800c18a:	46ac      	mov	ip, r5
 800c18c:	2301      	movs	r3, #1
 800c18e:	e002      	b.n	800c196 <uxr_run_session_until_all_status+0x52>
 800c190:	42a3      	cmp	r3, r4
 800c192:	d20d      	bcs.n	800c1b0 <uxr_run_session_until_all_status+0x6c>
 800c194:	3301      	adds	r3, #1
 800c196:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c19a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800c19e:	d1f7      	bne.n	800c190 <uxr_run_session_until_all_status+0x4c>
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c1a6:	d213      	bcs.n	800c1d0 <uxr_run_session_until_all_status+0x8c>
 800c1a8:	2a00      	cmp	r2, #0
 800c1aa:	d0f3      	beq.n	800c194 <uxr_run_session_until_all_status+0x50>
 800c1ac:	2900      	cmp	r1, #0
 800c1ae:	dce2      	bgt.n	800c176 <uxr_run_session_until_all_status+0x32>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800c1b4:	442c      	add	r4, r5
 800c1b6:	e001      	b.n	800c1bc <uxr_run_session_until_all_status+0x78>
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d812      	bhi.n	800c1e2 <uxr_run_session_until_all_status+0x9e>
 800c1bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c1c0:	4284      	cmp	r4, r0
 800c1c2:	d1f9      	bne.n	800c1b8 <uxr_run_session_until_all_status+0x74>
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	bf8c      	ite	hi
 800c1c8:	2000      	movhi	r0, #0
 800c1ca:	2001      	movls	r0, #1
 800c1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d0:	2900      	cmp	r1, #0
 800c1d2:	dded      	ble.n	800c1b0 <uxr_run_session_until_all_status+0x6c>
 800c1d4:	2a00      	cmp	r2, #0
 800c1d6:	d1ce      	bne.n	800c176 <uxr_run_session_until_all_status+0x32>
 800c1d8:	e7ea      	b.n	800c1b0 <uxr_run_session_until_all_status+0x6c>
 800c1da:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c1dc:	2001      	movs	r0, #1
 800c1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c1e8 <wait_session_status>:
 800c1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	b09d      	sub	sp, #116	@ 0x74
 800c1f0:	20ff      	movs	r0, #255	@ 0xff
 800c1f2:	7160      	strb	r0, [r4, #5]
 800c1f4:	9303      	str	r3, [sp, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f000 80b6 	beq.w	800c368 <wait_session_status+0x180>
 800c1fc:	468a      	mov	sl, r1
 800c1fe:	4691      	mov	r9, r2
 800c200:	f04f 0b00 	mov.w	fp, #0
 800c204:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c206:	464a      	mov	r2, r9
 800c208:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c20c:	4651      	mov	r1, sl
 800c20e:	47a8      	blx	r5
 800c210:	f000 fca4 	bl	800cb5c <uxr_millis>
 800c214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c218:	4605      	mov	r5, r0
 800c21a:	e009      	b.n	800c230 <wait_session_status+0x48>
 800c21c:	f000 fc9e 	bl	800cb5c <uxr_millis>
 800c220:	1b40      	subs	r0, r0, r5
 800c222:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c226:	2b00      	cmp	r3, #0
 800c228:	dd40      	ble.n	800c2ac <wait_session_status+0xc4>
 800c22a:	7960      	ldrb	r0, [r4, #5]
 800c22c:	28ff      	cmp	r0, #255	@ 0xff
 800c22e:	d145      	bne.n	800c2bc <wait_session_status+0xd4>
 800c230:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c232:	a908      	add	r1, sp, #32
 800c234:	6896      	ldr	r6, [r2, #8]
 800c236:	6810      	ldr	r0, [r2, #0]
 800c238:	aa09      	add	r2, sp, #36	@ 0x24
 800c23a:	47b0      	blx	r6
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0ed      	beq.n	800c21c <wait_session_status+0x34>
 800c240:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c244:	a80c      	add	r0, sp, #48	@ 0x30
 800c246:	f7fe ff7f 	bl	800b148 <ucdr_init_buffer>
 800c24a:	2600      	movs	r6, #0
 800c24c:	f10d 031e 	add.w	r3, sp, #30
 800c250:	aa07      	add	r2, sp, #28
 800c252:	a90c      	add	r1, sp, #48	@ 0x30
 800c254:	4620      	mov	r0, r4
 800c256:	f88d 601c 	strb.w	r6, [sp, #28]
 800c25a:	f000 fa87 	bl	800c76c <uxr_read_session_header>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d0dc      	beq.n	800c21c <wait_session_status+0x34>
 800c262:	4631      	mov	r1, r6
 800c264:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c268:	f000 fb24 	bl	800c8b4 <uxr_stream_id_from_raw>
 800c26c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c270:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c274:	9302      	str	r3, [sp, #8]
 800c276:	2f01      	cmp	r7, #1
 800c278:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800c27c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c280:	d05c      	beq.n	800c33c <wait_session_status+0x154>
 800c282:	2f02      	cmp	r7, #2
 800c284:	d020      	beq.n	800c2c8 <wait_session_status+0xe0>
 800c286:	2f00      	cmp	r7, #0
 800c288:	d1c8      	bne.n	800c21c <wait_session_status+0x34>
 800c28a:	4639      	mov	r1, r7
 800c28c:	4638      	mov	r0, r7
 800c28e:	f000 fb11 	bl	800c8b4 <uxr_stream_id_from_raw>
 800c292:	a90c      	add	r1, sp, #48	@ 0x30
 800c294:	4602      	mov	r2, r0
 800c296:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff fc2b 	bl	800baf4 <read_submessage_list>
 800c29e:	f000 fc5d 	bl	800cb5c <uxr_millis>
 800c2a2:	1b40      	subs	r0, r0, r5
 800c2a4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dcbe      	bgt.n	800c22a <wait_session_status+0x42>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	7960      	ldrb	r0, [r4, #5]
 800c2b0:	f10b 0b01 	add.w	fp, fp, #1
 800c2b4:	455b      	cmp	r3, fp
 800c2b6:	d001      	beq.n	800c2bc <wait_session_status+0xd4>
 800c2b8:	28ff      	cmp	r0, #255	@ 0xff
 800c2ba:	d0a3      	beq.n	800c204 <wait_session_status+0x1c>
 800c2bc:	38ff      	subs	r0, #255	@ 0xff
 800c2be:	bf18      	it	ne
 800c2c0:	2001      	movne	r0, #1
 800c2c2:	b01d      	add	sp, #116	@ 0x74
 800c2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	f104 0008 	add.w	r0, r4, #8
 800c2d4:	f000 fbdc 	bl	800ca90 <uxr_get_input_reliable_stream>
 800c2d8:	4680      	mov	r8, r0
 800c2da:	b348      	cbz	r0, 800c330 <wait_session_status+0x148>
 800c2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2de:	9205      	str	r2, [sp, #20]
 800c2e0:	a80c      	add	r0, sp, #48	@ 0x30
 800c2e2:	f7fe ff61 	bl	800b1a8 <ucdr_buffer_remaining>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	f10d 001d 	add.w	r0, sp, #29
 800c2ec:	9000      	str	r0, [sp, #0]
 800c2ee:	9a05      	ldr	r2, [sp, #20]
 800c2f0:	9902      	ldr	r1, [sp, #8]
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f007 fd18 	bl	8013d28 <uxr_receive_reliable_message>
 800c2f8:	b1d0      	cbz	r0, 800c330 <wait_session_status+0x148>
 800c2fa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d03a      	beq.n	800c378 <wait_session_status+0x190>
 800c302:	9f04      	ldr	r7, [sp, #16]
 800c304:	e00a      	b.n	800c31c <wait_session_status+0x134>
 800c306:	f04f 0302 	mov.w	r3, #2
 800c30a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800c30e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800c312:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800c316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c318:	f7ff fbec 	bl	800baf4 <read_submessage_list>
 800c31c:	a914      	add	r1, sp, #80	@ 0x50
 800c31e:	2204      	movs	r2, #4
 800c320:	4640      	mov	r0, r8
 800c322:	f007 fd81 	bl	8013e28 <uxr_next_input_reliable_buffer_available>
 800c326:	4603      	mov	r3, r0
 800c328:	a914      	add	r1, sp, #80	@ 0x50
 800c32a:	4620      	mov	r0, r4
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1ea      	bne.n	800c306 <wait_session_status+0x11e>
 800c330:	9904      	ldr	r1, [sp, #16]
 800c332:	4632      	mov	r2, r6
 800c334:	4620      	mov	r0, r4
 800c336:	f7ff fa59 	bl	800b7ec <write_submessage_acknack.isra.0>
 800c33a:	e76f      	b.n	800c21c <wait_session_status+0x34>
 800c33c:	4631      	mov	r1, r6
 800c33e:	f104 0008 	add.w	r0, r4, #8
 800c342:	f000 fb9b 	bl	800ca7c <uxr_get_input_best_effort_stream>
 800c346:	2800      	cmp	r0, #0
 800c348:	f43f af68 	beq.w	800c21c <wait_session_status+0x34>
 800c34c:	9902      	ldr	r1, [sp, #8]
 800c34e:	f007 fc57 	bl	8013c00 <uxr_receive_best_effort_message>
 800c352:	2800      	cmp	r0, #0
 800c354:	f43f af62 	beq.w	800c21c <wait_session_status+0x34>
 800c358:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c35c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c35e:	a90c      	add	r1, sp, #48	@ 0x30
 800c360:	4620      	mov	r0, r4
 800c362:	f7ff fbc7 	bl	800baf4 <read_submessage_list>
 800c366:	e759      	b.n	800c21c <wait_session_status+0x34>
 800c368:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c36a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c36e:	47a0      	blx	r4
 800c370:	2001      	movs	r0, #1
 800c372:	b01d      	add	sp, #116	@ 0x74
 800c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c378:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800c37c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c37e:	a90c      	add	r1, sp, #48	@ 0x30
 800c380:	4620      	mov	r0, r4
 800c382:	f7ff fbb7 	bl	800baf4 <read_submessage_list>
 800c386:	e7bc      	b.n	800c302 <wait_session_status+0x11a>

0800c388 <uxr_delete_session_retries>:
 800c388:	b530      	push	{r4, r5, lr}
 800c38a:	b08f      	sub	sp, #60	@ 0x3c
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	f000 fa2e 	bl	800c7f0 <uxr_session_header_offset>
 800c394:	2300      	movs	r3, #0
 800c396:	2210      	movs	r2, #16
 800c398:	9000      	str	r0, [sp, #0]
 800c39a:	a902      	add	r1, sp, #8
 800c39c:	a806      	add	r0, sp, #24
 800c39e:	f7fe fec1 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800c3a2:	a906      	add	r1, sp, #24
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f000 f973 	bl	800c690 <uxr_buffer_delete_session>
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	9b06      	ldr	r3, [sp, #24]
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f000 f9c7 	bl	800c744 <uxr_stamp_session_header>
 800c3b6:	a806      	add	r0, sp, #24
 800c3b8:	f7fe fef2 	bl	800b1a0 <ucdr_buffer_length>
 800c3bc:	462b      	mov	r3, r5
 800c3be:	4602      	mov	r2, r0
 800c3c0:	a902      	add	r1, sp, #8
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f7ff ff10 	bl	800c1e8 <wait_session_status>
 800c3c8:	b118      	cbz	r0, 800c3d2 <uxr_delete_session_retries+0x4a>
 800c3ca:	7960      	ldrb	r0, [r4, #5]
 800c3cc:	fab0 f080 	clz	r0, r0
 800c3d0:	0940      	lsrs	r0, r0, #5
 800c3d2:	b00f      	add	sp, #60	@ 0x3c
 800c3d4:	bd30      	pop	{r4, r5, pc}
 800c3d6:	bf00      	nop

0800c3d8 <uxr_create_session>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	f100 0b08 	add.w	fp, r0, #8
 800c3e0:	b0ab      	sub	sp, #172	@ 0xac
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4658      	mov	r0, fp
 800c3e6:	f000 fa99 	bl	800c91c <uxr_reset_stream_storage>
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f000 fa00 	bl	800c7f0 <uxr_session_header_offset>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	9000      	str	r0, [sp, #0]
 800c3f4:	221c      	movs	r2, #28
 800c3f6:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3f8:	a812      	add	r0, sp, #72	@ 0x48
 800c3fa:	f7fe fe93 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800c3fe:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c400:	8a1a      	ldrh	r2, [r3, #16]
 800c402:	3a04      	subs	r2, #4
 800c404:	b292      	uxth	r2, r2
 800c406:	a912      	add	r1, sp, #72	@ 0x48
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 f917 	bl	800c63c <uxr_buffer_create_session>
 800c40e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c410:	4620      	mov	r0, r4
 800c412:	f000 f983 	bl	800c71c <uxr_stamp_create_session_header>
 800c416:	a812      	add	r0, sp, #72	@ 0x48
 800c418:	f7fe fec2 	bl	800b1a0 <ucdr_buffer_length>
 800c41c:	23ff      	movs	r3, #255	@ 0xff
 800c41e:	7163      	strb	r3, [r4, #5]
 800c420:	230a      	movs	r3, #10
 800c422:	46da      	mov	sl, fp
 800c424:	9303      	str	r3, [sp, #12]
 800c426:	4683      	mov	fp, r0
 800c428:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c42a:	465a      	mov	r2, fp
 800c42c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c430:	a90b      	add	r1, sp, #44	@ 0x2c
 800c432:	47a8      	blx	r5
 800c434:	f000 fb92 	bl	800cb5c <uxr_millis>
 800c438:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c43c:	4605      	mov	r5, r0
 800c43e:	e009      	b.n	800c454 <uxr_create_session+0x7c>
 800c440:	f000 fb8c 	bl	800cb5c <uxr_millis>
 800c444:	1b40      	subs	r0, r0, r5
 800c446:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	7962      	ldrb	r2, [r4, #5]
 800c44e:	dd38      	ble.n	800c4c2 <uxr_create_session+0xea>
 800c450:	2aff      	cmp	r2, #255	@ 0xff
 800c452:	d13c      	bne.n	800c4ce <uxr_create_session+0xf6>
 800c454:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c456:	a907      	add	r1, sp, #28
 800c458:	6896      	ldr	r6, [r2, #8]
 800c45a:	6810      	ldr	r0, [r2, #0]
 800c45c:	aa08      	add	r2, sp, #32
 800c45e:	47b0      	blx	r6
 800c460:	2800      	cmp	r0, #0
 800c462:	d0ed      	beq.n	800c440 <uxr_create_session+0x68>
 800c464:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c468:	a81a      	add	r0, sp, #104	@ 0x68
 800c46a:	f7fe fe6d 	bl	800b148 <ucdr_init_buffer>
 800c46e:	2600      	movs	r6, #0
 800c470:	f10d 031a 	add.w	r3, sp, #26
 800c474:	aa06      	add	r2, sp, #24
 800c476:	a91a      	add	r1, sp, #104	@ 0x68
 800c478:	4620      	mov	r0, r4
 800c47a:	f88d 6018 	strb.w	r6, [sp, #24]
 800c47e:	f000 f975 	bl	800c76c <uxr_read_session_header>
 800c482:	2800      	cmp	r0, #0
 800c484:	d0dc      	beq.n	800c440 <uxr_create_session+0x68>
 800c486:	4631      	mov	r1, r6
 800c488:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c48c:	f000 fa12 	bl	800c8b4 <uxr_stream_id_from_raw>
 800c490:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c494:	2e01      	cmp	r6, #1
 800c496:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c49a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c49e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c4a2:	d053      	beq.n	800c54c <uxr_create_session+0x174>
 800c4a4:	2e02      	cmp	r6, #2
 800c4a6:	d018      	beq.n	800c4da <uxr_create_session+0x102>
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	d1c9      	bne.n	800c440 <uxr_create_session+0x68>
 800c4ac:	4631      	mov	r1, r6
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	f000 fa00 	bl	800c8b4 <uxr_stream_id_from_raw>
 800c4b4:	a91a      	add	r1, sp, #104	@ 0x68
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f7ff fb1a 	bl	800baf4 <read_submessage_list>
 800c4c0:	e7be      	b.n	800c440 <uxr_create_session+0x68>
 800c4c2:	9b03      	ldr	r3, [sp, #12]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	d001      	beq.n	800c4ce <uxr_create_session+0xf6>
 800c4ca:	2aff      	cmp	r2, #255	@ 0xff
 800c4cc:	d0ac      	beq.n	800c428 <uxr_create_session+0x50>
 800c4ce:	2a00      	cmp	r2, #0
 800c4d0:	d051      	beq.n	800c576 <uxr_create_session+0x19e>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	b02b      	add	sp, #172	@ 0xac
 800c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4da:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c4de:	9304      	str	r3, [sp, #16]
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	4650      	mov	r0, sl
 800c4e4:	f000 fad4 	bl	800ca90 <uxr_get_input_reliable_stream>
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	b348      	cbz	r0, 800c540 <uxr_create_session+0x168>
 800c4ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4ee:	9205      	str	r2, [sp, #20]
 800c4f0:	a81a      	add	r0, sp, #104	@ 0x68
 800c4f2:	f7fe fe59 	bl	800b1a8 <ucdr_buffer_remaining>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	f10d 0019 	add.w	r0, sp, #25
 800c4fc:	9000      	str	r0, [sp, #0]
 800c4fe:	9a05      	ldr	r2, [sp, #20]
 800c500:	4649      	mov	r1, r9
 800c502:	4640      	mov	r0, r8
 800c504:	f007 fc10 	bl	8013d28 <uxr_receive_reliable_message>
 800c508:	b1d0      	cbz	r0, 800c540 <uxr_create_session+0x168>
 800c50a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d038      	beq.n	800c584 <uxr_create_session+0x1ac>
 800c512:	9e04      	ldr	r6, [sp, #16]
 800c514:	e00a      	b.n	800c52c <uxr_create_session+0x154>
 800c516:	f04f 0302 	mov.w	r3, #2
 800c51a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800c51e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800c522:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c528:	f7ff fae4 	bl	800baf4 <read_submessage_list>
 800c52c:	a922      	add	r1, sp, #136	@ 0x88
 800c52e:	2204      	movs	r2, #4
 800c530:	4640      	mov	r0, r8
 800c532:	f007 fc79 	bl	8013e28 <uxr_next_input_reliable_buffer_available>
 800c536:	4603      	mov	r3, r0
 800c538:	a922      	add	r1, sp, #136	@ 0x88
 800c53a:	4620      	mov	r0, r4
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1ea      	bne.n	800c516 <uxr_create_session+0x13e>
 800c540:	9904      	ldr	r1, [sp, #16]
 800c542:	463a      	mov	r2, r7
 800c544:	4620      	mov	r0, r4
 800c546:	f7ff f951 	bl	800b7ec <write_submessage_acknack.isra.0>
 800c54a:	e779      	b.n	800c440 <uxr_create_session+0x68>
 800c54c:	4639      	mov	r1, r7
 800c54e:	4650      	mov	r0, sl
 800c550:	f000 fa94 	bl	800ca7c <uxr_get_input_best_effort_stream>
 800c554:	2800      	cmp	r0, #0
 800c556:	f43f af73 	beq.w	800c440 <uxr_create_session+0x68>
 800c55a:	4649      	mov	r1, r9
 800c55c:	f007 fb50 	bl	8013c00 <uxr_receive_best_effort_message>
 800c560:	2800      	cmp	r0, #0
 800c562:	f43f af6d 	beq.w	800c440 <uxr_create_session+0x68>
 800c566:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c56a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c56c:	a91a      	add	r1, sp, #104	@ 0x68
 800c56e:	4620      	mov	r0, r4
 800c570:	f7ff fac0 	bl	800baf4 <read_submessage_list>
 800c574:	e764      	b.n	800c440 <uxr_create_session+0x68>
 800c576:	4650      	mov	r0, sl
 800c578:	f000 f9d0 	bl	800c91c <uxr_reset_stream_storage>
 800c57c:	2001      	movs	r0, #1
 800c57e:	b02b      	add	sp, #172	@ 0xac
 800c580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800c588:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c58a:	a91a      	add	r1, sp, #104	@ 0x68
 800c58c:	4620      	mov	r0, r4
 800c58e:	f7ff fab1 	bl	800baf4 <read_submessage_list>
 800c592:	e7be      	b.n	800c512 <uxr_create_session+0x13a>

0800c594 <uxr_prepare_stream_to_write_submessage>:
 800c594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	4682      	mov	sl, r0
 800c59c:	4610      	mov	r0, r2
 800c59e:	4615      	mov	r5, r2
 800c5a0:	461e      	mov	r6, r3
 800c5a2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800c5a6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800c5aa:	9101      	str	r1, [sp, #4]
 800c5ac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c5b0:	f000 face 	bl	800cb50 <uxr_submessage_padding>
 800c5b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c5b8:	f105 0904 	add.w	r9, r5, #4
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	4481      	add	r9, r0
 800c5c0:	d01d      	beq.n	800c5fe <uxr_prepare_stream_to_write_submessage+0x6a>
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d116      	bne.n	800c5f4 <uxr_prepare_stream_to_write_submessage+0x60>
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	f10a 0008 	add.w	r0, sl, #8
 800c5cc:	f000 fa4c 	bl	800ca68 <uxr_get_output_reliable_stream>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	b158      	cbz	r0, 800c5ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4632      	mov	r2, r6
 800c5d8:	f007 fde2 	bl	80141a0 <uxr_prepare_reliable_buffer_to_write>
 800c5dc:	4604      	mov	r4, r0
 800c5de:	b12c      	cbz	r4, 800c5ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c5e0:	4643      	mov	r3, r8
 800c5e2:	b2aa      	uxth	r2, r5
 800c5e4:	4639      	mov	r1, r7
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 fa72 	bl	800cad0 <uxr_buffer_submessage_header>
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	b002      	add	sp, #8
 800c5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f4:	2400      	movs	r4, #0
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	b002      	add	sp, #8
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fe:	4621      	mov	r1, r4
 800c600:	f10a 0008 	add.w	r0, sl, #8
 800c604:	f000 fa28 	bl	800ca58 <uxr_get_output_best_effort_stream>
 800c608:	4604      	mov	r4, r0
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0ee      	beq.n	800c5ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c60e:	4649      	mov	r1, r9
 800c610:	4632      	mov	r2, r6
 800c612:	f007 fcf5 	bl	8014000 <uxr_prepare_best_effort_buffer_to_write>
 800c616:	4604      	mov	r4, r0
 800c618:	e7e1      	b.n	800c5de <uxr_prepare_stream_to_write_submessage+0x4a>
 800c61a:	bf00      	nop

0800c61c <uxr_init_session_info>:
 800c61c:	0e13      	lsrs	r3, r2, #24
 800c61e:	7043      	strb	r3, [r0, #1]
 800c620:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c624:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c628:	7001      	strb	r1, [r0, #0]
 800c62a:	70c3      	strb	r3, [r0, #3]
 800c62c:	2109      	movs	r1, #9
 800c62e:	23ff      	movs	r3, #255	@ 0xff
 800c630:	f880 c002 	strb.w	ip, [r0, #2]
 800c634:	7102      	strb	r2, [r0, #4]
 800c636:	80c1      	strh	r1, [r0, #6]
 800c638:	7143      	strb	r3, [r0, #5]
 800c63a:	4770      	bx	lr

0800c63c <uxr_buffer_create_session>:
 800c63c:	b530      	push	{r4, r5, lr}
 800c63e:	b089      	sub	sp, #36	@ 0x24
 800c640:	2300      	movs	r3, #0
 800c642:	4d12      	ldr	r5, [pc, #72]	@ (800c68c <uxr_buffer_create_session+0x50>)
 800c644:	9307      	str	r3, [sp, #28]
 800c646:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c64a:	2201      	movs	r2, #1
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	80c2      	strh	r2, [r0, #6]
 800c650:	f88d 2004 	strb.w	r2, [sp, #4]
 800c654:	682a      	ldr	r2, [r5, #0]
 800c656:	9200      	str	r2, [sp, #0]
 800c658:	88aa      	ldrh	r2, [r5, #4]
 800c65a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c65e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c662:	9202      	str	r2, [sp, #8]
 800c664:	460c      	mov	r4, r1
 800c666:	7802      	ldrb	r2, [r0, #0]
 800c668:	9303      	str	r3, [sp, #12]
 800c66a:	4619      	mov	r1, r3
 800c66c:	f88d 200c 	strb.w	r2, [sp, #12]
 800c670:	4620      	mov	r0, r4
 800c672:	2210      	movs	r2, #16
 800c674:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c678:	9306      	str	r3, [sp, #24]
 800c67a:	f000 fa29 	bl	800cad0 <uxr_buffer_submessage_header>
 800c67e:	4669      	mov	r1, sp
 800c680:	4620      	mov	r0, r4
 800c682:	f001 fa6d 	bl	800db60 <uxr_serialize_CREATE_CLIENT_Payload>
 800c686:	b009      	add	sp, #36	@ 0x24
 800c688:	bd30      	pop	{r4, r5, pc}
 800c68a:	bf00      	nop
 800c68c:	080190dc 	.word	0x080190dc

0800c690 <uxr_buffer_delete_session>:
 800c690:	b510      	push	{r4, lr}
 800c692:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c4 <uxr_buffer_delete_session+0x34>)
 800c694:	b082      	sub	sp, #8
 800c696:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c69a:	f8ad c006 	strh.w	ip, [sp, #6]
 800c69e:	460c      	mov	r4, r1
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c6a6:	80c2      	strh	r2, [r0, #6]
 800c6a8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c6ac:	2204      	movs	r2, #4
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	2103      	movs	r1, #3
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 fa0c 	bl	800cad0 <uxr_buffer_submessage_header>
 800c6b8:	a901      	add	r1, sp, #4
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f001 faf6 	bl	800dcac <uxr_serialize_DELETE_Payload>
 800c6c0:	b002      	add	sp, #8
 800c6c2:	bd10      	pop	{r4, pc}
 800c6c4:	080190dc 	.word	0x080190dc

0800c6c8 <uxr_read_create_session_status>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	a901      	add	r1, sp, #4
 800c6d2:	f001 fafb 	bl	800dccc <uxr_deserialize_STATUS_AGENT_Payload>
 800c6d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6da:	7163      	strb	r3, [r4, #5]
 800c6dc:	b008      	add	sp, #32
 800c6de:	bd10      	pop	{r4, pc}

0800c6e0 <uxr_read_delete_session_status>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	4608      	mov	r0, r1
 800c6e8:	a902      	add	r1, sp, #8
 800c6ea:	f001 fb1f 	bl	800dd2c <uxr_deserialize_STATUS_Payload>
 800c6ee:	88e3      	ldrh	r3, [r4, #6]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d001      	beq.n	800c6f8 <uxr_read_delete_session_status+0x18>
 800c6f4:	b004      	add	sp, #16
 800c6f6:	bd10      	pop	{r4, pc}
 800c6f8:	f10d 000a 	add.w	r0, sp, #10
 800c6fc:	f7fe fffc 	bl	800b6f8 <uxr_object_id_from_raw>
 800c700:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c704:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c708:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	bf04      	itt	eq
 800c712:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c716:	7163      	strbeq	r3, [r4, #5]
 800c718:	b004      	add	sp, #16
 800c71a:	bd10      	pop	{r4, pc}

0800c71c <uxr_stamp_create_session_header>:
 800c71c:	b510      	push	{r4, lr}
 800c71e:	2208      	movs	r2, #8
 800c720:	b08a      	sub	sp, #40	@ 0x28
 800c722:	4604      	mov	r4, r0
 800c724:	eb0d 0002 	add.w	r0, sp, r2
 800c728:	f7fe fd0e 	bl	800b148 <ucdr_init_buffer>
 800c72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c730:	9400      	str	r4, [sp, #0]
 800c732:	2300      	movs	r3, #0
 800c734:	461a      	mov	r2, r3
 800c736:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800c73a:	a802      	add	r0, sp, #8
 800c73c:	f000 fbc2 	bl	800cec4 <uxr_serialize_message_header>
 800c740:	b00a      	add	sp, #40	@ 0x28
 800c742:	bd10      	pop	{r4, pc}

0800c744 <uxr_stamp_session_header>:
 800c744:	b530      	push	{r4, r5, lr}
 800c746:	b08d      	sub	sp, #52	@ 0x34
 800c748:	4604      	mov	r4, r0
 800c74a:	460d      	mov	r5, r1
 800c74c:	9203      	str	r2, [sp, #12]
 800c74e:	4619      	mov	r1, r3
 800c750:	a804      	add	r0, sp, #16
 800c752:	2208      	movs	r2, #8
 800c754:	f7fe fcf8 	bl	800b148 <ucdr_init_buffer>
 800c758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	9400      	str	r4, [sp, #0]
 800c760:	462a      	mov	r2, r5
 800c762:	a804      	add	r0, sp, #16
 800c764:	f000 fbae 	bl	800cec4 <uxr_serialize_message_header>
 800c768:	b00d      	add	sp, #52	@ 0x34
 800c76a:	bd30      	pop	{r4, r5, pc}

0800c76c <uxr_read_session_header>:
 800c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	4607      	mov	r7, r0
 800c772:	b084      	sub	sp, #16
 800c774:	4608      	mov	r0, r1
 800c776:	460c      	mov	r4, r1
 800c778:	4615      	mov	r5, r2
 800c77a:	461e      	mov	r6, r3
 800c77c:	f7fe fd14 	bl	800b1a8 <ucdr_buffer_remaining>
 800c780:	2808      	cmp	r0, #8
 800c782:	d803      	bhi.n	800c78c <uxr_read_session_header+0x20>
 800c784:	2000      	movs	r0, #0
 800c786:	b004      	add	sp, #16
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	f10d 080c 	add.w	r8, sp, #12
 800c790:	4633      	mov	r3, r6
 800c792:	462a      	mov	r2, r5
 800c794:	f8cd 8000 	str.w	r8, [sp]
 800c798:	4620      	mov	r0, r4
 800c79a:	f10d 010b 	add.w	r1, sp, #11
 800c79e:	f000 fbaf 	bl	800cf00 <uxr_deserialize_message_header>
 800c7a2:	783a      	ldrb	r2, [r7, #0]
 800c7a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	d1eb      	bne.n	800c784 <uxr_read_session_header+0x18>
 800c7ac:	061b      	lsls	r3, r3, #24
 800c7ae:	d41c      	bmi.n	800c7ea <uxr_read_session_header+0x7e>
 800c7b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c7b4:	787b      	ldrb	r3, [r7, #1]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d003      	beq.n	800c7c2 <uxr_read_session_header+0x56>
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	f080 0001 	eor.w	r0, r0, #1
 800c7c0:	e7e1      	b.n	800c786 <uxr_read_session_header+0x1a>
 800c7c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c7c6:	78bb      	ldrb	r3, [r7, #2]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	f107 0102 	add.w	r1, r7, #2
 800c7ce:	d1f4      	bne.n	800c7ba <uxr_read_session_header+0x4e>
 800c7d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c7d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d1ee      	bne.n	800c7ba <uxr_read_session_header+0x4e>
 800c7dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c7e0:	784b      	ldrb	r3, [r1, #1]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d1e9      	bne.n	800c7ba <uxr_read_session_header+0x4e>
 800c7e6:	2000      	movs	r0, #0
 800c7e8:	e7e8      	b.n	800c7bc <uxr_read_session_header+0x50>
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	e7cb      	b.n	800c786 <uxr_read_session_header+0x1a>
 800c7ee:	bf00      	nop

0800c7f0 <uxr_session_header_offset>:
 800c7f0:	f990 3000 	ldrsb.w	r3, [r0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfac      	ite	ge
 800c7f8:	2008      	movge	r0, #8
 800c7fa:	2004      	movlt	r0, #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop

0800c800 <uxr_init_base_object_request>:
 800c800:	b510      	push	{r4, lr}
 800c802:	88c3      	ldrh	r3, [r0, #6]
 800c804:	b082      	sub	sp, #8
 800c806:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800c80a:	9101      	str	r1, [sp, #4]
 800c80c:	f1a3 010a 	sub.w	r1, r3, #10
 800c810:	b289      	uxth	r1, r1
 800c812:	42a1      	cmp	r1, r4
 800c814:	d80e      	bhi.n	800c834 <uxr_init_base_object_request+0x34>
 800c816:	3301      	adds	r3, #1
 800c818:	b29c      	uxth	r4, r3
 800c81a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	80c4      	strh	r4, [r0, #6]
 800c822:	9801      	ldr	r0, [sp, #4]
 800c824:	7011      	strb	r1, [r2, #0]
 800c826:	7053      	strb	r3, [r2, #1]
 800c828:	1c91      	adds	r1, r2, #2
 800c82a:	f7fe ff79 	bl	800b720 <uxr_object_id_to_raw>
 800c82e:	4620      	mov	r0, r4
 800c830:	b002      	add	sp, #8
 800c832:	bd10      	pop	{r4, pc}
 800c834:	230a      	movs	r3, #10
 800c836:	2100      	movs	r1, #0
 800c838:	461c      	mov	r4, r3
 800c83a:	e7f1      	b.n	800c820 <uxr_init_base_object_request+0x20>

0800c83c <uxr_parse_base_object_request>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	3002      	adds	r0, #2
 800c842:	460d      	mov	r5, r1
 800c844:	4616      	mov	r6, r2
 800c846:	f7fe ff57 	bl	800b6f8 <uxr_object_id_from_raw>
 800c84a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c84e:	8028      	strh	r0, [r5, #0]
 800c850:	806b      	strh	r3, [r5, #2]
 800c852:	7822      	ldrb	r2, [r4, #0]
 800c854:	7863      	ldrb	r3, [r4, #1]
 800c856:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c85a:	8033      	strh	r3, [r6, #0]
 800c85c:	bd70      	pop	{r4, r5, r6, pc}
 800c85e:	bf00      	nop

0800c860 <uxr_stream_id>:
 800c860:	2901      	cmp	r1, #1
 800c862:	b082      	sub	sp, #8
 800c864:	d01d      	beq.n	800c8a2 <uxr_stream_id+0x42>
 800c866:	2902      	cmp	r1, #2
 800c868:	f04f 0c00 	mov.w	ip, #0
 800c86c:	d01e      	beq.n	800c8ac <uxr_stream_id+0x4c>
 800c86e:	2300      	movs	r3, #0
 800c870:	f36c 0307 	bfi	r3, ip, #0, #8
 800c874:	f360 230f 	bfi	r3, r0, #8, #8
 800c878:	f361 4317 	bfi	r3, r1, #16, #8
 800c87c:	f362 631f 	bfi	r3, r2, #24, #8
 800c880:	b2da      	uxtb	r2, r3
 800c882:	2000      	movs	r0, #0
 800c884:	f362 0007 	bfi	r0, r2, #0, #8
 800c888:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c88c:	f362 200f 	bfi	r0, r2, #8, #8
 800c890:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c894:	f362 4017 	bfi	r0, r2, #16, #8
 800c898:	0e1b      	lsrs	r3, r3, #24
 800c89a:	f363 601f 	bfi	r0, r3, #24, #8
 800c89e:	b002      	add	sp, #8
 800c8a0:	4770      	bx	lr
 800c8a2:	f100 0c01 	add.w	ip, r0, #1
 800c8a6:	fa5f fc8c 	uxtb.w	ip, ip
 800c8aa:	e7e0      	b.n	800c86e <uxr_stream_id+0xe>
 800c8ac:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800c8b0:	e7dd      	b.n	800c86e <uxr_stream_id+0xe>
 800c8b2:	bf00      	nop

0800c8b4 <uxr_stream_id_from_raw>:
 800c8b4:	b082      	sub	sp, #8
 800c8b6:	b130      	cbz	r0, 800c8c6 <uxr_stream_id_from_raw+0x12>
 800c8b8:	0603      	lsls	r3, r0, #24
 800c8ba:	d420      	bmi.n	800c8fe <uxr_stream_id_from_raw+0x4a>
 800c8bc:	1e42      	subs	r2, r0, #1
 800c8be:	b2d2      	uxtb	r2, r2
 800c8c0:	f04f 0c01 	mov.w	ip, #1
 800c8c4:	e001      	b.n	800c8ca <uxr_stream_id_from_raw+0x16>
 800c8c6:	4684      	mov	ip, r0
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f360 0307 	bfi	r3, r0, #0, #8
 800c8d0:	f362 230f 	bfi	r3, r2, #8, #8
 800c8d4:	f36c 4317 	bfi	r3, ip, #16, #8
 800c8d8:	f361 631f 	bfi	r3, r1, #24, #8
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	2000      	movs	r0, #0
 800c8e0:	f362 0007 	bfi	r0, r2, #0, #8
 800c8e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c8e8:	f362 200f 	bfi	r0, r2, #8, #8
 800c8ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c8f0:	f362 4017 	bfi	r0, r2, #16, #8
 800c8f4:	0e1b      	lsrs	r3, r3, #24
 800c8f6:	f363 601f 	bfi	r0, r3, #24, #8
 800c8fa:	b002      	add	sp, #8
 800c8fc:	4770      	bx	lr
 800c8fe:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800c902:	f04f 0c02 	mov.w	ip, #2
 800c906:	e7e0      	b.n	800c8ca <uxr_stream_id_from_raw+0x16>

0800c908 <uxr_init_stream_storage>:
 800c908:	2300      	movs	r3, #0
 800c90a:	7403      	strb	r3, [r0, #16]
 800c90c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800c910:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800c914:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop

0800c91c <uxr_reset_stream_storage>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	7c03      	ldrb	r3, [r0, #16]
 800c920:	4604      	mov	r4, r0
 800c922:	b153      	cbz	r3, 800c93a <uxr_reset_stream_storage+0x1e>
 800c924:	4606      	mov	r6, r0
 800c926:	2500      	movs	r5, #0
 800c928:	4630      	mov	r0, r6
 800c92a:	f007 fb63 	bl	8013ff4 <uxr_reset_output_best_effort_stream>
 800c92e:	7c23      	ldrb	r3, [r4, #16]
 800c930:	3501      	adds	r5, #1
 800c932:	42ab      	cmp	r3, r5
 800c934:	f106 0610 	add.w	r6, r6, #16
 800c938:	d8f6      	bhi.n	800c928 <uxr_reset_stream_storage+0xc>
 800c93a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c93e:	b163      	cbz	r3, 800c95a <uxr_reset_stream_storage+0x3e>
 800c940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c944:	2500      	movs	r5, #0
 800c946:	4630      	mov	r0, r6
 800c948:	f007 f956 	bl	8013bf8 <uxr_reset_input_best_effort_stream>
 800c94c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c950:	3501      	adds	r5, #1
 800c952:	42ab      	cmp	r3, r5
 800c954:	f106 0602 	add.w	r6, r6, #2
 800c958:	d8f5      	bhi.n	800c946 <uxr_reset_stream_storage+0x2a>
 800c95a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c95e:	b163      	cbz	r3, 800c97a <uxr_reset_stream_storage+0x5e>
 800c960:	f104 0618 	add.w	r6, r4, #24
 800c964:	2500      	movs	r5, #0
 800c966:	4630      	mov	r0, r6
 800c968:	f007 fbf0 	bl	801414c <uxr_reset_output_reliable_stream>
 800c96c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800c970:	3501      	adds	r5, #1
 800c972:	42ab      	cmp	r3, r5
 800c974:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800c978:	d8f5      	bhi.n	800c966 <uxr_reset_stream_storage+0x4a>
 800c97a:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c97e:	b163      	cbz	r3, 800c99a <uxr_reset_stream_storage+0x7e>
 800c980:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800c984:	2500      	movs	r5, #0
 800c986:	4630      	mov	r0, r6
 800c988:	f007 f9aa 	bl	8013ce0 <uxr_reset_input_reliable_stream>
 800c98c:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800c990:	3501      	adds	r5, #1
 800c992:	42ab      	cmp	r3, r5
 800c994:	f106 0618 	add.w	r6, r6, #24
 800c998:	d8f5      	bhi.n	800c986 <uxr_reset_stream_storage+0x6a>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}

0800c99c <uxr_add_output_best_effort_buffer>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	7c04      	ldrb	r4, [r0, #16]
 800c9a0:	f104 0c01 	add.w	ip, r4, #1
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	f880 c010 	strb.w	ip, [r0, #16]
 800c9aa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c9ae:	f007 fb17 	bl	8013fe0 <uxr_init_output_best_effort_stream>
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	4611      	mov	r1, r2
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	b002      	add	sp, #8
 800c9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9be:	f7ff bf4f 	b.w	800c860 <uxr_stream_id>
 800c9c2:	bf00      	nop

0800c9c4 <uxr_add_output_reliable_buffer>:
 800c9c4:	b510      	push	{r4, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	4684      	mov	ip, r0
 800c9ca:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c9ce:	9000      	str	r0, [sp, #0]
 800c9d0:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800c9d4:	2028      	movs	r0, #40	@ 0x28
 800c9d6:	fb00 c004 	mla	r0, r0, r4, ip
 800c9da:	f104 0e01 	add.w	lr, r4, #1
 800c9de:	3018      	adds	r0, #24
 800c9e0:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800c9e4:	f007 fb7a 	bl	80140dc <uxr_init_output_reliable_stream>
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	2102      	movs	r1, #2
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	b004      	add	sp, #16
 800c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f4:	f7ff bf34 	b.w	800c860 <uxr_stream_id>

0800c9f8 <uxr_add_input_best_effort_buffer>:
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800c9fe:	4603      	mov	r3, r0
 800ca00:	1c62      	adds	r2, r4, #1
 800ca02:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800ca06:	b082      	sub	sp, #8
 800ca08:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800ca0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca10:	f007 f8ee 	bl	8013bf0 <uxr_init_input_best_effort_stream>
 800ca14:	2200      	movs	r2, #0
 800ca16:	2101      	movs	r1, #1
 800ca18:	4620      	mov	r0, r4
 800ca1a:	b002      	add	sp, #8
 800ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca20:	f7ff bf1e 	b.w	800c860 <uxr_stream_id>

0800ca24 <uxr_add_input_reliable_buffer>:
 800ca24:	b510      	push	{r4, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	4684      	mov	ip, r0
 800ca2a:	9806      	ldr	r0, [sp, #24]
 800ca2c:	9000      	str	r0, [sp, #0]
 800ca2e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800ca32:	2018      	movs	r0, #24
 800ca34:	fb00 c004 	mla	r0, r0, r4, ip
 800ca38:	f104 0e01 	add.w	lr, r4, #1
 800ca3c:	3048      	adds	r0, #72	@ 0x48
 800ca3e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800ca42:	f007 f921 	bl	8013c88 <uxr_init_input_reliable_stream>
 800ca46:	2200      	movs	r2, #0
 800ca48:	2102      	movs	r1, #2
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	b004      	add	sp, #16
 800ca4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca52:	f7ff bf05 	b.w	800c860 <uxr_stream_id>
 800ca56:	bf00      	nop

0800ca58 <uxr_get_output_best_effort_stream>:
 800ca58:	7c03      	ldrb	r3, [r0, #16]
 800ca5a:	428b      	cmp	r3, r1
 800ca5c:	bf8c      	ite	hi
 800ca5e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ca62:	2000      	movls	r0, #0
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop

0800ca68 <uxr_get_output_reliable_stream>:
 800ca68:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ca6c:	428b      	cmp	r3, r1
 800ca6e:	bf83      	ittte	hi
 800ca70:	2328      	movhi	r3, #40	@ 0x28
 800ca72:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ca76:	3018      	addhi	r0, #24
 800ca78:	2000      	movls	r0, #0
 800ca7a:	4770      	bx	lr

0800ca7c <uxr_get_input_best_effort_stream>:
 800ca7c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ca80:	428b      	cmp	r3, r1
 800ca82:	bf86      	itte	hi
 800ca84:	3121      	addhi	r1, #33	@ 0x21
 800ca86:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ca8a:	2000      	movls	r0, #0
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop

0800ca90 <uxr_get_input_reliable_stream>:
 800ca90:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ca94:	428b      	cmp	r3, r1
 800ca96:	bf83      	ittte	hi
 800ca98:	2318      	movhi	r3, #24
 800ca9a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ca9e:	3048      	addhi	r0, #72	@ 0x48
 800caa0:	2000      	movls	r0, #0
 800caa2:	4770      	bx	lr

0800caa4 <uxr_output_streams_confirmed>:
 800caa4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800caa8:	b183      	cbz	r3, 800cacc <uxr_output_streams_confirmed+0x28>
 800caaa:	b570      	push	{r4, r5, r6, lr}
 800caac:	4606      	mov	r6, r0
 800caae:	f100 0518 	add.w	r5, r0, #24
 800cab2:	2400      	movs	r4, #0
 800cab4:	e001      	b.n	800caba <uxr_output_streams_confirmed+0x16>
 800cab6:	3528      	adds	r5, #40	@ 0x28
 800cab8:	b138      	cbz	r0, 800caca <uxr_output_streams_confirmed+0x26>
 800caba:	4628      	mov	r0, r5
 800cabc:	f007 fdb6 	bl	801462c <uxr_is_output_up_to_date>
 800cac0:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800cac4:	3401      	adds	r4, #1
 800cac6:	42a3      	cmp	r3, r4
 800cac8:	d8f5      	bhi.n	800cab6 <uxr_output_streams_confirmed+0x12>
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	2001      	movs	r0, #1
 800cace:	4770      	bx	lr

0800cad0 <uxr_buffer_submessage_header>:
 800cad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad2:	4604      	mov	r4, r0
 800cad4:	460e      	mov	r6, r1
 800cad6:	2104      	movs	r1, #4
 800cad8:	4615      	mov	r5, r2
 800cada:	461f      	mov	r7, r3
 800cadc:	f7fe fb4e 	bl	800b17c <ucdr_align_to>
 800cae0:	2301      	movs	r3, #1
 800cae2:	ea47 0203 	orr.w	r2, r7, r3
 800cae6:	4631      	mov	r1, r6
 800cae8:	7523      	strb	r3, [r4, #20]
 800caea:	4620      	mov	r0, r4
 800caec:	462b      	mov	r3, r5
 800caee:	f000 fa27 	bl	800cf40 <uxr_serialize_submessage_header>
 800caf2:	4620      	mov	r0, r4
 800caf4:	f7fe fb58 	bl	800b1a8 <ucdr_buffer_remaining>
 800caf8:	42a8      	cmp	r0, r5
 800cafa:	bf34      	ite	cc
 800cafc:	2000      	movcc	r0, #0
 800cafe:	2001      	movcs	r0, #1
 800cb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb02:	bf00      	nop

0800cb04 <uxr_read_submessage_header>:
 800cb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb08:	4604      	mov	r4, r0
 800cb0a:	460d      	mov	r5, r1
 800cb0c:	2104      	movs	r1, #4
 800cb0e:	4616      	mov	r6, r2
 800cb10:	4698      	mov	r8, r3
 800cb12:	f7fe fb33 	bl	800b17c <ucdr_align_to>
 800cb16:	4620      	mov	r0, r4
 800cb18:	f7fe fb46 	bl	800b1a8 <ucdr_buffer_remaining>
 800cb1c:	2803      	cmp	r0, #3
 800cb1e:	bf8c      	ite	hi
 800cb20:	2701      	movhi	r7, #1
 800cb22:	2700      	movls	r7, #0
 800cb24:	d802      	bhi.n	800cb2c <uxr_read_submessage_header+0x28>
 800cb26:	4638      	mov	r0, r7
 800cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb2c:	4633      	mov	r3, r6
 800cb2e:	4642      	mov	r2, r8
 800cb30:	4620      	mov	r0, r4
 800cb32:	4629      	mov	r1, r5
 800cb34:	f000 fa18 	bl	800cf68 <uxr_deserialize_submessage_header>
 800cb38:	f898 3000 	ldrb.w	r3, [r8]
 800cb3c:	f003 0201 	and.w	r2, r3, #1
 800cb40:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800cb44:	f888 3000 	strb.w	r3, [r8]
 800cb48:	7522      	strb	r2, [r4, #20]
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cb50 <uxr_submessage_padding>:
 800cb50:	f010 0003 	ands.w	r0, r0, #3
 800cb54:	bf18      	it	ne
 800cb56:	f1c0 0004 	rsbne	r0, r0, #4
 800cb5a:	4770      	bx	lr

0800cb5c <uxr_millis>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	4669      	mov	r1, sp
 800cb62:	2001      	movs	r0, #1
 800cb64:	f7f5 fb7c 	bl	8002260 <clock_gettime>
 800cb68:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800cb6c:	4906      	ldr	r1, [pc, #24]	@ (800cb88 <uxr_millis+0x2c>)
 800cb6e:	fba0 0301 	umull	r0, r3, r0, r1
 800cb72:	1900      	adds	r0, r0, r4
 800cb74:	fb01 3102 	mla	r1, r1, r2, r3
 800cb78:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800cb7c:	4a03      	ldr	r2, [pc, #12]	@ (800cb8c <uxr_millis+0x30>)
 800cb7e:	2300      	movs	r3, #0
 800cb80:	f7f4 f842 	bl	8000c08 <__aeabi_ldivmod>
 800cb84:	b004      	add	sp, #16
 800cb86:	bd10      	pop	{r4, pc}
 800cb88:	3b9aca00 	.word	0x3b9aca00
 800cb8c:	000f4240 	.word	0x000f4240

0800cb90 <uxr_nanos>:
 800cb90:	b510      	push	{r4, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	4669      	mov	r1, sp
 800cb96:	2001      	movs	r0, #1
 800cb98:	f7f5 fb62 	bl	8002260 <clock_gettime>
 800cb9c:	4a06      	ldr	r2, [pc, #24]	@ (800cbb8 <uxr_nanos+0x28>)
 800cb9e:	9800      	ldr	r0, [sp, #0]
 800cba0:	9902      	ldr	r1, [sp, #8]
 800cba2:	9c01      	ldr	r4, [sp, #4]
 800cba4:	fba0 0302 	umull	r0, r3, r0, r2
 800cba8:	1840      	adds	r0, r0, r1
 800cbaa:	fb02 3304 	mla	r3, r2, r4, r3
 800cbae:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800cbb2:	b004      	add	sp, #16
 800cbb4:	bd10      	pop	{r4, pc}
 800cbb6:	bf00      	nop
 800cbb8:	3b9aca00 	.word	0x3b9aca00

0800cbbc <on_full_output_buffer_fragmented>:
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	b08a      	sub	sp, #40	@ 0x28
 800cbc4:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800cbc8:	4606      	mov	r6, r0
 800cbca:	f104 0008 	add.w	r0, r4, #8
 800cbce:	f7ff ff4b 	bl	800ca68 <uxr_get_output_reliable_stream>
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	f007 fd34 	bl	8014640 <get_available_free_slots>
 800cbd8:	b968      	cbnz	r0, 800cbf6 <on_full_output_buffer_fragmented+0x3a>
 800cbda:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800cbde:	4620      	mov	r0, r4
 800cbe0:	4798      	blx	r3
 800cbe2:	b918      	cbnz	r0, 800cbec <on_full_output_buffer_fragmented+0x30>
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	b00a      	add	sp, #40	@ 0x28
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	4628      	mov	r0, r5
 800cbee:	f007 fd27 	bl	8014640 <get_available_free_slots>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0f6      	beq.n	800cbe4 <on_full_output_buffer_fragmented+0x28>
 800cbf6:	8929      	ldrh	r1, [r5, #8]
 800cbf8:	89eb      	ldrh	r3, [r5, #14]
 800cbfa:	7b28      	ldrb	r0, [r5, #12]
 800cbfc:	686a      	ldr	r2, [r5, #4]
 800cbfe:	fbb2 f8f1 	udiv	r8, r2, r1
 800cc02:	fbb3 f2f1 	udiv	r2, r3, r1
 800cc06:	fb01 3112 	mls	r1, r1, r2, r3
 800cc0a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800cc0e:	b289      	uxth	r1, r1
 800cc10:	fb08 f101 	mul.w	r1, r8, r1
 800cc14:	30fc      	adds	r0, #252	@ 0xfc
 800cc16:	f1a8 0804 	sub.w	r8, r8, #4
 800cc1a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800cc1e:	4440      	add	r0, r8
 800cc20:	b287      	uxth	r7, r0
 800cc22:	1bdb      	subs	r3, r3, r7
 800cc24:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	3104      	adds	r1, #4
 800cc2c:	4419      	add	r1, r3
 800cc2e:	4642      	mov	r2, r8
 800cc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	a802      	add	r0, sp, #8
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f7fe fa73 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800cc3e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800cc42:	f102 0308 	add.w	r3, r2, #8
 800cc46:	4543      	cmp	r3, r8
 800cc48:	d928      	bls.n	800cc9c <on_full_output_buffer_fragmented+0xe0>
 800cc4a:	463a      	mov	r2, r7
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	210d      	movs	r1, #13
 800cc50:	a802      	add	r0, sp, #8
 800cc52:	f7ff ff3d 	bl	800cad0 <uxr_buffer_submessage_header>
 800cc56:	8929      	ldrh	r1, [r5, #8]
 800cc58:	89eb      	ldrh	r3, [r5, #14]
 800cc5a:	fbb3 f2f1 	udiv	r2, r3, r1
 800cc5e:	fb01 3312 	mls	r3, r1, r2, r3
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	686a      	ldr	r2, [r5, #4]
 800cc66:	fbb2 f2f1 	udiv	r2, r2, r1
 800cc6a:	fb02 f303 	mul.w	r3, r2, r3
 800cc6e:	682a      	ldr	r2, [r5, #0]
 800cc70:	f842 8003 	str.w	r8, [r2, r3]
 800cc74:	89e8      	ldrh	r0, [r5, #14]
 800cc76:	2101      	movs	r1, #1
 800cc78:	f007 fe32 	bl	80148e0 <uxr_seq_num_add>
 800cc7c:	9904      	ldr	r1, [sp, #16]
 800cc7e:	9a03      	ldr	r2, [sp, #12]
 800cc80:	81e8      	strh	r0, [r5, #14]
 800cc82:	1a52      	subs	r2, r2, r1
 800cc84:	4630      	mov	r0, r6
 800cc86:	f7fe fa5f 	bl	800b148 <ucdr_init_buffer>
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	490f      	ldr	r1, [pc, #60]	@ (800cccc <on_full_output_buffer_fragmented+0x110>)
 800cc8e:	4622      	mov	r2, r4
 800cc90:	f7fe fa2e 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 800cc94:	2000      	movs	r0, #0
 800cc96:	b00a      	add	sp, #40	@ 0x28
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	b292      	uxth	r2, r2
 800cc9e:	2302      	movs	r3, #2
 800cca0:	210d      	movs	r1, #13
 800cca2:	a802      	add	r0, sp, #8
 800cca4:	f7ff ff14 	bl	800cad0 <uxr_buffer_submessage_header>
 800cca8:	8928      	ldrh	r0, [r5, #8]
 800ccaa:	89eb      	ldrh	r3, [r5, #14]
 800ccac:	fbb3 f1f0 	udiv	r1, r3, r0
 800ccb0:	fb00 3311 	mls	r3, r0, r1, r3
 800ccb4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800ccb8:	6869      	ldr	r1, [r5, #4]
 800ccba:	fbb1 f1f0 	udiv	r1, r1, r0
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	fb01 f303 	mul.w	r3, r1, r3
 800ccc4:	6829      	ldr	r1, [r5, #0]
 800ccc6:	3208      	adds	r2, #8
 800ccc8:	50ca      	str	r2, [r1, r3]
 800ccca:	e7d3      	b.n	800cc74 <on_full_output_buffer_fragmented+0xb8>
 800cccc:	0800cbbd 	.word	0x0800cbbd

0800ccd0 <uxr_prepare_output_stream>:
 800ccd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd2:	b087      	sub	sp, #28
 800ccd4:	2707      	movs	r7, #7
 800ccd6:	9202      	str	r2, [sp, #8]
 800ccd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ccda:	9103      	str	r1, [sp, #12]
 800ccdc:	2500      	movs	r5, #0
 800ccde:	3204      	adds	r2, #4
 800cce0:	e9cd 7500 	strd	r7, r5, [sp]
 800cce4:	461c      	mov	r4, r3
 800cce6:	4606      	mov	r6, r0
 800cce8:	f7ff fc54 	bl	800c594 <uxr_prepare_stream_to_write_submessage>
 800ccec:	f080 0201 	eor.w	r2, r0, #1
 800ccf0:	b2d2      	uxtb	r2, r2
 800ccf2:	75a2      	strb	r2, [r4, #22]
 800ccf4:	b112      	cbz	r2, 800ccfc <uxr_prepare_output_stream+0x2c>
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	b007      	add	sp, #28
 800ccfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfc:	aa05      	add	r2, sp, #20
 800ccfe:	9902      	ldr	r1, [sp, #8]
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7ff fd7d 	bl	800c800 <uxr_init_base_object_request>
 800cd06:	a905      	add	r1, sp, #20
 800cd08:	4605      	mov	r5, r0
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f001 f88c 	bl	800de28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cd10:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800cd14:	69a6      	ldr	r6, [r4, #24]
 800cd16:	69e7      	ldr	r7, [r4, #28]
 800cd18:	1a52      	subs	r2, r2, r1
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f7fe fa14 	bl	800b148 <ucdr_init_buffer>
 800cd20:	4620      	mov	r0, r4
 800cd22:	463a      	mov	r2, r7
 800cd24:	4631      	mov	r1, r6
 800cd26:	f7fe f9e3 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	b007      	add	sp, #28
 800cd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd30 <uxr_prepare_output_stream_fragmented>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	b091      	sub	sp, #68	@ 0x44
 800cd36:	4605      	mov	r5, r0
 800cd38:	9105      	str	r1, [sp, #20]
 800cd3a:	3008      	adds	r0, #8
 800cd3c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800cd40:	461e      	mov	r6, r3
 800cd42:	9204      	str	r2, [sp, #16]
 800cd44:	f7ff fe90 	bl	800ca68 <uxr_get_output_reliable_stream>
 800cd48:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	f000 8091 	beq.w	800ce74 <uxr_prepare_output_stream_fragmented+0x144>
 800cd52:	4604      	mov	r4, r0
 800cd54:	2800      	cmp	r0, #0
 800cd56:	f000 808d 	beq.w	800ce74 <uxr_prepare_output_stream_fragmented+0x144>
 800cd5a:	f007 fc71 	bl	8014640 <get_available_free_slots>
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	f000 8083 	beq.w	800ce6a <uxr_prepare_output_stream_fragmented+0x13a>
 800cd64:	8922      	ldrh	r2, [r4, #8]
 800cd66:	89e7      	ldrh	r7, [r4, #14]
 800cd68:	fbb7 f9f2 	udiv	r9, r7, r2
 800cd6c:	fb02 7919 	mls	r9, r2, r9, r7
 800cd70:	fa1f f989 	uxth.w	r9, r9
 800cd74:	6863      	ldr	r3, [r4, #4]
 800cd76:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	9203      	str	r2, [sp, #12]
 800cd7e:	fb02 f909 	mul.w	r9, r2, r9
 800cd82:	f109 0904 	add.w	r9, r9, #4
 800cd86:	4499      	add	r9, r3
 800cd88:	7b23      	ldrb	r3, [r4, #12]
 800cd8a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cd8e:	4543      	cmp	r3, r8
 800cd90:	f1a2 0b04 	sub.w	fp, r2, #4
 800cd94:	d37a      	bcc.n	800ce8c <uxr_prepare_output_stream_fragmented+0x15c>
 800cd96:	f1ab 0a04 	sub.w	sl, fp, #4
 800cd9a:	ebaa 0a03 	sub.w	sl, sl, r3
 800cd9e:	465a      	mov	r2, fp
 800cda0:	2300      	movs	r3, #0
 800cda2:	4649      	mov	r1, r9
 800cda4:	a808      	add	r0, sp, #32
 800cda6:	f8cd 8000 	str.w	r8, [sp]
 800cdaa:	f7fe f9bb 	bl	800b124 <ucdr_init_buffer_origin_offset>
 800cdae:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800cdb0:	fa1f fa8a 	uxth.w	sl, sl
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	f103 0a08 	add.w	sl, r3, #8
 800cdba:	45da      	cmp	sl, fp
 800cdbc:	bf34      	ite	cc
 800cdbe:	2302      	movcc	r3, #2
 800cdc0:	2300      	movcs	r3, #0
 800cdc2:	210d      	movs	r1, #13
 800cdc4:	a808      	add	r0, sp, #32
 800cdc6:	f7ff fe83 	bl	800cad0 <uxr_buffer_submessage_header>
 800cdca:	8921      	ldrh	r1, [r4, #8]
 800cdcc:	fbb7 f2f1 	udiv	r2, r7, r1
 800cdd0:	fb01 7212 	mls	r2, r1, r2, r7
 800cdd4:	b292      	uxth	r2, r2
 800cdd6:	6863      	ldr	r3, [r4, #4]
 800cdd8:	fbb3 f3f1 	udiv	r3, r3, r1
 800cddc:	fb02 f303 	mul.w	r3, r2, r3
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	4638      	mov	r0, r7
 800cde4:	f842 b003 	str.w	fp, [r2, r3]
 800cde8:	2101      	movs	r1, #1
 800cdea:	f007 fd79 	bl	80148e0 <uxr_seq_num_add>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	f108 0104 	add.w	r1, r8, #4
 800cdf4:	f1a3 0208 	sub.w	r2, r3, #8
 800cdf8:	eba2 0208 	sub.w	r2, r2, r8
 800cdfc:	4449      	add	r1, r9
 800cdfe:	4607      	mov	r7, r0
 800ce00:	4630      	mov	r0, r6
 800ce02:	f7fe f9a1 	bl	800b148 <ucdr_init_buffer>
 800ce06:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ce08:	81e7      	strh	r7, [r4, #14]
 800ce0a:	1d1a      	adds	r2, r3, #4
 800ce0c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ce10:	bf28      	it	cs
 800ce12:	2200      	movcs	r2, #0
 800ce14:	2300      	movs	r3, #0
 800ce16:	b292      	uxth	r2, r2
 800ce18:	2107      	movs	r1, #7
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7ff fe58 	bl	800cad0 <uxr_buffer_submessage_header>
 800ce20:	9904      	ldr	r1, [sp, #16]
 800ce22:	aa07      	add	r2, sp, #28
 800ce24:	4628      	mov	r0, r5
 800ce26:	f7ff fceb 	bl	800c800 <uxr_init_base_object_request>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	b318      	cbz	r0, 800ce76 <uxr_prepare_output_stream_fragmented+0x146>
 800ce2e:	a907      	add	r1, sp, #28
 800ce30:	4630      	mov	r0, r6
 800ce32:	f000 fff9 	bl	800de28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800ce36:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	1a52      	subs	r2, r2, r1
 800ce3e:	f7fe f983 	bl	800b148 <ucdr_init_buffer>
 800ce42:	9b05      	ldr	r3, [sp, #20]
 800ce44:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800ce48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ce4a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800ce4e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800ce50:	491b      	ldr	r1, [pc, #108]	@ (800cec0 <uxr_prepare_output_stream_fragmented+0x190>)
 800ce52:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800ce56:	4630      	mov	r0, r6
 800ce58:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	f7fe f947 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 800ce62:	4620      	mov	r0, r4
 800ce64:	b011      	add	sp, #68	@ 0x44
 800ce66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800ce6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ce6e:	4628      	mov	r0, r5
 800ce70:	4798      	blx	r3
 800ce72:	b920      	cbnz	r0, 800ce7e <uxr_prepare_output_stream_fragmented+0x14e>
 800ce74:	2400      	movs	r4, #0
 800ce76:	4620      	mov	r0, r4
 800ce78:	b011      	add	sp, #68	@ 0x44
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f007 fbde 	bl	8014640 <get_available_free_slots>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	f47f af6d 	bne.w	800cd64 <uxr_prepare_output_stream_fragmented+0x34>
 800ce8a:	e7f3      	b.n	800ce74 <uxr_prepare_output_stream_fragmented+0x144>
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	2101      	movs	r1, #1
 800ce90:	f007 fd26 	bl	80148e0 <uxr_seq_num_add>
 800ce94:	8921      	ldrh	r1, [r4, #8]
 800ce96:	fbb0 f2f1 	udiv	r2, r0, r1
 800ce9a:	fb01 0912 	mls	r9, r1, r2, r0
 800ce9e:	fa1f f289 	uxth.w	r2, r9
 800cea2:	6863      	ldr	r3, [r4, #4]
 800cea4:	fbb3 f9f1 	udiv	r9, r3, r1
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	fb02 f909 	mul.w	r9, r2, r9
 800ceae:	f109 0904 	add.w	r9, r9, #4
 800ceb2:	4499      	add	r9, r3
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	7b23      	ldrb	r3, [r4, #12]
 800ceb8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cebc:	e76b      	b.n	800cd96 <uxr_prepare_output_stream_fragmented+0x66>
 800cebe:	bf00      	nop
 800cec0:	0800cbbd 	.word	0x0800cbbd

0800cec4 <uxr_serialize_message_header>:
 800cec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cec6:	b083      	sub	sp, #12
 800cec8:	4616      	mov	r6, r2
 800ceca:	4604      	mov	r4, r0
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	460d      	mov	r5, r1
 800ced0:	9f08      	ldr	r7, [sp, #32]
 800ced2:	f005 fe5b 	bl	8012b8c <ucdr_serialize_uint8_t>
 800ced6:	4631      	mov	r1, r6
 800ced8:	4620      	mov	r0, r4
 800ceda:	f005 fe57 	bl	8012b8c <ucdr_serialize_uint8_t>
 800cede:	9a01      	ldr	r2, [sp, #4]
 800cee0:	2101      	movs	r1, #1
 800cee2:	4620      	mov	r0, r4
 800cee4:	f005 fefe 	bl	8012ce4 <ucdr_serialize_endian_uint16_t>
 800cee8:	062b      	lsls	r3, r5, #24
 800ceea:	d501      	bpl.n	800cef0 <uxr_serialize_message_header+0x2c>
 800ceec:	b003      	add	sp, #12
 800ceee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cef0:	2204      	movs	r2, #4
 800cef2:	4639      	mov	r1, r7
 800cef4:	4620      	mov	r0, r4
 800cef6:	b003      	add	sp, #12
 800cef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cefc:	f005 bd50 	b.w	80129a0 <ucdr_serialize_array_uint8_t>

0800cf00 <uxr_deserialize_message_header>:
 800cf00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf02:	b083      	sub	sp, #12
 800cf04:	4616      	mov	r6, r2
 800cf06:	4604      	mov	r4, r0
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	460d      	mov	r5, r1
 800cf0c:	9f08      	ldr	r7, [sp, #32]
 800cf0e:	f005 fe53 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800cf12:	4631      	mov	r1, r6
 800cf14:	4620      	mov	r0, r4
 800cf16:	f005 fe4f 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800cf1a:	9a01      	ldr	r2, [sp, #4]
 800cf1c:	2101      	movs	r1, #1
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f005 ffd4 	bl	8012ecc <ucdr_deserialize_endian_uint16_t>
 800cf24:	f995 3000 	ldrsb.w	r3, [r5]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da01      	bge.n	800cf30 <uxr_deserialize_message_header+0x30>
 800cf2c:	b003      	add	sp, #12
 800cf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf30:	2204      	movs	r2, #4
 800cf32:	4639      	mov	r1, r7
 800cf34:	4620      	mov	r0, r4
 800cf36:	b003      	add	sp, #12
 800cf38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cf3c:	f005 bd94 	b.w	8012a68 <ucdr_deserialize_array_uint8_t>

0800cf40 <uxr_serialize_submessage_header>:
 800cf40:	b530      	push	{r4, r5, lr}
 800cf42:	b083      	sub	sp, #12
 800cf44:	4615      	mov	r5, r2
 800cf46:	4604      	mov	r4, r0
 800cf48:	9301      	str	r3, [sp, #4]
 800cf4a:	f005 fe1f 	bl	8012b8c <ucdr_serialize_uint8_t>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4620      	mov	r0, r4
 800cf52:	f005 fe1b 	bl	8012b8c <ucdr_serialize_uint8_t>
 800cf56:	9a01      	ldr	r2, [sp, #4]
 800cf58:	2101      	movs	r1, #1
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	b003      	add	sp, #12
 800cf5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf62:	f005 bebf 	b.w	8012ce4 <ucdr_serialize_endian_uint16_t>
 800cf66:	bf00      	nop

0800cf68 <uxr_deserialize_submessage_header>:
 800cf68:	b530      	push	{r4, r5, lr}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	4615      	mov	r5, r2
 800cf6e:	4604      	mov	r4, r0
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	f005 fe21 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800cf76:	4629      	mov	r1, r5
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f005 fe1d 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800cf7e:	9a01      	ldr	r2, [sp, #4]
 800cf80:	2101      	movs	r1, #1
 800cf82:	4620      	mov	r0, r4
 800cf84:	b003      	add	sp, #12
 800cf86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf8a:	f005 bf9f 	b.w	8012ecc <ucdr_deserialize_endian_uint16_t>
 800cf8e:	bf00      	nop

0800cf90 <uxr_serialize_CLIENT_Representation>:
 800cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf94:	2204      	movs	r2, #4
 800cf96:	460e      	mov	r6, r1
 800cf98:	4605      	mov	r5, r0
 800cf9a:	f005 fd01 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	1d31      	adds	r1, r6, #4
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f005 fcfb 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800cfaa:	4038      	ands	r0, r7
 800cfac:	2202      	movs	r2, #2
 800cfae:	1db1      	adds	r1, r6, #6
 800cfb0:	b2c7      	uxtb	r7, r0
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f005 fcf4 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800cfb8:	2204      	movs	r2, #4
 800cfba:	4007      	ands	r7, r0
 800cfbc:	f106 0108 	add.w	r1, r6, #8
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f005 fced 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800cfc6:	7b31      	ldrb	r1, [r6, #12]
 800cfc8:	4007      	ands	r7, r0
 800cfca:	4628      	mov	r0, r5
 800cfcc:	f005 fdde 	bl	8012b8c <ucdr_serialize_uint8_t>
 800cfd0:	7b71      	ldrb	r1, [r6, #13]
 800cfd2:	4007      	ands	r7, r0
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f005 fdab 	bl	8012b30 <ucdr_serialize_bool>
 800cfda:	7b73      	ldrb	r3, [r6, #13]
 800cfdc:	ea07 0800 	and.w	r8, r7, r0
 800cfe0:	b93b      	cbnz	r3, 800cff2 <uxr_serialize_CLIENT_Representation+0x62>
 800cfe2:	8bb1      	ldrh	r1, [r6, #28]
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f005 fdfd 	bl	8012be4 <ucdr_serialize_uint16_t>
 800cfea:	ea08 0000 	and.w	r0, r8, r0
 800cfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cff2:	6931      	ldr	r1, [r6, #16]
 800cff4:	4628      	mov	r0, r5
 800cff6:	f005 ffdf 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800cffa:	6933      	ldr	r3, [r6, #16]
 800cffc:	b1e3      	cbz	r3, 800d038 <uxr_serialize_CLIENT_Representation+0xa8>
 800cffe:	b1c0      	cbz	r0, 800d032 <uxr_serialize_CLIENT_Representation+0xa2>
 800d000:	4637      	mov	r7, r6
 800d002:	f04f 0900 	mov.w	r9, #0
 800d006:	e001      	b.n	800d00c <uxr_serialize_CLIENT_Representation+0x7c>
 800d008:	3708      	adds	r7, #8
 800d00a:	b194      	cbz	r4, 800d032 <uxr_serialize_CLIENT_Representation+0xa2>
 800d00c:	6979      	ldr	r1, [r7, #20]
 800d00e:	4628      	mov	r0, r5
 800d010:	f006 fd14 	bl	8013a3c <ucdr_serialize_string>
 800d014:	69b9      	ldr	r1, [r7, #24]
 800d016:	4604      	mov	r4, r0
 800d018:	4628      	mov	r0, r5
 800d01a:	f006 fd0f 	bl	8013a3c <ucdr_serialize_string>
 800d01e:	6933      	ldr	r3, [r6, #16]
 800d020:	f109 0901 	add.w	r9, r9, #1
 800d024:	4004      	ands	r4, r0
 800d026:	4599      	cmp	r9, r3
 800d028:	b2e4      	uxtb	r4, r4
 800d02a:	d3ed      	bcc.n	800d008 <uxr_serialize_CLIENT_Representation+0x78>
 800d02c:	ea08 0804 	and.w	r8, r8, r4
 800d030:	e7d7      	b.n	800cfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800d032:	f04f 0800 	mov.w	r8, #0
 800d036:	e7d4      	b.n	800cfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800d038:	ea08 0800 	and.w	r8, r8, r0
 800d03c:	e7d1      	b.n	800cfe2 <uxr_serialize_CLIENT_Representation+0x52>
 800d03e:	bf00      	nop

0800d040 <uxr_deserialize_CLIENT_Representation>:
 800d040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d044:	2204      	movs	r2, #4
 800d046:	460c      	mov	r4, r1
 800d048:	4605      	mov	r5, r0
 800d04a:	f005 fd0d 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d04e:	2202      	movs	r2, #2
 800d050:	4607      	mov	r7, r0
 800d052:	1d21      	adds	r1, r4, #4
 800d054:	4628      	mov	r0, r5
 800d056:	f005 fd07 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d05a:	4038      	ands	r0, r7
 800d05c:	2202      	movs	r2, #2
 800d05e:	1da1      	adds	r1, r4, #6
 800d060:	b2c6      	uxtb	r6, r0
 800d062:	4628      	mov	r0, r5
 800d064:	f005 fd00 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d068:	2204      	movs	r2, #4
 800d06a:	4006      	ands	r6, r0
 800d06c:	f104 0108 	add.w	r1, r4, #8
 800d070:	4628      	mov	r0, r5
 800d072:	f005 fcf9 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d076:	f104 010c 	add.w	r1, r4, #12
 800d07a:	4006      	ands	r6, r0
 800d07c:	4628      	mov	r0, r5
 800d07e:	f005 fd9b 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d082:	f104 010d 	add.w	r1, r4, #13
 800d086:	ea06 0700 	and.w	r7, r6, r0
 800d08a:	4628      	mov	r0, r5
 800d08c:	f005 fd66 	bl	8012b5c <ucdr_deserialize_bool>
 800d090:	7b63      	ldrb	r3, [r4, #13]
 800d092:	4007      	ands	r7, r0
 800d094:	b93b      	cbnz	r3, 800d0a6 <uxr_deserialize_CLIENT_Representation+0x66>
 800d096:	f104 011c 	add.w	r1, r4, #28
 800d09a:	4628      	mov	r0, r5
 800d09c:	f005 fea2 	bl	8012de4 <ucdr_deserialize_uint16_t>
 800d0a0:	4038      	ands	r0, r7
 800d0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	f104 0110 	add.w	r1, r4, #16
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f006 f8b4 	bl	8013218 <ucdr_deserialize_uint32_t>
 800d0b0:	6923      	ldr	r3, [r4, #16]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d903      	bls.n	800d0be <uxr_deserialize_CLIENT_Representation+0x7e>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	75ab      	strb	r3, [r5, #22]
 800d0ba:	2700      	movs	r7, #0
 800d0bc:	e7eb      	b.n	800d096 <uxr_deserialize_CLIENT_Representation+0x56>
 800d0be:	b30b      	cbz	r3, 800d104 <uxr_deserialize_CLIENT_Representation+0xc4>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d0fa      	beq.n	800d0ba <uxr_deserialize_CLIENT_Representation+0x7a>
 800d0c4:	46a0      	mov	r8, r4
 800d0c6:	f04f 0900 	mov.w	r9, #0
 800d0ca:	e001      	b.n	800d0d0 <uxr_deserialize_CLIENT_Representation+0x90>
 800d0cc:	2e00      	cmp	r6, #0
 800d0ce:	d0f4      	beq.n	800d0ba <uxr_deserialize_CLIENT_Representation+0x7a>
 800d0d0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d0d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f006 fcbf 	bl	8013a5c <ucdr_deserialize_string>
 800d0de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	f006 fcb7 	bl	8013a5c <ucdr_deserialize_string>
 800d0ee:	6923      	ldr	r3, [r4, #16]
 800d0f0:	f109 0901 	add.w	r9, r9, #1
 800d0f4:	4006      	ands	r6, r0
 800d0f6:	4599      	cmp	r9, r3
 800d0f8:	f108 0808 	add.w	r8, r8, #8
 800d0fc:	b2f6      	uxtb	r6, r6
 800d0fe:	d3e5      	bcc.n	800d0cc <uxr_deserialize_CLIENT_Representation+0x8c>
 800d100:	4037      	ands	r7, r6
 800d102:	e7c8      	b.n	800d096 <uxr_deserialize_CLIENT_Representation+0x56>
 800d104:	4007      	ands	r7, r0
 800d106:	e7c6      	b.n	800d096 <uxr_deserialize_CLIENT_Representation+0x56>

0800d108 <uxr_serialize_AGENT_Representation>:
 800d108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d10c:	2204      	movs	r2, #4
 800d10e:	460f      	mov	r7, r1
 800d110:	4605      	mov	r5, r0
 800d112:	f005 fc45 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d116:	2202      	movs	r2, #2
 800d118:	4604      	mov	r4, r0
 800d11a:	1d39      	adds	r1, r7, #4
 800d11c:	4628      	mov	r0, r5
 800d11e:	f005 fc3f 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d122:	4020      	ands	r0, r4
 800d124:	2202      	movs	r2, #2
 800d126:	1db9      	adds	r1, r7, #6
 800d128:	b2c4      	uxtb	r4, r0
 800d12a:	4628      	mov	r0, r5
 800d12c:	f005 fc38 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d130:	7a39      	ldrb	r1, [r7, #8]
 800d132:	4004      	ands	r4, r0
 800d134:	4628      	mov	r0, r5
 800d136:	f005 fcfb 	bl	8012b30 <ucdr_serialize_bool>
 800d13a:	7a3b      	ldrb	r3, [r7, #8]
 800d13c:	ea00 0804 	and.w	r8, r0, r4
 800d140:	b913      	cbnz	r3, 800d148 <uxr_serialize_AGENT_Representation+0x40>
 800d142:	4640      	mov	r0, r8
 800d144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d148:	68f9      	ldr	r1, [r7, #12]
 800d14a:	4628      	mov	r0, r5
 800d14c:	f005 ff34 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	b303      	cbz	r3, 800d196 <uxr_serialize_AGENT_Representation+0x8e>
 800d154:	b1d0      	cbz	r0, 800d18c <uxr_serialize_AGENT_Representation+0x84>
 800d156:	463e      	mov	r6, r7
 800d158:	f04f 0900 	mov.w	r9, #0
 800d15c:	e001      	b.n	800d162 <uxr_serialize_AGENT_Representation+0x5a>
 800d15e:	3608      	adds	r6, #8
 800d160:	b1a4      	cbz	r4, 800d18c <uxr_serialize_AGENT_Representation+0x84>
 800d162:	6931      	ldr	r1, [r6, #16]
 800d164:	4628      	mov	r0, r5
 800d166:	f006 fc69 	bl	8013a3c <ucdr_serialize_string>
 800d16a:	6971      	ldr	r1, [r6, #20]
 800d16c:	4604      	mov	r4, r0
 800d16e:	4628      	mov	r0, r5
 800d170:	f006 fc64 	bl	8013a3c <ucdr_serialize_string>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f109 0901 	add.w	r9, r9, #1
 800d17a:	4004      	ands	r4, r0
 800d17c:	4599      	cmp	r9, r3
 800d17e:	b2e4      	uxtb	r4, r4
 800d180:	d3ed      	bcc.n	800d15e <uxr_serialize_AGENT_Representation+0x56>
 800d182:	ea08 0804 	and.w	r8, r8, r4
 800d186:	4640      	mov	r0, r8
 800d188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18c:	f04f 0800 	mov.w	r8, #0
 800d190:	4640      	mov	r0, r8
 800d192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d196:	ea08 0800 	and.w	r8, r8, r0
 800d19a:	e7d2      	b.n	800d142 <uxr_serialize_AGENT_Representation+0x3a>

0800d19c <uxr_serialize_DATAWRITER_Representation>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	460d      	mov	r5, r1
 800d1a0:	7809      	ldrb	r1, [r1, #0]
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	f005 fcf2 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d1a8:	4604      	mov	r4, r0
 800d1aa:	b130      	cbz	r0, 800d1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d1ac:	782b      	ldrb	r3, [r5, #0]
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d00c      	beq.n	800d1cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800d1b2:	2b03      	cmp	r3, #3
 800d1b4:	d010      	beq.n	800d1d8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d1b6:	2b01      	cmp	r3, #1
 800d1b8:	d008      	beq.n	800d1cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	f005 fbed 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d1c6:	4020      	ands	r0, r4
 800d1c8:	b2c0      	uxtb	r0, r0
 800d1ca:	bd70      	pop	{r4, r5, r6, pc}
 800d1cc:	6869      	ldr	r1, [r5, #4]
 800d1ce:	4630      	mov	r0, r6
 800d1d0:	f006 fc34 	bl	8013a3c <ucdr_serialize_string>
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	e7f0      	b.n	800d1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d1e0:	3104      	adds	r1, #4
 800d1e2:	f7fe f84d 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	e7e7      	b.n	800d1ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d1ea:	bf00      	nop

0800d1ec <uxr_serialize_ObjectVariant.part.0>:
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	780b      	ldrb	r3, [r1, #0]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	2b0d      	cmp	r3, #13
 800d1f8:	d854      	bhi.n	800d2a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d1fa:	e8df f003 	tbb	[pc, r3]
 800d1fe:	0730      	.short	0x0730
 800d200:	07071b1b 	.word	0x07071b1b
 800d204:	0c530707 	.word	0x0c530707
 800d208:	494e0c0c 	.word	0x494e0c0c
 800d20c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d210:	3104      	adds	r1, #4
 800d212:	f7ff bfc3 	b.w	800d19c <uxr_serialize_DATAWRITER_Representation>
 800d216:	7909      	ldrb	r1, [r1, #4]
 800d218:	f005 fcb8 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d21c:	b1e8      	cbz	r0, 800d25a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d21e:	7923      	ldrb	r3, [r4, #4]
 800d220:	2b01      	cmp	r3, #1
 800d222:	d001      	beq.n	800d228 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d224:	2b02      	cmp	r3, #2
 800d226:	d13d      	bne.n	800d2a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d228:	68a1      	ldr	r1, [r4, #8]
 800d22a:	4628      	mov	r0, r5
 800d22c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d230:	f006 bc04 	b.w	8013a3c <ucdr_serialize_string>
 800d234:	7909      	ldrb	r1, [r1, #4]
 800d236:	f005 fca9 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d23a:	4606      	mov	r6, r0
 800d23c:	b120      	cbz	r0, 800d248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d23e:	7923      	ldrb	r3, [r4, #4]
 800d240:	2b02      	cmp	r3, #2
 800d242:	d039      	beq.n	800d2b8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d244:	2b03      	cmp	r3, #3
 800d246:	d02f      	beq.n	800d2a8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d248:	2202      	movs	r2, #2
 800d24a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800d24e:	4628      	mov	r0, r5
 800d250:	f005 fba6 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d254:	4030      	ands	r0, r6
 800d256:	b2c0      	uxtb	r0, r0
 800d258:	bd70      	pop	{r4, r5, r6, pc}
 800d25a:	2000      	movs	r0, #0
 800d25c:	bd70      	pop	{r4, r5, r6, pc}
 800d25e:	7909      	ldrb	r1, [r1, #4]
 800d260:	f005 fc94 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d264:	4606      	mov	r6, r0
 800d266:	b158      	cbz	r0, 800d280 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d268:	7923      	ldrb	r3, [r4, #4]
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d003      	beq.n	800d276 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d028      	beq.n	800d2c4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d104      	bne.n	800d280 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d276:	68a1      	ldr	r1, [r4, #8]
 800d278:	4628      	mov	r0, r5
 800d27a:	f006 fbdf 	bl	8013a3c <ucdr_serialize_string>
 800d27e:	4606      	mov	r6, r0
 800d280:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800d284:	4628      	mov	r0, r5
 800d286:	f006 f9bd 	bl	8013604 <ucdr_serialize_int16_t>
 800d28a:	4030      	ands	r0, r6
 800d28c:	b2c0      	uxtb	r0, r0
 800d28e:	bd70      	pop	{r4, r5, r6, pc}
 800d290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d294:	3104      	adds	r1, #4
 800d296:	f7ff be7b 	b.w	800cf90 <uxr_serialize_CLIENT_Representation>
 800d29a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d29e:	3104      	adds	r1, #4
 800d2a0:	f7ff bf32 	b.w	800d108 <uxr_serialize_AGENT_Representation>
 800d2a4:	2001      	movs	r0, #1
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	68a2      	ldr	r2, [r4, #8]
 800d2aa:	f104 010c 	add.w	r1, r4, #12
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f7fd ffe6 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d2b4:	4606      	mov	r6, r0
 800d2b6:	e7c7      	b.n	800d248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d2b8:	68a1      	ldr	r1, [r4, #8]
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f006 fbbe 	bl	8013a3c <ucdr_serialize_string>
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	e7c1      	b.n	800d248 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d2c4:	68a2      	ldr	r2, [r4, #8]
 800d2c6:	f104 010c 	add.w	r1, r4, #12
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f7fd ffd8 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d2d0:	4606      	mov	r6, r0
 800d2d2:	e7d5      	b.n	800d280 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d2d4 <uxr_deserialize_DATAWRITER_Representation>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	460d      	mov	r5, r1
 800d2da:	f005 fc6d 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d2de:	4604      	mov	r4, r0
 800d2e0:	b130      	cbz	r0, 800d2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d2e2:	782b      	ldrb	r3, [r5, #0]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d00c      	beq.n	800d302 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d2e8:	2b03      	cmp	r3, #3
 800d2ea:	d012      	beq.n	800d312 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d008      	beq.n	800d302 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800d2f6:	4630      	mov	r0, r6
 800d2f8:	f005 fbb6 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d2fc:	4020      	ands	r0, r4
 800d2fe:	b2c0      	uxtb	r0, r0
 800d300:	bd70      	pop	{r4, r5, r6, pc}
 800d302:	6869      	ldr	r1, [r5, #4]
 800d304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d308:	4630      	mov	r0, r6
 800d30a:	f006 fba7 	bl	8013a5c <ucdr_deserialize_string>
 800d30e:	4604      	mov	r4, r0
 800d310:	e7ee      	b.n	800d2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d312:	1d2b      	adds	r3, r5, #4
 800d314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d318:	f105 0108 	add.w	r1, r5, #8
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7fd ffc1 	bl	800b2a4 <ucdr_deserialize_sequence_uint8_t>
 800d322:	4604      	mov	r4, r0
 800d324:	e7e4      	b.n	800d2f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d326:	bf00      	nop

0800d328 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	460d      	mov	r5, r1
 800d32c:	7809      	ldrb	r1, [r1, #0]
 800d32e:	4606      	mov	r6, r0
 800d330:	f005 fbfe 	bl	8012b30 <ucdr_serialize_bool>
 800d334:	782b      	ldrb	r3, [r5, #0]
 800d336:	4604      	mov	r4, r0
 800d338:	b94b      	cbnz	r3, 800d34e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d33a:	7a29      	ldrb	r1, [r5, #8]
 800d33c:	4630      	mov	r0, r6
 800d33e:	f005 fbf7 	bl	8012b30 <ucdr_serialize_bool>
 800d342:	7a2b      	ldrb	r3, [r5, #8]
 800d344:	4004      	ands	r4, r0
 800d346:	b2e4      	uxtb	r4, r4
 800d348:	b943      	cbnz	r3, 800d35c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d34a:	4620      	mov	r0, r4
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	6869      	ldr	r1, [r5, #4]
 800d350:	4630      	mov	r0, r6
 800d352:	f006 fb73 	bl	8013a3c <ucdr_serialize_string>
 800d356:	4004      	ands	r4, r0
 800d358:	b2e4      	uxtb	r4, r4
 800d35a:	e7ee      	b.n	800d33a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d35c:	68e9      	ldr	r1, [r5, #12]
 800d35e:	4630      	mov	r0, r6
 800d360:	f006 fb6c 	bl	8013a3c <ucdr_serialize_string>
 800d364:	4004      	ands	r4, r0
 800d366:	4620      	mov	r0, r4
 800d368:	bd70      	pop	{r4, r5, r6, pc}
 800d36a:	bf00      	nop

0800d36c <uxr_serialize_OBJK_Topic_Binary>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	460d      	mov	r5, r1
 800d370:	6809      	ldr	r1, [r1, #0]
 800d372:	4606      	mov	r6, r0
 800d374:	f006 fb62 	bl	8013a3c <ucdr_serialize_string>
 800d378:	7929      	ldrb	r1, [r5, #4]
 800d37a:	4604      	mov	r4, r0
 800d37c:	4630      	mov	r0, r6
 800d37e:	f005 fbd7 	bl	8012b30 <ucdr_serialize_bool>
 800d382:	792b      	ldrb	r3, [r5, #4]
 800d384:	4004      	ands	r4, r0
 800d386:	b2e4      	uxtb	r4, r4
 800d388:	b943      	cbnz	r3, 800d39c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d38a:	7b29      	ldrb	r1, [r5, #12]
 800d38c:	4630      	mov	r0, r6
 800d38e:	f005 fbcf 	bl	8012b30 <ucdr_serialize_bool>
 800d392:	7b2b      	ldrb	r3, [r5, #12]
 800d394:	4004      	ands	r4, r0
 800d396:	b93b      	cbnz	r3, 800d3a8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d398:	4620      	mov	r0, r4
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	68a9      	ldr	r1, [r5, #8]
 800d39e:	4630      	mov	r0, r6
 800d3a0:	f006 fb4c 	bl	8013a3c <ucdr_serialize_string>
 800d3a4:	4004      	ands	r4, r0
 800d3a6:	e7f0      	b.n	800d38a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d3a8:	6929      	ldr	r1, [r5, #16]
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f006 fb46 	bl	8013a3c <ucdr_serialize_string>
 800d3b0:	4004      	ands	r4, r0
 800d3b2:	b2e4      	uxtb	r4, r4
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	bd70      	pop	{r4, r5, r6, pc}

0800d3b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3bc:	460c      	mov	r4, r1
 800d3be:	7809      	ldrb	r1, [r1, #0]
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	f005 fbb5 	bl	8012b30 <ucdr_serialize_bool>
 800d3c6:	7823      	ldrb	r3, [r4, #0]
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	b96b      	cbnz	r3, 800d3e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d3cc:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f005 fbad 	bl	8012b30 <ucdr_serialize_bool>
 800d3d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d3da:	4005      	ands	r5, r0
 800d3dc:	b2ed      	uxtb	r5, r5
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d169      	bne.n	800d4b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e8:	6861      	ldr	r1, [r4, #4]
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f005 fde4 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d06b      	beq.n	800d4ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	d067      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d3fa:	68a1      	ldr	r1, [r4, #8]
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f006 fb1d 	bl	8013a3c <ucdr_serialize_string>
 800d402:	6863      	ldr	r3, [r4, #4]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d953      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d05e      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d40c:	68e1      	ldr	r1, [r4, #12]
 800d40e:	4630      	mov	r0, r6
 800d410:	f006 fb14 	bl	8013a3c <ucdr_serialize_string>
 800d414:	6863      	ldr	r3, [r4, #4]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d94a      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d055      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d41e:	6921      	ldr	r1, [r4, #16]
 800d420:	4630      	mov	r0, r6
 800d422:	f006 fb0b 	bl	8013a3c <ucdr_serialize_string>
 800d426:	6863      	ldr	r3, [r4, #4]
 800d428:	2b03      	cmp	r3, #3
 800d42a:	d941      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d04c      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d430:	6961      	ldr	r1, [r4, #20]
 800d432:	4630      	mov	r0, r6
 800d434:	f006 fb02 	bl	8013a3c <ucdr_serialize_string>
 800d438:	6863      	ldr	r3, [r4, #4]
 800d43a:	2b04      	cmp	r3, #4
 800d43c:	d938      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d043      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d442:	69a1      	ldr	r1, [r4, #24]
 800d444:	4630      	mov	r0, r6
 800d446:	f006 faf9 	bl	8013a3c <ucdr_serialize_string>
 800d44a:	6863      	ldr	r3, [r4, #4]
 800d44c:	2b05      	cmp	r3, #5
 800d44e:	d92f      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d450:	2800      	cmp	r0, #0
 800d452:	d03a      	beq.n	800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d454:	69e1      	ldr	r1, [r4, #28]
 800d456:	4630      	mov	r0, r6
 800d458:	f006 faf0 	bl	8013a3c <ucdr_serialize_string>
 800d45c:	6863      	ldr	r3, [r4, #4]
 800d45e:	2b06      	cmp	r3, #6
 800d460:	d926      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d462:	b390      	cbz	r0, 800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d464:	6a21      	ldr	r1, [r4, #32]
 800d466:	4630      	mov	r0, r6
 800d468:	f006 fae8 	bl	8013a3c <ucdr_serialize_string>
 800d46c:	6863      	ldr	r3, [r4, #4]
 800d46e:	2b07      	cmp	r3, #7
 800d470:	d91e      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d472:	b350      	cbz	r0, 800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d474:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d476:	4630      	mov	r0, r6
 800d478:	f006 fae0 	bl	8013a3c <ucdr_serialize_string>
 800d47c:	6863      	ldr	r3, [r4, #4]
 800d47e:	2b08      	cmp	r3, #8
 800d480:	d916      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d482:	b310      	cbz	r0, 800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d484:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d486:	4630      	mov	r0, r6
 800d488:	f006 fad8 	bl	8013a3c <ucdr_serialize_string>
 800d48c:	6863      	ldr	r3, [r4, #4]
 800d48e:	2b09      	cmp	r3, #9
 800d490:	d90e      	bls.n	800d4b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d492:	b1d0      	cbz	r0, 800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d494:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d498:	2709      	movs	r7, #9
 800d49a:	e000      	b.n	800d49e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d49c:	b1a8      	cbz	r0, 800d4ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d49e:	f858 1b04 	ldr.w	r1, [r8], #4
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f006 faca 	bl	8013a3c <ucdr_serialize_string>
 800d4a8:	6862      	ldr	r2, [r4, #4]
 800d4aa:	3701      	adds	r7, #1
 800d4ac:	4297      	cmp	r7, r2
 800d4ae:	d3f5      	bcc.n	800d49c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d4b0:	4005      	ands	r5, r0
 800d4b2:	b2ed      	uxtb	r5, r5
 800d4b4:	e78a      	b.n	800d3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d4b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4b8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f7fd fedf 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d4c2:	4005      	ands	r5, r0
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	e77e      	b.n	800d3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d4ce:	4028      	ands	r0, r5
 800d4d0:	b2c5      	uxtb	r5, r0
 800d4d2:	e77b      	b.n	800d3cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d4d4 <uxr_serialize_OBJK_Publisher_Binary>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	460d      	mov	r5, r1
 800d4d8:	7809      	ldrb	r1, [r1, #0]
 800d4da:	4606      	mov	r6, r0
 800d4dc:	f005 fb28 	bl	8012b30 <ucdr_serialize_bool>
 800d4e0:	782b      	ldrb	r3, [r5, #0]
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	b94b      	cbnz	r3, 800d4fa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d4e6:	7a29      	ldrb	r1, [r5, #8]
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f005 fb21 	bl	8012b30 <ucdr_serialize_bool>
 800d4ee:	7a2b      	ldrb	r3, [r5, #8]
 800d4f0:	4004      	ands	r4, r0
 800d4f2:	b2e4      	uxtb	r4, r4
 800d4f4:	b943      	cbnz	r3, 800d508 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	bd70      	pop	{r4, r5, r6, pc}
 800d4fa:	6869      	ldr	r1, [r5, #4]
 800d4fc:	4630      	mov	r0, r6
 800d4fe:	f006 fa9d 	bl	8013a3c <ucdr_serialize_string>
 800d502:	4004      	ands	r4, r0
 800d504:	b2e4      	uxtb	r4, r4
 800d506:	e7ee      	b.n	800d4e6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d508:	f105 010c 	add.w	r1, r5, #12
 800d50c:	4630      	mov	r0, r6
 800d50e:	f7ff ff53 	bl	800d3b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d512:	4004      	ands	r4, r0
 800d514:	4620      	mov	r0, r4
 800d516:	bd70      	pop	{r4, r5, r6, pc}

0800d518 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d51c:	460c      	mov	r4, r1
 800d51e:	7809      	ldrb	r1, [r1, #0]
 800d520:	4606      	mov	r6, r0
 800d522:	f005 fb05 	bl	8012b30 <ucdr_serialize_bool>
 800d526:	7823      	ldrb	r3, [r4, #0]
 800d528:	4605      	mov	r5, r0
 800d52a:	b96b      	cbnz	r3, 800d548 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d52c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800d530:	4630      	mov	r0, r6
 800d532:	f005 fafd 	bl	8012b30 <ucdr_serialize_bool>
 800d536:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d53a:	4005      	ands	r5, r0
 800d53c:	b2ed      	uxtb	r5, r5
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d169      	bne.n	800d616 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d542:	4628      	mov	r0, r5
 800d544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d548:	6861      	ldr	r1, [r4, #4]
 800d54a:	4630      	mov	r0, r6
 800d54c:	f005 fd34 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d550:	6863      	ldr	r3, [r4, #4]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d06b      	beq.n	800d62e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d556:	2800      	cmp	r0, #0
 800d558:	d067      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d55a:	68a1      	ldr	r1, [r4, #8]
 800d55c:	4630      	mov	r0, r6
 800d55e:	f006 fa6d 	bl	8013a3c <ucdr_serialize_string>
 800d562:	6863      	ldr	r3, [r4, #4]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d953      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d05e      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d56c:	68e1      	ldr	r1, [r4, #12]
 800d56e:	4630      	mov	r0, r6
 800d570:	f006 fa64 	bl	8013a3c <ucdr_serialize_string>
 800d574:	6863      	ldr	r3, [r4, #4]
 800d576:	2b02      	cmp	r3, #2
 800d578:	d94a      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d055      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d57e:	6921      	ldr	r1, [r4, #16]
 800d580:	4630      	mov	r0, r6
 800d582:	f006 fa5b 	bl	8013a3c <ucdr_serialize_string>
 800d586:	6863      	ldr	r3, [r4, #4]
 800d588:	2b03      	cmp	r3, #3
 800d58a:	d941      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	d04c      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d590:	6961      	ldr	r1, [r4, #20]
 800d592:	4630      	mov	r0, r6
 800d594:	f006 fa52 	bl	8013a3c <ucdr_serialize_string>
 800d598:	6863      	ldr	r3, [r4, #4]
 800d59a:	2b04      	cmp	r3, #4
 800d59c:	d938      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d043      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5a2:	69a1      	ldr	r1, [r4, #24]
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f006 fa49 	bl	8013a3c <ucdr_serialize_string>
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	2b05      	cmp	r3, #5
 800d5ae:	d92f      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d03a      	beq.n	800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5b4:	69e1      	ldr	r1, [r4, #28]
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f006 fa40 	bl	8013a3c <ucdr_serialize_string>
 800d5bc:	6863      	ldr	r3, [r4, #4]
 800d5be:	2b06      	cmp	r3, #6
 800d5c0:	d926      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5c2:	b390      	cbz	r0, 800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5c4:	6a21      	ldr	r1, [r4, #32]
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f006 fa38 	bl	8013a3c <ucdr_serialize_string>
 800d5cc:	6863      	ldr	r3, [r4, #4]
 800d5ce:	2b07      	cmp	r3, #7
 800d5d0:	d91e      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5d2:	b350      	cbz	r0, 800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5d4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	f006 fa30 	bl	8013a3c <ucdr_serialize_string>
 800d5dc:	6863      	ldr	r3, [r4, #4]
 800d5de:	2b08      	cmp	r3, #8
 800d5e0:	d916      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5e2:	b310      	cbz	r0, 800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5e4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800d5e6:	4630      	mov	r0, r6
 800d5e8:	f006 fa28 	bl	8013a3c <ucdr_serialize_string>
 800d5ec:	6863      	ldr	r3, [r4, #4]
 800d5ee:	2b09      	cmp	r3, #9
 800d5f0:	d90e      	bls.n	800d610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d5f2:	b1d0      	cbz	r0, 800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5f4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800d5f8:	2709      	movs	r7, #9
 800d5fa:	e000      	b.n	800d5fe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800d5fc:	b1a8      	cbz	r0, 800d62a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d5fe:	f858 1b04 	ldr.w	r1, [r8], #4
 800d602:	4630      	mov	r0, r6
 800d604:	f006 fa1a 	bl	8013a3c <ucdr_serialize_string>
 800d608:	6862      	ldr	r2, [r4, #4]
 800d60a:	3701      	adds	r7, #1
 800d60c:	4297      	cmp	r7, r2
 800d60e:	d3f5      	bcc.n	800d5fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800d610:	4005      	ands	r5, r0
 800d612:	b2ed      	uxtb	r5, r5
 800d614:	e78a      	b.n	800d52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d616:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d618:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800d61c:	4630      	mov	r0, r6
 800d61e:	f7fd fe2f 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d622:	4005      	ands	r5, r0
 800d624:	4628      	mov	r0, r5
 800d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d62a:	2500      	movs	r5, #0
 800d62c:	e77e      	b.n	800d52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d62e:	4028      	ands	r0, r5
 800d630:	b2c5      	uxtb	r5, r0
 800d632:	e77b      	b.n	800d52c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800d634 <uxr_serialize_OBJK_Subscriber_Binary>:
 800d634:	b570      	push	{r4, r5, r6, lr}
 800d636:	460d      	mov	r5, r1
 800d638:	7809      	ldrb	r1, [r1, #0]
 800d63a:	4606      	mov	r6, r0
 800d63c:	f005 fa78 	bl	8012b30 <ucdr_serialize_bool>
 800d640:	782b      	ldrb	r3, [r5, #0]
 800d642:	4604      	mov	r4, r0
 800d644:	b94b      	cbnz	r3, 800d65a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800d646:	7a29      	ldrb	r1, [r5, #8]
 800d648:	4630      	mov	r0, r6
 800d64a:	f005 fa71 	bl	8012b30 <ucdr_serialize_bool>
 800d64e:	7a2b      	ldrb	r3, [r5, #8]
 800d650:	4004      	ands	r4, r0
 800d652:	b2e4      	uxtb	r4, r4
 800d654:	b943      	cbnz	r3, 800d668 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800d656:	4620      	mov	r0, r4
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	6869      	ldr	r1, [r5, #4]
 800d65c:	4630      	mov	r0, r6
 800d65e:	f006 f9ed 	bl	8013a3c <ucdr_serialize_string>
 800d662:	4004      	ands	r4, r0
 800d664:	b2e4      	uxtb	r4, r4
 800d666:	e7ee      	b.n	800d646 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800d668:	f105 010c 	add.w	r1, r5, #12
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff ff53 	bl	800d518 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800d672:	4004      	ands	r4, r0
 800d674:	4620      	mov	r0, r4
 800d676:	bd70      	pop	{r4, r5, r6, pc}

0800d678 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d678:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d67c:	4688      	mov	r8, r1
 800d67e:	8809      	ldrh	r1, [r1, #0]
 800d680:	4681      	mov	r9, r0
 800d682:	f005 faaf 	bl	8012be4 <ucdr_serialize_uint16_t>
 800d686:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d68a:	4606      	mov	r6, r0
 800d68c:	4648      	mov	r0, r9
 800d68e:	f005 fa4f 	bl	8012b30 <ucdr_serialize_bool>
 800d692:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d696:	4006      	ands	r6, r0
 800d698:	b2f5      	uxtb	r5, r6
 800d69a:	b9eb      	cbnz	r3, 800d6d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d69c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d6a0:	4648      	mov	r0, r9
 800d6a2:	f005 fa45 	bl	8012b30 <ucdr_serialize_bool>
 800d6a6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d6aa:	4005      	ands	r5, r0
 800d6ac:	bb7b      	cbnz	r3, 800d70e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d6ae:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d6b2:	4648      	mov	r0, r9
 800d6b4:	f005 fa3c 	bl	8012b30 <ucdr_serialize_bool>
 800d6b8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d6bc:	4005      	ands	r5, r0
 800d6be:	b9f3      	cbnz	r3, 800d6fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d6c0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d6c4:	4648      	mov	r0, r9
 800d6c6:	f005 fa33 	bl	8012b30 <ucdr_serialize_bool>
 800d6ca:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d6ce:	4005      	ands	r5, r0
 800d6d0:	b94b      	cbnz	r3, 800d6e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d6d8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d6dc:	4648      	mov	r0, r9
 800d6de:	f005 fa81 	bl	8012be4 <ucdr_serialize_uint16_t>
 800d6e2:	4005      	ands	r5, r0
 800d6e4:	e7da      	b.n	800d69c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d6e6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d6ea:	f108 011c 	add.w	r1, r8, #28
 800d6ee:	4648      	mov	r0, r9
 800d6f0:	f7fd fdc6 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800d6f4:	4028      	ands	r0, r5
 800d6f6:	b2c5      	uxtb	r5, r0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d6fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d702:	4648      	mov	r0, r9
 800d704:	f005 fc58 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d708:	4028      	ands	r0, r5
 800d70a:	b2c5      	uxtb	r5, r0
 800d70c:	e7d8      	b.n	800d6c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d70e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d712:	4648      	mov	r0, r9
 800d714:	f005 fc50 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d718:	4028      	ands	r0, r5
 800d71a:	b2c5      	uxtb	r5, r0
 800d71c:	e7c7      	b.n	800d6ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d71e:	bf00      	nop

0800d720 <uxr_serialize_OBJK_DataReader_Binary>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	2202      	movs	r2, #2
 800d724:	460c      	mov	r4, r1
 800d726:	4606      	mov	r6, r0
 800d728:	f005 f93a 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d72c:	78a1      	ldrb	r1, [r4, #2]
 800d72e:	4605      	mov	r5, r0
 800d730:	4630      	mov	r0, r6
 800d732:	f005 f9fd 	bl	8012b30 <ucdr_serialize_bool>
 800d736:	78a3      	ldrb	r3, [r4, #2]
 800d738:	4005      	ands	r5, r0
 800d73a:	b2ed      	uxtb	r5, r5
 800d73c:	b90b      	cbnz	r3, 800d742 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800d73e:	4628      	mov	r0, r5
 800d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d742:	f104 0108 	add.w	r1, r4, #8
 800d746:	4630      	mov	r0, r6
 800d748:	f7ff ff96 	bl	800d678 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d74c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d750:	4607      	mov	r7, r0
 800d752:	4630      	mov	r0, r6
 800d754:	f005 f9ec 	bl	8012b30 <ucdr_serialize_bool>
 800d758:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d75c:	4038      	ands	r0, r7
 800d75e:	b2c7      	uxtb	r7, r0
 800d760:	b95b      	cbnz	r3, 800d77a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800d762:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 800d766:	4630      	mov	r0, r6
 800d768:	f005 f9e2 	bl	8012b30 <ucdr_serialize_bool>
 800d76c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800d770:	4007      	ands	r7, r0
 800d772:	b94b      	cbnz	r3, 800d788 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800d774:	403d      	ands	r5, r7
 800d776:	4628      	mov	r0, r5
 800d778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d77a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 800d77e:	4630      	mov	r0, r6
 800d780:	f005 fe70 	bl	8013464 <ucdr_serialize_uint64_t>
 800d784:	4007      	ands	r7, r0
 800d786:	e7ec      	b.n	800d762 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800d788:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800d78a:	4630      	mov	r0, r6
 800d78c:	f006 f956 	bl	8013a3c <ucdr_serialize_string>
 800d790:	4007      	ands	r7, r0
 800d792:	b2ff      	uxtb	r7, r7
 800d794:	e7ee      	b.n	800d774 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800d796:	bf00      	nop

0800d798 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	2202      	movs	r2, #2
 800d79c:	460d      	mov	r5, r1
 800d79e:	4606      	mov	r6, r0
 800d7a0:	f005 f8fe 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800d7a4:	78a9      	ldrb	r1, [r5, #2]
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f005 f9c1 	bl	8012b30 <ucdr_serialize_bool>
 800d7ae:	78ab      	ldrb	r3, [r5, #2]
 800d7b0:	4004      	ands	r4, r0
 800d7b2:	b2e4      	uxtb	r4, r4
 800d7b4:	b90b      	cbnz	r3, 800d7ba <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ba:	f105 0108 	add.w	r1, r5, #8
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ff5a 	bl	800d678 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d7c4:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800d7c8:	4607      	mov	r7, r0
 800d7ca:	4630      	mov	r0, r6
 800d7cc:	f005 f9b0 	bl	8012b30 <ucdr_serialize_bool>
 800d7d0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800d7d4:	4038      	ands	r0, r7
 800d7d6:	b2c7      	uxtb	r7, r0
 800d7d8:	b913      	cbnz	r3, 800d7e0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d7da:	403c      	ands	r4, r7
 800d7dc:	4620      	mov	r0, r4
 800d7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7e0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	f005 fe3d 	bl	8013464 <ucdr_serialize_uint64_t>
 800d7ea:	4007      	ands	r7, r0
 800d7ec:	e7f5      	b.n	800d7da <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d7ee:	bf00      	nop

0800d7f0 <uxr_deserialize_ObjectVariant>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	460e      	mov	r6, r1
 800d7f6:	f005 f9df 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d7fa:	b168      	cbz	r0, 800d818 <uxr_deserialize_ObjectVariant+0x28>
 800d7fc:	7833      	ldrb	r3, [r6, #0]
 800d7fe:	3b01      	subs	r3, #1
 800d800:	4604      	mov	r4, r0
 800d802:	2b0d      	cmp	r3, #13
 800d804:	d809      	bhi.n	800d81a <uxr_deserialize_ObjectVariant+0x2a>
 800d806:	e8df f003 	tbb	[pc, r3]
 800d80a:	0a41      	.short	0x0a41
 800d80c:	0a0a2323 	.word	0x0a0a2323
 800d810:	10080a0a 	.word	0x10080a0a
 800d814:	565c1010 	.word	0x565c1010
 800d818:	2400      	movs	r4, #0
 800d81a:	4620      	mov	r0, r4
 800d81c:	bd70      	pop	{r4, r5, r6, pc}
 800d81e:	1d31      	adds	r1, r6, #4
 800d820:	4628      	mov	r0, r5
 800d822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d826:	f7ff bd55 	b.w	800d2d4 <uxr_deserialize_DATAWRITER_Representation>
 800d82a:	1d31      	adds	r1, r6, #4
 800d82c:	4628      	mov	r0, r5
 800d82e:	f005 f9c3 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d832:	2800      	cmp	r0, #0
 800d834:	d0f0      	beq.n	800d818 <uxr_deserialize_ObjectVariant+0x28>
 800d836:	7933      	ldrb	r3, [r6, #4]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d001      	beq.n	800d840 <uxr_deserialize_ObjectVariant+0x50>
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d1ec      	bne.n	800d81a <uxr_deserialize_ObjectVariant+0x2a>
 800d840:	68b1      	ldr	r1, [r6, #8]
 800d842:	4628      	mov	r0, r5
 800d844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d84c:	f006 b906 	b.w	8013a5c <ucdr_deserialize_string>
 800d850:	1d31      	adds	r1, r6, #4
 800d852:	4628      	mov	r0, r5
 800d854:	f005 f9b0 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d858:	4604      	mov	r4, r0
 800d85a:	b170      	cbz	r0, 800d87a <uxr_deserialize_ObjectVariant+0x8a>
 800d85c:	7933      	ldrb	r3, [r6, #4]
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d04c      	beq.n	800d8fc <uxr_deserialize_ObjectVariant+0x10c>
 800d862:	2b03      	cmp	r3, #3
 800d864:	d109      	bne.n	800d87a <uxr_deserialize_ObjectVariant+0x8a>
 800d866:	f106 0308 	add.w	r3, r6, #8
 800d86a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d86e:	f106 010c 	add.w	r1, r6, #12
 800d872:	4628      	mov	r0, r5
 800d874:	f7fd fd16 	bl	800b2a4 <ucdr_deserialize_sequence_uint8_t>
 800d878:	4604      	mov	r4, r0
 800d87a:	2202      	movs	r2, #2
 800d87c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d880:	4628      	mov	r0, r5
 800d882:	f005 f8f1 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d886:	4020      	ands	r0, r4
 800d888:	b2c4      	uxtb	r4, r0
 800d88a:	e7c6      	b.n	800d81a <uxr_deserialize_ObjectVariant+0x2a>
 800d88c:	1d31      	adds	r1, r6, #4
 800d88e:	4628      	mov	r0, r5
 800d890:	f005 f992 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800d894:	4604      	mov	r4, r0
 800d896:	b130      	cbz	r0, 800d8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d898:	7933      	ldrb	r3, [r6, #4]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d036      	beq.n	800d90c <uxr_deserialize_ObjectVariant+0x11c>
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d03c      	beq.n	800d91c <uxr_deserialize_ObjectVariant+0x12c>
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d032      	beq.n	800d90c <uxr_deserialize_ObjectVariant+0x11c>
 800d8a6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f005 ff2a 	bl	8013704 <ucdr_deserialize_int16_t>
 800d8b0:	4020      	ands	r0, r4
 800d8b2:	b2c4      	uxtb	r4, r0
 800d8b4:	e7b1      	b.n	800d81a <uxr_deserialize_ObjectVariant+0x2a>
 800d8b6:	1d31      	adds	r1, r6, #4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d8be:	f7ff bbbf 	b.w	800d040 <uxr_deserialize_CLIENT_Representation>
 800d8c2:	2204      	movs	r2, #4
 800d8c4:	18b1      	adds	r1, r6, r2
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	f005 f8ce 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d8cc:	2202      	movs	r2, #2
 800d8ce:	f106 0108 	add.w	r1, r6, #8
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f005 f8c7 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d8da:	2202      	movs	r2, #2
 800d8dc:	4004      	ands	r4, r0
 800d8de:	f106 010a 	add.w	r1, r6, #10
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f005 f8c0 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d8e8:	b2e4      	uxtb	r4, r4
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	f106 010c 	add.w	r1, r6, #12
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	401c      	ands	r4, r3
 800d8f4:	f005 f932 	bl	8012b5c <ucdr_deserialize_bool>
 800d8f8:	4004      	ands	r4, r0
 800d8fa:	e78e      	b.n	800d81a <uxr_deserialize_ObjectVariant+0x2a>
 800d8fc:	68b1      	ldr	r1, [r6, #8]
 800d8fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d902:	4628      	mov	r0, r5
 800d904:	f006 f8aa 	bl	8013a5c <ucdr_deserialize_string>
 800d908:	4604      	mov	r4, r0
 800d90a:	e7b6      	b.n	800d87a <uxr_deserialize_ObjectVariant+0x8a>
 800d90c:	68b1      	ldr	r1, [r6, #8]
 800d90e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d912:	4628      	mov	r0, r5
 800d914:	f006 f8a2 	bl	8013a5c <ucdr_deserialize_string>
 800d918:	4604      	mov	r4, r0
 800d91a:	e7c4      	b.n	800d8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d91c:	f106 0308 	add.w	r3, r6, #8
 800d920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d924:	f106 010c 	add.w	r1, r6, #12
 800d928:	4628      	mov	r0, r5
 800d92a:	f7fd fcbb 	bl	800b2a4 <ucdr_deserialize_sequence_uint8_t>
 800d92e:	4604      	mov	r4, r0
 800d930:	e7b9      	b.n	800d8a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d932:	bf00      	nop

0800d934 <uxr_deserialize_BaseObjectRequest>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	2202      	movs	r2, #2
 800d938:	4605      	mov	r5, r0
 800d93a:	460e      	mov	r6, r1
 800d93c:	f005 f894 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d940:	2202      	movs	r2, #2
 800d942:	4604      	mov	r4, r0
 800d944:	18b1      	adds	r1, r6, r2
 800d946:	4628      	mov	r0, r5
 800d948:	f005 f88e 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800d94c:	4020      	ands	r0, r4
 800d94e:	b2c0      	uxtb	r0, r0
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	bf00      	nop

0800d954 <uxr_serialize_ActivityInfoVariant>:
 800d954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d958:	460d      	mov	r5, r1
 800d95a:	7809      	ldrb	r1, [r1, #0]
 800d95c:	4607      	mov	r7, r0
 800d95e:	f005 f915 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d962:	4681      	mov	r9, r0
 800d964:	b138      	cbz	r0, 800d976 <uxr_serialize_ActivityInfoVariant+0x22>
 800d966:	782b      	ldrb	r3, [r5, #0]
 800d968:	2b06      	cmp	r3, #6
 800d96a:	f000 8082 	beq.w	800da72 <uxr_serialize_ActivityInfoVariant+0x11e>
 800d96e:	2b0d      	cmp	r3, #13
 800d970:	d016      	beq.n	800d9a0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800d972:	2b05      	cmp	r3, #5
 800d974:	d002      	beq.n	800d97c <uxr_serialize_ActivityInfoVariant+0x28>
 800d976:	4648      	mov	r0, r9
 800d978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d980:	4638      	mov	r0, r7
 800d982:	f005 fe3f 	bl	8013604 <ucdr_serialize_int16_t>
 800d986:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d98a:	4681      	mov	r9, r0
 800d98c:	4638      	mov	r0, r7
 800d98e:	f005 fd69 	bl	8013464 <ucdr_serialize_uint64_t>
 800d992:	ea09 0000 	and.w	r0, r9, r0
 800d996:	fa5f f980 	uxtb.w	r9, r0
 800d99a:	4648      	mov	r0, r9
 800d99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d9a4:	4638      	mov	r0, r7
 800d9a6:	f005 fe2d 	bl	8013604 <ucdr_serialize_int16_t>
 800d9aa:	68e9      	ldr	r1, [r5, #12]
 800d9ac:	4681      	mov	r9, r0
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	f005 fb02 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800d9b4:	68eb      	ldr	r3, [r5, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0eb      	beq.n	800d992 <uxr_serialize_ActivityInfoVariant+0x3e>
 800d9ba:	b320      	cbz	r0, 800da06 <uxr_serialize_ActivityInfoVariant+0xb2>
 800d9bc:	f105 080c 	add.w	r8, r5, #12
 800d9c0:	2600      	movs	r6, #0
 800d9c2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800d9c6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800d9ca:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	f005 f8dc 	bl	8012b8c <ucdr_serialize_uint8_t>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d053      	beq.n	800da80 <uxr_serialize_ActivityInfoVariant+0x12c>
 800d9d8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d9dc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800d9e0:	0074      	lsls	r4, r6, #1
 800d9e2:	00c9      	lsls	r1, r1, #3
 800d9e4:	2b03      	cmp	r3, #3
 800d9e6:	d854      	bhi.n	800da92 <uxr_serialize_ActivityInfoVariant+0x13e>
 800d9e8:	e8df f003 	tbb	[pc, r3]
 800d9ec:	02102132 	.word	0x02102132
 800d9f0:	4441      	add	r1, r8
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	6889      	ldr	r1, [r1, #8]
 800d9f6:	f006 f821 	bl	8013a3c <ucdr_serialize_string>
 800d9fa:	68ea      	ldr	r2, [r5, #12]
 800d9fc:	3601      	adds	r6, #1
 800d9fe:	4296      	cmp	r6, r2
 800da00:	d242      	bcs.n	800da88 <uxr_serialize_ActivityInfoVariant+0x134>
 800da02:	2800      	cmp	r0, #0
 800da04:	d1dd      	bne.n	800d9c2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800da06:	f04f 0900 	mov.w	r9, #0
 800da0a:	e7b4      	b.n	800d976 <uxr_serialize_ActivityInfoVariant+0x22>
 800da0c:	3108      	adds	r1, #8
 800da0e:	4441      	add	r1, r8
 800da10:	2210      	movs	r2, #16
 800da12:	4638      	mov	r0, r7
 800da14:	f004 ffc4 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800da18:	4434      	add	r4, r6
 800da1a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800da1e:	4604      	mov	r4, r0
 800da20:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800da22:	4638      	mov	r0, r7
 800da24:	f005 fac8 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800da28:	4020      	ands	r0, r4
 800da2a:	b2c0      	uxtb	r0, r0
 800da2c:	e7e5      	b.n	800d9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800da2e:	3108      	adds	r1, #8
 800da30:	4441      	add	r1, r8
 800da32:	2204      	movs	r2, #4
 800da34:	4638      	mov	r0, r7
 800da36:	f004 ffb3 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800da3a:	4434      	add	r4, r6
 800da3c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800da40:	4604      	mov	r4, r0
 800da42:	8b19      	ldrh	r1, [r3, #24]
 800da44:	4638      	mov	r0, r7
 800da46:	f005 f8cd 	bl	8012be4 <ucdr_serialize_uint16_t>
 800da4a:	4020      	ands	r0, r4
 800da4c:	b2c0      	uxtb	r0, r0
 800da4e:	e7d4      	b.n	800d9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800da50:	3108      	adds	r1, #8
 800da52:	4441      	add	r1, r8
 800da54:	2202      	movs	r2, #2
 800da56:	4638      	mov	r0, r7
 800da58:	f004 ffa2 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800da5c:	4434      	add	r4, r6
 800da5e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800da62:	4604      	mov	r4, r0
 800da64:	7d99      	ldrb	r1, [r3, #22]
 800da66:	4638      	mov	r0, r7
 800da68:	f005 f890 	bl	8012b8c <ucdr_serialize_uint8_t>
 800da6c:	4020      	ands	r0, r4
 800da6e:	b2c0      	uxtb	r0, r0
 800da70:	e7c3      	b.n	800d9fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800da72:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800da76:	4638      	mov	r0, r7
 800da78:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da7c:	f005 bdc2 	b.w	8013604 <ucdr_serialize_int16_t>
 800da80:	68ea      	ldr	r2, [r5, #12]
 800da82:	3601      	adds	r6, #1
 800da84:	42b2      	cmp	r2, r6
 800da86:	d8be      	bhi.n	800da06 <uxr_serialize_ActivityInfoVariant+0xb2>
 800da88:	ea09 0900 	and.w	r9, r9, r0
 800da8c:	fa5f f989 	uxtb.w	r9, r9
 800da90:	e771      	b.n	800d976 <uxr_serialize_ActivityInfoVariant+0x22>
 800da92:	68eb      	ldr	r3, [r5, #12]
 800da94:	3601      	adds	r6, #1
 800da96:	429e      	cmp	r6, r3
 800da98:	f10a 0a18 	add.w	sl, sl, #24
 800da9c:	d395      	bcc.n	800d9ca <uxr_serialize_ActivityInfoVariant+0x76>
 800da9e:	e76a      	b.n	800d976 <uxr_serialize_ActivityInfoVariant+0x22>

0800daa0 <uxr_deserialize_BaseObjectReply>:
 800daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa4:	2202      	movs	r2, #2
 800daa6:	4606      	mov	r6, r0
 800daa8:	460f      	mov	r7, r1
 800daaa:	f004 ffdd 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800daae:	2202      	movs	r2, #2
 800dab0:	18b9      	adds	r1, r7, r2
 800dab2:	4605      	mov	r5, r0
 800dab4:	4630      	mov	r0, r6
 800dab6:	f004 ffd7 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800daba:	1d39      	adds	r1, r7, #4
 800dabc:	4680      	mov	r8, r0
 800dabe:	4630      	mov	r0, r6
 800dac0:	f005 f87a 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dac4:	1d79      	adds	r1, r7, #5
 800dac6:	4604      	mov	r4, r0
 800dac8:	4630      	mov	r0, r6
 800daca:	f005 f875 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dace:	ea05 0508 	and.w	r5, r5, r8
 800dad2:	402c      	ands	r4, r5
 800dad4:	4020      	ands	r0, r4
 800dad6:	b2c0      	uxtb	r0, r0
 800dad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dadc <uxr_serialize_ReadSpecification>:
 800dadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae0:	460e      	mov	r6, r1
 800dae2:	7809      	ldrb	r1, [r1, #0]
 800dae4:	4607      	mov	r7, r0
 800dae6:	f005 f851 	bl	8012b8c <ucdr_serialize_uint8_t>
 800daea:	7871      	ldrb	r1, [r6, #1]
 800daec:	4604      	mov	r4, r0
 800daee:	4638      	mov	r0, r7
 800daf0:	f005 f84c 	bl	8012b8c <ucdr_serialize_uint8_t>
 800daf4:	78b1      	ldrb	r1, [r6, #2]
 800daf6:	4004      	ands	r4, r0
 800daf8:	4638      	mov	r0, r7
 800dafa:	f005 f819 	bl	8012b30 <ucdr_serialize_bool>
 800dafe:	78b3      	ldrb	r3, [r6, #2]
 800db00:	b2e4      	uxtb	r4, r4
 800db02:	4004      	ands	r4, r0
 800db04:	b94b      	cbnz	r3, 800db1a <uxr_serialize_ReadSpecification+0x3e>
 800db06:	7a31      	ldrb	r1, [r6, #8]
 800db08:	4638      	mov	r0, r7
 800db0a:	f005 f811 	bl	8012b30 <ucdr_serialize_bool>
 800db0e:	7a33      	ldrb	r3, [r6, #8]
 800db10:	4004      	ands	r4, r0
 800db12:	b943      	cbnz	r3, 800db26 <uxr_serialize_ReadSpecification+0x4a>
 800db14:	4620      	mov	r0, r4
 800db16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1a:	6871      	ldr	r1, [r6, #4]
 800db1c:	4638      	mov	r0, r7
 800db1e:	f005 ff8d 	bl	8013a3c <ucdr_serialize_string>
 800db22:	4004      	ands	r4, r0
 800db24:	e7ef      	b.n	800db06 <uxr_serialize_ReadSpecification+0x2a>
 800db26:	8971      	ldrh	r1, [r6, #10]
 800db28:	4638      	mov	r0, r7
 800db2a:	f005 f85b 	bl	8012be4 <ucdr_serialize_uint16_t>
 800db2e:	89b1      	ldrh	r1, [r6, #12]
 800db30:	4605      	mov	r5, r0
 800db32:	4638      	mov	r0, r7
 800db34:	f005 f856 	bl	8012be4 <ucdr_serialize_uint16_t>
 800db38:	89f1      	ldrh	r1, [r6, #14]
 800db3a:	4005      	ands	r5, r0
 800db3c:	4638      	mov	r0, r7
 800db3e:	f005 f851 	bl	8012be4 <ucdr_serialize_uint16_t>
 800db42:	8a31      	ldrh	r1, [r6, #16]
 800db44:	4680      	mov	r8, r0
 800db46:	4638      	mov	r0, r7
 800db48:	f005 f84c 	bl	8012be4 <ucdr_serialize_uint16_t>
 800db4c:	b2ed      	uxtb	r5, r5
 800db4e:	4025      	ands	r5, r4
 800db50:	ea08 0505 	and.w	r5, r8, r5
 800db54:	ea00 0405 	and.w	r4, r0, r5
 800db58:	4620      	mov	r0, r4
 800db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db5e:	bf00      	nop

0800db60 <uxr_serialize_CREATE_CLIENT_Payload>:
 800db60:	f7ff ba16 	b.w	800cf90 <uxr_serialize_CLIENT_Representation>

0800db64 <uxr_serialize_CREATE_Payload>:
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	2202      	movs	r2, #2
 800db68:	4607      	mov	r7, r0
 800db6a:	460e      	mov	r6, r1
 800db6c:	f004 ff18 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800db70:	2202      	movs	r2, #2
 800db72:	18b1      	adds	r1, r6, r2
 800db74:	4605      	mov	r5, r0
 800db76:	4638      	mov	r0, r7
 800db78:	f004 ff12 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800db7c:	7931      	ldrb	r1, [r6, #4]
 800db7e:	4604      	mov	r4, r0
 800db80:	4638      	mov	r0, r7
 800db82:	f005 f803 	bl	8012b8c <ucdr_serialize_uint8_t>
 800db86:	b170      	cbz	r0, 800dba6 <uxr_serialize_CREATE_Payload+0x42>
 800db88:	7933      	ldrb	r3, [r6, #4]
 800db8a:	402c      	ands	r4, r5
 800db8c:	3b01      	subs	r3, #1
 800db8e:	b2e4      	uxtb	r4, r4
 800db90:	2b0d      	cmp	r3, #13
 800db92:	d809      	bhi.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800db94:	e8df f003 	tbb	[pc, r3]
 800db98:	23230a4c 	.word	0x23230a4c
 800db9c:	0a0a0a0a 	.word	0x0a0a0a0a
 800dba0:	12121208 	.word	0x12121208
 800dba4:	3e45      	.short	0x3e45
 800dba6:	2400      	movs	r4, #0
 800dba8:	4620      	mov	r0, r4
 800dbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbac:	f106 0108 	add.w	r1, r6, #8
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff faf3 	bl	800d19c <uxr_serialize_DATAWRITER_Representation>
 800dbb6:	4004      	ands	r4, r0
 800dbb8:	4620      	mov	r0, r4
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbbc:	7a31      	ldrb	r1, [r6, #8]
 800dbbe:	4638      	mov	r0, r7
 800dbc0:	f004 ffe4 	bl	8012b8c <ucdr_serialize_uint8_t>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0ee      	beq.n	800dba6 <uxr_serialize_CREATE_Payload+0x42>
 800dbc8:	7a33      	ldrb	r3, [r6, #8]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d001      	beq.n	800dbd2 <uxr_serialize_CREATE_Payload+0x6e>
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d1ea      	bne.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dbd2:	68f1      	ldr	r1, [r6, #12]
 800dbd4:	4638      	mov	r0, r7
 800dbd6:	f005 ff31 	bl	8013a3c <ucdr_serialize_string>
 800dbda:	4004      	ands	r4, r0
 800dbdc:	e7e4      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dbde:	7a31      	ldrb	r1, [r6, #8]
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f004 ffd3 	bl	8012b8c <ucdr_serialize_uint8_t>
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	b158      	cbz	r0, 800dc02 <uxr_serialize_CREATE_Payload+0x9e>
 800dbea:	7a33      	ldrb	r3, [r6, #8]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d034      	beq.n	800dc5a <uxr_serialize_CREATE_Payload+0xf6>
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d106      	bne.n	800dc02 <uxr_serialize_CREATE_Payload+0x9e>
 800dbf4:	68f2      	ldr	r2, [r6, #12]
 800dbf6:	f106 0110 	add.w	r1, r6, #16
 800dbfa:	4638      	mov	r0, r7
 800dbfc:	f7fd fb40 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800dc00:	4605      	mov	r5, r0
 800dc02:	2202      	movs	r2, #2
 800dc04:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f004 fec9 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800dc0e:	4028      	ands	r0, r5
 800dc10:	4004      	ands	r4, r0
 800dc12:	e7c9      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dc14:	f106 0108 	add.w	r1, r6, #8
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7ff f9b9 	bl	800cf90 <uxr_serialize_CLIENT_Representation>
 800dc1e:	4004      	ands	r4, r0
 800dc20:	e7c2      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dc22:	f106 0108 	add.w	r1, r6, #8
 800dc26:	4638      	mov	r0, r7
 800dc28:	f7ff fa6e 	bl	800d108 <uxr_serialize_AGENT_Representation>
 800dc2c:	4004      	ands	r4, r0
 800dc2e:	e7bb      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dc30:	7a31      	ldrb	r1, [r6, #8]
 800dc32:	4638      	mov	r0, r7
 800dc34:	f004 ffaa 	bl	8012b8c <ucdr_serialize_uint8_t>
 800dc38:	4605      	mov	r5, r0
 800dc3a:	b130      	cbz	r0, 800dc4a <uxr_serialize_CREATE_Payload+0xe6>
 800dc3c:	7a33      	ldrb	r3, [r6, #8]
 800dc3e:	2b02      	cmp	r3, #2
 800dc40:	d011      	beq.n	800dc66 <uxr_serialize_CREATE_Payload+0x102>
 800dc42:	2b03      	cmp	r3, #3
 800dc44:	d015      	beq.n	800dc72 <uxr_serialize_CREATE_Payload+0x10e>
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d00d      	beq.n	800dc66 <uxr_serialize_CREATE_Payload+0x102>
 800dc4a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800dc4e:	4638      	mov	r0, r7
 800dc50:	f005 fcd8 	bl	8013604 <ucdr_serialize_int16_t>
 800dc54:	4028      	ands	r0, r5
 800dc56:	4004      	ands	r4, r0
 800dc58:	e7a6      	b.n	800dba8 <uxr_serialize_CREATE_Payload+0x44>
 800dc5a:	68f1      	ldr	r1, [r6, #12]
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	f005 feed 	bl	8013a3c <ucdr_serialize_string>
 800dc62:	4605      	mov	r5, r0
 800dc64:	e7cd      	b.n	800dc02 <uxr_serialize_CREATE_Payload+0x9e>
 800dc66:	68f1      	ldr	r1, [r6, #12]
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f005 fee7 	bl	8013a3c <ucdr_serialize_string>
 800dc6e:	4605      	mov	r5, r0
 800dc70:	e7eb      	b.n	800dc4a <uxr_serialize_CREATE_Payload+0xe6>
 800dc72:	68f2      	ldr	r2, [r6, #12]
 800dc74:	f106 0110 	add.w	r1, r6, #16
 800dc78:	4638      	mov	r0, r7
 800dc7a:	f7fd fb01 	bl	800b280 <ucdr_serialize_sequence_uint8_t>
 800dc7e:	4605      	mov	r5, r0
 800dc80:	e7e3      	b.n	800dc4a <uxr_serialize_CREATE_Payload+0xe6>
 800dc82:	bf00      	nop

0800dc84 <uxr_deserialize_GET_INFO_Payload>:
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	2202      	movs	r2, #2
 800dc88:	4605      	mov	r5, r0
 800dc8a:	460e      	mov	r6, r1
 800dc8c:	f004 feec 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dc90:	2202      	movs	r2, #2
 800dc92:	18b1      	adds	r1, r6, r2
 800dc94:	4604      	mov	r4, r0
 800dc96:	4628      	mov	r0, r5
 800dc98:	f004 fee6 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dc9c:	1d31      	adds	r1, r6, #4
 800dc9e:	4004      	ands	r4, r0
 800dca0:	4628      	mov	r0, r5
 800dca2:	f005 fab9 	bl	8013218 <ucdr_deserialize_uint32_t>
 800dca6:	b2e4      	uxtb	r4, r4
 800dca8:	4020      	ands	r0, r4
 800dcaa:	bd70      	pop	{r4, r5, r6, pc}

0800dcac <uxr_serialize_DELETE_Payload>:
 800dcac:	b570      	push	{r4, r5, r6, lr}
 800dcae:	2202      	movs	r2, #2
 800dcb0:	4605      	mov	r5, r0
 800dcb2:	460e      	mov	r6, r1
 800dcb4:	f004 fe74 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800dcb8:	2202      	movs	r2, #2
 800dcba:	4604      	mov	r4, r0
 800dcbc:	18b1      	adds	r1, r6, r2
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f004 fe6e 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800dcc4:	4020      	ands	r0, r4
 800dcc6:	b2c0      	uxtb	r0, r0
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
 800dcca:	bf00      	nop

0800dccc <uxr_deserialize_STATUS_AGENT_Payload>:
 800dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	4605      	mov	r5, r0
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	f004 ff70 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dcd8:	1c71      	adds	r1, r6, #1
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4628      	mov	r0, r5
 800dcde:	f004 ff6b 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dce2:	2204      	movs	r2, #4
 800dce4:	18b1      	adds	r1, r6, r2
 800dce6:	4680      	mov	r8, r0
 800dce8:	4628      	mov	r0, r5
 800dcea:	f004 febd 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dcee:	f106 0108 	add.w	r1, r6, #8
 800dcf2:	4607      	mov	r7, r0
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f004 feb6 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dcfc:	ea04 0308 	and.w	r3, r4, r8
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	ea03 0407 	and.w	r4, r3, r7
 800dd06:	2202      	movs	r2, #2
 800dd08:	4607      	mov	r7, r0
 800dd0a:	f106 010a 	add.w	r1, r6, #10
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f004 feaa 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dd14:	f106 010c 	add.w	r1, r6, #12
 800dd18:	4603      	mov	r3, r0
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	461d      	mov	r5, r3
 800dd1e:	f004 ff1d 	bl	8012b5c <ucdr_deserialize_bool>
 800dd22:	403c      	ands	r4, r7
 800dd24:	4025      	ands	r5, r4
 800dd26:	4028      	ands	r0, r5
 800dd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd2c <uxr_deserialize_STATUS_Payload>:
 800dd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd30:	2202      	movs	r2, #2
 800dd32:	4606      	mov	r6, r0
 800dd34:	460f      	mov	r7, r1
 800dd36:	f004 fe97 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	18b9      	adds	r1, r7, r2
 800dd3e:	4605      	mov	r5, r0
 800dd40:	4630      	mov	r0, r6
 800dd42:	f004 fe91 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dd46:	1d39      	adds	r1, r7, #4
 800dd48:	4680      	mov	r8, r0
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f004 ff34 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dd50:	1d79      	adds	r1, r7, #5
 800dd52:	4604      	mov	r4, r0
 800dd54:	4630      	mov	r0, r6
 800dd56:	f004 ff2f 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dd5a:	ea05 0508 	and.w	r5, r5, r8
 800dd5e:	402c      	ands	r4, r5
 800dd60:	4020      	ands	r0, r4
 800dd62:	b2c0      	uxtb	r0, r0
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd68 <uxr_serialize_INFO_Payload>:
 800dd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6c:	2202      	movs	r2, #2
 800dd6e:	460c      	mov	r4, r1
 800dd70:	4605      	mov	r5, r0
 800dd72:	f004 fe15 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800dd76:	2202      	movs	r2, #2
 800dd78:	18a1      	adds	r1, r4, r2
 800dd7a:	4680      	mov	r8, r0
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	f004 fe0f 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800dd82:	7921      	ldrb	r1, [r4, #4]
 800dd84:	4607      	mov	r7, r0
 800dd86:	4628      	mov	r0, r5
 800dd88:	f004 ff00 	bl	8012b8c <ucdr_serialize_uint8_t>
 800dd8c:	7961      	ldrb	r1, [r4, #5]
 800dd8e:	4606      	mov	r6, r0
 800dd90:	4628      	mov	r0, r5
 800dd92:	f004 fefb 	bl	8012b8c <ucdr_serialize_uint8_t>
 800dd96:	ea08 0807 	and.w	r8, r8, r7
 800dd9a:	ea06 0608 	and.w	r6, r6, r8
 800dd9e:	4006      	ands	r6, r0
 800dda0:	7a21      	ldrb	r1, [r4, #8]
 800dda2:	4628      	mov	r0, r5
 800dda4:	f004 fec4 	bl	8012b30 <ucdr_serialize_bool>
 800dda8:	7a23      	ldrb	r3, [r4, #8]
 800ddaa:	b2f7      	uxtb	r7, r6
 800ddac:	4606      	mov	r6, r0
 800ddae:	b96b      	cbnz	r3, 800ddcc <uxr_serialize_INFO_Payload+0x64>
 800ddb0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f004 febb 	bl	8012b30 <ucdr_serialize_bool>
 800ddba:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800ddbe:	4030      	ands	r0, r6
 800ddc0:	b2c6      	uxtb	r6, r0
 800ddc2:	b983      	cbnz	r3, 800dde6 <uxr_serialize_INFO_Payload+0x7e>
 800ddc4:	ea06 0007 	and.w	r0, r6, r7
 800ddc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddcc:	7b21      	ldrb	r1, [r4, #12]
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f004 fedc 	bl	8012b8c <ucdr_serialize_uint8_t>
 800ddd4:	b188      	cbz	r0, 800ddfa <uxr_serialize_INFO_Payload+0x92>
 800ddd6:	f104 010c 	add.w	r1, r4, #12
 800ddda:	4628      	mov	r0, r5
 800dddc:	f7ff fa06 	bl	800d1ec <uxr_serialize_ObjectVariant.part.0>
 800dde0:	4030      	ands	r0, r6
 800dde2:	b2c6      	uxtb	r6, r0
 800dde4:	e7e4      	b.n	800ddb0 <uxr_serialize_INFO_Payload+0x48>
 800dde6:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800ddea:	4628      	mov	r0, r5
 800ddec:	f7ff fdb2 	bl	800d954 <uxr_serialize_ActivityInfoVariant>
 800ddf0:	4006      	ands	r6, r0
 800ddf2:	ea06 0007 	and.w	r0, r6, r7
 800ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfa:	4606      	mov	r6, r0
 800ddfc:	e7d8      	b.n	800ddb0 <uxr_serialize_INFO_Payload+0x48>
 800ddfe:	bf00      	nop

0800de00 <uxr_serialize_READ_DATA_Payload>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	2202      	movs	r2, #2
 800de04:	4605      	mov	r5, r0
 800de06:	460e      	mov	r6, r1
 800de08:	f004 fdca 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800de0c:	2202      	movs	r2, #2
 800de0e:	18b1      	adds	r1, r6, r2
 800de10:	4604      	mov	r4, r0
 800de12:	4628      	mov	r0, r5
 800de14:	f004 fdc4 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800de18:	1d31      	adds	r1, r6, #4
 800de1a:	4004      	ands	r4, r0
 800de1c:	4628      	mov	r0, r5
 800de1e:	f7ff fe5d 	bl	800dadc <uxr_serialize_ReadSpecification>
 800de22:	b2e4      	uxtb	r4, r4
 800de24:	4020      	ands	r0, r4
 800de26:	bd70      	pop	{r4, r5, r6, pc}

0800de28 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	2202      	movs	r2, #2
 800de2c:	4605      	mov	r5, r0
 800de2e:	460e      	mov	r6, r1
 800de30:	f004 fdb6 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800de34:	2202      	movs	r2, #2
 800de36:	4604      	mov	r4, r0
 800de38:	18b1      	adds	r1, r6, r2
 800de3a:	4628      	mov	r0, r5
 800de3c:	f004 fdb0 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800de40:	4020      	ands	r0, r4
 800de42:	b2c0      	uxtb	r0, r0
 800de44:	bd70      	pop	{r4, r5, r6, pc}
 800de46:	bf00      	nop

0800de48 <uxr_serialize_ACKNACK_Payload>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	460c      	mov	r4, r1
 800de4c:	460e      	mov	r6, r1
 800de4e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800de52:	4605      	mov	r5, r0
 800de54:	f004 fec6 	bl	8012be4 <ucdr_serialize_uint16_t>
 800de58:	2202      	movs	r2, #2
 800de5a:	4621      	mov	r1, r4
 800de5c:	4604      	mov	r4, r0
 800de5e:	4628      	mov	r0, r5
 800de60:	f004 fd9e 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800de64:	7931      	ldrb	r1, [r6, #4]
 800de66:	4004      	ands	r4, r0
 800de68:	4628      	mov	r0, r5
 800de6a:	f004 fe8f 	bl	8012b8c <ucdr_serialize_uint8_t>
 800de6e:	b2e4      	uxtb	r4, r4
 800de70:	4020      	ands	r0, r4
 800de72:	bd70      	pop	{r4, r5, r6, pc}

0800de74 <uxr_deserialize_ACKNACK_Payload>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4605      	mov	r5, r0
 800de78:	460e      	mov	r6, r1
 800de7a:	f004 ffb3 	bl	8012de4 <ucdr_deserialize_uint16_t>
 800de7e:	2202      	movs	r2, #2
 800de80:	18b1      	adds	r1, r6, r2
 800de82:	4604      	mov	r4, r0
 800de84:	4628      	mov	r0, r5
 800de86:	f004 fdef 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800de8a:	1d31      	adds	r1, r6, #4
 800de8c:	4004      	ands	r4, r0
 800de8e:	4628      	mov	r0, r5
 800de90:	f004 fe92 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800de94:	b2e4      	uxtb	r4, r4
 800de96:	4020      	ands	r0, r4
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	bf00      	nop

0800de9c <uxr_serialize_HEARTBEAT_Payload>:
 800de9c:	b570      	push	{r4, r5, r6, lr}
 800de9e:	460d      	mov	r5, r1
 800dea0:	8809      	ldrh	r1, [r1, #0]
 800dea2:	4606      	mov	r6, r0
 800dea4:	f004 fe9e 	bl	8012be4 <ucdr_serialize_uint16_t>
 800dea8:	8869      	ldrh	r1, [r5, #2]
 800deaa:	4604      	mov	r4, r0
 800deac:	4630      	mov	r0, r6
 800deae:	f004 fe99 	bl	8012be4 <ucdr_serialize_uint16_t>
 800deb2:	7929      	ldrb	r1, [r5, #4]
 800deb4:	4004      	ands	r4, r0
 800deb6:	4630      	mov	r0, r6
 800deb8:	f004 fe68 	bl	8012b8c <ucdr_serialize_uint8_t>
 800debc:	b2e4      	uxtb	r4, r4
 800debe:	4020      	ands	r0, r4
 800dec0:	bd70      	pop	{r4, r5, r6, pc}
 800dec2:	bf00      	nop

0800dec4 <uxr_deserialize_HEARTBEAT_Payload>:
 800dec4:	b570      	push	{r4, r5, r6, lr}
 800dec6:	4605      	mov	r5, r0
 800dec8:	460e      	mov	r6, r1
 800deca:	f004 ff8b 	bl	8012de4 <ucdr_deserialize_uint16_t>
 800dece:	1cb1      	adds	r1, r6, #2
 800ded0:	4604      	mov	r4, r0
 800ded2:	4628      	mov	r0, r5
 800ded4:	f004 ff86 	bl	8012de4 <ucdr_deserialize_uint16_t>
 800ded8:	1d31      	adds	r1, r6, #4
 800deda:	4004      	ands	r4, r0
 800dedc:	4628      	mov	r0, r5
 800dede:	f004 fe6b 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dee2:	b2e4      	uxtb	r4, r4
 800dee4:	4020      	ands	r0, r4
 800dee6:	bd70      	pop	{r4, r5, r6, pc}

0800dee8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deec:	4605      	mov	r5, r0
 800deee:	460e      	mov	r6, r1
 800def0:	f005 fd14 	bl	801391c <ucdr_deserialize_int32_t>
 800def4:	1d31      	adds	r1, r6, #4
 800def6:	4607      	mov	r7, r0
 800def8:	4628      	mov	r0, r5
 800defa:	f005 f98d 	bl	8013218 <ucdr_deserialize_uint32_t>
 800defe:	f106 0108 	add.w	r1, r6, #8
 800df02:	4680      	mov	r8, r0
 800df04:	4628      	mov	r0, r5
 800df06:	f005 fd09 	bl	801391c <ucdr_deserialize_int32_t>
 800df0a:	f106 010c 	add.w	r1, r6, #12
 800df0e:	4604      	mov	r4, r0
 800df10:	4628      	mov	r0, r5
 800df12:	f005 f981 	bl	8013218 <ucdr_deserialize_uint32_t>
 800df16:	ea07 0708 	and.w	r7, r7, r8
 800df1a:	403c      	ands	r4, r7
 800df1c:	f106 0110 	add.w	r1, r6, #16
 800df20:	4004      	ands	r4, r0
 800df22:	4628      	mov	r0, r5
 800df24:	f005 fcfa 	bl	801391c <ucdr_deserialize_int32_t>
 800df28:	f106 0114 	add.w	r1, r6, #20
 800df2c:	4607      	mov	r7, r0
 800df2e:	4628      	mov	r0, r5
 800df30:	f005 f972 	bl	8013218 <ucdr_deserialize_uint32_t>
 800df34:	b2e4      	uxtb	r4, r4
 800df36:	403c      	ands	r4, r7
 800df38:	4020      	ands	r0, r4
 800df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3e:	bf00      	nop

0800df40 <uxr_serialize_SampleIdentity>:
 800df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df44:	220c      	movs	r2, #12
 800df46:	4604      	mov	r4, r0
 800df48:	460d      	mov	r5, r1
 800df4a:	f004 fd29 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800df4e:	2203      	movs	r2, #3
 800df50:	f105 010c 	add.w	r1, r5, #12
 800df54:	4607      	mov	r7, r0
 800df56:	4620      	mov	r0, r4
 800df58:	f004 fd22 	bl	80129a0 <ucdr_serialize_array_uint8_t>
 800df5c:	7be9      	ldrb	r1, [r5, #15]
 800df5e:	4680      	mov	r8, r0
 800df60:	4620      	mov	r0, r4
 800df62:	f004 fe13 	bl	8012b8c <ucdr_serialize_uint8_t>
 800df66:	6929      	ldr	r1, [r5, #16]
 800df68:	4606      	mov	r6, r0
 800df6a:	4620      	mov	r0, r4
 800df6c:	f005 fc3e 	bl	80137ec <ucdr_serialize_int32_t>
 800df70:	6969      	ldr	r1, [r5, #20]
 800df72:	4603      	mov	r3, r0
 800df74:	4620      	mov	r0, r4
 800df76:	ea07 0708 	and.w	r7, r7, r8
 800df7a:	461c      	mov	r4, r3
 800df7c:	f005 f81c 	bl	8012fb8 <ucdr_serialize_uint32_t>
 800df80:	403e      	ands	r6, r7
 800df82:	4034      	ands	r4, r6
 800df84:	4020      	ands	r0, r4
 800df86:	b2c0      	uxtb	r0, r0
 800df88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df8c <uxr_deserialize_SampleIdentity>:
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	220c      	movs	r2, #12
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	f004 fd67 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800df9a:	2203      	movs	r2, #3
 800df9c:	f105 010c 	add.w	r1, r5, #12
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f004 fd60 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 800dfa8:	f105 010f 	add.w	r1, r5, #15
 800dfac:	4680      	mov	r8, r0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f004 fe02 	bl	8012bb8 <ucdr_deserialize_uint8_t>
 800dfb4:	f105 0110 	add.w	r1, r5, #16
 800dfb8:	4606      	mov	r6, r0
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f005 fcae 	bl	801391c <ucdr_deserialize_int32_t>
 800dfc0:	f105 0114 	add.w	r1, r5, #20
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	ea07 0708 	and.w	r7, r7, r8
 800dfcc:	461c      	mov	r4, r3
 800dfce:	f005 f923 	bl	8013218 <ucdr_deserialize_uint32_t>
 800dfd2:	403e      	ands	r6, r7
 800dfd4:	4034      	ands	r4, r6
 800dfd6:	4020      	ands	r0, r4
 800dfd8:	b2c0      	uxtb	r0, r0
 800dfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfde:	bf00      	nop

0800dfe0 <rcl_client_get_rmw_handle>:
 800dfe0:	b118      	cbz	r0, 800dfea <rcl_client_get_rmw_handle+0xa>
 800dfe2:	6800      	ldr	r0, [r0, #0]
 800dfe4:	b108      	cbz	r0, 800dfea <rcl_client_get_rmw_handle+0xa>
 800dfe6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800dfea:	4770      	bx	lr

0800dfec <rcl_send_request>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	b1e8      	cbz	r0, 800e02e <rcl_send_request+0x42>
 800dff2:	4604      	mov	r4, r0
 800dff4:	6800      	ldr	r0, [r0, #0]
 800dff6:	b1d0      	cbz	r0, 800e02e <rcl_send_request+0x42>
 800dff8:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800dffc:	b1bb      	cbz	r3, 800e02e <rcl_send_request+0x42>
 800dffe:	460e      	mov	r6, r1
 800e000:	b1d1      	cbz	r1, 800e038 <rcl_send_request+0x4c>
 800e002:	4615      	mov	r5, r2
 800e004:	b1c2      	cbz	r2, 800e038 <rcl_send_request+0x4c>
 800e006:	2105      	movs	r1, #5
 800e008:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e00c:	f002 fd74 	bl	8010af8 <__atomic_load_8>
 800e010:	6823      	ldr	r3, [r4, #0]
 800e012:	e9c5 0100 	strd	r0, r1, [r5]
 800e016:	462a      	mov	r2, r5
 800e018:	4631      	mov	r1, r6
 800e01a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e01e:	f003 ff1f 	bl	8011e60 <rmw_send_request>
 800e022:	4606      	mov	r6, r0
 800e024:	b160      	cbz	r0, 800e040 <rcl_send_request+0x54>
 800e026:	2601      	movs	r6, #1
 800e028:	4630      	mov	r0, r6
 800e02a:	b002      	add	sp, #8
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
 800e02e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800e032:	4630      	mov	r0, r6
 800e034:	b002      	add	sp, #8
 800e036:	bd70      	pop	{r4, r5, r6, pc}
 800e038:	260b      	movs	r6, #11
 800e03a:	4630      	mov	r0, r6
 800e03c:	b002      	add	sp, #8
 800e03e:	bd70      	pop	{r4, r5, r6, pc}
 800e040:	6820      	ldr	r0, [r4, #0]
 800e042:	2105      	movs	r1, #5
 800e044:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e048:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e04c:	9100      	str	r1, [sp, #0]
 800e04e:	f002 fdbf 	bl	8010bd0 <__atomic_exchange_8>
 800e052:	4630      	mov	r0, r6
 800e054:	b002      	add	sp, #8
 800e056:	bd70      	pop	{r4, r5, r6, pc}

0800e058 <rcl_take_response>:
 800e058:	b570      	push	{r4, r5, r6, lr}
 800e05a:	468e      	mov	lr, r1
 800e05c:	460c      	mov	r4, r1
 800e05e:	4616      	mov	r6, r2
 800e060:	4605      	mov	r5, r0
 800e062:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e066:	b08c      	sub	sp, #48	@ 0x30
 800e068:	f10d 0c18 	add.w	ip, sp, #24
 800e06c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e070:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e074:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e078:	b35d      	cbz	r5, 800e0d2 <rcl_take_response+0x7a>
 800e07a:	682b      	ldr	r3, [r5, #0]
 800e07c:	b34b      	cbz	r3, 800e0d2 <rcl_take_response+0x7a>
 800e07e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e082:	b330      	cbz	r0, 800e0d2 <rcl_take_response+0x7a>
 800e084:	b346      	cbz	r6, 800e0d8 <rcl_take_response+0x80>
 800e086:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e0e0 <rcl_take_response+0x88>
 800e08a:	2300      	movs	r3, #0
 800e08c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e090:	4632      	mov	r2, r6
 800e092:	f10d 0307 	add.w	r3, sp, #7
 800e096:	a902      	add	r1, sp, #8
 800e098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e09c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e0a0:	f003 ffe6 	bl	8012070 <rmw_take_response>
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	b9c8      	cbnz	r0, 800e0dc <rcl_take_response+0x84>
 800e0a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e0ac:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e0b0:	2a00      	cmp	r2, #0
 800e0b2:	bf08      	it	eq
 800e0b4:	461d      	moveq	r5, r3
 800e0b6:	f10d 0e18 	add.w	lr, sp, #24
 800e0ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0be:	46a4      	mov	ip, r4
 800e0c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e0c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	b00c      	add	sp, #48	@ 0x30
 800e0d0:	bd70      	pop	{r4, r5, r6, pc}
 800e0d2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800e0d6:	e7ee      	b.n	800e0b6 <rcl_take_response+0x5e>
 800e0d8:	250b      	movs	r5, #11
 800e0da:	e7ec      	b.n	800e0b6 <rcl_take_response+0x5e>
 800e0dc:	2501      	movs	r5, #1
 800e0de:	e7ea      	b.n	800e0b6 <rcl_take_response+0x5e>
	...

0800e0e8 <rcl_client_is_valid>:
 800e0e8:	b130      	cbz	r0, 800e0f8 <rcl_client_is_valid+0x10>
 800e0ea:	6800      	ldr	r0, [r0, #0]
 800e0ec:	b120      	cbz	r0, 800e0f8 <rcl_client_is_valid+0x10>
 800e0ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e0f2:	3800      	subs	r0, #0
 800e0f4:	bf18      	it	ne
 800e0f6:	2001      	movne	r0, #1
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop

0800e0fc <rcl_convert_rmw_ret_to_rcl_ret>:
 800e0fc:	280b      	cmp	r0, #11
 800e0fe:	dc0d      	bgt.n	800e11c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e100:	2800      	cmp	r0, #0
 800e102:	db09      	blt.n	800e118 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e104:	280b      	cmp	r0, #11
 800e106:	d807      	bhi.n	800e118 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e108:	e8df f000 	tbb	[pc, r0]
 800e10c:	07060607 	.word	0x07060607
 800e110:	06060606 	.word	0x06060606
 800e114:	07070606 	.word	0x07070606
 800e118:	2001      	movs	r0, #1
 800e11a:	4770      	bx	lr
 800e11c:	28cb      	cmp	r0, #203	@ 0xcb
 800e11e:	bf18      	it	ne
 800e120:	2001      	movne	r0, #1
 800e122:	4770      	bx	lr

0800e124 <rcl_get_zero_initialized_context>:
 800e124:	4a03      	ldr	r2, [pc, #12]	@ (800e134 <rcl_get_zero_initialized_context+0x10>)
 800e126:	4603      	mov	r3, r0
 800e128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e12c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e130:	4618      	mov	r0, r3
 800e132:	4770      	bx	lr
 800e134:	0801944c 	.word	0x0801944c

0800e138 <rcl_context_is_valid>:
 800e138:	b118      	cbz	r0, 800e142 <rcl_context_is_valid+0xa>
 800e13a:	6840      	ldr	r0, [r0, #4]
 800e13c:	3800      	subs	r0, #0
 800e13e:	bf18      	it	ne
 800e140:	2001      	movne	r0, #1
 800e142:	4770      	bx	lr

0800e144 <__cleanup_context>:
 800e144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e148:	4606      	mov	r6, r0
 800e14a:	6800      	ldr	r0, [r0, #0]
 800e14c:	2300      	movs	r3, #0
 800e14e:	6073      	str	r3, [r6, #4]
 800e150:	2800      	cmp	r0, #0
 800e152:	d049      	beq.n	800e1e8 <__cleanup_context+0xa4>
 800e154:	6947      	ldr	r7, [r0, #20]
 800e156:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e15a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e15e:	b137      	cbz	r7, 800e16e <__cleanup_context+0x2a>
 800e160:	3014      	adds	r0, #20
 800e162:	f000 f9bb 	bl	800e4dc <rcl_init_options_fini>
 800e166:	4607      	mov	r7, r0
 800e168:	2800      	cmp	r0, #0
 800e16a:	d144      	bne.n	800e1f6 <__cleanup_context+0xb2>
 800e16c:	6830      	ldr	r0, [r6, #0]
 800e16e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e170:	b143      	cbz	r3, 800e184 <__cleanup_context+0x40>
 800e172:	3028      	adds	r0, #40	@ 0x28
 800e174:	f003 fcbc 	bl	8011af0 <rmw_context_fini>
 800e178:	b118      	cbz	r0, 800e182 <__cleanup_context+0x3e>
 800e17a:	2f00      	cmp	r7, #0
 800e17c:	d03e      	beq.n	800e1fc <__cleanup_context+0xb8>
 800e17e:	f7fc f963 	bl	800a448 <rcutils_reset_error>
 800e182:	6830      	ldr	r0, [r6, #0]
 800e184:	6a03      	ldr	r3, [r0, #32]
 800e186:	b1db      	cbz	r3, 800e1c0 <__cleanup_context+0x7c>
 800e188:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e18c:	2a01      	cmp	r2, #1
 800e18e:	f17c 0100 	sbcs.w	r1, ip, #0
 800e192:	db11      	blt.n	800e1b8 <__cleanup_context+0x74>
 800e194:	2400      	movs	r4, #0
 800e196:	4625      	mov	r5, r4
 800e198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e19c:	4649      	mov	r1, r9
 800e19e:	b1b8      	cbz	r0, 800e1d0 <__cleanup_context+0x8c>
 800e1a0:	47c0      	blx	r8
 800e1a2:	6833      	ldr	r3, [r6, #0]
 800e1a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e1a8:	3401      	adds	r4, #1
 800e1aa:	f145 0500 	adc.w	r5, r5, #0
 800e1ae:	4294      	cmp	r4, r2
 800e1b0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e1b4:	6a1b      	ldr	r3, [r3, #32]
 800e1b6:	dbef      	blt.n	800e198 <__cleanup_context+0x54>
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	47c0      	blx	r8
 800e1be:	6830      	ldr	r0, [r6, #0]
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	47c0      	blx	r8
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e9c6 3300 	strd	r3, r3, [r6]
 800e1ca:	4638      	mov	r0, r7
 800e1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d0:	3401      	adds	r4, #1
 800e1d2:	f145 0500 	adc.w	r5, r5, #0
 800e1d6:	4294      	cmp	r4, r2
 800e1d8:	eb75 010c 	sbcs.w	r1, r5, ip
 800e1dc:	dbdc      	blt.n	800e198 <__cleanup_context+0x54>
 800e1de:	4618      	mov	r0, r3
 800e1e0:	4649      	mov	r1, r9
 800e1e2:	47c0      	blx	r8
 800e1e4:	6830      	ldr	r0, [r6, #0]
 800e1e6:	e7eb      	b.n	800e1c0 <__cleanup_context+0x7c>
 800e1e8:	4607      	mov	r7, r0
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e9c6 3300 	strd	r3, r3, [r6]
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	f7fc f927 	bl	800a448 <rcutils_reset_error>
 800e1fa:	e7b7      	b.n	800e16c <__cleanup_context+0x28>
 800e1fc:	f7ff ff7e 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800e200:	4607      	mov	r7, r0
 800e202:	e7bc      	b.n	800e17e <__cleanup_context+0x3a>

0800e204 <rcl_init>:
 800e204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e208:	1e05      	subs	r5, r0, #0
 800e20a:	b09e      	sub	sp, #120	@ 0x78
 800e20c:	460e      	mov	r6, r1
 800e20e:	4690      	mov	r8, r2
 800e210:	461f      	mov	r7, r3
 800e212:	f340 809c 	ble.w	800e34e <rcl_init+0x14a>
 800e216:	2900      	cmp	r1, #0
 800e218:	f000 809c 	beq.w	800e354 <rcl_init+0x150>
 800e21c:	f1a1 0e04 	sub.w	lr, r1, #4
 800e220:	f04f 0c00 	mov.w	ip, #0
 800e224:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e228:	f10c 0c01 	add.w	ip, ip, #1
 800e22c:	2c00      	cmp	r4, #0
 800e22e:	f000 8091 	beq.w	800e354 <rcl_init+0x150>
 800e232:	4565      	cmp	r5, ip
 800e234:	d1f6      	bne.n	800e224 <rcl_init+0x20>
 800e236:	f1b8 0f00 	cmp.w	r8, #0
 800e23a:	f000 808b 	beq.w	800e354 <rcl_init+0x150>
 800e23e:	f8d8 4000 	ldr.w	r4, [r8]
 800e242:	2c00      	cmp	r4, #0
 800e244:	f000 8086 	beq.w	800e354 <rcl_init+0x150>
 800e248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e24a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800e24e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e252:	6823      	ldr	r3, [r4, #0]
 800e254:	f8cc 3000 	str.w	r3, [ip]
 800e258:	a819      	add	r0, sp, #100	@ 0x64
 800e25a:	f7fc f8d1 	bl	800a400 <rcutils_allocator_is_valid>
 800e25e:	2800      	cmp	r0, #0
 800e260:	d078      	beq.n	800e354 <rcl_init+0x150>
 800e262:	2f00      	cmp	r7, #0
 800e264:	d076      	beq.n	800e354 <rcl_init+0x150>
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d178      	bne.n	800e35e <rcl_init+0x15a>
 800e26c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e270:	2178      	movs	r1, #120	@ 0x78
 800e272:	2001      	movs	r0, #1
 800e274:	4798      	blx	r3
 800e276:	4604      	mov	r4, r0
 800e278:	6038      	str	r0, [r7, #0]
 800e27a:	2800      	cmp	r0, #0
 800e27c:	f000 80b6 	beq.w	800e3ec <rcl_init+0x1e8>
 800e280:	a802      	add	r0, sp, #8
 800e282:	f002 ff89 	bl	8011198 <rmw_get_zero_initialized_context>
 800e286:	a902      	add	r1, sp, #8
 800e288:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e28c:	2250      	movs	r2, #80	@ 0x50
 800e28e:	ac19      	add	r4, sp, #100	@ 0x64
 800e290:	f008 ff6b 	bl	801716a <memcpy>
 800e294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e296:	f8d7 e000 	ldr.w	lr, [r7]
 800e29a:	46f4      	mov	ip, lr
 800e29c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	f8cc 3000 	str.w	r3, [ip]
 800e2a6:	f10e 0114 	add.w	r1, lr, #20
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	f000 f940 	bl	800e530 <rcl_init_options_copy>
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d144      	bne.n	800e340 <rcl_init+0x13c>
 800e2b6:	f8d7 9000 	ldr.w	r9, [r7]
 800e2ba:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e2be:	f8c9 0020 	str.w	r0, [r9, #32]
 800e2c2:	f8c9 5018 	str.w	r5, [r9, #24]
 800e2c6:	f8c9 801c 	str.w	r8, [r9, #28]
 800e2ca:	2d00      	cmp	r5, #0
 800e2cc:	d04e      	beq.n	800e36c <rcl_init+0x168>
 800e2ce:	2e00      	cmp	r6, #0
 800e2d0:	d04c      	beq.n	800e36c <rcl_init+0x168>
 800e2d2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800e2d6:	2104      	movs	r1, #4
 800e2d8:	4628      	mov	r0, r5
 800e2da:	4798      	blx	r3
 800e2dc:	f8c9 0020 	str.w	r0, [r9, #32]
 800e2e0:	f8d7 9000 	ldr.w	r9, [r7]
 800e2e4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e2e8:	46ca      	mov	sl, r9
 800e2ea:	b343      	cbz	r3, 800e33e <rcl_init+0x13a>
 800e2ec:	2d01      	cmp	r5, #1
 800e2ee:	f178 0300 	sbcs.w	r3, r8, #0
 800e2f2:	db3b      	blt.n	800e36c <rcl_init+0x168>
 800e2f4:	2400      	movs	r4, #0
 800e2f6:	3e04      	subs	r6, #4
 800e2f8:	46a1      	mov	r9, r4
 800e2fa:	e00b      	b.n	800e314 <rcl_init+0x110>
 800e2fc:	6831      	ldr	r1, [r6, #0]
 800e2fe:	f008 ff34 	bl	801716a <memcpy>
 800e302:	3401      	adds	r4, #1
 800e304:	f149 0900 	adc.w	r9, r9, #0
 800e308:	45c8      	cmp	r8, r9
 800e30a:	bf08      	it	eq
 800e30c:	42a5      	cmpeq	r5, r4
 800e30e:	d02b      	beq.n	800e368 <rcl_init+0x164>
 800e310:	f8d7 a000 	ldr.w	sl, [r7]
 800e314:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e318:	f7f1 ffda 	bl	80002d0 <strlen>
 800e31c:	1c42      	adds	r2, r0, #1
 800e31e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e320:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800e322:	f8da a020 	ldr.w	sl, [sl, #32]
 800e326:	9201      	str	r2, [sp, #4]
 800e328:	4610      	mov	r0, r2
 800e32a:	4798      	blx	r3
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	9a01      	ldr	r2, [sp, #4]
 800e336:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d1de      	bne.n	800e2fc <rcl_init+0xf8>
 800e33e:	240a      	movs	r4, #10
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff feff 	bl	800e144 <__cleanup_context>
 800e346:	4620      	mov	r0, r4
 800e348:	b01e      	add	sp, #120	@ 0x78
 800e34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34e:	2900      	cmp	r1, #0
 800e350:	f43f af71 	beq.w	800e236 <rcl_init+0x32>
 800e354:	240b      	movs	r4, #11
 800e356:	4620      	mov	r0, r4
 800e358:	b01e      	add	sp, #120	@ 0x78
 800e35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35e:	2464      	movs	r4, #100	@ 0x64
 800e360:	4620      	mov	r0, r4
 800e362:	b01e      	add	sp, #120	@ 0x78
 800e364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e368:	f8d7 9000 	ldr.w	r9, [r7]
 800e36c:	4926      	ldr	r1, [pc, #152]	@ (800e408 <rcl_init+0x204>)
 800e36e:	680b      	ldr	r3, [r1, #0]
 800e370:	3301      	adds	r3, #1
 800e372:	d036      	beq.n	800e3e2 <rcl_init+0x1de>
 800e374:	600b      	str	r3, [r1, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	2400      	movs	r4, #0
 800e37a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800e37e:	607b      	str	r3, [r7, #4]
 800e380:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800e382:	3301      	adds	r3, #1
 800e384:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800e388:	d034      	beq.n	800e3f4 <rcl_init+0x1f0>
 800e38a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800e38e:	b93b      	cbnz	r3, 800e3a0 <rcl_init+0x19c>
 800e390:	3030      	adds	r0, #48	@ 0x30
 800e392:	f000 f939 	bl	800e608 <rcl_get_localhost_only>
 800e396:	4604      	mov	r4, r0
 800e398:	2800      	cmp	r0, #0
 800e39a:	d1d1      	bne.n	800e340 <rcl_init+0x13c>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	6958      	ldr	r0, [r3, #20]
 800e3a0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800e3a2:	aa18      	add	r2, sp, #96	@ 0x60
 800e3a4:	a917      	add	r1, sp, #92	@ 0x5c
 800e3a6:	f001 f841 	bl	800f42c <rcl_validate_enclave_name>
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	d1c7      	bne.n	800e340 <rcl_init+0x13c>
 800e3b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e3b2:	b9eb      	cbnz	r3, 800e3f0 <rcl_init+0x1ec>
 800e3b4:	6839      	ldr	r1, [r7, #0]
 800e3b6:	694b      	ldr	r3, [r1, #20]
 800e3b8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800e3ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e3be:	f000 fc3d 	bl	800ec3c <rcl_get_security_options_from_environment>
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	d1bb      	bne.n	800e340 <rcl_init+0x13c>
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6948      	ldr	r0, [r1, #20]
 800e3cc:	3128      	adds	r1, #40	@ 0x28
 800e3ce:	3018      	adds	r0, #24
 800e3d0:	f003 fa58 	bl	8011884 <rmw_init>
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d0bd      	beq.n	800e356 <rcl_init+0x152>
 800e3da:	f7ff fe8f 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800e3de:	4604      	mov	r4, r0
 800e3e0:	e7ae      	b.n	800e340 <rcl_init+0x13c>
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	461c      	mov	r4, r3
 800e3e6:	600a      	str	r2, [r1, #0]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	e7c6      	b.n	800e37a <rcl_init+0x176>
 800e3ec:	240a      	movs	r4, #10
 800e3ee:	e7b2      	b.n	800e356 <rcl_init+0x152>
 800e3f0:	2401      	movs	r4, #1
 800e3f2:	e7a5      	b.n	800e340 <rcl_init+0x13c>
 800e3f4:	3024      	adds	r0, #36	@ 0x24
 800e3f6:	f006 ff25 	bl	8015244 <rcl_get_default_domain_id>
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d19f      	bne.n	800e340 <rcl_init+0x13c>
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	6958      	ldr	r0, [r3, #20]
 800e404:	e7c1      	b.n	800e38a <rcl_init+0x186>
 800e406:	bf00      	nop
 800e408:	20010be4 	.word	0x20010be4

0800e40c <rcl_get_zero_initialized_init_options>:
 800e40c:	2000      	movs	r0, #0
 800e40e:	4770      	bx	lr

0800e410 <rcl_init_options_init>:
 800e410:	b084      	sub	sp, #16
 800e412:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e414:	b097      	sub	sp, #92	@ 0x5c
 800e416:	ae1d      	add	r6, sp, #116	@ 0x74
 800e418:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e41c:	2800      	cmp	r0, #0
 800e41e:	d058      	beq.n	800e4d2 <rcl_init_options_init+0xc2>
 800e420:	6803      	ldr	r3, [r0, #0]
 800e422:	4605      	mov	r5, r0
 800e424:	b133      	cbz	r3, 800e434 <rcl_init_options_init+0x24>
 800e426:	2464      	movs	r4, #100	@ 0x64
 800e428:	4620      	mov	r0, r4
 800e42a:	b017      	add	sp, #92	@ 0x5c
 800e42c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e430:	b004      	add	sp, #16
 800e432:	4770      	bx	lr
 800e434:	4630      	mov	r0, r6
 800e436:	f7fb ffe3 	bl	800a400 <rcutils_allocator_is_valid>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d049      	beq.n	800e4d2 <rcl_init_options_init+0xc2>
 800e43e:	46b4      	mov	ip, r6
 800e440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e444:	ac11      	add	r4, sp, #68	@ 0x44
 800e446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e448:	f8dc 3000 	ldr.w	r3, [ip]
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e450:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e452:	2050      	movs	r0, #80	@ 0x50
 800e454:	4798      	blx	r3
 800e456:	4604      	mov	r4, r0
 800e458:	6028      	str	r0, [r5, #0]
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d03b      	beq.n	800e4d6 <rcl_init_options_init+0xc6>
 800e45e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e462:	4686      	mov	lr, r0
 800e464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e46c:	f8dc 3000 	ldr.w	r3, [ip]
 800e470:	f8ce 3000 	str.w	r3, [lr]
 800e474:	a802      	add	r0, sp, #8
 800e476:	f002 fe9f 	bl	80111b8 <rmw_get_zero_initialized_init_options>
 800e47a:	f10d 0e08 	add.w	lr, sp, #8
 800e47e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e482:	f104 0c18 	add.w	ip, r4, #24
 800e486:	682f      	ldr	r7, [r5, #0]
 800e488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e48c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e494:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e498:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e49c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e4a0:	ac20      	add	r4, sp, #128	@ 0x80
 800e4a2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e4a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e4aa:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e4ae:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e4b2:	f107 0018 	add.w	r0, r7, #24
 800e4b6:	f003 f8ed 	bl	8011694 <rmw_init_options_init>
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d0b3      	beq.n	800e428 <rcl_init_options_init+0x18>
 800e4c0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e4c2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e4c4:	6828      	ldr	r0, [r5, #0]
 800e4c6:	4798      	blx	r3
 800e4c8:	4620      	mov	r0, r4
 800e4ca:	f7ff fe17 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	e7aa      	b.n	800e428 <rcl_init_options_init+0x18>
 800e4d2:	240b      	movs	r4, #11
 800e4d4:	e7a8      	b.n	800e428 <rcl_init_options_init+0x18>
 800e4d6:	240a      	movs	r4, #10
 800e4d8:	e7a6      	b.n	800e428 <rcl_init_options_init+0x18>
 800e4da:	bf00      	nop

0800e4dc <rcl_init_options_fini>:
 800e4dc:	b530      	push	{r4, r5, lr}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	b1f0      	cbz	r0, 800e520 <rcl_init_options_fini+0x44>
 800e4e2:	6803      	ldr	r3, [r0, #0]
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	b1db      	cbz	r3, 800e520 <rcl_init_options_fini+0x44>
 800e4e8:	469c      	mov	ip, r3
 800e4ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4ee:	f10d 0e04 	add.w	lr, sp, #4
 800e4f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4f6:	f8dc 3000 	ldr.w	r3, [ip]
 800e4fa:	f8ce 3000 	str.w	r3, [lr]
 800e4fe:	a801      	add	r0, sp, #4
 800e500:	f7fb ff7e 	bl	800a400 <rcutils_allocator_is_valid>
 800e504:	b160      	cbz	r0, 800e520 <rcl_init_options_fini+0x44>
 800e506:	6820      	ldr	r0, [r4, #0]
 800e508:	3018      	adds	r0, #24
 800e50a:	f003 f973 	bl	80117f4 <rmw_init_options_fini>
 800e50e:	4605      	mov	r5, r0
 800e510:	b950      	cbnz	r0, 800e528 <rcl_init_options_fini+0x4c>
 800e512:	6820      	ldr	r0, [r4, #0]
 800e514:	9b02      	ldr	r3, [sp, #8]
 800e516:	9905      	ldr	r1, [sp, #20]
 800e518:	4798      	blx	r3
 800e51a:	4628      	mov	r0, r5
 800e51c:	b007      	add	sp, #28
 800e51e:	bd30      	pop	{r4, r5, pc}
 800e520:	250b      	movs	r5, #11
 800e522:	4628      	mov	r0, r5
 800e524:	b007      	add	sp, #28
 800e526:	bd30      	pop	{r4, r5, pc}
 800e528:	f7ff fde8 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800e52c:	4605      	mov	r5, r0
 800e52e:	e7f8      	b.n	800e522 <rcl_init_options_fini+0x46>

0800e530 <rcl_init_options_copy>:
 800e530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e534:	b094      	sub	sp, #80	@ 0x50
 800e536:	2800      	cmp	r0, #0
 800e538:	d058      	beq.n	800e5ec <rcl_init_options_copy+0xbc>
 800e53a:	4604      	mov	r4, r0
 800e53c:	6800      	ldr	r0, [r0, #0]
 800e53e:	2800      	cmp	r0, #0
 800e540:	d054      	beq.n	800e5ec <rcl_init_options_copy+0xbc>
 800e542:	460e      	mov	r6, r1
 800e544:	f7fb ff5c 	bl	800a400 <rcutils_allocator_is_valid>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d04f      	beq.n	800e5ec <rcl_init_options_copy+0xbc>
 800e54c:	2e00      	cmp	r6, #0
 800e54e:	d04d      	beq.n	800e5ec <rcl_init_options_copy+0xbc>
 800e550:	6833      	ldr	r3, [r6, #0]
 800e552:	b123      	cbz	r3, 800e55e <rcl_init_options_copy+0x2e>
 800e554:	2464      	movs	r4, #100	@ 0x64
 800e556:	4620      	mov	r0, r4
 800e558:	b014      	add	sp, #80	@ 0x50
 800e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55e:	6827      	ldr	r7, [r4, #0]
 800e560:	46bc      	mov	ip, r7
 800e562:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e566:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e56a:	f8dc 3000 	ldr.w	r3, [ip]
 800e56e:	f8d7 8000 	ldr.w	r8, [r7]
 800e572:	602b      	str	r3, [r5, #0]
 800e574:	4619      	mov	r1, r3
 800e576:	2050      	movs	r0, #80	@ 0x50
 800e578:	47c0      	blx	r8
 800e57a:	4605      	mov	r5, r0
 800e57c:	6030      	str	r0, [r6, #0]
 800e57e:	b3d0      	cbz	r0, 800e5f6 <rcl_init_options_copy+0xc6>
 800e580:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e584:	4686      	mov	lr, r0
 800e586:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e58a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e58e:	f8dc 3000 	ldr.w	r3, [ip]
 800e592:	f8ce 3000 	str.w	r3, [lr]
 800e596:	4668      	mov	r0, sp
 800e598:	f002 fe0e 	bl	80111b8 <rmw_get_zero_initialized_init_options>
 800e59c:	46ee      	mov	lr, sp
 800e59e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5a2:	f105 0c18 	add.w	ip, r5, #24
 800e5a6:	6824      	ldr	r4, [r4, #0]
 800e5a8:	6835      	ldr	r5, [r6, #0]
 800e5aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5be:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e5c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e5c6:	f104 0018 	add.w	r0, r4, #24
 800e5ca:	f105 0118 	add.w	r1, r5, #24
 800e5ce:	f003 f8c9 	bl	8011764 <rmw_init_options_copy>
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d0be      	beq.n	800e556 <rcl_init_options_copy+0x26>
 800e5d8:	f7fb ff20 	bl	800a41c <rcutils_get_error_string>
 800e5dc:	f7fb ff34 	bl	800a448 <rcutils_reset_error>
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7ff ff7b 	bl	800e4dc <rcl_init_options_fini>
 800e5e6:	b140      	cbz	r0, 800e5fa <rcl_init_options_copy+0xca>
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	e7b4      	b.n	800e556 <rcl_init_options_copy+0x26>
 800e5ec:	240b      	movs	r4, #11
 800e5ee:	4620      	mov	r0, r4
 800e5f0:	b014      	add	sp, #80	@ 0x50
 800e5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f6:	240a      	movs	r4, #10
 800e5f8:	e7ad      	b.n	800e556 <rcl_init_options_copy+0x26>
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	b014      	add	sp, #80	@ 0x50
 800e5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e602:	f7ff bd7b 	b.w	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800e606:	bf00      	nop

0800e608 <rcl_get_localhost_only>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	b082      	sub	sp, #8
 800e60c:	2300      	movs	r3, #0
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	b1b8      	cbz	r0, 800e642 <rcl_get_localhost_only+0x3a>
 800e612:	4604      	mov	r4, r0
 800e614:	a901      	add	r1, sp, #4
 800e616:	480c      	ldr	r0, [pc, #48]	@ (800e648 <rcl_get_localhost_only+0x40>)
 800e618:	f002 fb12 	bl	8010c40 <rcutils_get_env>
 800e61c:	b110      	cbz	r0, 800e624 <rcl_get_localhost_only+0x1c>
 800e61e:	2001      	movs	r0, #1
 800e620:	b002      	add	sp, #8
 800e622:	bd10      	pop	{r4, pc}
 800e624:	9b01      	ldr	r3, [sp, #4]
 800e626:	b113      	cbz	r3, 800e62e <rcl_get_localhost_only+0x26>
 800e628:	781a      	ldrb	r2, [r3, #0]
 800e62a:	2a31      	cmp	r2, #49	@ 0x31
 800e62c:	d004      	beq.n	800e638 <rcl_get_localhost_only+0x30>
 800e62e:	2302      	movs	r3, #2
 800e630:	2000      	movs	r0, #0
 800e632:	7023      	strb	r3, [r4, #0]
 800e634:	b002      	add	sp, #8
 800e636:	bd10      	pop	{r4, pc}
 800e638:	785b      	ldrb	r3, [r3, #1]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d1f7      	bne.n	800e62e <rcl_get_localhost_only+0x26>
 800e63e:	2301      	movs	r3, #1
 800e640:	e7f6      	b.n	800e630 <rcl_get_localhost_only+0x28>
 800e642:	200b      	movs	r0, #11
 800e644:	b002      	add	sp, #8
 800e646:	bd10      	pop	{r4, pc}
 800e648:	08019454 	.word	0x08019454

0800e64c <rcl_get_zero_initialized_node>:
 800e64c:	4a03      	ldr	r2, [pc, #12]	@ (800e65c <rcl_get_zero_initialized_node+0x10>)
 800e64e:	4603      	mov	r3, r0
 800e650:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e654:	e883 0003 	stmia.w	r3, {r0, r1}
 800e658:	4618      	mov	r0, r3
 800e65a:	4770      	bx	lr
 800e65c:	0801947c 	.word	0x0801947c

0800e660 <rcl_node_init>:
 800e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e664:	b0a9      	sub	sp, #164	@ 0xa4
 800e666:	4604      	mov	r4, r0
 800e668:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800e66c:	a823      	add	r0, sp, #140	@ 0x8c
 800e66e:	460e      	mov	r6, r1
 800e670:	4615      	mov	r5, r2
 800e672:	461f      	mov	r7, r3
 800e674:	f007 f80e 	bl	8015694 <rcl_guard_condition_get_default_options>
 800e678:	f1b8 0f00 	cmp.w	r8, #0
 800e67c:	f000 80e6 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e680:	4640      	mov	r0, r8
 800e682:	f7fb febd 	bl	800a400 <rcutils_allocator_is_valid>
 800e686:	2800      	cmp	r0, #0
 800e688:	f000 80e0 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	f000 80dd 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e692:	2d00      	cmp	r5, #0
 800e694:	f000 80da 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e698:	2c00      	cmp	r4, #0
 800e69a:	f000 80d7 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e69e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e6a2:	f1b9 0f00 	cmp.w	r9, #0
 800e6a6:	f040 80fd 	bne.w	800e8a4 <rcl_node_init+0x244>
 800e6aa:	2f00      	cmp	r7, #0
 800e6ac:	f000 80ce 	beq.w	800e84c <rcl_node_init+0x1ec>
 800e6b0:	4638      	mov	r0, r7
 800e6b2:	f7ff fd41 	bl	800e138 <rcl_context_is_valid>
 800e6b6:	4682      	mov	sl, r0
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	f000 80cd 	beq.w	800e858 <rcl_node_init+0x1f8>
 800e6be:	464a      	mov	r2, r9
 800e6c0:	a922      	add	r1, sp, #136	@ 0x88
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800e6c8:	f002 ff18 	bl	80114fc <rmw_validate_node_name>
 800e6cc:	4681      	mov	r9, r0
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	f040 80be 	bne.w	800e850 <rcl_node_init+0x1f0>
 800e6d4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f040 80f0 	bne.w	800e8bc <rcl_node_init+0x25c>
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7f1 fdf7 	bl	80002d0 <strlen>
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	f040 80bb 	bne.w	800e85e <rcl_node_init+0x1fe>
 800e6e8:	4d7c      	ldr	r5, [pc, #496]	@ (800e8dc <rcl_node_init+0x27c>)
 800e6ea:	a922      	add	r1, sp, #136	@ 0x88
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f002 fee6 	bl	80114c0 <rmw_validate_namespace>
 800e6f4:	4681      	mov	r9, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f040 80aa 	bne.w	800e850 <rcl_node_init+0x1f0>
 800e6fc:	4682      	mov	sl, r0
 800e6fe:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e700:	2800      	cmp	r0, #0
 800e702:	f040 80e0 	bne.w	800e8c6 <rcl_node_init+0x266>
 800e706:	f8d8 3000 	ldr.w	r3, [r8]
 800e70a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e70e:	2078      	movs	r0, #120	@ 0x78
 800e710:	4798      	blx	r3
 800e712:	4681      	mov	r9, r0
 800e714:	6060      	str	r0, [r4, #4]
 800e716:	2800      	cmp	r0, #0
 800e718:	f000 80ca 	beq.w	800e8b0 <rcl_node_init+0x250>
 800e71c:	2200      	movs	r2, #0
 800e71e:	2300      	movs	r3, #0
 800e720:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800e724:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800e728:	a808      	add	r0, sp, #32
 800e72a:	f000 f907 	bl	800e93c <rcl_node_get_default_options>
 800e72e:	a908      	add	r1, sp, #32
 800e730:	4648      	mov	r0, r9
 800e732:	2268      	movs	r2, #104	@ 0x68
 800e734:	f008 fd19 	bl	801716a <memcpy>
 800e738:	6861      	ldr	r1, [r4, #4]
 800e73a:	6027      	str	r7, [r4, #0]
 800e73c:	4640      	mov	r0, r8
 800e73e:	f000 f90b 	bl	800e958 <rcl_node_options_copy>
 800e742:	2800      	cmp	r0, #0
 800e744:	d158      	bne.n	800e7f8 <rcl_node_init+0x198>
 800e746:	4628      	mov	r0, r5
 800e748:	f7f1 fdc2 	bl	80002d0 <strlen>
 800e74c:	4428      	add	r0, r5
 800e74e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e752:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e756:	2b2f      	cmp	r3, #47	@ 0x2f
 800e758:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e75c:	9300      	str	r3, [sp, #0]
 800e75e:	bf0c      	ite	eq
 800e760:	4b5f      	ldreq	r3, [pc, #380]	@ (800e8e0 <rcl_node_init+0x280>)
 800e762:	4b60      	ldrne	r3, [pc, #384]	@ (800e8e4 <rcl_node_init+0x284>)
 800e764:	9302      	str	r3, [sp, #8]
 800e766:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e76a:	9301      	str	r3, [sp, #4]
 800e76c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e770:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e774:	f002 fa8c 	bl	8010c90 <rcutils_format_string_limit>
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	4631      	mov	r1, r6
 800e782:	3028      	adds	r0, #40	@ 0x28
 800e784:	462a      	mov	r2, r5
 800e786:	6866      	ldr	r6, [r4, #4]
 800e788:	f003 fad0 	bl	8011d2c <rmw_create_node>
 800e78c:	6863      	ldr	r3, [r4, #4]
 800e78e:	66b0      	str	r0, [r6, #104]	@ 0x68
 800e790:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e792:	2800      	cmp	r0, #0
 800e794:	d032      	beq.n	800e7fc <rcl_node_init+0x19c>
 800e796:	f003 fb5d 	bl	8011e54 <rmw_node_get_graph_guard_condition>
 800e79a:	4681      	mov	r9, r0
 800e79c:	b360      	cbz	r0, 800e7f8 <rcl_node_init+0x198>
 800e79e:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7a6:	6866      	ldr	r6, [r4, #4]
 800e7a8:	2008      	movs	r0, #8
 800e7aa:	4798      	blx	r3
 800e7ac:	6863      	ldr	r3, [r4, #4]
 800e7ae:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800e7b0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800e7b4:	f1bb 0f00 	cmp.w	fp, #0
 800e7b8:	d020      	beq.n	800e7fc <rcl_node_init+0x19c>
 800e7ba:	a806      	add	r0, sp, #24
 800e7bc:	f006 feda 	bl	8015574 <rcl_get_zero_initialized_guard_condition>
 800e7c0:	a806      	add	r0, sp, #24
 800e7c2:	c803      	ldmia	r0, {r0, r1}
 800e7c4:	6863      	ldr	r3, [r4, #4]
 800e7c6:	46c4      	mov	ip, r8
 800e7c8:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800e7cc:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e7d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7d4:	ae23      	add	r6, sp, #140	@ 0x8c
 800e7d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e7d8:	f8dc 3000 	ldr.w	r3, [ip]
 800e7dc:	6033      	str	r3, [r6, #0]
 800e7de:	ab28      	add	r3, sp, #160	@ 0xa0
 800e7e0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e7e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e7ec:	463a      	mov	r2, r7
 800e7ee:	4670      	mov	r0, lr
 800e7f0:	f006 feca 	bl	8015588 <rcl_guard_condition_init_from_rmw>
 800e7f4:	4681      	mov	r9, r0
 800e7f6:	b328      	cbz	r0, 800e844 <rcl_node_init+0x1e4>
 800e7f8:	6863      	ldr	r3, [r4, #4]
 800e7fa:	b1f3      	cbz	r3, 800e83a <rcl_node_init+0x1da>
 800e7fc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e7fe:	b128      	cbz	r0, 800e80c <rcl_node_init+0x1ac>
 800e800:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e804:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e808:	4798      	blx	r3
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e80e:	b110      	cbz	r0, 800e816 <rcl_node_init+0x1b6>
 800e810:	f003 faa4 	bl	8011d5c <rmw_destroy_node>
 800e814:	6863      	ldr	r3, [r4, #4]
 800e816:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e818:	b148      	cbz	r0, 800e82e <rcl_node_init+0x1ce>
 800e81a:	f006 ff15 	bl	8015648 <rcl_guard_condition_fini>
 800e81e:	6863      	ldr	r3, [r4, #4]
 800e820:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e824:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e826:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e82a:	4798      	blx	r3
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e832:	4618      	mov	r0, r3
 800e834:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e838:	4798      	blx	r3
 800e83a:	2300      	movs	r3, #0
 800e83c:	e9c4 3300 	strd	r3, r3, [r4]
 800e840:	f04f 0901 	mov.w	r9, #1
 800e844:	f1ba 0f00 	cmp.w	sl, #0
 800e848:	d125      	bne.n	800e896 <rcl_node_init+0x236>
 800e84a:	e001      	b.n	800e850 <rcl_node_init+0x1f0>
 800e84c:	f04f 090b 	mov.w	r9, #11
 800e850:	4648      	mov	r0, r9
 800e852:	b029      	add	sp, #164	@ 0xa4
 800e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e858:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800e85c:	e7f8      	b.n	800e850 <rcl_node_init+0x1f0>
 800e85e:	782b      	ldrb	r3, [r5, #0]
 800e860:	2b2f      	cmp	r3, #47	@ 0x2f
 800e862:	f43f af42 	beq.w	800e6ea <rcl_node_init+0x8a>
 800e866:	9503      	str	r5, [sp, #12]
 800e868:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	4b1e      	ldr	r3, [pc, #120]	@ (800e8e8 <rcl_node_init+0x288>)
 800e870:	9302      	str	r3, [sp, #8]
 800e872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e87c:	f002 fa08 	bl	8010c90 <rcutils_format_string_limit>
 800e880:	4605      	mov	r5, r0
 800e882:	b340      	cbz	r0, 800e8d6 <rcl_node_init+0x276>
 800e884:	2200      	movs	r2, #0
 800e886:	a922      	add	r1, sp, #136	@ 0x88
 800e888:	9222      	str	r2, [sp, #136]	@ 0x88
 800e88a:	f002 fe19 	bl	80114c0 <rmw_validate_namespace>
 800e88e:	4681      	mov	r9, r0
 800e890:	2800      	cmp	r0, #0
 800e892:	f43f af34 	beq.w	800e6fe <rcl_node_init+0x9e>
 800e896:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e89a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e89e:	4628      	mov	r0, r5
 800e8a0:	4798      	blx	r3
 800e8a2:	e7d5      	b.n	800e850 <rcl_node_init+0x1f0>
 800e8a4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800e8a8:	4648      	mov	r0, r9
 800e8aa:	b029      	add	sp, #164	@ 0xa4
 800e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b0:	f04f 090a 	mov.w	r9, #10
 800e8b4:	f1ba 0f00 	cmp.w	sl, #0
 800e8b8:	d1ed      	bne.n	800e896 <rcl_node_init+0x236>
 800e8ba:	e7c9      	b.n	800e850 <rcl_node_init+0x1f0>
 800e8bc:	f002 fe70 	bl	80115a0 <rmw_node_name_validation_result_string>
 800e8c0:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800e8c4:	e7c4      	b.n	800e850 <rcl_node_init+0x1f0>
 800e8c6:	f002 fe0d 	bl	80114e4 <rmw_namespace_validation_result_string>
 800e8ca:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800e8ce:	f1ba 0f00 	cmp.w	sl, #0
 800e8d2:	d1e0      	bne.n	800e896 <rcl_node_init+0x236>
 800e8d4:	e7bc      	b.n	800e850 <rcl_node_init+0x1f0>
 800e8d6:	f04f 090a 	mov.w	r9, #10
 800e8da:	e7b9      	b.n	800e850 <rcl_node_init+0x1f0>
 800e8dc:	0801946c 	.word	0x0801946c
 800e8e0:	080192f0 	.word	0x080192f0
 800e8e4:	08019474 	.word	0x08019474
 800e8e8:	08019470 	.word	0x08019470

0800e8ec <rcl_node_is_valid>:
 800e8ec:	b130      	cbz	r0, 800e8fc <rcl_node_is_valid+0x10>
 800e8ee:	6843      	ldr	r3, [r0, #4]
 800e8f0:	b123      	cbz	r3, 800e8fc <rcl_node_is_valid+0x10>
 800e8f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e8f4:	b113      	cbz	r3, 800e8fc <rcl_node_is_valid+0x10>
 800e8f6:	6800      	ldr	r0, [r0, #0]
 800e8f8:	f7ff bc1e 	b.w	800e138 <rcl_context_is_valid>
 800e8fc:	2000      	movs	r0, #0
 800e8fe:	4770      	bx	lr

0800e900 <rcl_node_get_name>:
 800e900:	b120      	cbz	r0, 800e90c <rcl_node_get_name+0xc>
 800e902:	6840      	ldr	r0, [r0, #4]
 800e904:	b110      	cbz	r0, 800e90c <rcl_node_get_name+0xc>
 800e906:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e908:	b100      	cbz	r0, 800e90c <rcl_node_get_name+0xc>
 800e90a:	6880      	ldr	r0, [r0, #8]
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop

0800e910 <rcl_node_get_namespace>:
 800e910:	b120      	cbz	r0, 800e91c <rcl_node_get_namespace+0xc>
 800e912:	6840      	ldr	r0, [r0, #4]
 800e914:	b110      	cbz	r0, 800e91c <rcl_node_get_namespace+0xc>
 800e916:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e918:	b100      	cbz	r0, 800e91c <rcl_node_get_namespace+0xc>
 800e91a:	68c0      	ldr	r0, [r0, #12]
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop

0800e920 <rcl_node_get_options>:
 800e920:	b128      	cbz	r0, 800e92e <rcl_node_get_options+0xe>
 800e922:	6840      	ldr	r0, [r0, #4]
 800e924:	b118      	cbz	r0, 800e92e <rcl_node_get_options+0xe>
 800e926:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bf08      	it	eq
 800e92c:	2000      	moveq	r0, #0
 800e92e:	4770      	bx	lr

0800e930 <rcl_node_get_rmw_handle>:
 800e930:	b110      	cbz	r0, 800e938 <rcl_node_get_rmw_handle+0x8>
 800e932:	6840      	ldr	r0, [r0, #4]
 800e934:	b100      	cbz	r0, 800e938 <rcl_node_get_rmw_handle+0x8>
 800e936:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop

0800e93c <rcl_node_get_default_options>:
 800e93c:	b510      	push	{r4, lr}
 800e93e:	2268      	movs	r2, #104	@ 0x68
 800e940:	4604      	mov	r4, r0
 800e942:	2100      	movs	r1, #0
 800e944:	f008 faee 	bl	8016f24 <memset>
 800e948:	4620      	mov	r0, r4
 800e94a:	f7fb fd4b 	bl	800a3e4 <rcutils_get_default_allocator>
 800e94e:	2301      	movs	r3, #1
 800e950:	7523      	strb	r3, [r4, #20]
 800e952:	4620      	mov	r0, r4
 800e954:	bd10      	pop	{r4, pc}
 800e956:	bf00      	nop

0800e958 <rcl_node_options_copy>:
 800e958:	b1d0      	cbz	r0, 800e990 <rcl_node_options_copy+0x38>
 800e95a:	b570      	push	{r4, r5, r6, lr}
 800e95c:	460c      	mov	r4, r1
 800e95e:	b1a9      	cbz	r1, 800e98c <rcl_node_options_copy+0x34>
 800e960:	4288      	cmp	r0, r1
 800e962:	4684      	mov	ip, r0
 800e964:	d012      	beq.n	800e98c <rcl_node_options_copy+0x34>
 800e966:	4605      	mov	r5, r0
 800e968:	8a86      	ldrh	r6, [r0, #20]
 800e96a:	468e      	mov	lr, r1
 800e96c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e96e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e972:	682b      	ldr	r3, [r5, #0]
 800e974:	f8ce 3000 	str.w	r3, [lr]
 800e978:	f10c 0118 	add.w	r1, ip, #24
 800e97c:	2250      	movs	r2, #80	@ 0x50
 800e97e:	82a6      	strh	r6, [r4, #20]
 800e980:	f104 0018 	add.w	r0, r4, #24
 800e984:	f008 fbf1 	bl	801716a <memcpy>
 800e988:	2000      	movs	r0, #0
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	200b      	movs	r0, #11
 800e98e:	bd70      	pop	{r4, r5, r6, pc}
 800e990:	200b      	movs	r0, #11
 800e992:	4770      	bx	lr

0800e994 <rcl_node_resolve_name>:
 800e994:	b082      	sub	sp, #8
 800e996:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	b091      	sub	sp, #68	@ 0x44
 800e99c:	ac1a      	add	r4, sp, #104	@ 0x68
 800e99e:	e884 000c 	stmia.w	r4, {r2, r3}
 800e9a2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d03b      	beq.n	800ea22 <rcl_node_resolve_name+0x8e>
 800e9aa:	460c      	mov	r4, r1
 800e9ac:	4605      	mov	r5, r0
 800e9ae:	f7ff ffb7 	bl	800e920 <rcl_node_get_options>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d037      	beq.n	800ea26 <rcl_node_resolve_name+0x92>
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	f7ff ffa2 	bl	800e900 <rcl_node_get_name>
 800e9bc:	4606      	mov	r6, r0
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f7ff ffa6 	bl	800e910 <rcl_node_get_namespace>
 800e9c4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800e9c8:	4681      	mov	r9, r0
 800e9ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e9ce:	ad0b      	add	r5, sp, #44	@ 0x2c
 800e9d0:	46ac      	mov	ip, r5
 800e9d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9d6:	f8de 3000 	ldr.w	r3, [lr]
 800e9da:	f8cc 3000 	str.w	r3, [ip]
 800e9de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9e0:	b1fb      	cbz	r3, 800ea22 <rcl_node_resolve_name+0x8e>
 800e9e2:	468a      	mov	sl, r1
 800e9e4:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800e9e8:	f002 faaa 	bl	8010f40 <rcutils_get_zero_initialized_string_map>
 800e9ec:	ab10      	add	r3, sp, #64	@ 0x40
 800e9ee:	9008      	str	r0, [sp, #32]
 800e9f0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e9f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	e895 000c 	ldmia.w	r5, {r2, r3}
 800e9fe:	a808      	add	r0, sp, #32
 800ea00:	f002 fb16 	bl	8011030 <rcutils_string_map_init>
 800ea04:	4607      	mov	r7, r0
 800ea06:	b180      	cbz	r0, 800ea2a <rcl_node_resolve_name+0x96>
 800ea08:	f7fb fd08 	bl	800a41c <rcutils_get_error_string>
 800ea0c:	f7fb fd1c 	bl	800a448 <rcutils_reset_error>
 800ea10:	2f0a      	cmp	r7, #10
 800ea12:	bf18      	it	ne
 800ea14:	2701      	movne	r7, #1
 800ea16:	4638      	mov	r0, r7
 800ea18:	b011      	add	sp, #68	@ 0x44
 800ea1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1e:	b002      	add	sp, #8
 800ea20:	4770      	bx	lr
 800ea22:	270b      	movs	r7, #11
 800ea24:	e7f7      	b.n	800ea16 <rcl_node_resolve_name+0x82>
 800ea26:	2701      	movs	r7, #1
 800ea28:	e7f5      	b.n	800ea16 <rcl_node_resolve_name+0x82>
 800ea2a:	9009      	str	r0, [sp, #36]	@ 0x24
 800ea2c:	9007      	str	r0, [sp, #28]
 800ea2e:	a808      	add	r0, sp, #32
 800ea30:	f006 fd9a 	bl	8015568 <rcl_get_default_topic_name_substitutions>
 800ea34:	4607      	mov	r7, r0
 800ea36:	b1a8      	cbz	r0, 800ea64 <rcl_node_resolve_name+0xd0>
 800ea38:	280a      	cmp	r0, #10
 800ea3a:	9c07      	ldr	r4, [sp, #28]
 800ea3c:	d000      	beq.n	800ea40 <rcl_node_resolve_name+0xac>
 800ea3e:	2701      	movs	r7, #1
 800ea40:	a808      	add	r0, sp, #32
 800ea42:	f002 fb35 	bl	80110b0 <rcutils_string_map_fini>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d13d      	bne.n	800eac6 <rcl_node_resolve_name+0x132>
 800ea4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea4c:	4659      	mov	r1, fp
 800ea4e:	47d0      	blx	sl
 800ea50:	4659      	mov	r1, fp
 800ea52:	4620      	mov	r0, r4
 800ea54:	47d0      	blx	sl
 800ea56:	f1b8 0f00 	cmp.w	r8, #0
 800ea5a:	d0dc      	beq.n	800ea16 <rcl_node_resolve_name+0x82>
 800ea5c:	2f67      	cmp	r7, #103	@ 0x67
 800ea5e:	bf08      	it	eq
 800ea60:	2768      	moveq	r7, #104	@ 0x68
 800ea62:	e7d8      	b.n	800ea16 <rcl_node_resolve_name+0x82>
 800ea64:	ab09      	add	r3, sp, #36	@ 0x24
 800ea66:	9305      	str	r3, [sp, #20]
 800ea68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea6a:	46ec      	mov	ip, sp
 800ea6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	f8cc 3000 	str.w	r3, [ip]
 800ea76:	464a      	mov	r2, r9
 800ea78:	4631      	mov	r1, r6
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	ab08      	add	r3, sp, #32
 800ea7e:	f006 fc15 	bl	80152ac <rcl_expand_topic_name>
 800ea82:	4607      	mov	r7, r0
 800ea84:	b9b8      	cbnz	r0, 800eab6 <rcl_node_resolve_name+0x122>
 800ea86:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ea88:	9009      	str	r0, [sp, #36]	@ 0x24
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	a90a      	add	r1, sp, #40	@ 0x28
 800ea8e:	4620      	mov	r0, r4
 800ea90:	f002 fc52 	bl	8011338 <rmw_validate_full_topic_name>
 800ea94:	b988      	cbnz	r0, 800eaba <rcl_node_resolve_name+0x126>
 800ea96:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ea98:	b9d5      	cbnz	r5, 800ead0 <rcl_node_resolve_name+0x13c>
 800ea9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ea9c:	a808      	add	r0, sp, #32
 800ea9e:	601c      	str	r4, [r3, #0]
 800eaa0:	f002 fb06 	bl	80110b0 <rcutils_string_map_fini>
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	b1a8      	cbz	r0, 800ead4 <rcl_node_resolve_name+0x140>
 800eaa8:	f7fb fcb8 	bl	800a41c <rcutils_get_error_string>
 800eaac:	462c      	mov	r4, r5
 800eaae:	f7fb fccb 	bl	800a448 <rcutils_reset_error>
 800eab2:	2701      	movs	r7, #1
 800eab4:	e7c9      	b.n	800ea4a <rcl_node_resolve_name+0xb6>
 800eab6:	9c07      	ldr	r4, [sp, #28]
 800eab8:	e7c2      	b.n	800ea40 <rcl_node_resolve_name+0xac>
 800eaba:	f7fb fcaf 	bl	800a41c <rcutils_get_error_string>
 800eabe:	2701      	movs	r7, #1
 800eac0:	f7fb fcc2 	bl	800a448 <rcutils_reset_error>
 800eac4:	e7bc      	b.n	800ea40 <rcl_node_resolve_name+0xac>
 800eac6:	f7fb fca9 	bl	800a41c <rcutils_get_error_string>
 800eaca:	f7fb fcbd 	bl	800a448 <rcutils_reset_error>
 800eace:	e7bc      	b.n	800ea4a <rcl_node_resolve_name+0xb6>
 800ead0:	2767      	movs	r7, #103	@ 0x67
 800ead2:	e7b5      	b.n	800ea40 <rcl_node_resolve_name+0xac>
 800ead4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ead6:	4659      	mov	r1, fp
 800ead8:	47d0      	blx	sl
 800eada:	4659      	mov	r1, fp
 800eadc:	4638      	mov	r0, r7
 800eade:	47d0      	blx	sl
 800eae0:	e799      	b.n	800ea16 <rcl_node_resolve_name+0x82>
 800eae2:	bf00      	nop

0800eae4 <exact_match_lookup>:
 800eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eae6:	f102 0708 	add.w	r7, r2, #8
 800eaea:	460b      	mov	r3, r1
 800eaec:	4614      	mov	r4, r2
 800eaee:	4606      	mov	r6, r0
 800eaf0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800eaf4:	b085      	sub	sp, #20
 800eaf6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eafa:	4618      	mov	r0, r3
 800eafc:	4919      	ldr	r1, [pc, #100]	@ (800eb64 <exact_match_lookup+0x80>)
 800eafe:	e894 000c 	ldmia.w	r4, {r2, r3}
 800eb02:	f002 f8b7 	bl	8010c74 <rcutils_join_path>
 800eb06:	7833      	ldrb	r3, [r6, #0]
 800eb08:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb0a:	4605      	mov	r5, r0
 800eb0c:	d023      	beq.n	800eb56 <exact_match_lookup+0x72>
 800eb0e:	f104 030c 	add.w	r3, r4, #12
 800eb12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb16:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb1a:	1c70      	adds	r0, r6, #1
 800eb1c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eb20:	f002 f8ae 	bl	8010c80 <rcutils_to_native_path>
 800eb24:	4606      	mov	r6, r0
 800eb26:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800eb2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb2e:	4631      	mov	r1, r6
 800eb30:	e894 000c 	ldmia.w	r4, {r2, r3}
 800eb34:	4628      	mov	r0, r5
 800eb36:	f002 f89d 	bl	8010c74 <rcutils_join_path>
 800eb3a:	6862      	ldr	r2, [r4, #4]
 800eb3c:	6921      	ldr	r1, [r4, #16]
 800eb3e:	4603      	mov	r3, r0
 800eb40:	4630      	mov	r0, r6
 800eb42:	461e      	mov	r6, r3
 800eb44:	4790      	blx	r2
 800eb46:	4628      	mov	r0, r5
 800eb48:	6863      	ldr	r3, [r4, #4]
 800eb4a:	6921      	ldr	r1, [r4, #16]
 800eb4c:	4798      	blx	r3
 800eb4e:	4635      	mov	r5, r6
 800eb50:	4628      	mov	r0, r5
 800eb52:	b005      	add	sp, #20
 800eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb56:	7873      	ldrb	r3, [r6, #1]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1d8      	bne.n	800eb0e <exact_match_lookup+0x2a>
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	b005      	add	sp, #20
 800eb60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb62:	bf00      	nop
 800eb64:	080194c0 	.word	0x080194c0

0800eb68 <rcl_get_secure_root>:
 800eb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb6c:	b085      	sub	sp, #20
 800eb6e:	b168      	cbz	r0, 800eb8c <rcl_get_secure_root+0x24>
 800eb70:	4607      	mov	r7, r0
 800eb72:	4608      	mov	r0, r1
 800eb74:	460c      	mov	r4, r1
 800eb76:	f7fb fc43 	bl	800a400 <rcutils_allocator_is_valid>
 800eb7a:	b138      	cbz	r0, 800eb8c <rcl_get_secure_root+0x24>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	482d      	ldr	r0, [pc, #180]	@ (800ec34 <rcl_get_secure_root+0xcc>)
 800eb80:	9303      	str	r3, [sp, #12]
 800eb82:	a903      	add	r1, sp, #12
 800eb84:	f002 f85c 	bl	8010c40 <rcutils_get_env>
 800eb88:	4605      	mov	r5, r0
 800eb8a:	b120      	cbz	r0, 800eb96 <rcl_get_secure_root+0x2e>
 800eb8c:	2500      	movs	r5, #0
 800eb8e:	4628      	mov	r0, r5
 800eb90:	b005      	add	sp, #20
 800eb92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	781a      	ldrb	r2, [r3, #0]
 800eb9a:	2a00      	cmp	r2, #0
 800eb9c:	d0f6      	beq.n	800eb8c <rcl_get_secure_root+0x24>
 800eb9e:	f104 090c 	add.w	r9, r4, #12
 800eba2:	e899 0003 	ldmia.w	r9, {r0, r1}
 800eba6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ebb0:	f002 f988 	bl	8010ec4 <rcutils_strdup>
 800ebb4:	4680      	mov	r8, r0
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d0e8      	beq.n	800eb8c <rcl_get_secure_root+0x24>
 800ebba:	481f      	ldr	r0, [pc, #124]	@ (800ec38 <rcl_get_secure_root+0xd0>)
 800ebbc:	9503      	str	r5, [sp, #12]
 800ebbe:	a903      	add	r1, sp, #12
 800ebc0:	f002 f83e 	bl	8010c40 <rcutils_get_env>
 800ebc4:	b160      	cbz	r0, 800ebe0 <rcl_get_secure_root+0x78>
 800ebc6:	2600      	movs	r6, #0
 800ebc8:	6863      	ldr	r3, [r4, #4]
 800ebca:	6921      	ldr	r1, [r4, #16]
 800ebcc:	4630      	mov	r0, r6
 800ebce:	4798      	blx	r3
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	6863      	ldr	r3, [r4, #4]
 800ebd4:	6921      	ldr	r1, [r4, #16]
 800ebd6:	4798      	blx	r3
 800ebd8:	4628      	mov	r0, r5
 800ebda:	b005      	add	sp, #20
 800ebdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	781e      	ldrb	r6, [r3, #0]
 800ebe4:	b1f6      	cbz	r6, 800ec24 <rcl_get_secure_root+0xbc>
 800ebe6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ebea:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ebf4:	f002 f966 	bl	8010ec4 <rcutils_strdup>
 800ebf8:	4606      	mov	r6, r0
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d0e3      	beq.n	800ebc6 <rcl_get_secure_root+0x5e>
 800ebfe:	4622      	mov	r2, r4
 800ec00:	4641      	mov	r1, r8
 800ec02:	f7ff ff6f 	bl	800eae4 <exact_match_lookup>
 800ec06:	4605      	mov	r5, r0
 800ec08:	2d00      	cmp	r5, #0
 800ec0a:	d0dd      	beq.n	800ebc8 <rcl_get_secure_root+0x60>
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	f002 f82f 	bl	8010c70 <rcutils_is_directory>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2800      	cmp	r0, #0
 800ec16:	d1d7      	bne.n	800ebc8 <rcl_get_secure_root+0x60>
 800ec18:	4628      	mov	r0, r5
 800ec1a:	6921      	ldr	r1, [r4, #16]
 800ec1c:	461d      	mov	r5, r3
 800ec1e:	6863      	ldr	r3, [r4, #4]
 800ec20:	4798      	blx	r3
 800ec22:	e7d1      	b.n	800ebc8 <rcl_get_secure_root+0x60>
 800ec24:	4622      	mov	r2, r4
 800ec26:	4638      	mov	r0, r7
 800ec28:	4641      	mov	r1, r8
 800ec2a:	f7ff ff5b 	bl	800eae4 <exact_match_lookup>
 800ec2e:	4605      	mov	r5, r0
 800ec30:	e7ea      	b.n	800ec08 <rcl_get_secure_root+0xa0>
 800ec32:	bf00      	nop
 800ec34:	080194cc 	.word	0x080194cc
 800ec38:	080194e4 	.word	0x080194e4

0800ec3c <rcl_get_security_options_from_environment>:
 800ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	2300      	movs	r3, #0
 800ec44:	4606      	mov	r6, r0
 800ec46:	460f      	mov	r7, r1
 800ec48:	4820      	ldr	r0, [pc, #128]	@ (800eccc <rcl_get_security_options_from_environment+0x90>)
 800ec4a:	9301      	str	r3, [sp, #4]
 800ec4c:	a901      	add	r1, sp, #4
 800ec4e:	4690      	mov	r8, r2
 800ec50:	f001 fff6 	bl	8010c40 <rcutils_get_env>
 800ec54:	b120      	cbz	r0, 800ec60 <rcl_get_security_options_from_environment+0x24>
 800ec56:	2501      	movs	r5, #1
 800ec58:	4628      	mov	r0, r5
 800ec5a:	b002      	add	sp, #8
 800ec5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec60:	491b      	ldr	r1, [pc, #108]	@ (800ecd0 <rcl_get_security_options_from_environment+0x94>)
 800ec62:	4604      	mov	r4, r0
 800ec64:	9801      	ldr	r0, [sp, #4]
 800ec66:	f7f1 fad3 	bl	8000210 <strcmp>
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	b9e8      	cbnz	r0, 800ecaa <rcl_get_security_options_from_environment+0x6e>
 800ec6e:	9001      	str	r0, [sp, #4]
 800ec70:	f1b8 0f00 	cmp.w	r8, #0
 800ec74:	d020      	beq.n	800ecb8 <rcl_get_security_options_from_environment+0x7c>
 800ec76:	4817      	ldr	r0, [pc, #92]	@ (800ecd4 <rcl_get_security_options_from_environment+0x98>)
 800ec78:	a901      	add	r1, sp, #4
 800ec7a:	f001 ffe1 	bl	8010c40 <rcutils_get_env>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d1e9      	bne.n	800ec56 <rcl_get_security_options_from_environment+0x1a>
 800ec82:	4915      	ldr	r1, [pc, #84]	@ (800ecd8 <rcl_get_security_options_from_environment+0x9c>)
 800ec84:	9801      	ldr	r0, [sp, #4]
 800ec86:	f7f1 fac3 	bl	8000210 <strcmp>
 800ec8a:	fab0 f080 	clz	r0, r0
 800ec8e:	0940      	lsrs	r0, r0, #5
 800ec90:	f888 0000 	strb.w	r0, [r8]
 800ec94:	4639      	mov	r1, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	f7ff ff66 	bl	800eb68 <rcl_get_secure_root>
 800ec9c:	b170      	cbz	r0, 800ecbc <rcl_get_security_options_from_environment+0x80>
 800ec9e:	f8c8 0004 	str.w	r0, [r8, #4]
 800eca2:	4628      	mov	r0, r5
 800eca4:	b002      	add	sp, #8
 800eca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecaa:	4625      	mov	r5, r4
 800ecac:	4628      	mov	r0, r5
 800ecae:	f888 4000 	strb.w	r4, [r8]
 800ecb2:	b002      	add	sp, #8
 800ecb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb8:	250b      	movs	r5, #11
 800ecba:	e7cd      	b.n	800ec58 <rcl_get_security_options_from_environment+0x1c>
 800ecbc:	f898 5000 	ldrb.w	r5, [r8]
 800ecc0:	f1a5 0501 	sub.w	r5, r5, #1
 800ecc4:	fab5 f585 	clz	r5, r5
 800ecc8:	096d      	lsrs	r5, r5, #5
 800ecca:	e7c5      	b.n	800ec58 <rcl_get_security_options_from_environment+0x1c>
 800eccc:	08019484 	.word	0x08019484
 800ecd0:	08019498 	.word	0x08019498
 800ecd4:	080194a0 	.word	0x080194a0
 800ecd8:	080194b8 	.word	0x080194b8

0800ecdc <rcl_service_get_rmw_handle>:
 800ecdc:	b118      	cbz	r0, 800ece6 <rcl_service_get_rmw_handle+0xa>
 800ecde:	6800      	ldr	r0, [r0, #0]
 800ece0:	b108      	cbz	r0, 800ece6 <rcl_service_get_rmw_handle+0xa>
 800ece2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ece6:	4770      	bx	lr

0800ece8 <rcl_take_request>:
 800ece8:	b570      	push	{r4, r5, r6, lr}
 800ecea:	468e      	mov	lr, r1
 800ecec:	460c      	mov	r4, r1
 800ecee:	4616      	mov	r6, r2
 800ecf0:	4605      	mov	r5, r0
 800ecf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecf6:	b08c      	sub	sp, #48	@ 0x30
 800ecf8:	f10d 0c18 	add.w	ip, sp, #24
 800ecfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ed04:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ed08:	b30d      	cbz	r5, 800ed4e <rcl_take_request+0x66>
 800ed0a:	682b      	ldr	r3, [r5, #0]
 800ed0c:	b1fb      	cbz	r3, 800ed4e <rcl_take_request+0x66>
 800ed0e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800ed12:	b1e0      	cbz	r0, 800ed4e <rcl_take_request+0x66>
 800ed14:	b336      	cbz	r6, 800ed64 <rcl_take_request+0x7c>
 800ed16:	2300      	movs	r3, #0
 800ed18:	f88d 3007 	strb.w	r3, [sp, #7]
 800ed1c:	4632      	mov	r2, r6
 800ed1e:	f10d 0307 	add.w	r3, sp, #7
 800ed22:	a902      	add	r1, sp, #8
 800ed24:	f003 f8ea 	bl	8011efc <rmw_take_request>
 800ed28:	4605      	mov	r5, r0
 800ed2a:	b198      	cbz	r0, 800ed54 <rcl_take_request+0x6c>
 800ed2c:	280a      	cmp	r0, #10
 800ed2e:	bf18      	it	ne
 800ed30:	2501      	movne	r5, #1
 800ed32:	f10d 0e18 	add.w	lr, sp, #24
 800ed36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ed3a:	46a4      	mov	ip, r4
 800ed3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed40:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ed44:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ed48:	4628      	mov	r0, r5
 800ed4a:	b00c      	add	sp, #48	@ 0x30
 800ed4c:	bd70      	pop	{r4, r5, r6, pc}
 800ed4e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800ed52:	e7ee      	b.n	800ed32 <rcl_take_request+0x4a>
 800ed54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ed58:	f240 2359 	movw	r3, #601	@ 0x259
 800ed5c:	2a00      	cmp	r2, #0
 800ed5e:	bf08      	it	eq
 800ed60:	461d      	moveq	r5, r3
 800ed62:	e7e6      	b.n	800ed32 <rcl_take_request+0x4a>
 800ed64:	250b      	movs	r5, #11
 800ed66:	e7e4      	b.n	800ed32 <rcl_take_request+0x4a>

0800ed68 <rcl_send_response>:
 800ed68:	b170      	cbz	r0, 800ed88 <rcl_send_response+0x20>
 800ed6a:	6800      	ldr	r0, [r0, #0]
 800ed6c:	b160      	cbz	r0, 800ed88 <rcl_send_response+0x20>
 800ed6e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800ed72:	b148      	cbz	r0, 800ed88 <rcl_send_response+0x20>
 800ed74:	b159      	cbz	r1, 800ed8e <rcl_send_response+0x26>
 800ed76:	b510      	push	{r4, lr}
 800ed78:	b15a      	cbz	r2, 800ed92 <rcl_send_response+0x2a>
 800ed7a:	f003 f91d 	bl	8011fb8 <rmw_send_response>
 800ed7e:	b110      	cbz	r0, 800ed86 <rcl_send_response+0x1e>
 800ed80:	2802      	cmp	r0, #2
 800ed82:	bf18      	it	ne
 800ed84:	2001      	movne	r0, #1
 800ed86:	bd10      	pop	{r4, pc}
 800ed88:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800ed8c:	4770      	bx	lr
 800ed8e:	200b      	movs	r0, #11
 800ed90:	4770      	bx	lr
 800ed92:	200b      	movs	r0, #11
 800ed94:	bd10      	pop	{r4, pc}
 800ed96:	bf00      	nop

0800ed98 <rcl_service_is_valid>:
 800ed98:	b130      	cbz	r0, 800eda8 <rcl_service_is_valid+0x10>
 800ed9a:	6800      	ldr	r0, [r0, #0]
 800ed9c:	b120      	cbz	r0, 800eda8 <rcl_service_is_valid+0x10>
 800ed9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800eda2:	3800      	subs	r0, #0
 800eda4:	bf18      	it	ne
 800eda6:	2001      	movne	r0, #1
 800eda8:	4770      	bx	lr
 800edaa:	bf00      	nop

0800edac <rcl_get_zero_initialized_subscription>:
 800edac:	4b01      	ldr	r3, [pc, #4]	@ (800edb4 <rcl_get_zero_initialized_subscription+0x8>)
 800edae:	6818      	ldr	r0, [r3, #0]
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	08019504 	.word	0x08019504

0800edb8 <rcl_subscription_init>:
 800edb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edbc:	b089      	sub	sp, #36	@ 0x24
 800edbe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800edc0:	b1d6      	cbz	r6, 800edf8 <rcl_subscription_init+0x40>
 800edc2:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800edc6:	4604      	mov	r4, r0
 800edc8:	4648      	mov	r0, r9
 800edca:	460d      	mov	r5, r1
 800edcc:	4690      	mov	r8, r2
 800edce:	461f      	mov	r7, r3
 800edd0:	f7fb fb16 	bl	800a400 <rcutils_allocator_is_valid>
 800edd4:	b180      	cbz	r0, 800edf8 <rcl_subscription_init+0x40>
 800edd6:	b17c      	cbz	r4, 800edf8 <rcl_subscription_init+0x40>
 800edd8:	4628      	mov	r0, r5
 800edda:	f7ff fd87 	bl	800e8ec <rcl_node_is_valid>
 800edde:	2800      	cmp	r0, #0
 800ede0:	d054      	beq.n	800ee8c <rcl_subscription_init+0xd4>
 800ede2:	f1b8 0f00 	cmp.w	r8, #0
 800ede6:	d007      	beq.n	800edf8 <rcl_subscription_init+0x40>
 800ede8:	b137      	cbz	r7, 800edf8 <rcl_subscription_init+0x40>
 800edea:	6823      	ldr	r3, [r4, #0]
 800edec:	b14b      	cbz	r3, 800ee02 <rcl_subscription_init+0x4a>
 800edee:	2764      	movs	r7, #100	@ 0x64
 800edf0:	4638      	mov	r0, r7
 800edf2:	b009      	add	sp, #36	@ 0x24
 800edf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edf8:	270b      	movs	r7, #11
 800edfa:	4638      	mov	r0, r7
 800edfc:	b009      	add	sp, #36	@ 0x24
 800edfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee02:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ee06:	aa07      	add	r2, sp, #28
 800ee08:	9205      	str	r2, [sp, #20]
 800ee0a:	9307      	str	r3, [sp, #28]
 800ee0c:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ee10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ee18:	4639      	mov	r1, r7
 800ee1a:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f7ff fdb8 	bl	800e994 <rcl_node_resolve_name>
 800ee24:	4607      	mov	r7, r0
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d15f      	bne.n	800eeea <rcl_subscription_init+0x132>
 800ee2a:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800ee2e:	21c8      	movs	r1, #200	@ 0xc8
 800ee30:	2001      	movs	r0, #1
 800ee32:	4798      	blx	r3
 800ee34:	6020      	str	r0, [r4, #0]
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d05d      	beq.n	800eef6 <rcl_subscription_init+0x13e>
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	f7ff fd78 	bl	800e930 <rcl_node_get_rmw_handle>
 800ee40:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	9a07      	ldr	r2, [sp, #28]
 800ee48:	6827      	ldr	r7, [r4, #0]
 800ee4a:	4641      	mov	r1, r8
 800ee4c:	4633      	mov	r3, r6
 800ee4e:	f003 f99d 	bl	801218c <rmw_create_subscription>
 800ee52:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ee56:	6827      	ldr	r7, [r4, #0]
 800ee58:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ee5c:	b348      	cbz	r0, 800eeb2 <rcl_subscription_init+0xfa>
 800ee5e:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ee62:	f003 fa75 	bl	8012350 <rmw_subscription_get_actual_qos>
 800ee66:	4607      	mov	r7, r0
 800ee68:	b9a8      	cbnz	r0, 800ee96 <rcl_subscription_init+0xde>
 800ee6a:	6820      	ldr	r0, [r4, #0]
 800ee6c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ee70:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ee74:	2270      	movs	r2, #112	@ 0x70
 800ee76:	4631      	mov	r1, r6
 800ee78:	f008 f977 	bl	801716a <memcpy>
 800ee7c:	9807      	ldr	r0, [sp, #28]
 800ee7e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ee80:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ee82:	4798      	blx	r3
 800ee84:	4638      	mov	r0, r7
 800ee86:	b009      	add	sp, #36	@ 0x24
 800ee88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee8c:	27c8      	movs	r7, #200	@ 0xc8
 800ee8e:	4638      	mov	r0, r7
 800ee90:	b009      	add	sp, #36	@ 0x24
 800ee92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee96:	6827      	ldr	r7, [r4, #0]
 800ee98:	b32f      	cbz	r7, 800eee6 <rcl_subscription_init+0x12e>
 800ee9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ee9e:	b14b      	cbz	r3, 800eeb4 <rcl_subscription_init+0xfc>
 800eea0:	4628      	mov	r0, r5
 800eea2:	f7ff fd45 	bl	800e930 <rcl_node_get_rmw_handle>
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800eeac:	f003 fa60 	bl	8012370 <rmw_destroy_subscription>
 800eeb0:	6827      	ldr	r7, [r4, #0]
 800eeb2:	b197      	cbz	r7, 800eeda <rcl_subscription_init+0x122>
 800eeb4:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7fb faa1 	bl	800a400 <rcutils_allocator_is_valid>
 800eebe:	b158      	cbz	r0, 800eed8 <rcl_subscription_init+0x120>
 800eec0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eec2:	b148      	cbz	r0, 800eed8 <rcl_subscription_init+0x120>
 800eec4:	4629      	mov	r1, r5
 800eec6:	f002 f98b 	bl	80111e0 <rmw_subscription_content_filter_options_fini>
 800eeca:	4605      	mov	r5, r0
 800eecc:	b9b8      	cbnz	r0, 800eefe <rcl_subscription_init+0x146>
 800eece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800eed2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eed4:	4798      	blx	r3
 800eed6:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800eed8:	6827      	ldr	r7, [r4, #0]
 800eeda:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800eedc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800eede:	4638      	mov	r0, r7
 800eee0:	4798      	blx	r3
 800eee2:	2300      	movs	r3, #0
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	2701      	movs	r7, #1
 800eee8:	e7c8      	b.n	800ee7c <rcl_subscription_init+0xc4>
 800eeea:	2867      	cmp	r0, #103	@ 0x67
 800eeec:	d0c6      	beq.n	800ee7c <rcl_subscription_init+0xc4>
 800eeee:	2869      	cmp	r0, #105	@ 0x69
 800eef0:	d003      	beq.n	800eefa <rcl_subscription_init+0x142>
 800eef2:	280a      	cmp	r0, #10
 800eef4:	d1f7      	bne.n	800eee6 <rcl_subscription_init+0x12e>
 800eef6:	270a      	movs	r7, #10
 800eef8:	e7c0      	b.n	800ee7c <rcl_subscription_init+0xc4>
 800eefa:	2767      	movs	r7, #103	@ 0x67
 800eefc:	e7be      	b.n	800ee7c <rcl_subscription_init+0xc4>
 800eefe:	f7ff f8fd 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800ef02:	6827      	ldr	r7, [r4, #0]
 800ef04:	e7e9      	b.n	800eeda <rcl_subscription_init+0x122>
 800ef06:	bf00      	nop

0800ef08 <rcl_subscription_get_default_options>:
 800ef08:	b570      	push	{r4, r5, r6, lr}
 800ef0a:	4d14      	ldr	r5, [pc, #80]	@ (800ef5c <rcl_subscription_get_default_options+0x54>)
 800ef0c:	4914      	ldr	r1, [pc, #80]	@ (800ef60 <rcl_subscription_get_default_options+0x58>)
 800ef0e:	b08a      	sub	sp, #40	@ 0x28
 800ef10:	4604      	mov	r4, r0
 800ef12:	2250      	movs	r2, #80	@ 0x50
 800ef14:	4628      	mov	r0, r5
 800ef16:	f008 f928 	bl	801716a <memcpy>
 800ef1a:	a804      	add	r0, sp, #16
 800ef1c:	f7fb fa62 	bl	800a3e4 <rcutils_get_default_allocator>
 800ef20:	f10d 0c10 	add.w	ip, sp, #16
 800ef24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef28:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ef2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ef30:	466e      	mov	r6, sp
 800ef32:	f8dc 3000 	ldr.w	r3, [ip]
 800ef36:	f8ce 3000 	str.w	r3, [lr]
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	f002 f96a 	bl	8011214 <rmw_get_default_subscription_options>
 800ef40:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ef44:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ef48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ef4c:	2270      	movs	r2, #112	@ 0x70
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4620      	mov	r0, r4
 800ef52:	f008 f90a 	bl	801716a <memcpy>
 800ef56:	4620      	mov	r0, r4
 800ef58:	b00a      	add	sp, #40	@ 0x28
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}
 800ef5c:	20010be8 	.word	0x20010be8
 800ef60:	08019508 	.word	0x08019508

0800ef64 <rcl_take>:
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d04a      	beq.n	800effe <rcl_take+0x9a>
 800ef68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	6800      	ldr	r0, [r0, #0]
 800ef70:	b0a4      	sub	sp, #144	@ 0x90
 800ef72:	2800      	cmp	r0, #0
 800ef74:	d03b      	beq.n	800efee <rcl_take+0x8a>
 800ef76:	461f      	mov	r7, r3
 800ef78:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d036      	beq.n	800efee <rcl_take+0x8a>
 800ef80:	460e      	mov	r6, r1
 800ef82:	2900      	cmp	r1, #0
 800ef84:	d039      	beq.n	800effa <rcl_take+0x96>
 800ef86:	4615      	mov	r5, r2
 800ef88:	2a00      	cmp	r2, #0
 800ef8a:	d03c      	beq.n	800f006 <rcl_take+0xa2>
 800ef8c:	a802      	add	r0, sp, #8
 800ef8e:	f002 f9cb 	bl	8011328 <rmw_get_zero_initialized_message_info>
 800ef92:	f10d 0c08 	add.w	ip, sp, #8
 800ef96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef9a:	46ae      	mov	lr, r5
 800ef9c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800efa0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efa4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800efa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800efb0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800efb4:	f04f 0800 	mov.w	r8, #0
 800efb8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800efbc:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800efc0:	6822      	ldr	r2, [r4, #0]
 800efc2:	462b      	mov	r3, r5
 800efc4:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800efc8:	9700      	str	r7, [sp, #0]
 800efca:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800efce:	4631      	mov	r1, r6
 800efd0:	f003 fa2e 	bl	8012430 <rmw_take_with_info>
 800efd4:	4603      	mov	r3, r0
 800efd6:	b9c0      	cbnz	r0, 800f00a <rcl_take+0xa6>
 800efd8:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800efdc:	f240 1291 	movw	r2, #401	@ 0x191
 800efe0:	2900      	cmp	r1, #0
 800efe2:	bf08      	it	eq
 800efe4:	4613      	moveq	r3, r2
 800efe6:	4618      	mov	r0, r3
 800efe8:	b024      	add	sp, #144	@ 0x90
 800efea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800eff2:	4618      	mov	r0, r3
 800eff4:	b024      	add	sp, #144	@ 0x90
 800eff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effa:	230b      	movs	r3, #11
 800effc:	e7f3      	b.n	800efe6 <rcl_take+0x82>
 800effe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f002:	4618      	mov	r0, r3
 800f004:	4770      	bx	lr
 800f006:	ad14      	add	r5, sp, #80	@ 0x50
 800f008:	e7c0      	b.n	800ef8c <rcl_take+0x28>
 800f00a:	f7ff f877 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f00e:	4603      	mov	r3, r0
 800f010:	e7e9      	b.n	800efe6 <rcl_take+0x82>
 800f012:	bf00      	nop

0800f014 <rcl_subscription_get_rmw_handle>:
 800f014:	b118      	cbz	r0, 800f01e <rcl_subscription_get_rmw_handle+0xa>
 800f016:	6800      	ldr	r0, [r0, #0]
 800f018:	b108      	cbz	r0, 800f01e <rcl_subscription_get_rmw_handle+0xa>
 800f01a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f01e:	4770      	bx	lr

0800f020 <rcl_subscription_is_valid>:
 800f020:	b130      	cbz	r0, 800f030 <rcl_subscription_is_valid+0x10>
 800f022:	6800      	ldr	r0, [r0, #0]
 800f024:	b120      	cbz	r0, 800f030 <rcl_subscription_is_valid+0x10>
 800f026:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f02a:	3800      	subs	r0, #0
 800f02c:	bf18      	it	ne
 800f02e:	2001      	movne	r0, #1
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop

0800f034 <rcl_get_system_time>:
 800f034:	4608      	mov	r0, r1
 800f036:	f7fb ba23 	b.w	800a480 <rcutils_system_time_now>
 800f03a:	bf00      	nop

0800f03c <rcl_get_steady_time>:
 800f03c:	4608      	mov	r0, r1
 800f03e:	f7fb ba47 	b.w	800a4d0 <rcutils_steady_time_now>
 800f042:	bf00      	nop

0800f044 <rcl_get_ros_time>:
 800f044:	7a03      	ldrb	r3, [r0, #8]
 800f046:	b510      	push	{r4, lr}
 800f048:	460c      	mov	r4, r1
 800f04a:	b133      	cbz	r3, 800f05a <rcl_get_ros_time+0x16>
 800f04c:	2105      	movs	r1, #5
 800f04e:	f001 fd53 	bl	8010af8 <__atomic_load_8>
 800f052:	e9c4 0100 	strd	r0, r1, [r4]
 800f056:	2000      	movs	r0, #0
 800f058:	bd10      	pop	{r4, pc}
 800f05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f05e:	4608      	mov	r0, r1
 800f060:	f7fb ba0e 	b.w	800a480 <rcutils_system_time_now>

0800f064 <rcl_clock_init>:
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	4605      	mov	r5, r0
 800f068:	4610      	mov	r0, r2
 800f06a:	4614      	mov	r4, r2
 800f06c:	460e      	mov	r6, r1
 800f06e:	f7fb f9c7 	bl	800a400 <rcutils_allocator_is_valid>
 800f072:	b128      	cbz	r0, 800f080 <rcl_clock_init+0x1c>
 800f074:	2d03      	cmp	r5, #3
 800f076:	d803      	bhi.n	800f080 <rcl_clock_init+0x1c>
 800f078:	e8df f005 	tbb	[pc, r5]
 800f07c:	06532e1d 	.word	0x06532e1d
 800f080:	f04f 0c0b 	mov.w	ip, #11
 800f084:	4660      	mov	r0, ip
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f088:	2e00      	cmp	r6, #0
 800f08a:	d0f9      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f08c:	2c00      	cmp	r4, #0
 800f08e:	d0f7      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f090:	2300      	movs	r3, #0
 800f092:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f096:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800f14c <rcl_clock_init+0xe8>
 800f09a:	6133      	str	r3, [r6, #16]
 800f09c:	f106 0514 	add.w	r5, r6, #20
 800f0a0:	469c      	mov	ip, r3
 800f0a2:	2703      	movs	r7, #3
 800f0a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	602b      	str	r3, [r5, #0]
 800f0ac:	7037      	strb	r7, [r6, #0]
 800f0ae:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f0b2:	4660      	mov	r0, ip
 800f0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	d0e2      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	7033      	strb	r3, [r6, #0]
 800f0be:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f0c2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f0c6:	469c      	mov	ip, r3
 800f0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0ca:	f106 0514 	add.w	r5, r6, #20
 800f0ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	602b      	str	r3, [r5, #0]
 800f0d4:	4660      	mov	r0, ip
 800f0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d8:	2e00      	cmp	r6, #0
 800f0da:	d0d1      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f0dc:	2c00      	cmp	r4, #0
 800f0de:	d0cf      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f0e0:	2700      	movs	r7, #0
 800f0e2:	7037      	strb	r7, [r6, #0]
 800f0e4:	46a4      	mov	ip, r4
 800f0e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0ea:	f106 0514 	add.w	r5, r6, #20
 800f0ee:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f0f2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f0f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0f8:	f8dc 3000 	ldr.w	r3, [ip]
 800f0fc:	602b      	str	r3, [r5, #0]
 800f0fe:	6921      	ldr	r1, [r4, #16]
 800f100:	6823      	ldr	r3, [r4, #0]
 800f102:	2010      	movs	r0, #16
 800f104:	4798      	blx	r3
 800f106:	6130      	str	r0, [r6, #16]
 800f108:	b1d0      	cbz	r0, 800f140 <rcl_clock_init+0xdc>
 800f10a:	2200      	movs	r2, #0
 800f10c:	2300      	movs	r3, #0
 800f10e:	e9c0 2300 	strd	r2, r3, [r0]
 800f112:	2301      	movs	r3, #1
 800f114:	7207      	strb	r7, [r0, #8]
 800f116:	4a0c      	ldr	r2, [pc, #48]	@ (800f148 <rcl_clock_init+0xe4>)
 800f118:	7033      	strb	r3, [r6, #0]
 800f11a:	46bc      	mov	ip, r7
 800f11c:	60f2      	str	r2, [r6, #12]
 800f11e:	4660      	mov	r0, ip
 800f120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f122:	2e00      	cmp	r6, #0
 800f124:	d0ac      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f126:	2c00      	cmp	r4, #0
 800f128:	d0aa      	beq.n	800f080 <rcl_clock_init+0x1c>
 800f12a:	2300      	movs	r3, #0
 800f12c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f130:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800f150 <rcl_clock_init+0xec>
 800f134:	6133      	str	r3, [r6, #16]
 800f136:	f106 0514 	add.w	r5, r6, #20
 800f13a:	469c      	mov	ip, r3
 800f13c:	2702      	movs	r7, #2
 800f13e:	e7b1      	b.n	800f0a4 <rcl_clock_init+0x40>
 800f140:	f04f 0c0a 	mov.w	ip, #10
 800f144:	e79e      	b.n	800f084 <rcl_clock_init+0x20>
 800f146:	bf00      	nop
 800f148:	0800f045 	.word	0x0800f045
 800f14c:	0800f03d 	.word	0x0800f03d
 800f150:	0800f035 	.word	0x0800f035

0800f154 <rcl_clock_get_now>:
 800f154:	b140      	cbz	r0, 800f168 <rcl_clock_get_now+0x14>
 800f156:	b139      	cbz	r1, 800f168 <rcl_clock_get_now+0x14>
 800f158:	7803      	ldrb	r3, [r0, #0]
 800f15a:	b11b      	cbz	r3, 800f164 <rcl_clock_get_now+0x10>
 800f15c:	68c3      	ldr	r3, [r0, #12]
 800f15e:	b10b      	cbz	r3, 800f164 <rcl_clock_get_now+0x10>
 800f160:	6900      	ldr	r0, [r0, #16]
 800f162:	4718      	bx	r3
 800f164:	2001      	movs	r0, #1
 800f166:	4770      	bx	lr
 800f168:	200b      	movs	r0, #11
 800f16a:	4770      	bx	lr

0800f16c <rcl_timer_call>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	b087      	sub	sp, #28
 800f172:	2800      	cmp	r0, #0
 800f174:	d06d      	beq.n	800f252 <rcl_timer_call+0xe6>
 800f176:	6803      	ldr	r3, [r0, #0]
 800f178:	4604      	mov	r4, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d063      	beq.n	800f246 <rcl_timer_call+0xda>
 800f17e:	f3bf 8f5b 	dmb	ish
 800f182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f186:	f3bf 8f5b 	dmb	ish
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d150      	bne.n	800f230 <rcl_timer_call+0xc4>
 800f18e:	6803      	ldr	r3, [r0, #0]
 800f190:	a904      	add	r1, sp, #16
 800f192:	6818      	ldr	r0, [r3, #0]
 800f194:	f7ff ffde 	bl	800f154 <rcl_clock_get_now>
 800f198:	4605      	mov	r5, r0
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d14a      	bne.n	800f234 <rcl_timer_call+0xc8>
 800f19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	db4a      	blt.n	800f23c <rcl_timer_call+0xd0>
 800f1a6:	6820      	ldr	r0, [r4, #0]
 800f1a8:	f04f 0a05 	mov.w	sl, #5
 800f1ac:	f8cd a000 	str.w	sl, [sp]
 800f1b0:	3020      	adds	r0, #32
 800f1b2:	f001 fd0d 	bl	8010bd0 <__atomic_exchange_8>
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	f3bf 8f5b 	dmb	ish
 800f1bc:	4680      	mov	r8, r0
 800f1be:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f1c2:	f3bf 8f5b 	dmb	ish
 800f1c6:	6820      	ldr	r0, [r4, #0]
 800f1c8:	4689      	mov	r9, r1
 800f1ca:	3028      	adds	r0, #40	@ 0x28
 800f1cc:	4651      	mov	r1, sl
 800f1ce:	f001 fc93 	bl	8010af8 <__atomic_load_8>
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	6820      	ldr	r0, [r4, #0]
 800f1d6:	460f      	mov	r7, r1
 800f1d8:	3018      	adds	r0, #24
 800f1da:	4651      	mov	r1, sl
 800f1dc:	f001 fc8c 	bl	8010af8 <__atomic_load_8>
 800f1e0:	1836      	adds	r6, r6, r0
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f1ea:	eb47 0701 	adc.w	r7, r7, r1
 800f1ee:	4286      	cmp	r6, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	eb77 010c 	sbcs.w	r1, r7, ip
 800f1f6:	da04      	bge.n	800f202 <rcl_timer_call+0x96>
 800f1f8:	ea53 0102 	orrs.w	r1, r3, r2
 800f1fc:	d12e      	bne.n	800f25c <rcl_timer_call+0xf0>
 800f1fe:	4606      	mov	r6, r0
 800f200:	4667      	mov	r7, ip
 800f202:	6820      	ldr	r0, [r4, #0]
 800f204:	2105      	movs	r1, #5
 800f206:	4632      	mov	r2, r6
 800f208:	463b      	mov	r3, r7
 800f20a:	3028      	adds	r0, #40	@ 0x28
 800f20c:	9100      	str	r1, [sp, #0]
 800f20e:	f001 fca9 	bl	8010b64 <__atomic_store_8>
 800f212:	f1bb 0f00 	cmp.w	fp, #0
 800f216:	d00d      	beq.n	800f234 <rcl_timer_call+0xc8>
 800f218:	9a04      	ldr	r2, [sp, #16]
 800f21a:	9b05      	ldr	r3, [sp, #20]
 800f21c:	ebb2 0208 	subs.w	r2, r2, r8
 800f220:	4620      	mov	r0, r4
 800f222:	eb63 0309 	sbc.w	r3, r3, r9
 800f226:	47d8      	blx	fp
 800f228:	4628      	mov	r0, r5
 800f22a:	b007      	add	sp, #28
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f230:	f240 3521 	movw	r5, #801	@ 0x321
 800f234:	4628      	mov	r0, r5
 800f236:	b007      	add	sp, #28
 800f238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23c:	2501      	movs	r5, #1
 800f23e:	4628      	mov	r0, r5
 800f240:	b007      	add	sp, #28
 800f242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f246:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f24a:	4628      	mov	r0, r5
 800f24c:	b007      	add	sp, #28
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	250b      	movs	r5, #11
 800f254:	4628      	mov	r0, r5
 800f256:	b007      	add	sp, #28
 800f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25c:	1b80      	subs	r0, r0, r6
 800f25e:	eb6c 0107 	sbc.w	r1, ip, r7
 800f262:	3801      	subs	r0, #1
 800f264:	f161 0100 	sbc.w	r1, r1, #0
 800f268:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f26c:	f7f1 fccc 	bl	8000c08 <__aeabi_ldivmod>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	3001      	adds	r0, #1
 800f274:	f141 0100 	adc.w	r1, r1, #0
 800f278:	fb00 f303 	mul.w	r3, r0, r3
 800f27c:	fb01 330a 	mla	r3, r1, sl, r3
 800f280:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f284:	1986      	adds	r6, r0, r6
 800f286:	4453      	add	r3, sl
 800f288:	eb43 0707 	adc.w	r7, r3, r7
 800f28c:	e7b9      	b.n	800f202 <rcl_timer_call+0x96>
 800f28e:	bf00      	nop

0800f290 <rcl_timer_is_ready>:
 800f290:	b570      	push	{r4, r5, r6, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	b378      	cbz	r0, 800f2f6 <rcl_timer_is_ready+0x66>
 800f296:	6803      	ldr	r3, [r0, #0]
 800f298:	4604      	mov	r4, r0
 800f29a:	b383      	cbz	r3, 800f2fe <rcl_timer_is_ready+0x6e>
 800f29c:	460d      	mov	r5, r1
 800f29e:	b351      	cbz	r1, 800f2f6 <rcl_timer_is_ready+0x66>
 800f2a0:	f3bf 8f5b 	dmb	ish
 800f2a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f2a8:	f3bf 8f5b 	dmb	ish
 800f2ac:	b953      	cbnz	r3, 800f2c4 <rcl_timer_is_ready+0x34>
 800f2ae:	6803      	ldr	r3, [r0, #0]
 800f2b0:	4669      	mov	r1, sp
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f7ff ff4e 	bl	800f154 <rcl_clock_get_now>
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	b140      	cbz	r0, 800f2ce <rcl_timer_is_ready+0x3e>
 800f2bc:	f240 3321 	movw	r3, #801	@ 0x321
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	d101      	bne.n	800f2c8 <rcl_timer_is_ready+0x38>
 800f2c4:	2600      	movs	r6, #0
 800f2c6:	702e      	strb	r6, [r5, #0]
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	b002      	add	sp, #8
 800f2cc:	bd70      	pop	{r4, r5, r6, pc}
 800f2ce:	6820      	ldr	r0, [r4, #0]
 800f2d0:	2105      	movs	r1, #5
 800f2d2:	3028      	adds	r0, #40	@ 0x28
 800f2d4:	f001 fc10 	bl	8010af8 <__atomic_load_8>
 800f2d8:	9b00      	ldr	r3, [sp, #0]
 800f2da:	1ac0      	subs	r0, r0, r3
 800f2dc:	9b01      	ldr	r3, [sp, #4]
 800f2de:	eb61 0103 	sbc.w	r1, r1, r3
 800f2e2:	2801      	cmp	r0, #1
 800f2e4:	f171 0300 	sbcs.w	r3, r1, #0
 800f2e8:	bfb4      	ite	lt
 800f2ea:	2301      	movlt	r3, #1
 800f2ec:	2300      	movge	r3, #0
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	702b      	strb	r3, [r5, #0]
 800f2f2:	b002      	add	sp, #8
 800f2f4:	bd70      	pop	{r4, r5, r6, pc}
 800f2f6:	260b      	movs	r6, #11
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	b002      	add	sp, #8
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f302:	e7e1      	b.n	800f2c8 <rcl_timer_is_ready+0x38>

0800f304 <rcl_timer_get_time_until_next_call>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	b330      	cbz	r0, 800f358 <rcl_timer_get_time_until_next_call+0x54>
 800f30a:	6803      	ldr	r3, [r0, #0]
 800f30c:	4604      	mov	r4, r0
 800f30e:	b33b      	cbz	r3, 800f360 <rcl_timer_get_time_until_next_call+0x5c>
 800f310:	460d      	mov	r5, r1
 800f312:	b309      	cbz	r1, 800f358 <rcl_timer_get_time_until_next_call+0x54>
 800f314:	f3bf 8f5b 	dmb	ish
 800f318:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f31c:	f3bf 8f5b 	dmb	ish
 800f320:	b9ab      	cbnz	r3, 800f34e <rcl_timer_get_time_until_next_call+0x4a>
 800f322:	6803      	ldr	r3, [r0, #0]
 800f324:	4669      	mov	r1, sp
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	f7ff ff14 	bl	800f154 <rcl_clock_get_now>
 800f32c:	4606      	mov	r6, r0
 800f32e:	b958      	cbnz	r0, 800f348 <rcl_timer_get_time_until_next_call+0x44>
 800f330:	6820      	ldr	r0, [r4, #0]
 800f332:	2105      	movs	r1, #5
 800f334:	3028      	adds	r0, #40	@ 0x28
 800f336:	f001 fbdf 	bl	8010af8 <__atomic_load_8>
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	1ac0      	subs	r0, r0, r3
 800f33e:	9b01      	ldr	r3, [sp, #4]
 800f340:	6028      	str	r0, [r5, #0]
 800f342:	eb61 0103 	sbc.w	r1, r1, r3
 800f346:	6069      	str	r1, [r5, #4]
 800f348:	4630      	mov	r0, r6
 800f34a:	b002      	add	sp, #8
 800f34c:	bd70      	pop	{r4, r5, r6, pc}
 800f34e:	f240 3621 	movw	r6, #801	@ 0x321
 800f352:	4630      	mov	r0, r6
 800f354:	b002      	add	sp, #8
 800f356:	bd70      	pop	{r4, r5, r6, pc}
 800f358:	260b      	movs	r6, #11
 800f35a:	4630      	mov	r0, r6
 800f35c:	b002      	add	sp, #8
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f364:	e7f0      	b.n	800f348 <rcl_timer_get_time_until_next_call+0x44>
 800f366:	bf00      	nop

0800f368 <rcl_timer_get_guard_condition>:
 800f368:	b130      	cbz	r0, 800f378 <rcl_timer_get_guard_condition+0x10>
 800f36a:	6800      	ldr	r0, [r0, #0]
 800f36c:	b120      	cbz	r0, 800f378 <rcl_timer_get_guard_condition+0x10>
 800f36e:	68c3      	ldr	r3, [r0, #12]
 800f370:	b10b      	cbz	r3, 800f376 <rcl_timer_get_guard_condition+0xe>
 800f372:	3008      	adds	r0, #8
 800f374:	4770      	bx	lr
 800f376:	4618      	mov	r0, r3
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop

0800f37c <rcl_validate_enclave_name_with_size>:
 800f37c:	b378      	cbz	r0, 800f3de <rcl_validate_enclave_name_with_size+0x62>
 800f37e:	b570      	push	{r4, r5, r6, lr}
 800f380:	4615      	mov	r5, r2
 800f382:	b0c2      	sub	sp, #264	@ 0x108
 800f384:	b302      	cbz	r2, 800f3c8 <rcl_validate_enclave_name_with_size+0x4c>
 800f386:	461e      	mov	r6, r3
 800f388:	466a      	mov	r2, sp
 800f38a:	ab01      	add	r3, sp, #4
 800f38c:	460c      	mov	r4, r1
 800f38e:	f002 f849 	bl	8011424 <rmw_validate_namespace_with_size>
 800f392:	4684      	mov	ip, r0
 800f394:	b9e8      	cbnz	r0, 800f3d2 <rcl_validate_enclave_name_with_size+0x56>
 800f396:	9b00      	ldr	r3, [sp, #0]
 800f398:	b923      	cbnz	r3, 800f3a4 <rcl_validate_enclave_name_with_size+0x28>
 800f39a:	2300      	movs	r3, #0
 800f39c:	602b      	str	r3, [r5, #0]
 800f39e:	4660      	mov	r0, ip
 800f3a0:	b042      	add	sp, #264	@ 0x108
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	2b07      	cmp	r3, #7
 800f3a6:	d007      	beq.n	800f3b8 <rcl_validate_enclave_name_with_size+0x3c>
 800f3a8:	1e5a      	subs	r2, r3, #1
 800f3aa:	2a05      	cmp	r2, #5
 800f3ac:	d833      	bhi.n	800f416 <rcl_validate_enclave_name_with_size+0x9a>
 800f3ae:	e8df f002 	tbb	[pc, r2]
 800f3b2:	2c2f      	.short	0x2c2f
 800f3b4:	1a232629 	.word	0x1a232629
 800f3b8:	2cff      	cmp	r4, #255	@ 0xff
 800f3ba:	d9ee      	bls.n	800f39a <rcl_validate_enclave_name_with_size+0x1e>
 800f3bc:	602b      	str	r3, [r5, #0]
 800f3be:	2e00      	cmp	r6, #0
 800f3c0:	d0ed      	beq.n	800f39e <rcl_validate_enclave_name_with_size+0x22>
 800f3c2:	23fe      	movs	r3, #254	@ 0xfe
 800f3c4:	6033      	str	r3, [r6, #0]
 800f3c6:	e7ea      	b.n	800f39e <rcl_validate_enclave_name_with_size+0x22>
 800f3c8:	f04f 0c0b 	mov.w	ip, #11
 800f3cc:	4660      	mov	r0, ip
 800f3ce:	b042      	add	sp, #264	@ 0x108
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}
 800f3d2:	f7fe fe93 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 800f3d6:	4684      	mov	ip, r0
 800f3d8:	4660      	mov	r0, ip
 800f3da:	b042      	add	sp, #264	@ 0x108
 800f3dc:	bd70      	pop	{r4, r5, r6, pc}
 800f3de:	f04f 0c0b 	mov.w	ip, #11
 800f3e2:	4660      	mov	r0, ip
 800f3e4:	4770      	bx	lr
 800f3e6:	2306      	movs	r3, #6
 800f3e8:	602b      	str	r3, [r5, #0]
 800f3ea:	2e00      	cmp	r6, #0
 800f3ec:	d0d7      	beq.n	800f39e <rcl_validate_enclave_name_with_size+0x22>
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	6033      	str	r3, [r6, #0]
 800f3f2:	4660      	mov	r0, ip
 800f3f4:	b042      	add	sp, #264	@ 0x108
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	2305      	movs	r3, #5
 800f3fa:	602b      	str	r3, [r5, #0]
 800f3fc:	e7f5      	b.n	800f3ea <rcl_validate_enclave_name_with_size+0x6e>
 800f3fe:	2304      	movs	r3, #4
 800f400:	602b      	str	r3, [r5, #0]
 800f402:	e7f2      	b.n	800f3ea <rcl_validate_enclave_name_with_size+0x6e>
 800f404:	2303      	movs	r3, #3
 800f406:	602b      	str	r3, [r5, #0]
 800f408:	e7ef      	b.n	800f3ea <rcl_validate_enclave_name_with_size+0x6e>
 800f40a:	2302      	movs	r3, #2
 800f40c:	602b      	str	r3, [r5, #0]
 800f40e:	e7ec      	b.n	800f3ea <rcl_validate_enclave_name_with_size+0x6e>
 800f410:	2301      	movs	r3, #1
 800f412:	602b      	str	r3, [r5, #0]
 800f414:	e7e9      	b.n	800f3ea <rcl_validate_enclave_name_with_size+0x6e>
 800f416:	4a04      	ldr	r2, [pc, #16]	@ (800f428 <rcl_validate_enclave_name_with_size+0xac>)
 800f418:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f41c:	a802      	add	r0, sp, #8
 800f41e:	f001 fd25 	bl	8010e6c <rcutils_snprintf>
 800f422:	f04f 0c01 	mov.w	ip, #1
 800f426:	e7ba      	b.n	800f39e <rcl_validate_enclave_name_with_size+0x22>
 800f428:	08019558 	.word	0x08019558

0800f42c <rcl_validate_enclave_name>:
 800f42c:	b168      	cbz	r0, 800f44a <rcl_validate_enclave_name+0x1e>
 800f42e:	b570      	push	{r4, r5, r6, lr}
 800f430:	460d      	mov	r5, r1
 800f432:	4616      	mov	r6, r2
 800f434:	4604      	mov	r4, r0
 800f436:	f7f0 ff4b 	bl	80002d0 <strlen>
 800f43a:	4633      	mov	r3, r6
 800f43c:	4601      	mov	r1, r0
 800f43e:	462a      	mov	r2, r5
 800f440:	4620      	mov	r0, r4
 800f442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f446:	f7ff bf99 	b.w	800f37c <rcl_validate_enclave_name_with_size>
 800f44a:	200b      	movs	r0, #11
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop

0800f450 <rcl_get_zero_initialized_wait_set>:
 800f450:	b510      	push	{r4, lr}
 800f452:	4c08      	ldr	r4, [pc, #32]	@ (800f474 <rcl_get_zero_initialized_wait_set+0x24>)
 800f454:	4686      	mov	lr, r0
 800f456:	4684      	mov	ip, r0
 800f458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f45a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f45e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f460:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f466:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	f8cc 3000 	str.w	r3, [ip]
 800f470:	4670      	mov	r0, lr
 800f472:	bd10      	pop	{r4, pc}
 800f474:	080195b8 	.word	0x080195b8

0800f478 <rcl_wait_set_is_valid>:
 800f478:	b118      	cbz	r0, 800f482 <rcl_wait_set_is_valid+0xa>
 800f47a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f47c:	3800      	subs	r0, #0
 800f47e:	bf18      	it	ne
 800f480:	2001      	movne	r0, #1
 800f482:	4770      	bx	lr

0800f484 <rcl_wait_set_fini>:
 800f484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f488:	b082      	sub	sp, #8
 800f48a:	2800      	cmp	r0, #0
 800f48c:	f000 8095 	beq.w	800f5ba <rcl_wait_set_fini+0x136>
 800f490:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f492:	4604      	mov	r4, r0
 800f494:	2e00      	cmp	r6, #0
 800f496:	f000 808c 	beq.w	800f5b2 <rcl_wait_set_fini+0x12e>
 800f49a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800f49c:	f003 f9b6 	bl	801280c <rmw_destroy_wait_set>
 800f4a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f4a2:	1e06      	subs	r6, r0, #0
 800f4a4:	bf18      	it	ne
 800f4a6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800f4aa:	2d00      	cmp	r5, #0
 800f4ac:	f000 8081 	beq.w	800f5b2 <rcl_wait_set_fini+0x12e>
 800f4b0:	6820      	ldr	r0, [r4, #0]
 800f4b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f4b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f4b8:	2700      	movs	r7, #0
 800f4ba:	6067      	str	r7, [r4, #4]
 800f4bc:	602f      	str	r7, [r5, #0]
 800f4be:	b120      	cbz	r0, 800f4ca <rcl_wait_set_fini+0x46>
 800f4c0:	9101      	str	r1, [sp, #4]
 800f4c2:	47c0      	blx	r8
 800f4c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f4c6:	9901      	ldr	r1, [sp, #4]
 800f4c8:	6027      	str	r7, [r4, #0]
 800f4ca:	68a8      	ldr	r0, [r5, #8]
 800f4cc:	b120      	cbz	r0, 800f4d8 <rcl_wait_set_fini+0x54>
 800f4ce:	47c0      	blx	r8
 800f4d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f4d8:	68a0      	ldr	r0, [r4, #8]
 800f4da:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f4dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f4de:	f04f 0800 	mov.w	r8, #0
 800f4e2:	f8c4 800c 	str.w	r8, [r4, #12]
 800f4e6:	f8c5 800c 	str.w	r8, [r5, #12]
 800f4ea:	b128      	cbz	r0, 800f4f8 <rcl_wait_set_fini+0x74>
 800f4ec:	47b8      	blx	r7
 800f4ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f4f0:	f8c4 8008 	str.w	r8, [r4, #8]
 800f4f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f4f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f4f8:	6968      	ldr	r0, [r5, #20]
 800f4fa:	f04f 0800 	mov.w	r8, #0
 800f4fe:	f8c5 8010 	str.w	r8, [r5, #16]
 800f502:	b128      	cbz	r0, 800f510 <rcl_wait_set_fini+0x8c>
 800f504:	47b8      	blx	r7
 800f506:	f8c5 8014 	str.w	r8, [r5, #20]
 800f50a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f50c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f50e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f510:	6920      	ldr	r0, [r4, #16]
 800f512:	f04f 0800 	mov.w	r8, #0
 800f516:	f8c4 8014 	str.w	r8, [r4, #20]
 800f51a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800f51e:	b128      	cbz	r0, 800f52c <rcl_wait_set_fini+0xa8>
 800f520:	47b8      	blx	r7
 800f522:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f524:	f8c4 8010 	str.w	r8, [r4, #16]
 800f528:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f52a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f52c:	69a0      	ldr	r0, [r4, #24]
 800f52e:	f04f 0800 	mov.w	r8, #0
 800f532:	f8c4 801c 	str.w	r8, [r4, #28]
 800f536:	f8c5 8018 	str.w	r8, [r5, #24]
 800f53a:	b128      	cbz	r0, 800f548 <rcl_wait_set_fini+0xc4>
 800f53c:	9101      	str	r1, [sp, #4]
 800f53e:	47b8      	blx	r7
 800f540:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f542:	9901      	ldr	r1, [sp, #4]
 800f544:	f8c4 8018 	str.w	r8, [r4, #24]
 800f548:	6a28      	ldr	r0, [r5, #32]
 800f54a:	b120      	cbz	r0, 800f556 <rcl_wait_set_fini+0xd2>
 800f54c:	47b8      	blx	r7
 800f54e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f550:	2300      	movs	r3, #0
 800f552:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f556:	6a20      	ldr	r0, [r4, #32]
 800f558:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f55c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f55e:	2700      	movs	r7, #0
 800f560:	6267      	str	r7, [r4, #36]	@ 0x24
 800f562:	626f      	str	r7, [r5, #36]	@ 0x24
 800f564:	b120      	cbz	r0, 800f570 <rcl_wait_set_fini+0xec>
 800f566:	9101      	str	r1, [sp, #4]
 800f568:	47c0      	blx	r8
 800f56a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f56c:	9901      	ldr	r1, [sp, #4]
 800f56e:	6227      	str	r7, [r4, #32]
 800f570:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800f572:	b120      	cbz	r0, 800f57e <rcl_wait_set_fini+0xfa>
 800f574:	47c0      	blx	r8
 800f576:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f578:	2300      	movs	r3, #0
 800f57a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800f57e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f580:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f584:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f586:	2700      	movs	r7, #0
 800f588:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800f58a:	632f      	str	r7, [r5, #48]	@ 0x30
 800f58c:	b120      	cbz	r0, 800f598 <rcl_wait_set_fini+0x114>
 800f58e:	9101      	str	r1, [sp, #4]
 800f590:	47c0      	blx	r8
 800f592:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f594:	9901      	ldr	r1, [sp, #4]
 800f596:	62a7      	str	r7, [r4, #40]	@ 0x28
 800f598:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800f59a:	b120      	cbz	r0, 800f5a6 <rcl_wait_set_fini+0x122>
 800f59c:	47c0      	blx	r8
 800f59e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800f5a6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f5a8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	4798      	blx	r3
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5b2:	4630      	mov	r0, r6
 800f5b4:	b002      	add	sp, #8
 800f5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ba:	260b      	movs	r6, #11
 800f5bc:	4630      	mov	r0, r6
 800f5be:	b002      	add	sp, #8
 800f5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f5c4 <rcl_wait_set_add_subscription>:
 800f5c4:	b318      	cbz	r0, 800f60e <rcl_wait_set_add_subscription+0x4a>
 800f5c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f5c8:	b570      	push	{r4, r5, r6, lr}
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	b30b      	cbz	r3, 800f612 <rcl_wait_set_add_subscription+0x4e>
 800f5ce:	b319      	cbz	r1, 800f618 <rcl_wait_set_add_subscription+0x54>
 800f5d0:	681d      	ldr	r5, [r3, #0]
 800f5d2:	6840      	ldr	r0, [r0, #4]
 800f5d4:	4285      	cmp	r5, r0
 800f5d6:	d217      	bcs.n	800f608 <rcl_wait_set_add_subscription+0x44>
 800f5d8:	6820      	ldr	r0, [r4, #0]
 800f5da:	1c6e      	adds	r6, r5, #1
 800f5dc:	601e      	str	r6, [r3, #0]
 800f5de:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f5e2:	b102      	cbz	r2, 800f5e6 <rcl_wait_set_add_subscription+0x22>
 800f5e4:	6015      	str	r5, [r2, #0]
 800f5e6:	4608      	mov	r0, r1
 800f5e8:	f7ff fd14 	bl	800f014 <rcl_subscription_get_rmw_handle>
 800f5ec:	b150      	cbz	r0, 800f604 <rcl_wait_set_add_subscription+0x40>
 800f5ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f5f0:	6842      	ldr	r2, [r0, #4]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f5f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f5fa:	6853      	ldr	r3, [r2, #4]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	2000      	movs	r0, #0
 800f600:	6053      	str	r3, [r2, #4]
 800f602:	bd70      	pop	{r4, r5, r6, pc}
 800f604:	2001      	movs	r0, #1
 800f606:	bd70      	pop	{r4, r5, r6, pc}
 800f608:	f240 3086 	movw	r0, #902	@ 0x386
 800f60c:	bd70      	pop	{r4, r5, r6, pc}
 800f60e:	200b      	movs	r0, #11
 800f610:	4770      	bx	lr
 800f612:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f616:	bd70      	pop	{r4, r5, r6, pc}
 800f618:	200b      	movs	r0, #11
 800f61a:	bd70      	pop	{r4, r5, r6, pc}

0800f61c <rcl_wait_set_clear>:
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d073      	beq.n	800f708 <rcl_wait_set_clear+0xec>
 800f620:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f622:	b510      	push	{r4, lr}
 800f624:	4604      	mov	r4, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d070      	beq.n	800f70c <rcl_wait_set_clear+0xf0>
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	b138      	cbz	r0, 800f63e <rcl_wait_set_clear+0x22>
 800f62e:	6862      	ldr	r2, [r4, #4]
 800f630:	2100      	movs	r1, #0
 800f632:	0092      	lsls	r2, r2, #2
 800f634:	f007 fc76 	bl	8016f24 <memset>
 800f638:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f63a:	2200      	movs	r2, #0
 800f63c:	601a      	str	r2, [r3, #0]
 800f63e:	68a0      	ldr	r0, [r4, #8]
 800f640:	b138      	cbz	r0, 800f652 <rcl_wait_set_clear+0x36>
 800f642:	68e2      	ldr	r2, [r4, #12]
 800f644:	2100      	movs	r1, #0
 800f646:	0092      	lsls	r2, r2, #2
 800f648:	f007 fc6c 	bl	8016f24 <memset>
 800f64c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f64e:	2200      	movs	r2, #0
 800f650:	60da      	str	r2, [r3, #12]
 800f652:	69a0      	ldr	r0, [r4, #24]
 800f654:	b138      	cbz	r0, 800f666 <rcl_wait_set_clear+0x4a>
 800f656:	69e2      	ldr	r2, [r4, #28]
 800f658:	2100      	movs	r1, #0
 800f65a:	0092      	lsls	r2, r2, #2
 800f65c:	f007 fc62 	bl	8016f24 <memset>
 800f660:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f662:	2200      	movs	r2, #0
 800f664:	619a      	str	r2, [r3, #24]
 800f666:	6a20      	ldr	r0, [r4, #32]
 800f668:	b138      	cbz	r0, 800f67a <rcl_wait_set_clear+0x5e>
 800f66a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f66c:	2100      	movs	r1, #0
 800f66e:	0092      	lsls	r2, r2, #2
 800f670:	f007 fc58 	bl	8016f24 <memset>
 800f674:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f676:	2200      	movs	r2, #0
 800f678:	625a      	str	r2, [r3, #36]	@ 0x24
 800f67a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f67c:	b138      	cbz	r0, 800f68e <rcl_wait_set_clear+0x72>
 800f67e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f680:	2100      	movs	r1, #0
 800f682:	0092      	lsls	r2, r2, #2
 800f684:	f007 fc4e 	bl	8016f24 <memset>
 800f688:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f68a:	2200      	movs	r2, #0
 800f68c:	631a      	str	r2, [r3, #48]	@ 0x30
 800f68e:	6920      	ldr	r0, [r4, #16]
 800f690:	b138      	cbz	r0, 800f6a2 <rcl_wait_set_clear+0x86>
 800f692:	6962      	ldr	r2, [r4, #20]
 800f694:	2100      	movs	r1, #0
 800f696:	0092      	lsls	r2, r2, #2
 800f698:	f007 fc44 	bl	8016f24 <memset>
 800f69c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f69e:	2200      	movs	r2, #0
 800f6a0:	641a      	str	r2, [r3, #64]	@ 0x40
 800f6a2:	6898      	ldr	r0, [r3, #8]
 800f6a4:	b138      	cbz	r0, 800f6b6 <rcl_wait_set_clear+0x9a>
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	0092      	lsls	r2, r2, #2
 800f6ac:	f007 fc3a 	bl	8016f24 <memset>
 800f6b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	605a      	str	r2, [r3, #4]
 800f6b6:	6958      	ldr	r0, [r3, #20]
 800f6b8:	b138      	cbz	r0, 800f6ca <rcl_wait_set_clear+0xae>
 800f6ba:	691a      	ldr	r2, [r3, #16]
 800f6bc:	2100      	movs	r1, #0
 800f6be:	0092      	lsls	r2, r2, #2
 800f6c0:	f007 fc30 	bl	8016f24 <memset>
 800f6c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	611a      	str	r2, [r3, #16]
 800f6ca:	6a18      	ldr	r0, [r3, #32]
 800f6cc:	b138      	cbz	r0, 800f6de <rcl_wait_set_clear+0xc2>
 800f6ce:	69da      	ldr	r2, [r3, #28]
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	0092      	lsls	r2, r2, #2
 800f6d4:	f007 fc26 	bl	8016f24 <memset>
 800f6d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f6da:	2200      	movs	r2, #0
 800f6dc:	61da      	str	r2, [r3, #28]
 800f6de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f6e0:	b138      	cbz	r0, 800f6f2 <rcl_wait_set_clear+0xd6>
 800f6e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	0092      	lsls	r2, r2, #2
 800f6e8:	f007 fc1c 	bl	8016f24 <memset>
 800f6ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	629a      	str	r2, [r3, #40]	@ 0x28
 800f6f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f6f4:	b138      	cbz	r0, 800f706 <rcl_wait_set_clear+0xea>
 800f6f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	0092      	lsls	r2, r2, #2
 800f6fc:	f007 fc12 	bl	8016f24 <memset>
 800f700:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f702:	2000      	movs	r0, #0
 800f704:	6358      	str	r0, [r3, #52]	@ 0x34
 800f706:	bd10      	pop	{r4, pc}
 800f708:	200b      	movs	r0, #11
 800f70a:	4770      	bx	lr
 800f70c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f710:	bd10      	pop	{r4, pc}
 800f712:	bf00      	nop

0800f714 <rcl_wait_set_resize>:
 800f714:	2800      	cmp	r0, #0
 800f716:	f000 8185 	beq.w	800fa24 <rcl_wait_set_resize+0x310>
 800f71a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800f720:	b083      	sub	sp, #12
 800f722:	4605      	mov	r5, r0
 800f724:	2c00      	cmp	r4, #0
 800f726:	f000 817f 	beq.w	800fa28 <rcl_wait_set_resize+0x314>
 800f72a:	f04f 0900 	mov.w	r9, #0
 800f72e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800f732:	461f      	mov	r7, r3
 800f734:	4688      	mov	r8, r1
 800f736:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800f73a:	4616      	mov	r6, r2
 800f73c:	f8c0 9004 	str.w	r9, [r0, #4]
 800f740:	f8c4 9000 	str.w	r9, [r4]
 800f744:	2900      	cmp	r1, #0
 800f746:	f000 80bd 	beq.w	800f8c4 <rcl_wait_set_resize+0x1b0>
 800f74a:	008c      	lsls	r4, r1, #2
 800f74c:	6800      	ldr	r0, [r0, #0]
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	4652      	mov	r2, sl
 800f752:	4621      	mov	r1, r4
 800f754:	4798      	blx	r3
 800f756:	9b01      	ldr	r3, [sp, #4]
 800f758:	6028      	str	r0, [r5, #0]
 800f75a:	2800      	cmp	r0, #0
 800f75c:	f000 80cb 	beq.w	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f760:	4622      	mov	r2, r4
 800f762:	4649      	mov	r1, r9
 800f764:	9301      	str	r3, [sp, #4]
 800f766:	f007 fbdd 	bl	8016f24 <memset>
 800f76a:	f8c5 8004 	str.w	r8, [r5, #4]
 800f76e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800f772:	9b01      	ldr	r3, [sp, #4]
 800f774:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f778:	f8c8 9004 	str.w	r9, [r8, #4]
 800f77c:	4652      	mov	r2, sl
 800f77e:	4621      	mov	r1, r4
 800f780:	4798      	blx	r3
 800f782:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f784:	f8c8 0008 	str.w	r0, [r8, #8]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 80ac 	beq.w	800f8e8 <rcl_wait_set_resize+0x1d4>
 800f790:	4622      	mov	r2, r4
 800f792:	4649      	mov	r1, r9
 800f794:	4618      	mov	r0, r3
 800f796:	f007 fbc5 	bl	8016f24 <memset>
 800f79a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f79c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f7a0:	f04f 0800 	mov.w	r8, #0
 800f7a4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800f7a8:	f8c5 800c 	str.w	r8, [r5, #12]
 800f7ac:	f8c4 800c 	str.w	r8, [r4, #12]
 800f7b0:	2e00      	cmp	r6, #0
 800f7b2:	f040 80a4 	bne.w	800f8fe <rcl_wait_set_resize+0x1ea>
 800f7b6:	68a8      	ldr	r0, [r5, #8]
 800f7b8:	b128      	cbz	r0, 800f7c6 <rcl_wait_set_resize+0xb2>
 800f7ba:	4649      	mov	r1, r9
 800f7bc:	4790      	blx	r2
 800f7be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f7c0:	60ae      	str	r6, [r5, #8]
 800f7c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f7c6:	f04f 0800 	mov.w	r8, #0
 800f7ca:	19f6      	adds	r6, r6, r7
 800f7cc:	f8c4 8010 	str.w	r8, [r4, #16]
 800f7d0:	f040 80ac 	bne.w	800f92c <rcl_wait_set_resize+0x218>
 800f7d4:	6960      	ldr	r0, [r4, #20]
 800f7d6:	b130      	cbz	r0, 800f7e6 <rcl_wait_set_resize+0xd2>
 800f7d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f7da:	4649      	mov	r1, r9
 800f7dc:	4798      	blx	r3
 800f7de:	6166      	str	r6, [r4, #20]
 800f7e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f7e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f7e6:	2600      	movs	r6, #0
 800f7e8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f7ec:	616e      	str	r6, [r5, #20]
 800f7ee:	6426      	str	r6, [r4, #64]	@ 0x40
 800f7f0:	2f00      	cmp	r7, #0
 800f7f2:	f040 80ad 	bne.w	800f950 <rcl_wait_set_resize+0x23c>
 800f7f6:	6928      	ldr	r0, [r5, #16]
 800f7f8:	b138      	cbz	r0, 800f80a <rcl_wait_set_resize+0xf6>
 800f7fa:	4649      	mov	r1, r9
 800f7fc:	47d0      	blx	sl
 800f7fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f800:	612f      	str	r7, [r5, #16]
 800f802:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f806:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f80a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f80c:	2600      	movs	r6, #0
 800f80e:	61ee      	str	r6, [r5, #28]
 800f810:	61a6      	str	r6, [r4, #24]
 800f812:	2b00      	cmp	r3, #0
 800f814:	f040 80af 	bne.w	800f976 <rcl_wait_set_resize+0x262>
 800f818:	69a8      	ldr	r0, [r5, #24]
 800f81a:	b120      	cbz	r0, 800f826 <rcl_wait_set_resize+0x112>
 800f81c:	4649      	mov	r1, r9
 800f81e:	47d0      	blx	sl
 800f820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f822:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f824:	61ab      	str	r3, [r5, #24]
 800f826:	6a20      	ldr	r0, [r4, #32]
 800f828:	b128      	cbz	r0, 800f836 <rcl_wait_set_resize+0x122>
 800f82a:	4649      	mov	r1, r9
 800f82c:	47d0      	blx	sl
 800f82e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f830:	2300      	movs	r3, #0
 800f832:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f838:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800f83a:	2600      	movs	r6, #0
 800f83c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800f840:	626e      	str	r6, [r5, #36]	@ 0x24
 800f842:	6266      	str	r6, [r4, #36]	@ 0x24
 800f844:	2b00      	cmp	r3, #0
 800f846:	f000 80b6 	beq.w	800f9b6 <rcl_wait_set_resize+0x2a2>
 800f84a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800f84e:	6a28      	ldr	r0, [r5, #32]
 800f850:	463a      	mov	r2, r7
 800f852:	4651      	mov	r1, sl
 800f854:	47c8      	blx	r9
 800f856:	6228      	str	r0, [r5, #32]
 800f858:	2800      	cmp	r0, #0
 800f85a:	d04c      	beq.n	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f85c:	4652      	mov	r2, sl
 800f85e:	4631      	mov	r1, r6
 800f860:	f007 fb60 	bl	8016f24 <memset>
 800f864:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f868:	626b      	str	r3, [r5, #36]	@ 0x24
 800f86a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f86c:	62a6      	str	r6, [r4, #40]	@ 0x28
 800f86e:	463a      	mov	r2, r7
 800f870:	4651      	mov	r1, sl
 800f872:	47c8      	blx	r9
 800f874:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f876:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800f878:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800f87a:	2c00      	cmp	r4, #0
 800f87c:	f000 80f0 	beq.w	800fa60 <rcl_wait_set_resize+0x34c>
 800f880:	4620      	mov	r0, r4
 800f882:	4652      	mov	r2, sl
 800f884:	4631      	mov	r1, r6
 800f886:	f007 fb4d 	bl	8016f24 <memset>
 800f88a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f88e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800f890:	2600      	movs	r6, #0
 800f892:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800f896:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800f898:	6326      	str	r6, [r4, #48]	@ 0x30
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f040 809d 	bne.w	800f9da <rcl_wait_set_resize+0x2c6>
 800f8a0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800f8a2:	b120      	cbz	r0, 800f8ae <rcl_wait_set_resize+0x19a>
 800f8a4:	4639      	mov	r1, r7
 800f8a6:	47c0      	blx	r8
 800f8a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f8ac:	62ab      	str	r3, [r5, #40]	@ 0x28
 800f8ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800f8b0:	b310      	cbz	r0, 800f8f8 <rcl_wait_set_resize+0x1e4>
 800f8b2:	4639      	mov	r1, r7
 800f8b4:	47c0      	blx	r8
 800f8b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800f8be:	b003      	add	sp, #12
 800f8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c4:	6800      	ldr	r0, [r0, #0]
 800f8c6:	b120      	cbz	r0, 800f8d2 <rcl_wait_set_resize+0x1be>
 800f8c8:	4651      	mov	r1, sl
 800f8ca:	47d8      	blx	fp
 800f8cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f8ce:	f8c5 8000 	str.w	r8, [r5]
 800f8d2:	68a0      	ldr	r0, [r4, #8]
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f43f af61 	beq.w	800f79c <rcl_wait_set_resize+0x88>
 800f8da:	4651      	mov	r1, sl
 800f8dc:	47d8      	blx	fp
 800f8de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f8e6:	e759      	b.n	800f79c <rcl_wait_set_resize+0x88>
 800f8e8:	6828      	ldr	r0, [r5, #0]
 800f8ea:	9301      	str	r3, [sp, #4]
 800f8ec:	4651      	mov	r1, sl
 800f8ee:	47d8      	blx	fp
 800f8f0:	9b01      	ldr	r3, [sp, #4]
 800f8f2:	e9c5 3300 	strd	r3, r3, [r5]
 800f8f6:	200a      	movs	r0, #10
 800f8f8:	b003      	add	sp, #12
 800f8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8fe:	00b4      	lsls	r4, r6, #2
 800f900:	68a8      	ldr	r0, [r5, #8]
 800f902:	464a      	mov	r2, r9
 800f904:	4621      	mov	r1, r4
 800f906:	4798      	blx	r3
 800f908:	60a8      	str	r0, [r5, #8]
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d0f3      	beq.n	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f90e:	4622      	mov	r2, r4
 800f910:	4641      	mov	r1, r8
 800f912:	f007 fb07 	bl	8016f24 <memset>
 800f916:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f918:	60ee      	str	r6, [r5, #12]
 800f91a:	f04f 0800 	mov.w	r8, #0
 800f91e:	19f6      	adds	r6, r6, r7
 800f920:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f924:	f8c4 8010 	str.w	r8, [r4, #16]
 800f928:	f43f af54 	beq.w	800f7d4 <rcl_wait_set_resize+0xc0>
 800f92c:	00b6      	lsls	r6, r6, #2
 800f92e:	464a      	mov	r2, r9
 800f930:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f932:	6960      	ldr	r0, [r4, #20]
 800f934:	4631      	mov	r1, r6
 800f936:	4798      	blx	r3
 800f938:	4681      	mov	r9, r0
 800f93a:	6160      	str	r0, [r4, #20]
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d076      	beq.n	800fa2e <rcl_wait_set_resize+0x31a>
 800f940:	4632      	mov	r2, r6
 800f942:	4641      	mov	r1, r8
 800f944:	f007 faee 	bl	8016f24 <memset>
 800f948:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f94a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f94e:	e74a      	b.n	800f7e6 <rcl_wait_set_resize+0xd2>
 800f950:	00bc      	lsls	r4, r7, #2
 800f952:	6928      	ldr	r0, [r5, #16]
 800f954:	464a      	mov	r2, r9
 800f956:	4621      	mov	r1, r4
 800f958:	47c0      	blx	r8
 800f95a:	6128      	str	r0, [r5, #16]
 800f95c:	2800      	cmp	r0, #0
 800f95e:	d0ca      	beq.n	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f960:	4622      	mov	r2, r4
 800f962:	4631      	mov	r1, r6
 800f964:	f007 fade 	bl	8016f24 <memset>
 800f968:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f96a:	616f      	str	r7, [r5, #20]
 800f96c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800f970:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800f974:	e749      	b.n	800f80a <rcl_wait_set_resize+0xf6>
 800f976:	009c      	lsls	r4, r3, #2
 800f978:	69a8      	ldr	r0, [r5, #24]
 800f97a:	464a      	mov	r2, r9
 800f97c:	4621      	mov	r1, r4
 800f97e:	47c0      	blx	r8
 800f980:	61a8      	str	r0, [r5, #24]
 800f982:	2800      	cmp	r0, #0
 800f984:	d0b7      	beq.n	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f986:	4622      	mov	r2, r4
 800f988:	4631      	mov	r1, r6
 800f98a:	f007 facb 	bl	8016f24 <memset>
 800f98e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800f990:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f992:	61eb      	str	r3, [r5, #28]
 800f994:	6a38      	ldr	r0, [r7, #32]
 800f996:	61fe      	str	r6, [r7, #28]
 800f998:	464a      	mov	r2, r9
 800f99a:	4621      	mov	r1, r4
 800f99c:	47c0      	blx	r8
 800f99e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800f9a0:	6238      	str	r0, [r7, #32]
 800f9a2:	6a1f      	ldr	r7, [r3, #32]
 800f9a4:	2f00      	cmp	r7, #0
 800f9a6:	d054      	beq.n	800fa52 <rcl_wait_set_resize+0x33e>
 800f9a8:	4622      	mov	r2, r4
 800f9aa:	4631      	mov	r1, r6
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f007 fab9 	bl	8016f24 <memset>
 800f9b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f9b4:	e73f      	b.n	800f836 <rcl_wait_set_resize+0x122>
 800f9b6:	6a28      	ldr	r0, [r5, #32]
 800f9b8:	b120      	cbz	r0, 800f9c4 <rcl_wait_set_resize+0x2b0>
 800f9ba:	4639      	mov	r1, r7
 800f9bc:	47c0      	blx	r8
 800f9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f9c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f9c2:	622b      	str	r3, [r5, #32]
 800f9c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f43f af60 	beq.w	800f88c <rcl_wait_set_resize+0x178>
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	47c0      	blx	r8
 800f9d0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800f9d8:	e758      	b.n	800f88c <rcl_wait_set_resize+0x178>
 800f9da:	009c      	lsls	r4, r3, #2
 800f9dc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800f9de:	463a      	mov	r2, r7
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	47c8      	blx	r9
 800f9e4:	62a8      	str	r0, [r5, #40]	@ 0x28
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d085      	beq.n	800f8f6 <rcl_wait_set_resize+0x1e2>
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	f007 fa99 	bl	8016f24 <memset>
 800f9f2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800f9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800f9fa:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800f9fe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800fa02:	463a      	mov	r2, r7
 800fa04:	4621      	mov	r1, r4
 800fa06:	47c8      	blx	r9
 800fa08:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fa0a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800fa0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa10:	b36b      	cbz	r3, 800fa6e <rcl_wait_set_resize+0x35a>
 800fa12:	4622      	mov	r2, r4
 800fa14:	4631      	mov	r1, r6
 800fa16:	4618      	mov	r0, r3
 800fa18:	f007 fa84 	bl	8016f24 <memset>
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	b003      	add	sp, #12
 800fa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa24:	200b      	movs	r0, #11
 800fa26:	4770      	bx	lr
 800fa28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fa2c:	e764      	b.n	800f8f8 <rcl_wait_set_resize+0x1e4>
 800fa2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fa30:	68a8      	ldr	r0, [r5, #8]
 800fa32:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fa34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa36:	4798      	blx	r3
 800fa38:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fa3a:	6928      	ldr	r0, [r5, #16]
 800fa3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fa3e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fa40:	f8c5 900c 	str.w	r9, [r5, #12]
 800fa44:	f8c5 9008 	str.w	r9, [r5, #8]
 800fa48:	4790      	blx	r2
 800fa4a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fa4e:	200a      	movs	r0, #10
 800fa50:	e752      	b.n	800f8f8 <rcl_wait_set_resize+0x1e4>
 800fa52:	69a8      	ldr	r0, [r5, #24]
 800fa54:	4649      	mov	r1, r9
 800fa56:	47d0      	blx	sl
 800fa58:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fa5c:	200a      	movs	r0, #10
 800fa5e:	e74b      	b.n	800f8f8 <rcl_wait_set_resize+0x1e4>
 800fa60:	6a28      	ldr	r0, [r5, #32]
 800fa62:	4639      	mov	r1, r7
 800fa64:	47c0      	blx	r8
 800fa66:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fa6a:	200a      	movs	r0, #10
 800fa6c:	e744      	b.n	800f8f8 <rcl_wait_set_resize+0x1e4>
 800fa6e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fa70:	9301      	str	r3, [sp, #4]
 800fa72:	4639      	mov	r1, r7
 800fa74:	47c0      	blx	r8
 800fa76:	9b01      	ldr	r3, [sp, #4]
 800fa78:	200a      	movs	r0, #10
 800fa7a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800fa7e:	e73b      	b.n	800f8f8 <rcl_wait_set_resize+0x1e4>

0800fa80 <rcl_wait_set_init>:
 800fa80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa84:	b084      	sub	sp, #16
 800fa86:	4604      	mov	r4, r0
 800fa88:	a810      	add	r0, sp, #64	@ 0x40
 800fa8a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800fa8e:	460f      	mov	r7, r1
 800fa90:	4690      	mov	r8, r2
 800fa92:	4699      	mov	r9, r3
 800fa94:	f7fa fcb4 	bl	800a400 <rcutils_allocator_is_valid>
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d06b      	beq.n	800fb74 <rcl_wait_set_init+0xf4>
 800fa9c:	2c00      	cmp	r4, #0
 800fa9e:	d069      	beq.n	800fb74 <rcl_wait_set_init+0xf4>
 800faa0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800faa2:	b125      	cbz	r5, 800faae <rcl_wait_set_init+0x2e>
 800faa4:	2564      	movs	r5, #100	@ 0x64
 800faa6:	4628      	mov	r0, r5
 800faa8:	b004      	add	sp, #16
 800faaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faae:	f1ba 0f00 	cmp.w	sl, #0
 800fab2:	d05f      	beq.n	800fb74 <rcl_wait_set_init+0xf4>
 800fab4:	4650      	mov	r0, sl
 800fab6:	f7fe fb3f 	bl	800e138 <rcl_context_is_valid>
 800faba:	2800      	cmp	r0, #0
 800fabc:	d067      	beq.n	800fb8e <rcl_wait_set_init+0x10e>
 800fabe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fac0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800fac2:	205c      	movs	r0, #92	@ 0x5c
 800fac4:	4798      	blx	r3
 800fac6:	6320      	str	r0, [r4, #48]	@ 0x30
 800fac8:	2800      	cmp	r0, #0
 800faca:	d062      	beq.n	800fb92 <rcl_wait_set_init+0x112>
 800facc:	4629      	mov	r1, r5
 800face:	225c      	movs	r2, #92	@ 0x5c
 800fad0:	f007 fa28 	bl	8016f24 <memset>
 800fad4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800fad8:	eb03 0e02 	add.w	lr, r3, r2
 800fadc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fade:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800fae0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800fae4:	449e      	add	lr, r3
 800fae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800faea:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800faee:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800faf2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800faf6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800fafa:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800fafe:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800fb02:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800fb06:	f8da a000 	ldr.w	sl, [sl]
 800fb0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb0c:	44c6      	add	lr, r8
 800fb0e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb12:	602b      	str	r3, [r5, #0]
 800fb14:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800fb18:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800fb1c:	f002 fe6c 	bl	80127f8 <rmw_create_wait_set>
 800fb20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb22:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800fb24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fb26:	b350      	cbz	r0, 800fb7e <rcl_wait_set_init+0xfe>
 800fb28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb2a:	9302      	str	r3, [sp, #8]
 800fb2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	4642      	mov	r2, r8
 800fb36:	464b      	mov	r3, r9
 800fb38:	4639      	mov	r1, r7
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f7ff fdea 	bl	800f714 <rcl_wait_set_resize>
 800fb40:	4605      	mov	r5, r0
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d0af      	beq.n	800faa6 <rcl_wait_set_init+0x26>
 800fb46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fb48:	bb2b      	cbnz	r3, 800fb96 <rcl_wait_set_init+0x116>
 800fb4a:	2600      	movs	r6, #0
 800fb4c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fb50:	9600      	str	r6, [sp, #0]
 800fb52:	4633      	mov	r3, r6
 800fb54:	4632      	mov	r2, r6
 800fb56:	4631      	mov	r1, r6
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f7ff fddb 	bl	800f714 <rcl_wait_set_resize>
 800fb5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800fb60:	2800      	cmp	r0, #0
 800fb62:	d0a0      	beq.n	800faa6 <rcl_wait_set_init+0x26>
 800fb64:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800fb66:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800fb68:	4798      	blx	r3
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	6326      	str	r6, [r4, #48]	@ 0x30
 800fb6e:	b004      	add	sp, #16
 800fb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb74:	250b      	movs	r5, #11
 800fb76:	4628      	mov	r0, r5
 800fb78:	b004      	add	sp, #16
 800fb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7e:	2501      	movs	r5, #1
 800fb80:	f002 fe44 	bl	801280c <rmw_destroy_wait_set>
 800fb84:	2800      	cmp	r0, #0
 800fb86:	bf18      	it	ne
 800fb88:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800fb8c:	e7dd      	b.n	800fb4a <rcl_wait_set_init+0xca>
 800fb8e:	2565      	movs	r5, #101	@ 0x65
 800fb90:	e789      	b.n	800faa6 <rcl_wait_set_init+0x26>
 800fb92:	250a      	movs	r5, #10
 800fb94:	e787      	b.n	800faa6 <rcl_wait_set_init+0x26>
 800fb96:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fb98:	e7f2      	b.n	800fb80 <rcl_wait_set_init+0x100>
 800fb9a:	bf00      	nop

0800fb9c <rcl_wait_set_add_guard_condition>:
 800fb9c:	b318      	cbz	r0, 800fbe6 <rcl_wait_set_add_guard_condition+0x4a>
 800fb9e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	4604      	mov	r4, r0
 800fba4:	b30b      	cbz	r3, 800fbea <rcl_wait_set_add_guard_condition+0x4e>
 800fba6:	b319      	cbz	r1, 800fbf0 <rcl_wait_set_add_guard_condition+0x54>
 800fba8:	68dd      	ldr	r5, [r3, #12]
 800fbaa:	68c0      	ldr	r0, [r0, #12]
 800fbac:	4285      	cmp	r5, r0
 800fbae:	d217      	bcs.n	800fbe0 <rcl_wait_set_add_guard_condition+0x44>
 800fbb0:	68a0      	ldr	r0, [r4, #8]
 800fbb2:	1c6e      	adds	r6, r5, #1
 800fbb4:	60de      	str	r6, [r3, #12]
 800fbb6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fbba:	b102      	cbz	r2, 800fbbe <rcl_wait_set_add_guard_condition+0x22>
 800fbbc:	6015      	str	r5, [r2, #0]
 800fbbe:	4608      	mov	r0, r1
 800fbc0:	f005 fd84 	bl	80156cc <rcl_guard_condition_get_rmw_handle>
 800fbc4:	b150      	cbz	r0, 800fbdc <rcl_wait_set_add_guard_condition+0x40>
 800fbc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fbc8:	6842      	ldr	r2, [r0, #4]
 800fbca:	695b      	ldr	r3, [r3, #20]
 800fbcc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbd0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fbd2:	6913      	ldr	r3, [r2, #16]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	6113      	str	r3, [r2, #16]
 800fbda:	bd70      	pop	{r4, r5, r6, pc}
 800fbdc:	2001      	movs	r0, #1
 800fbde:	bd70      	pop	{r4, r5, r6, pc}
 800fbe0:	f240 3086 	movw	r0, #902	@ 0x386
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
 800fbe6:	200b      	movs	r0, #11
 800fbe8:	4770      	bx	lr
 800fbea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	200b      	movs	r0, #11
 800fbf2:	bd70      	pop	{r4, r5, r6, pc}

0800fbf4 <rcl_wait_set_add_timer>:
 800fbf4:	b328      	cbz	r0, 800fc42 <rcl_wait_set_add_timer+0x4e>
 800fbf6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fbf8:	b570      	push	{r4, r5, r6, lr}
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	b31b      	cbz	r3, 800fc46 <rcl_wait_set_add_timer+0x52>
 800fbfe:	b329      	cbz	r1, 800fc4c <rcl_wait_set_add_timer+0x58>
 800fc00:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800fc02:	6965      	ldr	r5, [r4, #20]
 800fc04:	42a8      	cmp	r0, r5
 800fc06:	d219      	bcs.n	800fc3c <rcl_wait_set_add_timer+0x48>
 800fc08:	6925      	ldr	r5, [r4, #16]
 800fc0a:	1c46      	adds	r6, r0, #1
 800fc0c:	641e      	str	r6, [r3, #64]	@ 0x40
 800fc0e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800fc12:	b102      	cbz	r2, 800fc16 <rcl_wait_set_add_timer+0x22>
 800fc14:	6010      	str	r0, [r2, #0]
 800fc16:	4608      	mov	r0, r1
 800fc18:	f7ff fba6 	bl	800f368 <rcl_timer_get_guard_condition>
 800fc1c:	b168      	cbz	r0, 800fc3a <rcl_wait_set_add_timer+0x46>
 800fc1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fc20:	68e3      	ldr	r3, [r4, #12]
 800fc22:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800fc24:	3b01      	subs	r3, #1
 800fc26:	441d      	add	r5, r3
 800fc28:	f005 fd50 	bl	80156cc <rcl_guard_condition_get_rmw_handle>
 800fc2c:	b180      	cbz	r0, 800fc50 <rcl_wait_set_add_timer+0x5c>
 800fc2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fc30:	6842      	ldr	r2, [r0, #4]
 800fc32:	695b      	ldr	r3, [r3, #20]
 800fc34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc38:	2000      	movs	r0, #0
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	f240 3086 	movw	r0, #902	@ 0x386
 800fc40:	bd70      	pop	{r4, r5, r6, pc}
 800fc42:	200b      	movs	r0, #11
 800fc44:	4770      	bx	lr
 800fc46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fc4a:	bd70      	pop	{r4, r5, r6, pc}
 800fc4c:	200b      	movs	r0, #11
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	2001      	movs	r0, #1
 800fc52:	bd70      	pop	{r4, r5, r6, pc}

0800fc54 <rcl_wait_set_add_client>:
 800fc54:	b318      	cbz	r0, 800fc9e <rcl_wait_set_add_client+0x4a>
 800fc56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc58:	b570      	push	{r4, r5, r6, lr}
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	b30b      	cbz	r3, 800fca2 <rcl_wait_set_add_client+0x4e>
 800fc5e:	b319      	cbz	r1, 800fca8 <rcl_wait_set_add_client+0x54>
 800fc60:	699d      	ldr	r5, [r3, #24]
 800fc62:	69c0      	ldr	r0, [r0, #28]
 800fc64:	4285      	cmp	r5, r0
 800fc66:	d217      	bcs.n	800fc98 <rcl_wait_set_add_client+0x44>
 800fc68:	69a0      	ldr	r0, [r4, #24]
 800fc6a:	1c6e      	adds	r6, r5, #1
 800fc6c:	619e      	str	r6, [r3, #24]
 800fc6e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fc72:	b102      	cbz	r2, 800fc76 <rcl_wait_set_add_client+0x22>
 800fc74:	6015      	str	r5, [r2, #0]
 800fc76:	4608      	mov	r0, r1
 800fc78:	f7fe f9b2 	bl	800dfe0 <rcl_client_get_rmw_handle>
 800fc7c:	b150      	cbz	r0, 800fc94 <rcl_wait_set_add_client+0x40>
 800fc7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fc80:	6842      	ldr	r2, [r0, #4]
 800fc82:	6a1b      	ldr	r3, [r3, #32]
 800fc84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fc8a:	69d3      	ldr	r3, [r2, #28]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	2000      	movs	r0, #0
 800fc90:	61d3      	str	r3, [r2, #28]
 800fc92:	bd70      	pop	{r4, r5, r6, pc}
 800fc94:	2001      	movs	r0, #1
 800fc96:	bd70      	pop	{r4, r5, r6, pc}
 800fc98:	f240 3086 	movw	r0, #902	@ 0x386
 800fc9c:	bd70      	pop	{r4, r5, r6, pc}
 800fc9e:	200b      	movs	r0, #11
 800fca0:	4770      	bx	lr
 800fca2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fca6:	bd70      	pop	{r4, r5, r6, pc}
 800fca8:	200b      	movs	r0, #11
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}

0800fcac <rcl_wait_set_add_service>:
 800fcac:	b318      	cbz	r0, 800fcf6 <rcl_wait_set_add_service+0x4a>
 800fcae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	b30b      	cbz	r3, 800fcfa <rcl_wait_set_add_service+0x4e>
 800fcb6:	b319      	cbz	r1, 800fd00 <rcl_wait_set_add_service+0x54>
 800fcb8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 800fcba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800fcbc:	4285      	cmp	r5, r0
 800fcbe:	d217      	bcs.n	800fcf0 <rcl_wait_set_add_service+0x44>
 800fcc0:	6a20      	ldr	r0, [r4, #32]
 800fcc2:	1c6e      	adds	r6, r5, #1
 800fcc4:	625e      	str	r6, [r3, #36]	@ 0x24
 800fcc6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fcca:	b102      	cbz	r2, 800fcce <rcl_wait_set_add_service+0x22>
 800fccc:	6015      	str	r5, [r2, #0]
 800fcce:	4608      	mov	r0, r1
 800fcd0:	f7ff f804 	bl	800ecdc <rcl_service_get_rmw_handle>
 800fcd4:	b150      	cbz	r0, 800fcec <rcl_wait_set_add_service+0x40>
 800fcd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fcd8:	6842      	ldr	r2, [r0, #4]
 800fcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcdc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fce0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800fce2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800fce4:	3301      	adds	r3, #1
 800fce6:	2000      	movs	r0, #0
 800fce8:	6293      	str	r3, [r2, #40]	@ 0x28
 800fcea:	bd70      	pop	{r4, r5, r6, pc}
 800fcec:	2001      	movs	r0, #1
 800fcee:	bd70      	pop	{r4, r5, r6, pc}
 800fcf0:	f240 3086 	movw	r0, #902	@ 0x386
 800fcf4:	bd70      	pop	{r4, r5, r6, pc}
 800fcf6:	200b      	movs	r0, #11
 800fcf8:	4770      	bx	lr
 800fcfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
 800fd00:	200b      	movs	r0, #11
 800fd02:	bd70      	pop	{r4, r5, r6, pc}
 800fd04:	0000      	movs	r0, r0
	...

0800fd08 <rcl_wait>:
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	ed2d 8b02 	vpush	{d8}
 800fd10:	b08d      	sub	sp, #52	@ 0x34
 800fd12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd16:	2800      	cmp	r0, #0
 800fd18:	f000 8143 	beq.w	800ffa2 <rcl_wait+0x29a>
 800fd1c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800fd1e:	4605      	mov	r5, r0
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	f000 8112 	beq.w	800ff4a <rcl_wait+0x242>
 800fd26:	6843      	ldr	r3, [r0, #4]
 800fd28:	b983      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd2a:	68eb      	ldr	r3, [r5, #12]
 800fd2c:	b973      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd2e:	696b      	ldr	r3, [r5, #20]
 800fd30:	b963      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd32:	69eb      	ldr	r3, [r5, #28]
 800fd34:	b953      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800fd38:	b943      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fd3c:	b933      	cbnz	r3, 800fd4c <rcl_wait+0x44>
 800fd3e:	f240 3085 	movw	r0, #901	@ 0x385
 800fd42:	b00d      	add	sp, #52	@ 0x34
 800fd44:	ecbd 8b02 	vpop	{d8}
 800fd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4c:	9b04      	ldr	r3, [sp, #16]
 800fd4e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	9b05      	ldr	r3, [sp, #20]
 800fd54:	f173 0300 	sbcs.w	r3, r3, #0
 800fd58:	f2c0 80f0 	blt.w	800ff3c <rcl_wait+0x234>
 800fd5c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800fd60:	4643      	mov	r3, r8
 800fd62:	2a00      	cmp	r2, #0
 800fd64:	f000 8133 	beq.w	800ffce <rcl_wait+0x2c6>
 800fd68:	2400      	movs	r4, #0
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 800ffe0 <rcl_wait+0x2d8>
 800fd70:	46a2      	mov	sl, r4
 800fd72:	46a3      	mov	fp, r4
 800fd74:	f240 3921 	movw	r9, #801	@ 0x321
 800fd78:	4632      	mov	r2, r6
 800fd7a:	e014      	b.n	800fda6 <rcl_wait+0x9e>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1e0      	bne.n	800fd42 <rcl_wait+0x3a>
 800fd80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd84:	4542      	cmp	r2, r8
 800fd86:	eb73 0107 	sbcs.w	r1, r3, r7
 800fd8a:	da03      	bge.n	800fd94 <rcl_wait+0x8c>
 800fd8c:	4690      	mov	r8, r2
 800fd8e:	461f      	mov	r7, r3
 800fd90:	f04f 0b01 	mov.w	fp, #1
 800fd94:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800fd96:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800fd98:	3401      	adds	r4, #1
 800fd9a:	f14a 0a00 	adc.w	sl, sl, #0
 800fd9e:	429c      	cmp	r4, r3
 800fda0:	f17a 0100 	sbcs.w	r1, sl, #0
 800fda4:	d228      	bcs.n	800fdf8 <rcl_wait+0xf0>
 800fda6:	6928      	ldr	r0, [r5, #16]
 800fda8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fdac:	a908      	add	r1, sp, #32
 800fdae:	00a6      	lsls	r6, r4, #2
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d0f1      	beq.n	800fd98 <rcl_wait+0x90>
 800fdb4:	68eb      	ldr	r3, [r5, #12]
 800fdb6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800fdba:	4423      	add	r3, r4
 800fdbc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800fdc0:	f1be 0f00 	cmp.w	lr, #0
 800fdc4:	d006      	beq.n	800fdd4 <rcl_wait+0xcc>
 800fdc6:	6913      	ldr	r3, [r2, #16]
 800fdc8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	6113      	str	r3, [r2, #16]
 800fdd0:	692b      	ldr	r3, [r5, #16]
 800fdd2:	5998      	ldr	r0, [r3, r6]
 800fdd4:	ed8d 8b08 	vstr	d8, [sp, #32]
 800fdd8:	f7ff fa94 	bl	800f304 <rcl_timer_get_time_until_next_call>
 800fddc:	4548      	cmp	r0, r9
 800fdde:	d1cd      	bne.n	800fd7c <rcl_wait+0x74>
 800fde0:	692b      	ldr	r3, [r5, #16]
 800fde2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800fde4:	2100      	movs	r1, #0
 800fde6:	5199      	str	r1, [r3, r6]
 800fde8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800fdea:	3401      	adds	r4, #1
 800fdec:	f14a 0a00 	adc.w	sl, sl, #0
 800fdf0:	429c      	cmp	r4, r3
 800fdf2:	f17a 0100 	sbcs.w	r1, sl, #0
 800fdf6:	d3d6      	bcc.n	800fda6 <rcl_wait+0x9e>
 800fdf8:	4616      	mov	r6, r2
 800fdfa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	46d9      	mov	r9, fp
 800fe02:	f040 80a9 	bne.w	800ff58 <rcl_wait+0x250>
 800fe06:	2300      	movs	r3, #0
 800fe08:	2200      	movs	r2, #0
 800fe0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fe0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800fe12:	ab08      	add	r3, sp, #32
 800fe14:	9302      	str	r3, [sp, #8]
 800fe16:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 800fe18:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 800fe1c:	e9cd 3200 	strd	r3, r2, [sp]
 800fe20:	f106 0110 	add.w	r1, r6, #16
 800fe24:	f106 031c 	add.w	r3, r6, #28
 800fe28:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 800fe2c:	1d30      	adds	r0, r6, #4
 800fe2e:	f002 fb6b 	bl	8012508 <rmw_wait>
 800fe32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fe36:	4680      	mov	r8, r0
 800fe38:	b1ca      	cbz	r2, 800fe6e <rcl_wait+0x166>
 800fe3a:	2400      	movs	r4, #0
 800fe3c:	4627      	mov	r7, r4
 800fe3e:	692a      	ldr	r2, [r5, #16]
 800fe40:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800fe44:	f10d 011f 	add.w	r1, sp, #31
 800fe48:	00a6      	lsls	r6, r4, #2
 800fe4a:	b160      	cbz	r0, 800fe66 <rcl_wait+0x15e>
 800fe4c:	f88d 701f 	strb.w	r7, [sp, #31]
 800fe50:	f7ff fa1e 	bl	800f290 <rcl_timer_is_ready>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f47f af74 	bne.w	800fd42 <rcl_wait+0x3a>
 800fe5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800fe5e:	b90b      	cbnz	r3, 800fe64 <rcl_wait+0x15c>
 800fe60:	692a      	ldr	r2, [r5, #16]
 800fe62:	5193      	str	r3, [r2, r6]
 800fe64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fe66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fe68:	3401      	adds	r4, #1
 800fe6a:	42a2      	cmp	r2, r4
 800fe6c:	d8e7      	bhi.n	800fe3e <rcl_wait+0x136>
 800fe6e:	f038 0002 	bics.w	r0, r8, #2
 800fe72:	f040 8090 	bne.w	800ff96 <rcl_wait+0x28e>
 800fe76:	686e      	ldr	r6, [r5, #4]
 800fe78:	4602      	mov	r2, r0
 800fe7a:	b91e      	cbnz	r6, 800fe84 <rcl_wait+0x17c>
 800fe7c:	e00d      	b.n	800fe9a <rcl_wait+0x192>
 800fe7e:	3201      	adds	r2, #1
 800fe80:	42b2      	cmp	r2, r6
 800fe82:	d00a      	beq.n	800fe9a <rcl_wait+0x192>
 800fe84:	6899      	ldr	r1, [r3, #8]
 800fe86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fe8a:	2900      	cmp	r1, #0
 800fe8c:	d1f7      	bne.n	800fe7e <rcl_wait+0x176>
 800fe8e:	682c      	ldr	r4, [r5, #0]
 800fe90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800fe94:	3201      	adds	r2, #1
 800fe96:	42b2      	cmp	r2, r6
 800fe98:	d1f4      	bne.n	800fe84 <rcl_wait+0x17c>
 800fe9a:	68ee      	ldr	r6, [r5, #12]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	b91e      	cbnz	r6, 800fea8 <rcl_wait+0x1a0>
 800fea0:	e00d      	b.n	800febe <rcl_wait+0x1b6>
 800fea2:	3201      	adds	r2, #1
 800fea4:	42b2      	cmp	r2, r6
 800fea6:	d00a      	beq.n	800febe <rcl_wait+0x1b6>
 800fea8:	6959      	ldr	r1, [r3, #20]
 800feaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800feae:	2900      	cmp	r1, #0
 800feb0:	d1f7      	bne.n	800fea2 <rcl_wait+0x19a>
 800feb2:	68ac      	ldr	r4, [r5, #8]
 800feb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800feb8:	3201      	adds	r2, #1
 800feba:	42b2      	cmp	r2, r6
 800febc:	d1f4      	bne.n	800fea8 <rcl_wait+0x1a0>
 800febe:	69ee      	ldr	r6, [r5, #28]
 800fec0:	2200      	movs	r2, #0
 800fec2:	b91e      	cbnz	r6, 800fecc <rcl_wait+0x1c4>
 800fec4:	e00d      	b.n	800fee2 <rcl_wait+0x1da>
 800fec6:	3201      	adds	r2, #1
 800fec8:	42b2      	cmp	r2, r6
 800feca:	d00a      	beq.n	800fee2 <rcl_wait+0x1da>
 800fecc:	6a19      	ldr	r1, [r3, #32]
 800fece:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fed2:	2900      	cmp	r1, #0
 800fed4:	d1f7      	bne.n	800fec6 <rcl_wait+0x1be>
 800fed6:	69ac      	ldr	r4, [r5, #24]
 800fed8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800fedc:	3201      	adds	r2, #1
 800fede:	42b2      	cmp	r2, r6
 800fee0:	d1f4      	bne.n	800fecc <rcl_wait+0x1c4>
 800fee2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 800fee4:	2200      	movs	r2, #0
 800fee6:	b91e      	cbnz	r6, 800fef0 <rcl_wait+0x1e8>
 800fee8:	e00d      	b.n	800ff06 <rcl_wait+0x1fe>
 800feea:	3201      	adds	r2, #1
 800feec:	4296      	cmp	r6, r2
 800feee:	d00a      	beq.n	800ff06 <rcl_wait+0x1fe>
 800fef0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fef2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800fef6:	2900      	cmp	r1, #0
 800fef8:	d1f7      	bne.n	800feea <rcl_wait+0x1e2>
 800fefa:	6a2c      	ldr	r4, [r5, #32]
 800fefc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff00:	3201      	adds	r2, #1
 800ff02:	4296      	cmp	r6, r2
 800ff04:	d1f4      	bne.n	800fef0 <rcl_wait+0x1e8>
 800ff06:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 800ff08:	2200      	movs	r2, #0
 800ff0a:	b91e      	cbnz	r6, 800ff14 <rcl_wait+0x20c>
 800ff0c:	e00d      	b.n	800ff2a <rcl_wait+0x222>
 800ff0e:	3201      	adds	r2, #1
 800ff10:	42b2      	cmp	r2, r6
 800ff12:	d00a      	beq.n	800ff2a <rcl_wait+0x222>
 800ff14:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800ff16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff1a:	2900      	cmp	r1, #0
 800ff1c:	d1f7      	bne.n	800ff0e <rcl_wait+0x206>
 800ff1e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 800ff20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff24:	3201      	adds	r2, #1
 800ff26:	42b2      	cmp	r2, r6
 800ff28:	d1f4      	bne.n	800ff14 <rcl_wait+0x20c>
 800ff2a:	f1b8 0f02 	cmp.w	r8, #2
 800ff2e:	f47f af08 	bne.w	800fd42 <rcl_wait+0x3a>
 800ff32:	464b      	mov	r3, r9
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	bf08      	it	eq
 800ff38:	2002      	moveq	r0, #2
 800ff3a:	e702      	b.n	800fd42 <rcl_wait+0x3a>
 800ff3c:	2a00      	cmp	r2, #0
 800ff3e:	d03a      	beq.n	800ffb6 <rcl_wait+0x2ae>
 800ff40:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ff44:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800ff48:	e70e      	b.n	800fd68 <rcl_wait+0x60>
 800ff4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ff4e:	b00d      	add	sp, #52	@ 0x34
 800ff50:	ecbd 8b02 	vpop	{d8}
 800ff54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff58:	9b04      	ldr	r3, [sp, #16]
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	9b05      	ldr	r3, [sp, #20]
 800ff5e:	f173 0300 	sbcs.w	r3, r3, #0
 800ff62:	db24      	blt.n	800ffae <rcl_wait+0x2a6>
 800ff64:	2f00      	cmp	r7, #0
 800ff66:	bfbc      	itt	lt
 800ff68:	f04f 0800 	movlt.w	r8, #0
 800ff6c:	4647      	movlt	r7, r8
 800ff6e:	a31e      	add	r3, pc, #120	@ (adr r3, 800ffe8 <rcl_wait+0x2e0>)
 800ff70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff74:	4640      	mov	r0, r8
 800ff76:	4639      	mov	r1, r7
 800ff78:	f7f0 fe46 	bl	8000c08 <__aeabi_ldivmod>
 800ff7c:	a31a      	add	r3, pc, #104	@ (adr r3, 800ffe8 <rcl_wait+0x2e0>)
 800ff7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ff86:	4640      	mov	r0, r8
 800ff88:	4639      	mov	r1, r7
 800ff8a:	f7f0 fe3d 	bl	8000c08 <__aeabi_ldivmod>
 800ff8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 800ff92:	ab08      	add	r3, sp, #32
 800ff94:	e73e      	b.n	800fe14 <rcl_wait+0x10c>
 800ff96:	2001      	movs	r0, #1
 800ff98:	b00d      	add	sp, #52	@ 0x34
 800ff9a:	ecbd 8b02 	vpop	{d8}
 800ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa2:	200b      	movs	r0, #11
 800ffa4:	b00d      	add	sp, #52	@ 0x34
 800ffa6:	ecbd 8b02 	vpop	{d8}
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	465b      	mov	r3, fp
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1d7      	bne.n	800ff64 <rcl_wait+0x25c>
 800ffb4:	e72e      	b.n	800fe14 <rcl_wait+0x10c>
 800ffb6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ffba:	430b      	orrs	r3, r1
 800ffbc:	bf08      	it	eq
 800ffbe:	4691      	moveq	r9, r2
 800ffc0:	f43f af21 	beq.w	800fe06 <rcl_wait+0xfe>
 800ffc4:	9b04      	ldr	r3, [sp, #16]
 800ffc6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ffca:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	9b05      	ldr	r3, [sp, #20]
 800ffd2:	f173 0300 	sbcs.w	r3, r3, #0
 800ffd6:	f04f 0300 	mov.w	r3, #0
 800ffda:	4699      	mov	r9, r3
 800ffdc:	dac2      	bge.n	800ff64 <rcl_wait+0x25c>
 800ffde:	e719      	b.n	800fe14 <rcl_wait+0x10c>
 800ffe0:	ffffffff 	.word	0xffffffff
 800ffe4:	7fffffff 	.word	0x7fffffff
 800ffe8:	3b9aca00 	.word	0x3b9aca00
 800ffec:	00000000 	.word	0x00000000

0800fff0 <rcl_action_take_goal_response>:
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d039      	beq.n	8010068 <rcl_action_take_goal_response+0x78>
 800fff4:	b570      	push	{r4, r5, r6, lr}
 800fff6:	4604      	mov	r4, r0
 800fff8:	6800      	ldr	r0, [r0, #0]
 800fffa:	b380      	cbz	r0, 801005e <rcl_action_take_goal_response+0x6e>
 800fffc:	460d      	mov	r5, r1
 800fffe:	4616      	mov	r6, r2
 8010000:	f7fe f872 	bl	800e0e8 <rcl_client_is_valid>
 8010004:	b330      	cbz	r0, 8010054 <rcl_action_take_goal_response+0x64>
 8010006:	6820      	ldr	r0, [r4, #0]
 8010008:	3004      	adds	r0, #4
 801000a:	f7fe f86d 	bl	800e0e8 <rcl_client_is_valid>
 801000e:	b308      	cbz	r0, 8010054 <rcl_action_take_goal_response+0x64>
 8010010:	6820      	ldr	r0, [r4, #0]
 8010012:	3008      	adds	r0, #8
 8010014:	f7fe f868 	bl	800e0e8 <rcl_client_is_valid>
 8010018:	b1e0      	cbz	r0, 8010054 <rcl_action_take_goal_response+0x64>
 801001a:	6820      	ldr	r0, [r4, #0]
 801001c:	300c      	adds	r0, #12
 801001e:	f7fe ffff 	bl	800f020 <rcl_subscription_is_valid>
 8010022:	b1b8      	cbz	r0, 8010054 <rcl_action_take_goal_response+0x64>
 8010024:	6820      	ldr	r0, [r4, #0]
 8010026:	3010      	adds	r0, #16
 8010028:	f7fe fffa 	bl	800f020 <rcl_subscription_is_valid>
 801002c:	b190      	cbz	r0, 8010054 <rcl_action_take_goal_response+0x64>
 801002e:	b1cd      	cbz	r5, 8010064 <rcl_action_take_goal_response+0x74>
 8010030:	b1c6      	cbz	r6, 8010064 <rcl_action_take_goal_response+0x74>
 8010032:	6820      	ldr	r0, [r4, #0]
 8010034:	4632      	mov	r2, r6
 8010036:	4629      	mov	r1, r5
 8010038:	f7fe f80e 	bl	800e058 <rcl_take_response>
 801003c:	b148      	cbz	r0, 8010052 <rcl_action_take_goal_response+0x62>
 801003e:	280a      	cmp	r0, #10
 8010040:	d007      	beq.n	8010052 <rcl_action_take_goal_response+0x62>
 8010042:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010046:	f640 0337 	movw	r3, #2103	@ 0x837
 801004a:	4290      	cmp	r0, r2
 801004c:	bf0c      	ite	eq
 801004e:	4618      	moveq	r0, r3
 8010050:	2001      	movne	r0, #1
 8010052:	bd70      	pop	{r4, r5, r6, pc}
 8010054:	f7fa f9f8 	bl	800a448 <rcutils_reset_error>
 8010058:	f640 0036 	movw	r0, #2102	@ 0x836
 801005c:	bd70      	pop	{r4, r5, r6, pc}
 801005e:	f640 0036 	movw	r0, #2102	@ 0x836
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	200b      	movs	r0, #11
 8010066:	bd70      	pop	{r4, r5, r6, pc}
 8010068:	f640 0036 	movw	r0, #2102	@ 0x836
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop

08010070 <rcl_action_send_result_request>:
 8010070:	b390      	cbz	r0, 80100d8 <rcl_action_send_result_request+0x68>
 8010072:	b570      	push	{r4, r5, r6, lr}
 8010074:	4604      	mov	r4, r0
 8010076:	6800      	ldr	r0, [r0, #0]
 8010078:	b348      	cbz	r0, 80100ce <rcl_action_send_result_request+0x5e>
 801007a:	460d      	mov	r5, r1
 801007c:	4616      	mov	r6, r2
 801007e:	f7fe f833 	bl	800e0e8 <rcl_client_is_valid>
 8010082:	b1f8      	cbz	r0, 80100c4 <rcl_action_send_result_request+0x54>
 8010084:	6820      	ldr	r0, [r4, #0]
 8010086:	3004      	adds	r0, #4
 8010088:	f7fe f82e 	bl	800e0e8 <rcl_client_is_valid>
 801008c:	b1d0      	cbz	r0, 80100c4 <rcl_action_send_result_request+0x54>
 801008e:	6820      	ldr	r0, [r4, #0]
 8010090:	3008      	adds	r0, #8
 8010092:	f7fe f829 	bl	800e0e8 <rcl_client_is_valid>
 8010096:	b1a8      	cbz	r0, 80100c4 <rcl_action_send_result_request+0x54>
 8010098:	6820      	ldr	r0, [r4, #0]
 801009a:	300c      	adds	r0, #12
 801009c:	f7fe ffc0 	bl	800f020 <rcl_subscription_is_valid>
 80100a0:	b180      	cbz	r0, 80100c4 <rcl_action_send_result_request+0x54>
 80100a2:	6820      	ldr	r0, [r4, #0]
 80100a4:	3010      	adds	r0, #16
 80100a6:	f7fe ffbb 	bl	800f020 <rcl_subscription_is_valid>
 80100aa:	b158      	cbz	r0, 80100c4 <rcl_action_send_result_request+0x54>
 80100ac:	b195      	cbz	r5, 80100d4 <rcl_action_send_result_request+0x64>
 80100ae:	b18e      	cbz	r6, 80100d4 <rcl_action_send_result_request+0x64>
 80100b0:	6820      	ldr	r0, [r4, #0]
 80100b2:	4632      	mov	r2, r6
 80100b4:	4629      	mov	r1, r5
 80100b6:	3008      	adds	r0, #8
 80100b8:	f7fd ff98 	bl	800dfec <rcl_send_request>
 80100bc:	3800      	subs	r0, #0
 80100be:	bf18      	it	ne
 80100c0:	2001      	movne	r0, #1
 80100c2:	bd70      	pop	{r4, r5, r6, pc}
 80100c4:	f7fa f9c0 	bl	800a448 <rcutils_reset_error>
 80100c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80100cc:	bd70      	pop	{r4, r5, r6, pc}
 80100ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80100d2:	bd70      	pop	{r4, r5, r6, pc}
 80100d4:	200b      	movs	r0, #11
 80100d6:	bd70      	pop	{r4, r5, r6, pc}
 80100d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop

080100e0 <rcl_action_take_result_response>:
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d03a      	beq.n	801015a <rcl_action_take_result_response+0x7a>
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	4604      	mov	r4, r0
 80100e8:	6800      	ldr	r0, [r0, #0]
 80100ea:	b388      	cbz	r0, 8010150 <rcl_action_take_result_response+0x70>
 80100ec:	460d      	mov	r5, r1
 80100ee:	4616      	mov	r6, r2
 80100f0:	f7fd fffa 	bl	800e0e8 <rcl_client_is_valid>
 80100f4:	b338      	cbz	r0, 8010146 <rcl_action_take_result_response+0x66>
 80100f6:	6820      	ldr	r0, [r4, #0]
 80100f8:	3004      	adds	r0, #4
 80100fa:	f7fd fff5 	bl	800e0e8 <rcl_client_is_valid>
 80100fe:	b310      	cbz	r0, 8010146 <rcl_action_take_result_response+0x66>
 8010100:	6820      	ldr	r0, [r4, #0]
 8010102:	3008      	adds	r0, #8
 8010104:	f7fd fff0 	bl	800e0e8 <rcl_client_is_valid>
 8010108:	b1e8      	cbz	r0, 8010146 <rcl_action_take_result_response+0x66>
 801010a:	6820      	ldr	r0, [r4, #0]
 801010c:	300c      	adds	r0, #12
 801010e:	f7fe ff87 	bl	800f020 <rcl_subscription_is_valid>
 8010112:	b1c0      	cbz	r0, 8010146 <rcl_action_take_result_response+0x66>
 8010114:	6820      	ldr	r0, [r4, #0]
 8010116:	3010      	adds	r0, #16
 8010118:	f7fe ff82 	bl	800f020 <rcl_subscription_is_valid>
 801011c:	b198      	cbz	r0, 8010146 <rcl_action_take_result_response+0x66>
 801011e:	b1d5      	cbz	r5, 8010156 <rcl_action_take_result_response+0x76>
 8010120:	b1ce      	cbz	r6, 8010156 <rcl_action_take_result_response+0x76>
 8010122:	6820      	ldr	r0, [r4, #0]
 8010124:	4632      	mov	r2, r6
 8010126:	4629      	mov	r1, r5
 8010128:	3008      	adds	r0, #8
 801012a:	f7fd ff95 	bl	800e058 <rcl_take_response>
 801012e:	b148      	cbz	r0, 8010144 <rcl_action_take_result_response+0x64>
 8010130:	280a      	cmp	r0, #10
 8010132:	d007      	beq.n	8010144 <rcl_action_take_result_response+0x64>
 8010134:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010138:	f640 0337 	movw	r3, #2103	@ 0x837
 801013c:	4290      	cmp	r0, r2
 801013e:	bf0c      	ite	eq
 8010140:	4618      	moveq	r0, r3
 8010142:	2001      	movne	r0, #1
 8010144:	bd70      	pop	{r4, r5, r6, pc}
 8010146:	f7fa f97f 	bl	800a448 <rcutils_reset_error>
 801014a:	f640 0036 	movw	r0, #2102	@ 0x836
 801014e:	bd70      	pop	{r4, r5, r6, pc}
 8010150:	f640 0036 	movw	r0, #2102	@ 0x836
 8010154:	bd70      	pop	{r4, r5, r6, pc}
 8010156:	200b      	movs	r0, #11
 8010158:	bd70      	pop	{r4, r5, r6, pc}
 801015a:	f640 0036 	movw	r0, #2102	@ 0x836
 801015e:	4770      	bx	lr

08010160 <rcl_action_take_cancel_response>:
 8010160:	2800      	cmp	r0, #0
 8010162:	d03a      	beq.n	80101da <rcl_action_take_cancel_response+0x7a>
 8010164:	b570      	push	{r4, r5, r6, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	6800      	ldr	r0, [r0, #0]
 801016a:	b388      	cbz	r0, 80101d0 <rcl_action_take_cancel_response+0x70>
 801016c:	460d      	mov	r5, r1
 801016e:	4616      	mov	r6, r2
 8010170:	f7fd ffba 	bl	800e0e8 <rcl_client_is_valid>
 8010174:	b338      	cbz	r0, 80101c6 <rcl_action_take_cancel_response+0x66>
 8010176:	6820      	ldr	r0, [r4, #0]
 8010178:	3004      	adds	r0, #4
 801017a:	f7fd ffb5 	bl	800e0e8 <rcl_client_is_valid>
 801017e:	b310      	cbz	r0, 80101c6 <rcl_action_take_cancel_response+0x66>
 8010180:	6820      	ldr	r0, [r4, #0]
 8010182:	3008      	adds	r0, #8
 8010184:	f7fd ffb0 	bl	800e0e8 <rcl_client_is_valid>
 8010188:	b1e8      	cbz	r0, 80101c6 <rcl_action_take_cancel_response+0x66>
 801018a:	6820      	ldr	r0, [r4, #0]
 801018c:	300c      	adds	r0, #12
 801018e:	f7fe ff47 	bl	800f020 <rcl_subscription_is_valid>
 8010192:	b1c0      	cbz	r0, 80101c6 <rcl_action_take_cancel_response+0x66>
 8010194:	6820      	ldr	r0, [r4, #0]
 8010196:	3010      	adds	r0, #16
 8010198:	f7fe ff42 	bl	800f020 <rcl_subscription_is_valid>
 801019c:	b198      	cbz	r0, 80101c6 <rcl_action_take_cancel_response+0x66>
 801019e:	b1d5      	cbz	r5, 80101d6 <rcl_action_take_cancel_response+0x76>
 80101a0:	b1ce      	cbz	r6, 80101d6 <rcl_action_take_cancel_response+0x76>
 80101a2:	6820      	ldr	r0, [r4, #0]
 80101a4:	4632      	mov	r2, r6
 80101a6:	4629      	mov	r1, r5
 80101a8:	3004      	adds	r0, #4
 80101aa:	f7fd ff55 	bl	800e058 <rcl_take_response>
 80101ae:	b148      	cbz	r0, 80101c4 <rcl_action_take_cancel_response+0x64>
 80101b0:	280a      	cmp	r0, #10
 80101b2:	d007      	beq.n	80101c4 <rcl_action_take_cancel_response+0x64>
 80101b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80101b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80101bc:	4290      	cmp	r0, r2
 80101be:	bf0c      	ite	eq
 80101c0:	4618      	moveq	r0, r3
 80101c2:	2001      	movne	r0, #1
 80101c4:	bd70      	pop	{r4, r5, r6, pc}
 80101c6:	f7fa f93f 	bl	800a448 <rcutils_reset_error>
 80101ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80101ce:	bd70      	pop	{r4, r5, r6, pc}
 80101d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80101d4:	bd70      	pop	{r4, r5, r6, pc}
 80101d6:	200b      	movs	r0, #11
 80101d8:	bd70      	pop	{r4, r5, r6, pc}
 80101da:	f640 0036 	movw	r0, #2102	@ 0x836
 80101de:	4770      	bx	lr

080101e0 <rcl_action_take_feedback>:
 80101e0:	2800      	cmp	r0, #0
 80101e2:	d038      	beq.n	8010256 <rcl_action_take_feedback+0x76>
 80101e4:	b530      	push	{r4, r5, lr}
 80101e6:	4604      	mov	r4, r0
 80101e8:	6800      	ldr	r0, [r0, #0]
 80101ea:	b091      	sub	sp, #68	@ 0x44
 80101ec:	b378      	cbz	r0, 801024e <rcl_action_take_feedback+0x6e>
 80101ee:	460d      	mov	r5, r1
 80101f0:	f7fd ff7a 	bl	800e0e8 <rcl_client_is_valid>
 80101f4:	b328      	cbz	r0, 8010242 <rcl_action_take_feedback+0x62>
 80101f6:	6820      	ldr	r0, [r4, #0]
 80101f8:	3004      	adds	r0, #4
 80101fa:	f7fd ff75 	bl	800e0e8 <rcl_client_is_valid>
 80101fe:	b300      	cbz	r0, 8010242 <rcl_action_take_feedback+0x62>
 8010200:	6820      	ldr	r0, [r4, #0]
 8010202:	3008      	adds	r0, #8
 8010204:	f7fd ff70 	bl	800e0e8 <rcl_client_is_valid>
 8010208:	b1d8      	cbz	r0, 8010242 <rcl_action_take_feedback+0x62>
 801020a:	6820      	ldr	r0, [r4, #0]
 801020c:	300c      	adds	r0, #12
 801020e:	f7fe ff07 	bl	800f020 <rcl_subscription_is_valid>
 8010212:	b1b0      	cbz	r0, 8010242 <rcl_action_take_feedback+0x62>
 8010214:	6820      	ldr	r0, [r4, #0]
 8010216:	3010      	adds	r0, #16
 8010218:	f7fe ff02 	bl	800f020 <rcl_subscription_is_valid>
 801021c:	b188      	cbz	r0, 8010242 <rcl_action_take_feedback+0x62>
 801021e:	b1ed      	cbz	r5, 801025c <rcl_action_take_feedback+0x7c>
 8010220:	6820      	ldr	r0, [r4, #0]
 8010222:	2300      	movs	r3, #0
 8010224:	466a      	mov	r2, sp
 8010226:	4629      	mov	r1, r5
 8010228:	300c      	adds	r0, #12
 801022a:	f7fe fe9b 	bl	800ef64 <rcl_take>
 801022e:	b160      	cbz	r0, 801024a <rcl_action_take_feedback+0x6a>
 8010230:	f240 1391 	movw	r3, #401	@ 0x191
 8010234:	4298      	cmp	r0, r3
 8010236:	d014      	beq.n	8010262 <rcl_action_take_feedback+0x82>
 8010238:	280a      	cmp	r0, #10
 801023a:	bf18      	it	ne
 801023c:	2001      	movne	r0, #1
 801023e:	b011      	add	sp, #68	@ 0x44
 8010240:	bd30      	pop	{r4, r5, pc}
 8010242:	f7fa f901 	bl	800a448 <rcutils_reset_error>
 8010246:	f640 0036 	movw	r0, #2102	@ 0x836
 801024a:	b011      	add	sp, #68	@ 0x44
 801024c:	bd30      	pop	{r4, r5, pc}
 801024e:	f640 0036 	movw	r0, #2102	@ 0x836
 8010252:	b011      	add	sp, #68	@ 0x44
 8010254:	bd30      	pop	{r4, r5, pc}
 8010256:	f640 0036 	movw	r0, #2102	@ 0x836
 801025a:	4770      	bx	lr
 801025c:	200b      	movs	r0, #11
 801025e:	b011      	add	sp, #68	@ 0x44
 8010260:	bd30      	pop	{r4, r5, pc}
 8010262:	f640 0037 	movw	r0, #2103	@ 0x837
 8010266:	e7f0      	b.n	801024a <rcl_action_take_feedback+0x6a>

08010268 <rcl_action_wait_set_add_action_client>:
 8010268:	2800      	cmp	r0, #0
 801026a:	d048      	beq.n	80102fe <rcl_action_wait_set_add_action_client+0x96>
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	460c      	mov	r4, r1
 8010270:	2900      	cmp	r1, #0
 8010272:	d03c      	beq.n	80102ee <rcl_action_wait_set_add_action_client+0x86>
 8010274:	4605      	mov	r5, r0
 8010276:	6808      	ldr	r0, [r1, #0]
 8010278:	2800      	cmp	r0, #0
 801027a:	d038      	beq.n	80102ee <rcl_action_wait_set_add_action_client+0x86>
 801027c:	4617      	mov	r7, r2
 801027e:	461e      	mov	r6, r3
 8010280:	f7fd ff32 	bl	800e0e8 <rcl_client_is_valid>
 8010284:	b3b0      	cbz	r0, 80102f4 <rcl_action_wait_set_add_action_client+0x8c>
 8010286:	6820      	ldr	r0, [r4, #0]
 8010288:	3004      	adds	r0, #4
 801028a:	f7fd ff2d 	bl	800e0e8 <rcl_client_is_valid>
 801028e:	b388      	cbz	r0, 80102f4 <rcl_action_wait_set_add_action_client+0x8c>
 8010290:	6820      	ldr	r0, [r4, #0]
 8010292:	3008      	adds	r0, #8
 8010294:	f7fd ff28 	bl	800e0e8 <rcl_client_is_valid>
 8010298:	b360      	cbz	r0, 80102f4 <rcl_action_wait_set_add_action_client+0x8c>
 801029a:	6820      	ldr	r0, [r4, #0]
 801029c:	300c      	adds	r0, #12
 801029e:	f7fe febf 	bl	800f020 <rcl_subscription_is_valid>
 80102a2:	b338      	cbz	r0, 80102f4 <rcl_action_wait_set_add_action_client+0x8c>
 80102a4:	6820      	ldr	r0, [r4, #0]
 80102a6:	3010      	adds	r0, #16
 80102a8:	f7fe feba 	bl	800f020 <rcl_subscription_is_valid>
 80102ac:	b310      	cbz	r0, 80102f4 <rcl_action_wait_set_add_action_client+0x8c>
 80102ae:	6821      	ldr	r1, [r4, #0]
 80102b0:	4628      	mov	r0, r5
 80102b2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80102b6:	f7ff fccd 	bl	800fc54 <rcl_wait_set_add_client>
 80102ba:	b9b8      	cbnz	r0, 80102ec <rcl_action_wait_set_add_action_client+0x84>
 80102bc:	6821      	ldr	r1, [r4, #0]
 80102be:	4628      	mov	r0, r5
 80102c0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80102c4:	3104      	adds	r1, #4
 80102c6:	f7ff fcc5 	bl	800fc54 <rcl_wait_set_add_client>
 80102ca:	b978      	cbnz	r0, 80102ec <rcl_action_wait_set_add_action_client+0x84>
 80102cc:	6821      	ldr	r1, [r4, #0]
 80102ce:	4628      	mov	r0, r5
 80102d0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80102d4:	3108      	adds	r1, #8
 80102d6:	f7ff fcbd 	bl	800fc54 <rcl_wait_set_add_client>
 80102da:	b938      	cbnz	r0, 80102ec <rcl_action_wait_set_add_action_client+0x84>
 80102dc:	6821      	ldr	r1, [r4, #0]
 80102de:	4628      	mov	r0, r5
 80102e0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80102e4:	310c      	adds	r1, #12
 80102e6:	f7ff f96d 	bl	800f5c4 <rcl_wait_set_add_subscription>
 80102ea:	b158      	cbz	r0, 8010304 <rcl_action_wait_set_add_action_client+0x9c>
 80102ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80102f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102f4:	f7fa f8a8 	bl	800a448 <rcutils_reset_error>
 80102f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80102fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010302:	4770      	bx	lr
 8010304:	6821      	ldr	r1, [r4, #0]
 8010306:	4628      	mov	r0, r5
 8010308:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801030c:	3110      	adds	r1, #16
 801030e:	f7ff f959 	bl	800f5c4 <rcl_wait_set_add_subscription>
 8010312:	2800      	cmp	r0, #0
 8010314:	d1ea      	bne.n	80102ec <rcl_action_wait_set_add_action_client+0x84>
 8010316:	b11f      	cbz	r7, 8010320 <rcl_action_wait_set_add_action_client+0xb8>
 8010318:	6823      	ldr	r3, [r4, #0]
 801031a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801031e:	603b      	str	r3, [r7, #0]
 8010320:	2e00      	cmp	r6, #0
 8010322:	d0e3      	beq.n	80102ec <rcl_action_wait_set_add_action_client+0x84>
 8010324:	6823      	ldr	r3, [r4, #0]
 8010326:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801032a:	6033      	str	r3, [r6, #0]
 801032c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801032e:	bf00      	nop

08010330 <rcl_action_client_wait_set_get_entities_ready>:
 8010330:	2800      	cmp	r0, #0
 8010332:	f000 808d 	beq.w	8010450 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8010336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801033a:	460c      	mov	r4, r1
 801033c:	2900      	cmp	r1, #0
 801033e:	d077      	beq.n	8010430 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010340:	4605      	mov	r5, r0
 8010342:	6808      	ldr	r0, [r1, #0]
 8010344:	2800      	cmp	r0, #0
 8010346:	d073      	beq.n	8010430 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010348:	4616      	mov	r6, r2
 801034a:	461f      	mov	r7, r3
 801034c:	f7fd fecc 	bl	800e0e8 <rcl_client_is_valid>
 8010350:	2800      	cmp	r0, #0
 8010352:	d071      	beq.n	8010438 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010354:	6820      	ldr	r0, [r4, #0]
 8010356:	3004      	adds	r0, #4
 8010358:	f7fd fec6 	bl	800e0e8 <rcl_client_is_valid>
 801035c:	2800      	cmp	r0, #0
 801035e:	d06b      	beq.n	8010438 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010360:	6820      	ldr	r0, [r4, #0]
 8010362:	3008      	adds	r0, #8
 8010364:	f7fd fec0 	bl	800e0e8 <rcl_client_is_valid>
 8010368:	2800      	cmp	r0, #0
 801036a:	d065      	beq.n	8010438 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801036c:	6820      	ldr	r0, [r4, #0]
 801036e:	300c      	adds	r0, #12
 8010370:	f7fe fe56 	bl	800f020 <rcl_subscription_is_valid>
 8010374:	2800      	cmp	r0, #0
 8010376:	d05f      	beq.n	8010438 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	3010      	adds	r0, #16
 801037c:	f7fe fe50 	bl	800f020 <rcl_subscription_is_valid>
 8010380:	2800      	cmp	r0, #0
 8010382:	d059      	beq.n	8010438 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010384:	2e00      	cmp	r6, #0
 8010386:	d060      	beq.n	801044a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010388:	2f00      	cmp	r7, #0
 801038a:	d05e      	beq.n	801044a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801038c:	9b06      	ldr	r3, [sp, #24]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d05b      	beq.n	801044a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010392:	9b07      	ldr	r3, [sp, #28]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d058      	beq.n	801044a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010398:	9b08      	ldr	r3, [sp, #32]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d055      	beq.n	801044a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801039e:	6823      	ldr	r3, [r4, #0]
 80103a0:	686a      	ldr	r2, [r5, #4]
 80103a2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80103a6:	428a      	cmp	r2, r1
 80103a8:	d94c      	bls.n	8010444 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80103aa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80103ae:	4282      	cmp	r2, r0
 80103b0:	d948      	bls.n	8010444 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80103b2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80103b6:	69ea      	ldr	r2, [r5, #28]
 80103b8:	42a2      	cmp	r2, r4
 80103ba:	d943      	bls.n	8010444 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80103bc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80103c0:	4562      	cmp	r2, ip
 80103c2:	d93f      	bls.n	8010444 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80103c4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80103c8:	4572      	cmp	r2, lr
 80103ca:	d93b      	bls.n	8010444 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80103cc:	69aa      	ldr	r2, [r5, #24]
 80103ce:	682d      	ldr	r5, [r5, #0]
 80103d0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80103d4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80103d8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80103dc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80103e0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80103e4:	f103 0c0c 	add.w	ip, r3, #12
 80103e8:	eba5 050c 	sub.w	r5, r5, ip
 80103ec:	fab5 f585 	clz	r5, r5
 80103f0:	096d      	lsrs	r5, r5, #5
 80103f2:	7035      	strb	r5, [r6, #0]
 80103f4:	f103 0510 	add.w	r5, r3, #16
 80103f8:	1b64      	subs	r4, r4, r5
 80103fa:	fab4 f484 	clz	r4, r4
 80103fe:	0964      	lsrs	r4, r4, #5
 8010400:	703c      	strb	r4, [r7, #0]
 8010402:	eba3 0008 	sub.w	r0, r3, r8
 8010406:	1d1c      	adds	r4, r3, #4
 8010408:	3308      	adds	r3, #8
 801040a:	1ad3      	subs	r3, r2, r3
 801040c:	fab0 f080 	clz	r0, r0
 8010410:	9a06      	ldr	r2, [sp, #24]
 8010412:	0940      	lsrs	r0, r0, #5
 8010414:	1b09      	subs	r1, r1, r4
 8010416:	7010      	strb	r0, [r2, #0]
 8010418:	fab1 f181 	clz	r1, r1
 801041c:	9a07      	ldr	r2, [sp, #28]
 801041e:	0949      	lsrs	r1, r1, #5
 8010420:	7011      	strb	r1, [r2, #0]
 8010422:	fab3 f383 	clz	r3, r3
 8010426:	9a08      	ldr	r2, [sp, #32]
 8010428:	095b      	lsrs	r3, r3, #5
 801042a:	2000      	movs	r0, #0
 801042c:	7013      	strb	r3, [r2, #0]
 801042e:	e001      	b.n	8010434 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010430:	f640 0036 	movw	r0, #2102	@ 0x836
 8010434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010438:	f7fa f806 	bl	800a448 <rcutils_reset_error>
 801043c:	f640 0036 	movw	r0, #2102	@ 0x836
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010444:	2001      	movs	r0, #1
 8010446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044a:	200b      	movs	r0, #11
 801044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010450:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010454:	4770      	bx	lr
 8010456:	bf00      	nop

08010458 <rcl_action_take_goal_request>:
 8010458:	2800      	cmp	r0, #0
 801045a:	d039      	beq.n	80104d0 <rcl_action_take_goal_request+0x78>
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	4604      	mov	r4, r0
 8010460:	6800      	ldr	r0, [r0, #0]
 8010462:	b380      	cbz	r0, 80104c6 <rcl_action_take_goal_request+0x6e>
 8010464:	460d      	mov	r5, r1
 8010466:	4616      	mov	r6, r2
 8010468:	f7fe fc96 	bl	800ed98 <rcl_service_is_valid>
 801046c:	b330      	cbz	r0, 80104bc <rcl_action_take_goal_request+0x64>
 801046e:	6820      	ldr	r0, [r4, #0]
 8010470:	3004      	adds	r0, #4
 8010472:	f7fe fc91 	bl	800ed98 <rcl_service_is_valid>
 8010476:	b308      	cbz	r0, 80104bc <rcl_action_take_goal_request+0x64>
 8010478:	6820      	ldr	r0, [r4, #0]
 801047a:	3008      	adds	r0, #8
 801047c:	f7fe fc8c 	bl	800ed98 <rcl_service_is_valid>
 8010480:	b1e0      	cbz	r0, 80104bc <rcl_action_take_goal_request+0x64>
 8010482:	6820      	ldr	r0, [r4, #0]
 8010484:	300c      	adds	r0, #12
 8010486:	f7f9 f84d 	bl	8009524 <rcl_publisher_is_valid>
 801048a:	b1b8      	cbz	r0, 80104bc <rcl_action_take_goal_request+0x64>
 801048c:	6820      	ldr	r0, [r4, #0]
 801048e:	3010      	adds	r0, #16
 8010490:	f7f9 f848 	bl	8009524 <rcl_publisher_is_valid>
 8010494:	b190      	cbz	r0, 80104bc <rcl_action_take_goal_request+0x64>
 8010496:	b1cd      	cbz	r5, 80104cc <rcl_action_take_goal_request+0x74>
 8010498:	b1c6      	cbz	r6, 80104cc <rcl_action_take_goal_request+0x74>
 801049a:	6820      	ldr	r0, [r4, #0]
 801049c:	4632      	mov	r2, r6
 801049e:	4629      	mov	r1, r5
 80104a0:	f7fe fc22 	bl	800ece8 <rcl_take_request>
 80104a4:	b148      	cbz	r0, 80104ba <rcl_action_take_goal_request+0x62>
 80104a6:	280a      	cmp	r0, #10
 80104a8:	d007      	beq.n	80104ba <rcl_action_take_goal_request+0x62>
 80104aa:	f240 2259 	movw	r2, #601	@ 0x259
 80104ae:	f640 0399 	movw	r3, #2201	@ 0x899
 80104b2:	4290      	cmp	r0, r2
 80104b4:	bf0c      	ite	eq
 80104b6:	4618      	moveq	r0, r3
 80104b8:	2001      	movne	r0, #1
 80104ba:	bd70      	pop	{r4, r5, r6, pc}
 80104bc:	f7f9 ffc4 	bl	800a448 <rcutils_reset_error>
 80104c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80104c4:	bd70      	pop	{r4, r5, r6, pc}
 80104c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	200b      	movs	r0, #11
 80104ce:	bd70      	pop	{r4, r5, r6, pc}
 80104d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop

080104d8 <rcl_action_send_goal_response>:
 80104d8:	b390      	cbz	r0, 8010540 <rcl_action_send_goal_response+0x68>
 80104da:	b570      	push	{r4, r5, r6, lr}
 80104dc:	4604      	mov	r4, r0
 80104de:	6800      	ldr	r0, [r0, #0]
 80104e0:	b348      	cbz	r0, 8010536 <rcl_action_send_goal_response+0x5e>
 80104e2:	460d      	mov	r5, r1
 80104e4:	4616      	mov	r6, r2
 80104e6:	f7fe fc57 	bl	800ed98 <rcl_service_is_valid>
 80104ea:	b1f8      	cbz	r0, 801052c <rcl_action_send_goal_response+0x54>
 80104ec:	6820      	ldr	r0, [r4, #0]
 80104ee:	3004      	adds	r0, #4
 80104f0:	f7fe fc52 	bl	800ed98 <rcl_service_is_valid>
 80104f4:	b1d0      	cbz	r0, 801052c <rcl_action_send_goal_response+0x54>
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	3008      	adds	r0, #8
 80104fa:	f7fe fc4d 	bl	800ed98 <rcl_service_is_valid>
 80104fe:	b1a8      	cbz	r0, 801052c <rcl_action_send_goal_response+0x54>
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	300c      	adds	r0, #12
 8010504:	f7f9 f80e 	bl	8009524 <rcl_publisher_is_valid>
 8010508:	b180      	cbz	r0, 801052c <rcl_action_send_goal_response+0x54>
 801050a:	6820      	ldr	r0, [r4, #0]
 801050c:	3010      	adds	r0, #16
 801050e:	f7f9 f809 	bl	8009524 <rcl_publisher_is_valid>
 8010512:	b158      	cbz	r0, 801052c <rcl_action_send_goal_response+0x54>
 8010514:	b195      	cbz	r5, 801053c <rcl_action_send_goal_response+0x64>
 8010516:	b18e      	cbz	r6, 801053c <rcl_action_send_goal_response+0x64>
 8010518:	6820      	ldr	r0, [r4, #0]
 801051a:	4632      	mov	r2, r6
 801051c:	4629      	mov	r1, r5
 801051e:	f7fe fc23 	bl	800ed68 <rcl_send_response>
 8010522:	b110      	cbz	r0, 801052a <rcl_action_send_goal_response+0x52>
 8010524:	2802      	cmp	r0, #2
 8010526:	bf18      	it	ne
 8010528:	2001      	movne	r0, #1
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	f7f9 ff8c 	bl	800a448 <rcutils_reset_error>
 8010530:	f640 0098 	movw	r0, #2200	@ 0x898
 8010534:	bd70      	pop	{r4, r5, r6, pc}
 8010536:	f640 0098 	movw	r0, #2200	@ 0x898
 801053a:	bd70      	pop	{r4, r5, r6, pc}
 801053c:	200b      	movs	r0, #11
 801053e:	bd70      	pop	{r4, r5, r6, pc}
 8010540:	f640 0098 	movw	r0, #2200	@ 0x898
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <rcl_action_take_result_request>:
 8010548:	2800      	cmp	r0, #0
 801054a:	d03a      	beq.n	80105c2 <rcl_action_take_result_request+0x7a>
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	4604      	mov	r4, r0
 8010550:	6800      	ldr	r0, [r0, #0]
 8010552:	b388      	cbz	r0, 80105b8 <rcl_action_take_result_request+0x70>
 8010554:	460d      	mov	r5, r1
 8010556:	4616      	mov	r6, r2
 8010558:	f7fe fc1e 	bl	800ed98 <rcl_service_is_valid>
 801055c:	b338      	cbz	r0, 80105ae <rcl_action_take_result_request+0x66>
 801055e:	6820      	ldr	r0, [r4, #0]
 8010560:	3004      	adds	r0, #4
 8010562:	f7fe fc19 	bl	800ed98 <rcl_service_is_valid>
 8010566:	b310      	cbz	r0, 80105ae <rcl_action_take_result_request+0x66>
 8010568:	6820      	ldr	r0, [r4, #0]
 801056a:	3008      	adds	r0, #8
 801056c:	f7fe fc14 	bl	800ed98 <rcl_service_is_valid>
 8010570:	b1e8      	cbz	r0, 80105ae <rcl_action_take_result_request+0x66>
 8010572:	6820      	ldr	r0, [r4, #0]
 8010574:	300c      	adds	r0, #12
 8010576:	f7f8 ffd5 	bl	8009524 <rcl_publisher_is_valid>
 801057a:	b1c0      	cbz	r0, 80105ae <rcl_action_take_result_request+0x66>
 801057c:	6820      	ldr	r0, [r4, #0]
 801057e:	3010      	adds	r0, #16
 8010580:	f7f8 ffd0 	bl	8009524 <rcl_publisher_is_valid>
 8010584:	b198      	cbz	r0, 80105ae <rcl_action_take_result_request+0x66>
 8010586:	b1d5      	cbz	r5, 80105be <rcl_action_take_result_request+0x76>
 8010588:	b1ce      	cbz	r6, 80105be <rcl_action_take_result_request+0x76>
 801058a:	6820      	ldr	r0, [r4, #0]
 801058c:	4632      	mov	r2, r6
 801058e:	4629      	mov	r1, r5
 8010590:	3008      	adds	r0, #8
 8010592:	f7fe fba9 	bl	800ece8 <rcl_take_request>
 8010596:	b148      	cbz	r0, 80105ac <rcl_action_take_result_request+0x64>
 8010598:	280a      	cmp	r0, #10
 801059a:	d007      	beq.n	80105ac <rcl_action_take_result_request+0x64>
 801059c:	f240 2259 	movw	r2, #601	@ 0x259
 80105a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80105a4:	4290      	cmp	r0, r2
 80105a6:	bf0c      	ite	eq
 80105a8:	4618      	moveq	r0, r3
 80105aa:	2001      	movne	r0, #1
 80105ac:	bd70      	pop	{r4, r5, r6, pc}
 80105ae:	f7f9 ff4b 	bl	800a448 <rcutils_reset_error>
 80105b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80105b6:	bd70      	pop	{r4, r5, r6, pc}
 80105b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80105bc:	bd70      	pop	{r4, r5, r6, pc}
 80105be:	200b      	movs	r0, #11
 80105c0:	bd70      	pop	{r4, r5, r6, pc}
 80105c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80105c6:	4770      	bx	lr

080105c8 <rcl_action_take_cancel_request>:
 80105c8:	2800      	cmp	r0, #0
 80105ca:	d03a      	beq.n	8010642 <rcl_action_take_cancel_request+0x7a>
 80105cc:	b570      	push	{r4, r5, r6, lr}
 80105ce:	4604      	mov	r4, r0
 80105d0:	6800      	ldr	r0, [r0, #0]
 80105d2:	b388      	cbz	r0, 8010638 <rcl_action_take_cancel_request+0x70>
 80105d4:	460d      	mov	r5, r1
 80105d6:	4616      	mov	r6, r2
 80105d8:	f7fe fbde 	bl	800ed98 <rcl_service_is_valid>
 80105dc:	b338      	cbz	r0, 801062e <rcl_action_take_cancel_request+0x66>
 80105de:	6820      	ldr	r0, [r4, #0]
 80105e0:	3004      	adds	r0, #4
 80105e2:	f7fe fbd9 	bl	800ed98 <rcl_service_is_valid>
 80105e6:	b310      	cbz	r0, 801062e <rcl_action_take_cancel_request+0x66>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	3008      	adds	r0, #8
 80105ec:	f7fe fbd4 	bl	800ed98 <rcl_service_is_valid>
 80105f0:	b1e8      	cbz	r0, 801062e <rcl_action_take_cancel_request+0x66>
 80105f2:	6820      	ldr	r0, [r4, #0]
 80105f4:	300c      	adds	r0, #12
 80105f6:	f7f8 ff95 	bl	8009524 <rcl_publisher_is_valid>
 80105fa:	b1c0      	cbz	r0, 801062e <rcl_action_take_cancel_request+0x66>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	3010      	adds	r0, #16
 8010600:	f7f8 ff90 	bl	8009524 <rcl_publisher_is_valid>
 8010604:	b198      	cbz	r0, 801062e <rcl_action_take_cancel_request+0x66>
 8010606:	b1d5      	cbz	r5, 801063e <rcl_action_take_cancel_request+0x76>
 8010608:	b1ce      	cbz	r6, 801063e <rcl_action_take_cancel_request+0x76>
 801060a:	6820      	ldr	r0, [r4, #0]
 801060c:	4632      	mov	r2, r6
 801060e:	4629      	mov	r1, r5
 8010610:	3004      	adds	r0, #4
 8010612:	f7fe fb69 	bl	800ece8 <rcl_take_request>
 8010616:	b148      	cbz	r0, 801062c <rcl_action_take_cancel_request+0x64>
 8010618:	280a      	cmp	r0, #10
 801061a:	d007      	beq.n	801062c <rcl_action_take_cancel_request+0x64>
 801061c:	f240 2259 	movw	r2, #601	@ 0x259
 8010620:	f640 0399 	movw	r3, #2201	@ 0x899
 8010624:	4290      	cmp	r0, r2
 8010626:	bf0c      	ite	eq
 8010628:	4618      	moveq	r0, r3
 801062a:	2001      	movne	r0, #1
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	f7f9 ff0b 	bl	800a448 <rcutils_reset_error>
 8010632:	f640 0098 	movw	r0, #2200	@ 0x898
 8010636:	bd70      	pop	{r4, r5, r6, pc}
 8010638:	f640 0098 	movw	r0, #2200	@ 0x898
 801063c:	bd70      	pop	{r4, r5, r6, pc}
 801063e:	200b      	movs	r0, #11
 8010640:	bd70      	pop	{r4, r5, r6, pc}
 8010642:	f640 0098 	movw	r0, #2200	@ 0x898
 8010646:	4770      	bx	lr

08010648 <rcl_action_send_cancel_response>:
 8010648:	b398      	cbz	r0, 80106b2 <rcl_action_send_cancel_response+0x6a>
 801064a:	b570      	push	{r4, r5, r6, lr}
 801064c:	4604      	mov	r4, r0
 801064e:	6800      	ldr	r0, [r0, #0]
 8010650:	b350      	cbz	r0, 80106a8 <rcl_action_send_cancel_response+0x60>
 8010652:	460d      	mov	r5, r1
 8010654:	4616      	mov	r6, r2
 8010656:	f7fe fb9f 	bl	800ed98 <rcl_service_is_valid>
 801065a:	b300      	cbz	r0, 801069e <rcl_action_send_cancel_response+0x56>
 801065c:	6820      	ldr	r0, [r4, #0]
 801065e:	3004      	adds	r0, #4
 8010660:	f7fe fb9a 	bl	800ed98 <rcl_service_is_valid>
 8010664:	b1d8      	cbz	r0, 801069e <rcl_action_send_cancel_response+0x56>
 8010666:	6820      	ldr	r0, [r4, #0]
 8010668:	3008      	adds	r0, #8
 801066a:	f7fe fb95 	bl	800ed98 <rcl_service_is_valid>
 801066e:	b1b0      	cbz	r0, 801069e <rcl_action_send_cancel_response+0x56>
 8010670:	6820      	ldr	r0, [r4, #0]
 8010672:	300c      	adds	r0, #12
 8010674:	f7f8 ff56 	bl	8009524 <rcl_publisher_is_valid>
 8010678:	b188      	cbz	r0, 801069e <rcl_action_send_cancel_response+0x56>
 801067a:	6820      	ldr	r0, [r4, #0]
 801067c:	3010      	adds	r0, #16
 801067e:	f7f8 ff51 	bl	8009524 <rcl_publisher_is_valid>
 8010682:	b160      	cbz	r0, 801069e <rcl_action_send_cancel_response+0x56>
 8010684:	b19d      	cbz	r5, 80106ae <rcl_action_send_cancel_response+0x66>
 8010686:	b196      	cbz	r6, 80106ae <rcl_action_send_cancel_response+0x66>
 8010688:	6820      	ldr	r0, [r4, #0]
 801068a:	4632      	mov	r2, r6
 801068c:	4629      	mov	r1, r5
 801068e:	3004      	adds	r0, #4
 8010690:	f7fe fb6a 	bl	800ed68 <rcl_send_response>
 8010694:	b110      	cbz	r0, 801069c <rcl_action_send_cancel_response+0x54>
 8010696:	2802      	cmp	r0, #2
 8010698:	bf18      	it	ne
 801069a:	2001      	movne	r0, #1
 801069c:	bd70      	pop	{r4, r5, r6, pc}
 801069e:	f7f9 fed3 	bl	800a448 <rcutils_reset_error>
 80106a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80106ac:	bd70      	pop	{r4, r5, r6, pc}
 80106ae:	200b      	movs	r0, #11
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80106b6:	4770      	bx	lr

080106b8 <rcl_action_wait_set_add_action_server>:
 80106b8:	2800      	cmp	r0, #0
 80106ba:	d04d      	beq.n	8010758 <rcl_action_wait_set_add_action_server+0xa0>
 80106bc:	b570      	push	{r4, r5, r6, lr}
 80106be:	460c      	mov	r4, r1
 80106c0:	b159      	cbz	r1, 80106da <rcl_action_wait_set_add_action_server+0x22>
 80106c2:	4605      	mov	r5, r0
 80106c4:	6808      	ldr	r0, [r1, #0]
 80106c6:	b140      	cbz	r0, 80106da <rcl_action_wait_set_add_action_server+0x22>
 80106c8:	4616      	mov	r6, r2
 80106ca:	f7fe fb65 	bl	800ed98 <rcl_service_is_valid>
 80106ce:	b120      	cbz	r0, 80106da <rcl_action_wait_set_add_action_server+0x22>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	3004      	adds	r0, #4
 80106d4:	f7fe fb60 	bl	800ed98 <rcl_service_is_valid>
 80106d8:	b910      	cbnz	r0, 80106e0 <rcl_action_wait_set_add_action_server+0x28>
 80106da:	f640 0098 	movw	r0, #2200	@ 0x898
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	6820      	ldr	r0, [r4, #0]
 80106e2:	3008      	adds	r0, #8
 80106e4:	f7fe fb58 	bl	800ed98 <rcl_service_is_valid>
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d0f6      	beq.n	80106da <rcl_action_wait_set_add_action_server+0x22>
 80106ec:	6820      	ldr	r0, [r4, #0]
 80106ee:	300c      	adds	r0, #12
 80106f0:	f7f8 ff30 	bl	8009554 <rcl_publisher_is_valid_except_context>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d0f0      	beq.n	80106da <rcl_action_wait_set_add_action_server+0x22>
 80106f8:	6820      	ldr	r0, [r4, #0]
 80106fa:	3010      	adds	r0, #16
 80106fc:	f7f8 ff2a 	bl	8009554 <rcl_publisher_is_valid_except_context>
 8010700:	2800      	cmp	r0, #0
 8010702:	d0ea      	beq.n	80106da <rcl_action_wait_set_add_action_server+0x22>
 8010704:	6821      	ldr	r1, [r4, #0]
 8010706:	4628      	mov	r0, r5
 8010708:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801070c:	f7ff face 	bl	800fcac <rcl_wait_set_add_service>
 8010710:	2800      	cmp	r0, #0
 8010712:	d1e4      	bne.n	80106de <rcl_action_wait_set_add_action_server+0x26>
 8010714:	6821      	ldr	r1, [r4, #0]
 8010716:	4628      	mov	r0, r5
 8010718:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801071c:	3104      	adds	r1, #4
 801071e:	f7ff fac5 	bl	800fcac <rcl_wait_set_add_service>
 8010722:	2800      	cmp	r0, #0
 8010724:	d1db      	bne.n	80106de <rcl_action_wait_set_add_action_server+0x26>
 8010726:	6821      	ldr	r1, [r4, #0]
 8010728:	4628      	mov	r0, r5
 801072a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801072e:	3108      	adds	r1, #8
 8010730:	f7ff fabc 	bl	800fcac <rcl_wait_set_add_service>
 8010734:	2800      	cmp	r0, #0
 8010736:	d1d2      	bne.n	80106de <rcl_action_wait_set_add_action_server+0x26>
 8010738:	6821      	ldr	r1, [r4, #0]
 801073a:	4628      	mov	r0, r5
 801073c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8010740:	3114      	adds	r1, #20
 8010742:	f7ff fa57 	bl	800fbf4 <rcl_wait_set_add_timer>
 8010746:	2800      	cmp	r0, #0
 8010748:	d1c9      	bne.n	80106de <rcl_action_wait_set_add_action_server+0x26>
 801074a:	2e00      	cmp	r6, #0
 801074c:	d0c7      	beq.n	80106de <rcl_action_wait_set_add_action_server+0x26>
 801074e:	6823      	ldr	r3, [r4, #0]
 8010750:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010754:	6033      	str	r3, [r6, #0]
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801075c:	4770      	bx	lr
 801075e:	bf00      	nop

08010760 <rcl_action_server_wait_set_get_entities_ready>:
 8010760:	2800      	cmp	r0, #0
 8010762:	d05a      	beq.n	801081a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8010764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010766:	460c      	mov	r4, r1
 8010768:	b161      	cbz	r1, 8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801076a:	4605      	mov	r5, r0
 801076c:	6808      	ldr	r0, [r1, #0]
 801076e:	b148      	cbz	r0, 8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010770:	4616      	mov	r6, r2
 8010772:	461f      	mov	r7, r3
 8010774:	f7fe fb10 	bl	800ed98 <rcl_service_is_valid>
 8010778:	b120      	cbz	r0, 8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801077a:	6820      	ldr	r0, [r4, #0]
 801077c:	3004      	adds	r0, #4
 801077e:	f7fe fb0b 	bl	800ed98 <rcl_service_is_valid>
 8010782:	b910      	cbnz	r0, 801078a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010784:	f640 0098 	movw	r0, #2200	@ 0x898
 8010788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801078a:	6820      	ldr	r0, [r4, #0]
 801078c:	3008      	adds	r0, #8
 801078e:	f7fe fb03 	bl	800ed98 <rcl_service_is_valid>
 8010792:	2800      	cmp	r0, #0
 8010794:	d0f6      	beq.n	8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010796:	6820      	ldr	r0, [r4, #0]
 8010798:	300c      	adds	r0, #12
 801079a:	f7f8 fedb 	bl	8009554 <rcl_publisher_is_valid_except_context>
 801079e:	2800      	cmp	r0, #0
 80107a0:	d0f0      	beq.n	8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80107a2:	6820      	ldr	r0, [r4, #0]
 80107a4:	3010      	adds	r0, #16
 80107a6:	f7f8 fed5 	bl	8009554 <rcl_publisher_is_valid_except_context>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0ea      	beq.n	8010784 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80107ae:	b3be      	cbz	r6, 8010820 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80107b0:	b3b7      	cbz	r7, 8010820 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80107b2:	9b06      	ldr	r3, [sp, #24]
 80107b4:	b3a3      	cbz	r3, 8010820 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80107b6:	9b07      	ldr	r3, [sp, #28]
 80107b8:	b393      	cbz	r3, 8010820 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80107ba:	6821      	ldr	r1, [r4, #0]
 80107bc:	692a      	ldr	r2, [r5, #16]
 80107be:	6a2c      	ldr	r4, [r5, #32]
 80107c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80107c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80107c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80107cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80107d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80107d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80107d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80107dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80107e0:	1a64      	subs	r4, r4, r1
 80107e2:	fab4 f484 	clz	r4, r4
 80107e6:	0964      	lsrs	r4, r4, #5
 80107e8:	7034      	strb	r4, [r6, #0]
 80107ea:	1d0c      	adds	r4, r1, #4
 80107ec:	1b1b      	subs	r3, r3, r4
 80107ee:	fab3 f383 	clz	r3, r3
 80107f2:	095b      	lsrs	r3, r3, #5
 80107f4:	f101 0408 	add.w	r4, r1, #8
 80107f8:	703b      	strb	r3, [r7, #0]
 80107fa:	f101 0314 	add.w	r3, r1, #20
 80107fe:	1b01      	subs	r1, r0, r4
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	fab1 f181 	clz	r1, r1
 8010806:	9a06      	ldr	r2, [sp, #24]
 8010808:	0949      	lsrs	r1, r1, #5
 801080a:	7011      	strb	r1, [r2, #0]
 801080c:	fab3 f383 	clz	r3, r3
 8010810:	9a07      	ldr	r2, [sp, #28]
 8010812:	095b      	lsrs	r3, r3, #5
 8010814:	2000      	movs	r0, #0
 8010816:	7013      	strb	r3, [r2, #0]
 8010818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801081a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801081e:	4770      	bx	lr
 8010820:	200b      	movs	r0, #11
 8010822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010824 <_execute_event_handler>:
 8010824:	2002      	movs	r0, #2
 8010826:	4770      	bx	lr

08010828 <_cancel_goal_event_handler>:
 8010828:	2003      	movs	r0, #3
 801082a:	4770      	bx	lr

0801082c <_succeed_event_handler>:
 801082c:	2004      	movs	r0, #4
 801082e:	4770      	bx	lr

08010830 <_abort_event_handler>:
 8010830:	2006      	movs	r0, #6
 8010832:	4770      	bx	lr

08010834 <_canceled_event_handler>:
 8010834:	2005      	movs	r0, #5
 8010836:	4770      	bx	lr

08010838 <rcl_action_transition_goal_state>:
 8010838:	b2c2      	uxtb	r2, r0
 801083a:	2a06      	cmp	r2, #6
 801083c:	d80c      	bhi.n	8010858 <rcl_action_transition_goal_state+0x20>
 801083e:	2904      	cmp	r1, #4
 8010840:	d80a      	bhi.n	8010858 <rcl_action_transition_goal_state+0x20>
 8010842:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010846:	b410      	push	{r4}
 8010848:	1853      	adds	r3, r2, r1
 801084a:	4c06      	ldr	r4, [pc, #24]	@ (8010864 <rcl_action_transition_goal_state+0x2c>)
 801084c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010850:	b123      	cbz	r3, 801085c <rcl_action_transition_goal_state+0x24>
 8010852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010856:	4718      	bx	r3
 8010858:	2000      	movs	r0, #0
 801085a:	4770      	bx	lr
 801085c:	2000      	movs	r0, #0
 801085e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010862:	4770      	bx	lr
 8010864:	080195ec 	.word	0x080195ec

08010868 <rcl_action_get_zero_initialized_cancel_response>:
 8010868:	b510      	push	{r4, lr}
 801086a:	4c07      	ldr	r4, [pc, #28]	@ (8010888 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801086c:	4686      	mov	lr, r0
 801086e:	4684      	mov	ip, r0
 8010870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010872:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010878:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801087c:	6823      	ldr	r3, [r4, #0]
 801087e:	f8cc 3000 	str.w	r3, [ip]
 8010882:	4670      	mov	r0, lr
 8010884:	bd10      	pop	{r4, pc}
 8010886:	bf00      	nop
 8010888:	08019678 	.word	0x08019678

0801088c <rclc_action_send_result_request>:
 801088c:	b1d0      	cbz	r0, 80108c4 <rclc_action_send_result_request+0x38>
 801088e:	b500      	push	{lr}
 8010890:	4684      	mov	ip, r0
 8010892:	b087      	sub	sp, #28
 8010894:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010898:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801089c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80108a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80108a4:	f10d 0e08 	add.w	lr, sp, #8
 80108a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80108ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80108b0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80108b4:	a902      	add	r1, sp, #8
 80108b6:	3010      	adds	r0, #16
 80108b8:	f7ff fbda 	bl	8010070 <rcl_action_send_result_request>
 80108bc:	b920      	cbnz	r0, 80108c8 <rclc_action_send_result_request+0x3c>
 80108be:	b007      	add	sp, #28
 80108c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80108c4:	200b      	movs	r0, #11
 80108c6:	4770      	bx	lr
 80108c8:	9001      	str	r0, [sp, #4]
 80108ca:	f7f9 fdbd 	bl	800a448 <rcutils_reset_error>
 80108ce:	9801      	ldr	r0, [sp, #4]
 80108d0:	b007      	add	sp, #28
 80108d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80108d6:	bf00      	nop

080108d8 <rclc_action_take_goal_handle>:
 80108d8:	b160      	cbz	r0, 80108f4 <rclc_action_take_goal_handle+0x1c>
 80108da:	6883      	ldr	r3, [r0, #8]
 80108dc:	b143      	cbz	r3, 80108f0 <rclc_action_take_goal_handle+0x18>
 80108de:	6819      	ldr	r1, [r3, #0]
 80108e0:	6081      	str	r1, [r0, #8]
 80108e2:	2200      	movs	r2, #0
 80108e4:	721a      	strb	r2, [r3, #8]
 80108e6:	68c1      	ldr	r1, [r0, #12]
 80108e8:	6019      	str	r1, [r3, #0]
 80108ea:	621a      	str	r2, [r3, #32]
 80108ec:	849a      	strh	r2, [r3, #36]	@ 0x24
 80108ee:	60c3      	str	r3, [r0, #12]
 80108f0:	4618      	mov	r0, r3
 80108f2:	4770      	bx	lr
 80108f4:	4603      	mov	r3, r0
 80108f6:	e7fb      	b.n	80108f0 <rclc_action_take_goal_handle+0x18>

080108f8 <rclc_action_remove_used_goal_handle>:
 80108f8:	b180      	cbz	r0, 801091c <rclc_action_remove_used_goal_handle+0x24>
 80108fa:	b179      	cbz	r1, 801091c <rclc_action_remove_used_goal_handle+0x24>
 80108fc:	68c3      	ldr	r3, [r0, #12]
 80108fe:	4299      	cmp	r1, r3
 8010900:	d00d      	beq.n	801091e <rclc_action_remove_used_goal_handle+0x26>
 8010902:	b12b      	cbz	r3, 8010910 <rclc_action_remove_used_goal_handle+0x18>
 8010904:	681a      	ldr	r2, [r3, #0]
 8010906:	4291      	cmp	r1, r2
 8010908:	d003      	beq.n	8010912 <rclc_action_remove_used_goal_handle+0x1a>
 801090a:	4613      	mov	r3, r2
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1f9      	bne.n	8010904 <rclc_action_remove_used_goal_handle+0xc>
 8010910:	4770      	bx	lr
 8010912:	680a      	ldr	r2, [r1, #0]
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	6883      	ldr	r3, [r0, #8]
 8010918:	600b      	str	r3, [r1, #0]
 801091a:	6081      	str	r1, [r0, #8]
 801091c:	4770      	bx	lr
 801091e:	680b      	ldr	r3, [r1, #0]
 8010920:	60c3      	str	r3, [r0, #12]
 8010922:	e7f8      	b.n	8010916 <rclc_action_remove_used_goal_handle+0x1e>

08010924 <rclc_action_find_goal_handle_by_uuid>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	b180      	cbz	r0, 801094a <rclc_action_find_goal_handle_by_uuid+0x26>
 8010928:	460d      	mov	r5, r1
 801092a:	b181      	cbz	r1, 801094e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801092c:	68c4      	ldr	r4, [r0, #12]
 801092e:	b914      	cbnz	r4, 8010936 <rclc_action_find_goal_handle_by_uuid+0x12>
 8010930:	e009      	b.n	8010946 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010932:	6824      	ldr	r4, [r4, #0]
 8010934:	b13c      	cbz	r4, 8010946 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010936:	f104 0009 	add.w	r0, r4, #9
 801093a:	2210      	movs	r2, #16
 801093c:	4629      	mov	r1, r5
 801093e:	f006 fac7 	bl	8016ed0 <memcmp>
 8010942:	2800      	cmp	r0, #0
 8010944:	d1f5      	bne.n	8010932 <rclc_action_find_goal_handle_by_uuid+0xe>
 8010946:	4620      	mov	r0, r4
 8010948:	bd38      	pop	{r3, r4, r5, pc}
 801094a:	4604      	mov	r4, r0
 801094c:	e7fb      	b.n	8010946 <rclc_action_find_goal_handle_by_uuid+0x22>
 801094e:	460c      	mov	r4, r1
 8010950:	e7f9      	b.n	8010946 <rclc_action_find_goal_handle_by_uuid+0x22>
 8010952:	bf00      	nop

08010954 <rclc_action_find_first_handle_by_status>:
 8010954:	b140      	cbz	r0, 8010968 <rclc_action_find_first_handle_by_status+0x14>
 8010956:	68c0      	ldr	r0, [r0, #12]
 8010958:	b910      	cbnz	r0, 8010960 <rclc_action_find_first_handle_by_status+0xc>
 801095a:	e005      	b.n	8010968 <rclc_action_find_first_handle_by_status+0x14>
 801095c:	6800      	ldr	r0, [r0, #0]
 801095e:	b118      	cbz	r0, 8010968 <rclc_action_find_first_handle_by_status+0x14>
 8010960:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010964:	428b      	cmp	r3, r1
 8010966:	d1f9      	bne.n	801095c <rclc_action_find_first_handle_by_status+0x8>
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop

0801096c <rclc_action_find_first_terminated_handle>:
 801096c:	b140      	cbz	r0, 8010980 <rclc_action_find_first_terminated_handle+0x14>
 801096e:	68c0      	ldr	r0, [r0, #12]
 8010970:	b910      	cbnz	r0, 8010978 <rclc_action_find_first_terminated_handle+0xc>
 8010972:	e005      	b.n	8010980 <rclc_action_find_first_terminated_handle+0x14>
 8010974:	6800      	ldr	r0, [r0, #0]
 8010976:	b118      	cbz	r0, 8010980 <rclc_action_find_first_terminated_handle+0x14>
 8010978:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801097c:	2b03      	cmp	r3, #3
 801097e:	ddf9      	ble.n	8010974 <rclc_action_find_first_terminated_handle+0x8>
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop

08010984 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010984:	b170      	cbz	r0, 80109a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010986:	68c0      	ldr	r0, [r0, #12]
 8010988:	b160      	cbz	r0, 80109a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801098a:	b410      	push	{r4}
 801098c:	e001      	b.n	8010992 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801098e:	6800      	ldr	r0, [r0, #0]
 8010990:	b128      	cbz	r0, 801099e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010992:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8010996:	4299      	cmp	r1, r3
 8010998:	bf08      	it	eq
 801099a:	4294      	cmpeq	r4, r2
 801099c:	d1f7      	bne.n	801098e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801099e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109a2:	4770      	bx	lr
 80109a4:	4770      	bx	lr
 80109a6:	bf00      	nop

080109a8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80109a8:	b170      	cbz	r0, 80109c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80109aa:	68c0      	ldr	r0, [r0, #12]
 80109ac:	b160      	cbz	r0, 80109c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80109ae:	b410      	push	{r4}
 80109b0:	e001      	b.n	80109b6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80109b2:	6800      	ldr	r0, [r0, #0]
 80109b4:	b128      	cbz	r0, 80109c2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80109b6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80109ba:	4299      	cmp	r1, r3
 80109bc:	bf08      	it	eq
 80109be:	4294      	cmpeq	r4, r2
 80109c0:	d1f7      	bne.n	80109b2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80109c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109c6:	4770      	bx	lr
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop

080109cc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80109cc:	b170      	cbz	r0, 80109ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80109ce:	68c0      	ldr	r0, [r0, #12]
 80109d0:	b160      	cbz	r0, 80109ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80109d2:	b410      	push	{r4}
 80109d4:	e001      	b.n	80109da <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80109d6:	6800      	ldr	r0, [r0, #0]
 80109d8:	b128      	cbz	r0, 80109e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80109da:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80109de:	4299      	cmp	r1, r3
 80109e0:	bf08      	it	eq
 80109e2:	4294      	cmpeq	r4, r2
 80109e4:	d1f7      	bne.n	80109d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80109e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ea:	4770      	bx	lr
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop

080109f0 <rclc_action_find_first_handle_with_goal_response>:
 80109f0:	b140      	cbz	r0, 8010a04 <rclc_action_find_first_handle_with_goal_response+0x14>
 80109f2:	68c0      	ldr	r0, [r0, #12]
 80109f4:	b910      	cbnz	r0, 80109fc <rclc_action_find_first_handle_with_goal_response+0xc>
 80109f6:	e005      	b.n	8010a04 <rclc_action_find_first_handle_with_goal_response+0x14>
 80109f8:	6800      	ldr	r0, [r0, #0]
 80109fa:	b118      	cbz	r0, 8010a04 <rclc_action_find_first_handle_with_goal_response+0x14>
 80109fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d0f9      	beq.n	80109f8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop

08010a08 <rclc_action_find_first_handle_with_result_response>:
 8010a08:	b140      	cbz	r0, 8010a1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010a0a:	68c0      	ldr	r0, [r0, #12]
 8010a0c:	b910      	cbnz	r0, 8010a14 <rclc_action_find_first_handle_with_result_response+0xc>
 8010a0e:	e005      	b.n	8010a1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010a10:	6800      	ldr	r0, [r0, #0]
 8010a12:	b118      	cbz	r0, 8010a1c <rclc_action_find_first_handle_with_result_response+0x14>
 8010a14:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d0f9      	beq.n	8010a10 <rclc_action_find_first_handle_with_result_response+0x8>
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop

08010a20 <rclc_action_server_response_goal_request>:
 8010a20:	b198      	cbz	r0, 8010a4a <rclc_action_server_response_goal_request+0x2a>
 8010a22:	b510      	push	{r4, lr}
 8010a24:	6844      	ldr	r4, [r0, #4]
 8010a26:	b086      	sub	sp, #24
 8010a28:	2200      	movs	r2, #0
 8010a2a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010a2e:	460b      	mov	r3, r1
 8010a30:	9205      	str	r2, [sp, #20]
 8010a32:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8010a36:	aa03      	add	r2, sp, #12
 8010a38:	f104 0010 	add.w	r0, r4, #16
 8010a3c:	f88d 300c 	strb.w	r3, [sp, #12]
 8010a40:	f7ff fd4a 	bl	80104d8 <rcl_action_send_goal_response>
 8010a44:	b918      	cbnz	r0, 8010a4e <rclc_action_server_response_goal_request+0x2e>
 8010a46:	b006      	add	sp, #24
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	200b      	movs	r0, #11
 8010a4c:	4770      	bx	lr
 8010a4e:	9001      	str	r0, [sp, #4]
 8010a50:	f7f9 fcfa 	bl	800a448 <rcutils_reset_error>
 8010a54:	9801      	ldr	r0, [sp, #4]
 8010a56:	b006      	add	sp, #24
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	bf00      	nop
 8010a5c:	0000      	movs	r0, r0
	...

08010a60 <rclc_action_server_goal_cancel_accept>:
 8010a60:	b310      	cbz	r0, 8010aa8 <rclc_action_server_goal_cancel_accept+0x48>
 8010a62:	b510      	push	{r4, lr}
 8010a64:	b090      	sub	sp, #64	@ 0x40
 8010a66:	4604      	mov	r4, r0
 8010a68:	a806      	add	r0, sp, #24
 8010a6a:	f7ff fefd 	bl	8010868 <rcl_action_get_zero_initialized_cancel_response>
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010a74:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010a78:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010a7c:	f88d 3018 	strb.w	r3, [sp, #24]
 8010a80:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010a84:	f8cd d01c 	str.w	sp, [sp, #28]
 8010a88:	46ec      	mov	ip, sp
 8010a8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a8e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010ab0 <rclc_action_server_goal_cancel_accept+0x50>
 8010a92:	6860      	ldr	r0, [r4, #4]
 8010a94:	aa06      	add	r2, sp, #24
 8010a96:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010a9a:	3010      	adds	r0, #16
 8010a9c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010aa0:	f7ff fdd2 	bl	8010648 <rcl_action_send_cancel_response>
 8010aa4:	b010      	add	sp, #64	@ 0x40
 8010aa6:	bd10      	pop	{r4, pc}
 8010aa8:	200b      	movs	r0, #11
 8010aaa:	4770      	bx	lr
 8010aac:	f3af 8000 	nop.w
 8010ab0:	00000001 	.word	0x00000001
 8010ab4:	00000001 	.word	0x00000001

08010ab8 <rclc_action_server_goal_cancel_reject>:
 8010ab8:	b082      	sub	sp, #8
 8010aba:	b530      	push	{r4, r5, lr}
 8010abc:	b08b      	sub	sp, #44	@ 0x2c
 8010abe:	ac0e      	add	r4, sp, #56	@ 0x38
 8010ac0:	e884 000c 	stmia.w	r4, {r2, r3}
 8010ac4:	b188      	cbz	r0, 8010aea <rclc_action_server_goal_cancel_reject+0x32>
 8010ac6:	4604      	mov	r4, r0
 8010ac8:	a801      	add	r0, sp, #4
 8010aca:	460d      	mov	r5, r1
 8010acc:	f7ff fecc 	bl	8010868 <rcl_action_get_zero_initialized_cancel_response>
 8010ad0:	aa01      	add	r2, sp, #4
 8010ad2:	a90e      	add	r1, sp, #56	@ 0x38
 8010ad4:	f104 0010 	add.w	r0, r4, #16
 8010ad8:	f88d 5004 	strb.w	r5, [sp, #4]
 8010adc:	f7ff fdb4 	bl	8010648 <rcl_action_send_cancel_response>
 8010ae0:	b00b      	add	sp, #44	@ 0x2c
 8010ae2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010ae6:	b002      	add	sp, #8
 8010ae8:	4770      	bx	lr
 8010aea:	200b      	movs	r0, #11
 8010aec:	b00b      	add	sp, #44	@ 0x2c
 8010aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010af2:	b002      	add	sp, #8
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop

08010af8 <__atomic_load_8>:
 8010af8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010afc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010b00:	4a15      	ldr	r2, [pc, #84]	@ (8010b58 <__atomic_load_8+0x60>)
 8010b02:	4b16      	ldr	r3, [pc, #88]	@ (8010b5c <__atomic_load_8+0x64>)
 8010b04:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010b08:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010b0c:	fb02 f101 	mul.w	r1, r2, r1
 8010b10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010b14:	fba3 2301 	umull	r2, r3, r3, r1
 8010b18:	091b      	lsrs	r3, r3, #4
 8010b1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010b1e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8010b22:	b4d0      	push	{r4, r6, r7}
 8010b24:	4c0e      	ldr	r4, [pc, #56]	@ (8010b60 <__atomic_load_8+0x68>)
 8010b26:	1ac9      	subs	r1, r1, r3
 8010b28:	1862      	adds	r2, r4, r1
 8010b2a:	f04f 0c01 	mov.w	ip, #1
 8010b2e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8010b32:	e8c2 cf46 	strexb	r6, ip, [r2]
 8010b36:	2e00      	cmp	r6, #0
 8010b38:	d1f9      	bne.n	8010b2e <__atomic_load_8+0x36>
 8010b3a:	f3bf 8f5b 	dmb	ish
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1f4      	bne.n	8010b2e <__atomic_load_8+0x36>
 8010b44:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010b48:	f3bf 8f5b 	dmb	ish
 8010b4c:	5463      	strb	r3, [r4, r1]
 8010b4e:	4630      	mov	r0, r6
 8010b50:	4639      	mov	r1, r7
 8010b52:	bcd0      	pop	{r4, r6, r7}
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	27d4eb2d 	.word	0x27d4eb2d
 8010b5c:	b21642c9 	.word	0xb21642c9
 8010b60:	20010c58 	.word	0x20010c58

08010b64 <__atomic_store_8>:
 8010b64:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010b68:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010b6c:	b570      	push	{r4, r5, r6, lr}
 8010b6e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010b72:	4c14      	ldr	r4, [pc, #80]	@ (8010bc4 <__atomic_store_8+0x60>)
 8010b74:	4d14      	ldr	r5, [pc, #80]	@ (8010bc8 <__atomic_store_8+0x64>)
 8010b76:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010b7a:	fb04 f101 	mul.w	r1, r4, r1
 8010b7e:	4c13      	ldr	r4, [pc, #76]	@ (8010bcc <__atomic_store_8+0x68>)
 8010b80:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010b84:	fba4 4e01 	umull	r4, lr, r4, r1
 8010b88:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010b8c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010b90:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010b94:	eba1 0e0e 	sub.w	lr, r1, lr
 8010b98:	eb05 0c0e 	add.w	ip, r5, lr
 8010b9c:	f04f 0401 	mov.w	r4, #1
 8010ba0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010ba4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010ba8:	2e00      	cmp	r6, #0
 8010baa:	d1f9      	bne.n	8010ba0 <__atomic_store_8+0x3c>
 8010bac:	f3bf 8f5b 	dmb	ish
 8010bb0:	b2c9      	uxtb	r1, r1
 8010bb2:	2900      	cmp	r1, #0
 8010bb4:	d1f4      	bne.n	8010ba0 <__atomic_store_8+0x3c>
 8010bb6:	e9c0 2300 	strd	r2, r3, [r0]
 8010bba:	f3bf 8f5b 	dmb	ish
 8010bbe:	f805 100e 	strb.w	r1, [r5, lr]
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	27d4eb2d 	.word	0x27d4eb2d
 8010bc8:	20010c58 	.word	0x20010c58
 8010bcc:	b21642c9 	.word	0xb21642c9

08010bd0 <__atomic_exchange_8>:
 8010bd0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010bd4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8010bd8:	4916      	ldr	r1, [pc, #88]	@ (8010c34 <__atomic_exchange_8+0x64>)
 8010bda:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8010bde:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8010be2:	fb01 fc0c 	mul.w	ip, r1, ip
 8010be6:	4914      	ldr	r1, [pc, #80]	@ (8010c38 <__atomic_exchange_8+0x68>)
 8010be8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	4605      	mov	r5, r0
 8010bf0:	fba1 010c 	umull	r0, r1, r1, ip
 8010bf4:	0909      	lsrs	r1, r1, #4
 8010bf6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010bfa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8010bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8010c3c <__atomic_exchange_8+0x6c>)
 8010c00:	ebac 0c01 	sub.w	ip, ip, r1
 8010c04:	eb06 010c 	add.w	r1, r6, ip
 8010c08:	f04f 0e01 	mov.w	lr, #1
 8010c0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8010c10:	e8c1 ef40 	strexb	r0, lr, [r1]
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1f9      	bne.n	8010c0c <__atomic_exchange_8+0x3c>
 8010c18:	f3bf 8f5b 	dmb	ish
 8010c1c:	b2e4      	uxtb	r4, r4
 8010c1e:	2c00      	cmp	r4, #0
 8010c20:	d1f4      	bne.n	8010c0c <__atomic_exchange_8+0x3c>
 8010c22:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010c26:	e9c5 2300 	strd	r2, r3, [r5]
 8010c2a:	f3bf 8f5b 	dmb	ish
 8010c2e:	f806 400c 	strb.w	r4, [r6, ip]
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
 8010c34:	27d4eb2d 	.word	0x27d4eb2d
 8010c38:	b21642c9 	.word	0xb21642c9
 8010c3c:	20010c58 	.word	0x20010c58

08010c40 <rcutils_get_env>:
 8010c40:	b168      	cbz	r0, 8010c5e <rcutils_get_env+0x1e>
 8010c42:	b510      	push	{r4, lr}
 8010c44:	460c      	mov	r4, r1
 8010c46:	b129      	cbz	r1, 8010c54 <rcutils_get_env+0x14>
 8010c48:	f004 ffdc 	bl	8015c04 <getenv>
 8010c4c:	b120      	cbz	r0, 8010c58 <rcutils_get_env+0x18>
 8010c4e:	6020      	str	r0, [r4, #0]
 8010c50:	2000      	movs	r0, #0
 8010c52:	bd10      	pop	{r4, pc}
 8010c54:	4803      	ldr	r0, [pc, #12]	@ (8010c64 <rcutils_get_env+0x24>)
 8010c56:	bd10      	pop	{r4, pc}
 8010c58:	4b03      	ldr	r3, [pc, #12]	@ (8010c68 <rcutils_get_env+0x28>)
 8010c5a:	6023      	str	r3, [r4, #0]
 8010c5c:	bd10      	pop	{r4, pc}
 8010c5e:	4803      	ldr	r0, [pc, #12]	@ (8010c6c <rcutils_get_env+0x2c>)
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop
 8010c64:	080196b8 	.word	0x080196b8
 8010c68:	08019ca8 	.word	0x08019ca8
 8010c6c:	0801969c 	.word	0x0801969c

08010c70 <rcutils_is_directory>:
 8010c70:	2000      	movs	r0, #0
 8010c72:	4770      	bx	lr

08010c74 <rcutils_join_path>:
 8010c74:	b082      	sub	sp, #8
 8010c76:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010c7a:	2000      	movs	r0, #0
 8010c7c:	b002      	add	sp, #8
 8010c7e:	4770      	bx	lr

08010c80 <rcutils_to_native_path>:
 8010c80:	b084      	sub	sp, #16
 8010c82:	a801      	add	r0, sp, #4
 8010c84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010c88:	b004      	add	sp, #16
 8010c8a:	2000      	movs	r0, #0
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop

08010c90 <rcutils_format_string_limit>:
 8010c90:	b40f      	push	{r0, r1, r2, r3}
 8010c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c94:	b083      	sub	sp, #12
 8010c96:	ac08      	add	r4, sp, #32
 8010c98:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010c9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010c9e:	b34e      	cbz	r6, 8010cf4 <rcutils_format_string_limit+0x64>
 8010ca0:	a808      	add	r0, sp, #32
 8010ca2:	f7f9 fbad 	bl	800a400 <rcutils_allocator_is_valid>
 8010ca6:	b328      	cbz	r0, 8010cf4 <rcutils_format_string_limit+0x64>
 8010ca8:	2100      	movs	r1, #0
 8010caa:	ab0f      	add	r3, sp, #60	@ 0x3c
 8010cac:	4632      	mov	r2, r6
 8010cae:	4608      	mov	r0, r1
 8010cb0:	e9cd 3300 	strd	r3, r3, [sp]
 8010cb4:	f000 f8f4 	bl	8010ea0 <rcutils_vsnprintf>
 8010cb8:	1c43      	adds	r3, r0, #1
 8010cba:	4605      	mov	r5, r0
 8010cbc:	d01a      	beq.n	8010cf4 <rcutils_format_string_limit+0x64>
 8010cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010cc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010cc2:	1c47      	adds	r7, r0, #1
 8010cc4:	429f      	cmp	r7, r3
 8010cc6:	bf84      	itt	hi
 8010cc8:	461f      	movhi	r7, r3
 8010cca:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8010cce:	4638      	mov	r0, r7
 8010cd0:	9b08      	ldr	r3, [sp, #32]
 8010cd2:	4798      	blx	r3
 8010cd4:	4604      	mov	r4, r0
 8010cd6:	b168      	cbz	r0, 8010cf4 <rcutils_format_string_limit+0x64>
 8010cd8:	9b01      	ldr	r3, [sp, #4]
 8010cda:	4632      	mov	r2, r6
 8010cdc:	4639      	mov	r1, r7
 8010cde:	f000 f8df 	bl	8010ea0 <rcutils_vsnprintf>
 8010ce2:	2800      	cmp	r0, #0
 8010ce4:	db02      	blt.n	8010cec <rcutils_format_string_limit+0x5c>
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	5563      	strb	r3, [r4, r5]
 8010cea:	e004      	b.n	8010cf6 <rcutils_format_string_limit+0x66>
 8010cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	4798      	blx	r3
 8010cf4:	2400      	movs	r4, #0
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	b003      	add	sp, #12
 8010cfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010cfe:	b004      	add	sp, #16
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <rcutils_repl_str>:
 8010d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d08:	ed2d 8b02 	vpush	{d8}
 8010d0c:	b087      	sub	sp, #28
 8010d0e:	4680      	mov	r8, r0
 8010d10:	4608      	mov	r0, r1
 8010d12:	f8cd 8004 	str.w	r8, [sp, #4]
 8010d16:	ee08 2a10 	vmov	s16, r2
 8010d1a:	468a      	mov	sl, r1
 8010d1c:	4699      	mov	r9, r3
 8010d1e:	f7ef fad7 	bl	80002d0 <strlen>
 8010d22:	2600      	movs	r6, #0
 8010d24:	4647      	mov	r7, r8
 8010d26:	9002      	str	r0, [sp, #8]
 8010d28:	46b3      	mov	fp, r6
 8010d2a:	2510      	movs	r5, #16
 8010d2c:	46b0      	mov	r8, r6
 8010d2e:	e01d      	b.n	8010d6c <rcutils_repl_str+0x68>
 8010d30:	f10b 0b01 	add.w	fp, fp, #1
 8010d34:	455e      	cmp	r6, fp
 8010d36:	d211      	bcs.n	8010d5c <rcutils_repl_str+0x58>
 8010d38:	442e      	add	r6, r5
 8010d3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010d3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010d42:	00b1      	lsls	r1, r6, #2
 8010d44:	4798      	blx	r3
 8010d46:	2800      	cmp	r0, #0
 8010d48:	f000 8088 	beq.w	8010e5c <rcutils_repl_str+0x158>
 8010d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d50:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010d54:	4680      	mov	r8, r0
 8010d56:	bf28      	it	cs
 8010d58:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8010d5c:	9a01      	ldr	r2, [sp, #4]
 8010d5e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010d62:	1aa2      	subs	r2, r4, r2
 8010d64:	f843 2c04 	str.w	r2, [r3, #-4]
 8010d68:	9b02      	ldr	r3, [sp, #8]
 8010d6a:	18e7      	adds	r7, r4, r3
 8010d6c:	4651      	mov	r1, sl
 8010d6e:	4638      	mov	r0, r7
 8010d70:	f006 f8ff 	bl	8016f72 <strstr>
 8010d74:	4604      	mov	r4, r0
 8010d76:	4640      	mov	r0, r8
 8010d78:	2c00      	cmp	r4, #0
 8010d7a:	d1d9      	bne.n	8010d30 <rcutils_repl_str+0x2c>
 8010d7c:	46b8      	mov	r8, r7
 8010d7e:	4607      	mov	r7, r0
 8010d80:	4640      	mov	r0, r8
 8010d82:	f7ef faa5 	bl	80002d0 <strlen>
 8010d86:	9b01      	ldr	r3, [sp, #4]
 8010d88:	eba8 0303 	sub.w	r3, r8, r3
 8010d8c:	181c      	adds	r4, r3, r0
 8010d8e:	9404      	str	r4, [sp, #16]
 8010d90:	f1bb 0f00 	cmp.w	fp, #0
 8010d94:	d04a      	beq.n	8010e2c <rcutils_repl_str+0x128>
 8010d96:	ee18 0a10 	vmov	r0, s16
 8010d9a:	f7ef fa99 	bl	80002d0 <strlen>
 8010d9e:	9b02      	ldr	r3, [sp, #8]
 8010da0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010da4:	1ac3      	subs	r3, r0, r3
 8010da6:	fb0b 4303 	mla	r3, fp, r3, r4
 8010daa:	461a      	mov	r2, r3
 8010dac:	9305      	str	r3, [sp, #20]
 8010dae:	4606      	mov	r6, r0
 8010db0:	f8d9 3000 	ldr.w	r3, [r9]
 8010db4:	1c50      	adds	r0, r2, #1
 8010db6:	4798      	blx	r3
 8010db8:	9003      	str	r0, [sp, #12]
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d04f      	beq.n	8010e5e <rcutils_repl_str+0x15a>
 8010dbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010dc2:	683a      	ldr	r2, [r7, #0]
 8010dc4:	4641      	mov	r1, r8
 8010dc6:	f006 f9d0 	bl	801716a <memcpy>
 8010dca:	683d      	ldr	r5, [r7, #0]
 8010dcc:	9b03      	ldr	r3, [sp, #12]
 8010dce:	9701      	str	r7, [sp, #4]
 8010dd0:	46ba      	mov	sl, r7
 8010dd2:	441d      	add	r5, r3
 8010dd4:	9f02      	ldr	r7, [sp, #8]
 8010dd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010dda:	2401      	movs	r4, #1
 8010ddc:	46d1      	mov	r9, sl
 8010dde:	ee18 aa10 	vmov	sl, s16
 8010de2:	e00a      	b.n	8010dfa <rcutils_repl_str+0xf6>
 8010de4:	f8d9 5000 	ldr.w	r5, [r9]
 8010de8:	1aaa      	subs	r2, r5, r2
 8010dea:	1885      	adds	r5, r0, r2
 8010dec:	f006 f9bd 	bl	801716a <memcpy>
 8010df0:	45a3      	cmp	fp, r4
 8010df2:	f104 0201 	add.w	r2, r4, #1
 8010df6:	d935      	bls.n	8010e64 <rcutils_repl_str+0x160>
 8010df8:	4614      	mov	r4, r2
 8010dfa:	4632      	mov	r2, r6
 8010dfc:	4651      	mov	r1, sl
 8010dfe:	4628      	mov	r0, r5
 8010e00:	f006 f9b3 	bl	801716a <memcpy>
 8010e04:	f859 2b04 	ldr.w	r2, [r9], #4
 8010e08:	45a3      	cmp	fp, r4
 8010e0a:	443a      	add	r2, r7
 8010e0c:	eb05 0006 	add.w	r0, r5, r6
 8010e10:	eb08 0102 	add.w	r1, r8, r2
 8010e14:	d1e6      	bne.n	8010de4 <rcutils_repl_str+0xe0>
 8010e16:	9b04      	ldr	r3, [sp, #16]
 8010e18:	1a9a      	subs	r2, r3, r2
 8010e1a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010e1e:	f006 f9a4 	bl	801716a <memcpy>
 8010e22:	9a03      	ldr	r2, [sp, #12]
 8010e24:	9905      	ldr	r1, [sp, #20]
 8010e26:	2300      	movs	r3, #0
 8010e28:	5453      	strb	r3, [r2, r1]
 8010e2a:	e00b      	b.n	8010e44 <rcutils_repl_str+0x140>
 8010e2c:	4620      	mov	r0, r4
 8010e2e:	f8d9 3000 	ldr.w	r3, [r9]
 8010e32:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010e36:	3001      	adds	r0, #1
 8010e38:	4798      	blx	r3
 8010e3a:	9003      	str	r0, [sp, #12]
 8010e3c:	b110      	cbz	r0, 8010e44 <rcutils_repl_str+0x140>
 8010e3e:	9901      	ldr	r1, [sp, #4]
 8010e40:	f006 f98b 	bl	801715a <strcpy>
 8010e44:	4638      	mov	r0, r7
 8010e46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010e4a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010e4e:	4798      	blx	r3
 8010e50:	9803      	ldr	r0, [sp, #12]
 8010e52:	b007      	add	sp, #28
 8010e54:	ecbd 8b02 	vpop	{d8}
 8010e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e5c:	4647      	mov	r7, r8
 8010e5e:	2300      	movs	r3, #0
 8010e60:	9303      	str	r3, [sp, #12]
 8010e62:	e7ef      	b.n	8010e44 <rcutils_repl_str+0x140>
 8010e64:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010e68:	e7db      	b.n	8010e22 <rcutils_repl_str+0x11e>
 8010e6a:	bf00      	nop

08010e6c <rcutils_snprintf>:
 8010e6c:	b40c      	push	{r2, r3}
 8010e6e:	b530      	push	{r4, r5, lr}
 8010e70:	b083      	sub	sp, #12
 8010e72:	ab06      	add	r3, sp, #24
 8010e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e78:	9301      	str	r3, [sp, #4]
 8010e7a:	b152      	cbz	r2, 8010e92 <rcutils_snprintf+0x26>
 8010e7c:	b138      	cbz	r0, 8010e8e <rcutils_snprintf+0x22>
 8010e7e:	b141      	cbz	r1, 8010e92 <rcutils_snprintf+0x26>
 8010e80:	f005 ff84 	bl	8016d8c <vsniprintf>
 8010e84:	b003      	add	sp, #12
 8010e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e8a:	b002      	add	sp, #8
 8010e8c:	4770      	bx	lr
 8010e8e:	2900      	cmp	r1, #0
 8010e90:	d0f6      	beq.n	8010e80 <rcutils_snprintf+0x14>
 8010e92:	f006 f935 	bl	8017100 <__errno>
 8010e96:	2316      	movs	r3, #22
 8010e98:	6003      	str	r3, [r0, #0]
 8010e9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e9e:	e7f1      	b.n	8010e84 <rcutils_snprintf+0x18>

08010ea0 <rcutils_vsnprintf>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	b13a      	cbz	r2, 8010eb4 <rcutils_vsnprintf+0x14>
 8010ea4:	b120      	cbz	r0, 8010eb0 <rcutils_vsnprintf+0x10>
 8010ea6:	b129      	cbz	r1, 8010eb4 <rcutils_vsnprintf+0x14>
 8010ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eac:	f005 bf6e 	b.w	8016d8c <vsniprintf>
 8010eb0:	2900      	cmp	r1, #0
 8010eb2:	d0f9      	beq.n	8010ea8 <rcutils_vsnprintf+0x8>
 8010eb4:	f006 f924 	bl	8017100 <__errno>
 8010eb8:	2316      	movs	r3, #22
 8010eba:	6003      	str	r3, [r0, #0]
 8010ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ec0:	bd70      	pop	{r4, r5, r6, pc}
 8010ec2:	bf00      	nop

08010ec4 <rcutils_strdup>:
 8010ec4:	b084      	sub	sp, #16
 8010ec6:	b570      	push	{r4, r5, r6, lr}
 8010ec8:	b082      	sub	sp, #8
 8010eca:	ac07      	add	r4, sp, #28
 8010ecc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	b1b0      	cbz	r0, 8010f02 <rcutils_strdup+0x3e>
 8010ed4:	f7ef f9fc 	bl	80002d0 <strlen>
 8010ed8:	1c42      	adds	r2, r0, #1
 8010eda:	9b07      	ldr	r3, [sp, #28]
 8010edc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010ede:	9201      	str	r2, [sp, #4]
 8010ee0:	4606      	mov	r6, r0
 8010ee2:	4610      	mov	r0, r2
 8010ee4:	4798      	blx	r3
 8010ee6:	4604      	mov	r4, r0
 8010ee8:	b128      	cbz	r0, 8010ef6 <rcutils_strdup+0x32>
 8010eea:	9a01      	ldr	r2, [sp, #4]
 8010eec:	4629      	mov	r1, r5
 8010eee:	f006 f93c 	bl	801716a <memcpy>
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	55a3      	strb	r3, [r4, r6]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	b002      	add	sp, #8
 8010efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010efe:	b004      	add	sp, #16
 8010f00:	4770      	bx	lr
 8010f02:	4604      	mov	r4, r0
 8010f04:	e7f7      	b.n	8010ef6 <rcutils_strdup+0x32>
 8010f06:	bf00      	nop

08010f08 <rcutils_strndup>:
 8010f08:	b082      	sub	sp, #8
 8010f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f0c:	ac06      	add	r4, sp, #24
 8010f0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8010f12:	4605      	mov	r5, r0
 8010f14:	b188      	cbz	r0, 8010f3a <rcutils_strndup+0x32>
 8010f16:	1c4f      	adds	r7, r1, #1
 8010f18:	460e      	mov	r6, r1
 8010f1a:	4638      	mov	r0, r7
 8010f1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f1e:	4790      	blx	r2
 8010f20:	4604      	mov	r4, r0
 8010f22:	b128      	cbz	r0, 8010f30 <rcutils_strndup+0x28>
 8010f24:	463a      	mov	r2, r7
 8010f26:	4629      	mov	r1, r5
 8010f28:	f006 f91f 	bl	801716a <memcpy>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	55a3      	strb	r3, [r4, r6]
 8010f30:	4620      	mov	r0, r4
 8010f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010f36:	b002      	add	sp, #8
 8010f38:	4770      	bx	lr
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	e7f8      	b.n	8010f30 <rcutils_strndup+0x28>
 8010f3e:	bf00      	nop

08010f40 <rcutils_get_zero_initialized_string_map>:
 8010f40:	4b01      	ldr	r3, [pc, #4]	@ (8010f48 <rcutils_get_zero_initialized_string_map+0x8>)
 8010f42:	2000      	movs	r0, #0
 8010f44:	6018      	str	r0, [r3, #0]
 8010f46:	4770      	bx	lr
 8010f48:	20010c70 	.word	0x20010c70

08010f4c <rcutils_string_map_reserve>:
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d05f      	beq.n	8011010 <rcutils_string_map_reserve+0xc4>
 8010f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f54:	460c      	mov	r4, r1
 8010f56:	6801      	ldr	r1, [r0, #0]
 8010f58:	b082      	sub	sp, #8
 8010f5a:	4605      	mov	r5, r0
 8010f5c:	b129      	cbz	r1, 8010f6a <rcutils_string_map_reserve+0x1e>
 8010f5e:	68cb      	ldr	r3, [r1, #12]
 8010f60:	42a3      	cmp	r3, r4
 8010f62:	d906      	bls.n	8010f72 <rcutils_string_map_reserve+0x26>
 8010f64:	461c      	mov	r4, r3
 8010f66:	2900      	cmp	r1, #0
 8010f68:	d1f9      	bne.n	8010f5e <rcutils_string_map_reserve+0x12>
 8010f6a:	201f      	movs	r0, #31
 8010f6c:	b002      	add	sp, #8
 8010f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f72:	688b      	ldr	r3, [r1, #8]
 8010f74:	42a3      	cmp	r3, r4
 8010f76:	d047      	beq.n	8011008 <rcutils_string_map_reserve+0xbc>
 8010f78:	6a0e      	ldr	r6, [r1, #32]
 8010f7a:	2c00      	cmp	r4, #0
 8010f7c:	d034      	beq.n	8010fe8 <rcutils_string_map_reserve+0x9c>
 8010f7e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010f82:	d243      	bcs.n	801100c <rcutils_string_map_reserve+0xc0>
 8010f84:	00a7      	lsls	r7, r4, #2
 8010f86:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010f8a:	6808      	ldr	r0, [r1, #0]
 8010f8c:	4632      	mov	r2, r6
 8010f8e:	4639      	mov	r1, r7
 8010f90:	47c0      	blx	r8
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d03a      	beq.n	801100c <rcutils_string_map_reserve+0xc0>
 8010f96:	682b      	ldr	r3, [r5, #0]
 8010f98:	4632      	mov	r2, r6
 8010f9a:	6018      	str	r0, [r3, #0]
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	6858      	ldr	r0, [r3, #4]
 8010fa0:	47c0      	blx	r8
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d032      	beq.n	801100c <rcutils_string_map_reserve+0xc0>
 8010fa6:	682d      	ldr	r5, [r5, #0]
 8010fa8:	68ab      	ldr	r3, [r5, #8]
 8010faa:	6068      	str	r0, [r5, #4]
 8010fac:	42a3      	cmp	r3, r4
 8010fae:	d226      	bcs.n	8010ffe <rcutils_string_map_reserve+0xb2>
 8010fb0:	682a      	ldr	r2, [r5, #0]
 8010fb2:	eb00 0c07 	add.w	ip, r0, r7
 8010fb6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8010fba:	45e6      	cmp	lr, ip
 8010fbc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8010fc0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010fc4:	d203      	bcs.n	8010fce <rcutils_string_map_reserve+0x82>
 8010fc6:	eb02 0c07 	add.w	ip, r2, r7
 8010fca:	4566      	cmp	r6, ip
 8010fcc:	d322      	bcc.n	8011014 <rcutils_string_map_reserve+0xc8>
 8010fce:	1ae3      	subs	r3, r4, r3
 8010fd0:	009a      	lsls	r2, r3, #2
 8010fd2:	4670      	mov	r0, lr
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	9201      	str	r2, [sp, #4]
 8010fd8:	f005 ffa4 	bl	8016f24 <memset>
 8010fdc:	9a01      	ldr	r2, [sp, #4]
 8010fde:	2100      	movs	r1, #0
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f005 ff9f 	bl	8016f24 <memset>
 8010fe6:	e00a      	b.n	8010ffe <rcutils_string_map_reserve+0xb2>
 8010fe8:	694f      	ldr	r7, [r1, #20]
 8010fea:	6808      	ldr	r0, [r1, #0]
 8010fec:	4631      	mov	r1, r6
 8010fee:	47b8      	blx	r7
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	6858      	ldr	r0, [r3, #4]
 8010ff6:	601c      	str	r4, [r3, #0]
 8010ff8:	47b8      	blx	r7
 8010ffa:	682d      	ldr	r5, [r5, #0]
 8010ffc:	606c      	str	r4, [r5, #4]
 8010ffe:	2000      	movs	r0, #0
 8011000:	60ac      	str	r4, [r5, #8]
 8011002:	b002      	add	sp, #8
 8011004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011008:	2000      	movs	r0, #0
 801100a:	e7af      	b.n	8010f6c <rcutils_string_map_reserve+0x20>
 801100c:	200a      	movs	r0, #10
 801100e:	e7ad      	b.n	8010f6c <rcutils_string_map_reserve+0x20>
 8011010:	200b      	movs	r0, #11
 8011012:	4770      	bx	lr
 8011014:	1f0b      	subs	r3, r1, #4
 8011016:	4418      	add	r0, r3
 8011018:	4413      	add	r3, r2
 801101a:	3a04      	subs	r2, #4
 801101c:	4417      	add	r7, r2
 801101e:	2200      	movs	r2, #0
 8011020:	f843 2f04 	str.w	r2, [r3, #4]!
 8011024:	42bb      	cmp	r3, r7
 8011026:	f840 2f04 	str.w	r2, [r0, #4]!
 801102a:	d1f9      	bne.n	8011020 <rcutils_string_map_reserve+0xd4>
 801102c:	e7e7      	b.n	8010ffe <rcutils_string_map_reserve+0xb2>
 801102e:	bf00      	nop

08011030 <rcutils_string_map_init>:
 8011030:	b082      	sub	sp, #8
 8011032:	b570      	push	{r4, r5, r6, lr}
 8011034:	ac04      	add	r4, sp, #16
 8011036:	e884 000c 	stmia.w	r4, {r2, r3}
 801103a:	b380      	cbz	r0, 801109e <rcutils_string_map_init+0x6e>
 801103c:	6806      	ldr	r6, [r0, #0]
 801103e:	4604      	mov	r4, r0
 8011040:	b12e      	cbz	r6, 801104e <rcutils_string_map_init+0x1e>
 8011042:	251e      	movs	r5, #30
 8011044:	4628      	mov	r0, r5
 8011046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801104a:	b002      	add	sp, #8
 801104c:	4770      	bx	lr
 801104e:	a804      	add	r0, sp, #16
 8011050:	460d      	mov	r5, r1
 8011052:	f7f9 f9d5 	bl	800a400 <rcutils_allocator_is_valid>
 8011056:	b310      	cbz	r0, 801109e <rcutils_string_map_init+0x6e>
 8011058:	9b04      	ldr	r3, [sp, #16]
 801105a:	9908      	ldr	r1, [sp, #32]
 801105c:	2024      	movs	r0, #36	@ 0x24
 801105e:	4798      	blx	r3
 8011060:	6020      	str	r0, [r4, #0]
 8011062:	b310      	cbz	r0, 80110aa <rcutils_string_map_init+0x7a>
 8011064:	f10d 0e10 	add.w	lr, sp, #16
 8011068:	e9c0 6600 	strd	r6, r6, [r0]
 801106c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8011070:	f100 0c10 	add.w	ip, r0, #16
 8011074:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011078:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801107c:	f8de 3000 	ldr.w	r3, [lr]
 8011080:	f8cc 3000 	str.w	r3, [ip]
 8011084:	4629      	mov	r1, r5
 8011086:	4620      	mov	r0, r4
 8011088:	f7ff ff60 	bl	8010f4c <rcutils_string_map_reserve>
 801108c:	4605      	mov	r5, r0
 801108e:	2800      	cmp	r0, #0
 8011090:	d0d8      	beq.n	8011044 <rcutils_string_map_init+0x14>
 8011092:	9b05      	ldr	r3, [sp, #20]
 8011094:	9908      	ldr	r1, [sp, #32]
 8011096:	6820      	ldr	r0, [r4, #0]
 8011098:	4798      	blx	r3
 801109a:	6026      	str	r6, [r4, #0]
 801109c:	e7d2      	b.n	8011044 <rcutils_string_map_init+0x14>
 801109e:	250b      	movs	r5, #11
 80110a0:	4628      	mov	r0, r5
 80110a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110a6:	b002      	add	sp, #8
 80110a8:	4770      	bx	lr
 80110aa:	250a      	movs	r5, #10
 80110ac:	e7ca      	b.n	8011044 <rcutils_string_map_init+0x14>
 80110ae:	bf00      	nop

080110b0 <rcutils_string_map_fini>:
 80110b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b4:	b082      	sub	sp, #8
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d03a      	beq.n	8011130 <rcutils_string_map_fini+0x80>
 80110ba:	6804      	ldr	r4, [r0, #0]
 80110bc:	4606      	mov	r6, r0
 80110be:	2c00      	cmp	r4, #0
 80110c0:	d032      	beq.n	8011128 <rcutils_string_map_fini+0x78>
 80110c2:	68a3      	ldr	r3, [r4, #8]
 80110c4:	b32b      	cbz	r3, 8011112 <rcutils_string_map_fini+0x62>
 80110c6:	2500      	movs	r5, #0
 80110c8:	6822      	ldr	r2, [r4, #0]
 80110ca:	462f      	mov	r7, r5
 80110cc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80110d0:	b1e0      	cbz	r0, 801110c <rcutils_string_map_fini+0x5c>
 80110d2:	6a21      	ldr	r1, [r4, #32]
 80110d4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80110d8:	9101      	str	r1, [sp, #4]
 80110da:	47c0      	blx	r8
 80110dc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80110e0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80110e4:	9901      	ldr	r1, [sp, #4]
 80110e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110ea:	47c0      	blx	r8
 80110ec:	68e3      	ldr	r3, [r4, #12]
 80110ee:	6862      	ldr	r2, [r4, #4]
 80110f0:	3b01      	subs	r3, #1
 80110f2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80110f6:	60e3      	str	r3, [r4, #12]
 80110f8:	6834      	ldr	r4, [r6, #0]
 80110fa:	68a3      	ldr	r3, [r4, #8]
 80110fc:	3501      	adds	r5, #1
 80110fe:	429d      	cmp	r5, r3
 8011100:	d207      	bcs.n	8011112 <rcutils_string_map_fini+0x62>
 8011102:	6822      	ldr	r2, [r4, #0]
 8011104:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011108:	2800      	cmp	r0, #0
 801110a:	d1e2      	bne.n	80110d2 <rcutils_string_map_fini+0x22>
 801110c:	3501      	adds	r5, #1
 801110e:	429d      	cmp	r5, r3
 8011110:	d3dc      	bcc.n	80110cc <rcutils_string_map_fini+0x1c>
 8011112:	2100      	movs	r1, #0
 8011114:	4630      	mov	r0, r6
 8011116:	f7ff ff19 	bl	8010f4c <rcutils_string_map_reserve>
 801111a:	4604      	mov	r4, r0
 801111c:	b920      	cbnz	r0, 8011128 <rcutils_string_map_fini+0x78>
 801111e:	6830      	ldr	r0, [r6, #0]
 8011120:	6943      	ldr	r3, [r0, #20]
 8011122:	6a01      	ldr	r1, [r0, #32]
 8011124:	4798      	blx	r3
 8011126:	6034      	str	r4, [r6, #0]
 8011128:	4620      	mov	r0, r4
 801112a:	b002      	add	sp, #8
 801112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011130:	240b      	movs	r4, #11
 8011132:	4620      	mov	r0, r4
 8011134:	b002      	add	sp, #8
 8011136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801113a:	bf00      	nop

0801113c <rcutils_string_map_getn>:
 801113c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	b300      	cbz	r0, 8011184 <rcutils_string_map_getn+0x48>
 8011142:	6807      	ldr	r7, [r0, #0]
 8011144:	b1ff      	cbz	r7, 8011186 <rcutils_string_map_getn+0x4a>
 8011146:	4688      	mov	r8, r1
 8011148:	b1e1      	cbz	r1, 8011184 <rcutils_string_map_getn+0x48>
 801114a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801114e:	683e      	ldr	r6, [r7, #0]
 8011150:	f1ba 0f00 	cmp.w	sl, #0
 8011154:	d016      	beq.n	8011184 <rcutils_string_map_getn+0x48>
 8011156:	4691      	mov	r9, r2
 8011158:	3e04      	subs	r6, #4
 801115a:	2400      	movs	r4, #0
 801115c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011164:	4628      	mov	r0, r5
 8011166:	3401      	adds	r4, #1
 8011168:	b155      	cbz	r5, 8011180 <rcutils_string_map_getn+0x44>
 801116a:	f7ef f8b1 	bl	80002d0 <strlen>
 801116e:	4548      	cmp	r0, r9
 8011170:	4602      	mov	r2, r0
 8011172:	4629      	mov	r1, r5
 8011174:	bf38      	it	cc
 8011176:	464a      	movcc	r2, r9
 8011178:	4640      	mov	r0, r8
 801117a:	f005 fee8 	bl	8016f4e <strncmp>
 801117e:	b128      	cbz	r0, 801118c <rcutils_string_map_getn+0x50>
 8011180:	45a2      	cmp	sl, r4
 8011182:	d1eb      	bne.n	801115c <rcutils_string_map_getn+0x20>
 8011184:	2700      	movs	r7, #0
 8011186:	4638      	mov	r0, r7
 8011188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f853 700b 	ldr.w	r7, [r3, fp]
 8011192:	4638      	mov	r0, r7
 8011194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011198 <rmw_get_zero_initialized_context>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4604      	mov	r4, r0
 801119c:	3010      	adds	r0, #16
 801119e:	f000 f80b 	bl	80111b8 <rmw_get_zero_initialized_init_options>
 80111a2:	2300      	movs	r3, #0
 80111a4:	2000      	movs	r0, #0
 80111a6:	2100      	movs	r1, #0
 80111a8:	e9c4 0100 	strd	r0, r1, [r4]
 80111ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80111b0:	60a3      	str	r3, [r4, #8]
 80111b2:	4620      	mov	r0, r4
 80111b4:	bd10      	pop	{r4, pc}
 80111b6:	bf00      	nop

080111b8 <rmw_get_zero_initialized_init_options>:
 80111b8:	b510      	push	{r4, lr}
 80111ba:	2238      	movs	r2, #56	@ 0x38
 80111bc:	4604      	mov	r4, r0
 80111be:	2100      	movs	r1, #0
 80111c0:	f005 feb0 	bl	8016f24 <memset>
 80111c4:	f104 0010 	add.w	r0, r4, #16
 80111c8:	f000 f806 	bl	80111d8 <rmw_get_default_security_options>
 80111cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111d0:	60e3      	str	r3, [r4, #12]
 80111d2:	4620      	mov	r0, r4
 80111d4:	bd10      	pop	{r4, pc}
 80111d6:	bf00      	nop

080111d8 <rmw_get_default_security_options>:
 80111d8:	2200      	movs	r2, #0
 80111da:	7002      	strb	r2, [r0, #0]
 80111dc:	6042      	str	r2, [r0, #4]
 80111de:	4770      	bx	lr

080111e0 <rmw_subscription_content_filter_options_fini>:
 80111e0:	b1b0      	cbz	r0, 8011210 <rmw_subscription_content_filter_options_fini+0x30>
 80111e2:	b538      	push	{r3, r4, r5, lr}
 80111e4:	4604      	mov	r4, r0
 80111e6:	4608      	mov	r0, r1
 80111e8:	460d      	mov	r5, r1
 80111ea:	f7f9 f909 	bl	800a400 <rcutils_allocator_is_valid>
 80111ee:	b168      	cbz	r0, 801120c <rmw_subscription_content_filter_options_fini+0x2c>
 80111f0:	6820      	ldr	r0, [r4, #0]
 80111f2:	b120      	cbz	r0, 80111fe <rmw_subscription_content_filter_options_fini+0x1e>
 80111f4:	686b      	ldr	r3, [r5, #4]
 80111f6:	6929      	ldr	r1, [r5, #16]
 80111f8:	4798      	blx	r3
 80111fa:	2300      	movs	r3, #0
 80111fc:	6023      	str	r3, [r4, #0]
 80111fe:	1d20      	adds	r0, r4, #4
 8011200:	f004 fb3c 	bl	801587c <rcutils_string_array_fini>
 8011204:	3800      	subs	r0, #0
 8011206:	bf18      	it	ne
 8011208:	2001      	movne	r0, #1
 801120a:	bd38      	pop	{r3, r4, r5, pc}
 801120c:	200b      	movs	r0, #11
 801120e:	bd38      	pop	{r3, r4, r5, pc}
 8011210:	200b      	movs	r0, #11
 8011212:	4770      	bx	lr

08011214 <rmw_get_default_subscription_options>:
 8011214:	2200      	movs	r2, #0
 8011216:	e9c0 2200 	strd	r2, r2, [r0]
 801121a:	6082      	str	r2, [r0, #8]
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop

08011220 <rmw_time_equal>:
 8011220:	b4f0      	push	{r4, r5, r6, r7}
 8011222:	b084      	sub	sp, #16
 8011224:	ac04      	add	r4, sp, #16
 8011226:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801122a:	4603      	mov	r3, r0
 801122c:	4924      	ldr	r1, [pc, #144]	@ (80112c0 <rmw_time_equal+0xa0>)
 801122e:	9e03      	ldr	r6, [sp, #12]
 8011230:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011234:	2202      	movs	r2, #2
 8011236:	4299      	cmp	r1, r3
 8011238:	41aa      	sbcs	r2, r5
 801123a:	d330      	bcc.n	801129e <rmw_time_equal+0x7e>
 801123c:	4c21      	ldr	r4, [pc, #132]	@ (80112c4 <rmw_time_equal+0xa4>)
 801123e:	fba3 3204 	umull	r3, r2, r3, r4
 8011242:	fb04 2205 	mla	r2, r4, r5, r2
 8011246:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801124a:	43dd      	mvns	r5, r3
 801124c:	1a8c      	subs	r4, r1, r2
 801124e:	4285      	cmp	r5, r0
 8011250:	41b4      	sbcs	r4, r6
 8011252:	d332      	bcc.n	80112ba <rmw_time_equal+0x9a>
 8011254:	eb10 0c03 	adds.w	ip, r0, r3
 8011258:	eb42 0106 	adc.w	r1, r2, r6
 801125c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011260:	4817      	ldr	r0, [pc, #92]	@ (80112c0 <rmw_time_equal+0xa0>)
 8011262:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8011264:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8011266:	2202      	movs	r2, #2
 8011268:	4298      	cmp	r0, r3
 801126a:	41b2      	sbcs	r2, r6
 801126c:	d31c      	bcc.n	80112a8 <rmw_time_equal+0x88>
 801126e:	4c15      	ldr	r4, [pc, #84]	@ (80112c4 <rmw_time_equal+0xa4>)
 8011270:	fba3 3204 	umull	r3, r2, r3, r4
 8011274:	fb04 2206 	mla	r2, r4, r6, r2
 8011278:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801127c:	43de      	mvns	r6, r3
 801127e:	1a84      	subs	r4, r0, r2
 8011280:	42ae      	cmp	r6, r5
 8011282:	41bc      	sbcs	r4, r7
 8011284:	d315      	bcc.n	80112b2 <rmw_time_equal+0x92>
 8011286:	195b      	adds	r3, r3, r5
 8011288:	eb42 0207 	adc.w	r2, r2, r7
 801128c:	428a      	cmp	r2, r1
 801128e:	bf08      	it	eq
 8011290:	4563      	cmpeq	r3, ip
 8011292:	bf0c      	ite	eq
 8011294:	2001      	moveq	r0, #1
 8011296:	2000      	movne	r0, #0
 8011298:	b004      	add	sp, #16
 801129a:	bcf0      	pop	{r4, r5, r6, r7}
 801129c:	4770      	bx	lr
 801129e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80112a2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80112a6:	e7d9      	b.n	801125c <rmw_time_equal+0x3c>
 80112a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112ac:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80112b0:	e7ec      	b.n	801128c <rmw_time_equal+0x6c>
 80112b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80112b6:	4602      	mov	r2, r0
 80112b8:	e7e8      	b.n	801128c <rmw_time_equal+0x6c>
 80112ba:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80112be:	e7cd      	b.n	801125c <rmw_time_equal+0x3c>
 80112c0:	25c17d04 	.word	0x25c17d04
 80112c4:	3b9aca00 	.word	0x3b9aca00

080112c8 <rmw_time_total_nsec>:
 80112c8:	b470      	push	{r4, r5, r6}
 80112ca:	b085      	sub	sp, #20
 80112cc:	ac04      	add	r4, sp, #16
 80112ce:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80112d2:	4603      	mov	r3, r0
 80112d4:	4912      	ldr	r1, [pc, #72]	@ (8011320 <rmw_time_total_nsec+0x58>)
 80112d6:	9e03      	ldr	r6, [sp, #12]
 80112d8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80112dc:	2202      	movs	r2, #2
 80112de:	4299      	cmp	r1, r3
 80112e0:	41aa      	sbcs	r2, r5
 80112e2:	d311      	bcc.n	8011308 <rmw_time_total_nsec+0x40>
 80112e4:	4c0f      	ldr	r4, [pc, #60]	@ (8011324 <rmw_time_total_nsec+0x5c>)
 80112e6:	fba3 3204 	umull	r3, r2, r3, r4
 80112ea:	fb04 2205 	mla	r2, r4, r5, r2
 80112ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80112f2:	43dd      	mvns	r5, r3
 80112f4:	1a8c      	subs	r4, r1, r2
 80112f6:	4285      	cmp	r5, r0
 80112f8:	41b4      	sbcs	r4, r6
 80112fa:	d30c      	bcc.n	8011316 <rmw_time_total_nsec+0x4e>
 80112fc:	1818      	adds	r0, r3, r0
 80112fe:	eb42 0106 	adc.w	r1, r2, r6
 8011302:	b005      	add	sp, #20
 8011304:	bc70      	pop	{r4, r5, r6}
 8011306:	4770      	bx	lr
 8011308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801130c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011310:	b005      	add	sp, #20
 8011312:	bc70      	pop	{r4, r5, r6}
 8011314:	4770      	bx	lr
 8011316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801131a:	b005      	add	sp, #20
 801131c:	bc70      	pop	{r4, r5, r6}
 801131e:	4770      	bx	lr
 8011320:	25c17d04 	.word	0x25c17d04
 8011324:	3b9aca00 	.word	0x3b9aca00

08011328 <rmw_get_zero_initialized_message_info>:
 8011328:	b510      	push	{r4, lr}
 801132a:	2240      	movs	r2, #64	@ 0x40
 801132c:	4604      	mov	r4, r0
 801132e:	2100      	movs	r1, #0
 8011330:	f005 fdf8 	bl	8016f24 <memset>
 8011334:	4620      	mov	r0, r4
 8011336:	bd10      	pop	{r4, pc}

08011338 <rmw_validate_full_topic_name>:
 8011338:	2800      	cmp	r0, #0
 801133a:	d057      	beq.n	80113ec <rmw_validate_full_topic_name+0xb4>
 801133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011340:	460d      	mov	r5, r1
 8011342:	2900      	cmp	r1, #0
 8011344:	d054      	beq.n	80113f0 <rmw_validate_full_topic_name+0xb8>
 8011346:	4616      	mov	r6, r2
 8011348:	4604      	mov	r4, r0
 801134a:	f7ee ffc1 	bl	80002d0 <strlen>
 801134e:	b148      	cbz	r0, 8011364 <rmw_validate_full_topic_name+0x2c>
 8011350:	7823      	ldrb	r3, [r4, #0]
 8011352:	2b2f      	cmp	r3, #47	@ 0x2f
 8011354:	d00d      	beq.n	8011372 <rmw_validate_full_topic_name+0x3a>
 8011356:	2302      	movs	r3, #2
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	b13e      	cbz	r6, 801136c <rmw_validate_full_topic_name+0x34>
 801135c:	2000      	movs	r0, #0
 801135e:	6030      	str	r0, [r6, #0]
 8011360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011364:	2301      	movs	r3, #1
 8011366:	602b      	str	r3, [r5, #0]
 8011368:	2e00      	cmp	r6, #0
 801136a:	d1f7      	bne.n	801135c <rmw_validate_full_topic_name+0x24>
 801136c:	2000      	movs	r0, #0
 801136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011372:	1e43      	subs	r3, r0, #1
 8011374:	5ce2      	ldrb	r2, [r4, r3]
 8011376:	2a2f      	cmp	r2, #47	@ 0x2f
 8011378:	d03c      	beq.n	80113f4 <rmw_validate_full_topic_name+0xbc>
 801137a:	1e63      	subs	r3, r4, #1
 801137c:	eb03 0800 	add.w	r8, r3, r0
 8011380:	f1c4 0e01 	rsb	lr, r4, #1
 8011384:	eb0e 0703 	add.w	r7, lr, r3
 8011388:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801138c:	f021 0220 	bic.w	r2, r1, #32
 8011390:	3a41      	subs	r2, #65	@ 0x41
 8011392:	2a19      	cmp	r2, #25
 8011394:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8011398:	d90b      	bls.n	80113b2 <rmw_validate_full_topic_name+0x7a>
 801139a:	295f      	cmp	r1, #95	@ 0x5f
 801139c:	d009      	beq.n	80113b2 <rmw_validate_full_topic_name+0x7a>
 801139e:	f1bc 0f0a 	cmp.w	ip, #10
 80113a2:	d906      	bls.n	80113b2 <rmw_validate_full_topic_name+0x7a>
 80113a4:	2304      	movs	r3, #4
 80113a6:	602b      	str	r3, [r5, #0]
 80113a8:	2e00      	cmp	r6, #0
 80113aa:	d0df      	beq.n	801136c <rmw_validate_full_topic_name+0x34>
 80113ac:	6037      	str	r7, [r6, #0]
 80113ae:	2000      	movs	r0, #0
 80113b0:	e7d6      	b.n	8011360 <rmw_validate_full_topic_name+0x28>
 80113b2:	4543      	cmp	r3, r8
 80113b4:	d1e6      	bne.n	8011384 <rmw_validate_full_topic_name+0x4c>
 80113b6:	4f1a      	ldr	r7, [pc, #104]	@ (8011420 <rmw_validate_full_topic_name+0xe8>)
 80113b8:	2301      	movs	r3, #1
 80113ba:	e004      	b.n	80113c6 <rmw_validate_full_topic_name+0x8e>
 80113bc:	4298      	cmp	r0, r3
 80113be:	f104 0401 	add.w	r4, r4, #1
 80113c2:	d91c      	bls.n	80113fe <rmw_validate_full_topic_name+0xc6>
 80113c4:	4613      	mov	r3, r2
 80113c6:	4298      	cmp	r0, r3
 80113c8:	f103 0201 	add.w	r2, r3, #1
 80113cc:	d0f6      	beq.n	80113bc <rmw_validate_full_topic_name+0x84>
 80113ce:	7821      	ldrb	r1, [r4, #0]
 80113d0:	292f      	cmp	r1, #47	@ 0x2f
 80113d2:	d1f3      	bne.n	80113bc <rmw_validate_full_topic_name+0x84>
 80113d4:	7861      	ldrb	r1, [r4, #1]
 80113d6:	292f      	cmp	r1, #47	@ 0x2f
 80113d8:	d01c      	beq.n	8011414 <rmw_validate_full_topic_name+0xdc>
 80113da:	5dc9      	ldrb	r1, [r1, r7]
 80113dc:	0749      	lsls	r1, r1, #29
 80113de:	d5ed      	bpl.n	80113bc <rmw_validate_full_topic_name+0x84>
 80113e0:	2206      	movs	r2, #6
 80113e2:	602a      	str	r2, [r5, #0]
 80113e4:	2e00      	cmp	r6, #0
 80113e6:	d0c1      	beq.n	801136c <rmw_validate_full_topic_name+0x34>
 80113e8:	6033      	str	r3, [r6, #0]
 80113ea:	e7bf      	b.n	801136c <rmw_validate_full_topic_name+0x34>
 80113ec:	200b      	movs	r0, #11
 80113ee:	4770      	bx	lr
 80113f0:	200b      	movs	r0, #11
 80113f2:	e7b5      	b.n	8011360 <rmw_validate_full_topic_name+0x28>
 80113f4:	2203      	movs	r2, #3
 80113f6:	602a      	str	r2, [r5, #0]
 80113f8:	2e00      	cmp	r6, #0
 80113fa:	d1f5      	bne.n	80113e8 <rmw_validate_full_topic_name+0xb0>
 80113fc:	e7b6      	b.n	801136c <rmw_validate_full_topic_name+0x34>
 80113fe:	28f7      	cmp	r0, #247	@ 0xf7
 8011400:	d802      	bhi.n	8011408 <rmw_validate_full_topic_name+0xd0>
 8011402:	2000      	movs	r0, #0
 8011404:	6028      	str	r0, [r5, #0]
 8011406:	e7ab      	b.n	8011360 <rmw_validate_full_topic_name+0x28>
 8011408:	2307      	movs	r3, #7
 801140a:	602b      	str	r3, [r5, #0]
 801140c:	2e00      	cmp	r6, #0
 801140e:	d0ad      	beq.n	801136c <rmw_validate_full_topic_name+0x34>
 8011410:	23f6      	movs	r3, #246	@ 0xf6
 8011412:	e7e9      	b.n	80113e8 <rmw_validate_full_topic_name+0xb0>
 8011414:	2205      	movs	r2, #5
 8011416:	602a      	str	r2, [r5, #0]
 8011418:	2e00      	cmp	r6, #0
 801141a:	d1e5      	bne.n	80113e8 <rmw_validate_full_topic_name+0xb0>
 801141c:	e7a6      	b.n	801136c <rmw_validate_full_topic_name+0x34>
 801141e:	bf00      	nop
 8011420:	08019de3 	.word	0x08019de3

08011424 <rmw_validate_namespace_with_size>:
 8011424:	b340      	cbz	r0, 8011478 <rmw_validate_namespace_with_size+0x54>
 8011426:	b570      	push	{r4, r5, r6, lr}
 8011428:	4614      	mov	r4, r2
 801142a:	b0c2      	sub	sp, #264	@ 0x108
 801142c:	b332      	cbz	r2, 801147c <rmw_validate_namespace_with_size+0x58>
 801142e:	2901      	cmp	r1, #1
 8011430:	460d      	mov	r5, r1
 8011432:	461e      	mov	r6, r3
 8011434:	d102      	bne.n	801143c <rmw_validate_namespace_with_size+0x18>
 8011436:	7803      	ldrb	r3, [r0, #0]
 8011438:	2b2f      	cmp	r3, #47	@ 0x2f
 801143a:	d012      	beq.n	8011462 <rmw_validate_namespace_with_size+0x3e>
 801143c:	aa01      	add	r2, sp, #4
 801143e:	4669      	mov	r1, sp
 8011440:	f7ff ff7a 	bl	8011338 <rmw_validate_full_topic_name>
 8011444:	b978      	cbnz	r0, 8011466 <rmw_validate_namespace_with_size+0x42>
 8011446:	9b00      	ldr	r3, [sp, #0]
 8011448:	b14b      	cbz	r3, 801145e <rmw_validate_namespace_with_size+0x3a>
 801144a:	2b07      	cmp	r3, #7
 801144c:	d007      	beq.n	801145e <rmw_validate_namespace_with_size+0x3a>
 801144e:	1e5a      	subs	r2, r3, #1
 8011450:	2a05      	cmp	r2, #5
 8011452:	d82b      	bhi.n	80114ac <rmw_validate_namespace_with_size+0x88>
 8011454:	e8df f002 	tbb	[pc, r2]
 8011458:	1e212427 	.word	0x1e212427
 801145c:	141b      	.short	0x141b
 801145e:	2df5      	cmp	r5, #245	@ 0xf5
 8011460:	d803      	bhi.n	801146a <rmw_validate_namespace_with_size+0x46>
 8011462:	2000      	movs	r0, #0
 8011464:	6020      	str	r0, [r4, #0]
 8011466:	b042      	add	sp, #264	@ 0x108
 8011468:	bd70      	pop	{r4, r5, r6, pc}
 801146a:	2307      	movs	r3, #7
 801146c:	6023      	str	r3, [r4, #0]
 801146e:	2e00      	cmp	r6, #0
 8011470:	d0f9      	beq.n	8011466 <rmw_validate_namespace_with_size+0x42>
 8011472:	23f4      	movs	r3, #244	@ 0xf4
 8011474:	6033      	str	r3, [r6, #0]
 8011476:	e7f6      	b.n	8011466 <rmw_validate_namespace_with_size+0x42>
 8011478:	200b      	movs	r0, #11
 801147a:	4770      	bx	lr
 801147c:	200b      	movs	r0, #11
 801147e:	e7f2      	b.n	8011466 <rmw_validate_namespace_with_size+0x42>
 8011480:	2306      	movs	r3, #6
 8011482:	6023      	str	r3, [r4, #0]
 8011484:	2e00      	cmp	r6, #0
 8011486:	d0ee      	beq.n	8011466 <rmw_validate_namespace_with_size+0x42>
 8011488:	9b01      	ldr	r3, [sp, #4]
 801148a:	6033      	str	r3, [r6, #0]
 801148c:	e7eb      	b.n	8011466 <rmw_validate_namespace_with_size+0x42>
 801148e:	2305      	movs	r3, #5
 8011490:	6023      	str	r3, [r4, #0]
 8011492:	e7f7      	b.n	8011484 <rmw_validate_namespace_with_size+0x60>
 8011494:	2304      	movs	r3, #4
 8011496:	6023      	str	r3, [r4, #0]
 8011498:	e7f4      	b.n	8011484 <rmw_validate_namespace_with_size+0x60>
 801149a:	2303      	movs	r3, #3
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	e7f1      	b.n	8011484 <rmw_validate_namespace_with_size+0x60>
 80114a0:	2302      	movs	r3, #2
 80114a2:	6023      	str	r3, [r4, #0]
 80114a4:	e7ee      	b.n	8011484 <rmw_validate_namespace_with_size+0x60>
 80114a6:	2301      	movs	r3, #1
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	e7eb      	b.n	8011484 <rmw_validate_namespace_with_size+0x60>
 80114ac:	4a03      	ldr	r2, [pc, #12]	@ (80114bc <rmw_validate_namespace_with_size+0x98>)
 80114ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80114b2:	a802      	add	r0, sp, #8
 80114b4:	f7ff fcda 	bl	8010e6c <rcutils_snprintf>
 80114b8:	2001      	movs	r0, #1
 80114ba:	e7d4      	b.n	8011466 <rmw_validate_namespace_with_size+0x42>
 80114bc:	080196d4 	.word	0x080196d4

080114c0 <rmw_validate_namespace>:
 80114c0:	b168      	cbz	r0, 80114de <rmw_validate_namespace+0x1e>
 80114c2:	b570      	push	{r4, r5, r6, lr}
 80114c4:	460d      	mov	r5, r1
 80114c6:	4616      	mov	r6, r2
 80114c8:	4604      	mov	r4, r0
 80114ca:	f7ee ff01 	bl	80002d0 <strlen>
 80114ce:	4633      	mov	r3, r6
 80114d0:	4601      	mov	r1, r0
 80114d2:	462a      	mov	r2, r5
 80114d4:	4620      	mov	r0, r4
 80114d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114da:	f7ff bfa3 	b.w	8011424 <rmw_validate_namespace_with_size>
 80114de:	200b      	movs	r0, #11
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop

080114e4 <rmw_namespace_validation_result_string>:
 80114e4:	2807      	cmp	r0, #7
 80114e6:	bf9a      	itte	ls
 80114e8:	4b02      	ldrls	r3, [pc, #8]	@ (80114f4 <rmw_namespace_validation_result_string+0x10>)
 80114ea:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80114ee:	4802      	ldrhi	r0, [pc, #8]	@ (80114f8 <rmw_namespace_validation_result_string+0x14>)
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	080198cc 	.word	0x080198cc
 80114f8:	08019724 	.word	0x08019724

080114fc <rmw_validate_node_name>:
 80114fc:	2800      	cmp	r0, #0
 80114fe:	d03b      	beq.n	8011578 <rmw_validate_node_name+0x7c>
 8011500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011504:	460d      	mov	r5, r1
 8011506:	2900      	cmp	r1, #0
 8011508:	d038      	beq.n	801157c <rmw_validate_node_name+0x80>
 801150a:	4616      	mov	r6, r2
 801150c:	4604      	mov	r4, r0
 801150e:	f7ee fedf 	bl	80002d0 <strlen>
 8011512:	b1e0      	cbz	r0, 801154e <rmw_validate_node_name+0x52>
 8011514:	1e63      	subs	r3, r4, #1
 8011516:	eb03 0800 	add.w	r8, r3, r0
 801151a:	f1c4 0101 	rsb	r1, r4, #1
 801151e:	18cf      	adds	r7, r1, r3
 8011520:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011524:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8011528:	f02e 0c20 	bic.w	ip, lr, #32
 801152c:	2a09      	cmp	r2, #9
 801152e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8011532:	d914      	bls.n	801155e <rmw_validate_node_name+0x62>
 8011534:	f1bc 0f19 	cmp.w	ip, #25
 8011538:	d911      	bls.n	801155e <rmw_validate_node_name+0x62>
 801153a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801153e:	d00e      	beq.n	801155e <rmw_validate_node_name+0x62>
 8011540:	2302      	movs	r3, #2
 8011542:	602b      	str	r3, [r5, #0]
 8011544:	b106      	cbz	r6, 8011548 <rmw_validate_node_name+0x4c>
 8011546:	6037      	str	r7, [r6, #0]
 8011548:	2000      	movs	r0, #0
 801154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801154e:	2301      	movs	r3, #1
 8011550:	602b      	str	r3, [r5, #0]
 8011552:	2e00      	cmp	r6, #0
 8011554:	d0f8      	beq.n	8011548 <rmw_validate_node_name+0x4c>
 8011556:	2000      	movs	r0, #0
 8011558:	6030      	str	r0, [r6, #0]
 801155a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155e:	4543      	cmp	r3, r8
 8011560:	d1dd      	bne.n	801151e <rmw_validate_node_name+0x22>
 8011562:	7822      	ldrb	r2, [r4, #0]
 8011564:	4b0d      	ldr	r3, [pc, #52]	@ (801159c <rmw_validate_node_name+0xa0>)
 8011566:	5cd3      	ldrb	r3, [r2, r3]
 8011568:	f013 0304 	ands.w	r3, r3, #4
 801156c:	d110      	bne.n	8011590 <rmw_validate_node_name+0x94>
 801156e:	28ff      	cmp	r0, #255	@ 0xff
 8011570:	d806      	bhi.n	8011580 <rmw_validate_node_name+0x84>
 8011572:	602b      	str	r3, [r5, #0]
 8011574:	4618      	mov	r0, r3
 8011576:	e7e8      	b.n	801154a <rmw_validate_node_name+0x4e>
 8011578:	200b      	movs	r0, #11
 801157a:	4770      	bx	lr
 801157c:	200b      	movs	r0, #11
 801157e:	e7e4      	b.n	801154a <rmw_validate_node_name+0x4e>
 8011580:	2204      	movs	r2, #4
 8011582:	602a      	str	r2, [r5, #0]
 8011584:	2e00      	cmp	r6, #0
 8011586:	d0df      	beq.n	8011548 <rmw_validate_node_name+0x4c>
 8011588:	22fe      	movs	r2, #254	@ 0xfe
 801158a:	6032      	str	r2, [r6, #0]
 801158c:	4618      	mov	r0, r3
 801158e:	e7dc      	b.n	801154a <rmw_validate_node_name+0x4e>
 8011590:	2303      	movs	r3, #3
 8011592:	602b      	str	r3, [r5, #0]
 8011594:	2e00      	cmp	r6, #0
 8011596:	d1de      	bne.n	8011556 <rmw_validate_node_name+0x5a>
 8011598:	e7d6      	b.n	8011548 <rmw_validate_node_name+0x4c>
 801159a:	bf00      	nop
 801159c:	08019de3 	.word	0x08019de3

080115a0 <rmw_node_name_validation_result_string>:
 80115a0:	2804      	cmp	r0, #4
 80115a2:	bf9a      	itte	ls
 80115a4:	4b02      	ldrls	r3, [pc, #8]	@ (80115b0 <rmw_node_name_validation_result_string+0x10>)
 80115a6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80115aa:	4802      	ldrhi	r0, [pc, #8]	@ (80115b4 <rmw_node_name_validation_result_string+0x14>)
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	080199d8 	.word	0x080199d8
 80115b4:	080198ec 	.word	0x080198ec

080115b8 <get_memory>:
 80115b8:	4603      	mov	r3, r0
 80115ba:	6840      	ldr	r0, [r0, #4]
 80115bc:	b158      	cbz	r0, 80115d6 <get_memory+0x1e>
 80115be:	6842      	ldr	r2, [r0, #4]
 80115c0:	605a      	str	r2, [r3, #4]
 80115c2:	b10a      	cbz	r2, 80115c8 <get_memory+0x10>
 80115c4:	2100      	movs	r1, #0
 80115c6:	6011      	str	r1, [r2, #0]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	6042      	str	r2, [r0, #4]
 80115cc:	b102      	cbz	r2, 80115d0 <get_memory+0x18>
 80115ce:	6010      	str	r0, [r2, #0]
 80115d0:	2200      	movs	r2, #0
 80115d2:	6002      	str	r2, [r0, #0]
 80115d4:	6018      	str	r0, [r3, #0]
 80115d6:	4770      	bx	lr

080115d8 <put_memory>:
 80115d8:	680b      	ldr	r3, [r1, #0]
 80115da:	b10b      	cbz	r3, 80115e0 <put_memory+0x8>
 80115dc:	684a      	ldr	r2, [r1, #4]
 80115de:	605a      	str	r2, [r3, #4]
 80115e0:	684a      	ldr	r2, [r1, #4]
 80115e2:	b102      	cbz	r2, 80115e6 <put_memory+0xe>
 80115e4:	6013      	str	r3, [r2, #0]
 80115e6:	6803      	ldr	r3, [r0, #0]
 80115e8:	428b      	cmp	r3, r1
 80115ea:	6843      	ldr	r3, [r0, #4]
 80115ec:	bf08      	it	eq
 80115ee:	6002      	streq	r2, [r0, #0]
 80115f0:	604b      	str	r3, [r1, #4]
 80115f2:	b103      	cbz	r3, 80115f6 <put_memory+0x1e>
 80115f4:	6019      	str	r1, [r3, #0]
 80115f6:	2300      	movs	r3, #0
 80115f8:	600b      	str	r3, [r1, #0]
 80115fa:	6041      	str	r1, [r0, #4]
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop

08011600 <rmw_destroy_client>:
 8011600:	b570      	push	{r4, r5, r6, lr}
 8011602:	b128      	cbz	r0, 8011610 <rmw_destroy_client+0x10>
 8011604:	4604      	mov	r4, r0
 8011606:	6800      	ldr	r0, [r0, #0]
 8011608:	460d      	mov	r5, r1
 801160a:	f7f9 fc9f 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 801160e:	b910      	cbnz	r0, 8011616 <rmw_destroy_client+0x16>
 8011610:	2401      	movs	r4, #1
 8011612:	4620      	mov	r0, r4
 8011614:	bd70      	pop	{r4, r5, r6, pc}
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d0f9      	beq.n	8011610 <rmw_destroy_client+0x10>
 801161c:	2d00      	cmp	r5, #0
 801161e:	d0f7      	beq.n	8011610 <rmw_destroy_client+0x10>
 8011620:	6828      	ldr	r0, [r5, #0]
 8011622:	f7f9 fc93 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 8011626:	2800      	cmp	r0, #0
 8011628:	d0f2      	beq.n	8011610 <rmw_destroy_client+0x10>
 801162a:	686e      	ldr	r6, [r5, #4]
 801162c:	2e00      	cmp	r6, #0
 801162e:	d0ef      	beq.n	8011610 <rmw_destroy_client+0x10>
 8011630:	6864      	ldr	r4, [r4, #4]
 8011632:	6932      	ldr	r2, [r6, #16]
 8011634:	6920      	ldr	r0, [r4, #16]
 8011636:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801163a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801163e:	6819      	ldr	r1, [r3, #0]
 8011640:	f003 f858 	bl	80146f4 <uxr_buffer_cancel_data>
 8011644:	4602      	mov	r2, r0
 8011646:	6920      	ldr	r0, [r4, #16]
 8011648:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801164c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011650:	f7f9 fbfc 	bl	800ae4c <run_xrce_session>
 8011654:	6920      	ldr	r0, [r4, #16]
 8011656:	6932      	ldr	r2, [r6, #16]
 8011658:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801165c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011660:	6819      	ldr	r1, [r3, #0]
 8011662:	f7f9 fe39 	bl	800b2d8 <uxr_buffer_delete_entity>
 8011666:	4602      	mov	r2, r0
 8011668:	6920      	ldr	r0, [r4, #16]
 801166a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801166e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011672:	f7f9 fbeb 	bl	800ae4c <run_xrce_session>
 8011676:	2800      	cmp	r0, #0
 8011678:	4628      	mov	r0, r5
 801167a:	bf14      	ite	ne
 801167c:	2400      	movne	r4, #0
 801167e:	2402      	moveq	r4, #2
 8011680:	f7f9 facc 	bl	800ac1c <rmw_uxrce_fini_client_memory>
 8011684:	e7c5      	b.n	8011612 <rmw_destroy_client+0x12>
 8011686:	bf00      	nop

08011688 <rmw_get_implementation_identifier>:
 8011688:	4b01      	ldr	r3, [pc, #4]	@ (8011690 <rmw_get_implementation_identifier+0x8>)
 801168a:	6818      	ldr	r0, [r3, #0]
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	08019a04 	.word	0x08019a04

08011694 <rmw_init_options_init>:
 8011694:	b084      	sub	sp, #16
 8011696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011698:	b083      	sub	sp, #12
 801169a:	ad09      	add	r5, sp, #36	@ 0x24
 801169c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80116a0:	b130      	cbz	r0, 80116b0 <rmw_init_options_init+0x1c>
 80116a2:	4604      	mov	r4, r0
 80116a4:	4628      	mov	r0, r5
 80116a6:	f7f8 feab 	bl	800a400 <rcutils_allocator_is_valid>
 80116aa:	b108      	cbz	r0, 80116b0 <rmw_init_options_init+0x1c>
 80116ac:	68a6      	ldr	r6, [r4, #8]
 80116ae:	b12e      	cbz	r6, 80116bc <rmw_init_options_init+0x28>
 80116b0:	200b      	movs	r0, #11
 80116b2:	b003      	add	sp, #12
 80116b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80116b8:	b004      	add	sp, #16
 80116ba:	4770      	bx	lr
 80116bc:	2200      	movs	r2, #0
 80116be:	2300      	movs	r3, #0
 80116c0:	e9c4 2300 	strd	r2, r3, [r4]
 80116c4:	4b22      	ldr	r3, [pc, #136]	@ (8011750 <rmw_init_options_init+0xbc>)
 80116c6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 8011760 <rmw_init_options_init+0xcc>
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	60a3      	str	r3, [r4, #8]
 80116ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80116d0:	f104 0c20 	add.w	ip, r4, #32
 80116d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80116d8:	466f      	mov	r7, sp
 80116da:	682b      	ldr	r3, [r5, #0]
 80116dc:	f8cc 3000 	str.w	r3, [ip]
 80116e0:	4638      	mov	r0, r7
 80116e2:	f8c4 e01c 	str.w	lr, [r4, #28]
 80116e6:	60e6      	str	r6, [r4, #12]
 80116e8:	f7ff fd76 	bl	80111d8 <rmw_get_default_security_options>
 80116ec:	e897 0003 	ldmia.w	r7, {r0, r1}
 80116f0:	f104 0310 	add.w	r3, r4, #16
 80116f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80116f8:	2203      	movs	r2, #3
 80116fa:	4816      	ldr	r0, [pc, #88]	@ (8011754 <rmw_init_options_init+0xc0>)
 80116fc:	4916      	ldr	r1, [pc, #88]	@ (8011758 <rmw_init_options_init+0xc4>)
 80116fe:	7626      	strb	r6, [r4, #24]
 8011700:	f7f9 f9cc 	bl	800aa9c <rmw_uxrce_init_init_options_impl_memory>
 8011704:	4813      	ldr	r0, [pc, #76]	@ (8011754 <rmw_init_options_init+0xc0>)
 8011706:	f7ff ff57 	bl	80115b8 <get_memory>
 801170a:	b1f0      	cbz	r0, 801174a <rmw_init_options_init+0xb6>
 801170c:	4a13      	ldr	r2, [pc, #76]	@ (801175c <rmw_init_options_init+0xc8>)
 801170e:	6883      	ldr	r3, [r0, #8]
 8011710:	6851      	ldr	r1, [r2, #4]
 8011712:	7810      	ldrb	r0, [r2, #0]
 8011714:	6363      	str	r3, [r4, #52]	@ 0x34
 8011716:	7418      	strb	r0, [r3, #16]
 8011718:	6159      	str	r1, [r3, #20]
 801171a:	68d1      	ldr	r1, [r2, #12]
 801171c:	61d9      	str	r1, [r3, #28]
 801171e:	6911      	ldr	r1, [r2, #16]
 8011720:	6219      	str	r1, [r3, #32]
 8011722:	6951      	ldr	r1, [r2, #20]
 8011724:	6892      	ldr	r2, [r2, #8]
 8011726:	619a      	str	r2, [r3, #24]
 8011728:	6259      	str	r1, [r3, #36]	@ 0x24
 801172a:	f7fb fa31 	bl	800cb90 <uxr_nanos>
 801172e:	f004 fb89 	bl	8015e44 <srand>
 8011732:	f004 fbb5 	bl	8015ea0 <rand>
 8011736:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011738:	6298      	str	r0, [r3, #40]	@ 0x28
 801173a:	2800      	cmp	r0, #0
 801173c:	d0f9      	beq.n	8011732 <rmw_init_options_init+0x9e>
 801173e:	2000      	movs	r0, #0
 8011740:	b003      	add	sp, #12
 8011742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011746:	b004      	add	sp, #16
 8011748:	4770      	bx	lr
 801174a:	2001      	movs	r0, #1
 801174c:	e7b1      	b.n	80116b2 <rmw_init_options_init+0x1e>
 801174e:	bf00      	nop
 8011750:	08019a04 	.word	0x08019a04
 8011754:	20010b54 	.word	0x20010b54
 8011758:	2000c3f0 	.word	0x2000c3f0
 801175c:	2000c27c 	.word	0x2000c27c
 8011760:	0801946c 	.word	0x0801946c

08011764 <rmw_init_options_copy>:
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	b158      	cbz	r0, 8011780 <rmw_init_options_copy+0x1c>
 8011768:	460d      	mov	r5, r1
 801176a:	b149      	cbz	r1, 8011780 <rmw_init_options_copy+0x1c>
 801176c:	4604      	mov	r4, r0
 801176e:	6880      	ldr	r0, [r0, #8]
 8011770:	b120      	cbz	r0, 801177c <rmw_init_options_copy+0x18>
 8011772:	4b1e      	ldr	r3, [pc, #120]	@ (80117ec <rmw_init_options_copy+0x88>)
 8011774:	6819      	ldr	r1, [r3, #0]
 8011776:	f7ee fd4b 	bl	8000210 <strcmp>
 801177a:	bb90      	cbnz	r0, 80117e2 <rmw_init_options_copy+0x7e>
 801177c:	68ab      	ldr	r3, [r5, #8]
 801177e:	b113      	cbz	r3, 8011786 <rmw_init_options_copy+0x22>
 8011780:	250b      	movs	r5, #11
 8011782:	4628      	mov	r0, r5
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	4623      	mov	r3, r4
 8011788:	462a      	mov	r2, r5
 801178a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801178e:	f8d3 c000 	ldr.w	ip, [r3]
 8011792:	6858      	ldr	r0, [r3, #4]
 8011794:	6899      	ldr	r1, [r3, #8]
 8011796:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801179a:	f8c2 e00c 	str.w	lr, [r2, #12]
 801179e:	3310      	adds	r3, #16
 80117a0:	42b3      	cmp	r3, r6
 80117a2:	f8c2 c000 	str.w	ip, [r2]
 80117a6:	6050      	str	r0, [r2, #4]
 80117a8:	6091      	str	r1, [r2, #8]
 80117aa:	f102 0210 	add.w	r2, r2, #16
 80117ae:	d1ee      	bne.n	801178e <rmw_init_options_copy+0x2a>
 80117b0:	6819      	ldr	r1, [r3, #0]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	480e      	ldr	r0, [pc, #56]	@ (80117f0 <rmw_init_options_copy+0x8c>)
 80117b6:	6053      	str	r3, [r2, #4]
 80117b8:	6011      	str	r1, [r2, #0]
 80117ba:	f7ff fefd 	bl	80115b8 <get_memory>
 80117be:	b198      	cbz	r0, 80117e8 <rmw_init_options_copy+0x84>
 80117c0:	6883      	ldr	r3, [r0, #8]
 80117c2:	636b      	str	r3, [r5, #52]	@ 0x34
 80117c4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80117c6:	f102 0c10 	add.w	ip, r2, #16
 80117ca:	f103 0410 	add.w	r4, r3, #16
 80117ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117d4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80117d8:	2500      	movs	r5, #0
 80117da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80117de:	4628      	mov	r0, r5
 80117e0:	bd70      	pop	{r4, r5, r6, pc}
 80117e2:	250c      	movs	r5, #12
 80117e4:	4628      	mov	r0, r5
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	2501      	movs	r5, #1
 80117ea:	e7ca      	b.n	8011782 <rmw_init_options_copy+0x1e>
 80117ec:	08019a04 	.word	0x08019a04
 80117f0:	20010b54 	.word	0x20010b54

080117f4 <rmw_init_options_fini>:
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d03d      	beq.n	8011874 <rmw_init_options_fini+0x80>
 80117f8:	b510      	push	{r4, lr}
 80117fa:	4604      	mov	r4, r0
 80117fc:	b08e      	sub	sp, #56	@ 0x38
 80117fe:	3020      	adds	r0, #32
 8011800:	f7f8 fdfe 	bl	800a400 <rcutils_allocator_is_valid>
 8011804:	b360      	cbz	r0, 8011860 <rmw_init_options_fini+0x6c>
 8011806:	68a0      	ldr	r0, [r4, #8]
 8011808:	b120      	cbz	r0, 8011814 <rmw_init_options_fini+0x20>
 801180a:	4b1c      	ldr	r3, [pc, #112]	@ (801187c <rmw_init_options_fini+0x88>)
 801180c:	6819      	ldr	r1, [r3, #0]
 801180e:	f7ee fcff 	bl	8000210 <strcmp>
 8011812:	bb68      	cbnz	r0, 8011870 <rmw_init_options_fini+0x7c>
 8011814:	4b1a      	ldr	r3, [pc, #104]	@ (8011880 <rmw_init_options_fini+0x8c>)
 8011816:	6819      	ldr	r1, [r3, #0]
 8011818:	b331      	cbz	r1, 8011868 <rmw_init_options_fini+0x74>
 801181a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801181c:	e001      	b.n	8011822 <rmw_init_options_fini+0x2e>
 801181e:	6849      	ldr	r1, [r1, #4]
 8011820:	b311      	cbz	r1, 8011868 <rmw_init_options_fini+0x74>
 8011822:	688b      	ldr	r3, [r1, #8]
 8011824:	429a      	cmp	r2, r3
 8011826:	d1fa      	bne.n	801181e <rmw_init_options_fini+0x2a>
 8011828:	4815      	ldr	r0, [pc, #84]	@ (8011880 <rmw_init_options_fini+0x8c>)
 801182a:	f7ff fed5 	bl	80115d8 <put_memory>
 801182e:	4668      	mov	r0, sp
 8011830:	f7ff fcc2 	bl	80111b8 <rmw_get_zero_initialized_init_options>
 8011834:	46ee      	mov	lr, sp
 8011836:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801183a:	46a4      	mov	ip, r4
 801183c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011848:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801184c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011850:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011854:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011858:	2300      	movs	r3, #0
 801185a:	4618      	mov	r0, r3
 801185c:	b00e      	add	sp, #56	@ 0x38
 801185e:	bd10      	pop	{r4, pc}
 8011860:	230b      	movs	r3, #11
 8011862:	4618      	mov	r0, r3
 8011864:	b00e      	add	sp, #56	@ 0x38
 8011866:	bd10      	pop	{r4, pc}
 8011868:	2301      	movs	r3, #1
 801186a:	4618      	mov	r0, r3
 801186c:	b00e      	add	sp, #56	@ 0x38
 801186e:	bd10      	pop	{r4, pc}
 8011870:	230c      	movs	r3, #12
 8011872:	e7f2      	b.n	801185a <rmw_init_options_fini+0x66>
 8011874:	230b      	movs	r3, #11
 8011876:	4618      	mov	r0, r3
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	08019a04 	.word	0x08019a04
 8011880:	20010b54 	.word	0x20010b54

08011884 <rmw_init>:
 8011884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011888:	b083      	sub	sp, #12
 801188a:	2800      	cmp	r0, #0
 801188c:	f000 80d3 	beq.w	8011a36 <rmw_init+0x1b2>
 8011890:	460e      	mov	r6, r1
 8011892:	2900      	cmp	r1, #0
 8011894:	f000 80cf 	beq.w	8011a36 <rmw_init+0x1b2>
 8011898:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801189a:	4605      	mov	r5, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 80ca 	beq.w	8011a36 <rmw_init+0x1b2>
 80118a2:	4b78      	ldr	r3, [pc, #480]	@ (8011a84 <rmw_init+0x200>)
 80118a4:	6880      	ldr	r0, [r0, #8]
 80118a6:	681f      	ldr	r7, [r3, #0]
 80118a8:	b128      	cbz	r0, 80118b6 <rmw_init+0x32>
 80118aa:	4639      	mov	r1, r7
 80118ac:	f7ee fcb0 	bl	8000210 <strcmp>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	f040 80ca 	bne.w	8011a4a <rmw_init+0x1c6>
 80118b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118ba:	4c73      	ldr	r4, [pc, #460]	@ (8011a88 <rmw_init+0x204>)
 80118bc:	4973      	ldr	r1, [pc, #460]	@ (8011a8c <rmw_init+0x208>)
 80118be:	4874      	ldr	r0, [pc, #464]	@ (8011a90 <rmw_init+0x20c>)
 80118c0:	60b7      	str	r7, [r6, #8]
 80118c2:	e9c6 2300 	strd	r2, r3, [r6]
 80118c6:	68eb      	ldr	r3, [r5, #12]
 80118c8:	64b3      	str	r3, [r6, #72]	@ 0x48
 80118ca:	2201      	movs	r2, #1
 80118cc:	f7f9 f886 	bl	800a9dc <rmw_uxrce_init_session_memory>
 80118d0:	4620      	mov	r0, r4
 80118d2:	4970      	ldr	r1, [pc, #448]	@ (8011a94 <rmw_init+0x210>)
 80118d4:	2204      	movs	r2, #4
 80118d6:	f7f9 f8c1 	bl	800aa5c <rmw_uxrce_init_static_input_buffer_memory>
 80118da:	f04f 0800 	mov.w	r8, #0
 80118de:	486c      	ldr	r0, [pc, #432]	@ (8011a90 <rmw_init+0x20c>)
 80118e0:	f884 800d 	strb.w	r8, [r4, #13]
 80118e4:	f7ff fe68 	bl	80115b8 <get_memory>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	f000 80a9 	beq.w	8011a40 <rmw_init+0x1bc>
 80118ee:	6884      	ldr	r4, [r0, #8]
 80118f0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80118f2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80118f4:	f890 c010 	ldrb.w	ip, [r0, #16]
 80118f8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80118fc:	9101      	str	r1, [sp, #4]
 80118fe:	6a00      	ldr	r0, [r0, #32]
 8011900:	9000      	str	r0, [sp, #0]
 8011902:	f104 0910 	add.w	r9, r4, #16
 8011906:	4661      	mov	r1, ip
 8011908:	4648      	mov	r0, r9
 801190a:	f002 f92b 	bl	8013b64 <uxr_set_custom_transport_callbacks>
 801190e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8011912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011916:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801191a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801191e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011922:	495d      	ldr	r1, [pc, #372]	@ (8011a98 <rmw_init+0x214>)
 8011924:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8011928:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801192c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8011930:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8011934:	4859      	ldr	r0, [pc, #356]	@ (8011a9c <rmw_init+0x218>)
 8011936:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801193a:	2201      	movs	r2, #1
 801193c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801193e:	f7f9 f82d 	bl	800a99c <rmw_uxrce_init_node_memory>
 8011942:	4957      	ldr	r1, [pc, #348]	@ (8011aa0 <rmw_init+0x21c>)
 8011944:	4857      	ldr	r0, [pc, #348]	@ (8011aa4 <rmw_init+0x220>)
 8011946:	2205      	movs	r2, #5
 8011948:	f7f9 f808 	bl	800a95c <rmw_uxrce_init_subscription_memory>
 801194c:	4956      	ldr	r1, [pc, #344]	@ (8011aa8 <rmw_init+0x224>)
 801194e:	4857      	ldr	r0, [pc, #348]	@ (8011aac <rmw_init+0x228>)
 8011950:	220a      	movs	r2, #10
 8011952:	f7f8 ffe3 	bl	800a91c <rmw_uxrce_init_publisher_memory>
 8011956:	4956      	ldr	r1, [pc, #344]	@ (8011ab0 <rmw_init+0x22c>)
 8011958:	4856      	ldr	r0, [pc, #344]	@ (8011ab4 <rmw_init+0x230>)
 801195a:	2201      	movs	r2, #1
 801195c:	f7f8 ff9e 	bl	800a89c <rmw_uxrce_init_service_memory>
 8011960:	4955      	ldr	r1, [pc, #340]	@ (8011ab8 <rmw_init+0x234>)
 8011962:	4856      	ldr	r0, [pc, #344]	@ (8011abc <rmw_init+0x238>)
 8011964:	2201      	movs	r2, #1
 8011966:	f7f8 ffb9 	bl	800a8dc <rmw_uxrce_init_client_memory>
 801196a:	4955      	ldr	r1, [pc, #340]	@ (8011ac0 <rmw_init+0x23c>)
 801196c:	4855      	ldr	r0, [pc, #340]	@ (8011ac4 <rmw_init+0x240>)
 801196e:	220f      	movs	r2, #15
 8011970:	f7f9 f854 	bl	800aa1c <rmw_uxrce_init_topic_memory>
 8011974:	4954      	ldr	r1, [pc, #336]	@ (8011ac8 <rmw_init+0x244>)
 8011976:	4855      	ldr	r0, [pc, #340]	@ (8011acc <rmw_init+0x248>)
 8011978:	2203      	movs	r2, #3
 801197a:	f7f9 f88f 	bl	800aa9c <rmw_uxrce_init_init_options_impl_memory>
 801197e:	4954      	ldr	r1, [pc, #336]	@ (8011ad0 <rmw_init+0x24c>)
 8011980:	4854      	ldr	r0, [pc, #336]	@ (8011ad4 <rmw_init+0x250>)
 8011982:	2204      	movs	r2, #4
 8011984:	f7f9 f8aa 	bl	800aadc <rmw_uxrce_init_wait_set_memory>
 8011988:	4953      	ldr	r1, [pc, #332]	@ (8011ad8 <rmw_init+0x254>)
 801198a:	4854      	ldr	r0, [pc, #336]	@ (8011adc <rmw_init+0x258>)
 801198c:	2204      	movs	r2, #4
 801198e:	f7f9 f8c5 	bl	800ab1c <rmw_uxrce_init_guard_condition_memory>
 8011992:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8011994:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8011996:	4642      	mov	r2, r8
 8011998:	f000 fd9e 	bl	80124d8 <rmw_uxrce_transport_init>
 801199c:	4607      	mov	r7, r0
 801199e:	2800      	cmp	r0, #0
 80119a0:	d158      	bne.n	8011a54 <rmw_init+0x1d0>
 80119a2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80119a4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80119a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119aa:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80119ae:	4628      	mov	r0, r5
 80119b0:	f7f9 ff52 	bl	800b858 <uxr_init_session>
 80119b4:	494a      	ldr	r1, [pc, #296]	@ (8011ae0 <rmw_init+0x25c>)
 80119b6:	4622      	mov	r2, r4
 80119b8:	4628      	mov	r0, r5
 80119ba:	f7f9 ff71 	bl	800b8a0 <uxr_set_topic_callback>
 80119be:	4949      	ldr	r1, [pc, #292]	@ (8011ae4 <rmw_init+0x260>)
 80119c0:	463a      	mov	r2, r7
 80119c2:	4628      	mov	r0, r5
 80119c4:	f7f9 ff68 	bl	800b898 <uxr_set_status_callback>
 80119c8:	4947      	ldr	r1, [pc, #284]	@ (8011ae8 <rmw_init+0x264>)
 80119ca:	463a      	mov	r2, r7
 80119cc:	4628      	mov	r0, r5
 80119ce:	f7f9 ff6b 	bl	800b8a8 <uxr_set_request_callback>
 80119d2:	4946      	ldr	r1, [pc, #280]	@ (8011aec <rmw_init+0x268>)
 80119d4:	463a      	mov	r2, r7
 80119d6:	4628      	mov	r0, r5
 80119d8:	f7f9 ff6a 	bl	800b8b0 <uxr_set_reply_callback>
 80119dc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80119e0:	2304      	movs	r3, #4
 80119e2:	0092      	lsls	r2, r2, #2
 80119e4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80119e8:	4628      	mov	r0, r5
 80119ea:	f7f9 ff9f 	bl	800b92c <uxr_create_input_reliable_stream>
 80119ee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80119f2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80119f6:	0092      	lsls	r2, r2, #2
 80119f8:	2304      	movs	r3, #4
 80119fa:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80119fe:	4628      	mov	r0, r5
 8011a00:	f7f9 ff6c 	bl	800b8dc <uxr_create_output_reliable_stream>
 8011a04:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f7f9 ff89 	bl	800b920 <uxr_create_input_best_effort_stream>
 8011a0e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011a12:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8011a16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011a1a:	3114      	adds	r1, #20
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	f7f9 ff4b 	bl	800b8b8 <uxr_create_output_best_effort_stream>
 8011a22:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8011a26:	4628      	mov	r0, r5
 8011a28:	f7fa fcd6 	bl	800c3d8 <uxr_create_session>
 8011a2c:	b1f8      	cbz	r0, 8011a6e <rmw_init+0x1ea>
 8011a2e:	4638      	mov	r0, r7
 8011a30:	b003      	add	sp, #12
 8011a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a36:	270b      	movs	r7, #11
 8011a38:	4638      	mov	r0, r7
 8011a3a:	b003      	add	sp, #12
 8011a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a40:	2701      	movs	r7, #1
 8011a42:	4638      	mov	r0, r7
 8011a44:	b003      	add	sp, #12
 8011a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a4a:	270c      	movs	r7, #12
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	b003      	add	sp, #12
 8011a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a54:	4648      	mov	r0, r9
 8011a56:	f002 f8c7 	bl	8013be8 <uxr_close_custom_transport>
 8011a5a:	480d      	ldr	r0, [pc, #52]	@ (8011a90 <rmw_init+0x20c>)
 8011a5c:	4621      	mov	r1, r4
 8011a5e:	f7ff fdbb 	bl	80115d8 <put_memory>
 8011a62:	4638      	mov	r0, r7
 8011a64:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8011a68:	b003      	add	sp, #12
 8011a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a6e:	4648      	mov	r0, r9
 8011a70:	f002 f8ba 	bl	8013be8 <uxr_close_custom_transport>
 8011a74:	4806      	ldr	r0, [pc, #24]	@ (8011a90 <rmw_init+0x20c>)
 8011a76:	4621      	mov	r1, r4
 8011a78:	f7ff fdae 	bl	80115d8 <put_memory>
 8011a7c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8011a7e:	2701      	movs	r7, #1
 8011a80:	e7d5      	b.n	8011a2e <rmw_init+0x1aa>
 8011a82:	bf00      	nop
 8011a84:	08019a04 	.word	0x08019a04
 8011a88:	20010ba4 	.word	0x20010ba4
 8011a8c:	2000ce50 	.word	0x2000ce50
 8011a90:	20010b94 	.word	0x20010b94
 8011a94:	2000e3f8 	.word	0x2000e3f8
 8011a98:	2000c474 	.word	0x2000c474
 8011a9c:	20010b64 	.word	0x20010b64
 8011aa0:	200104f8 	.word	0x200104f8
 8011aa4:	20010bb4 	.word	0x20010bb4
 8011aa8:	2000c518 	.word	0x2000c518
 8011aac:	20010b74 	.word	0x20010b74
 8011ab0:	2000cd88 	.word	0x2000cd88
 8011ab4:	20010b84 	.word	0x20010b84
 8011ab8:	2000c2a8 	.word	0x2000c2a8
 8011abc:	2000c298 	.word	0x2000c298
 8011ac0:	20010930 	.word	0x20010930
 8011ac4:	20010bc4 	.word	0x20010bc4
 8011ac8:	2000c3f0 	.word	0x2000c3f0
 8011acc:	20010b54 	.word	0x20010b54
 8011ad0:	20010ad4 	.word	0x20010ad4
 8011ad4:	20010bd4 	.word	0x20010bd4
 8011ad8:	2000c370 	.word	0x2000c370
 8011adc:	20010b44 	.word	0x20010b44
 8011ae0:	080158d5 	.word	0x080158d5
 8011ae4:	080158cd 	.word	0x080158cd
 8011ae8:	0801596d 	.word	0x0801596d
 8011aec:	08015a09 	.word	0x08015a09

08011af0 <rmw_context_fini>:
 8011af0:	4b17      	ldr	r3, [pc, #92]	@ (8011b50 <rmw_context_fini+0x60>)
 8011af2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	681c      	ldr	r4, [r3, #0]
 8011af8:	4605      	mov	r5, r0
 8011afa:	b334      	cbz	r4, 8011b4a <rmw_context_fini+0x5a>
 8011afc:	2600      	movs	r6, #0
 8011afe:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011b02:	6902      	ldr	r2, [r0, #16]
 8011b04:	428a      	cmp	r2, r1
 8011b06:	d018      	beq.n	8011b3a <rmw_context_fini+0x4a>
 8011b08:	2c00      	cmp	r4, #0
 8011b0a:	d1f8      	bne.n	8011afe <rmw_context_fini+0xe>
 8011b0c:	b189      	cbz	r1, 8011b32 <rmw_context_fini+0x42>
 8011b0e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8011b12:	789b      	ldrb	r3, [r3, #2]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011b1a:	bf14      	ite	ne
 8011b1c:	210a      	movne	r1, #10
 8011b1e:	2100      	moveq	r1, #0
 8011b20:	f7fa fc32 	bl	800c388 <uxr_delete_session_retries>
 8011b24:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011b26:	f7f9 f819 	bl	800ab5c <rmw_uxrce_fini_session_memory>
 8011b2a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011b2c:	3010      	adds	r0, #16
 8011b2e:	f002 f85b 	bl	8013be8 <uxr_close_custom_transport>
 8011b32:	2300      	movs	r3, #0
 8011b34:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011b36:	4630      	mov	r0, r6
 8011b38:	bd70      	pop	{r4, r5, r6, pc}
 8011b3a:	3018      	adds	r0, #24
 8011b3c:	f000 f90e 	bl	8011d5c <rmw_destroy_node>
 8011b40:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011b42:	4606      	mov	r6, r0
 8011b44:	2c00      	cmp	r4, #0
 8011b46:	d1da      	bne.n	8011afe <rmw_context_fini+0xe>
 8011b48:	e7e0      	b.n	8011b0c <rmw_context_fini+0x1c>
 8011b4a:	4626      	mov	r6, r4
 8011b4c:	e7de      	b.n	8011b0c <rmw_context_fini+0x1c>
 8011b4e:	bf00      	nop
 8011b50:	20010b64 	.word	0x20010b64

08011b54 <create_topic>:
 8011b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b58:	4605      	mov	r5, r0
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	4822      	ldr	r0, [pc, #136]	@ (8011be8 <create_topic+0x94>)
 8011b5e:	460f      	mov	r7, r1
 8011b60:	4616      	mov	r6, r2
 8011b62:	f7ff fd29 	bl	80115b8 <get_memory>
 8011b66:	4604      	mov	r4, r0
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d039      	beq.n	8011be0 <create_topic+0x8c>
 8011b6c:	692b      	ldr	r3, [r5, #16]
 8011b6e:	6884      	ldr	r4, [r0, #8]
 8011b70:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8011bf0 <create_topic+0x9c>
 8011b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011b78:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011b7c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8011b80:	1c42      	adds	r2, r0, #1
 8011b82:	2102      	movs	r1, #2
 8011b84:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8011b88:	f7f9 fda8 	bl	800b6dc <uxr_object_id>
 8011b8c:	223c      	movs	r2, #60	@ 0x3c
 8011b8e:	6120      	str	r0, [r4, #16]
 8011b90:	4641      	mov	r1, r8
 8011b92:	4638      	mov	r0, r7
 8011b94:	f7f9 f9c0 	bl	800af18 <generate_topic_name>
 8011b98:	b1f0      	cbz	r0, 8011bd8 <create_topic+0x84>
 8011b9a:	4f14      	ldr	r7, [pc, #80]	@ (8011bec <create_topic+0x98>)
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	2264      	movs	r2, #100	@ 0x64
 8011ba0:	4639      	mov	r1, r7
 8011ba2:	f7f9 f989 	bl	800aeb8 <generate_type_name>
 8011ba6:	b1b8      	cbz	r0, 8011bd8 <create_topic+0x84>
 8011ba8:	6928      	ldr	r0, [r5, #16]
 8011baa:	2306      	movs	r3, #6
 8011bac:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011bb0:	f8cd 8000 	str.w	r8, [sp]
 8011bb4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011bb8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011bbc:	6811      	ldr	r1, [r2, #0]
 8011bbe:	696b      	ldr	r3, [r5, #20]
 8011bc0:	6922      	ldr	r2, [r4, #16]
 8011bc2:	f7f9 fc07 	bl	800b3d4 <uxr_buffer_create_topic_bin>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	6928      	ldr	r0, [r5, #16]
 8011bca:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011bce:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011bd2:	f7f9 f93b 	bl	800ae4c <run_xrce_session>
 8011bd6:	b918      	cbnz	r0, 8011be0 <create_topic+0x8c>
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f7f9 f835 	bl	800ac48 <rmw_uxrce_fini_topic_memory>
 8011bde:	2400      	movs	r4, #0
 8011be0:	4620      	mov	r0, r4
 8011be2:	b004      	add	sp, #16
 8011be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be8:	20010bc4 	.word	0x20010bc4
 8011bec:	20010cb0 	.word	0x20010cb0
 8011bf0:	20010c74 	.word	0x20010c74

08011bf4 <destroy_topic>:
 8011bf4:	b538      	push	{r3, r4, r5, lr}
 8011bf6:	6985      	ldr	r5, [r0, #24]
 8011bf8:	b1d5      	cbz	r5, 8011c30 <destroy_topic+0x3c>
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	6928      	ldr	r0, [r5, #16]
 8011bfe:	6922      	ldr	r2, [r4, #16]
 8011c00:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011c04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	f7f9 fb65 	bl	800b2d8 <uxr_buffer_delete_entity>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	6928      	ldr	r0, [r5, #16]
 8011c12:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011c16:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011c1a:	f7f9 f917 	bl	800ae4c <run_xrce_session>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	4620      	mov	r0, r4
 8011c22:	bf14      	ite	ne
 8011c24:	2400      	movne	r4, #0
 8011c26:	2402      	moveq	r4, #2
 8011c28:	f7f9 f80e 	bl	800ac48 <rmw_uxrce_fini_topic_memory>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}
 8011c30:	2401      	movs	r4, #1
 8011c32:	4620      	mov	r0, r4
 8011c34:	bd38      	pop	{r3, r4, r5, pc}
 8011c36:	bf00      	nop

08011c38 <create_node>:
 8011c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c3c:	b083      	sub	sp, #12
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d05f      	beq.n	8011d02 <create_node+0xca>
 8011c42:	4606      	mov	r6, r0
 8011c44:	4835      	ldr	r0, [pc, #212]	@ (8011d1c <create_node+0xe4>)
 8011c46:	460f      	mov	r7, r1
 8011c48:	4690      	mov	r8, r2
 8011c4a:	461d      	mov	r5, r3
 8011c4c:	f7ff fcb4 	bl	80115b8 <get_memory>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d056      	beq.n	8011d02 <create_node+0xca>
 8011c54:	6884      	ldr	r4, [r0, #8]
 8011c56:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011c58:	6123      	str	r3, [r4, #16]
 8011c5a:	f7ff fd15 	bl	8011688 <rmw_get_implementation_identifier>
 8011c5e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011c62:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8011c66:	f8c4 9020 	str.w	r9, [r4, #32]
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7ee fb30 	bl	80002d0 <strlen>
 8011c70:	1c42      	adds	r2, r0, #1
 8011c72:	2a3c      	cmp	r2, #60	@ 0x3c
 8011c74:	f104 0518 	add.w	r5, r4, #24
 8011c78:	d840      	bhi.n	8011cfc <create_node+0xc4>
 8011c7a:	4648      	mov	r0, r9
 8011c7c:	4631      	mov	r1, r6
 8011c7e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011c82:	f005 fa72 	bl	801716a <memcpy>
 8011c86:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8011c8a:	4638      	mov	r0, r7
 8011c8c:	f7ee fb20 	bl	80002d0 <strlen>
 8011c90:	1c42      	adds	r2, r0, #1
 8011c92:	2a3c      	cmp	r2, #60	@ 0x3c
 8011c94:	d832      	bhi.n	8011cfc <create_node+0xc4>
 8011c96:	4639      	mov	r1, r7
 8011c98:	4648      	mov	r0, r9
 8011c9a:	f005 fa66 	bl	801716a <memcpy>
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011ca4:	2101      	movs	r1, #1
 8011ca6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8011caa:	1842      	adds	r2, r0, r1
 8011cac:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011cb0:	f7f9 fd14 	bl	800b6dc <uxr_object_id>
 8011cb4:	6160      	str	r0, [r4, #20]
 8011cb6:	783b      	ldrb	r3, [r7, #0]
 8011cb8:	2b2f      	cmp	r3, #47	@ 0x2f
 8011cba:	d127      	bne.n	8011d0c <create_node+0xd4>
 8011cbc:	787b      	ldrb	r3, [r7, #1]
 8011cbe:	bb2b      	cbnz	r3, 8011d0c <create_node+0xd4>
 8011cc0:	4a17      	ldr	r2, [pc, #92]	@ (8011d20 <create_node+0xe8>)
 8011cc2:	4818      	ldr	r0, [pc, #96]	@ (8011d24 <create_node+0xec>)
 8011cc4:	4633      	mov	r3, r6
 8011cc6:	213c      	movs	r1, #60	@ 0x3c
 8011cc8:	f004 ff9e 	bl	8016c08 <sniprintf>
 8011ccc:	6920      	ldr	r0, [r4, #16]
 8011cce:	4915      	ldr	r1, [pc, #84]	@ (8011d24 <create_node+0xec>)
 8011cd0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8011cd4:	9100      	str	r1, [sp, #0]
 8011cd6:	2106      	movs	r1, #6
 8011cd8:	9101      	str	r1, [sp, #4]
 8011cda:	6811      	ldr	r1, [r2, #0]
 8011cdc:	6962      	ldr	r2, [r4, #20]
 8011cde:	fa1f f388 	uxth.w	r3, r8
 8011ce2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ce6:	f7f9 fb43 	bl	800b370 <uxr_buffer_create_participant_bin>
 8011cea:	4602      	mov	r2, r0
 8011cec:	6920      	ldr	r0, [r4, #16]
 8011cee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011cf2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011cf6:	f7f9 f8a9 	bl	800ae4c <run_xrce_session>
 8011cfa:	b918      	cbnz	r0, 8011d04 <create_node+0xcc>
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f7f8 ff33 	bl	800ab68 <rmw_uxrce_fini_node_memory>
 8011d02:	2500      	movs	r5, #0
 8011d04:	4628      	mov	r0, r5
 8011d06:	b003      	add	sp, #12
 8011d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d0c:	4a06      	ldr	r2, [pc, #24]	@ (8011d28 <create_node+0xf0>)
 8011d0e:	9600      	str	r6, [sp, #0]
 8011d10:	463b      	mov	r3, r7
 8011d12:	213c      	movs	r1, #60	@ 0x3c
 8011d14:	4803      	ldr	r0, [pc, #12]	@ (8011d24 <create_node+0xec>)
 8011d16:	f004 ff77 	bl	8016c08 <sniprintf>
 8011d1a:	e7d7      	b.n	8011ccc <create_node+0x94>
 8011d1c:	20010b64 	.word	0x20010b64
 8011d20:	080192e4 	.word	0x080192e4
 8011d24:	20010d14 	.word	0x20010d14
 8011d28:	08019474 	.word	0x08019474

08011d2c <rmw_create_node>:
 8011d2c:	b199      	cbz	r1, 8011d56 <rmw_create_node+0x2a>
 8011d2e:	780b      	ldrb	r3, [r1, #0]
 8011d30:	468c      	mov	ip, r1
 8011d32:	b183      	cbz	r3, 8011d56 <rmw_create_node+0x2a>
 8011d34:	b410      	push	{r4}
 8011d36:	4614      	mov	r4, r2
 8011d38:	b14a      	cbz	r2, 8011d4e <rmw_create_node+0x22>
 8011d3a:	7813      	ldrb	r3, [r2, #0]
 8011d3c:	b13b      	cbz	r3, 8011d4e <rmw_create_node+0x22>
 8011d3e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011d40:	4603      	mov	r3, r0
 8011d42:	4621      	mov	r1, r4
 8011d44:	4660      	mov	r0, ip
 8011d46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d4a:	f7ff bf75 	b.w	8011c38 <create_node>
 8011d4e:	2000      	movs	r0, #0
 8011d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d54:	4770      	bx	lr
 8011d56:	2000      	movs	r0, #0
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop

08011d5c <rmw_destroy_node>:
 8011d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5e:	b328      	cbz	r0, 8011dac <rmw_destroy_node+0x50>
 8011d60:	4607      	mov	r7, r0
 8011d62:	6800      	ldr	r0, [r0, #0]
 8011d64:	b120      	cbz	r0, 8011d70 <rmw_destroy_node+0x14>
 8011d66:	4b36      	ldr	r3, [pc, #216]	@ (8011e40 <rmw_destroy_node+0xe4>)
 8011d68:	6819      	ldr	r1, [r3, #0]
 8011d6a:	f7ee fa51 	bl	8000210 <strcmp>
 8011d6e:	b9e8      	cbnz	r0, 8011dac <rmw_destroy_node+0x50>
 8011d70:	687d      	ldr	r5, [r7, #4]
 8011d72:	b1dd      	cbz	r5, 8011dac <rmw_destroy_node+0x50>
 8011d74:	4b33      	ldr	r3, [pc, #204]	@ (8011e44 <rmw_destroy_node+0xe8>)
 8011d76:	681c      	ldr	r4, [r3, #0]
 8011d78:	2c00      	cmp	r4, #0
 8011d7a:	d05f      	beq.n	8011e3c <rmw_destroy_node+0xe0>
 8011d7c:	2600      	movs	r6, #0
 8011d7e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d82:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8011d86:	429d      	cmp	r5, r3
 8011d88:	d013      	beq.n	8011db2 <rmw_destroy_node+0x56>
 8011d8a:	2c00      	cmp	r4, #0
 8011d8c:	d1f7      	bne.n	8011d7e <rmw_destroy_node+0x22>
 8011d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8011e48 <rmw_destroy_node+0xec>)
 8011d90:	681c      	ldr	r4, [r3, #0]
 8011d92:	b1c4      	cbz	r4, 8011dc6 <rmw_destroy_node+0x6a>
 8011d94:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d98:	6a0b      	ldr	r3, [r1, #32]
 8011d9a:	429d      	cmp	r5, r3
 8011d9c:	d1f9      	bne.n	8011d92 <rmw_destroy_node+0x36>
 8011d9e:	317c      	adds	r1, #124	@ 0x7c
 8011da0:	4638      	mov	r0, r7
 8011da2:	f000 fae5 	bl	8012370 <rmw_destroy_subscription>
 8011da6:	2801      	cmp	r0, #1
 8011da8:	4606      	mov	r6, r0
 8011daa:	d1f2      	bne.n	8011d92 <rmw_destroy_node+0x36>
 8011dac:	2601      	movs	r6, #1
 8011dae:	4630      	mov	r0, r6
 8011db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011db2:	3184      	adds	r1, #132	@ 0x84
 8011db4:	4638      	mov	r0, r7
 8011db6:	f7f8 fd1f 	bl	800a7f8 <rmw_destroy_publisher>
 8011dba:	2801      	cmp	r0, #1
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	d0f5      	beq.n	8011dac <rmw_destroy_node+0x50>
 8011dc0:	2c00      	cmp	r4, #0
 8011dc2:	d1dc      	bne.n	8011d7e <rmw_destroy_node+0x22>
 8011dc4:	e7e3      	b.n	8011d8e <rmw_destroy_node+0x32>
 8011dc6:	4b21      	ldr	r3, [pc, #132]	@ (8011e4c <rmw_destroy_node+0xf0>)
 8011dc8:	681c      	ldr	r4, [r3, #0]
 8011dca:	b16c      	cbz	r4, 8011de8 <rmw_destroy_node+0x8c>
 8011dcc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011dd0:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011dd2:	429d      	cmp	r5, r3
 8011dd4:	d1f9      	bne.n	8011dca <rmw_destroy_node+0x6e>
 8011dd6:	317c      	adds	r1, #124	@ 0x7c
 8011dd8:	4638      	mov	r0, r7
 8011dda:	f000 f993 	bl	8012104 <rmw_destroy_service>
 8011dde:	2801      	cmp	r0, #1
 8011de0:	4606      	mov	r6, r0
 8011de2:	d0e3      	beq.n	8011dac <rmw_destroy_node+0x50>
 8011de4:	2c00      	cmp	r4, #0
 8011de6:	d1f1      	bne.n	8011dcc <rmw_destroy_node+0x70>
 8011de8:	4b19      	ldr	r3, [pc, #100]	@ (8011e50 <rmw_destroy_node+0xf4>)
 8011dea:	681c      	ldr	r4, [r3, #0]
 8011dec:	b16c      	cbz	r4, 8011e0a <rmw_destroy_node+0xae>
 8011dee:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011df2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8011df4:	429d      	cmp	r5, r3
 8011df6:	d1f9      	bne.n	8011dec <rmw_destroy_node+0x90>
 8011df8:	317c      	adds	r1, #124	@ 0x7c
 8011dfa:	4638      	mov	r0, r7
 8011dfc:	f7ff fc00 	bl	8011600 <rmw_destroy_client>
 8011e00:	2801      	cmp	r0, #1
 8011e02:	4606      	mov	r6, r0
 8011e04:	d0d2      	beq.n	8011dac <rmw_destroy_node+0x50>
 8011e06:	2c00      	cmp	r4, #0
 8011e08:	d1f1      	bne.n	8011dee <rmw_destroy_node+0x92>
 8011e0a:	6928      	ldr	r0, [r5, #16]
 8011e0c:	696a      	ldr	r2, [r5, #20]
 8011e0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011e12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011e16:	6819      	ldr	r1, [r3, #0]
 8011e18:	f7f9 fa5e 	bl	800b2d8 <uxr_buffer_delete_entity>
 8011e1c:	4602      	mov	r2, r0
 8011e1e:	6928      	ldr	r0, [r5, #16]
 8011e20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011e24:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011e28:	f7f9 f810 	bl	800ae4c <run_xrce_session>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	bf08      	it	eq
 8011e30:	2602      	moveq	r6, #2
 8011e32:	4638      	mov	r0, r7
 8011e34:	f7f8 fe98 	bl	800ab68 <rmw_uxrce_fini_node_memory>
 8011e38:	4630      	mov	r0, r6
 8011e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e3c:	4626      	mov	r6, r4
 8011e3e:	e7a6      	b.n	8011d8e <rmw_destroy_node+0x32>
 8011e40:	08019a04 	.word	0x08019a04
 8011e44:	20010b74 	.word	0x20010b74
 8011e48:	20010bb4 	.word	0x20010bb4
 8011e4c:	20010b84 	.word	0x20010b84
 8011e50:	2000c298 	.word	0x2000c298

08011e54 <rmw_node_get_graph_guard_condition>:
 8011e54:	6843      	ldr	r3, [r0, #4]
 8011e56:	6918      	ldr	r0, [r3, #16]
 8011e58:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop

08011e60 <rmw_send_request>:
 8011e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e64:	4604      	mov	r4, r0
 8011e66:	6800      	ldr	r0, [r0, #0]
 8011e68:	b08b      	sub	sp, #44	@ 0x2c
 8011e6a:	460e      	mov	r6, r1
 8011e6c:	4615      	mov	r5, r2
 8011e6e:	b128      	cbz	r0, 8011e7c <rmw_send_request+0x1c>
 8011e70:	4b21      	ldr	r3, [pc, #132]	@ (8011ef8 <rmw_send_request+0x98>)
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	f7ee f9cc 	bl	8000210 <strcmp>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d139      	bne.n	8011ef0 <rmw_send_request+0x90>
 8011e7c:	6864      	ldr	r4, [r4, #4]
 8011e7e:	6963      	ldr	r3, [r4, #20]
 8011e80:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	4798      	blx	r3
 8011e88:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e92:	4798      	blx	r3
 8011e94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011e98:	9000      	str	r0, [sp, #0]
 8011e9a:	6922      	ldr	r2, [r4, #16]
 8011e9c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8011e9e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011ea2:	ab02      	add	r3, sp, #8
 8011ea4:	f7fa ff14 	bl	800ccd0 <uxr_prepare_output_stream>
 8011ea8:	2700      	movs	r7, #0
 8011eaa:	6028      	str	r0, [r5, #0]
 8011eac:	606f      	str	r7, [r5, #4]
 8011eae:	b198      	cbz	r0, 8011ed8 <rmw_send_request+0x78>
 8011eb0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011eb4:	a902      	add	r1, sp, #8
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	4798      	blx	r3
 8011eba:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8011ebe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d00c      	beq.n	8011ee0 <rmw_send_request+0x80>
 8011ec6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011ec8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ecc:	f7fa f914 	bl	800c0f8 <uxr_run_session_until_confirm_delivery>
 8011ed0:	4638      	mov	r0, r7
 8011ed2:	b00b      	add	sp, #44	@ 0x2c
 8011ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ed8:	2001      	movs	r0, #1
 8011eda:	b00b      	add	sp, #44	@ 0x2c
 8011edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ee4:	f7f9 fd48 	bl	800b978 <uxr_flash_output_streams>
 8011ee8:	4638      	mov	r0, r7
 8011eea:	b00b      	add	sp, #44	@ 0x2c
 8011eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ef0:	200c      	movs	r0, #12
 8011ef2:	b00b      	add	sp, #44	@ 0x2c
 8011ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ef8:	08019a04 	.word	0x08019a04

08011efc <rmw_take_request>:
 8011efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f00:	4605      	mov	r5, r0
 8011f02:	6800      	ldr	r0, [r0, #0]
 8011f04:	b089      	sub	sp, #36	@ 0x24
 8011f06:	460c      	mov	r4, r1
 8011f08:	4690      	mov	r8, r2
 8011f0a:	461e      	mov	r6, r3
 8011f0c:	b128      	cbz	r0, 8011f1a <rmw_take_request+0x1e>
 8011f0e:	4b28      	ldr	r3, [pc, #160]	@ (8011fb0 <rmw_take_request+0xb4>)
 8011f10:	6819      	ldr	r1, [r3, #0]
 8011f12:	f7ee f97d 	bl	8000210 <strcmp>
 8011f16:	2800      	cmp	r0, #0
 8011f18:	d146      	bne.n	8011fa8 <rmw_take_request+0xac>
 8011f1a:	b10e      	cbz	r6, 8011f20 <rmw_take_request+0x24>
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	7033      	strb	r3, [r6, #0]
 8011f20:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011f24:	f7f8 ff14 	bl	800ad50 <rmw_uxrce_clean_expired_static_input_buffer>
 8011f28:	4648      	mov	r0, r9
 8011f2a:	f7f8 fee9 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011f2e:	4607      	mov	r7, r0
 8011f30:	b3b0      	cbz	r0, 8011fa0 <rmw_take_request+0xa4>
 8011f32:	6885      	ldr	r5, [r0, #8]
 8011f34:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8011f38:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8011f3c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011f40:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8011f44:	7423      	strb	r3, [r4, #16]
 8011f46:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8011f4a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8011f4e:	74e2      	strb	r2, [r4, #19]
 8011f50:	f8a4 3011 	strh.w	r3, [r4, #17]
 8011f54:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8011f58:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8011f5c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8011f60:	61e1      	str	r1, [r4, #28]
 8011f62:	6162      	str	r2, [r4, #20]
 8011f64:	61a3      	str	r3, [r4, #24]
 8011f66:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	4798      	blx	r3
 8011f6e:	6844      	ldr	r4, [r0, #4]
 8011f70:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8011f74:	f105 0110 	add.w	r1, r5, #16
 8011f78:	4668      	mov	r0, sp
 8011f7a:	f7f9 f8e5 	bl	800b148 <ucdr_init_buffer>
 8011f7e:	68e3      	ldr	r3, [r4, #12]
 8011f80:	4641      	mov	r1, r8
 8011f82:	4668      	mov	r0, sp
 8011f84:	4798      	blx	r3
 8011f86:	4639      	mov	r1, r7
 8011f88:	4604      	mov	r4, r0
 8011f8a:	480a      	ldr	r0, [pc, #40]	@ (8011fb4 <rmw_take_request+0xb8>)
 8011f8c:	f7ff fb24 	bl	80115d8 <put_memory>
 8011f90:	b106      	cbz	r6, 8011f94 <rmw_take_request+0x98>
 8011f92:	7034      	strb	r4, [r6, #0]
 8011f94:	f084 0001 	eor.w	r0, r4, #1
 8011f98:	b2c0      	uxtb	r0, r0
 8011f9a:	b009      	add	sp, #36	@ 0x24
 8011f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fa0:	2001      	movs	r0, #1
 8011fa2:	b009      	add	sp, #36	@ 0x24
 8011fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fa8:	200c      	movs	r0, #12
 8011faa:	b009      	add	sp, #36	@ 0x24
 8011fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fb0:	08019a04 	.word	0x08019a04
 8011fb4:	20010ba4 	.word	0x20010ba4

08011fb8 <rmw_send_response>:
 8011fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fba:	4605      	mov	r5, r0
 8011fbc:	6800      	ldr	r0, [r0, #0]
 8011fbe:	b091      	sub	sp, #68	@ 0x44
 8011fc0:	460c      	mov	r4, r1
 8011fc2:	4616      	mov	r6, r2
 8011fc4:	b128      	cbz	r0, 8011fd2 <rmw_send_response+0x1a>
 8011fc6:	4b29      	ldr	r3, [pc, #164]	@ (801206c <rmw_send_response+0xb4>)
 8011fc8:	6819      	ldr	r1, [r3, #0]
 8011fca:	f7ee f921 	bl	8000210 <strcmp>
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d141      	bne.n	8012056 <rmw_send_response+0x9e>
 8011fd2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011fd6:	9306      	str	r3, [sp, #24]
 8011fd8:	4623      	mov	r3, r4
 8011fda:	9207      	str	r2, [sp, #28]
 8011fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fe0:	686d      	ldr	r5, [r5, #4]
 8011fe2:	789b      	ldrb	r3, [r3, #2]
 8011fe4:	68a1      	ldr	r1, [r4, #8]
 8011fe6:	f88d 2017 	strb.w	r2, [sp, #23]
 8011fea:	f88d 3016 	strb.w	r3, [sp, #22]
 8011fee:	68e2      	ldr	r2, [r4, #12]
 8011ff0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8011ff4:	6860      	ldr	r0, [r4, #4]
 8011ff6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ffa:	ab02      	add	r3, sp, #8
 8011ffc:	c307      	stmia	r3!, {r0, r1, r2}
 8011ffe:	696b      	ldr	r3, [r5, #20]
 8012000:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	4798      	blx	r3
 8012006:	6844      	ldr	r4, [r0, #4]
 8012008:	4630      	mov	r0, r6
 801200a:	6923      	ldr	r3, [r4, #16]
 801200c:	4798      	blx	r3
 801200e:	f100 0318 	add.w	r3, r0, #24
 8012012:	6938      	ldr	r0, [r7, #16]
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	692a      	ldr	r2, [r5, #16]
 8012018:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801201a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801201e:	ab08      	add	r3, sp, #32
 8012020:	f7fa fe56 	bl	800ccd0 <uxr_prepare_output_stream>
 8012024:	b910      	cbnz	r0, 801202c <rmw_send_response+0x74>
 8012026:	2001      	movs	r0, #1
 8012028:	b011      	add	sp, #68	@ 0x44
 801202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801202c:	a902      	add	r1, sp, #8
 801202e:	a808      	add	r0, sp, #32
 8012030:	f7fb ff86 	bl	800df40 <uxr_serialize_SampleIdentity>
 8012034:	68a3      	ldr	r3, [r4, #8]
 8012036:	a908      	add	r1, sp, #32
 8012038:	4630      	mov	r0, r6
 801203a:	4798      	blx	r3
 801203c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8012040:	6938      	ldr	r0, [r7, #16]
 8012042:	2b01      	cmp	r3, #1
 8012044:	d00a      	beq.n	801205c <rmw_send_response+0xa4>
 8012046:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8012048:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801204c:	f7fa f854 	bl	800c0f8 <uxr_run_session_until_confirm_delivery>
 8012050:	2000      	movs	r0, #0
 8012052:	b011      	add	sp, #68	@ 0x44
 8012054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012056:	200c      	movs	r0, #12
 8012058:	b011      	add	sp, #68	@ 0x44
 801205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801205c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012060:	f7f9 fc8a 	bl	800b978 <uxr_flash_output_streams>
 8012064:	2000      	movs	r0, #0
 8012066:	b011      	add	sp, #68	@ 0x44
 8012068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801206a:	bf00      	nop
 801206c:	08019a04 	.word	0x08019a04

08012070 <rmw_take_response>:
 8012070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	4604      	mov	r4, r0
 8012076:	6800      	ldr	r0, [r0, #0]
 8012078:	b088      	sub	sp, #32
 801207a:	4688      	mov	r8, r1
 801207c:	4617      	mov	r7, r2
 801207e:	461d      	mov	r5, r3
 8012080:	b120      	cbz	r0, 801208c <rmw_take_response+0x1c>
 8012082:	4b1e      	ldr	r3, [pc, #120]	@ (80120fc <rmw_take_response+0x8c>)
 8012084:	6819      	ldr	r1, [r3, #0]
 8012086:	f7ee f8c3 	bl	8000210 <strcmp>
 801208a:	bb78      	cbnz	r0, 80120ec <rmw_take_response+0x7c>
 801208c:	b10d      	cbz	r5, 8012092 <rmw_take_response+0x22>
 801208e:	2300      	movs	r3, #0
 8012090:	702b      	strb	r3, [r5, #0]
 8012092:	6864      	ldr	r4, [r4, #4]
 8012094:	f7f8 fe5c 	bl	800ad50 <rmw_uxrce_clean_expired_static_input_buffer>
 8012098:	4620      	mov	r0, r4
 801209a:	f7f8 fe31 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801209e:	4606      	mov	r6, r0
 80120a0:	b340      	cbz	r0, 80120f4 <rmw_take_response+0x84>
 80120a2:	6963      	ldr	r3, [r4, #20]
 80120a4:	6884      	ldr	r4, [r0, #8]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80120ac:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80120b0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80120b4:	4798      	blx	r3
 80120b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80120ba:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80120be:	f104 0110 	add.w	r1, r4, #16
 80120c2:	4668      	mov	r0, sp
 80120c4:	f7f9 f840 	bl	800b148 <ucdr_init_buffer>
 80120c8:	4639      	mov	r1, r7
 80120ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120ce:	4668      	mov	r0, sp
 80120d0:	4798      	blx	r3
 80120d2:	4631      	mov	r1, r6
 80120d4:	4604      	mov	r4, r0
 80120d6:	480a      	ldr	r0, [pc, #40]	@ (8012100 <rmw_take_response+0x90>)
 80120d8:	f7ff fa7e 	bl	80115d8 <put_memory>
 80120dc:	b105      	cbz	r5, 80120e0 <rmw_take_response+0x70>
 80120de:	702c      	strb	r4, [r5, #0]
 80120e0:	f084 0001 	eor.w	r0, r4, #1
 80120e4:	b2c0      	uxtb	r0, r0
 80120e6:	b008      	add	sp, #32
 80120e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ec:	200c      	movs	r0, #12
 80120ee:	b008      	add	sp, #32
 80120f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f4:	2001      	movs	r0, #1
 80120f6:	b008      	add	sp, #32
 80120f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120fc:	08019a04 	.word	0x08019a04
 8012100:	20010ba4 	.word	0x20010ba4

08012104 <rmw_destroy_service>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	b128      	cbz	r0, 8012114 <rmw_destroy_service+0x10>
 8012108:	4604      	mov	r4, r0
 801210a:	6800      	ldr	r0, [r0, #0]
 801210c:	460d      	mov	r5, r1
 801210e:	f7f8 ff1d 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 8012112:	b910      	cbnz	r0, 801211a <rmw_destroy_service+0x16>
 8012114:	2401      	movs	r4, #1
 8012116:	4620      	mov	r0, r4
 8012118:	bd70      	pop	{r4, r5, r6, pc}
 801211a:	6863      	ldr	r3, [r4, #4]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d0f9      	beq.n	8012114 <rmw_destroy_service+0x10>
 8012120:	2d00      	cmp	r5, #0
 8012122:	d0f7      	beq.n	8012114 <rmw_destroy_service+0x10>
 8012124:	6828      	ldr	r0, [r5, #0]
 8012126:	f7f8 ff11 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 801212a:	2800      	cmp	r0, #0
 801212c:	d0f2      	beq.n	8012114 <rmw_destroy_service+0x10>
 801212e:	686e      	ldr	r6, [r5, #4]
 8012130:	2e00      	cmp	r6, #0
 8012132:	d0ef      	beq.n	8012114 <rmw_destroy_service+0x10>
 8012134:	6864      	ldr	r4, [r4, #4]
 8012136:	6932      	ldr	r2, [r6, #16]
 8012138:	6920      	ldr	r0, [r4, #16]
 801213a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801213e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012142:	6819      	ldr	r1, [r3, #0]
 8012144:	f002 fad6 	bl	80146f4 <uxr_buffer_cancel_data>
 8012148:	4602      	mov	r2, r0
 801214a:	6920      	ldr	r0, [r4, #16]
 801214c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012150:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012154:	f7f8 fe7a 	bl	800ae4c <run_xrce_session>
 8012158:	6920      	ldr	r0, [r4, #16]
 801215a:	6932      	ldr	r2, [r6, #16]
 801215c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012160:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012164:	6819      	ldr	r1, [r3, #0]
 8012166:	f7f9 f8b7 	bl	800b2d8 <uxr_buffer_delete_entity>
 801216a:	4602      	mov	r2, r0
 801216c:	6920      	ldr	r0, [r4, #16]
 801216e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012172:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012176:	f7f8 fe69 	bl	800ae4c <run_xrce_session>
 801217a:	2800      	cmp	r0, #0
 801217c:	4628      	mov	r0, r5
 801217e:	bf14      	ite	ne
 8012180:	2400      	movne	r4, #0
 8012182:	2402      	moveq	r4, #2
 8012184:	f7f8 fd34 	bl	800abf0 <rmw_uxrce_fini_service_memory>
 8012188:	e7c5      	b.n	8012116 <rmw_destroy_service+0x12>
 801218a:	bf00      	nop

0801218c <rmw_create_subscription>:
 801218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012190:	b08d      	sub	sp, #52	@ 0x34
 8012192:	2800      	cmp	r0, #0
 8012194:	f000 80d1 	beq.w	801233a <rmw_create_subscription+0x1ae>
 8012198:	460e      	mov	r6, r1
 801219a:	2900      	cmp	r1, #0
 801219c:	f000 80cd 	beq.w	801233a <rmw_create_subscription+0x1ae>
 80121a0:	4604      	mov	r4, r0
 80121a2:	6800      	ldr	r0, [r0, #0]
 80121a4:	4615      	mov	r5, r2
 80121a6:	4698      	mov	r8, r3
 80121a8:	f7f8 fed0 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	f000 80c4 	beq.w	801233a <rmw_create_subscription+0x1ae>
 80121b2:	2d00      	cmp	r5, #0
 80121b4:	f000 80c1 	beq.w	801233a <rmw_create_subscription+0x1ae>
 80121b8:	782b      	ldrb	r3, [r5, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 80bd 	beq.w	801233a <rmw_create_subscription+0x1ae>
 80121c0:	f1b8 0f00 	cmp.w	r8, #0
 80121c4:	f000 80b9 	beq.w	801233a <rmw_create_subscription+0x1ae>
 80121c8:	485e      	ldr	r0, [pc, #376]	@ (8012344 <rmw_create_subscription+0x1b8>)
 80121ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80121ce:	f7ff f9f3 	bl	80115b8 <get_memory>
 80121d2:	4604      	mov	r4, r0
 80121d4:	2800      	cmp	r0, #0
 80121d6:	f000 80b1 	beq.w	801233c <rmw_create_subscription+0x1b0>
 80121da:	6887      	ldr	r7, [r0, #8]
 80121dc:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80121e0:	f7ff fa52 	bl	8011688 <rmw_get_implementation_identifier>
 80121e4:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80121e8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80121ea:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80121ee:	4628      	mov	r0, r5
 80121f0:	f7ee f86e 	bl	80002d0 <strlen>
 80121f4:	3001      	adds	r0, #1
 80121f6:	283c      	cmp	r0, #60	@ 0x3c
 80121f8:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80121fc:	f200 8096 	bhi.w	801232c <rmw_create_subscription+0x1a0>
 8012200:	4a51      	ldr	r2, [pc, #324]	@ (8012348 <rmw_create_subscription+0x1bc>)
 8012202:	462b      	mov	r3, r5
 8012204:	213c      	movs	r1, #60	@ 0x3c
 8012206:	4650      	mov	r0, sl
 8012208:	f004 fcfe 	bl	8016c08 <sniprintf>
 801220c:	4641      	mov	r1, r8
 801220e:	f8c7 9020 	str.w	r9, [r7, #32]
 8012212:	2250      	movs	r2, #80	@ 0x50
 8012214:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8012218:	f004 ffa7 	bl	801716a <memcpy>
 801221c:	494b      	ldr	r1, [pc, #300]	@ (801234c <rmw_create_subscription+0x1c0>)
 801221e:	4630      	mov	r0, r6
 8012220:	f7f8 fea2 	bl	800af68 <get_message_typesupport_handle>
 8012224:	2800      	cmp	r0, #0
 8012226:	f000 8081 	beq.w	801232c <rmw_create_subscription+0x1a0>
 801222a:	6842      	ldr	r2, [r0, #4]
 801222c:	61ba      	str	r2, [r7, #24]
 801222e:	2a00      	cmp	r2, #0
 8012230:	d07c      	beq.n	801232c <rmw_create_subscription+0x1a0>
 8012232:	4629      	mov	r1, r5
 8012234:	4643      	mov	r3, r8
 8012236:	4648      	mov	r0, r9
 8012238:	f7ff fc8c 	bl	8011b54 <create_topic>
 801223c:	61f8      	str	r0, [r7, #28]
 801223e:	2800      	cmp	r0, #0
 8012240:	d078      	beq.n	8012334 <rmw_create_subscription+0x1a8>
 8012242:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801224a:	2104      	movs	r1, #4
 801224c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8012250:	1c42      	adds	r2, r0, #1
 8012252:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8012256:	f7f9 fa41 	bl	800b6dc <uxr_object_id>
 801225a:	6138      	str	r0, [r7, #16]
 801225c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012260:	2506      	movs	r5, #6
 8012262:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8012266:	9500      	str	r5, [sp, #0]
 8012268:	6819      	ldr	r1, [r3, #0]
 801226a:	693a      	ldr	r2, [r7, #16]
 801226c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012270:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012274:	f7f9 f914 	bl	800b4a0 <uxr_buffer_create_subscriber_bin>
 8012278:	4602      	mov	r2, r0
 801227a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801227e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8012282:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8012286:	f7f8 fde1 	bl	800ae4c <run_xrce_session>
 801228a:	2800      	cmp	r0, #0
 801228c:	d04e      	beq.n	801232c <rmw_create_subscription+0x1a0>
 801228e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8012296:	4629      	mov	r1, r5
 8012298:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801229c:	1c42      	adds	r2, r0, #1
 801229e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80122a2:	f7f9 fa1b 	bl	800b6dc <uxr_object_id>
 80122a6:	ae08      	add	r6, sp, #32
 80122a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80122ac:	69fb      	ldr	r3, [r7, #28]
 80122ae:	6178      	str	r0, [r7, #20]
 80122b0:	4641      	mov	r1, r8
 80122b2:	4630      	mov	r0, r6
 80122b4:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80122b8:	9305      	str	r3, [sp, #20]
 80122ba:	f7f8 fde3 	bl	800ae84 <convert_qos_profile>
 80122be:	9503      	str	r5, [sp, #12]
 80122c0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80122c4:	9b05      	ldr	r3, [sp, #20]
 80122c6:	9001      	str	r0, [sp, #4]
 80122c8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80122d4:	f8db 1000 	ldr.w	r1, [fp]
 80122d8:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80122dc:	f7f9 f986 	bl	800b5ec <uxr_buffer_create_datareader_bin>
 80122e0:	4602      	mov	r2, r0
 80122e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80122e6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80122ea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80122ee:	f7f8 fdad 	bl	800ae4c <run_xrce_session>
 80122f2:	b1d8      	cbz	r0, 801232c <rmw_create_subscription+0x1a0>
 80122f4:	f898 3008 	ldrb.w	r3, [r8, #8]
 80122f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80122fc:	2b02      	cmp	r3, #2
 80122fe:	bf0c      	ite	eq
 8012300:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8012304:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8012308:	9307      	str	r3, [sp, #28]
 801230a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801230e:	2200      	movs	r2, #0
 8012310:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8012314:	ab0a      	add	r3, sp, #40	@ 0x28
 8012316:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801231a:	9300      	str	r3, [sp, #0]
 801231c:	697a      	ldr	r2, [r7, #20]
 801231e:	9b07      	ldr	r3, [sp, #28]
 8012320:	6809      	ldr	r1, [r1, #0]
 8012322:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012326:	f002 f9ab 	bl	8014680 <uxr_buffer_request_data>
 801232a:	e007      	b.n	801233c <rmw_create_subscription+0x1b0>
 801232c:	69f8      	ldr	r0, [r7, #28]
 801232e:	b108      	cbz	r0, 8012334 <rmw_create_subscription+0x1a8>
 8012330:	f7f8 fc8a 	bl	800ac48 <rmw_uxrce_fini_topic_memory>
 8012334:	4620      	mov	r0, r4
 8012336:	f7f8 fc45 	bl	800abc4 <rmw_uxrce_fini_subscription_memory>
 801233a:	2400      	movs	r4, #0
 801233c:	4620      	mov	r0, r4
 801233e:	b00d      	add	sp, #52	@ 0x34
 8012340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012344:	20010bb4 	.word	0x20010bb4
 8012348:	080192e4 	.word	0x080192e4
 801234c:	080192b0 	.word	0x080192b0

08012350 <rmw_subscription_get_actual_qos>:
 8012350:	b150      	cbz	r0, 8012368 <rmw_subscription_get_actual_qos+0x18>
 8012352:	b508      	push	{r3, lr}
 8012354:	460b      	mov	r3, r1
 8012356:	b149      	cbz	r1, 801236c <rmw_subscription_get_actual_qos+0x1c>
 8012358:	6841      	ldr	r1, [r0, #4]
 801235a:	2250      	movs	r2, #80	@ 0x50
 801235c:	3128      	adds	r1, #40	@ 0x28
 801235e:	4618      	mov	r0, r3
 8012360:	f004 ff03 	bl	801716a <memcpy>
 8012364:	2000      	movs	r0, #0
 8012366:	bd08      	pop	{r3, pc}
 8012368:	200b      	movs	r0, #11
 801236a:	4770      	bx	lr
 801236c:	200b      	movs	r0, #11
 801236e:	bd08      	pop	{r3, pc}

08012370 <rmw_destroy_subscription>:
 8012370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012372:	b128      	cbz	r0, 8012380 <rmw_destroy_subscription+0x10>
 8012374:	4604      	mov	r4, r0
 8012376:	6800      	ldr	r0, [r0, #0]
 8012378:	460d      	mov	r5, r1
 801237a:	f7f8 fde7 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 801237e:	b910      	cbnz	r0, 8012386 <rmw_destroy_subscription+0x16>
 8012380:	2401      	movs	r4, #1
 8012382:	4620      	mov	r0, r4
 8012384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012386:	6863      	ldr	r3, [r4, #4]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d0f9      	beq.n	8012380 <rmw_destroy_subscription+0x10>
 801238c:	2d00      	cmp	r5, #0
 801238e:	d0f7      	beq.n	8012380 <rmw_destroy_subscription+0x10>
 8012390:	6828      	ldr	r0, [r5, #0]
 8012392:	f7f8 fddb 	bl	800af4c <is_uxrce_rmw_identifier_valid>
 8012396:	2800      	cmp	r0, #0
 8012398:	d0f2      	beq.n	8012380 <rmw_destroy_subscription+0x10>
 801239a:	686c      	ldr	r4, [r5, #4]
 801239c:	2c00      	cmp	r4, #0
 801239e:	d0ef      	beq.n	8012380 <rmw_destroy_subscription+0x10>
 80123a0:	6a26      	ldr	r6, [r4, #32]
 80123a2:	6962      	ldr	r2, [r4, #20]
 80123a4:	6930      	ldr	r0, [r6, #16]
 80123a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	f002 f9a0 	bl	80146f4 <uxr_buffer_cancel_data>
 80123b4:	4602      	mov	r2, r0
 80123b6:	6930      	ldr	r0, [r6, #16]
 80123b8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80123bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80123c0:	f7f8 fd44 	bl	800ae4c <run_xrce_session>
 80123c4:	69e0      	ldr	r0, [r4, #28]
 80123c6:	f7ff fc15 	bl	8011bf4 <destroy_topic>
 80123ca:	6a23      	ldr	r3, [r4, #32]
 80123cc:	6962      	ldr	r2, [r4, #20]
 80123ce:	6918      	ldr	r0, [r3, #16]
 80123d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80123d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80123d8:	6819      	ldr	r1, [r3, #0]
 80123da:	f7f8 ff7d 	bl	800b2d8 <uxr_buffer_delete_entity>
 80123de:	6a23      	ldr	r3, [r4, #32]
 80123e0:	6922      	ldr	r2, [r4, #16]
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80123e8:	4604      	mov	r4, r0
 80123ea:	6809      	ldr	r1, [r1, #0]
 80123ec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80123f0:	f7f8 ff72 	bl	800b2d8 <uxr_buffer_delete_entity>
 80123f4:	6937      	ldr	r7, [r6, #16]
 80123f6:	4622      	mov	r2, r4
 80123f8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80123fc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8012400:	4604      	mov	r4, r0
 8012402:	4638      	mov	r0, r7
 8012404:	f7f8 fd22 	bl	800ae4c <run_xrce_session>
 8012408:	6936      	ldr	r6, [r6, #16]
 801240a:	4622      	mov	r2, r4
 801240c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8012410:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8012414:	4604      	mov	r4, r0
 8012416:	4630      	mov	r0, r6
 8012418:	f7f8 fd18 	bl	800ae4c <run_xrce_session>
 801241c:	b12c      	cbz	r4, 801242a <rmw_destroy_subscription+0xba>
 801241e:	b120      	cbz	r0, 801242a <rmw_destroy_subscription+0xba>
 8012420:	2400      	movs	r4, #0
 8012422:	4628      	mov	r0, r5
 8012424:	f7f8 fbce 	bl	800abc4 <rmw_uxrce_fini_subscription_memory>
 8012428:	e7ab      	b.n	8012382 <rmw_destroy_subscription+0x12>
 801242a:	2402      	movs	r4, #2
 801242c:	e7f9      	b.n	8012422 <rmw_destroy_subscription+0xb2>
 801242e:	bf00      	nop

08012430 <rmw_take_with_info>:
 8012430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012432:	4604      	mov	r4, r0
 8012434:	6800      	ldr	r0, [r0, #0]
 8012436:	b089      	sub	sp, #36	@ 0x24
 8012438:	460f      	mov	r7, r1
 801243a:	4615      	mov	r5, r2
 801243c:	b128      	cbz	r0, 801244a <rmw_take_with_info+0x1a>
 801243e:	4b24      	ldr	r3, [pc, #144]	@ (80124d0 <rmw_take_with_info+0xa0>)
 8012440:	6819      	ldr	r1, [r3, #0]
 8012442:	f7ed fee5 	bl	8000210 <strcmp>
 8012446:	2800      	cmp	r0, #0
 8012448:	d13e      	bne.n	80124c8 <rmw_take_with_info+0x98>
 801244a:	b305      	cbz	r5, 801248e <rmw_take_with_info+0x5e>
 801244c:	6864      	ldr	r4, [r4, #4]
 801244e:	2300      	movs	r3, #0
 8012450:	702b      	strb	r3, [r5, #0]
 8012452:	f7f8 fc7d 	bl	800ad50 <rmw_uxrce_clean_expired_static_input_buffer>
 8012456:	4620      	mov	r0, r4
 8012458:	f7f8 fc52 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801245c:	4606      	mov	r6, r0
 801245e:	b1f0      	cbz	r0, 801249e <rmw_take_with_info+0x6e>
 8012460:	6881      	ldr	r1, [r0, #8]
 8012462:	4668      	mov	r0, sp
 8012464:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8012468:	3110      	adds	r1, #16
 801246a:	f7f8 fe6d 	bl	800b148 <ucdr_init_buffer>
 801246e:	69a3      	ldr	r3, [r4, #24]
 8012470:	4639      	mov	r1, r7
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	4668      	mov	r0, sp
 8012476:	4798      	blx	r3
 8012478:	4631      	mov	r1, r6
 801247a:	4604      	mov	r4, r0
 801247c:	4815      	ldr	r0, [pc, #84]	@ (80124d4 <rmw_take_with_info+0xa4>)
 801247e:	f7ff f8ab 	bl	80115d8 <put_memory>
 8012482:	702c      	strb	r4, [r5, #0]
 8012484:	f084 0001 	eor.w	r0, r4, #1
 8012488:	b2c0      	uxtb	r0, r0
 801248a:	b009      	add	sp, #36	@ 0x24
 801248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801248e:	6864      	ldr	r4, [r4, #4]
 8012490:	f7f8 fc5e 	bl	800ad50 <rmw_uxrce_clean_expired_static_input_buffer>
 8012494:	4620      	mov	r0, r4
 8012496:	f7f8 fc33 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801249a:	4605      	mov	r5, r0
 801249c:	b910      	cbnz	r0, 80124a4 <rmw_take_with_info+0x74>
 801249e:	2001      	movs	r0, #1
 80124a0:	b009      	add	sp, #36	@ 0x24
 80124a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124a4:	68a9      	ldr	r1, [r5, #8]
 80124a6:	4668      	mov	r0, sp
 80124a8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80124ac:	3110      	adds	r1, #16
 80124ae:	f7f8 fe4b 	bl	800b148 <ucdr_init_buffer>
 80124b2:	69a3      	ldr	r3, [r4, #24]
 80124b4:	4639      	mov	r1, r7
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	4668      	mov	r0, sp
 80124ba:	4798      	blx	r3
 80124bc:	4629      	mov	r1, r5
 80124be:	4604      	mov	r4, r0
 80124c0:	4804      	ldr	r0, [pc, #16]	@ (80124d4 <rmw_take_with_info+0xa4>)
 80124c2:	f7ff f889 	bl	80115d8 <put_memory>
 80124c6:	e7dd      	b.n	8012484 <rmw_take_with_info+0x54>
 80124c8:	200c      	movs	r0, #12
 80124ca:	b009      	add	sp, #36	@ 0x24
 80124cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124ce:	bf00      	nop
 80124d0:	08019a04 	.word	0x08019a04
 80124d4:	20010ba4 	.word	0x20010ba4

080124d8 <rmw_uxrce_transport_init>:
 80124d8:	b508      	push	{r3, lr}
 80124da:	b108      	cbz	r0, 80124e0 <rmw_uxrce_transport_init+0x8>
 80124dc:	f100 0210 	add.w	r2, r0, #16
 80124e0:	b139      	cbz	r1, 80124f2 <rmw_uxrce_transport_init+0x1a>
 80124e2:	6949      	ldr	r1, [r1, #20]
 80124e4:	4610      	mov	r0, r2
 80124e6:	f001 fb4b 	bl	8013b80 <uxr_init_custom_transport>
 80124ea:	f080 0001 	eor.w	r0, r0, #1
 80124ee:	b2c0      	uxtb	r0, r0
 80124f0:	bd08      	pop	{r3, pc}
 80124f2:	4b04      	ldr	r3, [pc, #16]	@ (8012504 <rmw_uxrce_transport_init+0x2c>)
 80124f4:	4610      	mov	r0, r2
 80124f6:	6859      	ldr	r1, [r3, #4]
 80124f8:	f001 fb42 	bl	8013b80 <uxr_init_custom_transport>
 80124fc:	f080 0001 	eor.w	r0, r0, #1
 8012500:	b2c0      	uxtb	r0, r0
 8012502:	bd08      	pop	{r3, pc}
 8012504:	2000c27c 	.word	0x2000c27c

08012508 <rmw_wait>:
 8012508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801250c:	b089      	sub	sp, #36	@ 0x24
 801250e:	4605      	mov	r5, r0
 8012510:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8012512:	460e      	mov	r6, r1
 8012514:	4698      	mov	r8, r3
 8012516:	4691      	mov	r9, r2
 8012518:	2a00      	cmp	r2, #0
 801251a:	f000 810a 	beq.w	8012732 <rmw_wait+0x22a>
 801251e:	b16c      	cbz	r4, 801253c <rmw_wait+0x34>
 8012520:	4bae      	ldr	r3, [pc, #696]	@ (80127dc <rmw_wait+0x2d4>)
 8012522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012524:	af04      	add	r7, sp, #16
 8012526:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801252a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801252e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012532:	f7fe fe75 	bl	8011220 <rmw_time_equal>
 8012536:	2800      	cmp	r0, #0
 8012538:	f000 8127 	beq.w	801278a <rmw_wait+0x282>
 801253c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8012540:	f7f8 fc06 	bl	800ad50 <rmw_uxrce_clean_expired_static_input_buffer>
 8012544:	4ba6      	ldr	r3, [pc, #664]	@ (80127e0 <rmw_wait+0x2d8>)
 8012546:	681c      	ldr	r4, [r3, #0]
 8012548:	b14c      	cbz	r4, 801255e <rmw_wait+0x56>
 801254a:	4623      	mov	r3, r4
 801254c:	2100      	movs	r1, #0
 801254e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8012552:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012556:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801255a:	2b00      	cmp	r3, #0
 801255c:	d1f7      	bne.n	801254e <rmw_wait+0x46>
 801255e:	f1b9 0f00 	cmp.w	r9, #0
 8012562:	d011      	beq.n	8012588 <rmw_wait+0x80>
 8012564:	f8d9 1000 	ldr.w	r1, [r9]
 8012568:	b171      	cbz	r1, 8012588 <rmw_wait+0x80>
 801256a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801256e:	2300      	movs	r3, #0
 8012570:	2001      	movs	r0, #1
 8012572:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012576:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8012578:	6912      	ldr	r2, [r2, #16]
 801257a:	3301      	adds	r3, #1
 801257c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8012580:	4299      	cmp	r1, r3
 8012582:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8012586:	d1f4      	bne.n	8012572 <rmw_wait+0x6a>
 8012588:	f1b8 0f00 	cmp.w	r8, #0
 801258c:	d011      	beq.n	80125b2 <rmw_wait+0xaa>
 801258e:	f8d8 1000 	ldr.w	r1, [r8]
 8012592:	b171      	cbz	r1, 80125b2 <rmw_wait+0xaa>
 8012594:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012598:	2300      	movs	r3, #0
 801259a:	2001      	movs	r0, #1
 801259c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80125a0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80125a2:	6912      	ldr	r2, [r2, #16]
 80125a4:	3301      	adds	r3, #1
 80125a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80125aa:	4299      	cmp	r1, r3
 80125ac:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80125b0:	d1f4      	bne.n	801259c <rmw_wait+0x94>
 80125b2:	b185      	cbz	r5, 80125d6 <rmw_wait+0xce>
 80125b4:	6829      	ldr	r1, [r5, #0]
 80125b6:	b171      	cbz	r1, 80125d6 <rmw_wait+0xce>
 80125b8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80125bc:	2300      	movs	r3, #0
 80125be:	2001      	movs	r0, #1
 80125c0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80125c4:	6a12      	ldr	r2, [r2, #32]
 80125c6:	6912      	ldr	r2, [r2, #16]
 80125c8:	3301      	adds	r3, #1
 80125ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80125ce:	4299      	cmp	r1, r3
 80125d0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80125d4:	d1f4      	bne.n	80125c0 <rmw_wait+0xb8>
 80125d6:	b34c      	cbz	r4, 801262c <rmw_wait+0x124>
 80125d8:	4622      	mov	r2, r4
 80125da:	2300      	movs	r3, #0
 80125dc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80125e0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80125e4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80125e8:	440b      	add	r3, r1
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	d1f5      	bne.n	80125dc <rmw_wait+0xd4>
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	f000 8084 	beq.w	80126fe <rmw_wait+0x1f6>
 80125f6:	1c7a      	adds	r2, r7, #1
 80125f8:	d00d      	beq.n	8012616 <rmw_wait+0x10e>
 80125fa:	ee07 7a90 	vmov	s15, r7
 80125fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012602:	ee07 3a90 	vmov	s15, r3
 8012606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801260a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801260e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8012612:	ee17 7a90 	vmov	r7, s15
 8012616:	68a0      	ldr	r0, [r4, #8]
 8012618:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801261c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8012620:	2b00      	cmp	r3, #0
 8012622:	f040 8090 	bne.w	8012746 <rmw_wait+0x23e>
 8012626:	6864      	ldr	r4, [r4, #4]
 8012628:	2c00      	cmp	r4, #0
 801262a:	d1f4      	bne.n	8012616 <rmw_wait+0x10e>
 801262c:	f1b9 0f00 	cmp.w	r9, #0
 8012630:	f000 80bc 	beq.w	80127ac <rmw_wait+0x2a4>
 8012634:	f8d9 7000 	ldr.w	r7, [r9]
 8012638:	2f00      	cmp	r7, #0
 801263a:	f000 808e 	beq.w	801275a <rmw_wait+0x252>
 801263e:	2400      	movs	r4, #0
 8012640:	4627      	mov	r7, r4
 8012642:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012646:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801264a:	f7f8 fb59 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801264e:	2800      	cmp	r0, #0
 8012650:	d05f      	beq.n	8012712 <rmw_wait+0x20a>
 8012652:	f8d9 3000 	ldr.w	r3, [r9]
 8012656:	3401      	adds	r4, #1
 8012658:	42a3      	cmp	r3, r4
 801265a:	f04f 0701 	mov.w	r7, #1
 801265e:	d8f0      	bhi.n	8012642 <rmw_wait+0x13a>
 8012660:	f1b8 0f00 	cmp.w	r8, #0
 8012664:	d012      	beq.n	801268c <rmw_wait+0x184>
 8012666:	f8d8 3000 	ldr.w	r3, [r8]
 801266a:	b17b      	cbz	r3, 801268c <rmw_wait+0x184>
 801266c:	2400      	movs	r4, #0
 801266e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012672:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012676:	f7f8 fb43 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801267a:	2800      	cmp	r0, #0
 801267c:	d051      	beq.n	8012722 <rmw_wait+0x21a>
 801267e:	f8d8 3000 	ldr.w	r3, [r8]
 8012682:	3401      	adds	r4, #1
 8012684:	42a3      	cmp	r3, r4
 8012686:	f04f 0701 	mov.w	r7, #1
 801268a:	d8f0      	bhi.n	801266e <rmw_wait+0x166>
 801268c:	b1dd      	cbz	r5, 80126c6 <rmw_wait+0x1be>
 801268e:	682b      	ldr	r3, [r5, #0]
 8012690:	b1cb      	cbz	r3, 80126c6 <rmw_wait+0x1be>
 8012692:	2400      	movs	r4, #0
 8012694:	686b      	ldr	r3, [r5, #4]
 8012696:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801269a:	f7f8 fb31 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 801269e:	b158      	cbz	r0, 80126b8 <rmw_wait+0x1b0>
 80126a0:	682b      	ldr	r3, [r5, #0]
 80126a2:	3401      	adds	r4, #1
 80126a4:	42a3      	cmp	r3, r4
 80126a6:	d969      	bls.n	801277c <rmw_wait+0x274>
 80126a8:	686b      	ldr	r3, [r5, #4]
 80126aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80126ae:	2701      	movs	r7, #1
 80126b0:	f7f8 fb26 	bl	800ad00 <rmw_uxrce_find_static_input_buffer_by_owner>
 80126b4:	2800      	cmp	r0, #0
 80126b6:	d1f3      	bne.n	80126a0 <rmw_wait+0x198>
 80126b8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80126bc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80126c0:	3401      	adds	r4, #1
 80126c2:	42a3      	cmp	r3, r4
 80126c4:	d8e6      	bhi.n	8012694 <rmw_wait+0x18c>
 80126c6:	b1a6      	cbz	r6, 80126f2 <rmw_wait+0x1ea>
 80126c8:	6834      	ldr	r4, [r6, #0]
 80126ca:	b194      	cbz	r4, 80126f2 <rmw_wait+0x1ea>
 80126cc:	2300      	movs	r3, #0
 80126ce:	461d      	mov	r5, r3
 80126d0:	e004      	b.n	80126dc <rmw_wait+0x1d4>
 80126d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80126d6:	3301      	adds	r3, #1
 80126d8:	42a3      	cmp	r3, r4
 80126da:	d00a      	beq.n	80126f2 <rmw_wait+0x1ea>
 80126dc:	6870      	ldr	r0, [r6, #4]
 80126de:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80126e2:	7c0a      	ldrb	r2, [r1, #16]
 80126e4:	2a00      	cmp	r2, #0
 80126e6:	d0f4      	beq.n	80126d2 <rmw_wait+0x1ca>
 80126e8:	3301      	adds	r3, #1
 80126ea:	42a3      	cmp	r3, r4
 80126ec:	740d      	strb	r5, [r1, #16]
 80126ee:	4617      	mov	r7, r2
 80126f0:	d1f4      	bne.n	80126dc <rmw_wait+0x1d4>
 80126f2:	2f00      	cmp	r7, #0
 80126f4:	d03e      	beq.n	8012774 <rmw_wait+0x26c>
 80126f6:	2000      	movs	r0, #0
 80126f8:	b009      	add	sp, #36	@ 0x24
 80126fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126fe:	68a0      	ldr	r0, [r4, #8]
 8012700:	2100      	movs	r1, #0
 8012702:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012706:	f7f9 fcbd 	bl	800c084 <uxr_run_session_timeout>
 801270a:	6864      	ldr	r4, [r4, #4]
 801270c:	2c00      	cmp	r4, #0
 801270e:	d1f6      	bne.n	80126fe <rmw_wait+0x1f6>
 8012710:	e78c      	b.n	801262c <rmw_wait+0x124>
 8012712:	e9d9 3200 	ldrd	r3, r2, [r9]
 8012716:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801271a:	3401      	adds	r4, #1
 801271c:	42a3      	cmp	r3, r4
 801271e:	d890      	bhi.n	8012642 <rmw_wait+0x13a>
 8012720:	e79e      	b.n	8012660 <rmw_wait+0x158>
 8012722:	e9d8 3200 	ldrd	r3, r2, [r8]
 8012726:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801272a:	3401      	adds	r4, #1
 801272c:	429c      	cmp	r4, r3
 801272e:	d39e      	bcc.n	801266e <rmw_wait+0x166>
 8012730:	e7ac      	b.n	801268c <rmw_wait+0x184>
 8012732:	2b00      	cmp	r3, #0
 8012734:	f47f aef3 	bne.w	801251e <rmw_wait+0x16>
 8012738:	2800      	cmp	r0, #0
 801273a:	f47f aef0 	bne.w	801251e <rmw_wait+0x16>
 801273e:	2900      	cmp	r1, #0
 8012740:	f47f aeed 	bne.w	801251e <rmw_wait+0x16>
 8012744:	e7d7      	b.n	80126f6 <rmw_wait+0x1ee>
 8012746:	4639      	mov	r1, r7
 8012748:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801274c:	f7f9 fcb4 	bl	800c0b8 <uxr_run_session_until_data>
 8012750:	6864      	ldr	r4, [r4, #4]
 8012752:	2c00      	cmp	r4, #0
 8012754:	f47f af5f 	bne.w	8012616 <rmw_wait+0x10e>
 8012758:	e768      	b.n	801262c <rmw_wait+0x124>
 801275a:	f1b8 0f00 	cmp.w	r8, #0
 801275e:	d032      	beq.n	80127c6 <rmw_wait+0x2be>
 8012760:	f8d8 3000 	ldr.w	r3, [r8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d181      	bne.n	801266c <rmw_wait+0x164>
 8012768:	461f      	mov	r7, r3
 801276a:	2d00      	cmp	r5, #0
 801276c:	d18f      	bne.n	801268e <rmw_wait+0x186>
 801276e:	462f      	mov	r7, r5
 8012770:	2e00      	cmp	r6, #0
 8012772:	d1a9      	bne.n	80126c8 <rmw_wait+0x1c0>
 8012774:	2002      	movs	r0, #2
 8012776:	b009      	add	sp, #36	@ 0x24
 8012778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801277c:	2e00      	cmp	r6, #0
 801277e:	d0ba      	beq.n	80126f6 <rmw_wait+0x1ee>
 8012780:	6834      	ldr	r4, [r6, #0]
 8012782:	2701      	movs	r7, #1
 8012784:	2c00      	cmp	r4, #0
 8012786:	d1a1      	bne.n	80126cc <rmw_wait+0x1c4>
 8012788:	e7b5      	b.n	80126f6 <rmw_wait+0x1ee>
 801278a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801278e:	f7fe fd9b 	bl	80112c8 <rmw_time_total_nsec>
 8012792:	2300      	movs	r3, #0
 8012794:	4a13      	ldr	r2, [pc, #76]	@ (80127e4 <rmw_wait+0x2dc>)
 8012796:	f7ee fa87 	bl	8000ca8 <__aeabi_uldivmod>
 801279a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801279e:	f171 0300 	sbcs.w	r3, r1, #0
 80127a2:	4607      	mov	r7, r0
 80127a4:	bfa8      	it	ge
 80127a6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80127aa:	e6c9      	b.n	8012540 <rmw_wait+0x38>
 80127ac:	f1b8 0f00 	cmp.w	r8, #0
 80127b0:	d009      	beq.n	80127c6 <rmw_wait+0x2be>
 80127b2:	f8d8 3000 	ldr.w	r3, [r8]
 80127b6:	464f      	mov	r7, r9
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f47f af57 	bne.w	801266c <rmw_wait+0x164>
 80127be:	2d00      	cmp	r5, #0
 80127c0:	f47f af65 	bne.w	801268e <rmw_wait+0x186>
 80127c4:	e7d3      	b.n	801276e <rmw_wait+0x266>
 80127c6:	b17d      	cbz	r5, 80127e8 <rmw_wait+0x2e0>
 80127c8:	682b      	ldr	r3, [r5, #0]
 80127ca:	4647      	mov	r7, r8
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f47f af60 	bne.w	8012692 <rmw_wait+0x18a>
 80127d2:	2e00      	cmp	r6, #0
 80127d4:	f47f af78 	bne.w	80126c8 <rmw_wait+0x1c0>
 80127d8:	e7cc      	b.n	8012774 <rmw_wait+0x26c>
 80127da:	bf00      	nop
 80127dc:	080190e8 	.word	0x080190e8
 80127e0:	20010b94 	.word	0x20010b94
 80127e4:	000f4240 	.word	0x000f4240
 80127e8:	2e00      	cmp	r6, #0
 80127ea:	d0c3      	beq.n	8012774 <rmw_wait+0x26c>
 80127ec:	6834      	ldr	r4, [r6, #0]
 80127ee:	462f      	mov	r7, r5
 80127f0:	2c00      	cmp	r4, #0
 80127f2:	f47f af6b 	bne.w	80126cc <rmw_wait+0x1c4>
 80127f6:	e7bd      	b.n	8012774 <rmw_wait+0x26c>

080127f8 <rmw_create_wait_set>:
 80127f8:	b508      	push	{r3, lr}
 80127fa:	4803      	ldr	r0, [pc, #12]	@ (8012808 <rmw_create_wait_set+0x10>)
 80127fc:	f7fe fedc 	bl	80115b8 <get_memory>
 8012800:	b108      	cbz	r0, 8012806 <rmw_create_wait_set+0xe>
 8012802:	6880      	ldr	r0, [r0, #8]
 8012804:	3010      	adds	r0, #16
 8012806:	bd08      	pop	{r3, pc}
 8012808:	20010bd4 	.word	0x20010bd4

0801280c <rmw_destroy_wait_set>:
 801280c:	b508      	push	{r3, lr}
 801280e:	4b08      	ldr	r3, [pc, #32]	@ (8012830 <rmw_destroy_wait_set+0x24>)
 8012810:	6819      	ldr	r1, [r3, #0]
 8012812:	b911      	cbnz	r1, 801281a <rmw_destroy_wait_set+0xe>
 8012814:	e00a      	b.n	801282c <rmw_destroy_wait_set+0x20>
 8012816:	6849      	ldr	r1, [r1, #4]
 8012818:	b141      	cbz	r1, 801282c <rmw_destroy_wait_set+0x20>
 801281a:	688b      	ldr	r3, [r1, #8]
 801281c:	3310      	adds	r3, #16
 801281e:	4298      	cmp	r0, r3
 8012820:	d1f9      	bne.n	8012816 <rmw_destroy_wait_set+0xa>
 8012822:	4803      	ldr	r0, [pc, #12]	@ (8012830 <rmw_destroy_wait_set+0x24>)
 8012824:	f7fe fed8 	bl	80115d8 <put_memory>
 8012828:	2000      	movs	r0, #0
 801282a:	bd08      	pop	{r3, pc}
 801282c:	2001      	movs	r0, #1
 801282e:	bd08      	pop	{r3, pc}
 8012830:	20010bd4 	.word	0x20010bd4

08012834 <rmw_uros_epoch_nanos>:
 8012834:	4b05      	ldr	r3, [pc, #20]	@ (801284c <rmw_uros_epoch_nanos+0x18>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	b123      	cbz	r3, 8012844 <rmw_uros_epoch_nanos+0x10>
 801283a:	6898      	ldr	r0, [r3, #8]
 801283c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012840:	f7f9 b890 	b.w	800b964 <uxr_epoch_nanos>
 8012844:	2000      	movs	r0, #0
 8012846:	2100      	movs	r1, #0
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	20010b94 	.word	0x20010b94

08012850 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	6805      	ldr	r5, [r0, #0]
 8012856:	4604      	mov	r4, r0
 8012858:	4628      	mov	r0, r5
 801285a:	460e      	mov	r6, r1
 801285c:	f7ed fcd8 	bl	8000210 <strcmp>
 8012860:	b1c8      	cbz	r0, 8012896 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012862:	4b11      	ldr	r3, [pc, #68]	@ (80128a8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	429d      	cmp	r5, r3
 8012868:	d112      	bne.n	8012890 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801286a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801286e:	f8d8 4000 	ldr.w	r4, [r8]
 8012872:	b16c      	cbz	r4, 8012890 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012874:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012878:	2700      	movs	r7, #0
 801287a:	3d04      	subs	r5, #4
 801287c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012880:	4631      	mov	r1, r6
 8012882:	f7ed fcc5 	bl	8000210 <strcmp>
 8012886:	00bb      	lsls	r3, r7, #2
 8012888:	b140      	cbz	r0, 801289c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801288a:	3701      	adds	r7, #1
 801288c:	42bc      	cmp	r4, r7
 801288e:	d1f5      	bne.n	801287c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012890:	2000      	movs	r0, #0
 8012892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012896:	4620      	mov	r0, r4
 8012898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80128a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128a4:	58d3      	ldr	r3, [r2, r3]
 80128a6:	4718      	bx	r3
 80128a8:	200000b4 	.word	0x200000b4

080128ac <std_msgs__msg__String__init>:
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4604      	mov	r4, r0
 80128b0:	b128      	cbz	r0, 80128be <std_msgs__msg__String__init+0x12>
 80128b2:	f003 f91b 	bl	8015aec <rosidl_runtime_c__String__init>
 80128b6:	4605      	mov	r5, r0
 80128b8:	b120      	cbz	r0, 80128c4 <std_msgs__msg__String__init+0x18>
 80128ba:	4628      	mov	r0, r5
 80128bc:	bd38      	pop	{r3, r4, r5, pc}
 80128be:	4605      	mov	r5, r0
 80128c0:	4628      	mov	r0, r5
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	4620      	mov	r0, r4
 80128c6:	f003 f927 	bl	8015b18 <rosidl_runtime_c__String__fini>
 80128ca:	4628      	mov	r0, r5
 80128cc:	bd38      	pop	{r3, r4, r5, pc}
 80128ce:	bf00      	nop

080128d0 <std_msgs__msg__String__fini>:
 80128d0:	b108      	cbz	r0, 80128d6 <std_msgs__msg__String__fini+0x6>
 80128d2:	f003 b921 	b.w	8015b18 <rosidl_runtime_c__String__fini>
 80128d6:	4770      	bx	lr

080128d8 <ucdr_serialize_endian_array_char>:
 80128d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128dc:	4619      	mov	r1, r3
 80128de:	461f      	mov	r7, r3
 80128e0:	4605      	mov	r5, r0
 80128e2:	4690      	mov	r8, r2
 80128e4:	f7f8 fbdc 	bl	800b0a0 <ucdr_check_buffer_available_for>
 80128e8:	b9e0      	cbnz	r0, 8012924 <ucdr_serialize_endian_array_char+0x4c>
 80128ea:	463e      	mov	r6, r7
 80128ec:	e009      	b.n	8012902 <ucdr_serialize_endian_array_char+0x2a>
 80128ee:	68a8      	ldr	r0, [r5, #8]
 80128f0:	f004 fc3b 	bl	801716a <memcpy>
 80128f4:	68ab      	ldr	r3, [r5, #8]
 80128f6:	6928      	ldr	r0, [r5, #16]
 80128f8:	4423      	add	r3, r4
 80128fa:	4420      	add	r0, r4
 80128fc:	1b36      	subs	r6, r6, r4
 80128fe:	60ab      	str	r3, [r5, #8]
 8012900:	6128      	str	r0, [r5, #16]
 8012902:	4631      	mov	r1, r6
 8012904:	2201      	movs	r2, #1
 8012906:	4628      	mov	r0, r5
 8012908:	f7f8 fc52 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 801290c:	1bb9      	subs	r1, r7, r6
 801290e:	4441      	add	r1, r8
 8012910:	4604      	mov	r4, r0
 8012912:	4602      	mov	r2, r0
 8012914:	2800      	cmp	r0, #0
 8012916:	d1ea      	bne.n	80128ee <ucdr_serialize_endian_array_char+0x16>
 8012918:	2301      	movs	r3, #1
 801291a:	7da8      	ldrb	r0, [r5, #22]
 801291c:	756b      	strb	r3, [r5, #21]
 801291e:	4058      	eors	r0, r3
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012924:	463a      	mov	r2, r7
 8012926:	68a8      	ldr	r0, [r5, #8]
 8012928:	4641      	mov	r1, r8
 801292a:	f004 fc1e 	bl	801716a <memcpy>
 801292e:	68aa      	ldr	r2, [r5, #8]
 8012930:	692b      	ldr	r3, [r5, #16]
 8012932:	443a      	add	r2, r7
 8012934:	443b      	add	r3, r7
 8012936:	60aa      	str	r2, [r5, #8]
 8012938:	612b      	str	r3, [r5, #16]
 801293a:	e7ed      	b.n	8012918 <ucdr_serialize_endian_array_char+0x40>

0801293c <ucdr_deserialize_endian_array_char>:
 801293c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012940:	4619      	mov	r1, r3
 8012942:	461f      	mov	r7, r3
 8012944:	4605      	mov	r5, r0
 8012946:	4690      	mov	r8, r2
 8012948:	f7f8 fbaa 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801294c:	b9e0      	cbnz	r0, 8012988 <ucdr_deserialize_endian_array_char+0x4c>
 801294e:	463e      	mov	r6, r7
 8012950:	e009      	b.n	8012966 <ucdr_deserialize_endian_array_char+0x2a>
 8012952:	68a9      	ldr	r1, [r5, #8]
 8012954:	f004 fc09 	bl	801716a <memcpy>
 8012958:	68ab      	ldr	r3, [r5, #8]
 801295a:	6928      	ldr	r0, [r5, #16]
 801295c:	4423      	add	r3, r4
 801295e:	4420      	add	r0, r4
 8012960:	1b36      	subs	r6, r6, r4
 8012962:	60ab      	str	r3, [r5, #8]
 8012964:	6128      	str	r0, [r5, #16]
 8012966:	2201      	movs	r2, #1
 8012968:	4631      	mov	r1, r6
 801296a:	4628      	mov	r0, r5
 801296c:	f7f8 fc20 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 8012970:	4604      	mov	r4, r0
 8012972:	1bb8      	subs	r0, r7, r6
 8012974:	4440      	add	r0, r8
 8012976:	4622      	mov	r2, r4
 8012978:	2c00      	cmp	r4, #0
 801297a:	d1ea      	bne.n	8012952 <ucdr_deserialize_endian_array_char+0x16>
 801297c:	2301      	movs	r3, #1
 801297e:	7da8      	ldrb	r0, [r5, #22]
 8012980:	756b      	strb	r3, [r5, #21]
 8012982:	4058      	eors	r0, r3
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012988:	463a      	mov	r2, r7
 801298a:	68a9      	ldr	r1, [r5, #8]
 801298c:	4640      	mov	r0, r8
 801298e:	f004 fbec 	bl	801716a <memcpy>
 8012992:	68aa      	ldr	r2, [r5, #8]
 8012994:	692b      	ldr	r3, [r5, #16]
 8012996:	443a      	add	r2, r7
 8012998:	443b      	add	r3, r7
 801299a:	60aa      	str	r2, [r5, #8]
 801299c:	612b      	str	r3, [r5, #16]
 801299e:	e7ed      	b.n	801297c <ucdr_deserialize_endian_array_char+0x40>

080129a0 <ucdr_serialize_array_uint8_t>:
 80129a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a4:	4688      	mov	r8, r1
 80129a6:	4611      	mov	r1, r2
 80129a8:	4617      	mov	r7, r2
 80129aa:	4605      	mov	r5, r0
 80129ac:	f7f8 fb78 	bl	800b0a0 <ucdr_check_buffer_available_for>
 80129b0:	b9e0      	cbnz	r0, 80129ec <ucdr_serialize_array_uint8_t+0x4c>
 80129b2:	463e      	mov	r6, r7
 80129b4:	e009      	b.n	80129ca <ucdr_serialize_array_uint8_t+0x2a>
 80129b6:	68a8      	ldr	r0, [r5, #8]
 80129b8:	f004 fbd7 	bl	801716a <memcpy>
 80129bc:	68aa      	ldr	r2, [r5, #8]
 80129be:	692b      	ldr	r3, [r5, #16]
 80129c0:	4422      	add	r2, r4
 80129c2:	4423      	add	r3, r4
 80129c4:	1b36      	subs	r6, r6, r4
 80129c6:	60aa      	str	r2, [r5, #8]
 80129c8:	612b      	str	r3, [r5, #16]
 80129ca:	4631      	mov	r1, r6
 80129cc:	2201      	movs	r2, #1
 80129ce:	4628      	mov	r0, r5
 80129d0:	f7f8 fbee 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 80129d4:	1bb9      	subs	r1, r7, r6
 80129d6:	4441      	add	r1, r8
 80129d8:	4604      	mov	r4, r0
 80129da:	4602      	mov	r2, r0
 80129dc:	2800      	cmp	r0, #0
 80129de:	d1ea      	bne.n	80129b6 <ucdr_serialize_array_uint8_t+0x16>
 80129e0:	2301      	movs	r3, #1
 80129e2:	7da8      	ldrb	r0, [r5, #22]
 80129e4:	756b      	strb	r3, [r5, #21]
 80129e6:	4058      	eors	r0, r3
 80129e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ec:	463a      	mov	r2, r7
 80129ee:	68a8      	ldr	r0, [r5, #8]
 80129f0:	4641      	mov	r1, r8
 80129f2:	f004 fbba 	bl	801716a <memcpy>
 80129f6:	68aa      	ldr	r2, [r5, #8]
 80129f8:	692b      	ldr	r3, [r5, #16]
 80129fa:	443a      	add	r2, r7
 80129fc:	443b      	add	r3, r7
 80129fe:	60aa      	str	r2, [r5, #8]
 8012a00:	612b      	str	r3, [r5, #16]
 8012a02:	e7ed      	b.n	80129e0 <ucdr_serialize_array_uint8_t+0x40>

08012a04 <ucdr_serialize_endian_array_uint8_t>:
 8012a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a08:	4619      	mov	r1, r3
 8012a0a:	461f      	mov	r7, r3
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	4690      	mov	r8, r2
 8012a10:	f7f8 fb46 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012a14:	b9e0      	cbnz	r0, 8012a50 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012a16:	463e      	mov	r6, r7
 8012a18:	e009      	b.n	8012a2e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012a1a:	68a8      	ldr	r0, [r5, #8]
 8012a1c:	f004 fba5 	bl	801716a <memcpy>
 8012a20:	68ab      	ldr	r3, [r5, #8]
 8012a22:	6928      	ldr	r0, [r5, #16]
 8012a24:	4423      	add	r3, r4
 8012a26:	4420      	add	r0, r4
 8012a28:	1b36      	subs	r6, r6, r4
 8012a2a:	60ab      	str	r3, [r5, #8]
 8012a2c:	6128      	str	r0, [r5, #16]
 8012a2e:	4631      	mov	r1, r6
 8012a30:	2201      	movs	r2, #1
 8012a32:	4628      	mov	r0, r5
 8012a34:	f7f8 fbbc 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 8012a38:	1bb9      	subs	r1, r7, r6
 8012a3a:	4441      	add	r1, r8
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	4602      	mov	r2, r0
 8012a40:	2800      	cmp	r0, #0
 8012a42:	d1ea      	bne.n	8012a1a <ucdr_serialize_endian_array_uint8_t+0x16>
 8012a44:	2301      	movs	r3, #1
 8012a46:	7da8      	ldrb	r0, [r5, #22]
 8012a48:	756b      	strb	r3, [r5, #21]
 8012a4a:	4058      	eors	r0, r3
 8012a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a50:	463a      	mov	r2, r7
 8012a52:	68a8      	ldr	r0, [r5, #8]
 8012a54:	4641      	mov	r1, r8
 8012a56:	f004 fb88 	bl	801716a <memcpy>
 8012a5a:	68aa      	ldr	r2, [r5, #8]
 8012a5c:	692b      	ldr	r3, [r5, #16]
 8012a5e:	443a      	add	r2, r7
 8012a60:	443b      	add	r3, r7
 8012a62:	60aa      	str	r2, [r5, #8]
 8012a64:	612b      	str	r3, [r5, #16]
 8012a66:	e7ed      	b.n	8012a44 <ucdr_serialize_endian_array_uint8_t+0x40>

08012a68 <ucdr_deserialize_array_uint8_t>:
 8012a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a6c:	4688      	mov	r8, r1
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4617      	mov	r7, r2
 8012a72:	4605      	mov	r5, r0
 8012a74:	f7f8 fb14 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012a78:	b9e0      	cbnz	r0, 8012ab4 <ucdr_deserialize_array_uint8_t+0x4c>
 8012a7a:	463e      	mov	r6, r7
 8012a7c:	e009      	b.n	8012a92 <ucdr_deserialize_array_uint8_t+0x2a>
 8012a7e:	68a9      	ldr	r1, [r5, #8]
 8012a80:	f004 fb73 	bl	801716a <memcpy>
 8012a84:	68aa      	ldr	r2, [r5, #8]
 8012a86:	692b      	ldr	r3, [r5, #16]
 8012a88:	4422      	add	r2, r4
 8012a8a:	4423      	add	r3, r4
 8012a8c:	1b36      	subs	r6, r6, r4
 8012a8e:	60aa      	str	r2, [r5, #8]
 8012a90:	612b      	str	r3, [r5, #16]
 8012a92:	2201      	movs	r2, #1
 8012a94:	4631      	mov	r1, r6
 8012a96:	4628      	mov	r0, r5
 8012a98:	f7f8 fb8a 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	1bb8      	subs	r0, r7, r6
 8012aa0:	4440      	add	r0, r8
 8012aa2:	4622      	mov	r2, r4
 8012aa4:	2c00      	cmp	r4, #0
 8012aa6:	d1ea      	bne.n	8012a7e <ucdr_deserialize_array_uint8_t+0x16>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	7da8      	ldrb	r0, [r5, #22]
 8012aac:	756b      	strb	r3, [r5, #21]
 8012aae:	4058      	eors	r0, r3
 8012ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ab4:	463a      	mov	r2, r7
 8012ab6:	68a9      	ldr	r1, [r5, #8]
 8012ab8:	4640      	mov	r0, r8
 8012aba:	f004 fb56 	bl	801716a <memcpy>
 8012abe:	68aa      	ldr	r2, [r5, #8]
 8012ac0:	692b      	ldr	r3, [r5, #16]
 8012ac2:	443a      	add	r2, r7
 8012ac4:	443b      	add	r3, r7
 8012ac6:	60aa      	str	r2, [r5, #8]
 8012ac8:	612b      	str	r3, [r5, #16]
 8012aca:	e7ed      	b.n	8012aa8 <ucdr_deserialize_array_uint8_t+0x40>

08012acc <ucdr_deserialize_endian_array_uint8_t>:
 8012acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	461f      	mov	r7, r3
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	4690      	mov	r8, r2
 8012ad8:	f7f8 fae2 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012adc:	b9e0      	cbnz	r0, 8012b18 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012ade:	463e      	mov	r6, r7
 8012ae0:	e009      	b.n	8012af6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012ae2:	68a9      	ldr	r1, [r5, #8]
 8012ae4:	f004 fb41 	bl	801716a <memcpy>
 8012ae8:	68ab      	ldr	r3, [r5, #8]
 8012aea:	6928      	ldr	r0, [r5, #16]
 8012aec:	4423      	add	r3, r4
 8012aee:	4420      	add	r0, r4
 8012af0:	1b36      	subs	r6, r6, r4
 8012af2:	60ab      	str	r3, [r5, #8]
 8012af4:	6128      	str	r0, [r5, #16]
 8012af6:	2201      	movs	r2, #1
 8012af8:	4631      	mov	r1, r6
 8012afa:	4628      	mov	r0, r5
 8012afc:	f7f8 fb58 	bl	800b1b0 <ucdr_check_final_buffer_behavior_array>
 8012b00:	4604      	mov	r4, r0
 8012b02:	1bb8      	subs	r0, r7, r6
 8012b04:	4440      	add	r0, r8
 8012b06:	4622      	mov	r2, r4
 8012b08:	2c00      	cmp	r4, #0
 8012b0a:	d1ea      	bne.n	8012ae2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	7da8      	ldrb	r0, [r5, #22]
 8012b10:	756b      	strb	r3, [r5, #21]
 8012b12:	4058      	eors	r0, r3
 8012b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b18:	463a      	mov	r2, r7
 8012b1a:	68a9      	ldr	r1, [r5, #8]
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	f004 fb24 	bl	801716a <memcpy>
 8012b22:	68aa      	ldr	r2, [r5, #8]
 8012b24:	692b      	ldr	r3, [r5, #16]
 8012b26:	443a      	add	r2, r7
 8012b28:	443b      	add	r3, r7
 8012b2a:	60aa      	str	r2, [r5, #8]
 8012b2c:	612b      	str	r3, [r5, #16]
 8012b2e:	e7ed      	b.n	8012b0c <ucdr_deserialize_endian_array_uint8_t+0x40>

08012b30 <ucdr_serialize_bool>:
 8012b30:	b538      	push	{r3, r4, r5, lr}
 8012b32:	460d      	mov	r5, r1
 8012b34:	2101      	movs	r1, #1
 8012b36:	4604      	mov	r4, r0
 8012b38:	f7f8 fabe 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012b3c:	b148      	cbz	r0, 8012b52 <ucdr_serialize_bool+0x22>
 8012b3e:	68a3      	ldr	r3, [r4, #8]
 8012b40:	701d      	strb	r5, [r3, #0]
 8012b42:	68a2      	ldr	r2, [r4, #8]
 8012b44:	6923      	ldr	r3, [r4, #16]
 8012b46:	2101      	movs	r1, #1
 8012b48:	440a      	add	r2, r1
 8012b4a:	440b      	add	r3, r1
 8012b4c:	60a2      	str	r2, [r4, #8]
 8012b4e:	6123      	str	r3, [r4, #16]
 8012b50:	7561      	strb	r1, [r4, #21]
 8012b52:	7da0      	ldrb	r0, [r4, #22]
 8012b54:	f080 0001 	eor.w	r0, r0, #1
 8012b58:	bd38      	pop	{r3, r4, r5, pc}
 8012b5a:	bf00      	nop

08012b5c <ucdr_deserialize_bool>:
 8012b5c:	b538      	push	{r3, r4, r5, lr}
 8012b5e:	460d      	mov	r5, r1
 8012b60:	2101      	movs	r1, #1
 8012b62:	4604      	mov	r4, r0
 8012b64:	f7f8 faa8 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012b68:	b160      	cbz	r0, 8012b84 <ucdr_deserialize_bool+0x28>
 8012b6a:	68a2      	ldr	r2, [r4, #8]
 8012b6c:	6923      	ldr	r3, [r4, #16]
 8012b6e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012b72:	3900      	subs	r1, #0
 8012b74:	bf18      	it	ne
 8012b76:	2101      	movne	r1, #1
 8012b78:	7029      	strb	r1, [r5, #0]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	60a2      	str	r2, [r4, #8]
 8012b80:	6123      	str	r3, [r4, #16]
 8012b82:	7561      	strb	r1, [r4, #21]
 8012b84:	7da0      	ldrb	r0, [r4, #22]
 8012b86:	f080 0001 	eor.w	r0, r0, #1
 8012b8a:	bd38      	pop	{r3, r4, r5, pc}

08012b8c <ucdr_serialize_uint8_t>:
 8012b8c:	b538      	push	{r3, r4, r5, lr}
 8012b8e:	460d      	mov	r5, r1
 8012b90:	2101      	movs	r1, #1
 8012b92:	4604      	mov	r4, r0
 8012b94:	f7f8 fa90 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012b98:	b148      	cbz	r0, 8012bae <ucdr_serialize_uint8_t+0x22>
 8012b9a:	68a3      	ldr	r3, [r4, #8]
 8012b9c:	701d      	strb	r5, [r3, #0]
 8012b9e:	68a2      	ldr	r2, [r4, #8]
 8012ba0:	6923      	ldr	r3, [r4, #16]
 8012ba2:	2101      	movs	r1, #1
 8012ba4:	440a      	add	r2, r1
 8012ba6:	440b      	add	r3, r1
 8012ba8:	60a2      	str	r2, [r4, #8]
 8012baa:	6123      	str	r3, [r4, #16]
 8012bac:	7561      	strb	r1, [r4, #21]
 8012bae:	7da0      	ldrb	r0, [r4, #22]
 8012bb0:	f080 0001 	eor.w	r0, r0, #1
 8012bb4:	bd38      	pop	{r3, r4, r5, pc}
 8012bb6:	bf00      	nop

08012bb8 <ucdr_deserialize_uint8_t>:
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	460d      	mov	r5, r1
 8012bbc:	2101      	movs	r1, #1
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	f7f8 fa7a 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012bc4:	b150      	cbz	r0, 8012bdc <ucdr_deserialize_uint8_t+0x24>
 8012bc6:	68a3      	ldr	r3, [r4, #8]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	702b      	strb	r3, [r5, #0]
 8012bcc:	68a2      	ldr	r2, [r4, #8]
 8012bce:	6923      	ldr	r3, [r4, #16]
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	440a      	add	r2, r1
 8012bd4:	440b      	add	r3, r1
 8012bd6:	60a2      	str	r2, [r4, #8]
 8012bd8:	6123      	str	r3, [r4, #16]
 8012bda:	7561      	strb	r1, [r4, #21]
 8012bdc:	7da0      	ldrb	r0, [r4, #22]
 8012bde:	f080 0001 	eor.w	r0, r0, #1
 8012be2:	bd38      	pop	{r3, r4, r5, pc}

08012be4 <ucdr_serialize_uint16_t>:
 8012be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012be8:	b082      	sub	sp, #8
 8012bea:	460b      	mov	r3, r1
 8012bec:	2102      	movs	r1, #2
 8012bee:	4604      	mov	r4, r0
 8012bf0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012bf4:	f7f8 fab4 	bl	800b160 <ucdr_buffer_alignment>
 8012bf8:	4601      	mov	r1, r0
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	7d67      	ldrb	r7, [r4, #21]
 8012bfe:	f7f8 faf3 	bl	800b1e8 <ucdr_advance_buffer>
 8012c02:	2102      	movs	r1, #2
 8012c04:	4620      	mov	r0, r4
 8012c06:	f7f8 fa4b 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012c0a:	bb78      	cbnz	r0, 8012c6c <ucdr_serialize_uint16_t+0x88>
 8012c0c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012c10:	42ab      	cmp	r3, r5
 8012c12:	d926      	bls.n	8012c62 <ucdr_serialize_uint16_t+0x7e>
 8012c14:	1b5e      	subs	r6, r3, r5
 8012c16:	60a3      	str	r3, [r4, #8]
 8012c18:	6923      	ldr	r3, [r4, #16]
 8012c1a:	f1c6 0802 	rsb	r8, r6, #2
 8012c1e:	4433      	add	r3, r6
 8012c20:	6123      	str	r3, [r4, #16]
 8012c22:	4641      	mov	r1, r8
 8012c24:	4620      	mov	r0, r4
 8012c26:	f7f8 fa47 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	d03b      	beq.n	8012ca6 <ucdr_serialize_uint16_t+0xc2>
 8012c2e:	7d23      	ldrb	r3, [r4, #20]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d04a      	beq.n	8012cca <ucdr_serialize_uint16_t+0xe6>
 8012c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c38:	702b      	strb	r3, [r5, #0]
 8012c3a:	2e00      	cmp	r6, #0
 8012c3c:	d040      	beq.n	8012cc0 <ucdr_serialize_uint16_t+0xdc>
 8012c3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c42:	706b      	strb	r3, [r5, #1]
 8012c44:	6923      	ldr	r3, [r4, #16]
 8012c46:	68a2      	ldr	r2, [r4, #8]
 8012c48:	7da0      	ldrb	r0, [r4, #22]
 8012c4a:	3302      	adds	r3, #2
 8012c4c:	1b9e      	subs	r6, r3, r6
 8012c4e:	4442      	add	r2, r8
 8012c50:	2302      	movs	r3, #2
 8012c52:	f080 0001 	eor.w	r0, r0, #1
 8012c56:	60a2      	str	r2, [r4, #8]
 8012c58:	6126      	str	r6, [r4, #16]
 8012c5a:	7563      	strb	r3, [r4, #21]
 8012c5c:	b002      	add	sp, #8
 8012c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c62:	2102      	movs	r1, #2
 8012c64:	4620      	mov	r0, r4
 8012c66:	f7f8 fa27 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012c6a:	b190      	cbz	r0, 8012c92 <ucdr_serialize_uint16_t+0xae>
 8012c6c:	7d23      	ldrb	r3, [r4, #20]
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	68a3      	ldr	r3, [r4, #8]
 8012c72:	d014      	beq.n	8012c9e <ucdr_serialize_uint16_t+0xba>
 8012c74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012c78:	701a      	strb	r2, [r3, #0]
 8012c7a:	68a3      	ldr	r3, [r4, #8]
 8012c7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c80:	705a      	strb	r2, [r3, #1]
 8012c82:	68a2      	ldr	r2, [r4, #8]
 8012c84:	6923      	ldr	r3, [r4, #16]
 8012c86:	3202      	adds	r2, #2
 8012c88:	3302      	adds	r3, #2
 8012c8a:	2102      	movs	r1, #2
 8012c8c:	60a2      	str	r2, [r4, #8]
 8012c8e:	6123      	str	r3, [r4, #16]
 8012c90:	7561      	strb	r1, [r4, #21]
 8012c92:	7da0      	ldrb	r0, [r4, #22]
 8012c94:	f080 0001 	eor.w	r0, r0, #1
 8012c98:	b002      	add	sp, #8
 8012c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012ca2:	801a      	strh	r2, [r3, #0]
 8012ca4:	e7ed      	b.n	8012c82 <ucdr_serialize_uint16_t+0x9e>
 8012ca6:	68a2      	ldr	r2, [r4, #8]
 8012ca8:	6923      	ldr	r3, [r4, #16]
 8012caa:	7da0      	ldrb	r0, [r4, #22]
 8012cac:	7567      	strb	r7, [r4, #21]
 8012cae:	1b92      	subs	r2, r2, r6
 8012cb0:	1b9b      	subs	r3, r3, r6
 8012cb2:	f080 0001 	eor.w	r0, r0, #1
 8012cb6:	60a2      	str	r2, [r4, #8]
 8012cb8:	6123      	str	r3, [r4, #16]
 8012cba:	b002      	add	sp, #8
 8012cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cc0:	68a3      	ldr	r3, [r4, #8]
 8012cc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012cc6:	701a      	strb	r2, [r3, #0]
 8012cc8:	e7bc      	b.n	8012c44 <ucdr_serialize_uint16_t+0x60>
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f10d 0506 	add.w	r5, sp, #6
 8012cd0:	4629      	mov	r1, r5
 8012cd2:	4632      	mov	r2, r6
 8012cd4:	f004 fa49 	bl	801716a <memcpy>
 8012cd8:	68a0      	ldr	r0, [r4, #8]
 8012cda:	4642      	mov	r2, r8
 8012cdc:	19a9      	adds	r1, r5, r6
 8012cde:	f004 fa44 	bl	801716a <memcpy>
 8012ce2:	e7af      	b.n	8012c44 <ucdr_serialize_uint16_t+0x60>

08012ce4 <ucdr_serialize_endian_uint16_t>:
 8012ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ce8:	b083      	sub	sp, #12
 8012cea:	460d      	mov	r5, r1
 8012cec:	2102      	movs	r1, #2
 8012cee:	4604      	mov	r4, r0
 8012cf0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012cf4:	f7f8 fa34 	bl	800b160 <ucdr_buffer_alignment>
 8012cf8:	4601      	mov	r1, r0
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d00:	f7f8 fa72 	bl	800b1e8 <ucdr_advance_buffer>
 8012d04:	2102      	movs	r1, #2
 8012d06:	4620      	mov	r0, r4
 8012d08:	f7f8 f9ca 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012d0c:	bb70      	cbnz	r0, 8012d6c <ucdr_serialize_endian_uint16_t+0x88>
 8012d0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012d12:	42be      	cmp	r6, r7
 8012d14:	d925      	bls.n	8012d62 <ucdr_serialize_endian_uint16_t+0x7e>
 8012d16:	6923      	ldr	r3, [r4, #16]
 8012d18:	60a6      	str	r6, [r4, #8]
 8012d1a:	1bf6      	subs	r6, r6, r7
 8012d1c:	4433      	add	r3, r6
 8012d1e:	f1c6 0902 	rsb	r9, r6, #2
 8012d22:	6123      	str	r3, [r4, #16]
 8012d24:	4649      	mov	r1, r9
 8012d26:	4620      	mov	r0, r4
 8012d28:	f7f8 f9c6 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d039      	beq.n	8012da4 <ucdr_serialize_endian_uint16_t+0xc0>
 8012d30:	2d01      	cmp	r5, #1
 8012d32:	d04a      	beq.n	8012dca <ucdr_serialize_endian_uint16_t+0xe6>
 8012d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d38:	703b      	strb	r3, [r7, #0]
 8012d3a:	2e00      	cmp	r6, #0
 8012d3c:	d040      	beq.n	8012dc0 <ucdr_serialize_endian_uint16_t+0xdc>
 8012d3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d42:	707b      	strb	r3, [r7, #1]
 8012d44:	6923      	ldr	r3, [r4, #16]
 8012d46:	68a2      	ldr	r2, [r4, #8]
 8012d48:	7da0      	ldrb	r0, [r4, #22]
 8012d4a:	3302      	adds	r3, #2
 8012d4c:	444a      	add	r2, r9
 8012d4e:	1b9b      	subs	r3, r3, r6
 8012d50:	2102      	movs	r1, #2
 8012d52:	f080 0001 	eor.w	r0, r0, #1
 8012d56:	60a2      	str	r2, [r4, #8]
 8012d58:	6123      	str	r3, [r4, #16]
 8012d5a:	7561      	strb	r1, [r4, #21]
 8012d5c:	b003      	add	sp, #12
 8012d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d62:	2102      	movs	r1, #2
 8012d64:	4620      	mov	r0, r4
 8012d66:	f7f8 f9a7 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012d6a:	b188      	cbz	r0, 8012d90 <ucdr_serialize_endian_uint16_t+0xac>
 8012d6c:	2d01      	cmp	r5, #1
 8012d6e:	68a3      	ldr	r3, [r4, #8]
 8012d70:	d014      	beq.n	8012d9c <ucdr_serialize_endian_uint16_t+0xb8>
 8012d72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012d76:	701a      	strb	r2, [r3, #0]
 8012d78:	68a3      	ldr	r3, [r4, #8]
 8012d7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d7e:	705a      	strb	r2, [r3, #1]
 8012d80:	68a2      	ldr	r2, [r4, #8]
 8012d82:	6923      	ldr	r3, [r4, #16]
 8012d84:	3202      	adds	r2, #2
 8012d86:	3302      	adds	r3, #2
 8012d88:	2102      	movs	r1, #2
 8012d8a:	60a2      	str	r2, [r4, #8]
 8012d8c:	6123      	str	r3, [r4, #16]
 8012d8e:	7561      	strb	r1, [r4, #21]
 8012d90:	7da0      	ldrb	r0, [r4, #22]
 8012d92:	f080 0001 	eor.w	r0, r0, #1
 8012d96:	b003      	add	sp, #12
 8012d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d9c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012da0:	801a      	strh	r2, [r3, #0]
 8012da2:	e7ed      	b.n	8012d80 <ucdr_serialize_endian_uint16_t+0x9c>
 8012da4:	68a2      	ldr	r2, [r4, #8]
 8012da6:	6923      	ldr	r3, [r4, #16]
 8012da8:	7da0      	ldrb	r0, [r4, #22]
 8012daa:	f884 8015 	strb.w	r8, [r4, #21]
 8012dae:	1b92      	subs	r2, r2, r6
 8012db0:	1b9b      	subs	r3, r3, r6
 8012db2:	f080 0001 	eor.w	r0, r0, #1
 8012db6:	60a2      	str	r2, [r4, #8]
 8012db8:	6123      	str	r3, [r4, #16]
 8012dba:	b003      	add	sp, #12
 8012dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dc0:	68a3      	ldr	r3, [r4, #8]
 8012dc2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dc6:	701a      	strb	r2, [r3, #0]
 8012dc8:	e7bc      	b.n	8012d44 <ucdr_serialize_endian_uint16_t+0x60>
 8012dca:	f10d 0506 	add.w	r5, sp, #6
 8012dce:	4629      	mov	r1, r5
 8012dd0:	4632      	mov	r2, r6
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	f004 f9c9 	bl	801716a <memcpy>
 8012dd8:	68a0      	ldr	r0, [r4, #8]
 8012dda:	464a      	mov	r2, r9
 8012ddc:	19a9      	adds	r1, r5, r6
 8012dde:	f004 f9c4 	bl	801716a <memcpy>
 8012de2:	e7af      	b.n	8012d44 <ucdr_serialize_endian_uint16_t+0x60>

08012de4 <ucdr_deserialize_uint16_t>:
 8012de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de8:	460d      	mov	r5, r1
 8012dea:	2102      	movs	r1, #2
 8012dec:	4604      	mov	r4, r0
 8012dee:	f7f8 f9b7 	bl	800b160 <ucdr_buffer_alignment>
 8012df2:	4601      	mov	r1, r0
 8012df4:	4620      	mov	r0, r4
 8012df6:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012dfa:	f7f8 f9f5 	bl	800b1e8 <ucdr_advance_buffer>
 8012dfe:	2102      	movs	r1, #2
 8012e00:	4620      	mov	r0, r4
 8012e02:	f7f8 f94d 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012e06:	bb60      	cbnz	r0, 8012e62 <ucdr_deserialize_uint16_t+0x7e>
 8012e08:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e0c:	42be      	cmp	r6, r7
 8012e0e:	d923      	bls.n	8012e58 <ucdr_deserialize_uint16_t+0x74>
 8012e10:	6923      	ldr	r3, [r4, #16]
 8012e12:	60a6      	str	r6, [r4, #8]
 8012e14:	1bf6      	subs	r6, r6, r7
 8012e16:	4433      	add	r3, r6
 8012e18:	f1c6 0902 	rsb	r9, r6, #2
 8012e1c:	6123      	str	r3, [r4, #16]
 8012e1e:	4649      	mov	r1, r9
 8012e20:	4620      	mov	r0, r4
 8012e22:	f7f8 f949 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d034      	beq.n	8012e94 <ucdr_deserialize_uint16_t+0xb0>
 8012e2a:	7d23      	ldrb	r3, [r4, #20]
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d042      	beq.n	8012eb6 <ucdr_deserialize_uint16_t+0xd2>
 8012e30:	787b      	ldrb	r3, [r7, #1]
 8012e32:	702b      	strb	r3, [r5, #0]
 8012e34:	2e00      	cmp	r6, #0
 8012e36:	d03a      	beq.n	8012eae <ucdr_deserialize_uint16_t+0xca>
 8012e38:	783b      	ldrb	r3, [r7, #0]
 8012e3a:	706b      	strb	r3, [r5, #1]
 8012e3c:	6923      	ldr	r3, [r4, #16]
 8012e3e:	68a2      	ldr	r2, [r4, #8]
 8012e40:	7da0      	ldrb	r0, [r4, #22]
 8012e42:	2102      	movs	r1, #2
 8012e44:	3302      	adds	r3, #2
 8012e46:	444a      	add	r2, r9
 8012e48:	1b9b      	subs	r3, r3, r6
 8012e4a:	7561      	strb	r1, [r4, #21]
 8012e4c:	60a2      	str	r2, [r4, #8]
 8012e4e:	6123      	str	r3, [r4, #16]
 8012e50:	f080 0001 	eor.w	r0, r0, #1
 8012e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e58:	2102      	movs	r1, #2
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	f7f8 f92c 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012e60:	b180      	cbz	r0, 8012e84 <ucdr_deserialize_uint16_t+0xa0>
 8012e62:	7d23      	ldrb	r3, [r4, #20]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	68a3      	ldr	r3, [r4, #8]
 8012e68:	d011      	beq.n	8012e8e <ucdr_deserialize_uint16_t+0xaa>
 8012e6a:	785b      	ldrb	r3, [r3, #1]
 8012e6c:	702b      	strb	r3, [r5, #0]
 8012e6e:	68a3      	ldr	r3, [r4, #8]
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	706b      	strb	r3, [r5, #1]
 8012e74:	68a2      	ldr	r2, [r4, #8]
 8012e76:	6923      	ldr	r3, [r4, #16]
 8012e78:	3202      	adds	r2, #2
 8012e7a:	3302      	adds	r3, #2
 8012e7c:	2102      	movs	r1, #2
 8012e7e:	60a2      	str	r2, [r4, #8]
 8012e80:	6123      	str	r3, [r4, #16]
 8012e82:	7561      	strb	r1, [r4, #21]
 8012e84:	7da0      	ldrb	r0, [r4, #22]
 8012e86:	f080 0001 	eor.w	r0, r0, #1
 8012e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e8e:	881b      	ldrh	r3, [r3, #0]
 8012e90:	802b      	strh	r3, [r5, #0]
 8012e92:	e7ef      	b.n	8012e74 <ucdr_deserialize_uint16_t+0x90>
 8012e94:	68a2      	ldr	r2, [r4, #8]
 8012e96:	6923      	ldr	r3, [r4, #16]
 8012e98:	7da0      	ldrb	r0, [r4, #22]
 8012e9a:	f884 8015 	strb.w	r8, [r4, #21]
 8012e9e:	1b92      	subs	r2, r2, r6
 8012ea0:	1b9b      	subs	r3, r3, r6
 8012ea2:	60a2      	str	r2, [r4, #8]
 8012ea4:	6123      	str	r3, [r4, #16]
 8012ea6:	f080 0001 	eor.w	r0, r0, #1
 8012eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eae:	68a3      	ldr	r3, [r4, #8]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	706b      	strb	r3, [r5, #1]
 8012eb4:	e7c2      	b.n	8012e3c <ucdr_deserialize_uint16_t+0x58>
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	4632      	mov	r2, r6
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f004 f955 	bl	801716a <memcpy>
 8012ec0:	68a1      	ldr	r1, [r4, #8]
 8012ec2:	464a      	mov	r2, r9
 8012ec4:	19a8      	adds	r0, r5, r6
 8012ec6:	f004 f950 	bl	801716a <memcpy>
 8012eca:	e7b7      	b.n	8012e3c <ucdr_deserialize_uint16_t+0x58>

08012ecc <ucdr_deserialize_endian_uint16_t>:
 8012ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed0:	460e      	mov	r6, r1
 8012ed2:	2102      	movs	r1, #2
 8012ed4:	4604      	mov	r4, r0
 8012ed6:	4615      	mov	r5, r2
 8012ed8:	f7f8 f942 	bl	800b160 <ucdr_buffer_alignment>
 8012edc:	4601      	mov	r1, r0
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012ee4:	f7f8 f980 	bl	800b1e8 <ucdr_advance_buffer>
 8012ee8:	2102      	movs	r1, #2
 8012eea:	4620      	mov	r0, r4
 8012eec:	f7f8 f8d8 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012ef0:	bb70      	cbnz	r0, 8012f50 <ucdr_deserialize_endian_uint16_t+0x84>
 8012ef2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8012ef6:	4547      	cmp	r7, r8
 8012ef8:	d925      	bls.n	8012f46 <ucdr_deserialize_endian_uint16_t+0x7a>
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	60a7      	str	r7, [r4, #8]
 8012efe:	eba7 0708 	sub.w	r7, r7, r8
 8012f02:	443b      	add	r3, r7
 8012f04:	f1c7 0a02 	rsb	sl, r7, #2
 8012f08:	6123      	str	r3, [r4, #16]
 8012f0a:	4651      	mov	r1, sl
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f7f8 f8d3 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012f12:	2800      	cmp	r0, #0
 8012f14:	d034      	beq.n	8012f80 <ucdr_deserialize_endian_uint16_t+0xb4>
 8012f16:	2e01      	cmp	r6, #1
 8012f18:	d043      	beq.n	8012fa2 <ucdr_deserialize_endian_uint16_t+0xd6>
 8012f1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012f1e:	702b      	strb	r3, [r5, #0]
 8012f20:	2f00      	cmp	r7, #0
 8012f22:	d03a      	beq.n	8012f9a <ucdr_deserialize_endian_uint16_t+0xce>
 8012f24:	f898 3000 	ldrb.w	r3, [r8]
 8012f28:	706b      	strb	r3, [r5, #1]
 8012f2a:	6923      	ldr	r3, [r4, #16]
 8012f2c:	68a2      	ldr	r2, [r4, #8]
 8012f2e:	7da0      	ldrb	r0, [r4, #22]
 8012f30:	2102      	movs	r1, #2
 8012f32:	3302      	adds	r3, #2
 8012f34:	4452      	add	r2, sl
 8012f36:	1bdb      	subs	r3, r3, r7
 8012f38:	7561      	strb	r1, [r4, #21]
 8012f3a:	60a2      	str	r2, [r4, #8]
 8012f3c:	6123      	str	r3, [r4, #16]
 8012f3e:	f080 0001 	eor.w	r0, r0, #1
 8012f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f46:	2102      	movs	r1, #2
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f7f8 f8b5 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012f4e:	b178      	cbz	r0, 8012f70 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012f50:	2e01      	cmp	r6, #1
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	d011      	beq.n	8012f7a <ucdr_deserialize_endian_uint16_t+0xae>
 8012f56:	785b      	ldrb	r3, [r3, #1]
 8012f58:	702b      	strb	r3, [r5, #0]
 8012f5a:	68a3      	ldr	r3, [r4, #8]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	706b      	strb	r3, [r5, #1]
 8012f60:	68a2      	ldr	r2, [r4, #8]
 8012f62:	6923      	ldr	r3, [r4, #16]
 8012f64:	3202      	adds	r2, #2
 8012f66:	3302      	adds	r3, #2
 8012f68:	2102      	movs	r1, #2
 8012f6a:	60a2      	str	r2, [r4, #8]
 8012f6c:	6123      	str	r3, [r4, #16]
 8012f6e:	7561      	strb	r1, [r4, #21]
 8012f70:	7da0      	ldrb	r0, [r4, #22]
 8012f72:	f080 0001 	eor.w	r0, r0, #1
 8012f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	802b      	strh	r3, [r5, #0]
 8012f7e:	e7ef      	b.n	8012f60 <ucdr_deserialize_endian_uint16_t+0x94>
 8012f80:	68a2      	ldr	r2, [r4, #8]
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	7da0      	ldrb	r0, [r4, #22]
 8012f86:	f884 9015 	strb.w	r9, [r4, #21]
 8012f8a:	1bd2      	subs	r2, r2, r7
 8012f8c:	1bdb      	subs	r3, r3, r7
 8012f8e:	60a2      	str	r2, [r4, #8]
 8012f90:	6123      	str	r3, [r4, #16]
 8012f92:	f080 0001 	eor.w	r0, r0, #1
 8012f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	706b      	strb	r3, [r5, #1]
 8012fa0:	e7c3      	b.n	8012f2a <ucdr_deserialize_endian_uint16_t+0x5e>
 8012fa2:	4641      	mov	r1, r8
 8012fa4:	463a      	mov	r2, r7
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f004 f8df 	bl	801716a <memcpy>
 8012fac:	68a1      	ldr	r1, [r4, #8]
 8012fae:	4652      	mov	r2, sl
 8012fb0:	19e8      	adds	r0, r5, r7
 8012fb2:	f004 f8da 	bl	801716a <memcpy>
 8012fb6:	e7b8      	b.n	8012f2a <ucdr_deserialize_endian_uint16_t+0x5e>

08012fb8 <ucdr_serialize_uint32_t>:
 8012fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbc:	b082      	sub	sp, #8
 8012fbe:	4604      	mov	r4, r0
 8012fc0:	9101      	str	r1, [sp, #4]
 8012fc2:	2104      	movs	r1, #4
 8012fc4:	f7f8 f8cc 	bl	800b160 <ucdr_buffer_alignment>
 8012fc8:	4601      	mov	r1, r0
 8012fca:	4620      	mov	r0, r4
 8012fcc:	7d67      	ldrb	r7, [r4, #21]
 8012fce:	f7f8 f90b 	bl	800b1e8 <ucdr_advance_buffer>
 8012fd2:	2104      	movs	r1, #4
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f7f8 f863 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8012fda:	2800      	cmp	r0, #0
 8012fdc:	d139      	bne.n	8013052 <ucdr_serialize_uint32_t+0x9a>
 8012fde:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012fe2:	42ab      	cmp	r3, r5
 8012fe4:	d930      	bls.n	8013048 <ucdr_serialize_uint32_t+0x90>
 8012fe6:	1b5e      	subs	r6, r3, r5
 8012fe8:	60a3      	str	r3, [r4, #8]
 8012fea:	6923      	ldr	r3, [r4, #16]
 8012fec:	f1c6 0804 	rsb	r8, r6, #4
 8012ff0:	4433      	add	r3, r6
 8012ff2:	6123      	str	r3, [r4, #16]
 8012ff4:	4641      	mov	r1, r8
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f7f8 f85e 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8012ffc:	2800      	cmp	r0, #0
 8012ffe:	d04c      	beq.n	801309a <ucdr_serialize_uint32_t+0xe2>
 8013000:	7d23      	ldrb	r3, [r4, #20]
 8013002:	2b01      	cmp	r3, #1
 8013004:	d063      	beq.n	80130ce <ucdr_serialize_uint32_t+0x116>
 8013006:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801300a:	702b      	strb	r3, [r5, #0]
 801300c:	2e00      	cmp	r6, #0
 801300e:	d051      	beq.n	80130b4 <ucdr_serialize_uint32_t+0xfc>
 8013010:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013014:	706b      	strb	r3, [r5, #1]
 8013016:	2e01      	cmp	r6, #1
 8013018:	d050      	beq.n	80130bc <ucdr_serialize_uint32_t+0x104>
 801301a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801301e:	70ab      	strb	r3, [r5, #2]
 8013020:	2e02      	cmp	r6, #2
 8013022:	d04f      	beq.n	80130c4 <ucdr_serialize_uint32_t+0x10c>
 8013024:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013028:	70eb      	strb	r3, [r5, #3]
 801302a:	6923      	ldr	r3, [r4, #16]
 801302c:	68a2      	ldr	r2, [r4, #8]
 801302e:	7da0      	ldrb	r0, [r4, #22]
 8013030:	3304      	adds	r3, #4
 8013032:	1b9e      	subs	r6, r3, r6
 8013034:	4442      	add	r2, r8
 8013036:	2304      	movs	r3, #4
 8013038:	f080 0001 	eor.w	r0, r0, #1
 801303c:	60a2      	str	r2, [r4, #8]
 801303e:	6126      	str	r6, [r4, #16]
 8013040:	7563      	strb	r3, [r4, #21]
 8013042:	b002      	add	sp, #8
 8013044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013048:	2104      	movs	r1, #4
 801304a:	4620      	mov	r0, r4
 801304c:	f7f8 f834 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013050:	b1d0      	cbz	r0, 8013088 <ucdr_serialize_uint32_t+0xd0>
 8013052:	7d23      	ldrb	r3, [r4, #20]
 8013054:	2b01      	cmp	r3, #1
 8013056:	68a3      	ldr	r3, [r4, #8]
 8013058:	d01c      	beq.n	8013094 <ucdr_serialize_uint32_t+0xdc>
 801305a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801305e:	701a      	strb	r2, [r3, #0]
 8013060:	68a3      	ldr	r3, [r4, #8]
 8013062:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013066:	705a      	strb	r2, [r3, #1]
 8013068:	68a3      	ldr	r3, [r4, #8]
 801306a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801306e:	709a      	strb	r2, [r3, #2]
 8013070:	68a3      	ldr	r3, [r4, #8]
 8013072:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013076:	70da      	strb	r2, [r3, #3]
 8013078:	68a2      	ldr	r2, [r4, #8]
 801307a:	6923      	ldr	r3, [r4, #16]
 801307c:	3204      	adds	r2, #4
 801307e:	3304      	adds	r3, #4
 8013080:	2104      	movs	r1, #4
 8013082:	60a2      	str	r2, [r4, #8]
 8013084:	6123      	str	r3, [r4, #16]
 8013086:	7561      	strb	r1, [r4, #21]
 8013088:	7da0      	ldrb	r0, [r4, #22]
 801308a:	f080 0001 	eor.w	r0, r0, #1
 801308e:	b002      	add	sp, #8
 8013090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013094:	9a01      	ldr	r2, [sp, #4]
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	e7ee      	b.n	8013078 <ucdr_serialize_uint32_t+0xc0>
 801309a:	68a2      	ldr	r2, [r4, #8]
 801309c:	6923      	ldr	r3, [r4, #16]
 801309e:	7da0      	ldrb	r0, [r4, #22]
 80130a0:	7567      	strb	r7, [r4, #21]
 80130a2:	1b92      	subs	r2, r2, r6
 80130a4:	1b9b      	subs	r3, r3, r6
 80130a6:	f080 0001 	eor.w	r0, r0, #1
 80130aa:	60a2      	str	r2, [r4, #8]
 80130ac:	6123      	str	r3, [r4, #16]
 80130ae:	b002      	add	sp, #8
 80130b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80130ba:	701a      	strb	r2, [r3, #0]
 80130bc:	68a3      	ldr	r3, [r4, #8]
 80130be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80130c2:	701a      	strb	r2, [r3, #0]
 80130c4:	68a3      	ldr	r3, [r4, #8]
 80130c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80130ca:	701a      	strb	r2, [r3, #0]
 80130cc:	e7ad      	b.n	801302a <ucdr_serialize_uint32_t+0x72>
 80130ce:	4628      	mov	r0, r5
 80130d0:	ad01      	add	r5, sp, #4
 80130d2:	4629      	mov	r1, r5
 80130d4:	4632      	mov	r2, r6
 80130d6:	f004 f848 	bl	801716a <memcpy>
 80130da:	68a0      	ldr	r0, [r4, #8]
 80130dc:	4642      	mov	r2, r8
 80130de:	19a9      	adds	r1, r5, r6
 80130e0:	f004 f843 	bl	801716a <memcpy>
 80130e4:	e7a1      	b.n	801302a <ucdr_serialize_uint32_t+0x72>
 80130e6:	bf00      	nop

080130e8 <ucdr_serialize_endian_uint32_t>:
 80130e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80130ec:	b083      	sub	sp, #12
 80130ee:	460d      	mov	r5, r1
 80130f0:	2104      	movs	r1, #4
 80130f2:	4604      	mov	r4, r0
 80130f4:	9201      	str	r2, [sp, #4]
 80130f6:	f7f8 f833 	bl	800b160 <ucdr_buffer_alignment>
 80130fa:	4601      	mov	r1, r0
 80130fc:	4620      	mov	r0, r4
 80130fe:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013102:	f7f8 f871 	bl	800b1e8 <ucdr_advance_buffer>
 8013106:	2104      	movs	r1, #4
 8013108:	4620      	mov	r0, r4
 801310a:	f7f7 ffc9 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801310e:	2800      	cmp	r0, #0
 8013110:	d138      	bne.n	8013184 <ucdr_serialize_endian_uint32_t+0x9c>
 8013112:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013116:	42b7      	cmp	r7, r6
 8013118:	d92f      	bls.n	801317a <ucdr_serialize_endian_uint32_t+0x92>
 801311a:	6923      	ldr	r3, [r4, #16]
 801311c:	60a7      	str	r7, [r4, #8]
 801311e:	1bbf      	subs	r7, r7, r6
 8013120:	443b      	add	r3, r7
 8013122:	f1c7 0904 	rsb	r9, r7, #4
 8013126:	6123      	str	r3, [r4, #16]
 8013128:	4649      	mov	r1, r9
 801312a:	4620      	mov	r0, r4
 801312c:	f7f7 ffc4 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013130:	2800      	cmp	r0, #0
 8013132:	d04a      	beq.n	80131ca <ucdr_serialize_endian_uint32_t+0xe2>
 8013134:	2d01      	cmp	r5, #1
 8013136:	d063      	beq.n	8013200 <ucdr_serialize_endian_uint32_t+0x118>
 8013138:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801313c:	7033      	strb	r3, [r6, #0]
 801313e:	2f00      	cmp	r7, #0
 8013140:	d051      	beq.n	80131e6 <ucdr_serialize_endian_uint32_t+0xfe>
 8013142:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013146:	7073      	strb	r3, [r6, #1]
 8013148:	2f01      	cmp	r7, #1
 801314a:	d050      	beq.n	80131ee <ucdr_serialize_endian_uint32_t+0x106>
 801314c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013150:	70b3      	strb	r3, [r6, #2]
 8013152:	2f02      	cmp	r7, #2
 8013154:	d04f      	beq.n	80131f6 <ucdr_serialize_endian_uint32_t+0x10e>
 8013156:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801315a:	70f3      	strb	r3, [r6, #3]
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	68a2      	ldr	r2, [r4, #8]
 8013160:	7da0      	ldrb	r0, [r4, #22]
 8013162:	3304      	adds	r3, #4
 8013164:	444a      	add	r2, r9
 8013166:	1bdb      	subs	r3, r3, r7
 8013168:	2104      	movs	r1, #4
 801316a:	f080 0001 	eor.w	r0, r0, #1
 801316e:	60a2      	str	r2, [r4, #8]
 8013170:	6123      	str	r3, [r4, #16]
 8013172:	7561      	strb	r1, [r4, #21]
 8013174:	b003      	add	sp, #12
 8013176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801317a:	2104      	movs	r1, #4
 801317c:	4620      	mov	r0, r4
 801317e:	f7f7 ff9b 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013182:	b1c8      	cbz	r0, 80131b8 <ucdr_serialize_endian_uint32_t+0xd0>
 8013184:	2d01      	cmp	r5, #1
 8013186:	68a3      	ldr	r3, [r4, #8]
 8013188:	d01c      	beq.n	80131c4 <ucdr_serialize_endian_uint32_t+0xdc>
 801318a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801318e:	701a      	strb	r2, [r3, #0]
 8013190:	68a3      	ldr	r3, [r4, #8]
 8013192:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013196:	705a      	strb	r2, [r3, #1]
 8013198:	68a3      	ldr	r3, [r4, #8]
 801319a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801319e:	709a      	strb	r2, [r3, #2]
 80131a0:	68a3      	ldr	r3, [r4, #8]
 80131a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131a6:	70da      	strb	r2, [r3, #3]
 80131a8:	68a2      	ldr	r2, [r4, #8]
 80131aa:	6923      	ldr	r3, [r4, #16]
 80131ac:	3204      	adds	r2, #4
 80131ae:	3304      	adds	r3, #4
 80131b0:	2104      	movs	r1, #4
 80131b2:	60a2      	str	r2, [r4, #8]
 80131b4:	6123      	str	r3, [r4, #16]
 80131b6:	7561      	strb	r1, [r4, #21]
 80131b8:	7da0      	ldrb	r0, [r4, #22]
 80131ba:	f080 0001 	eor.w	r0, r0, #1
 80131be:	b003      	add	sp, #12
 80131c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131c4:	9a01      	ldr	r2, [sp, #4]
 80131c6:	601a      	str	r2, [r3, #0]
 80131c8:	e7ee      	b.n	80131a8 <ucdr_serialize_endian_uint32_t+0xc0>
 80131ca:	68a2      	ldr	r2, [r4, #8]
 80131cc:	6923      	ldr	r3, [r4, #16]
 80131ce:	7da0      	ldrb	r0, [r4, #22]
 80131d0:	f884 8015 	strb.w	r8, [r4, #21]
 80131d4:	1bd2      	subs	r2, r2, r7
 80131d6:	1bdb      	subs	r3, r3, r7
 80131d8:	f080 0001 	eor.w	r0, r0, #1
 80131dc:	60a2      	str	r2, [r4, #8]
 80131de:	6123      	str	r3, [r4, #16]
 80131e0:	b003      	add	sp, #12
 80131e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131e6:	68a3      	ldr	r3, [r4, #8]
 80131e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	68a3      	ldr	r3, [r4, #8]
 80131f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80131f4:	701a      	strb	r2, [r3, #0]
 80131f6:	68a3      	ldr	r3, [r4, #8]
 80131f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80131fc:	701a      	strb	r2, [r3, #0]
 80131fe:	e7ad      	b.n	801315c <ucdr_serialize_endian_uint32_t+0x74>
 8013200:	ad01      	add	r5, sp, #4
 8013202:	4629      	mov	r1, r5
 8013204:	463a      	mov	r2, r7
 8013206:	4630      	mov	r0, r6
 8013208:	f003 ffaf 	bl	801716a <memcpy>
 801320c:	68a0      	ldr	r0, [r4, #8]
 801320e:	464a      	mov	r2, r9
 8013210:	19e9      	adds	r1, r5, r7
 8013212:	f003 ffaa 	bl	801716a <memcpy>
 8013216:	e7a1      	b.n	801315c <ucdr_serialize_endian_uint32_t+0x74>

08013218 <ucdr_deserialize_uint32_t>:
 8013218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801321c:	460d      	mov	r5, r1
 801321e:	2104      	movs	r1, #4
 8013220:	4604      	mov	r4, r0
 8013222:	f7f7 ff9d 	bl	800b160 <ucdr_buffer_alignment>
 8013226:	4601      	mov	r1, r0
 8013228:	4620      	mov	r0, r4
 801322a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801322e:	f7f7 ffdb 	bl	800b1e8 <ucdr_advance_buffer>
 8013232:	2104      	movs	r1, #4
 8013234:	4620      	mov	r0, r4
 8013236:	f7f7 ff33 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801323a:	2800      	cmp	r0, #0
 801323c:	d138      	bne.n	80132b0 <ucdr_deserialize_uint32_t+0x98>
 801323e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013242:	42b7      	cmp	r7, r6
 8013244:	d92f      	bls.n	80132a6 <ucdr_deserialize_uint32_t+0x8e>
 8013246:	6923      	ldr	r3, [r4, #16]
 8013248:	60a7      	str	r7, [r4, #8]
 801324a:	1bbf      	subs	r7, r7, r6
 801324c:	443b      	add	r3, r7
 801324e:	f1c7 0904 	rsb	r9, r7, #4
 8013252:	6123      	str	r3, [r4, #16]
 8013254:	4649      	mov	r1, r9
 8013256:	4620      	mov	r0, r4
 8013258:	f7f7 ff2e 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 801325c:	2800      	cmp	r0, #0
 801325e:	d046      	beq.n	80132ee <ucdr_deserialize_uint32_t+0xd6>
 8013260:	7d23      	ldrb	r3, [r4, #20]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d05c      	beq.n	8013320 <ucdr_deserialize_uint32_t+0x108>
 8013266:	78f3      	ldrb	r3, [r6, #3]
 8013268:	702b      	strb	r3, [r5, #0]
 801326a:	2f00      	cmp	r7, #0
 801326c:	d04c      	beq.n	8013308 <ucdr_deserialize_uint32_t+0xf0>
 801326e:	78b3      	ldrb	r3, [r6, #2]
 8013270:	706b      	strb	r3, [r5, #1]
 8013272:	2f01      	cmp	r7, #1
 8013274:	f105 0302 	add.w	r3, r5, #2
 8013278:	d04a      	beq.n	8013310 <ucdr_deserialize_uint32_t+0xf8>
 801327a:	7873      	ldrb	r3, [r6, #1]
 801327c:	70ab      	strb	r3, [r5, #2]
 801327e:	2f02      	cmp	r7, #2
 8013280:	f105 0303 	add.w	r3, r5, #3
 8013284:	d048      	beq.n	8013318 <ucdr_deserialize_uint32_t+0x100>
 8013286:	7833      	ldrb	r3, [r6, #0]
 8013288:	70eb      	strb	r3, [r5, #3]
 801328a:	6923      	ldr	r3, [r4, #16]
 801328c:	68a2      	ldr	r2, [r4, #8]
 801328e:	7da0      	ldrb	r0, [r4, #22]
 8013290:	2104      	movs	r1, #4
 8013292:	3304      	adds	r3, #4
 8013294:	444a      	add	r2, r9
 8013296:	1bdb      	subs	r3, r3, r7
 8013298:	7561      	strb	r1, [r4, #21]
 801329a:	60a2      	str	r2, [r4, #8]
 801329c:	6123      	str	r3, [r4, #16]
 801329e:	f080 0001 	eor.w	r0, r0, #1
 80132a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132a6:	2104      	movs	r1, #4
 80132a8:	4620      	mov	r0, r4
 80132aa:	f7f7 ff05 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 80132ae:	b1b0      	cbz	r0, 80132de <ucdr_deserialize_uint32_t+0xc6>
 80132b0:	7d23      	ldrb	r3, [r4, #20]
 80132b2:	2b01      	cmp	r3, #1
 80132b4:	68a3      	ldr	r3, [r4, #8]
 80132b6:	d017      	beq.n	80132e8 <ucdr_deserialize_uint32_t+0xd0>
 80132b8:	78db      	ldrb	r3, [r3, #3]
 80132ba:	702b      	strb	r3, [r5, #0]
 80132bc:	68a3      	ldr	r3, [r4, #8]
 80132be:	789b      	ldrb	r3, [r3, #2]
 80132c0:	706b      	strb	r3, [r5, #1]
 80132c2:	68a3      	ldr	r3, [r4, #8]
 80132c4:	785b      	ldrb	r3, [r3, #1]
 80132c6:	70ab      	strb	r3, [r5, #2]
 80132c8:	68a3      	ldr	r3, [r4, #8]
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	70eb      	strb	r3, [r5, #3]
 80132ce:	68a2      	ldr	r2, [r4, #8]
 80132d0:	6923      	ldr	r3, [r4, #16]
 80132d2:	3204      	adds	r2, #4
 80132d4:	3304      	adds	r3, #4
 80132d6:	2104      	movs	r1, #4
 80132d8:	60a2      	str	r2, [r4, #8]
 80132da:	6123      	str	r3, [r4, #16]
 80132dc:	7561      	strb	r1, [r4, #21]
 80132de:	7da0      	ldrb	r0, [r4, #22]
 80132e0:	f080 0001 	eor.w	r0, r0, #1
 80132e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	602b      	str	r3, [r5, #0]
 80132ec:	e7ef      	b.n	80132ce <ucdr_deserialize_uint32_t+0xb6>
 80132ee:	68a2      	ldr	r2, [r4, #8]
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	7da0      	ldrb	r0, [r4, #22]
 80132f4:	f884 8015 	strb.w	r8, [r4, #21]
 80132f8:	1bd2      	subs	r2, r2, r7
 80132fa:	1bdb      	subs	r3, r3, r7
 80132fc:	60a2      	str	r2, [r4, #8]
 80132fe:	6123      	str	r3, [r4, #16]
 8013300:	f080 0001 	eor.w	r0, r0, #1
 8013304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013308:	68a3      	ldr	r3, [r4, #8]
 801330a:	789b      	ldrb	r3, [r3, #2]
 801330c:	706b      	strb	r3, [r5, #1]
 801330e:	1cab      	adds	r3, r5, #2
 8013310:	68a2      	ldr	r2, [r4, #8]
 8013312:	7852      	ldrb	r2, [r2, #1]
 8013314:	f803 2b01 	strb.w	r2, [r3], #1
 8013318:	68a2      	ldr	r2, [r4, #8]
 801331a:	7812      	ldrb	r2, [r2, #0]
 801331c:	701a      	strb	r2, [r3, #0]
 801331e:	e7b4      	b.n	801328a <ucdr_deserialize_uint32_t+0x72>
 8013320:	4631      	mov	r1, r6
 8013322:	463a      	mov	r2, r7
 8013324:	4628      	mov	r0, r5
 8013326:	f003 ff20 	bl	801716a <memcpy>
 801332a:	68a1      	ldr	r1, [r4, #8]
 801332c:	464a      	mov	r2, r9
 801332e:	19e8      	adds	r0, r5, r7
 8013330:	f003 ff1b 	bl	801716a <memcpy>
 8013334:	e7a9      	b.n	801328a <ucdr_deserialize_uint32_t+0x72>
 8013336:	bf00      	nop

08013338 <ucdr_deserialize_endian_uint32_t>:
 8013338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801333c:	460e      	mov	r6, r1
 801333e:	2104      	movs	r1, #4
 8013340:	4604      	mov	r4, r0
 8013342:	4615      	mov	r5, r2
 8013344:	f7f7 ff0c 	bl	800b160 <ucdr_buffer_alignment>
 8013348:	4601      	mov	r1, r0
 801334a:	4620      	mov	r0, r4
 801334c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013350:	f7f7 ff4a 	bl	800b1e8 <ucdr_advance_buffer>
 8013354:	2104      	movs	r1, #4
 8013356:	4620      	mov	r0, r4
 8013358:	f7f7 fea2 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801335c:	2800      	cmp	r0, #0
 801335e:	d13c      	bne.n	80133da <ucdr_deserialize_endian_uint32_t+0xa2>
 8013360:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8013364:	42bb      	cmp	r3, r7
 8013366:	d933      	bls.n	80133d0 <ucdr_deserialize_endian_uint32_t+0x98>
 8013368:	eba3 0807 	sub.w	r8, r3, r7
 801336c:	60a3      	str	r3, [r4, #8]
 801336e:	6923      	ldr	r3, [r4, #16]
 8013370:	f1c8 0a04 	rsb	sl, r8, #4
 8013374:	4443      	add	r3, r8
 8013376:	6123      	str	r3, [r4, #16]
 8013378:	4651      	mov	r1, sl
 801337a:	4620      	mov	r0, r4
 801337c:	f7f7 fe9c 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013380:	2800      	cmp	r0, #0
 8013382:	d048      	beq.n	8013416 <ucdr_deserialize_endian_uint32_t+0xde>
 8013384:	2e01      	cmp	r6, #1
 8013386:	d061      	beq.n	801344c <ucdr_deserialize_endian_uint32_t+0x114>
 8013388:	78fb      	ldrb	r3, [r7, #3]
 801338a:	702b      	strb	r3, [r5, #0]
 801338c:	f1b8 0f00 	cmp.w	r8, #0
 8013390:	d050      	beq.n	8013434 <ucdr_deserialize_endian_uint32_t+0xfc>
 8013392:	78bb      	ldrb	r3, [r7, #2]
 8013394:	706b      	strb	r3, [r5, #1]
 8013396:	f1b8 0f01 	cmp.w	r8, #1
 801339a:	f105 0302 	add.w	r3, r5, #2
 801339e:	d04d      	beq.n	801343c <ucdr_deserialize_endian_uint32_t+0x104>
 80133a0:	787b      	ldrb	r3, [r7, #1]
 80133a2:	70ab      	strb	r3, [r5, #2]
 80133a4:	f1b8 0f02 	cmp.w	r8, #2
 80133a8:	f105 0303 	add.w	r3, r5, #3
 80133ac:	d04a      	beq.n	8013444 <ucdr_deserialize_endian_uint32_t+0x10c>
 80133ae:	783b      	ldrb	r3, [r7, #0]
 80133b0:	70eb      	strb	r3, [r5, #3]
 80133b2:	6923      	ldr	r3, [r4, #16]
 80133b4:	68a2      	ldr	r2, [r4, #8]
 80133b6:	7da0      	ldrb	r0, [r4, #22]
 80133b8:	2104      	movs	r1, #4
 80133ba:	3304      	adds	r3, #4
 80133bc:	4452      	add	r2, sl
 80133be:	eba3 0308 	sub.w	r3, r3, r8
 80133c2:	7561      	strb	r1, [r4, #21]
 80133c4:	60a2      	str	r2, [r4, #8]
 80133c6:	6123      	str	r3, [r4, #16]
 80133c8:	f080 0001 	eor.w	r0, r0, #1
 80133cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133d0:	2104      	movs	r1, #4
 80133d2:	4620      	mov	r0, r4
 80133d4:	f7f7 fe70 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 80133d8:	b1a8      	cbz	r0, 8013406 <ucdr_deserialize_endian_uint32_t+0xce>
 80133da:	2e01      	cmp	r6, #1
 80133dc:	68a3      	ldr	r3, [r4, #8]
 80133de:	d017      	beq.n	8013410 <ucdr_deserialize_endian_uint32_t+0xd8>
 80133e0:	78db      	ldrb	r3, [r3, #3]
 80133e2:	702b      	strb	r3, [r5, #0]
 80133e4:	68a3      	ldr	r3, [r4, #8]
 80133e6:	789b      	ldrb	r3, [r3, #2]
 80133e8:	706b      	strb	r3, [r5, #1]
 80133ea:	68a3      	ldr	r3, [r4, #8]
 80133ec:	785b      	ldrb	r3, [r3, #1]
 80133ee:	70ab      	strb	r3, [r5, #2]
 80133f0:	68a3      	ldr	r3, [r4, #8]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	70eb      	strb	r3, [r5, #3]
 80133f6:	68a2      	ldr	r2, [r4, #8]
 80133f8:	6923      	ldr	r3, [r4, #16]
 80133fa:	3204      	adds	r2, #4
 80133fc:	3304      	adds	r3, #4
 80133fe:	2104      	movs	r1, #4
 8013400:	60a2      	str	r2, [r4, #8]
 8013402:	6123      	str	r3, [r4, #16]
 8013404:	7561      	strb	r1, [r4, #21]
 8013406:	7da0      	ldrb	r0, [r4, #22]
 8013408:	f080 0001 	eor.w	r0, r0, #1
 801340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	e7ef      	b.n	80133f6 <ucdr_deserialize_endian_uint32_t+0xbe>
 8013416:	68a2      	ldr	r2, [r4, #8]
 8013418:	6923      	ldr	r3, [r4, #16]
 801341a:	7da0      	ldrb	r0, [r4, #22]
 801341c:	f884 9015 	strb.w	r9, [r4, #21]
 8013420:	eba2 0208 	sub.w	r2, r2, r8
 8013424:	eba3 0308 	sub.w	r3, r3, r8
 8013428:	60a2      	str	r2, [r4, #8]
 801342a:	6123      	str	r3, [r4, #16]
 801342c:	f080 0001 	eor.w	r0, r0, #1
 8013430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013434:	68a3      	ldr	r3, [r4, #8]
 8013436:	789b      	ldrb	r3, [r3, #2]
 8013438:	706b      	strb	r3, [r5, #1]
 801343a:	1cab      	adds	r3, r5, #2
 801343c:	68a2      	ldr	r2, [r4, #8]
 801343e:	7852      	ldrb	r2, [r2, #1]
 8013440:	f803 2b01 	strb.w	r2, [r3], #1
 8013444:	68a2      	ldr	r2, [r4, #8]
 8013446:	7812      	ldrb	r2, [r2, #0]
 8013448:	701a      	strb	r2, [r3, #0]
 801344a:	e7b2      	b.n	80133b2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801344c:	4639      	mov	r1, r7
 801344e:	4642      	mov	r2, r8
 8013450:	4628      	mov	r0, r5
 8013452:	f003 fe8a 	bl	801716a <memcpy>
 8013456:	68a1      	ldr	r1, [r4, #8]
 8013458:	4652      	mov	r2, sl
 801345a:	eb05 0008 	add.w	r0, r5, r8
 801345e:	f003 fe84 	bl	801716a <memcpy>
 8013462:	e7a6      	b.n	80133b2 <ucdr_deserialize_endian_uint32_t+0x7a>

08013464 <ucdr_serialize_uint64_t>:
 8013464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013468:	2108      	movs	r1, #8
 801346a:	b082      	sub	sp, #8
 801346c:	4604      	mov	r4, r0
 801346e:	e9cd 2300 	strd	r2, r3, [sp]
 8013472:	f7f7 fe75 	bl	800b160 <ucdr_buffer_alignment>
 8013476:	4601      	mov	r1, r0
 8013478:	4620      	mov	r0, r4
 801347a:	7d67      	ldrb	r7, [r4, #21]
 801347c:	f7f7 feb4 	bl	800b1e8 <ucdr_advance_buffer>
 8013480:	2108      	movs	r1, #8
 8013482:	4620      	mov	r0, r4
 8013484:	f7f7 fe0c 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8013488:	2800      	cmp	r0, #0
 801348a:	d14e      	bne.n	801352a <ucdr_serialize_uint64_t+0xc6>
 801348c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013490:	42ab      	cmp	r3, r5
 8013492:	d945      	bls.n	8013520 <ucdr_serialize_uint64_t+0xbc>
 8013494:	1b5e      	subs	r6, r3, r5
 8013496:	60a3      	str	r3, [r4, #8]
 8013498:	6923      	ldr	r3, [r4, #16]
 801349a:	f1c6 0808 	rsb	r8, r6, #8
 801349e:	4433      	add	r3, r6
 80134a0:	6123      	str	r3, [r4, #16]
 80134a2:	4641      	mov	r1, r8
 80134a4:	4620      	mov	r0, r4
 80134a6:	f7f7 fe07 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d074      	beq.n	8013598 <ucdr_serialize_uint64_t+0x134>
 80134ae:	7d23      	ldrb	r3, [r4, #20]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	f000 809b 	beq.w	80135ec <ucdr_serialize_uint64_t+0x188>
 80134b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80134ba:	702b      	strb	r3, [r5, #0]
 80134bc:	2e00      	cmp	r6, #0
 80134be:	d078      	beq.n	80135b2 <ucdr_serialize_uint64_t+0x14e>
 80134c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80134c4:	706b      	strb	r3, [r5, #1]
 80134c6:	2e01      	cmp	r6, #1
 80134c8:	d077      	beq.n	80135ba <ucdr_serialize_uint64_t+0x156>
 80134ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80134ce:	70ab      	strb	r3, [r5, #2]
 80134d0:	2e02      	cmp	r6, #2
 80134d2:	d076      	beq.n	80135c2 <ucdr_serialize_uint64_t+0x15e>
 80134d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80134d8:	70eb      	strb	r3, [r5, #3]
 80134da:	2e03      	cmp	r6, #3
 80134dc:	d075      	beq.n	80135ca <ucdr_serialize_uint64_t+0x166>
 80134de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80134e2:	712b      	strb	r3, [r5, #4]
 80134e4:	2e04      	cmp	r6, #4
 80134e6:	d074      	beq.n	80135d2 <ucdr_serialize_uint64_t+0x16e>
 80134e8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80134ec:	716b      	strb	r3, [r5, #5]
 80134ee:	2e05      	cmp	r6, #5
 80134f0:	d073      	beq.n	80135da <ucdr_serialize_uint64_t+0x176>
 80134f2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80134f6:	71ab      	strb	r3, [r5, #6]
 80134f8:	2e06      	cmp	r6, #6
 80134fa:	d072      	beq.n	80135e2 <ucdr_serialize_uint64_t+0x17e>
 80134fc:	f89d 3000 	ldrb.w	r3, [sp]
 8013500:	71eb      	strb	r3, [r5, #7]
 8013502:	6923      	ldr	r3, [r4, #16]
 8013504:	68a2      	ldr	r2, [r4, #8]
 8013506:	7da0      	ldrb	r0, [r4, #22]
 8013508:	3308      	adds	r3, #8
 801350a:	1b9e      	subs	r6, r3, r6
 801350c:	4442      	add	r2, r8
 801350e:	2308      	movs	r3, #8
 8013510:	f080 0001 	eor.w	r0, r0, #1
 8013514:	60a2      	str	r2, [r4, #8]
 8013516:	6126      	str	r6, [r4, #16]
 8013518:	7563      	strb	r3, [r4, #21]
 801351a:	b002      	add	sp, #8
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013520:	2108      	movs	r1, #8
 8013522:	4620      	mov	r0, r4
 8013524:	f7f7 fdc8 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013528:	b350      	cbz	r0, 8013580 <ucdr_serialize_uint64_t+0x11c>
 801352a:	7d23      	ldrb	r3, [r4, #20]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d02d      	beq.n	801358c <ucdr_serialize_uint64_t+0x128>
 8013530:	68a3      	ldr	r3, [r4, #8]
 8013532:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013536:	701a      	strb	r2, [r3, #0]
 8013538:	68a3      	ldr	r3, [r4, #8]
 801353a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801353e:	705a      	strb	r2, [r3, #1]
 8013540:	68a3      	ldr	r3, [r4, #8]
 8013542:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013546:	709a      	strb	r2, [r3, #2]
 8013548:	68a3      	ldr	r3, [r4, #8]
 801354a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801354e:	70da      	strb	r2, [r3, #3]
 8013550:	68a3      	ldr	r3, [r4, #8]
 8013552:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8013556:	711a      	strb	r2, [r3, #4]
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801355e:	715a      	strb	r2, [r3, #5]
 8013560:	68a3      	ldr	r3, [r4, #8]
 8013562:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8013566:	719a      	strb	r2, [r3, #6]
 8013568:	68a3      	ldr	r3, [r4, #8]
 801356a:	f89d 2000 	ldrb.w	r2, [sp]
 801356e:	71da      	strb	r2, [r3, #7]
 8013570:	68a2      	ldr	r2, [r4, #8]
 8013572:	6923      	ldr	r3, [r4, #16]
 8013574:	3208      	adds	r2, #8
 8013576:	3308      	adds	r3, #8
 8013578:	2108      	movs	r1, #8
 801357a:	60a2      	str	r2, [r4, #8]
 801357c:	6123      	str	r3, [r4, #16]
 801357e:	7561      	strb	r1, [r4, #21]
 8013580:	7da0      	ldrb	r0, [r4, #22]
 8013582:	f080 0001 	eor.w	r0, r0, #1
 8013586:	b002      	add	sp, #8
 8013588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801358c:	466b      	mov	r3, sp
 801358e:	cb03      	ldmia	r3!, {r0, r1}
 8013590:	68a3      	ldr	r3, [r4, #8]
 8013592:	6018      	str	r0, [r3, #0]
 8013594:	6059      	str	r1, [r3, #4]
 8013596:	e7eb      	b.n	8013570 <ucdr_serialize_uint64_t+0x10c>
 8013598:	68a2      	ldr	r2, [r4, #8]
 801359a:	6923      	ldr	r3, [r4, #16]
 801359c:	7da0      	ldrb	r0, [r4, #22]
 801359e:	7567      	strb	r7, [r4, #21]
 80135a0:	1b92      	subs	r2, r2, r6
 80135a2:	1b9b      	subs	r3, r3, r6
 80135a4:	f080 0001 	eor.w	r0, r0, #1
 80135a8:	60a2      	str	r2, [r4, #8]
 80135aa:	6123      	str	r3, [r4, #16]
 80135ac:	b002      	add	sp, #8
 80135ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b2:	68a3      	ldr	r3, [r4, #8]
 80135b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80135b8:	701a      	strb	r2, [r3, #0]
 80135ba:	68a3      	ldr	r3, [r4, #8]
 80135bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80135c0:	701a      	strb	r2, [r3, #0]
 80135c2:	68a3      	ldr	r3, [r4, #8]
 80135c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80135c8:	701a      	strb	r2, [r3, #0]
 80135ca:	68a3      	ldr	r3, [r4, #8]
 80135cc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80135d0:	701a      	strb	r2, [r3, #0]
 80135d2:	68a3      	ldr	r3, [r4, #8]
 80135d4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80135d8:	701a      	strb	r2, [r3, #0]
 80135da:	68a3      	ldr	r3, [r4, #8]
 80135dc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80135e0:	701a      	strb	r2, [r3, #0]
 80135e2:	68a3      	ldr	r3, [r4, #8]
 80135e4:	f89d 2000 	ldrb.w	r2, [sp]
 80135e8:	701a      	strb	r2, [r3, #0]
 80135ea:	e78a      	b.n	8013502 <ucdr_serialize_uint64_t+0x9e>
 80135ec:	4628      	mov	r0, r5
 80135ee:	466d      	mov	r5, sp
 80135f0:	4629      	mov	r1, r5
 80135f2:	4632      	mov	r2, r6
 80135f4:	f003 fdb9 	bl	801716a <memcpy>
 80135f8:	68a0      	ldr	r0, [r4, #8]
 80135fa:	4642      	mov	r2, r8
 80135fc:	19a9      	adds	r1, r5, r6
 80135fe:	f003 fdb4 	bl	801716a <memcpy>
 8013602:	e77e      	b.n	8013502 <ucdr_serialize_uint64_t+0x9e>

08013604 <ucdr_serialize_int16_t>:
 8013604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013608:	b082      	sub	sp, #8
 801360a:	460b      	mov	r3, r1
 801360c:	2102      	movs	r1, #2
 801360e:	4604      	mov	r4, r0
 8013610:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013614:	f7f7 fda4 	bl	800b160 <ucdr_buffer_alignment>
 8013618:	4601      	mov	r1, r0
 801361a:	4620      	mov	r0, r4
 801361c:	7d67      	ldrb	r7, [r4, #21]
 801361e:	f7f7 fde3 	bl	800b1e8 <ucdr_advance_buffer>
 8013622:	2102      	movs	r1, #2
 8013624:	4620      	mov	r0, r4
 8013626:	f7f7 fd3b 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801362a:	bb78      	cbnz	r0, 801368c <ucdr_serialize_int16_t+0x88>
 801362c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013630:	42ab      	cmp	r3, r5
 8013632:	d926      	bls.n	8013682 <ucdr_serialize_int16_t+0x7e>
 8013634:	1b5e      	subs	r6, r3, r5
 8013636:	60a3      	str	r3, [r4, #8]
 8013638:	6923      	ldr	r3, [r4, #16]
 801363a:	f1c6 0802 	rsb	r8, r6, #2
 801363e:	4433      	add	r3, r6
 8013640:	6123      	str	r3, [r4, #16]
 8013642:	4641      	mov	r1, r8
 8013644:	4620      	mov	r0, r4
 8013646:	f7f7 fd37 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 801364a:	2800      	cmp	r0, #0
 801364c:	d03b      	beq.n	80136c6 <ucdr_serialize_int16_t+0xc2>
 801364e:	7d23      	ldrb	r3, [r4, #20]
 8013650:	2b01      	cmp	r3, #1
 8013652:	d04a      	beq.n	80136ea <ucdr_serialize_int16_t+0xe6>
 8013654:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013658:	702b      	strb	r3, [r5, #0]
 801365a:	2e00      	cmp	r6, #0
 801365c:	d040      	beq.n	80136e0 <ucdr_serialize_int16_t+0xdc>
 801365e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013662:	706b      	strb	r3, [r5, #1]
 8013664:	6923      	ldr	r3, [r4, #16]
 8013666:	68a2      	ldr	r2, [r4, #8]
 8013668:	7da0      	ldrb	r0, [r4, #22]
 801366a:	3302      	adds	r3, #2
 801366c:	1b9e      	subs	r6, r3, r6
 801366e:	4442      	add	r2, r8
 8013670:	2302      	movs	r3, #2
 8013672:	f080 0001 	eor.w	r0, r0, #1
 8013676:	60a2      	str	r2, [r4, #8]
 8013678:	6126      	str	r6, [r4, #16]
 801367a:	7563      	strb	r3, [r4, #21]
 801367c:	b002      	add	sp, #8
 801367e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013682:	2102      	movs	r1, #2
 8013684:	4620      	mov	r0, r4
 8013686:	f7f7 fd17 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 801368a:	b190      	cbz	r0, 80136b2 <ucdr_serialize_int16_t+0xae>
 801368c:	7d23      	ldrb	r3, [r4, #20]
 801368e:	2b01      	cmp	r3, #1
 8013690:	68a3      	ldr	r3, [r4, #8]
 8013692:	d014      	beq.n	80136be <ucdr_serialize_int16_t+0xba>
 8013694:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013698:	701a      	strb	r2, [r3, #0]
 801369a:	68a3      	ldr	r3, [r4, #8]
 801369c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136a0:	705a      	strb	r2, [r3, #1]
 80136a2:	68a2      	ldr	r2, [r4, #8]
 80136a4:	6923      	ldr	r3, [r4, #16]
 80136a6:	3202      	adds	r2, #2
 80136a8:	3302      	adds	r3, #2
 80136aa:	2102      	movs	r1, #2
 80136ac:	60a2      	str	r2, [r4, #8]
 80136ae:	6123      	str	r3, [r4, #16]
 80136b0:	7561      	strb	r1, [r4, #21]
 80136b2:	7da0      	ldrb	r0, [r4, #22]
 80136b4:	f080 0001 	eor.w	r0, r0, #1
 80136b8:	b002      	add	sp, #8
 80136ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80136c2:	801a      	strh	r2, [r3, #0]
 80136c4:	e7ed      	b.n	80136a2 <ucdr_serialize_int16_t+0x9e>
 80136c6:	68a2      	ldr	r2, [r4, #8]
 80136c8:	6923      	ldr	r3, [r4, #16]
 80136ca:	7da0      	ldrb	r0, [r4, #22]
 80136cc:	7567      	strb	r7, [r4, #21]
 80136ce:	1b92      	subs	r2, r2, r6
 80136d0:	1b9b      	subs	r3, r3, r6
 80136d2:	f080 0001 	eor.w	r0, r0, #1
 80136d6:	60a2      	str	r2, [r4, #8]
 80136d8:	6123      	str	r3, [r4, #16]
 80136da:	b002      	add	sp, #8
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	68a3      	ldr	r3, [r4, #8]
 80136e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80136e6:	701a      	strb	r2, [r3, #0]
 80136e8:	e7bc      	b.n	8013664 <ucdr_serialize_int16_t+0x60>
 80136ea:	4628      	mov	r0, r5
 80136ec:	f10d 0506 	add.w	r5, sp, #6
 80136f0:	4629      	mov	r1, r5
 80136f2:	4632      	mov	r2, r6
 80136f4:	f003 fd39 	bl	801716a <memcpy>
 80136f8:	68a0      	ldr	r0, [r4, #8]
 80136fa:	4642      	mov	r2, r8
 80136fc:	19a9      	adds	r1, r5, r6
 80136fe:	f003 fd34 	bl	801716a <memcpy>
 8013702:	e7af      	b.n	8013664 <ucdr_serialize_int16_t+0x60>

08013704 <ucdr_deserialize_int16_t>:
 8013704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013708:	460d      	mov	r5, r1
 801370a:	2102      	movs	r1, #2
 801370c:	4604      	mov	r4, r0
 801370e:	f7f7 fd27 	bl	800b160 <ucdr_buffer_alignment>
 8013712:	4601      	mov	r1, r0
 8013714:	4620      	mov	r0, r4
 8013716:	f894 8015 	ldrb.w	r8, [r4, #21]
 801371a:	f7f7 fd65 	bl	800b1e8 <ucdr_advance_buffer>
 801371e:	2102      	movs	r1, #2
 8013720:	4620      	mov	r0, r4
 8013722:	f7f7 fcbd 	bl	800b0a0 <ucdr_check_buffer_available_for>
 8013726:	bb60      	cbnz	r0, 8013782 <ucdr_deserialize_int16_t+0x7e>
 8013728:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801372c:	42be      	cmp	r6, r7
 801372e:	d923      	bls.n	8013778 <ucdr_deserialize_int16_t+0x74>
 8013730:	6923      	ldr	r3, [r4, #16]
 8013732:	60a6      	str	r6, [r4, #8]
 8013734:	1bf6      	subs	r6, r6, r7
 8013736:	4433      	add	r3, r6
 8013738:	f1c6 0902 	rsb	r9, r6, #2
 801373c:	6123      	str	r3, [r4, #16]
 801373e:	4649      	mov	r1, r9
 8013740:	4620      	mov	r0, r4
 8013742:	f7f7 fcb9 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013746:	2800      	cmp	r0, #0
 8013748:	d034      	beq.n	80137b4 <ucdr_deserialize_int16_t+0xb0>
 801374a:	7d23      	ldrb	r3, [r4, #20]
 801374c:	2b01      	cmp	r3, #1
 801374e:	d042      	beq.n	80137d6 <ucdr_deserialize_int16_t+0xd2>
 8013750:	787b      	ldrb	r3, [r7, #1]
 8013752:	702b      	strb	r3, [r5, #0]
 8013754:	2e00      	cmp	r6, #0
 8013756:	d03a      	beq.n	80137ce <ucdr_deserialize_int16_t+0xca>
 8013758:	783b      	ldrb	r3, [r7, #0]
 801375a:	706b      	strb	r3, [r5, #1]
 801375c:	6923      	ldr	r3, [r4, #16]
 801375e:	68a2      	ldr	r2, [r4, #8]
 8013760:	7da0      	ldrb	r0, [r4, #22]
 8013762:	2102      	movs	r1, #2
 8013764:	3302      	adds	r3, #2
 8013766:	444a      	add	r2, r9
 8013768:	1b9b      	subs	r3, r3, r6
 801376a:	7561      	strb	r1, [r4, #21]
 801376c:	60a2      	str	r2, [r4, #8]
 801376e:	6123      	str	r3, [r4, #16]
 8013770:	f080 0001 	eor.w	r0, r0, #1
 8013774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013778:	2102      	movs	r1, #2
 801377a:	4620      	mov	r0, r4
 801377c:	f7f7 fc9c 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013780:	b180      	cbz	r0, 80137a4 <ucdr_deserialize_int16_t+0xa0>
 8013782:	7d23      	ldrb	r3, [r4, #20]
 8013784:	2b01      	cmp	r3, #1
 8013786:	68a3      	ldr	r3, [r4, #8]
 8013788:	d011      	beq.n	80137ae <ucdr_deserialize_int16_t+0xaa>
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	702b      	strb	r3, [r5, #0]
 801378e:	68a3      	ldr	r3, [r4, #8]
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	706b      	strb	r3, [r5, #1]
 8013794:	68a2      	ldr	r2, [r4, #8]
 8013796:	6923      	ldr	r3, [r4, #16]
 8013798:	3202      	adds	r2, #2
 801379a:	3302      	adds	r3, #2
 801379c:	2102      	movs	r1, #2
 801379e:	60a2      	str	r2, [r4, #8]
 80137a0:	6123      	str	r3, [r4, #16]
 80137a2:	7561      	strb	r1, [r4, #21]
 80137a4:	7da0      	ldrb	r0, [r4, #22]
 80137a6:	f080 0001 	eor.w	r0, r0, #1
 80137aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ae:	881b      	ldrh	r3, [r3, #0]
 80137b0:	802b      	strh	r3, [r5, #0]
 80137b2:	e7ef      	b.n	8013794 <ucdr_deserialize_int16_t+0x90>
 80137b4:	68a2      	ldr	r2, [r4, #8]
 80137b6:	6923      	ldr	r3, [r4, #16]
 80137b8:	7da0      	ldrb	r0, [r4, #22]
 80137ba:	f884 8015 	strb.w	r8, [r4, #21]
 80137be:	1b92      	subs	r2, r2, r6
 80137c0:	1b9b      	subs	r3, r3, r6
 80137c2:	60a2      	str	r2, [r4, #8]
 80137c4:	6123      	str	r3, [r4, #16]
 80137c6:	f080 0001 	eor.w	r0, r0, #1
 80137ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ce:	68a3      	ldr	r3, [r4, #8]
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	706b      	strb	r3, [r5, #1]
 80137d4:	e7c2      	b.n	801375c <ucdr_deserialize_int16_t+0x58>
 80137d6:	4639      	mov	r1, r7
 80137d8:	4632      	mov	r2, r6
 80137da:	4628      	mov	r0, r5
 80137dc:	f003 fcc5 	bl	801716a <memcpy>
 80137e0:	68a1      	ldr	r1, [r4, #8]
 80137e2:	464a      	mov	r2, r9
 80137e4:	19a8      	adds	r0, r5, r6
 80137e6:	f003 fcc0 	bl	801716a <memcpy>
 80137ea:	e7b7      	b.n	801375c <ucdr_deserialize_int16_t+0x58>

080137ec <ucdr_serialize_int32_t>:
 80137ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f0:	b082      	sub	sp, #8
 80137f2:	4604      	mov	r4, r0
 80137f4:	9101      	str	r1, [sp, #4]
 80137f6:	2104      	movs	r1, #4
 80137f8:	f7f7 fcb2 	bl	800b160 <ucdr_buffer_alignment>
 80137fc:	4601      	mov	r1, r0
 80137fe:	4620      	mov	r0, r4
 8013800:	7d67      	ldrb	r7, [r4, #21]
 8013802:	f7f7 fcf1 	bl	800b1e8 <ucdr_advance_buffer>
 8013806:	2104      	movs	r1, #4
 8013808:	4620      	mov	r0, r4
 801380a:	f7f7 fc49 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801380e:	2800      	cmp	r0, #0
 8013810:	d139      	bne.n	8013886 <ucdr_serialize_int32_t+0x9a>
 8013812:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8013816:	42ab      	cmp	r3, r5
 8013818:	d930      	bls.n	801387c <ucdr_serialize_int32_t+0x90>
 801381a:	1b5e      	subs	r6, r3, r5
 801381c:	60a3      	str	r3, [r4, #8]
 801381e:	6923      	ldr	r3, [r4, #16]
 8013820:	f1c6 0804 	rsb	r8, r6, #4
 8013824:	4433      	add	r3, r6
 8013826:	6123      	str	r3, [r4, #16]
 8013828:	4641      	mov	r1, r8
 801382a:	4620      	mov	r0, r4
 801382c:	f7f7 fc44 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013830:	2800      	cmp	r0, #0
 8013832:	d04c      	beq.n	80138ce <ucdr_serialize_int32_t+0xe2>
 8013834:	7d23      	ldrb	r3, [r4, #20]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d063      	beq.n	8013902 <ucdr_serialize_int32_t+0x116>
 801383a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801383e:	702b      	strb	r3, [r5, #0]
 8013840:	2e00      	cmp	r6, #0
 8013842:	d051      	beq.n	80138e8 <ucdr_serialize_int32_t+0xfc>
 8013844:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013848:	706b      	strb	r3, [r5, #1]
 801384a:	2e01      	cmp	r6, #1
 801384c:	d050      	beq.n	80138f0 <ucdr_serialize_int32_t+0x104>
 801384e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013852:	70ab      	strb	r3, [r5, #2]
 8013854:	2e02      	cmp	r6, #2
 8013856:	d04f      	beq.n	80138f8 <ucdr_serialize_int32_t+0x10c>
 8013858:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801385c:	70eb      	strb	r3, [r5, #3]
 801385e:	6923      	ldr	r3, [r4, #16]
 8013860:	68a2      	ldr	r2, [r4, #8]
 8013862:	7da0      	ldrb	r0, [r4, #22]
 8013864:	3304      	adds	r3, #4
 8013866:	1b9e      	subs	r6, r3, r6
 8013868:	4442      	add	r2, r8
 801386a:	2304      	movs	r3, #4
 801386c:	f080 0001 	eor.w	r0, r0, #1
 8013870:	60a2      	str	r2, [r4, #8]
 8013872:	6126      	str	r6, [r4, #16]
 8013874:	7563      	strb	r3, [r4, #21]
 8013876:	b002      	add	sp, #8
 8013878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801387c:	2104      	movs	r1, #4
 801387e:	4620      	mov	r0, r4
 8013880:	f7f7 fc1a 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013884:	b1d0      	cbz	r0, 80138bc <ucdr_serialize_int32_t+0xd0>
 8013886:	7d23      	ldrb	r3, [r4, #20]
 8013888:	2b01      	cmp	r3, #1
 801388a:	68a3      	ldr	r3, [r4, #8]
 801388c:	d01c      	beq.n	80138c8 <ucdr_serialize_int32_t+0xdc>
 801388e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013892:	701a      	strb	r2, [r3, #0]
 8013894:	68a3      	ldr	r3, [r4, #8]
 8013896:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801389a:	705a      	strb	r2, [r3, #1]
 801389c:	68a3      	ldr	r3, [r4, #8]
 801389e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80138a2:	709a      	strb	r2, [r3, #2]
 80138a4:	68a3      	ldr	r3, [r4, #8]
 80138a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80138aa:	70da      	strb	r2, [r3, #3]
 80138ac:	68a2      	ldr	r2, [r4, #8]
 80138ae:	6923      	ldr	r3, [r4, #16]
 80138b0:	3204      	adds	r2, #4
 80138b2:	3304      	adds	r3, #4
 80138b4:	2104      	movs	r1, #4
 80138b6:	60a2      	str	r2, [r4, #8]
 80138b8:	6123      	str	r3, [r4, #16]
 80138ba:	7561      	strb	r1, [r4, #21]
 80138bc:	7da0      	ldrb	r0, [r4, #22]
 80138be:	f080 0001 	eor.w	r0, r0, #1
 80138c2:	b002      	add	sp, #8
 80138c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c8:	9a01      	ldr	r2, [sp, #4]
 80138ca:	601a      	str	r2, [r3, #0]
 80138cc:	e7ee      	b.n	80138ac <ucdr_serialize_int32_t+0xc0>
 80138ce:	68a2      	ldr	r2, [r4, #8]
 80138d0:	6923      	ldr	r3, [r4, #16]
 80138d2:	7da0      	ldrb	r0, [r4, #22]
 80138d4:	7567      	strb	r7, [r4, #21]
 80138d6:	1b92      	subs	r2, r2, r6
 80138d8:	1b9b      	subs	r3, r3, r6
 80138da:	f080 0001 	eor.w	r0, r0, #1
 80138de:	60a2      	str	r2, [r4, #8]
 80138e0:	6123      	str	r3, [r4, #16]
 80138e2:	b002      	add	sp, #8
 80138e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e8:	68a3      	ldr	r3, [r4, #8]
 80138ea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80138ee:	701a      	strb	r2, [r3, #0]
 80138f0:	68a3      	ldr	r3, [r4, #8]
 80138f2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80138f6:	701a      	strb	r2, [r3, #0]
 80138f8:	68a3      	ldr	r3, [r4, #8]
 80138fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80138fe:	701a      	strb	r2, [r3, #0]
 8013900:	e7ad      	b.n	801385e <ucdr_serialize_int32_t+0x72>
 8013902:	4628      	mov	r0, r5
 8013904:	ad01      	add	r5, sp, #4
 8013906:	4629      	mov	r1, r5
 8013908:	4632      	mov	r2, r6
 801390a:	f003 fc2e 	bl	801716a <memcpy>
 801390e:	68a0      	ldr	r0, [r4, #8]
 8013910:	4642      	mov	r2, r8
 8013912:	19a9      	adds	r1, r5, r6
 8013914:	f003 fc29 	bl	801716a <memcpy>
 8013918:	e7a1      	b.n	801385e <ucdr_serialize_int32_t+0x72>
 801391a:	bf00      	nop

0801391c <ucdr_deserialize_int32_t>:
 801391c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013920:	460d      	mov	r5, r1
 8013922:	2104      	movs	r1, #4
 8013924:	4604      	mov	r4, r0
 8013926:	f7f7 fc1b 	bl	800b160 <ucdr_buffer_alignment>
 801392a:	4601      	mov	r1, r0
 801392c:	4620      	mov	r0, r4
 801392e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013932:	f7f7 fc59 	bl	800b1e8 <ucdr_advance_buffer>
 8013936:	2104      	movs	r1, #4
 8013938:	4620      	mov	r0, r4
 801393a:	f7f7 fbb1 	bl	800b0a0 <ucdr_check_buffer_available_for>
 801393e:	2800      	cmp	r0, #0
 8013940:	d138      	bne.n	80139b4 <ucdr_deserialize_int32_t+0x98>
 8013942:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8013946:	42b7      	cmp	r7, r6
 8013948:	d92f      	bls.n	80139aa <ucdr_deserialize_int32_t+0x8e>
 801394a:	6923      	ldr	r3, [r4, #16]
 801394c:	60a7      	str	r7, [r4, #8]
 801394e:	1bbf      	subs	r7, r7, r6
 8013950:	443b      	add	r3, r7
 8013952:	f1c7 0904 	rsb	r9, r7, #4
 8013956:	6123      	str	r3, [r4, #16]
 8013958:	4649      	mov	r1, r9
 801395a:	4620      	mov	r0, r4
 801395c:	f7f7 fbac 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 8013960:	2800      	cmp	r0, #0
 8013962:	d046      	beq.n	80139f2 <ucdr_deserialize_int32_t+0xd6>
 8013964:	7d23      	ldrb	r3, [r4, #20]
 8013966:	2b01      	cmp	r3, #1
 8013968:	d05c      	beq.n	8013a24 <ucdr_deserialize_int32_t+0x108>
 801396a:	78f3      	ldrb	r3, [r6, #3]
 801396c:	702b      	strb	r3, [r5, #0]
 801396e:	2f00      	cmp	r7, #0
 8013970:	d04c      	beq.n	8013a0c <ucdr_deserialize_int32_t+0xf0>
 8013972:	78b3      	ldrb	r3, [r6, #2]
 8013974:	706b      	strb	r3, [r5, #1]
 8013976:	2f01      	cmp	r7, #1
 8013978:	f105 0302 	add.w	r3, r5, #2
 801397c:	d04a      	beq.n	8013a14 <ucdr_deserialize_int32_t+0xf8>
 801397e:	7873      	ldrb	r3, [r6, #1]
 8013980:	70ab      	strb	r3, [r5, #2]
 8013982:	2f02      	cmp	r7, #2
 8013984:	f105 0303 	add.w	r3, r5, #3
 8013988:	d048      	beq.n	8013a1c <ucdr_deserialize_int32_t+0x100>
 801398a:	7833      	ldrb	r3, [r6, #0]
 801398c:	70eb      	strb	r3, [r5, #3]
 801398e:	6923      	ldr	r3, [r4, #16]
 8013990:	68a2      	ldr	r2, [r4, #8]
 8013992:	7da0      	ldrb	r0, [r4, #22]
 8013994:	2104      	movs	r1, #4
 8013996:	3304      	adds	r3, #4
 8013998:	444a      	add	r2, r9
 801399a:	1bdb      	subs	r3, r3, r7
 801399c:	7561      	strb	r1, [r4, #21]
 801399e:	60a2      	str	r2, [r4, #8]
 80139a0:	6123      	str	r3, [r4, #16]
 80139a2:	f080 0001 	eor.w	r0, r0, #1
 80139a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139aa:	2104      	movs	r1, #4
 80139ac:	4620      	mov	r0, r4
 80139ae:	f7f7 fb83 	bl	800b0b8 <ucdr_check_final_buffer_behavior>
 80139b2:	b1b0      	cbz	r0, 80139e2 <ucdr_deserialize_int32_t+0xc6>
 80139b4:	7d23      	ldrb	r3, [r4, #20]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	68a3      	ldr	r3, [r4, #8]
 80139ba:	d017      	beq.n	80139ec <ucdr_deserialize_int32_t+0xd0>
 80139bc:	78db      	ldrb	r3, [r3, #3]
 80139be:	702b      	strb	r3, [r5, #0]
 80139c0:	68a3      	ldr	r3, [r4, #8]
 80139c2:	789b      	ldrb	r3, [r3, #2]
 80139c4:	706b      	strb	r3, [r5, #1]
 80139c6:	68a3      	ldr	r3, [r4, #8]
 80139c8:	785b      	ldrb	r3, [r3, #1]
 80139ca:	70ab      	strb	r3, [r5, #2]
 80139cc:	68a3      	ldr	r3, [r4, #8]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	70eb      	strb	r3, [r5, #3]
 80139d2:	68a2      	ldr	r2, [r4, #8]
 80139d4:	6923      	ldr	r3, [r4, #16]
 80139d6:	3204      	adds	r2, #4
 80139d8:	3304      	adds	r3, #4
 80139da:	2104      	movs	r1, #4
 80139dc:	60a2      	str	r2, [r4, #8]
 80139de:	6123      	str	r3, [r4, #16]
 80139e0:	7561      	strb	r1, [r4, #21]
 80139e2:	7da0      	ldrb	r0, [r4, #22]
 80139e4:	f080 0001 	eor.w	r0, r0, #1
 80139e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	602b      	str	r3, [r5, #0]
 80139f0:	e7ef      	b.n	80139d2 <ucdr_deserialize_int32_t+0xb6>
 80139f2:	68a2      	ldr	r2, [r4, #8]
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	7da0      	ldrb	r0, [r4, #22]
 80139f8:	f884 8015 	strb.w	r8, [r4, #21]
 80139fc:	1bd2      	subs	r2, r2, r7
 80139fe:	1bdb      	subs	r3, r3, r7
 8013a00:	60a2      	str	r2, [r4, #8]
 8013a02:	6123      	str	r3, [r4, #16]
 8013a04:	f080 0001 	eor.w	r0, r0, #1
 8013a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a0c:	68a3      	ldr	r3, [r4, #8]
 8013a0e:	789b      	ldrb	r3, [r3, #2]
 8013a10:	706b      	strb	r3, [r5, #1]
 8013a12:	1cab      	adds	r3, r5, #2
 8013a14:	68a2      	ldr	r2, [r4, #8]
 8013a16:	7852      	ldrb	r2, [r2, #1]
 8013a18:	f803 2b01 	strb.w	r2, [r3], #1
 8013a1c:	68a2      	ldr	r2, [r4, #8]
 8013a1e:	7812      	ldrb	r2, [r2, #0]
 8013a20:	701a      	strb	r2, [r3, #0]
 8013a22:	e7b4      	b.n	801398e <ucdr_deserialize_int32_t+0x72>
 8013a24:	4631      	mov	r1, r6
 8013a26:	463a      	mov	r2, r7
 8013a28:	4628      	mov	r0, r5
 8013a2a:	f003 fb9e 	bl	801716a <memcpy>
 8013a2e:	68a1      	ldr	r1, [r4, #8]
 8013a30:	464a      	mov	r2, r9
 8013a32:	19e8      	adds	r0, r5, r7
 8013a34:	f003 fb99 	bl	801716a <memcpy>
 8013a38:	e7a9      	b.n	801398e <ucdr_deserialize_int32_t+0x72>
 8013a3a:	bf00      	nop

08013a3c <ucdr_serialize_string>:
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	4604      	mov	r4, r0
 8013a42:	4608      	mov	r0, r1
 8013a44:	9101      	str	r1, [sp, #4]
 8013a46:	f7ec fc43 	bl	80002d0 <strlen>
 8013a4a:	9901      	ldr	r1, [sp, #4]
 8013a4c:	1c42      	adds	r2, r0, #1
 8013a4e:	4620      	mov	r0, r4
 8013a50:	b002      	add	sp, #8
 8013a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a56:	f7f7 bbe7 	b.w	800b228 <ucdr_serialize_sequence_char>
 8013a5a:	bf00      	nop

08013a5c <ucdr_deserialize_string>:
 8013a5c:	b500      	push	{lr}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	ab01      	add	r3, sp, #4
 8013a62:	f7f7 fbf3 	bl	800b24c <ucdr_deserialize_sequence_char>
 8013a66:	b003      	add	sp, #12
 8013a68:	f85d fb04 	ldr.w	pc, [sp], #4

08013a6c <get_custom_error>:
 8013a6c:	4b01      	ldr	r3, [pc, #4]	@ (8013a74 <get_custom_error+0x8>)
 8013a6e:	7818      	ldrb	r0, [r3, #0]
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop
 8013a74:	20010d50 	.word	0x20010d50

08013a78 <recv_custom_msg>:
 8013a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a7c:	4693      	mov	fp, r2
 8013a7e:	b089      	sub	sp, #36	@ 0x24
 8013a80:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013a84:	9305      	str	r3, [sp, #20]
 8013a86:	468a      	mov	sl, r1
 8013a88:	2100      	movs	r1, #0
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	f88d 101e 	strb.w	r1, [sp, #30]
 8013a90:	b322      	cbz	r2, 8013adc <recv_custom_msg+0x64>
 8013a92:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8013a96:	f10d 081f 	add.w	r8, sp, #31
 8013a9a:	af05      	add	r7, sp, #20
 8013a9c:	f10d 061e 	add.w	r6, sp, #30
 8013aa0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013aa4:	e002      	b.n	8013aac <recv_custom_msg+0x34>
 8013aa6:	9b05      	ldr	r3, [sp, #20]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	dd0f      	ble.n	8013acc <recv_custom_msg+0x54>
 8013aac:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013ab0:	4623      	mov	r3, r4
 8013ab2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013ab6:	e9cd 5600 	strd	r5, r6, [sp]
 8013aba:	4622      	mov	r2, r4
 8013abc:	4648      	mov	r0, r9
 8013abe:	f001 f92d 	bl	8014d1c <uxr_read_framed_msg>
 8013ac2:	2800      	cmp	r0, #0
 8013ac4:	d0ef      	beq.n	8013aa6 <recv_custom_msg+0x2e>
 8013ac6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013aca:	b1b3      	cbz	r3, 8013afa <recv_custom_msg+0x82>
 8013acc:	4b0f      	ldr	r3, [pc, #60]	@ (8013b0c <recv_custom_msg+0x94>)
 8013ace:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013ad2:	701a      	strb	r2, [r3, #0]
 8013ad4:	2000      	movs	r0, #0
 8013ad6:	b009      	add	sp, #36	@ 0x24
 8013ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	f10d 021f 	add.w	r2, sp, #31
 8013ae0:	9200      	str	r2, [sp, #0]
 8013ae2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013ae6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013aea:	4601      	mov	r1, r0
 8013aec:	47a8      	blx	r5
 8013aee:	2800      	cmp	r0, #0
 8013af0:	d0ec      	beq.n	8013acc <recv_custom_msg+0x54>
 8013af2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d1e8      	bne.n	8013acc <recv_custom_msg+0x54>
 8013afa:	f8cb 0000 	str.w	r0, [fp]
 8013afe:	2001      	movs	r0, #1
 8013b00:	f8ca 4000 	str.w	r4, [sl]
 8013b04:	b009      	add	sp, #36	@ 0x24
 8013b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20010d50 	.word	0x20010d50

08013b10 <send_custom_msg>:
 8013b10:	b530      	push	{r4, r5, lr}
 8013b12:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8013b16:	b087      	sub	sp, #28
 8013b18:	4615      	mov	r5, r2
 8013b1a:	b974      	cbnz	r4, 8013b3a <send_custom_msg+0x2a>
 8013b1c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013b20:	f10d 0317 	add.w	r3, sp, #23
 8013b24:	47a0      	blx	r4
 8013b26:	b108      	cbz	r0, 8013b2c <send_custom_msg+0x1c>
 8013b28:	42a8      	cmp	r0, r5
 8013b2a:	d015      	beq.n	8013b58 <send_custom_msg+0x48>
 8013b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8013b60 <send_custom_msg+0x50>)
 8013b2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013b32:	701a      	strb	r2, [r3, #0]
 8013b34:	2000      	movs	r0, #0
 8013b36:	b007      	add	sp, #28
 8013b38:	bd30      	pop	{r4, r5, pc}
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f10d 0117 	add.w	r1, sp, #23
 8013b42:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013b46:	4602      	mov	r2, r0
 8013b48:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013b4c:	9500      	str	r5, [sp, #0]
 8013b4e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013b52:	f000 feeb 	bl	801492c <uxr_write_framed_msg>
 8013b56:	e7e6      	b.n	8013b26 <send_custom_msg+0x16>
 8013b58:	2001      	movs	r0, #1
 8013b5a:	b007      	add	sp, #28
 8013b5c:	bd30      	pop	{r4, r5, pc}
 8013b5e:	bf00      	nop
 8013b60:	20010d50 	.word	0x20010d50

08013b64 <uxr_set_custom_transport_callbacks>:
 8013b64:	b410      	push	{r4}
 8013b66:	9c01      	ldr	r4, [sp, #4]
 8013b68:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013b6c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013b70:	9b02      	ldr	r3, [sp, #8]
 8013b72:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8013b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b7a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013b7e:	4770      	bx	lr

08013b80 <uxr_init_custom_transport>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8013b86:	b303      	cbz	r3, 8013bca <uxr_init_custom_transport+0x4a>
 8013b88:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	b1e2      	cbz	r2, 8013bca <uxr_init_custom_transport+0x4a>
 8013b90:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8013b94:	b1ca      	cbz	r2, 8013bca <uxr_init_custom_transport+0x4a>
 8013b96:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8013b9a:	b1b2      	cbz	r2, 8013bca <uxr_init_custom_transport+0x4a>
 8013b9c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013ba0:	4798      	blx	r3
 8013ba2:	4605      	mov	r5, r0
 8013ba4:	b188      	cbz	r0, 8013bca <uxr_init_custom_transport+0x4a>
 8013ba6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8013baa:	b98b      	cbnz	r3, 8013bd0 <uxr_init_custom_transport+0x50>
 8013bac:	490b      	ldr	r1, [pc, #44]	@ (8013bdc <uxr_init_custom_transport+0x5c>)
 8013bae:	4b0c      	ldr	r3, [pc, #48]	@ (8013be0 <uxr_init_custom_transport+0x60>)
 8013bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8013be4 <uxr_init_custom_transport+0x64>)
 8013bb2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013bba:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013bbe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013bc2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	bd38      	pop	{r3, r4, r5, pc}
 8013bca:	2500      	movs	r5, #0
 8013bcc:	4628      	mov	r0, r5
 8013bce:	bd38      	pop	{r3, r4, r5, pc}
 8013bd0:	2100      	movs	r1, #0
 8013bd2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013bd6:	f000 fea3 	bl	8014920 <uxr_init_framing_io>
 8013bda:	e7e7      	b.n	8013bac <uxr_init_custom_transport+0x2c>
 8013bdc:	08013b11 	.word	0x08013b11
 8013be0:	08013a79 	.word	0x08013a79
 8013be4:	08013a6d 	.word	0x08013a6d

08013be8 <uxr_close_custom_transport>:
 8013be8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013bec:	4718      	bx	r3
 8013bee:	bf00      	nop

08013bf0 <uxr_init_input_best_effort_stream>:
 8013bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013bf4:	8003      	strh	r3, [r0, #0]
 8013bf6:	4770      	bx	lr

08013bf8 <uxr_reset_input_best_effort_stream>:
 8013bf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013bfc:	8003      	strh	r3, [r0, #0]
 8013bfe:	4770      	bx	lr

08013c00 <uxr_receive_best_effort_message>:
 8013c00:	b538      	push	{r3, r4, r5, lr}
 8013c02:	4604      	mov	r4, r0
 8013c04:	8800      	ldrh	r0, [r0, #0]
 8013c06:	460d      	mov	r5, r1
 8013c08:	f000 fe72 	bl	80148f0 <uxr_seq_num_cmp>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013c14:	bfb8      	it	lt
 8013c16:	8025      	strhlt	r5, [r4, #0]
 8013c18:	bd38      	pop	{r3, r4, r5, pc}
 8013c1a:	bf00      	nop

08013c1c <on_full_input_buffer>:
 8013c1c:	b570      	push	{r4, r5, r6, lr}
 8013c1e:	4605      	mov	r5, r0
 8013c20:	460c      	mov	r4, r1
 8013c22:	682b      	ldr	r3, [r5, #0]
 8013c24:	6809      	ldr	r1, [r1, #0]
 8013c26:	8920      	ldrh	r0, [r4, #8]
 8013c28:	6862      	ldr	r2, [r4, #4]
 8013c2a:	fbb2 f2f0 	udiv	r2, r2, r0
 8013c2e:	eba3 0c01 	sub.w	ip, r3, r1
 8013c32:	fbbc fcf2 	udiv	ip, ip, r2
 8013c36:	f10c 0c01 	add.w	ip, ip, #1
 8013c3a:	fa1f f38c 	uxth.w	r3, ip
 8013c3e:	fbb3 f6f0 	udiv	r6, r3, r0
 8013c42:	fb00 3316 	mls	r3, r0, r6, r3
 8013c46:	b29b      	uxth	r3, r3
 8013c48:	fb02 f303 	mul.w	r3, r2, r3
 8013c4c:	1d18      	adds	r0, r3, #4
 8013c4e:	4408      	add	r0, r1
 8013c50:	7d26      	ldrb	r6, [r4, #20]
 8013c52:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013c56:	b116      	cbz	r6, 8013c5e <on_full_input_buffer+0x42>
 8013c58:	2600      	movs	r6, #0
 8013c5a:	f840 6c04 	str.w	r6, [r0, #-4]
 8013c5e:	2a03      	cmp	r2, #3
 8013c60:	d801      	bhi.n	8013c66 <on_full_input_buffer+0x4a>
 8013c62:	2001      	movs	r0, #1
 8013c64:	bd70      	pop	{r4, r5, r6, pc}
 8013c66:	3308      	adds	r3, #8
 8013c68:	4419      	add	r1, r3
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	692b      	ldr	r3, [r5, #16]
 8013c6e:	3a04      	subs	r2, #4
 8013c70:	f7f7 fa62 	bl	800b138 <ucdr_init_buffer_origin>
 8013c74:	4628      	mov	r0, r5
 8013c76:	4903      	ldr	r1, [pc, #12]	@ (8013c84 <on_full_input_buffer+0x68>)
 8013c78:	4622      	mov	r2, r4
 8013c7a:	f7f7 fa39 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	bd70      	pop	{r4, r5, r6, pc}
 8013c82:	bf00      	nop
 8013c84:	08013c1d 	.word	0x08013c1d

08013c88 <uxr_init_input_reliable_stream>:
 8013c88:	b500      	push	{lr}
 8013c8a:	e9c0 1200 	strd	r1, r2, [r0]
 8013c8e:	f04f 0e00 	mov.w	lr, #0
 8013c92:	9a01      	ldr	r2, [sp, #4]
 8013c94:	8103      	strh	r3, [r0, #8]
 8013c96:	6102      	str	r2, [r0, #16]
 8013c98:	f880 e014 	strb.w	lr, [r0, #20]
 8013c9c:	b1d3      	cbz	r3, 8013cd4 <uxr_init_input_reliable_stream+0x4c>
 8013c9e:	f8c1 e000 	str.w	lr, [r1]
 8013ca2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013ca6:	f1bc 0f01 	cmp.w	ip, #1
 8013caa:	d913      	bls.n	8013cd4 <uxr_init_input_reliable_stream+0x4c>
 8013cac:	2301      	movs	r3, #1
 8013cae:	fbb3 f1fc 	udiv	r1, r3, ip
 8013cb2:	fb0c 3111 	mls	r1, ip, r1, r3
 8013cb6:	b289      	uxth	r1, r1
 8013cb8:	6842      	ldr	r2, [r0, #4]
 8013cba:	fbb2 f2fc 	udiv	r2, r2, ip
 8013cbe:	fb01 f202 	mul.w	r2, r1, r2
 8013cc2:	6801      	ldr	r1, [r0, #0]
 8013cc4:	f841 e002 	str.w	lr, [r1, r2]
 8013cc8:	3301      	adds	r3, #1
 8013cca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	459c      	cmp	ip, r3
 8013cd2:	d8ec      	bhi.n	8013cae <uxr_init_input_reliable_stream+0x26>
 8013cd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013cd8:	60c3      	str	r3, [r0, #12]
 8013cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8013cde:	bf00      	nop

08013ce0 <uxr_reset_input_reliable_stream>:
 8013ce0:	8901      	ldrh	r1, [r0, #8]
 8013ce2:	b1e9      	cbz	r1, 8013d20 <uxr_reset_input_reliable_stream+0x40>
 8013ce4:	f04f 0c00 	mov.w	ip, #0
 8013ce8:	b500      	push	{lr}
 8013cea:	4663      	mov	r3, ip
 8013cec:	46e6      	mov	lr, ip
 8013cee:	fbb3 f2f1 	udiv	r2, r3, r1
 8013cf2:	fb01 3312 	mls	r3, r1, r2, r3
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	6842      	ldr	r2, [r0, #4]
 8013cfa:	fbb2 f2f1 	udiv	r2, r2, r1
 8013cfe:	fb02 f303 	mul.w	r3, r2, r3
 8013d02:	6802      	ldr	r2, [r0, #0]
 8013d04:	f842 e003 	str.w	lr, [r2, r3]
 8013d08:	f10c 0c01 	add.w	ip, ip, #1
 8013d0c:	8901      	ldrh	r1, [r0, #8]
 8013d0e:	fa1f f38c 	uxth.w	r3, ip
 8013d12:	4299      	cmp	r1, r3
 8013d14:	d8eb      	bhi.n	8013cee <uxr_reset_input_reliable_stream+0xe>
 8013d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d1a:	60c3      	str	r3, [r0, #12]
 8013d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013d20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d24:	60c3      	str	r3, [r0, #12]
 8013d26:	4770      	bx	lr

08013d28 <uxr_receive_reliable_message>:
 8013d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	460d      	mov	r5, r1
 8013d30:	8901      	ldrh	r1, [r0, #8]
 8013d32:	8980      	ldrh	r0, [r0, #12]
 8013d34:	4690      	mov	r8, r2
 8013d36:	461f      	mov	r7, r3
 8013d38:	f000 fdd2 	bl	80148e0 <uxr_seq_num_add>
 8013d3c:	4629      	mov	r1, r5
 8013d3e:	4606      	mov	r6, r0
 8013d40:	89a0      	ldrh	r0, [r4, #12]
 8013d42:	f000 fdd5 	bl	80148f0 <uxr_seq_num_cmp>
 8013d46:	2800      	cmp	r0, #0
 8013d48:	db0a      	blt.n	8013d60 <uxr_receive_reliable_message+0x38>
 8013d4a:	2600      	movs	r6, #0
 8013d4c:	89e0      	ldrh	r0, [r4, #14]
 8013d4e:	4629      	mov	r1, r5
 8013d50:	f000 fdce 	bl	80148f0 <uxr_seq_num_cmp>
 8013d54:	2800      	cmp	r0, #0
 8013d56:	da00      	bge.n	8013d5a <uxr_receive_reliable_message+0x32>
 8013d58:	81e5      	strh	r5, [r4, #14]
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d60:	4630      	mov	r0, r6
 8013d62:	4629      	mov	r1, r5
 8013d64:	f000 fdc4 	bl	80148f0 <uxr_seq_num_cmp>
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	dbee      	blt.n	8013d4a <uxr_receive_reliable_message+0x22>
 8013d6c:	6923      	ldr	r3, [r4, #16]
 8013d6e:	4640      	mov	r0, r8
 8013d70:	4798      	blx	r3
 8013d72:	2101      	movs	r1, #1
 8013d74:	4681      	mov	r9, r0
 8013d76:	89a0      	ldrh	r0, [r4, #12]
 8013d78:	f000 fdb2 	bl	80148e0 <uxr_seq_num_add>
 8013d7c:	f1b9 0f00 	cmp.w	r9, #0
 8013d80:	d101      	bne.n	8013d86 <uxr_receive_reliable_message+0x5e>
 8013d82:	4285      	cmp	r5, r0
 8013d84:	d047      	beq.n	8013e16 <uxr_receive_reliable_message+0xee>
 8013d86:	8922      	ldrh	r2, [r4, #8]
 8013d88:	fbb5 f0f2 	udiv	r0, r5, r2
 8013d8c:	fb02 5010 	mls	r0, r2, r0, r5
 8013d90:	b280      	uxth	r0, r0
 8013d92:	6863      	ldr	r3, [r4, #4]
 8013d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8013d98:	fb00 f303 	mul.w	r3, r0, r3
 8013d9c:	6820      	ldr	r0, [r4, #0]
 8013d9e:	3304      	adds	r3, #4
 8013da0:	4418      	add	r0, r3
 8013da2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1cf      	bne.n	8013d4a <uxr_receive_reliable_message+0x22>
 8013daa:	4641      	mov	r1, r8
 8013dac:	463a      	mov	r2, r7
 8013dae:	f003 f9dc 	bl	801716a <memcpy>
 8013db2:	8921      	ldrh	r1, [r4, #8]
 8013db4:	fbb5 f2f1 	udiv	r2, r5, r1
 8013db8:	fb01 5212 	mls	r2, r1, r2, r5
 8013dbc:	b292      	uxth	r2, r2
 8013dbe:	6863      	ldr	r3, [r4, #4]
 8013dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013dc4:	fb02 f303 	mul.w	r3, r2, r3
 8013dc8:	6822      	ldr	r2, [r4, #0]
 8013dca:	50d7      	str	r7, [r2, r3]
 8013dcc:	9a08      	ldr	r2, [sp, #32]
 8013dce:	2301      	movs	r3, #1
 8013dd0:	7013      	strb	r3, [r2, #0]
 8013dd2:	f1b9 0f00 	cmp.w	r9, #0
 8013dd6:	d0b8      	beq.n	8013d4a <uxr_receive_reliable_message+0x22>
 8013dd8:	89a6      	ldrh	r6, [r4, #12]
 8013dda:	4630      	mov	r0, r6
 8013ddc:	2101      	movs	r1, #1
 8013dde:	f000 fd7f 	bl	80148e0 <uxr_seq_num_add>
 8013de2:	8922      	ldrh	r2, [r4, #8]
 8013de4:	6863      	ldr	r3, [r4, #4]
 8013de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dea:	4606      	mov	r6, r0
 8013dec:	fbb0 f0f2 	udiv	r0, r0, r2
 8013df0:	fb02 6010 	mls	r0, r2, r0, r6
 8013df4:	b280      	uxth	r0, r0
 8013df6:	fb00 f303 	mul.w	r3, r0, r3
 8013dfa:	6820      	ldr	r0, [r4, #0]
 8013dfc:	3304      	adds	r3, #4
 8013dfe:	4418      	add	r0, r3
 8013e00:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d0a0      	beq.n	8013d4a <uxr_receive_reliable_message+0x22>
 8013e08:	6923      	ldr	r3, [r4, #16]
 8013e0a:	4798      	blx	r3
 8013e0c:	2802      	cmp	r0, #2
 8013e0e:	d008      	beq.n	8013e22 <uxr_receive_reliable_message+0xfa>
 8013e10:	2801      	cmp	r0, #1
 8013e12:	d0e2      	beq.n	8013dda <uxr_receive_reliable_message+0xb2>
 8013e14:	e799      	b.n	8013d4a <uxr_receive_reliable_message+0x22>
 8013e16:	9b08      	ldr	r3, [sp, #32]
 8013e18:	81a5      	strh	r5, [r4, #12]
 8013e1a:	2601      	movs	r6, #1
 8013e1c:	f883 9000 	strb.w	r9, [r3]
 8013e20:	e794      	b.n	8013d4c <uxr_receive_reliable_message+0x24>
 8013e22:	2601      	movs	r6, #1
 8013e24:	e792      	b.n	8013d4c <uxr_receive_reliable_message+0x24>
 8013e26:	bf00      	nop

08013e28 <uxr_next_input_reliable_buffer_available>:
 8013e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e2c:	4604      	mov	r4, r0
 8013e2e:	460f      	mov	r7, r1
 8013e30:	8980      	ldrh	r0, [r0, #12]
 8013e32:	2101      	movs	r1, #1
 8013e34:	4690      	mov	r8, r2
 8013e36:	f000 fd53 	bl	80148e0 <uxr_seq_num_add>
 8013e3a:	8922      	ldrh	r2, [r4, #8]
 8013e3c:	fbb0 f6f2 	udiv	r6, r0, r2
 8013e40:	fb02 0616 	mls	r6, r2, r6, r0
 8013e44:	b2b6      	uxth	r6, r6
 8013e46:	6863      	ldr	r3, [r4, #4]
 8013e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e4c:	fb06 f303 	mul.w	r3, r6, r3
 8013e50:	6826      	ldr	r6, [r4, #0]
 8013e52:	3304      	adds	r3, #4
 8013e54:	441e      	add	r6, r3
 8013e56:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8013e5a:	f1b9 0f00 	cmp.w	r9, #0
 8013e5e:	d023      	beq.n	8013ea8 <uxr_next_input_reliable_buffer_available+0x80>
 8013e60:	6923      	ldr	r3, [r4, #16]
 8013e62:	4605      	mov	r5, r0
 8013e64:	4630      	mov	r0, r6
 8013e66:	4798      	blx	r3
 8013e68:	4682      	mov	sl, r0
 8013e6a:	b300      	cbz	r0, 8013eae <uxr_next_input_reliable_buffer_available+0x86>
 8013e6c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013e70:	2101      	movs	r1, #1
 8013e72:	4650      	mov	r0, sl
 8013e74:	f000 fd34 	bl	80148e0 <uxr_seq_num_add>
 8013e78:	8921      	ldrh	r1, [r4, #8]
 8013e7a:	fbb0 f2f1 	udiv	r2, r0, r1
 8013e7e:	4682      	mov	sl, r0
 8013e80:	fb01 0212 	mls	r2, r1, r2, r0
 8013e84:	e9d4 0300 	ldrd	r0, r3, [r4]
 8013e88:	b292      	uxth	r2, r2
 8013e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8013e8e:	fb02 f303 	mul.w	r3, r2, r3
 8013e92:	3304      	adds	r3, #4
 8013e94:	4418      	add	r0, r3
 8013e96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8013e9a:	b12b      	cbz	r3, 8013ea8 <uxr_next_input_reliable_buffer_available+0x80>
 8013e9c:	6923      	ldr	r3, [r4, #16]
 8013e9e:	4798      	blx	r3
 8013ea0:	2802      	cmp	r0, #2
 8013ea2:	d01b      	beq.n	8013edc <uxr_next_input_reliable_buffer_available+0xb4>
 8013ea4:	2801      	cmp	r0, #1
 8013ea6:	d0e3      	beq.n	8013e70 <uxr_next_input_reliable_buffer_available+0x48>
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eae:	464a      	mov	r2, r9
 8013eb0:	4631      	mov	r1, r6
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f7f7 f948 	bl	800b148 <ucdr_init_buffer>
 8013eb8:	8921      	ldrh	r1, [r4, #8]
 8013eba:	fbb5 f2f1 	udiv	r2, r5, r1
 8013ebe:	fb01 5212 	mls	r2, r1, r2, r5
 8013ec2:	b292      	uxth	r2, r2
 8013ec4:	6863      	ldr	r3, [r4, #4]
 8013ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013eca:	fb02 f303 	mul.w	r3, r2, r3
 8013ece:	6822      	ldr	r2, [r4, #0]
 8013ed0:	f842 a003 	str.w	sl, [r2, r3]
 8013ed4:	2001      	movs	r0, #1
 8013ed6:	81a5      	strh	r5, [r4, #12]
 8013ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013edc:	8920      	ldrh	r0, [r4, #8]
 8013ede:	fbb5 f3f0 	udiv	r3, r5, r0
 8013ee2:	fb00 5513 	mls	r5, r0, r3, r5
 8013ee6:	b2ad      	uxth	r5, r5
 8013ee8:	6863      	ldr	r3, [r4, #4]
 8013eea:	fbb3 f3f0 	udiv	r3, r3, r0
 8013eee:	fb03 f505 	mul.w	r5, r3, r5
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	5158      	str	r0, [r3, r5]
 8013ef8:	eb06 0108 	add.w	r1, r6, r8
 8013efc:	eba9 0208 	sub.w	r2, r9, r8
 8013f00:	4638      	mov	r0, r7
 8013f02:	f7f7 f921 	bl	800b148 <ucdr_init_buffer>
 8013f06:	4638      	mov	r0, r7
 8013f08:	4903      	ldr	r1, [pc, #12]	@ (8013f18 <uxr_next_input_reliable_buffer_available+0xf0>)
 8013f0a:	4622      	mov	r2, r4
 8013f0c:	f7f7 f8f0 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 8013f10:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013f14:	2001      	movs	r0, #1
 8013f16:	e7c8      	b.n	8013eaa <uxr_next_input_reliable_buffer_available+0x82>
 8013f18:	08013c1d 	.word	0x08013c1d

08013f1c <uxr_process_heartbeat>:
 8013f1c:	b538      	push	{r3, r4, r5, lr}
 8013f1e:	4611      	mov	r1, r2
 8013f20:	4604      	mov	r4, r0
 8013f22:	89c0      	ldrh	r0, [r0, #14]
 8013f24:	4615      	mov	r5, r2
 8013f26:	f000 fce3 	bl	80148f0 <uxr_seq_num_cmp>
 8013f2a:	2800      	cmp	r0, #0
 8013f2c:	bfb8      	it	lt
 8013f2e:	81e5      	strhlt	r5, [r4, #14]
 8013f30:	bd38      	pop	{r3, r4, r5, pc}
 8013f32:	bf00      	nop

08013f34 <uxr_compute_acknack>:
 8013f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f38:	8903      	ldrh	r3, [r0, #8]
 8013f3a:	8985      	ldrh	r5, [r0, #12]
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	460e      	mov	r6, r1
 8013f40:	b1d3      	cbz	r3, 8013f78 <uxr_compute_acknack+0x44>
 8013f42:	4628      	mov	r0, r5
 8013f44:	2701      	movs	r7, #1
 8013f46:	e003      	b.n	8013f50 <uxr_compute_acknack+0x1c>
 8013f48:	4567      	cmp	r7, ip
 8013f4a:	d215      	bcs.n	8013f78 <uxr_compute_acknack+0x44>
 8013f4c:	89a0      	ldrh	r0, [r4, #12]
 8013f4e:	3701      	adds	r7, #1
 8013f50:	b2b9      	uxth	r1, r7
 8013f52:	f000 fcc5 	bl	80148e0 <uxr_seq_num_add>
 8013f56:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013f5a:	fbb0 f3fc 	udiv	r3, r0, ip
 8013f5e:	fb0c 0313 	mls	r3, ip, r3, r0
 8013f62:	b29a      	uxth	r2, r3
 8013f64:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013f68:	fbb3 f3fc 	udiv	r3, r3, ip
 8013f6c:	fb02 f303 	mul.w	r3, r2, r3
 8013f70:	58cb      	ldr	r3, [r1, r3]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d1e8      	bne.n	8013f48 <uxr_compute_acknack+0x14>
 8013f76:	4605      	mov	r5, r0
 8013f78:	8035      	strh	r5, [r6, #0]
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	4628      	mov	r0, r5
 8013f7e:	89e7      	ldrh	r7, [r4, #14]
 8013f80:	f000 fcb2 	bl	80148e8 <uxr_seq_num_sub>
 8013f84:	4601      	mov	r1, r0
 8013f86:	4638      	mov	r0, r7
 8013f88:	f000 fcae 	bl	80148e8 <uxr_seq_num_sub>
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	b318      	cbz	r0, 8013fd8 <uxr_compute_acknack+0xa4>
 8013f90:	f04f 0900 	mov.w	r9, #0
 8013f94:	464f      	mov	r7, r9
 8013f96:	f04f 0801 	mov.w	r8, #1
 8013f9a:	fa1f f189 	uxth.w	r1, r9
 8013f9e:	8830      	ldrh	r0, [r6, #0]
 8013fa0:	f000 fc9e 	bl	80148e0 <uxr_seq_num_add>
 8013fa4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013fa8:	fbb0 f3fc 	udiv	r3, r0, ip
 8013fac:	e9d4 1200 	ldrd	r1, r2, [r4]
 8013fb0:	fb03 001c 	mls	r0, r3, ip, r0
 8013fb4:	b283      	uxth	r3, r0
 8013fb6:	fbb2 f2fc 	udiv	r2, r2, ip
 8013fba:	fb02 f303 	mul.w	r3, r2, r3
 8013fbe:	fa08 f209 	lsl.w	r2, r8, r9
 8013fc2:	58cb      	ldr	r3, [r1, r3]
 8013fc4:	f109 0901 	add.w	r9, r9, #1
 8013fc8:	b90b      	cbnz	r3, 8013fce <uxr_compute_acknack+0x9a>
 8013fca:	4317      	orrs	r7, r2
 8013fcc:	b2bf      	uxth	r7, r7
 8013fce:	454d      	cmp	r5, r9
 8013fd0:	d1e3      	bne.n	8013f9a <uxr_compute_acknack+0x66>
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fd8:	4607      	mov	r7, r0
 8013fda:	4638      	mov	r0, r7
 8013fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013fe0 <uxr_init_output_best_effort_stream>:
 8013fe0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8013fe4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8013fe8:	6001      	str	r1, [r0, #0]
 8013fea:	7303      	strb	r3, [r0, #12]
 8013fec:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop

08013ff4 <uxr_reset_output_best_effort_stream>:
 8013ff4:	7b02      	ldrb	r2, [r0, #12]
 8013ff6:	6042      	str	r2, [r0, #4]
 8013ff8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013ffc:	81c3      	strh	r3, [r0, #14]
 8013ffe:	4770      	bx	lr

08014000 <uxr_prepare_best_effort_buffer_to_write>:
 8014000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014002:	4604      	mov	r4, r0
 8014004:	b083      	sub	sp, #12
 8014006:	6840      	ldr	r0, [r0, #4]
 8014008:	460d      	mov	r5, r1
 801400a:	4616      	mov	r6, r2
 801400c:	f7f8 fda0 	bl	800cb50 <uxr_submessage_padding>
 8014010:	6863      	ldr	r3, [r4, #4]
 8014012:	4418      	add	r0, r3
 8014014:	68a3      	ldr	r3, [r4, #8]
 8014016:	1942      	adds	r2, r0, r5
 8014018:	4293      	cmp	r3, r2
 801401a:	bf2c      	ite	cs
 801401c:	2701      	movcs	r7, #1
 801401e:	2700      	movcc	r7, #0
 8014020:	d202      	bcs.n	8014028 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8014022:	4638      	mov	r0, r7
 8014024:	b003      	add	sp, #12
 8014026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014028:	9000      	str	r0, [sp, #0]
 801402a:	6821      	ldr	r1, [r4, #0]
 801402c:	4630      	mov	r0, r6
 801402e:	2300      	movs	r3, #0
 8014030:	f7f7 f878 	bl	800b124 <ucdr_init_buffer_origin_offset>
 8014034:	6861      	ldr	r1, [r4, #4]
 8014036:	4638      	mov	r0, r7
 8014038:	4429      	add	r1, r5
 801403a:	6061      	str	r1, [r4, #4]
 801403c:	b003      	add	sp, #12
 801403e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014040 <uxr_prepare_best_effort_buffer_to_send>:
 8014040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	461d      	mov	r5, r3
 8014048:	6840      	ldr	r0, [r0, #4]
 801404a:	7b23      	ldrb	r3, [r4, #12]
 801404c:	4298      	cmp	r0, r3
 801404e:	bf8c      	ite	hi
 8014050:	2601      	movhi	r6, #1
 8014052:	2600      	movls	r6, #0
 8014054:	d802      	bhi.n	801405c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8014056:	4630      	mov	r0, r6
 8014058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801405c:	4688      	mov	r8, r1
 801405e:	89e0      	ldrh	r0, [r4, #14]
 8014060:	2101      	movs	r1, #1
 8014062:	4617      	mov	r7, r2
 8014064:	f000 fc3c 	bl	80148e0 <uxr_seq_num_add>
 8014068:	6823      	ldr	r3, [r4, #0]
 801406a:	81e0      	strh	r0, [r4, #14]
 801406c:	8028      	strh	r0, [r5, #0]
 801406e:	f8c8 3000 	str.w	r3, [r8]
 8014072:	6863      	ldr	r3, [r4, #4]
 8014074:	603b      	str	r3, [r7, #0]
 8014076:	7b23      	ldrb	r3, [r4, #12]
 8014078:	6063      	str	r3, [r4, #4]
 801407a:	4630      	mov	r0, r6
 801407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014080 <on_full_output_buffer>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	6802      	ldr	r2, [r0, #0]
 8014084:	460c      	mov	r4, r1
 8014086:	6809      	ldr	r1, [r1, #0]
 8014088:	8923      	ldrh	r3, [r4, #8]
 801408a:	eba2 0c01 	sub.w	ip, r2, r1
 801408e:	6862      	ldr	r2, [r4, #4]
 8014090:	fbb2 f2f3 	udiv	r2, r2, r3
 8014094:	fbbc fcf2 	udiv	ip, ip, r2
 8014098:	f10c 0c01 	add.w	ip, ip, #1
 801409c:	fa1f fc8c 	uxth.w	ip, ip
 80140a0:	fbbc fef3 	udiv	lr, ip, r3
 80140a4:	fb03 c31e 	mls	r3, r3, lr, ip
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	fb02 f303 	mul.w	r3, r2, r3
 80140ae:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80140b2:	58ca      	ldr	r2, [r1, r3]
 80140b4:	4463      	add	r3, ip
 80140b6:	eba2 020c 	sub.w	r2, r2, ip
 80140ba:	3308      	adds	r3, #8
 80140bc:	4605      	mov	r5, r0
 80140be:	4419      	add	r1, r3
 80140c0:	3a04      	subs	r2, #4
 80140c2:	6903      	ldr	r3, [r0, #16]
 80140c4:	f7f7 f838 	bl	800b138 <ucdr_init_buffer_origin>
 80140c8:	4628      	mov	r0, r5
 80140ca:	4903      	ldr	r1, [pc, #12]	@ (80140d8 <on_full_output_buffer+0x58>)
 80140cc:	4622      	mov	r2, r4
 80140ce:	f7f7 f80f 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 80140d2:	2000      	movs	r0, #0
 80140d4:	bd38      	pop	{r3, r4, r5, pc}
 80140d6:	bf00      	nop
 80140d8:	08014081 	.word	0x08014081

080140dc <uxr_init_output_reliable_stream>:
 80140dc:	b410      	push	{r4}
 80140de:	f89d c004 	ldrb.w	ip, [sp, #4]
 80140e2:	8103      	strh	r3, [r0, #8]
 80140e4:	e9c0 1200 	strd	r1, r2, [r0]
 80140e8:	f880 c00c 	strb.w	ip, [r0, #12]
 80140ec:	b1d3      	cbz	r3, 8014124 <uxr_init_output_reliable_stream+0x48>
 80140ee:	f8c1 c000 	str.w	ip, [r1]
 80140f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80140f6:	f1bc 0f01 	cmp.w	ip, #1
 80140fa:	d913      	bls.n	8014124 <uxr_init_output_reliable_stream+0x48>
 80140fc:	2301      	movs	r3, #1
 80140fe:	fbb3 f1fc 	udiv	r1, r3, ip
 8014102:	fb0c 3111 	mls	r1, ip, r1, r3
 8014106:	b289      	uxth	r1, r1
 8014108:	6842      	ldr	r2, [r0, #4]
 801410a:	6804      	ldr	r4, [r0, #0]
 801410c:	fbb2 f2fc 	udiv	r2, r2, ip
 8014110:	fb01 f202 	mul.w	r2, r1, r2
 8014114:	7b01      	ldrb	r1, [r0, #12]
 8014116:	50a1      	str	r1, [r4, r2]
 8014118:	3301      	adds	r3, #1
 801411a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801411e:	b29b      	uxth	r3, r3
 8014120:	459c      	cmp	ip, r3
 8014122:	d8ec      	bhi.n	80140fe <uxr_init_output_reliable_stream+0x22>
 8014124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014128:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801412c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8014130:	4905      	ldr	r1, [pc, #20]	@ (8014148 <uxr_init_output_reliable_stream+0x6c>)
 8014132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014136:	f8c0 100e 	str.w	r1, [r0, #14]
 801413a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801413e:	2300      	movs	r3, #0
 8014140:	8242      	strh	r2, [r0, #18]
 8014142:	8403      	strh	r3, [r0, #32]
 8014144:	4770      	bx	lr
 8014146:	bf00      	nop
 8014148:	ffff0000 	.word	0xffff0000

0801414c <uxr_reset_output_reliable_stream>:
 801414c:	8901      	ldrh	r1, [r0, #8]
 801414e:	b1b1      	cbz	r1, 801417e <uxr_reset_output_reliable_stream+0x32>
 8014150:	f04f 0c00 	mov.w	ip, #0
 8014154:	4663      	mov	r3, ip
 8014156:	fbb3 f2f1 	udiv	r2, r3, r1
 801415a:	fb01 3312 	mls	r3, r1, r2, r3
 801415e:	b29b      	uxth	r3, r3
 8014160:	6842      	ldr	r2, [r0, #4]
 8014162:	fbb2 f2f1 	udiv	r2, r2, r1
 8014166:	6801      	ldr	r1, [r0, #0]
 8014168:	fb02 f303 	mul.w	r3, r2, r3
 801416c:	7b02      	ldrb	r2, [r0, #12]
 801416e:	50ca      	str	r2, [r1, r3]
 8014170:	f10c 0c01 	add.w	ip, ip, #1
 8014174:	8901      	ldrh	r1, [r0, #8]
 8014176:	fa1f f38c 	uxth.w	r3, ip
 801417a:	4299      	cmp	r1, r3
 801417c:	d8eb      	bhi.n	8014156 <uxr_reset_output_reliable_stream+0xa>
 801417e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014182:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014186:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801418a:	4904      	ldr	r1, [pc, #16]	@ (801419c <uxr_reset_output_reliable_stream+0x50>)
 801418c:	f8c0 100e 	str.w	r1, [r0, #14]
 8014190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014194:	2300      	movs	r3, #0
 8014196:	8242      	strh	r2, [r0, #18]
 8014198:	8403      	strh	r3, [r0, #32]
 801419a:	4770      	bx	lr
 801419c:	ffff0000 	.word	0xffff0000

080141a0 <uxr_prepare_reliable_buffer_to_write>:
 80141a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a4:	4604      	mov	r4, r0
 80141a6:	b091      	sub	sp, #68	@ 0x44
 80141a8:	8900      	ldrh	r0, [r0, #8]
 80141aa:	89e6      	ldrh	r6, [r4, #14]
 80141ac:	6823      	ldr	r3, [r4, #0]
 80141ae:	9204      	str	r2, [sp, #16]
 80141b0:	fbb6 f2f0 	udiv	r2, r6, r0
 80141b4:	fb00 6212 	mls	r2, r0, r2, r6
 80141b8:	b292      	uxth	r2, r2
 80141ba:	6865      	ldr	r5, [r4, #4]
 80141bc:	fbb5 f5f0 	udiv	r5, r5, r0
 80141c0:	fb05 3202 	mla	r2, r5, r2, r3
 80141c4:	3204      	adds	r2, #4
 80141c6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80141ca:	f894 900c 	ldrb.w	r9, [r4, #12]
 80141ce:	9203      	str	r2, [sp, #12]
 80141d0:	468b      	mov	fp, r1
 80141d2:	1f2f      	subs	r7, r5, #4
 80141d4:	2800      	cmp	r0, #0
 80141d6:	f000 814c 	beq.w	8014472 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80141da:	f04f 0c00 	mov.w	ip, #0
 80141de:	46e2      	mov	sl, ip
 80141e0:	4661      	mov	r1, ip
 80141e2:	fbb1 f2f0 	udiv	r2, r1, r0
 80141e6:	fb00 1212 	mls	r2, r0, r2, r1
 80141ea:	b292      	uxth	r2, r2
 80141ec:	fb05 f202 	mul.w	r2, r5, r2
 80141f0:	f10c 0c01 	add.w	ip, ip, #1
 80141f4:	589a      	ldr	r2, [r3, r2]
 80141f6:	454a      	cmp	r2, r9
 80141f8:	bf08      	it	eq
 80141fa:	f10a 0a01 	addeq.w	sl, sl, #1
 80141fe:	fa1f f18c 	uxth.w	r1, ip
 8014202:	bf08      	it	eq
 8014204:	fa1f fa8a 	uxtheq.w	sl, sl
 8014208:	4281      	cmp	r1, r0
 801420a:	d3ea      	bcc.n	80141e2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801420c:	4640      	mov	r0, r8
 801420e:	2104      	movs	r1, #4
 8014210:	f8cd a014 	str.w	sl, [sp, #20]
 8014214:	f7f6 ff9c 	bl	800b150 <ucdr_alignment>
 8014218:	4480      	add	r8, r0
 801421a:	eb08 020b 	add.w	r2, r8, fp
 801421e:	42ba      	cmp	r2, r7
 8014220:	f240 80cd 	bls.w	80143be <uxr_prepare_reliable_buffer_to_write+0x21e>
 8014224:	7b22      	ldrb	r2, [r4, #12]
 8014226:	445a      	add	r2, fp
 8014228:	42ba      	cmp	r2, r7
 801422a:	f240 80b5 	bls.w	8014398 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801422e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8014232:	33fc      	adds	r3, #252	@ 0xfc
 8014234:	b2ba      	uxth	r2, r7
 8014236:	4413      	add	r3, r2
 8014238:	b29b      	uxth	r3, r3
 801423a:	fb0a f903 	mul.w	r9, sl, r3
 801423e:	45d9      	cmp	r9, fp
 8014240:	9305      	str	r3, [sp, #20]
 8014242:	9306      	str	r3, [sp, #24]
 8014244:	f0c0 80b7 	bcc.w	80143b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8014248:	f108 0304 	add.w	r3, r8, #4
 801424c:	42bb      	cmp	r3, r7
 801424e:	f080 80db 	bcs.w	8014408 <uxr_prepare_reliable_buffer_to_write+0x268>
 8014252:	f1a2 0904 	sub.w	r9, r2, #4
 8014256:	eba9 0908 	sub.w	r9, r9, r8
 801425a:	9b05      	ldr	r3, [sp, #20]
 801425c:	fa1f f989 	uxth.w	r9, r9
 8014260:	ebab 0b09 	sub.w	fp, fp, r9
 8014264:	fbbb f2f3 	udiv	r2, fp, r3
 8014268:	fb03 b312 	mls	r3, r3, r2, fp
 801426c:	2b00      	cmp	r3, #0
 801426e:	f000 80c8 	beq.w	8014402 <uxr_prepare_reliable_buffer_to_write+0x262>
 8014272:	3201      	adds	r2, #1
 8014274:	b292      	uxth	r2, r2
 8014276:	9306      	str	r3, [sp, #24]
 8014278:	4552      	cmp	r2, sl
 801427a:	f200 809c 	bhi.w	80143b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801427e:	f10d 0b20 	add.w	fp, sp, #32
 8014282:	2a00      	cmp	r2, #0
 8014284:	d042      	beq.n	801430c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8014286:	f8cd 801c 	str.w	r8, [sp, #28]
 801428a:	f04f 0a00 	mov.w	sl, #0
 801428e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014292:	9505      	str	r5, [sp, #20]
 8014294:	f10d 0b20 	add.w	fp, sp, #32
 8014298:	4615      	mov	r5, r2
 801429a:	e000      	b.n	801429e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801429c:	46c1      	mov	r9, r8
 801429e:	8920      	ldrh	r0, [r4, #8]
 80142a0:	fbb6 f2f0 	udiv	r2, r6, r0
 80142a4:	fb00 6112 	mls	r1, r0, r2, r6
 80142a8:	b28a      	uxth	r2, r1
 80142aa:	6863      	ldr	r3, [r4, #4]
 80142ac:	fbb3 f1f0 	udiv	r1, r3, r0
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	fb02 f101 	mul.w	r1, r2, r1
 80142b6:	3104      	adds	r1, #4
 80142b8:	4419      	add	r1, r3
 80142ba:	4658      	mov	r0, fp
 80142bc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80142c0:	9200      	str	r2, [sp, #0]
 80142c2:	2300      	movs	r3, #0
 80142c4:	463a      	mov	r2, r7
 80142c6:	f7f6 ff2d 	bl	800b124 <ucdr_init_buffer_origin_offset>
 80142ca:	464a      	mov	r2, r9
 80142cc:	2300      	movs	r3, #0
 80142ce:	210d      	movs	r1, #13
 80142d0:	4658      	mov	r0, fp
 80142d2:	f7f8 fbfd 	bl	800cad0 <uxr_buffer_submessage_header>
 80142d6:	8921      	ldrh	r1, [r4, #8]
 80142d8:	fbb6 f2f1 	udiv	r2, r6, r1
 80142dc:	fb01 6212 	mls	r2, r1, r2, r6
 80142e0:	b292      	uxth	r2, r2
 80142e2:	6863      	ldr	r3, [r4, #4]
 80142e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80142e8:	fb02 f303 	mul.w	r3, r2, r3
 80142ec:	6822      	ldr	r2, [r4, #0]
 80142ee:	4630      	mov	r0, r6
 80142f0:	50d7      	str	r7, [r2, r3]
 80142f2:	2101      	movs	r1, #1
 80142f4:	f000 faf4 	bl	80148e0 <uxr_seq_num_add>
 80142f8:	f10a 0a01 	add.w	sl, sl, #1
 80142fc:	fa1f f38a 	uxth.w	r3, sl
 8014300:	429d      	cmp	r5, r3
 8014302:	4606      	mov	r6, r0
 8014304:	d8ca      	bhi.n	801429c <uxr_prepare_reliable_buffer_to_write+0xfc>
 8014306:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801430a:	9d05      	ldr	r5, [sp, #20]
 801430c:	8920      	ldrh	r0, [r4, #8]
 801430e:	fbb6 f3f0 	udiv	r3, r6, r0
 8014312:	fb00 6313 	mls	r3, r0, r3, r6
 8014316:	b299      	uxth	r1, r3
 8014318:	6863      	ldr	r3, [r4, #4]
 801431a:	fbb3 f3f0 	udiv	r3, r3, r0
 801431e:	fb01 f303 	mul.w	r3, r1, r3
 8014322:	6821      	ldr	r1, [r4, #0]
 8014324:	3304      	adds	r3, #4
 8014326:	4419      	add	r1, r3
 8014328:	463a      	mov	r2, r7
 801432a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801432e:	9000      	str	r0, [sp, #0]
 8014330:	2300      	movs	r3, #0
 8014332:	4658      	mov	r0, fp
 8014334:	f7f6 fef6 	bl	800b124 <ucdr_init_buffer_origin_offset>
 8014338:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801433c:	4658      	mov	r0, fp
 801433e:	fa1f f289 	uxth.w	r2, r9
 8014342:	2302      	movs	r3, #2
 8014344:	210d      	movs	r1, #13
 8014346:	f7f8 fbc3 	bl	800cad0 <uxr_buffer_submessage_header>
 801434a:	9b03      	ldr	r3, [sp, #12]
 801434c:	8927      	ldrh	r7, [r4, #8]
 801434e:	7b20      	ldrb	r0, [r4, #12]
 8014350:	f108 0104 	add.w	r1, r8, #4
 8014354:	440b      	add	r3, r1
 8014356:	4619      	mov	r1, r3
 8014358:	fbb6 f3f7 	udiv	r3, r6, r7
 801435c:	fb07 6313 	mls	r3, r7, r3, r6
 8014360:	f1a5 0208 	sub.w	r2, r5, #8
 8014364:	b29d      	uxth	r5, r3
 8014366:	3004      	adds	r0, #4
 8014368:	6863      	ldr	r3, [r4, #4]
 801436a:	fbb3 f3f7 	udiv	r3, r3, r7
 801436e:	fb05 f303 	mul.w	r3, r5, r3
 8014372:	6825      	ldr	r5, [r4, #0]
 8014374:	4448      	add	r0, r9
 8014376:	50e8      	str	r0, [r5, r3]
 8014378:	9d04      	ldr	r5, [sp, #16]
 801437a:	eba2 0208 	sub.w	r2, r2, r8
 801437e:	4628      	mov	r0, r5
 8014380:	f7f6 fee2 	bl	800b148 <ucdr_init_buffer>
 8014384:	4628      	mov	r0, r5
 8014386:	493c      	ldr	r1, [pc, #240]	@ (8014478 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8014388:	4622      	mov	r2, r4
 801438a:	f7f6 feb1 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 801438e:	2001      	movs	r0, #1
 8014390:	81e6      	strh	r6, [r4, #14]
 8014392:	b011      	add	sp, #68	@ 0x44
 8014394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014398:	2101      	movs	r1, #1
 801439a:	89e0      	ldrh	r0, [r4, #14]
 801439c:	f000 faa0 	bl	80148e0 <uxr_seq_num_add>
 80143a0:	8921      	ldrh	r1, [r4, #8]
 80143a2:	4605      	mov	r5, r0
 80143a4:	8a60      	ldrh	r0, [r4, #18]
 80143a6:	f000 fa9b 	bl	80148e0 <uxr_seq_num_add>
 80143aa:	4601      	mov	r1, r0
 80143ac:	4628      	mov	r0, r5
 80143ae:	f000 fa9f 	bl	80148f0 <uxr_seq_num_cmp>
 80143b2:	2800      	cmp	r0, #0
 80143b4:	dd42      	ble.n	801443c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80143b6:	2000      	movs	r0, #0
 80143b8:	b011      	add	sp, #68	@ 0x44
 80143ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143be:	8921      	ldrh	r1, [r4, #8]
 80143c0:	8a60      	ldrh	r0, [r4, #18]
 80143c2:	9205      	str	r2, [sp, #20]
 80143c4:	f000 fa8c 	bl	80148e0 <uxr_seq_num_add>
 80143c8:	4601      	mov	r1, r0
 80143ca:	4630      	mov	r0, r6
 80143cc:	f000 fa90 	bl	80148f0 <uxr_seq_num_cmp>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	9a05      	ldr	r2, [sp, #20]
 80143d4:	dcef      	bgt.n	80143b6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80143d6:	8927      	ldrh	r7, [r4, #8]
 80143d8:	fbb6 f3f7 	udiv	r3, r6, r7
 80143dc:	fb07 6313 	mls	r3, r7, r3, r6
 80143e0:	b29d      	uxth	r5, r3
 80143e2:	6863      	ldr	r3, [r4, #4]
 80143e4:	6824      	ldr	r4, [r4, #0]
 80143e6:	fbb3 f3f7 	udiv	r3, r3, r7
 80143ea:	fb05 f303 	mul.w	r3, r5, r3
 80143ee:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80143f2:	50e2      	str	r2, [r4, r3]
 80143f4:	2300      	movs	r3, #0
 80143f6:	f8cd 8000 	str.w	r8, [sp]
 80143fa:	f7f6 fe93 	bl	800b124 <ucdr_init_buffer_origin_offset>
 80143fe:	2001      	movs	r0, #1
 8014400:	e7da      	b.n	80143b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014402:	b293      	uxth	r3, r2
 8014404:	461a      	mov	r2, r3
 8014406:	e737      	b.n	8014278 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8014408:	4630      	mov	r0, r6
 801440a:	2101      	movs	r1, #1
 801440c:	9207      	str	r2, [sp, #28]
 801440e:	f000 fa67 	bl	80148e0 <uxr_seq_num_add>
 8014412:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8014416:	fbb0 f1fc 	udiv	r1, r0, ip
 801441a:	fb0c 0111 	mls	r1, ip, r1, r0
 801441e:	4606      	mov	r6, r0
 8014420:	b288      	uxth	r0, r1
 8014422:	6863      	ldr	r3, [r4, #4]
 8014424:	fbb3 f1fc 	udiv	r1, r3, ip
 8014428:	6823      	ldr	r3, [r4, #0]
 801442a:	9a07      	ldr	r2, [sp, #28]
 801442c:	fb00 f101 	mul.w	r1, r0, r1
 8014430:	3104      	adds	r1, #4
 8014432:	440b      	add	r3, r1
 8014434:	9303      	str	r3, [sp, #12]
 8014436:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801443a:	e70a      	b.n	8014252 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801443c:	8921      	ldrh	r1, [r4, #8]
 801443e:	fbb5 f3f1 	udiv	r3, r5, r1
 8014442:	fb01 5313 	mls	r3, r1, r3, r5
 8014446:	b29a      	uxth	r2, r3
 8014448:	6863      	ldr	r3, [r4, #4]
 801444a:	fbb3 f3f1 	udiv	r3, r3, r1
 801444e:	6821      	ldr	r1, [r4, #0]
 8014450:	9804      	ldr	r0, [sp, #16]
 8014452:	fb02 f303 	mul.w	r3, r2, r3
 8014456:	3304      	adds	r3, #4
 8014458:	7b22      	ldrb	r2, [r4, #12]
 801445a:	4419      	add	r1, r3
 801445c:	445a      	add	r2, fp
 801445e:	f841 2c04 	str.w	r2, [r1, #-4]
 8014462:	7b23      	ldrb	r3, [r4, #12]
 8014464:	9300      	str	r3, [sp, #0]
 8014466:	2300      	movs	r3, #0
 8014468:	f7f6 fe5c 	bl	800b124 <ucdr_init_buffer_origin_offset>
 801446c:	81e5      	strh	r5, [r4, #14]
 801446e:	2001      	movs	r0, #1
 8014470:	e7a2      	b.n	80143b8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8014472:	4682      	mov	sl, r0
 8014474:	e6ca      	b.n	801420c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8014476:	bf00      	nop
 8014478:	08014081 	.word	0x08014081

0801447c <uxr_prepare_next_reliable_buffer_to_send>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	4604      	mov	r4, r0
 8014480:	460f      	mov	r7, r1
 8014482:	8a00      	ldrh	r0, [r0, #16]
 8014484:	2101      	movs	r1, #1
 8014486:	4616      	mov	r6, r2
 8014488:	461d      	mov	r5, r3
 801448a:	f000 fa29 	bl	80148e0 <uxr_seq_num_add>
 801448e:	8028      	strh	r0, [r5, #0]
 8014490:	8922      	ldrh	r2, [r4, #8]
 8014492:	fbb0 f3f2 	udiv	r3, r0, r2
 8014496:	fb02 0c13 	mls	ip, r2, r3, r0
 801449a:	fa1f fc8c 	uxth.w	ip, ip
 801449e:	6863      	ldr	r3, [r4, #4]
 80144a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80144a4:	fb0c fc03 	mul.w	ip, ip, r3
 80144a8:	6823      	ldr	r3, [r4, #0]
 80144aa:	89e1      	ldrh	r1, [r4, #14]
 80144ac:	f10c 0c04 	add.w	ip, ip, #4
 80144b0:	4463      	add	r3, ip
 80144b2:	603b      	str	r3, [r7, #0]
 80144b4:	6823      	ldr	r3, [r4, #0]
 80144b6:	449c      	add	ip, r3
 80144b8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80144bc:	6033      	str	r3, [r6, #0]
 80144be:	f000 fa17 	bl	80148f0 <uxr_seq_num_cmp>
 80144c2:	2800      	cmp	r0, #0
 80144c4:	dd01      	ble.n	80144ca <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80144c6:	2000      	movs	r0, #0
 80144c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ca:	7b23      	ldrb	r3, [r4, #12]
 80144cc:	6832      	ldr	r2, [r6, #0]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d9f9      	bls.n	80144c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80144d2:	8a61      	ldrh	r1, [r4, #18]
 80144d4:	8a20      	ldrh	r0, [r4, #16]
 80144d6:	f000 fa07 	bl	80148e8 <uxr_seq_num_sub>
 80144da:	8923      	ldrh	r3, [r4, #8]
 80144dc:	4283      	cmp	r3, r0
 80144de:	d0f2      	beq.n	80144c6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80144e0:	8828      	ldrh	r0, [r5, #0]
 80144e2:	89e3      	ldrh	r3, [r4, #14]
 80144e4:	8220      	strh	r0, [r4, #16]
 80144e6:	4298      	cmp	r0, r3
 80144e8:	d001      	beq.n	80144ee <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80144ea:	2001      	movs	r0, #1
 80144ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ee:	2101      	movs	r1, #1
 80144f0:	f000 f9f6 	bl	80148e0 <uxr_seq_num_add>
 80144f4:	81e0      	strh	r0, [r4, #14]
 80144f6:	2001      	movs	r0, #1
 80144f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144fa:	bf00      	nop

080144fc <uxr_update_output_stream_heartbeat_timestamp>:
 80144fc:	b570      	push	{r4, r5, r6, lr}
 80144fe:	8a01      	ldrh	r1, [r0, #16]
 8014500:	4604      	mov	r4, r0
 8014502:	8a40      	ldrh	r0, [r0, #18]
 8014504:	4615      	mov	r5, r2
 8014506:	461e      	mov	r6, r3
 8014508:	f000 f9f2 	bl	80148f0 <uxr_seq_num_cmp>
 801450c:	2800      	cmp	r0, #0
 801450e:	db07      	blt.n	8014520 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8014510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014514:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014518:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801451c:	2000      	movs	r0, #0
 801451e:	bd70      	pop	{r4, r5, r6, pc}
 8014520:	f894 0020 	ldrb.w	r0, [r4, #32]
 8014524:	b940      	cbnz	r0, 8014538 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8014526:	2301      	movs	r3, #1
 8014528:	f884 3020 	strb.w	r3, [r4, #32]
 801452c:	3564      	adds	r5, #100	@ 0x64
 801452e:	f146 0600 	adc.w	r6, r6, #0
 8014532:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014536:	bd70      	pop	{r4, r5, r6, pc}
 8014538:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801453c:	4295      	cmp	r5, r2
 801453e:	eb76 0303 	sbcs.w	r3, r6, r3
 8014542:	bfa5      	ittet	ge
 8014544:	3001      	addge	r0, #1
 8014546:	f884 0020 	strbge.w	r0, [r4, #32]
 801454a:	2000      	movlt	r0, #0
 801454c:	2001      	movge	r0, #1
 801454e:	e7ed      	b.n	801452c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08014550 <uxr_begin_output_nack_buffer_it>:
 8014550:	8a40      	ldrh	r0, [r0, #18]
 8014552:	4770      	bx	lr

08014554 <uxr_next_reliable_nack_buffer_to_send>:
 8014554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014558:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801455c:	b082      	sub	sp, #8
 801455e:	f1b8 0f00 	cmp.w	r8, #0
 8014562:	d011      	beq.n	8014588 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8014564:	4604      	mov	r4, r0
 8014566:	8818      	ldrh	r0, [r3, #0]
 8014568:	460e      	mov	r6, r1
 801456a:	4617      	mov	r7, r2
 801456c:	461d      	mov	r5, r3
 801456e:	2101      	movs	r1, #1
 8014570:	f000 f9b6 	bl	80148e0 <uxr_seq_num_add>
 8014574:	8028      	strh	r0, [r5, #0]
 8014576:	8a21      	ldrh	r1, [r4, #16]
 8014578:	f000 f9ba 	bl	80148f0 <uxr_seq_num_cmp>
 801457c:	2800      	cmp	r0, #0
 801457e:	dd07      	ble.n	8014590 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8014580:	f04f 0800 	mov.w	r8, #0
 8014584:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8014588:	4640      	mov	r0, r8
 801458a:	b002      	add	sp, #8
 801458c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014590:	8921      	ldrh	r1, [r4, #8]
 8014592:	8828      	ldrh	r0, [r5, #0]
 8014594:	6823      	ldr	r3, [r4, #0]
 8014596:	fbb0 f2f1 	udiv	r2, r0, r1
 801459a:	fb01 0c12 	mls	ip, r1, r2, r0
 801459e:	fa1f f28c 	uxth.w	r2, ip
 80145a2:	9301      	str	r3, [sp, #4]
 80145a4:	6863      	ldr	r3, [r4, #4]
 80145a6:	fbb3 fcf1 	udiv	ip, r3, r1
 80145aa:	9b01      	ldr	r3, [sp, #4]
 80145ac:	fb02 fc0c 	mul.w	ip, r2, ip
 80145b0:	f10c 0c04 	add.w	ip, ip, #4
 80145b4:	4463      	add	r3, ip
 80145b6:	6033      	str	r3, [r6, #0]
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	4463      	add	r3, ip
 80145bc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80145c0:	603b      	str	r3, [r7, #0]
 80145c2:	7b22      	ldrb	r2, [r4, #12]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d0d2      	beq.n	801456e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80145c8:	4640      	mov	r0, r8
 80145ca:	b002      	add	sp, #8
 80145cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080145d0 <uxr_process_acknack>:
 80145d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d2:	4604      	mov	r4, r0
 80145d4:	460e      	mov	r6, r1
 80145d6:	4610      	mov	r0, r2
 80145d8:	2101      	movs	r1, #1
 80145da:	f000 f985 	bl	80148e8 <uxr_seq_num_sub>
 80145de:	8a61      	ldrh	r1, [r4, #18]
 80145e0:	f000 f982 	bl	80148e8 <uxr_seq_num_sub>
 80145e4:	b1c0      	cbz	r0, 8014618 <uxr_process_acknack+0x48>
 80145e6:	4605      	mov	r5, r0
 80145e8:	2700      	movs	r7, #0
 80145ea:	2101      	movs	r1, #1
 80145ec:	8a60      	ldrh	r0, [r4, #18]
 80145ee:	f000 f977 	bl	80148e0 <uxr_seq_num_add>
 80145f2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80145f6:	fbb0 f1fc 	udiv	r1, r0, ip
 80145fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145fe:	fb0c 0111 	mls	r1, ip, r1, r0
 8014602:	b289      	uxth	r1, r1
 8014604:	3701      	adds	r7, #1
 8014606:	fbb3 f3fc 	udiv	r3, r3, ip
 801460a:	fb01 f303 	mul.w	r3, r1, r3
 801460e:	42bd      	cmp	r5, r7
 8014610:	7b21      	ldrb	r1, [r4, #12]
 8014612:	8260      	strh	r0, [r4, #18]
 8014614:	50d1      	str	r1, [r2, r3]
 8014616:	d1e8      	bne.n	80145ea <uxr_process_acknack+0x1a>
 8014618:	3e00      	subs	r6, #0
 801461a:	f04f 0300 	mov.w	r3, #0
 801461e:	bf18      	it	ne
 8014620:	2601      	movne	r6, #1
 8014622:	f884 3020 	strb.w	r3, [r4, #32]
 8014626:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801462a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801462c <uxr_is_output_up_to_date>:
 801462c:	8a01      	ldrh	r1, [r0, #16]
 801462e:	8a40      	ldrh	r0, [r0, #18]
 8014630:	b508      	push	{r3, lr}
 8014632:	f000 f95d 	bl	80148f0 <uxr_seq_num_cmp>
 8014636:	fab0 f080 	clz	r0, r0
 801463a:	0940      	lsrs	r0, r0, #5
 801463c:	bd08      	pop	{r3, pc}
 801463e:	bf00      	nop

08014640 <get_available_free_slots>:
 8014640:	8902      	ldrh	r2, [r0, #8]
 8014642:	b1da      	cbz	r2, 801467c <get_available_free_slots+0x3c>
 8014644:	b530      	push	{r4, r5, lr}
 8014646:	2100      	movs	r1, #0
 8014648:	6843      	ldr	r3, [r0, #4]
 801464a:	6805      	ldr	r5, [r0, #0]
 801464c:	7b04      	ldrb	r4, [r0, #12]
 801464e:	fbb3 fef2 	udiv	lr, r3, r2
 8014652:	4608      	mov	r0, r1
 8014654:	460b      	mov	r3, r1
 8014656:	fbb3 fcf2 	udiv	ip, r3, r2
 801465a:	fb02 331c 	mls	r3, r2, ip, r3
 801465e:	b29b      	uxth	r3, r3
 8014660:	fb0e f303 	mul.w	r3, lr, r3
 8014664:	3101      	adds	r1, #1
 8014666:	f855 c003 	ldr.w	ip, [r5, r3]
 801466a:	4564      	cmp	r4, ip
 801466c:	bf08      	it	eq
 801466e:	3001      	addeq	r0, #1
 8014670:	b28b      	uxth	r3, r1
 8014672:	bf08      	it	eq
 8014674:	b280      	uxtheq	r0, r0
 8014676:	4293      	cmp	r3, r2
 8014678:	d3ed      	bcc.n	8014656 <get_available_free_slots+0x16>
 801467a:	bd30      	pop	{r4, r5, pc}
 801467c:	4610      	mov	r0, r2
 801467e:	4770      	bx	lr

08014680 <uxr_buffer_request_data>:
 8014680:	b530      	push	{r4, r5, lr}
 8014682:	b095      	sub	sp, #84	@ 0x54
 8014684:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014688:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801468a:	9303      	str	r3, [sp, #12]
 801468c:	2200      	movs	r2, #0
 801468e:	2d00      	cmp	r5, #0
 8014690:	bf14      	ite	ne
 8014692:	2101      	movne	r1, #1
 8014694:	4611      	moveq	r1, r2
 8014696:	4604      	mov	r4, r0
 8014698:	f88d 301c 	strb.w	r3, [sp, #28]
 801469c:	f88d 201d 	strb.w	r2, [sp, #29]
 80146a0:	f88d 201e 	strb.w	r2, [sp, #30]
 80146a4:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80146a8:	d021      	beq.n	80146ee <uxr_buffer_request_data+0x6e>
 80146aa:	682a      	ldr	r2, [r5, #0]
 80146ac:	686b      	ldr	r3, [r5, #4]
 80146ae:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80146b2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80146b6:	2210      	movs	r2, #16
 80146b8:	2308      	movs	r3, #8
 80146ba:	2100      	movs	r1, #0
 80146bc:	e9cd 3100 	strd	r3, r1, [sp]
 80146c0:	4620      	mov	r0, r4
 80146c2:	9905      	ldr	r1, [sp, #20]
 80146c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80146c6:	f7f7 ff65 	bl	800c594 <uxr_prepare_stream_to_write_submessage>
 80146ca:	b918      	cbnz	r0, 80146d4 <uxr_buffer_request_data+0x54>
 80146cc:	4604      	mov	r4, r0
 80146ce:	4620      	mov	r0, r4
 80146d0:	b015      	add	sp, #84	@ 0x54
 80146d2:	bd30      	pop	{r4, r5, pc}
 80146d4:	9904      	ldr	r1, [sp, #16]
 80146d6:	aa06      	add	r2, sp, #24
 80146d8:	4620      	mov	r0, r4
 80146da:	f7f8 f891 	bl	800c800 <uxr_init_base_object_request>
 80146de:	a906      	add	r1, sp, #24
 80146e0:	4604      	mov	r4, r0
 80146e2:	a80c      	add	r0, sp, #48	@ 0x30
 80146e4:	f7f9 fb8c 	bl	800de00 <uxr_serialize_READ_DATA_Payload>
 80146e8:	4620      	mov	r0, r4
 80146ea:	b015      	add	sp, #84	@ 0x54
 80146ec:	bd30      	pop	{r4, r5, pc}
 80146ee:	2208      	movs	r2, #8
 80146f0:	e7e2      	b.n	80146b8 <uxr_buffer_request_data+0x38>
 80146f2:	bf00      	nop

080146f4 <uxr_buffer_cancel_data>:
 80146f4:	b510      	push	{r4, lr}
 80146f6:	b094      	sub	sp, #80	@ 0x50
 80146f8:	2300      	movs	r3, #0
 80146fa:	9202      	str	r2, [sp, #8]
 80146fc:	9205      	str	r2, [sp, #20]
 80146fe:	9301      	str	r3, [sp, #4]
 8014700:	2201      	movs	r2, #1
 8014702:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014706:	f88d 301e 	strb.w	r3, [sp, #30]
 801470a:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801470e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8014712:	2308      	movs	r3, #8
 8014714:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8014718:	9300      	str	r3, [sp, #0]
 801471a:	2210      	movs	r2, #16
 801471c:	ab0c      	add	r3, sp, #48	@ 0x30
 801471e:	4604      	mov	r4, r0
 8014720:	9103      	str	r1, [sp, #12]
 8014722:	f7f7 ff37 	bl	800c594 <uxr_prepare_stream_to_write_submessage>
 8014726:	b918      	cbnz	r0, 8014730 <uxr_buffer_cancel_data+0x3c>
 8014728:	4604      	mov	r4, r0
 801472a:	4620      	mov	r0, r4
 801472c:	b014      	add	sp, #80	@ 0x50
 801472e:	bd10      	pop	{r4, pc}
 8014730:	9905      	ldr	r1, [sp, #20]
 8014732:	aa06      	add	r2, sp, #24
 8014734:	4620      	mov	r0, r4
 8014736:	f7f8 f863 	bl	800c800 <uxr_init_base_object_request>
 801473a:	a906      	add	r1, sp, #24
 801473c:	4604      	mov	r4, r0
 801473e:	a80c      	add	r0, sp, #48	@ 0x30
 8014740:	f7f9 fb5e 	bl	800de00 <uxr_serialize_READ_DATA_Payload>
 8014744:	4620      	mov	r0, r4
 8014746:	b014      	add	sp, #80	@ 0x50
 8014748:	bd10      	pop	{r4, pc}
 801474a:	bf00      	nop

0801474c <read_submessage_format>:
 801474c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014750:	b095      	sub	sp, #84	@ 0x54
 8014752:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8014756:	b113      	cbz	r3, 801475e <read_submessage_format+0x12>
 8014758:	b015      	add	sp, #84	@ 0x54
 801475a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801475e:	460c      	mov	r4, r1
 8014760:	4615      	mov	r5, r2
 8014762:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8014766:	4607      	mov	r7, r0
 8014768:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801476a:	9004      	str	r0, [sp, #16]
 801476c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801476e:	9005      	str	r0, [sp, #20]
 8014770:	1a52      	subs	r2, r2, r1
 8014772:	a80c      	add	r0, sp, #48	@ 0x30
 8014774:	4699      	mov	r9, r3
 8014776:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801477a:	f7f6 fce5 	bl	800b148 <ucdr_init_buffer>
 801477e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014782:	a80c      	add	r0, sp, #48	@ 0x30
 8014784:	f7f6 fcb4 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 8014788:	69e2      	ldr	r2, [r4, #28]
 801478a:	b19a      	cbz	r2, 80147b4 <read_submessage_format+0x68>
 801478c:	f1b8 0f07 	cmp.w	r8, #7
 8014790:	f882 9014 	strb.w	r9, [r2, #20]
 8014794:	d040      	beq.n	8014818 <read_submessage_format+0xcc>
 8014796:	f1b8 0f08 	cmp.w	r8, #8
 801479a:	d02e      	beq.n	80147fa <read_submessage_format+0xae>
 801479c:	f1b8 0f06 	cmp.w	r8, #6
 80147a0:	d011      	beq.n	80147c6 <read_submessage_format+0x7a>
 80147a2:	2301      	movs	r3, #1
 80147a4:	7513      	strb	r3, [r2, #20]
 80147a6:	4629      	mov	r1, r5
 80147a8:	4620      	mov	r0, r4
 80147aa:	f7f6 fd1d 	bl	800b1e8 <ucdr_advance_buffer>
 80147ae:	b015      	add	sp, #84	@ 0x54
 80147b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147b4:	f1b8 0f07 	cmp.w	r8, #7
 80147b8:	d02e      	beq.n	8014818 <read_submessage_format+0xcc>
 80147ba:	f1b8 0f08 	cmp.w	r8, #8
 80147be:	d01c      	beq.n	80147fa <read_submessage_format+0xae>
 80147c0:	f1b8 0f06 	cmp.w	r8, #6
 80147c4:	d1ef      	bne.n	80147a6 <read_submessage_format+0x5a>
 80147c6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80147ca:	f1b8 0f00 	cmp.w	r8, #0
 80147ce:	d011      	beq.n	80147f4 <read_submessage_format+0xa8>
 80147d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80147d2:	e9cd 3500 	strd	r3, r5, [sp]
 80147d6:	2306      	movs	r3, #6
 80147d8:	f88d 3016 	strb.w	r3, [sp, #22]
 80147dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80147e0:	9302      	str	r3, [sp, #8]
 80147e2:	4632      	mov	r2, r6
 80147e4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80147e8:	4638      	mov	r0, r7
 80147ea:	47c0      	blx	r8
 80147ec:	2301      	movs	r3, #1
 80147ee:	69e2      	ldr	r2, [r4, #28]
 80147f0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80147f4:	2a00      	cmp	r2, #0
 80147f6:	d1d4      	bne.n	80147a2 <read_submessage_format+0x56>
 80147f8:	e7d5      	b.n	80147a6 <read_submessage_format+0x5a>
 80147fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d0f8      	beq.n	80147f4 <read_submessage_format+0xa8>
 8014802:	a906      	add	r1, sp, #24
 8014804:	a80c      	add	r0, sp, #48	@ 0x30
 8014806:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801480a:	f7f9 fbbf 	bl	800df8c <uxr_deserialize_SampleIdentity>
 801480e:	b9a0      	cbnz	r0, 801483a <read_submessage_format+0xee>
 8014810:	69e2      	ldr	r2, [r4, #28]
 8014812:	2a00      	cmp	r2, #0
 8014814:	d1c5      	bne.n	80147a2 <read_submessage_format+0x56>
 8014816:	e7c6      	b.n	80147a6 <read_submessage_format+0x5a>
 8014818:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801481c:	b13b      	cbz	r3, 801482e <read_submessage_format+0xe2>
 801481e:	a906      	add	r1, sp, #24
 8014820:	a80c      	add	r0, sp, #48	@ 0x30
 8014822:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8014826:	f7f9 f885 	bl	800d934 <uxr_deserialize_BaseObjectRequest>
 801482a:	bb60      	cbnz	r0, 8014886 <read_submessage_format+0x13a>
 801482c:	69e2      	ldr	r2, [r4, #28]
 801482e:	68a3      	ldr	r3, [r4, #8]
 8014830:	442b      	add	r3, r5
 8014832:	60a3      	str	r3, [r4, #8]
 8014834:	2a00      	cmp	r2, #0
 8014836:	d1b4      	bne.n	80147a2 <read_submessage_format+0x56>
 8014838:	e7b5      	b.n	80147a6 <read_submessage_format+0x5a>
 801483a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801483e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014840:	1a52      	subs	r2, r2, r1
 8014842:	eba8 0803 	sub.w	r8, r8, r3
 8014846:	a80c      	add	r0, sp, #48	@ 0x30
 8014848:	f7f6 fc7e 	bl	800b148 <ucdr_init_buffer>
 801484c:	44a8      	add	r8, r5
 801484e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014852:	a80c      	add	r0, sp, #48	@ 0x30
 8014854:	f7f6 fc4c 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 8014858:	fa1f f888 	uxth.w	r8, r8
 801485c:	ab0c      	add	r3, sp, #48	@ 0x30
 801485e:	9300      	str	r3, [sp, #0]
 8014860:	f8cd 8004 	str.w	r8, [sp, #4]
 8014864:	2108      	movs	r1, #8
 8014866:	f88d 1016 	strb.w	r1, [sp, #22]
 801486a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801486e:	9102      	str	r1, [sp, #8]
 8014870:	ab06      	add	r3, sp, #24
 8014872:	4632      	mov	r2, r6
 8014874:	9905      	ldr	r1, [sp, #20]
 8014876:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801487a:	4638      	mov	r0, r7
 801487c:	47b0      	blx	r6
 801487e:	2301      	movs	r3, #1
 8014880:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8014884:	e7c4      	b.n	8014810 <read_submessage_format+0xc4>
 8014886:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801488a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801488c:	1a52      	subs	r2, r2, r1
 801488e:	a80c      	add	r0, sp, #48	@ 0x30
 8014890:	eba8 0803 	sub.w	r8, r8, r3
 8014894:	f7f6 fc58 	bl	800b148 <ucdr_init_buffer>
 8014898:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801489c:	a80c      	add	r0, sp, #48	@ 0x30
 801489e:	f7f6 fc27 	bl	800b0f0 <ucdr_set_on_full_buffer_callback>
 80148a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80148a4:	9300      	str	r3, [sp, #0]
 80148a6:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80148aa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80148ae:	44a8      	add	r8, r5
 80148b0:	fa1f f888 	uxth.w	r8, r8
 80148b4:	f8cd 8004 	str.w	r8, [sp, #4]
 80148b8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80148bc:	2107      	movs	r1, #7
 80148be:	f88d 1016 	strb.w	r1, [sp, #22]
 80148c2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80148c6:	9102      	str	r1, [sp, #8]
 80148c8:	4632      	mov	r2, r6
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80148d0:	9905      	ldr	r1, [sp, #20]
 80148d2:	4638      	mov	r0, r7
 80148d4:	47b0      	blx	r6
 80148d6:	2301      	movs	r3, #1
 80148d8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80148dc:	e7a6      	b.n	801482c <read_submessage_format+0xe0>
 80148de:	bf00      	nop

080148e0 <uxr_seq_num_add>:
 80148e0:	4408      	add	r0, r1
 80148e2:	b280      	uxth	r0, r0
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop

080148e8 <uxr_seq_num_sub>:
 80148e8:	1a40      	subs	r0, r0, r1
 80148ea:	b280      	uxth	r0, r0
 80148ec:	4770      	bx	lr
 80148ee:	bf00      	nop

080148f0 <uxr_seq_num_cmp>:
 80148f0:	4288      	cmp	r0, r1
 80148f2:	d011      	beq.n	8014918 <uxr_seq_num_cmp+0x28>
 80148f4:	d309      	bcc.n	801490a <uxr_seq_num_cmp+0x1a>
 80148f6:	4288      	cmp	r0, r1
 80148f8:	d910      	bls.n	801491c <uxr_seq_num_cmp+0x2c>
 80148fa:	1a40      	subs	r0, r0, r1
 80148fc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8014900:	bfd4      	ite	le
 8014902:	2001      	movle	r0, #1
 8014904:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8014908:	4770      	bx	lr
 801490a:	1a0b      	subs	r3, r1, r0
 801490c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014910:	daf1      	bge.n	80148f6 <uxr_seq_num_cmp+0x6>
 8014912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014916:	4770      	bx	lr
 8014918:	2000      	movs	r0, #0
 801491a:	4770      	bx	lr
 801491c:	2001      	movs	r0, #1
 801491e:	4770      	bx	lr

08014920 <uxr_init_framing_io>:
 8014920:	2300      	movs	r3, #0
 8014922:	7041      	strb	r1, [r0, #1]
 8014924:	7003      	strb	r3, [r0, #0]
 8014926:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop

0801492c <uxr_write_framed_msg>:
 801492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014930:	4617      	mov	r7, r2
 8014932:	7842      	ldrb	r2, [r0, #1]
 8014934:	b083      	sub	sp, #12
 8014936:	460e      	mov	r6, r1
 8014938:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801493c:	469a      	mov	sl, r3
 801493e:	2901      	cmp	r1, #1
 8014940:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014944:	4604      	mov	r4, r0
 8014946:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801494a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801494e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014952:	f240 8137 	bls.w	8014bc4 <uxr_write_framed_msg+0x298>
 8014956:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801495a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801495e:	2901      	cmp	r1, #1
 8014960:	f04f 0202 	mov.w	r2, #2
 8014964:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014968:	f240 808f 	bls.w	8014a8a <uxr_write_framed_msg+0x15e>
 801496c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801496e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014972:	b2dd      	uxtb	r5, r3
 8014974:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014978:	2203      	movs	r2, #3
 801497a:	2901      	cmp	r1, #1
 801497c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014980:	f240 809a 	bls.w	8014ab8 <uxr_write_framed_msg+0x18c>
 8014984:	18a1      	adds	r1, r4, r2
 8014986:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014988:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801498c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014990:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014994:	3201      	adds	r2, #1
 8014996:	2801      	cmp	r0, #1
 8014998:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801499c:	f240 80a0 	bls.w	8014ae0 <uxr_write_framed_msg+0x1b4>
 80149a0:	18a0      	adds	r0, r4, r2
 80149a2:	3201      	adds	r2, #1
 80149a4:	b2d2      	uxtb	r2, r2
 80149a6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80149aa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	f000 80a9 	beq.w	8014b06 <uxr_write_framed_msg+0x1da>
 80149b4:	f04f 0900 	mov.w	r9, #0
 80149b8:	46c8      	mov	r8, r9
 80149ba:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80149be:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80149c2:	2901      	cmp	r1, #1
 80149c4:	f240 80c3 	bls.w	8014b4e <uxr_write_framed_msg+0x222>
 80149c8:	2a29      	cmp	r2, #41	@ 0x29
 80149ca:	f200 809f 	bhi.w	8014b0c <uxr_write_framed_msg+0x1e0>
 80149ce:	18a1      	adds	r1, r4, r2
 80149d0:	3201      	adds	r2, #1
 80149d2:	b2d2      	uxtb	r2, r2
 80149d4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80149d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149dc:	ea89 0303 	eor.w	r3, r9, r3
 80149e0:	498c      	ldr	r1, [pc, #560]	@ (8014c14 <uxr_write_framed_msg+0x2e8>)
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	f108 0801 	add.w	r8, r8, #1
 80149e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80149ec:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80149f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149f2:	4543      	cmp	r3, r8
 80149f4:	d8e1      	bhi.n	80149ba <uxr_write_framed_msg+0x8e>
 80149f6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80149fa:	fa5f f889 	uxtb.w	r8, r9
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	f04f 0900 	mov.w	r9, #0
 8014a04:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014a08:	fa5f f18a 	uxtb.w	r1, sl
 8014a0c:	2901      	cmp	r1, #1
 8014a0e:	d921      	bls.n	8014a54 <uxr_write_framed_msg+0x128>
 8014a10:	2a29      	cmp	r2, #41	@ 0x29
 8014a12:	f240 80af 	bls.w	8014b74 <uxr_write_framed_msg+0x248>
 8014a16:	2500      	movs	r5, #0
 8014a18:	e000      	b.n	8014a1c <uxr_write_framed_msg+0xf0>
 8014a1a:	b160      	cbz	r0, 8014a36 <uxr_write_framed_msg+0x10a>
 8014a1c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014a20:	1b52      	subs	r2, r2, r5
 8014a22:	465b      	mov	r3, fp
 8014a24:	4421      	add	r1, r4
 8014a26:	4638      	mov	r0, r7
 8014a28:	47b0      	blx	r6
 8014a2a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014a2e:	4405      	add	r5, r0
 8014a30:	4295      	cmp	r5, r2
 8014a32:	d3f2      	bcc.n	8014a1a <uxr_write_framed_msg+0xee>
 8014a34:	d003      	beq.n	8014a3e <uxr_write_framed_msg+0x112>
 8014a36:	2000      	movs	r0, #0
 8014a38:	b003      	add	sp, #12
 8014a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3e:	fa5f f18a 	uxtb.w	r1, sl
 8014a42:	f04f 0300 	mov.w	r3, #0
 8014a46:	2901      	cmp	r1, #1
 8014a48:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014a4c:	f04f 0200 	mov.w	r2, #0
 8014a50:	f200 8090 	bhi.w	8014b74 <uxr_write_framed_msg+0x248>
 8014a54:	1c51      	adds	r1, r2, #1
 8014a56:	b2c9      	uxtb	r1, r1
 8014a58:	2929      	cmp	r1, #41	@ 0x29
 8014a5a:	d8dc      	bhi.n	8014a16 <uxr_write_framed_msg+0xea>
 8014a5c:	18a5      	adds	r5, r4, r2
 8014a5e:	4421      	add	r1, r4
 8014a60:	3202      	adds	r2, #2
 8014a62:	f088 0820 	eor.w	r8, r8, #32
 8014a66:	4648      	mov	r0, r9
 8014a68:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014a6c:	b2d2      	uxtb	r2, r2
 8014a6e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014a72:	f04f 0901 	mov.w	r9, #1
 8014a76:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014a7a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	f040 8085 	bne.w	8014b8e <uxr_write_framed_msg+0x262>
 8014a84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014a88:	e7bc      	b.n	8014a04 <uxr_write_framed_msg+0xd8>
 8014a8a:	4611      	mov	r1, r2
 8014a8c:	f04f 0c03 	mov.w	ip, #3
 8014a90:	2204      	movs	r2, #4
 8014a92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a94:	4421      	add	r1, r4
 8014a96:	b2dd      	uxtb	r5, r3
 8014a98:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014a9c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014aa0:	44a4      	add	ip, r4
 8014aa2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014aa6:	f080 0020 	eor.w	r0, r0, #32
 8014aaa:	2901      	cmp	r1, #1
 8014aac:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014ab0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ab4:	f63f af66 	bhi.w	8014984 <uxr_write_framed_msg+0x58>
 8014ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014aba:	18a0      	adds	r0, r4, r2
 8014abc:	f085 0520 	eor.w	r5, r5, #32
 8014ac0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014ac4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014ac8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014acc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014ad0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014ad4:	3202      	adds	r2, #2
 8014ad6:	2801      	cmp	r0, #1
 8014ad8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014adc:	f63f af60 	bhi.w	80149a0 <uxr_write_framed_msg+0x74>
 8014ae0:	1c50      	adds	r0, r2, #1
 8014ae2:	18a5      	adds	r5, r4, r2
 8014ae4:	fa54 f080 	uxtab	r0, r4, r0
 8014ae8:	3202      	adds	r2, #2
 8014aea:	f081 0120 	eor.w	r1, r1, #32
 8014aee:	b2d2      	uxtb	r2, r2
 8014af0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014af4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014af8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014afc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f47f af57 	bne.w	80149b4 <uxr_write_framed_msg+0x88>
 8014b06:	9301      	str	r3, [sp, #4]
 8014b08:	4698      	mov	r8, r3
 8014b0a:	e779      	b.n	8014a00 <uxr_write_framed_msg+0xd4>
 8014b0c:	2500      	movs	r5, #0
 8014b0e:	e001      	b.n	8014b14 <uxr_write_framed_msg+0x1e8>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d090      	beq.n	8014a36 <uxr_write_framed_msg+0x10a>
 8014b14:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014b18:	1b52      	subs	r2, r2, r5
 8014b1a:	465b      	mov	r3, fp
 8014b1c:	4421      	add	r1, r4
 8014b1e:	4638      	mov	r0, r7
 8014b20:	47b0      	blx	r6
 8014b22:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014b26:	4405      	add	r5, r0
 8014b28:	4295      	cmp	r5, r2
 8014b2a:	d3f1      	bcc.n	8014b10 <uxr_write_framed_msg+0x1e4>
 8014b2c:	d183      	bne.n	8014a36 <uxr_write_framed_msg+0x10a>
 8014b2e:	f04f 0300 	mov.w	r3, #0
 8014b32:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b38:	4543      	cmp	r3, r8
 8014b3a:	d964      	bls.n	8014c06 <uxr_write_framed_msg+0x2da>
 8014b3c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014b40:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014b44:	2901      	cmp	r1, #1
 8014b46:	f04f 0200 	mov.w	r2, #0
 8014b4a:	f63f af3d 	bhi.w	80149c8 <uxr_write_framed_msg+0x9c>
 8014b4e:	1c51      	adds	r1, r2, #1
 8014b50:	b2c9      	uxtb	r1, r1
 8014b52:	2929      	cmp	r1, #41	@ 0x29
 8014b54:	d8da      	bhi.n	8014b0c <uxr_write_framed_msg+0x1e0>
 8014b56:	18a0      	adds	r0, r4, r2
 8014b58:	4421      	add	r1, r4
 8014b5a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014b5e:	3202      	adds	r2, #2
 8014b60:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014b64:	b2d2      	uxtb	r2, r2
 8014b66:	f083 0020 	eor.w	r0, r3, #32
 8014b6a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014b6e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b72:	e733      	b.n	80149dc <uxr_write_framed_msg+0xb0>
 8014b74:	18a1      	adds	r1, r4, r2
 8014b76:	3201      	adds	r2, #1
 8014b78:	4648      	mov	r0, r9
 8014b7a:	b2d2      	uxtb	r2, r2
 8014b7c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014b80:	f04f 0901 	mov.w	r9, #1
 8014b84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	f43f af7b 	beq.w	8014a84 <uxr_write_framed_msg+0x158>
 8014b8e:	2500      	movs	r5, #0
 8014b90:	e002      	b.n	8014b98 <uxr_write_framed_msg+0x26c>
 8014b92:	2800      	cmp	r0, #0
 8014b94:	f43f af4f 	beq.w	8014a36 <uxr_write_framed_msg+0x10a>
 8014b98:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014b9c:	1b52      	subs	r2, r2, r5
 8014b9e:	465b      	mov	r3, fp
 8014ba0:	4421      	add	r1, r4
 8014ba2:	4638      	mov	r0, r7
 8014ba4:	47b0      	blx	r6
 8014ba6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014baa:	4405      	add	r5, r0
 8014bac:	4295      	cmp	r5, r2
 8014bae:	d3f0      	bcc.n	8014b92 <uxr_write_framed_msg+0x266>
 8014bb0:	f47f af41 	bne.w	8014a36 <uxr_write_framed_msg+0x10a>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bbc:	b298      	uxth	r0, r3
 8014bbe:	b003      	add	sp, #12
 8014bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc4:	217d      	movs	r1, #125	@ 0x7d
 8014bc6:	f082 0220 	eor.w	r2, r2, #32
 8014bca:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014bce:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014bd2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014bd6:	2901      	cmp	r1, #1
 8014bd8:	f04f 0203 	mov.w	r2, #3
 8014bdc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014be0:	d804      	bhi.n	8014bec <uxr_write_framed_msg+0x2c0>
 8014be2:	4611      	mov	r1, r2
 8014be4:	f04f 0c04 	mov.w	ip, #4
 8014be8:	2205      	movs	r2, #5
 8014bea:	e752      	b.n	8014a92 <uxr_write_framed_msg+0x166>
 8014bec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bee:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014bf2:	b2dd      	uxtb	r5, r3
 8014bf4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014bf8:	2204      	movs	r2, #4
 8014bfa:	2901      	cmp	r1, #1
 8014bfc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014c00:	f63f aec0 	bhi.w	8014984 <uxr_write_framed_msg+0x58>
 8014c04:	e758      	b.n	8014ab8 <uxr_write_framed_msg+0x18c>
 8014c06:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014c0a:	fa5f f889 	uxtb.w	r8, r9
 8014c0e:	9301      	str	r3, [sp, #4]
 8014c10:	2200      	movs	r2, #0
 8014c12:	e6f5      	b.n	8014a00 <uxr_write_framed_msg+0xd4>
 8014c14:	08019a20 	.word	0x08019a20

08014c18 <uxr_framing_read_transport>:
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	4604      	mov	r4, r0
 8014c1e:	b083      	sub	sp, #12
 8014c20:	461f      	mov	r7, r3
 8014c22:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014c26:	4689      	mov	r9, r1
 8014c28:	4692      	mov	sl, r2
 8014c2a:	f7f7 ff97 	bl	800cb5c <uxr_millis>
 8014c2e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014c32:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014c36:	42b3      	cmp	r3, r6
 8014c38:	4680      	mov	r8, r0
 8014c3a:	d061      	beq.n	8014d00 <uxr_framing_read_transport+0xe8>
 8014c3c:	d81c      	bhi.n	8014c78 <uxr_framing_read_transport+0x60>
 8014c3e:	1e75      	subs	r5, r6, #1
 8014c40:	1aed      	subs	r5, r5, r3
 8014c42:	b2ed      	uxtb	r5, r5
 8014c44:	2600      	movs	r6, #0
 8014c46:	455d      	cmp	r5, fp
 8014c48:	d81f      	bhi.n	8014c8a <uxr_framing_read_transport+0x72>
 8014c4a:	19ab      	adds	r3, r5, r6
 8014c4c:	455b      	cmp	r3, fp
 8014c4e:	bf84      	itt	hi
 8014c50:	ebab 0605 	subhi.w	r6, fp, r5
 8014c54:	b2f6      	uxtbhi	r6, r6
 8014c56:	b9ed      	cbnz	r5, 8014c94 <uxr_framing_read_transport+0x7c>
 8014c58:	f04f 0b00 	mov.w	fp, #0
 8014c5c:	f7f7 ff7e 	bl	800cb5c <uxr_millis>
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	eba0 0808 	sub.w	r8, r0, r8
 8014c66:	eba3 0308 	sub.w	r3, r3, r8
 8014c6a:	4658      	mov	r0, fp
 8014c6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c70:	603b      	str	r3, [r7, #0]
 8014c72:	b003      	add	sp, #12
 8014c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c78:	2e00      	cmp	r6, #0
 8014c7a:	d049      	beq.n	8014d10 <uxr_framing_read_transport+0xf8>
 8014c7c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014c80:	b2ed      	uxtb	r5, r5
 8014c82:	3e01      	subs	r6, #1
 8014c84:	455d      	cmp	r5, fp
 8014c86:	b2f6      	uxtb	r6, r6
 8014c88:	d9df      	bls.n	8014c4a <uxr_framing_read_transport+0x32>
 8014c8a:	fa5f f58b 	uxtb.w	r5, fp
 8014c8e:	2600      	movs	r6, #0
 8014c90:	2d00      	cmp	r5, #0
 8014c92:	d0e1      	beq.n	8014c58 <uxr_framing_read_transport+0x40>
 8014c94:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014c98:	3102      	adds	r1, #2
 8014c9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c9c:	9300      	str	r3, [sp, #0]
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	4421      	add	r1, r4
 8014ca2:	462a      	mov	r2, r5
 8014ca4:	4650      	mov	r0, sl
 8014ca6:	47c8      	blx	r9
 8014ca8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014cac:	4a1a      	ldr	r2, [pc, #104]	@ (8014d18 <uxr_framing_read_transport+0x100>)
 8014cae:	4403      	add	r3, r0
 8014cb0:	0859      	lsrs	r1, r3, #1
 8014cb2:	fba2 2101 	umull	r2, r1, r2, r1
 8014cb6:	0889      	lsrs	r1, r1, #2
 8014cb8:	222a      	movs	r2, #42	@ 0x2a
 8014cba:	fb02 3111 	mls	r1, r2, r1, r3
 8014cbe:	4683      	mov	fp, r0
 8014cc0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d0c7      	beq.n	8014c58 <uxr_framing_read_transport+0x40>
 8014cc8:	42a8      	cmp	r0, r5
 8014cca:	d1c7      	bne.n	8014c5c <uxr_framing_read_transport+0x44>
 8014ccc:	2e00      	cmp	r6, #0
 8014cce:	d0c5      	beq.n	8014c5c <uxr_framing_read_transport+0x44>
 8014cd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	3102      	adds	r1, #2
 8014cd6:	4632      	mov	r2, r6
 8014cd8:	4421      	add	r1, r4
 8014cda:	2300      	movs	r3, #0
 8014cdc:	4650      	mov	r0, sl
 8014cde:	47c8      	blx	r9
 8014ce0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8014d18 <uxr_framing_read_transport+0x100>)
 8014ce6:	180b      	adds	r3, r1, r0
 8014ce8:	0859      	lsrs	r1, r3, #1
 8014cea:	fba2 1201 	umull	r1, r2, r2, r1
 8014cee:	0892      	lsrs	r2, r2, #2
 8014cf0:	212a      	movs	r1, #42	@ 0x2a
 8014cf2:	fb01 3312 	mls	r3, r1, r2, r3
 8014cf6:	eb00 0b05 	add.w	fp, r0, r5
 8014cfa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014cfe:	e7ad      	b.n	8014c5c <uxr_framing_read_transport+0x44>
 8014d00:	2600      	movs	r6, #0
 8014d02:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014d06:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014d08:	d9bf      	bls.n	8014c8a <uxr_framing_read_transport+0x72>
 8014d0a:	2102      	movs	r1, #2
 8014d0c:	2529      	movs	r5, #41	@ 0x29
 8014d0e:	e7c4      	b.n	8014c9a <uxr_framing_read_transport+0x82>
 8014d10:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014d14:	b2ed      	uxtb	r5, r5
 8014d16:	e796      	b.n	8014c46 <uxr_framing_read_transport+0x2e>
 8014d18:	30c30c31 	.word	0x30c30c31

08014d1c <uxr_read_framed_msg>:
 8014d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d20:	461e      	mov	r6, r3
 8014d22:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014d26:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8014d2a:	429d      	cmp	r5, r3
 8014d2c:	b083      	sub	sp, #12
 8014d2e:	4604      	mov	r4, r0
 8014d30:	4688      	mov	r8, r1
 8014d32:	4691      	mov	r9, r2
 8014d34:	f000 8188 	beq.w	8015048 <uxr_read_framed_msg+0x32c>
 8014d38:	7823      	ldrb	r3, [r4, #0]
 8014d3a:	4dc1      	ldr	r5, [pc, #772]	@ (8015040 <uxr_read_framed_msg+0x324>)
 8014d3c:	4fc1      	ldr	r7, [pc, #772]	@ (8015044 <uxr_read_framed_msg+0x328>)
 8014d3e:	2b07      	cmp	r3, #7
 8014d40:	d8fd      	bhi.n	8014d3e <uxr_read_framed_msg+0x22>
 8014d42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014d46:	0115      	.short	0x0115
 8014d48:	00d600f6 	.word	0x00d600f6
 8014d4c:	009000b9 	.word	0x009000b9
 8014d50:	0030004d 	.word	0x0030004d
 8014d54:	0008      	.short	0x0008
 8014d56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014d5a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014d5e:	4299      	cmp	r1, r3
 8014d60:	f000 814a 	beq.w	8014ff8 <uxr_read_framed_msg+0x2dc>
 8014d64:	18e2      	adds	r2, r4, r3
 8014d66:	7892      	ldrb	r2, [r2, #2]
 8014d68:	2a7d      	cmp	r2, #125	@ 0x7d
 8014d6a:	f000 8199 	beq.w	80150a0 <uxr_read_framed_msg+0x384>
 8014d6e:	3301      	adds	r3, #1
 8014d70:	0858      	lsrs	r0, r3, #1
 8014d72:	fba5 1000 	umull	r1, r0, r5, r0
 8014d76:	0880      	lsrs	r0, r0, #2
 8014d78:	212a      	movs	r1, #42	@ 0x2a
 8014d7a:	fb01 3310 	mls	r3, r1, r0, r3
 8014d7e:	2a7e      	cmp	r2, #126	@ 0x7e
 8014d80:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014d84:	f000 8252 	beq.w	801522c <uxr_read_framed_msg+0x510>
 8014d88:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014d8a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014d8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	2200      	movs	r2, #0
 8014d94:	4299      	cmp	r1, r3
 8014d96:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014d98:	7022      	strb	r2, [r4, #0]
 8014d9a:	f000 8179 	beq.w	8015090 <uxr_read_framed_msg+0x374>
 8014d9e:	2000      	movs	r0, #0
 8014da0:	b003      	add	sp, #12
 8014da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014daa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014dae:	4299      	cmp	r1, r3
 8014db0:	f000 8131 	beq.w	8015016 <uxr_read_framed_msg+0x2fa>
 8014db4:	18e2      	adds	r2, r4, r3
 8014db6:	7890      	ldrb	r0, [r2, #2]
 8014db8:	287d      	cmp	r0, #125	@ 0x7d
 8014dba:	f000 8190 	beq.w	80150de <uxr_read_framed_msg+0x3c2>
 8014dbe:	3301      	adds	r3, #1
 8014dc0:	085a      	lsrs	r2, r3, #1
 8014dc2:	fba5 1202 	umull	r1, r2, r5, r2
 8014dc6:	0892      	lsrs	r2, r2, #2
 8014dc8:	212a      	movs	r1, #42	@ 0x2a
 8014dca:	fb01 3312 	mls	r3, r1, r2, r3
 8014dce:	287e      	cmp	r0, #126	@ 0x7e
 8014dd0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014dd4:	f000 821a 	beq.w	801520c <uxr_read_framed_msg+0x4f0>
 8014dd8:	2307      	movs	r3, #7
 8014dda:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014ddc:	7023      	strb	r3, [r4, #0]
 8014dde:	e7ae      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014de0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014de2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014de6:	459e      	cmp	lr, r3
 8014de8:	d938      	bls.n	8014e5c <uxr_read_framed_msg+0x140>
 8014dea:	ee07 8a90 	vmov	s15, r8
 8014dee:	212a      	movs	r1, #42	@ 0x2a
 8014df0:	e020      	b.n	8014e34 <uxr_read_framed_msg+0x118>
 8014df2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014df6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014dfa:	f000 80d4 	beq.w	8014fa6 <uxr_read_framed_msg+0x28a>
 8014dfe:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014e02:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014e06:	f000 8219 	beq.w	801523c <uxr_read_framed_msg+0x520>
 8014e0a:	f806 c003 	strb.w	ip, [r6, r3]
 8014e0e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014e12:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014e14:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014e18:	ea8a 000c 	eor.w	r0, sl, ip
 8014e1c:	b2c0      	uxtb	r0, r0
 8014e1e:	3301      	adds	r3, #1
 8014e20:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014e24:	b29b      	uxth	r3, r3
 8014e26:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8014e2a:	4573      	cmp	r3, lr
 8014e2c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014e2e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014e30:	f080 8120 	bcs.w	8015074 <uxr_read_framed_msg+0x358>
 8014e34:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014e38:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014e3c:	f100 0c01 	add.w	ip, r0, #1
 8014e40:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014e44:	fba5 8202 	umull	r8, r2, r5, r2
 8014e48:	0892      	lsrs	r2, r2, #2
 8014e4a:	4582      	cmp	sl, r0
 8014e4c:	eb04 0b00 	add.w	fp, r4, r0
 8014e50:	fb01 c212 	mls	r2, r1, r2, ip
 8014e54:	d1cd      	bne.n	8014df2 <uxr_read_framed_msg+0xd6>
 8014e56:	ee17 8a90 	vmov	r8, s15
 8014e5a:	459e      	cmp	lr, r3
 8014e5c:	f040 8111 	bne.w	8015082 <uxr_read_framed_msg+0x366>
 8014e60:	2306      	movs	r3, #6
 8014e62:	7023      	strb	r3, [r4, #0]
 8014e64:	e76b      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014e66:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014e6a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014e6e:	4298      	cmp	r0, r3
 8014e70:	f000 80c2 	beq.w	8014ff8 <uxr_read_framed_msg+0x2dc>
 8014e74:	18e2      	adds	r2, r4, r3
 8014e76:	7891      	ldrb	r1, [r2, #2]
 8014e78:	297d      	cmp	r1, #125	@ 0x7d
 8014e7a:	f000 814c 	beq.w	8015116 <uxr_read_framed_msg+0x3fa>
 8014e7e:	3301      	adds	r3, #1
 8014e80:	085a      	lsrs	r2, r3, #1
 8014e82:	fba5 0202 	umull	r0, r2, r5, r2
 8014e86:	0892      	lsrs	r2, r2, #2
 8014e88:	202a      	movs	r0, #42	@ 0x2a
 8014e8a:	fb00 3312 	mls	r3, r0, r2, r3
 8014e8e:	297e      	cmp	r1, #126	@ 0x7e
 8014e90:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014e94:	f000 81ca 	beq.w	801522c <uxr_read_framed_msg+0x510>
 8014e98:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014e9a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014e9e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	428b      	cmp	r3, r1
 8014ea6:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014ea8:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014eaa:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014eac:	f240 80df 	bls.w	801506e <uxr_read_framed_msg+0x352>
 8014eb0:	7020      	strb	r0, [r4, #0]
 8014eb2:	b003      	add	sp, #12
 8014eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eb8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014ebc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014ec0:	4299      	cmp	r1, r3
 8014ec2:	f000 80a8 	beq.w	8015016 <uxr_read_framed_msg+0x2fa>
 8014ec6:	18e2      	adds	r2, r4, r3
 8014ec8:	7890      	ldrb	r0, [r2, #2]
 8014eca:	287d      	cmp	r0, #125	@ 0x7d
 8014ecc:	f000 8164 	beq.w	8015198 <uxr_read_framed_msg+0x47c>
 8014ed0:	3301      	adds	r3, #1
 8014ed2:	085a      	lsrs	r2, r3, #1
 8014ed4:	fba5 1202 	umull	r1, r2, r5, r2
 8014ed8:	0892      	lsrs	r2, r2, #2
 8014eda:	212a      	movs	r1, #42	@ 0x2a
 8014edc:	fb01 3312 	mls	r3, r1, r2, r3
 8014ee0:	287e      	cmp	r0, #126	@ 0x7e
 8014ee2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014ee6:	f000 8191 	beq.w	801520c <uxr_read_framed_msg+0x4f0>
 8014eea:	2304      	movs	r3, #4
 8014eec:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014eee:	7023      	strb	r3, [r4, #0]
 8014ef0:	e725      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014ef2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014ef6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014efa:	4290      	cmp	r0, r2
 8014efc:	f000 80b3 	beq.w	8015066 <uxr_read_framed_msg+0x34a>
 8014f00:	18a3      	adds	r3, r4, r2
 8014f02:	7899      	ldrb	r1, [r3, #2]
 8014f04:	297d      	cmp	r1, #125	@ 0x7d
 8014f06:	f000 8164 	beq.w	80151d2 <uxr_read_framed_msg+0x4b6>
 8014f0a:	3201      	adds	r2, #1
 8014f0c:	0850      	lsrs	r0, r2, #1
 8014f0e:	fba5 3000 	umull	r3, r0, r5, r0
 8014f12:	0880      	lsrs	r0, r0, #2
 8014f14:	232a      	movs	r3, #42	@ 0x2a
 8014f16:	fb03 2210 	mls	r2, r3, r0, r2
 8014f1a:	297e      	cmp	r1, #126	@ 0x7e
 8014f1c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014f20:	f000 8188 	beq.w	8015234 <uxr_read_framed_msg+0x518>
 8014f24:	7863      	ldrb	r3, [r4, #1]
 8014f26:	428b      	cmp	r3, r1
 8014f28:	bf0c      	ite	eq
 8014f2a:	2303      	moveq	r3, #3
 8014f2c:	2300      	movne	r3, #0
 8014f2e:	7023      	strb	r3, [r4, #0]
 8014f30:	e705      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014f32:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014f36:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	4299      	cmp	r1, r3
 8014f3e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014f42:	d06c      	beq.n	801501e <uxr_read_framed_msg+0x302>
 8014f44:	18e2      	adds	r2, r4, r3
 8014f46:	7890      	ldrb	r0, [r2, #2]
 8014f48:	287d      	cmp	r0, #125	@ 0x7d
 8014f4a:	f000 8101 	beq.w	8015150 <uxr_read_framed_msg+0x434>
 8014f4e:	3301      	adds	r3, #1
 8014f50:	085a      	lsrs	r2, r3, #1
 8014f52:	fba5 1202 	umull	r1, r2, r5, r2
 8014f56:	0892      	lsrs	r2, r2, #2
 8014f58:	212a      	movs	r1, #42	@ 0x2a
 8014f5a:	fb01 3312 	mls	r3, r1, r2, r3
 8014f5e:	287e      	cmp	r0, #126	@ 0x7e
 8014f60:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014f64:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014f68:	d059      	beq.n	801501e <uxr_read_framed_msg+0x302>
 8014f6a:	2302      	movs	r3, #2
 8014f6c:	7023      	strb	r3, [r4, #0]
 8014f6e:	e6e6      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014f70:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014f74:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014f78:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014f7c:	1c51      	adds	r1, r2, #1
 8014f7e:	084b      	lsrs	r3, r1, #1
 8014f80:	fba5 c303 	umull	ip, r3, r5, r3
 8014f84:	089b      	lsrs	r3, r3, #2
 8014f86:	fb0e 1313 	mls	r3, lr, r3, r1
 8014f8a:	4592      	cmp	sl, r2
 8014f8c:	eb04 0002 	add.w	r0, r4, r2
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	f43f af04 	beq.w	8014d9e <uxr_read_framed_msg+0x82>
 8014f96:	7883      	ldrb	r3, [r0, #2]
 8014f98:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014f9c:	2b7e      	cmp	r3, #126	@ 0x7e
 8014f9e:	d1ed      	bne.n	8014f7c <uxr_read_framed_msg+0x260>
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	7023      	strb	r3, [r4, #0]
 8014fa4:	e6cb      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014fa6:	f100 0c01 	add.w	ip, r0, #1
 8014faa:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014fae:	fba5 8202 	umull	r8, r2, r5, r2
 8014fb2:	0892      	lsrs	r2, r2, #2
 8014fb4:	fb01 c212 	mls	r2, r1, r2, ip
 8014fb8:	eb04 0c02 	add.w	ip, r4, r2
 8014fbc:	b2d2      	uxtb	r2, r2
 8014fbe:	4592      	cmp	sl, r2
 8014fc0:	f100 0002 	add.w	r0, r0, #2
 8014fc4:	f43f af47 	beq.w	8014e56 <uxr_read_framed_msg+0x13a>
 8014fc8:	0842      	lsrs	r2, r0, #1
 8014fca:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014fce:	fba5 8202 	umull	r8, r2, r5, r2
 8014fd2:	0892      	lsrs	r2, r2, #2
 8014fd4:	fb01 0012 	mls	r0, r1, r2, r0
 8014fd8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014fdc:	f08a 0c20 	eor.w	ip, sl, #32
 8014fe0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014fe4:	f47f af11 	bne.w	8014e0a <uxr_read_framed_msg+0xee>
 8014fe8:	459e      	cmp	lr, r3
 8014fea:	ee17 8a90 	vmov	r8, s15
 8014fee:	f43f af37 	beq.w	8014e60 <uxr_read_framed_msg+0x144>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	7023      	strb	r3, [r4, #0]
 8014ff6:	e6a2      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8014ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	9301      	str	r3, [sp, #4]
 8015000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015002:	464a      	mov	r2, r9
 8015004:	4641      	mov	r1, r8
 8015006:	4620      	mov	r0, r4
 8015008:	f7ff fe06 	bl	8014c18 <uxr_framing_read_transport>
 801500c:	2800      	cmp	r0, #0
 801500e:	f43f aec6 	beq.w	8014d9e <uxr_read_framed_msg+0x82>
 8015012:	7823      	ldrb	r3, [r4, #0]
 8015014:	e693      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8015016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015018:	9300      	str	r3, [sp, #0]
 801501a:	2302      	movs	r3, #2
 801501c:	e7ef      	b.n	8014ffe <uxr_read_framed_msg+0x2e2>
 801501e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015020:	9300      	str	r3, [sp, #0]
 8015022:	2304      	movs	r3, #4
 8015024:	9301      	str	r3, [sp, #4]
 8015026:	464a      	mov	r2, r9
 8015028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801502a:	4641      	mov	r1, r8
 801502c:	4620      	mov	r0, r4
 801502e:	f7ff fdf3 	bl	8014c18 <uxr_framing_read_transport>
 8015032:	2800      	cmp	r0, #0
 8015034:	d1ed      	bne.n	8015012 <uxr_read_framed_msg+0x2f6>
 8015036:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801503a:	2b7e      	cmp	r3, #126	@ 0x7e
 801503c:	d0e9      	beq.n	8015012 <uxr_read_framed_msg+0x2f6>
 801503e:	e6ae      	b.n	8014d9e <uxr_read_framed_msg+0x82>
 8015040:	30c30c31 	.word	0x30c30c31
 8015044:	08019a20 	.word	0x08019a20
 8015048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801504a:	9300      	str	r3, [sp, #0]
 801504c:	2305      	movs	r3, #5
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015052:	f7ff fde1 	bl	8014c18 <uxr_framing_read_transport>
 8015056:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801505a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801505e:	429a      	cmp	r2, r3
 8015060:	f43f ae9d 	beq.w	8014d9e <uxr_read_framed_msg+0x82>
 8015064:	e668      	b.n	8014d38 <uxr_read_framed_msg+0x1c>
 8015066:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	2303      	movs	r3, #3
 801506c:	e7c7      	b.n	8014ffe <uxr_read_framed_msg+0x2e2>
 801506e:	2305      	movs	r3, #5
 8015070:	7023      	strb	r3, [r4, #0]
 8015072:	e664      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 8015074:	ee17 8a90 	vmov	r8, s15
 8015078:	f43f aef2 	beq.w	8014e60 <uxr_read_framed_msg+0x144>
 801507c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015080:	d08e      	beq.n	8014fa0 <uxr_read_framed_msg+0x284>
 8015082:	ebae 0303 	sub.w	r3, lr, r3
 8015086:	3302      	adds	r3, #2
 8015088:	9301      	str	r3, [sp, #4]
 801508a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801508c:	9300      	str	r3, [sp, #0]
 801508e:	e7b7      	b.n	8015000 <uxr_read_framed_msg+0x2e4>
 8015090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015092:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8015096:	7013      	strb	r3, [r2, #0]
 8015098:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801509a:	b003      	add	sp, #12
 801509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a0:	f103 0c01 	add.w	ip, r3, #1
 80150a4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80150a8:	fba5 0202 	umull	r0, r2, r5, r2
 80150ac:	0892      	lsrs	r2, r2, #2
 80150ae:	202a      	movs	r0, #42	@ 0x2a
 80150b0:	fb00 c212 	mls	r2, r0, r2, ip
 80150b4:	fa5f fc82 	uxtb.w	ip, r2
 80150b8:	4561      	cmp	r1, ip
 80150ba:	d09d      	beq.n	8014ff8 <uxr_read_framed_msg+0x2dc>
 80150bc:	3302      	adds	r3, #2
 80150be:	4422      	add	r2, r4
 80150c0:	0859      	lsrs	r1, r3, #1
 80150c2:	7892      	ldrb	r2, [r2, #2]
 80150c4:	fba5 c101 	umull	ip, r1, r5, r1
 80150c8:	0889      	lsrs	r1, r1, #2
 80150ca:	fb00 3311 	mls	r3, r0, r1, r3
 80150ce:	2a7e      	cmp	r2, #126	@ 0x7e
 80150d0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150d4:	f000 80aa 	beq.w	801522c <uxr_read_framed_msg+0x510>
 80150d8:	f082 0220 	eor.w	r2, r2, #32
 80150dc:	e654      	b.n	8014d88 <uxr_read_framed_msg+0x6c>
 80150de:	1c58      	adds	r0, r3, #1
 80150e0:	0842      	lsrs	r2, r0, #1
 80150e2:	fba5 c202 	umull	ip, r2, r5, r2
 80150e6:	0892      	lsrs	r2, r2, #2
 80150e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80150ec:	fb0c 0212 	mls	r2, ip, r2, r0
 80150f0:	b2d0      	uxtb	r0, r2
 80150f2:	4281      	cmp	r1, r0
 80150f4:	d08f      	beq.n	8015016 <uxr_read_framed_msg+0x2fa>
 80150f6:	4422      	add	r2, r4
 80150f8:	3302      	adds	r3, #2
 80150fa:	7890      	ldrb	r0, [r2, #2]
 80150fc:	085a      	lsrs	r2, r3, #1
 80150fe:	fba5 1202 	umull	r1, r2, r5, r2
 8015102:	0892      	lsrs	r2, r2, #2
 8015104:	fb0c 3312 	mls	r3, ip, r2, r3
 8015108:	287e      	cmp	r0, #126	@ 0x7e
 801510a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801510e:	d07d      	beq.n	801520c <uxr_read_framed_msg+0x4f0>
 8015110:	f080 0020 	eor.w	r0, r0, #32
 8015114:	e660      	b.n	8014dd8 <uxr_read_framed_msg+0xbc>
 8015116:	1c59      	adds	r1, r3, #1
 8015118:	084a      	lsrs	r2, r1, #1
 801511a:	fba5 c202 	umull	ip, r2, r5, r2
 801511e:	0892      	lsrs	r2, r2, #2
 8015120:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015124:	fb0c 1212 	mls	r2, ip, r2, r1
 8015128:	b2d1      	uxtb	r1, r2
 801512a:	4288      	cmp	r0, r1
 801512c:	f43f af64 	beq.w	8014ff8 <uxr_read_framed_msg+0x2dc>
 8015130:	4422      	add	r2, r4
 8015132:	3302      	adds	r3, #2
 8015134:	7891      	ldrb	r1, [r2, #2]
 8015136:	085a      	lsrs	r2, r3, #1
 8015138:	fba5 0202 	umull	r0, r2, r5, r2
 801513c:	0892      	lsrs	r2, r2, #2
 801513e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015142:	297e      	cmp	r1, #126	@ 0x7e
 8015144:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015148:	d070      	beq.n	801522c <uxr_read_framed_msg+0x510>
 801514a:	f081 0120 	eor.w	r1, r1, #32
 801514e:	e6a3      	b.n	8014e98 <uxr_read_framed_msg+0x17c>
 8015150:	f103 0c01 	add.w	ip, r3, #1
 8015154:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015158:	fba5 0202 	umull	r0, r2, r5, r2
 801515c:	0892      	lsrs	r2, r2, #2
 801515e:	202a      	movs	r0, #42	@ 0x2a
 8015160:	fb00 c212 	mls	r2, r0, r2, ip
 8015164:	fa5f fc82 	uxtb.w	ip, r2
 8015168:	4561      	cmp	r1, ip
 801516a:	f43f af58 	beq.w	801501e <uxr_read_framed_msg+0x302>
 801516e:	4422      	add	r2, r4
 8015170:	3302      	adds	r3, #2
 8015172:	7891      	ldrb	r1, [r2, #2]
 8015174:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015178:	085a      	lsrs	r2, r3, #1
 801517a:	fba5 c202 	umull	ip, r2, r5, r2
 801517e:	0892      	lsrs	r2, r2, #2
 8015180:	fb00 3312 	mls	r3, r0, r2, r3
 8015184:	297e      	cmp	r1, #126	@ 0x7e
 8015186:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801518a:	f43f af48 	beq.w	801501e <uxr_read_framed_msg+0x302>
 801518e:	f081 0120 	eor.w	r1, r1, #32
 8015192:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8015196:	e6e8      	b.n	8014f6a <uxr_read_framed_msg+0x24e>
 8015198:	1c58      	adds	r0, r3, #1
 801519a:	0842      	lsrs	r2, r0, #1
 801519c:	fba5 c202 	umull	ip, r2, r5, r2
 80151a0:	0892      	lsrs	r2, r2, #2
 80151a2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80151a6:	fb0c 0212 	mls	r2, ip, r2, r0
 80151aa:	b2d0      	uxtb	r0, r2
 80151ac:	4281      	cmp	r1, r0
 80151ae:	f43f af32 	beq.w	8015016 <uxr_read_framed_msg+0x2fa>
 80151b2:	4422      	add	r2, r4
 80151b4:	3302      	adds	r3, #2
 80151b6:	7890      	ldrb	r0, [r2, #2]
 80151b8:	085a      	lsrs	r2, r3, #1
 80151ba:	fba5 1202 	umull	r1, r2, r5, r2
 80151be:	0892      	lsrs	r2, r2, #2
 80151c0:	fb0c 3312 	mls	r3, ip, r2, r3
 80151c4:	287e      	cmp	r0, #126	@ 0x7e
 80151c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80151ca:	d01f      	beq.n	801520c <uxr_read_framed_msg+0x4f0>
 80151cc:	f080 0020 	eor.w	r0, r0, #32
 80151d0:	e68b      	b.n	8014eea <uxr_read_framed_msg+0x1ce>
 80151d2:	1c51      	adds	r1, r2, #1
 80151d4:	084b      	lsrs	r3, r1, #1
 80151d6:	fba5 c303 	umull	ip, r3, r5, r3
 80151da:	089b      	lsrs	r3, r3, #2
 80151dc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80151e0:	fb0c 1313 	mls	r3, ip, r3, r1
 80151e4:	b2d9      	uxtb	r1, r3
 80151e6:	4288      	cmp	r0, r1
 80151e8:	f43f af3d 	beq.w	8015066 <uxr_read_framed_msg+0x34a>
 80151ec:	3202      	adds	r2, #2
 80151ee:	4423      	add	r3, r4
 80151f0:	0850      	lsrs	r0, r2, #1
 80151f2:	789b      	ldrb	r3, [r3, #2]
 80151f4:	fba5 1000 	umull	r1, r0, r5, r0
 80151f8:	0880      	lsrs	r0, r0, #2
 80151fa:	fb0c 2210 	mls	r2, ip, r0, r2
 80151fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8015200:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015204:	d016      	beq.n	8015234 <uxr_read_framed_msg+0x518>
 8015206:	f083 0120 	eor.w	r1, r3, #32
 801520a:	e68b      	b.n	8014f24 <uxr_read_framed_msg+0x208>
 801520c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801520e:	9300      	str	r3, [sp, #0]
 8015210:	2302      	movs	r3, #2
 8015212:	9301      	str	r3, [sp, #4]
 8015214:	464a      	mov	r2, r9
 8015216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015218:	4641      	mov	r1, r8
 801521a:	4620      	mov	r0, r4
 801521c:	f7ff fcfc 	bl	8014c18 <uxr_framing_read_transport>
 8015220:	2800      	cmp	r0, #0
 8015222:	f47f aef6 	bne.w	8015012 <uxr_read_framed_msg+0x2f6>
 8015226:	2301      	movs	r3, #1
 8015228:	7023      	strb	r3, [r4, #0]
 801522a:	e588      	b.n	8014d3e <uxr_read_framed_msg+0x22>
 801522c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801522e:	9300      	str	r3, [sp, #0]
 8015230:	2301      	movs	r3, #1
 8015232:	e7ee      	b.n	8015212 <uxr_read_framed_msg+0x4f6>
 8015234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015236:	9300      	str	r3, [sp, #0]
 8015238:	2303      	movs	r3, #3
 801523a:	e7ea      	b.n	8015212 <uxr_read_framed_msg+0x4f6>
 801523c:	ee17 8a90 	vmov	r8, s15
 8015240:	e6ae      	b.n	8014fa0 <uxr_read_framed_msg+0x284>
 8015242:	bf00      	nop

08015244 <rcl_get_default_domain_id>:
 8015244:	b530      	push	{r4, r5, lr}
 8015246:	b083      	sub	sp, #12
 8015248:	2300      	movs	r3, #0
 801524a:	9300      	str	r3, [sp, #0]
 801524c:	b1d0      	cbz	r0, 8015284 <rcl_get_default_domain_id+0x40>
 801524e:	4604      	mov	r4, r0
 8015250:	4669      	mov	r1, sp
 8015252:	4815      	ldr	r0, [pc, #84]	@ (80152a8 <rcl_get_default_domain_id+0x64>)
 8015254:	f7fb fcf4 	bl	8010c40 <rcutils_get_env>
 8015258:	4602      	mov	r2, r0
 801525a:	b110      	cbz	r0, 8015262 <rcl_get_default_domain_id+0x1e>
 801525c:	2001      	movs	r0, #1
 801525e:	b003      	add	sp, #12
 8015260:	bd30      	pop	{r4, r5, pc}
 8015262:	9b00      	ldr	r3, [sp, #0]
 8015264:	b18b      	cbz	r3, 801528a <rcl_get_default_domain_id+0x46>
 8015266:	7818      	ldrb	r0, [r3, #0]
 8015268:	2800      	cmp	r0, #0
 801526a:	d0f8      	beq.n	801525e <rcl_get_default_domain_id+0x1a>
 801526c:	a901      	add	r1, sp, #4
 801526e:	4618      	mov	r0, r3
 8015270:	9201      	str	r2, [sp, #4]
 8015272:	f000 fef7 	bl	8016064 <strtoul>
 8015276:	4605      	mov	r5, r0
 8015278:	b150      	cbz	r0, 8015290 <rcl_get_default_domain_id+0x4c>
 801527a:	1c43      	adds	r3, r0, #1
 801527c:	d00d      	beq.n	801529a <rcl_get_default_domain_id+0x56>
 801527e:	6025      	str	r5, [r4, #0]
 8015280:	2000      	movs	r0, #0
 8015282:	e7ec      	b.n	801525e <rcl_get_default_domain_id+0x1a>
 8015284:	200b      	movs	r0, #11
 8015286:	b003      	add	sp, #12
 8015288:	bd30      	pop	{r4, r5, pc}
 801528a:	4618      	mov	r0, r3
 801528c:	b003      	add	sp, #12
 801528e:	bd30      	pop	{r4, r5, pc}
 8015290:	9b01      	ldr	r3, [sp, #4]
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d0f2      	beq.n	801527e <rcl_get_default_domain_id+0x3a>
 8015298:	e7e0      	b.n	801525c <rcl_get_default_domain_id+0x18>
 801529a:	f001 ff31 	bl	8017100 <__errno>
 801529e:	6803      	ldr	r3, [r0, #0]
 80152a0:	2b22      	cmp	r3, #34	@ 0x22
 80152a2:	d1ec      	bne.n	801527e <rcl_get_default_domain_id+0x3a>
 80152a4:	e7da      	b.n	801525c <rcl_get_default_domain_id+0x18>
 80152a6:	bf00      	nop
 80152a8:	08019c20 	.word	0x08019c20

080152ac <rcl_expand_topic_name>:
 80152ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b0:	b08b      	sub	sp, #44	@ 0x2c
 80152b2:	9306      	str	r3, [sp, #24]
 80152b4:	2800      	cmp	r0, #0
 80152b6:	f000 80ad 	beq.w	8015414 <rcl_expand_topic_name+0x168>
 80152ba:	460e      	mov	r6, r1
 80152bc:	2900      	cmp	r1, #0
 80152be:	f000 80a9 	beq.w	8015414 <rcl_expand_topic_name+0x168>
 80152c2:	4617      	mov	r7, r2
 80152c4:	2a00      	cmp	r2, #0
 80152c6:	f000 80a5 	beq.w	8015414 <rcl_expand_topic_name+0x168>
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f000 80a2 	beq.w	8015414 <rcl_expand_topic_name+0x168>
 80152d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 809e 	beq.w	8015414 <rcl_expand_topic_name+0x168>
 80152d8:	2200      	movs	r2, #0
 80152da:	a909      	add	r1, sp, #36	@ 0x24
 80152dc:	4680      	mov	r8, r0
 80152de:	f000 f9fb 	bl	80156d8 <rcl_validate_topic_name>
 80152e2:	4604      	mov	r4, r0
 80152e4:	2800      	cmp	r0, #0
 80152e6:	f040 8096 	bne.w	8015416 <rcl_expand_topic_name+0x16a>
 80152ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	f040 809a 	bne.w	8015426 <rcl_expand_topic_name+0x17a>
 80152f2:	4602      	mov	r2, r0
 80152f4:	a909      	add	r1, sp, #36	@ 0x24
 80152f6:	4630      	mov	r0, r6
 80152f8:	f7fc f900 	bl	80114fc <rmw_validate_node_name>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	f040 808e 	bne.w	801541e <rcl_expand_topic_name+0x172>
 8015302:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015304:	2a00      	cmp	r2, #0
 8015306:	f040 8093 	bne.w	8015430 <rcl_expand_topic_name+0x184>
 801530a:	a909      	add	r1, sp, #36	@ 0x24
 801530c:	4638      	mov	r0, r7
 801530e:	f7fc f8d7 	bl	80114c0 <rmw_validate_namespace>
 8015312:	2800      	cmp	r0, #0
 8015314:	f040 8083 	bne.w	801541e <rcl_expand_topic_name+0x172>
 8015318:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801531a:	2c00      	cmp	r4, #0
 801531c:	f040 80ed 	bne.w	80154fa <rcl_expand_topic_name+0x24e>
 8015320:	217b      	movs	r1, #123	@ 0x7b
 8015322:	4640      	mov	r0, r8
 8015324:	f001 fe06 	bl	8016f34 <strchr>
 8015328:	f898 3000 	ldrb.w	r3, [r8]
 801532c:	2b2f      	cmp	r3, #47	@ 0x2f
 801532e:	4605      	mov	r5, r0
 8015330:	f000 809e 	beq.w	8015470 <rcl_expand_topic_name+0x1c4>
 8015334:	2b7e      	cmp	r3, #126	@ 0x7e
 8015336:	f040 80a2 	bne.w	801547e <rcl_expand_topic_name+0x1d2>
 801533a:	4638      	mov	r0, r7
 801533c:	f7ea ffc8 	bl	80002d0 <strlen>
 8015340:	4a82      	ldr	r2, [pc, #520]	@ (801554c <rcl_expand_topic_name+0x2a0>)
 8015342:	4b83      	ldr	r3, [pc, #524]	@ (8015550 <rcl_expand_topic_name+0x2a4>)
 8015344:	2801      	cmp	r0, #1
 8015346:	bf18      	it	ne
 8015348:	4613      	movne	r3, r2
 801534a:	9302      	str	r3, [sp, #8]
 801534c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8015354:	f108 0301 	add.w	r3, r8, #1
 8015358:	9305      	str	r3, [sp, #20]
 801535a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801535e:	9301      	str	r3, [sp, #4]
 8015360:	ab14      	add	r3, sp, #80	@ 0x50
 8015362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015364:	f7fb fc94 	bl	8010c90 <rcutils_format_string_limit>
 8015368:	4682      	mov	sl, r0
 801536a:	2800      	cmp	r0, #0
 801536c:	f000 80c7 	beq.w	80154fe <rcl_expand_topic_name+0x252>
 8015370:	2d00      	cmp	r5, #0
 8015372:	f000 80a2 	beq.w	80154ba <rcl_expand_topic_name+0x20e>
 8015376:	217b      	movs	r1, #123	@ 0x7b
 8015378:	f001 fddc 	bl	8016f34 <strchr>
 801537c:	46d1      	mov	r9, sl
 801537e:	4605      	mov	r5, r0
 8015380:	9407      	str	r4, [sp, #28]
 8015382:	46d3      	mov	fp, sl
 8015384:	464c      	mov	r4, r9
 8015386:	2d00      	cmp	r5, #0
 8015388:	f000 80be 	beq.w	8015508 <rcl_expand_topic_name+0x25c>
 801538c:	217d      	movs	r1, #125	@ 0x7d
 801538e:	4620      	mov	r0, r4
 8015390:	f001 fdd0 	bl	8016f34 <strchr>
 8015394:	eba0 0905 	sub.w	r9, r0, r5
 8015398:	f109 0a01 	add.w	sl, r9, #1
 801539c:	486d      	ldr	r0, [pc, #436]	@ (8015554 <rcl_expand_topic_name+0x2a8>)
 801539e:	4652      	mov	r2, sl
 80153a0:	4629      	mov	r1, r5
 80153a2:	f001 fdd4 	bl	8016f4e <strncmp>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d067      	beq.n	801547a <rcl_expand_topic_name+0x1ce>
 80153aa:	486b      	ldr	r0, [pc, #428]	@ (8015558 <rcl_expand_topic_name+0x2ac>)
 80153ac:	4652      	mov	r2, sl
 80153ae:	4629      	mov	r1, r5
 80153b0:	f001 fdcd 	bl	8016f4e <strncmp>
 80153b4:	b130      	cbz	r0, 80153c4 <rcl_expand_topic_name+0x118>
 80153b6:	4869      	ldr	r0, [pc, #420]	@ (801555c <rcl_expand_topic_name+0x2b0>)
 80153b8:	4652      	mov	r2, sl
 80153ba:	4629      	mov	r1, r5
 80153bc:	f001 fdc7 	bl	8016f4e <strncmp>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d137      	bne.n	8015434 <rcl_expand_topic_name+0x188>
 80153c4:	46b9      	mov	r9, r7
 80153c6:	ab16      	add	r3, sp, #88	@ 0x58
 80153c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80153cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80153d0:	ab14      	add	r3, sp, #80	@ 0x50
 80153d2:	4628      	mov	r0, r5
 80153d4:	cb0c      	ldmia	r3, {r2, r3}
 80153d6:	4651      	mov	r1, sl
 80153d8:	f7fb fd96 	bl	8010f08 <rcutils_strndup>
 80153dc:	4605      	mov	r5, r0
 80153de:	2800      	cmp	r0, #0
 80153e0:	f000 809c 	beq.w	801551c <rcl_expand_topic_name+0x270>
 80153e4:	464a      	mov	r2, r9
 80153e6:	4620      	mov	r0, r4
 80153e8:	ab14      	add	r3, sp, #80	@ 0x50
 80153ea:	4629      	mov	r1, r5
 80153ec:	f7fb fc8a 	bl	8010d04 <rcutils_repl_str>
 80153f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80153f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80153f4:	4604      	mov	r4, r0
 80153f6:	4628      	mov	r0, r5
 80153f8:	4798      	blx	r3
 80153fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80153fc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80153fe:	4658      	mov	r0, fp
 8015400:	4798      	blx	r3
 8015402:	2c00      	cmp	r4, #0
 8015404:	d07b      	beq.n	80154fe <rcl_expand_topic_name+0x252>
 8015406:	217b      	movs	r1, #123	@ 0x7b
 8015408:	4620      	mov	r0, r4
 801540a:	f001 fd93 	bl	8016f34 <strchr>
 801540e:	46a3      	mov	fp, r4
 8015410:	4605      	mov	r5, r0
 8015412:	e7b8      	b.n	8015386 <rcl_expand_topic_name+0xda>
 8015414:	240b      	movs	r4, #11
 8015416:	4620      	mov	r0, r4
 8015418:	b00b      	add	sp, #44	@ 0x2c
 801541a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801541e:	f7f8 fe6d 	bl	800e0fc <rcl_convert_rmw_ret_to_rcl_ret>
 8015422:	4604      	mov	r4, r0
 8015424:	e7f7      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 8015426:	2467      	movs	r4, #103	@ 0x67
 8015428:	4620      	mov	r0, r4
 801542a:	b00b      	add	sp, #44	@ 0x2c
 801542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015430:	24c9      	movs	r4, #201	@ 0xc9
 8015432:	e7f0      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 8015434:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8015438:	9806      	ldr	r0, [sp, #24]
 801543a:	1c69      	adds	r1, r5, #1
 801543c:	f7fb fe7e 	bl	801113c <rcutils_string_map_getn>
 8015440:	4681      	mov	r9, r0
 8015442:	2800      	cmp	r0, #0
 8015444:	d1bf      	bne.n	80153c6 <rcl_expand_topic_name+0x11a>
 8015446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015448:	aa16      	add	r2, sp, #88	@ 0x58
 801544a:	6018      	str	r0, [r3, #0]
 801544c:	ca07      	ldmia	r2, {r0, r1, r2}
 801544e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015452:	ab14      	add	r3, sp, #80	@ 0x50
 8015454:	cb0c      	ldmia	r3, {r2, r3}
 8015456:	4651      	mov	r1, sl
 8015458:	4628      	mov	r0, r5
 801545a:	f7fb fd55 	bl	8010f08 <rcutils_strndup>
 801545e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015460:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015462:	4798      	blx	r3
 8015464:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015466:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015468:	4658      	mov	r0, fp
 801546a:	2469      	movs	r4, #105	@ 0x69
 801546c:	4798      	blx	r3
 801546e:	e7d2      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 8015470:	2800      	cmp	r0, #0
 8015472:	d05b      	beq.n	801552c <rcl_expand_topic_name+0x280>
 8015474:	46c1      	mov	r9, r8
 8015476:	46a2      	mov	sl, r4
 8015478:	e782      	b.n	8015380 <rcl_expand_topic_name+0xd4>
 801547a:	46b1      	mov	r9, r6
 801547c:	e7a3      	b.n	80153c6 <rcl_expand_topic_name+0x11a>
 801547e:	2800      	cmp	r0, #0
 8015480:	d1f8      	bne.n	8015474 <rcl_expand_topic_name+0x1c8>
 8015482:	4638      	mov	r0, r7
 8015484:	f7ea ff24 	bl	80002d0 <strlen>
 8015488:	4a35      	ldr	r2, [pc, #212]	@ (8015560 <rcl_expand_topic_name+0x2b4>)
 801548a:	4b36      	ldr	r3, [pc, #216]	@ (8015564 <rcl_expand_topic_name+0x2b8>)
 801548c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015490:	2801      	cmp	r0, #1
 8015492:	bf18      	it	ne
 8015494:	4613      	movne	r3, r2
 8015496:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801549a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801549e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80154a0:	9703      	str	r7, [sp, #12]
 80154a2:	9200      	str	r2, [sp, #0]
 80154a4:	ab14      	add	r3, sp, #80	@ 0x50
 80154a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154a8:	f7fb fbf2 	bl	8010c90 <rcutils_format_string_limit>
 80154ac:	4682      	mov	sl, r0
 80154ae:	4653      	mov	r3, sl
 80154b0:	b32b      	cbz	r3, 80154fe <rcl_expand_topic_name+0x252>
 80154b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154b4:	f8c3 a000 	str.w	sl, [r3]
 80154b8:	e7ad      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 80154ba:	f89a 3000 	ldrb.w	r3, [sl]
 80154be:	2b2f      	cmp	r3, #47	@ 0x2f
 80154c0:	d0f7      	beq.n	80154b2 <rcl_expand_topic_name+0x206>
 80154c2:	4638      	mov	r0, r7
 80154c4:	f7ea ff04 	bl	80002d0 <strlen>
 80154c8:	4a25      	ldr	r2, [pc, #148]	@ (8015560 <rcl_expand_topic_name+0x2b4>)
 80154ca:	4b26      	ldr	r3, [pc, #152]	@ (8015564 <rcl_expand_topic_name+0x2b8>)
 80154cc:	f8cd a010 	str.w	sl, [sp, #16]
 80154d0:	2801      	cmp	r0, #1
 80154d2:	bf18      	it	ne
 80154d4:	4613      	movne	r3, r2
 80154d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80154da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80154de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80154e0:	9703      	str	r7, [sp, #12]
 80154e2:	9200      	str	r2, [sp, #0]
 80154e4:	ab14      	add	r3, sp, #80	@ 0x50
 80154e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80154e8:	f7fb fbd2 	bl	8010c90 <rcutils_format_string_limit>
 80154ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80154ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80154f0:	4605      	mov	r5, r0
 80154f2:	4650      	mov	r0, sl
 80154f4:	4798      	blx	r3
 80154f6:	46aa      	mov	sl, r5
 80154f8:	e7d9      	b.n	80154ae <rcl_expand_topic_name+0x202>
 80154fa:	24ca      	movs	r4, #202	@ 0xca
 80154fc:	e78b      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 80154fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015500:	2300      	movs	r3, #0
 8015502:	6013      	str	r3, [r2, #0]
 8015504:	240a      	movs	r4, #10
 8015506:	e786      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 8015508:	465b      	mov	r3, fp
 801550a:	9c07      	ldr	r4, [sp, #28]
 801550c:	46da      	mov	sl, fp
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1d3      	bne.n	80154ba <rcl_expand_topic_name+0x20e>
 8015512:	f898 3000 	ldrb.w	r3, [r8]
 8015516:	2b2f      	cmp	r3, #47	@ 0x2f
 8015518:	d0cb      	beq.n	80154b2 <rcl_expand_topic_name+0x206>
 801551a:	e7b2      	b.n	8015482 <rcl_expand_topic_name+0x1d6>
 801551c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8015520:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8015522:	6015      	str	r5, [r2, #0]
 8015524:	4658      	mov	r0, fp
 8015526:	4798      	blx	r3
 8015528:	240a      	movs	r4, #10
 801552a:	e774      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 801552c:	ab17      	add	r3, sp, #92	@ 0x5c
 801552e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015532:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015536:	ab14      	add	r3, sp, #80	@ 0x50
 8015538:	cb0e      	ldmia	r3, {r1, r2, r3}
 801553a:	4640      	mov	r0, r8
 801553c:	f7fb fcc2 	bl	8010ec4 <rcutils_strdup>
 8015540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015542:	2800      	cmp	r0, #0
 8015544:	6018      	str	r0, [r3, #0]
 8015546:	bf08      	it	eq
 8015548:	240a      	moveq	r4, #10
 801554a:	e764      	b.n	8015416 <rcl_expand_topic_name+0x16a>
 801554c:	08019c30 	.word	0x08019c30
 8015550:	080192e0 	.word	0x080192e0
 8015554:	08019c38 	.word	0x08019c38
 8015558:	08019c40 	.word	0x08019c40
 801555c:	08019c48 	.word	0x08019c48
 8015560:	08019474 	.word	0x08019474
 8015564:	080192f0 	.word	0x080192f0

08015568 <rcl_get_default_topic_name_substitutions>:
 8015568:	2800      	cmp	r0, #0
 801556a:	bf0c      	ite	eq
 801556c:	200b      	moveq	r0, #11
 801556e:	2000      	movne	r0, #0
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop

08015574 <rcl_get_zero_initialized_guard_condition>:
 8015574:	4a03      	ldr	r2, [pc, #12]	@ (8015584 <rcl_get_zero_initialized_guard_condition+0x10>)
 8015576:	4603      	mov	r3, r0
 8015578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801557c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015580:	4618      	mov	r0, r3
 8015582:	4770      	bx	lr
 8015584:	08019c54 	.word	0x08019c54

08015588 <rcl_guard_condition_init_from_rmw>:
 8015588:	b082      	sub	sp, #8
 801558a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015594:	4604      	mov	r4, r0
 8015596:	f84c 3f04 	str.w	r3, [ip, #4]!
 801559a:	460e      	mov	r6, r1
 801559c:	4617      	mov	r7, r2
 801559e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155a2:	f10d 0e04 	add.w	lr, sp, #4
 80155a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80155aa:	f8dc 3000 	ldr.w	r3, [ip]
 80155ae:	f8ce 3000 	str.w	r3, [lr]
 80155b2:	a801      	add	r0, sp, #4
 80155b4:	f7f4 ff24 	bl	800a400 <rcutils_allocator_is_valid>
 80155b8:	b350      	cbz	r0, 8015610 <rcl_guard_condition_init_from_rmw+0x88>
 80155ba:	b34c      	cbz	r4, 8015610 <rcl_guard_condition_init_from_rmw+0x88>
 80155bc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80155c0:	f1b8 0f00 	cmp.w	r8, #0
 80155c4:	d11e      	bne.n	8015604 <rcl_guard_condition_init_from_rmw+0x7c>
 80155c6:	b31f      	cbz	r7, 8015610 <rcl_guard_condition_init_from_rmw+0x88>
 80155c8:	4638      	mov	r0, r7
 80155ca:	f7f8 fdb5 	bl	800e138 <rcl_context_is_valid>
 80155ce:	b328      	cbz	r0, 801561c <rcl_guard_condition_init_from_rmw+0x94>
 80155d0:	9b01      	ldr	r3, [sp, #4]
 80155d2:	9905      	ldr	r1, [sp, #20]
 80155d4:	201c      	movs	r0, #28
 80155d6:	4798      	blx	r3
 80155d8:	4605      	mov	r5, r0
 80155da:	6060      	str	r0, [r4, #4]
 80155dc:	b358      	cbz	r0, 8015636 <rcl_guard_condition_init_from_rmw+0xae>
 80155de:	b1fe      	cbz	r6, 8015620 <rcl_guard_condition_init_from_rmw+0x98>
 80155e0:	6006      	str	r6, [r0, #0]
 80155e2:	f880 8004 	strb.w	r8, [r0, #4]
 80155e6:	ac01      	add	r4, sp, #4
 80155e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80155ea:	f105 0c08 	add.w	ip, r5, #8
 80155ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155f2:	6823      	ldr	r3, [r4, #0]
 80155f4:	f8cc 3000 	str.w	r3, [ip]
 80155f8:	2000      	movs	r0, #0
 80155fa:	b006      	add	sp, #24
 80155fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015600:	b002      	add	sp, #8
 8015602:	4770      	bx	lr
 8015604:	2064      	movs	r0, #100	@ 0x64
 8015606:	b006      	add	sp, #24
 8015608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	b002      	add	sp, #8
 801560e:	4770      	bx	lr
 8015610:	200b      	movs	r0, #11
 8015612:	b006      	add	sp, #24
 8015614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015618:	b002      	add	sp, #8
 801561a:	4770      	bx	lr
 801561c:	2065      	movs	r0, #101	@ 0x65
 801561e:	e7f2      	b.n	8015606 <rcl_guard_condition_init_from_rmw+0x7e>
 8015620:	6838      	ldr	r0, [r7, #0]
 8015622:	3028      	adds	r0, #40	@ 0x28
 8015624:	f000 fa3a 	bl	8015a9c <rmw_create_guard_condition>
 8015628:	6028      	str	r0, [r5, #0]
 801562a:	6865      	ldr	r5, [r4, #4]
 801562c:	682e      	ldr	r6, [r5, #0]
 801562e:	b126      	cbz	r6, 801563a <rcl_guard_condition_init_from_rmw+0xb2>
 8015630:	2301      	movs	r3, #1
 8015632:	712b      	strb	r3, [r5, #4]
 8015634:	e7d7      	b.n	80155e6 <rcl_guard_condition_init_from_rmw+0x5e>
 8015636:	200a      	movs	r0, #10
 8015638:	e7e5      	b.n	8015606 <rcl_guard_condition_init_from_rmw+0x7e>
 801563a:	4628      	mov	r0, r5
 801563c:	9b02      	ldr	r3, [sp, #8]
 801563e:	9905      	ldr	r1, [sp, #20]
 8015640:	4798      	blx	r3
 8015642:	6066      	str	r6, [r4, #4]
 8015644:	2001      	movs	r0, #1
 8015646:	e7de      	b.n	8015606 <rcl_guard_condition_init_from_rmw+0x7e>

08015648 <rcl_guard_condition_fini>:
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	b1f0      	cbz	r0, 801568c <rcl_guard_condition_fini+0x44>
 801564e:	6843      	ldr	r3, [r0, #4]
 8015650:	4604      	mov	r4, r0
 8015652:	b163      	cbz	r3, 801566e <rcl_guard_condition_fini+0x26>
 8015654:	6818      	ldr	r0, [r3, #0]
 8015656:	68de      	ldr	r6, [r3, #12]
 8015658:	6999      	ldr	r1, [r3, #24]
 801565a:	b160      	cbz	r0, 8015676 <rcl_guard_condition_fini+0x2e>
 801565c:	791d      	ldrb	r5, [r3, #4]
 801565e:	b965      	cbnz	r5, 801567a <rcl_guard_condition_fini+0x32>
 8015660:	4618      	mov	r0, r3
 8015662:	47b0      	blx	r6
 8015664:	2300      	movs	r3, #0
 8015666:	4628      	mov	r0, r5
 8015668:	6063      	str	r3, [r4, #4]
 801566a:	b002      	add	sp, #8
 801566c:	bd70      	pop	{r4, r5, r6, pc}
 801566e:	461d      	mov	r5, r3
 8015670:	4628      	mov	r0, r5
 8015672:	b002      	add	sp, #8
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	4605      	mov	r5, r0
 8015678:	e7f2      	b.n	8015660 <rcl_guard_condition_fini+0x18>
 801567a:	9101      	str	r1, [sp, #4]
 801567c:	f000 fa22 	bl	8015ac4 <rmw_destroy_guard_condition>
 8015680:	1e05      	subs	r5, r0, #0
 8015682:	6863      	ldr	r3, [r4, #4]
 8015684:	9901      	ldr	r1, [sp, #4]
 8015686:	bf18      	it	ne
 8015688:	2501      	movne	r5, #1
 801568a:	e7e9      	b.n	8015660 <rcl_guard_condition_fini+0x18>
 801568c:	250b      	movs	r5, #11
 801568e:	4628      	mov	r0, r5
 8015690:	b002      	add	sp, #8
 8015692:	bd70      	pop	{r4, r5, r6, pc}

08015694 <rcl_guard_condition_get_default_options>:
 8015694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015696:	b087      	sub	sp, #28
 8015698:	4606      	mov	r6, r0
 801569a:	4668      	mov	r0, sp
 801569c:	f7f4 fea2 	bl	800a3e4 <rcutils_get_default_allocator>
 80156a0:	4b09      	ldr	r3, [pc, #36]	@ (80156c8 <rcl_guard_condition_get_default_options+0x34>)
 80156a2:	46ee      	mov	lr, sp
 80156a4:	469c      	mov	ip, r3
 80156a6:	461d      	mov	r5, r3
 80156a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156b2:	4634      	mov	r4, r6
 80156b4:	f8de 7000 	ldr.w	r7, [lr]
 80156b8:	f8cc 7000 	str.w	r7, [ip]
 80156bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156be:	4630      	mov	r0, r6
 80156c0:	6027      	str	r7, [r4, #0]
 80156c2:	b007      	add	sp, #28
 80156c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c6:	bf00      	nop
 80156c8:	20010d54 	.word	0x20010d54

080156cc <rcl_guard_condition_get_rmw_handle>:
 80156cc:	b110      	cbz	r0, 80156d4 <rcl_guard_condition_get_rmw_handle+0x8>
 80156ce:	6840      	ldr	r0, [r0, #4]
 80156d0:	b100      	cbz	r0, 80156d4 <rcl_guard_condition_get_rmw_handle+0x8>
 80156d2:	6800      	ldr	r0, [r0, #0]
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop

080156d8 <rcl_validate_topic_name>:
 80156d8:	2800      	cmp	r0, #0
 80156da:	d07a      	beq.n	80157d2 <rcl_validate_topic_name+0xfa>
 80156dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156e0:	460e      	mov	r6, r1
 80156e2:	2900      	cmp	r1, #0
 80156e4:	d07c      	beq.n	80157e0 <rcl_validate_topic_name+0x108>
 80156e6:	4617      	mov	r7, r2
 80156e8:	4605      	mov	r5, r0
 80156ea:	f7ea fdf1 	bl	80002d0 <strlen>
 80156ee:	b1b0      	cbz	r0, 801571e <rcl_validate_topic_name+0x46>
 80156f0:	f895 9000 	ldrb.w	r9, [r5]
 80156f4:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8015878 <rcl_validate_topic_name+0x1a0>
 80156f8:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80156fc:	f013 0304 	ands.w	r3, r3, #4
 8015700:	d169      	bne.n	80157d6 <rcl_validate_topic_name+0xfe>
 8015702:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8015706:	f815 2008 	ldrb.w	r2, [r5, r8]
 801570a:	2a2f      	cmp	r2, #47	@ 0x2f
 801570c:	d10e      	bne.n	801572c <rcl_validate_topic_name+0x54>
 801570e:	2202      	movs	r2, #2
 8015710:	6032      	str	r2, [r6, #0]
 8015712:	b36f      	cbz	r7, 8015770 <rcl_validate_topic_name+0x98>
 8015714:	f8c7 8000 	str.w	r8, [r7]
 8015718:	4618      	mov	r0, r3
 801571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801571e:	2301      	movs	r3, #1
 8015720:	6033      	str	r3, [r6, #0]
 8015722:	b32f      	cbz	r7, 8015770 <rcl_validate_topic_name+0x98>
 8015724:	2000      	movs	r0, #0
 8015726:	6038      	str	r0, [r7, #0]
 8015728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801572c:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8015730:	461c      	mov	r4, r3
 8015732:	4619      	mov	r1, r3
 8015734:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015738:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801573c:	f1be 0f09 	cmp.w	lr, #9
 8015740:	d919      	bls.n	8015776 <rcl_validate_topic_name+0x9e>
 8015742:	f022 0e20 	bic.w	lr, r2, #32
 8015746:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801574a:	f1be 0f19 	cmp.w	lr, #25
 801574e:	d912      	bls.n	8015776 <rcl_validate_topic_name+0x9e>
 8015750:	2a5f      	cmp	r2, #95	@ 0x5f
 8015752:	d019      	beq.n	8015788 <rcl_validate_topic_name+0xb0>
 8015754:	2a2f      	cmp	r2, #47	@ 0x2f
 8015756:	d051      	beq.n	80157fc <rcl_validate_topic_name+0x124>
 8015758:	2a7e      	cmp	r2, #126	@ 0x7e
 801575a:	d048      	beq.n	80157ee <rcl_validate_topic_name+0x116>
 801575c:	2a7b      	cmp	r2, #123	@ 0x7b
 801575e:	d054      	beq.n	801580a <rcl_validate_topic_name+0x132>
 8015760:	2a7d      	cmp	r2, #125	@ 0x7d
 8015762:	d161      	bne.n	8015828 <rcl_validate_topic_name+0x150>
 8015764:	2c00      	cmp	r4, #0
 8015766:	d155      	bne.n	8015814 <rcl_validate_topic_name+0x13c>
 8015768:	2305      	movs	r3, #5
 801576a:	6033      	str	r3, [r6, #0]
 801576c:	b107      	cbz	r7, 8015770 <rcl_validate_topic_name+0x98>
 801576e:	6039      	str	r1, [r7, #0]
 8015770:	2000      	movs	r0, #0
 8015772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015776:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801577a:	0752      	lsls	r2, r2, #29
 801577c:	d504      	bpl.n	8015788 <rcl_validate_topic_name+0xb0>
 801577e:	b11c      	cbz	r4, 8015788 <rcl_validate_topic_name+0xb0>
 8015780:	b111      	cbz	r1, 8015788 <rcl_validate_topic_name+0xb0>
 8015782:	1e4a      	subs	r2, r1, #1
 8015784:	429a      	cmp	r2, r3
 8015786:	d02d      	beq.n	80157e4 <rcl_validate_topic_name+0x10c>
 8015788:	3101      	adds	r1, #1
 801578a:	4288      	cmp	r0, r1
 801578c:	d1d2      	bne.n	8015734 <rcl_validate_topic_name+0x5c>
 801578e:	2c00      	cmp	r4, #0
 8015790:	d145      	bne.n	801581e <rcl_validate_topic_name+0x146>
 8015792:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015796:	d04f      	beq.n	8015838 <rcl_validate_topic_name+0x160>
 8015798:	4620      	mov	r0, r4
 801579a:	2301      	movs	r3, #1
 801579c:	e006      	b.n	80157ac <rcl_validate_topic_name+0xd4>
 801579e:	428b      	cmp	r3, r1
 80157a0:	f105 0501 	add.w	r5, r5, #1
 80157a4:	f103 0201 	add.w	r2, r3, #1
 80157a8:	d236      	bcs.n	8015818 <rcl_validate_topic_name+0x140>
 80157aa:	4613      	mov	r3, r2
 80157ac:	4580      	cmp	r8, r0
 80157ae:	f100 0001 	add.w	r0, r0, #1
 80157b2:	d0f4      	beq.n	801579e <rcl_validate_topic_name+0xc6>
 80157b4:	782a      	ldrb	r2, [r5, #0]
 80157b6:	2a2f      	cmp	r2, #47	@ 0x2f
 80157b8:	d1f1      	bne.n	801579e <rcl_validate_topic_name+0xc6>
 80157ba:	786a      	ldrb	r2, [r5, #1]
 80157bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80157c0:	0754      	lsls	r4, r2, #29
 80157c2:	d5ec      	bpl.n	801579e <rcl_validate_topic_name+0xc6>
 80157c4:	2204      	movs	r2, #4
 80157c6:	6032      	str	r2, [r6, #0]
 80157c8:	2f00      	cmp	r7, #0
 80157ca:	d0d1      	beq.n	8015770 <rcl_validate_topic_name+0x98>
 80157cc:	603b      	str	r3, [r7, #0]
 80157ce:	2000      	movs	r0, #0
 80157d0:	e7aa      	b.n	8015728 <rcl_validate_topic_name+0x50>
 80157d2:	200b      	movs	r0, #11
 80157d4:	4770      	bx	lr
 80157d6:	2304      	movs	r3, #4
 80157d8:	6033      	str	r3, [r6, #0]
 80157da:	2f00      	cmp	r7, #0
 80157dc:	d1a2      	bne.n	8015724 <rcl_validate_topic_name+0x4c>
 80157de:	e7c7      	b.n	8015770 <rcl_validate_topic_name+0x98>
 80157e0:	200b      	movs	r0, #11
 80157e2:	e7a1      	b.n	8015728 <rcl_validate_topic_name+0x50>
 80157e4:	2309      	movs	r3, #9
 80157e6:	6033      	str	r3, [r6, #0]
 80157e8:	2f00      	cmp	r7, #0
 80157ea:	d1c0      	bne.n	801576e <rcl_validate_topic_name+0x96>
 80157ec:	e7c0      	b.n	8015770 <rcl_validate_topic_name+0x98>
 80157ee:	2900      	cmp	r1, #0
 80157f0:	d0ca      	beq.n	8015788 <rcl_validate_topic_name+0xb0>
 80157f2:	2306      	movs	r3, #6
 80157f4:	6033      	str	r3, [r6, #0]
 80157f6:	2f00      	cmp	r7, #0
 80157f8:	d1b9      	bne.n	801576e <rcl_validate_topic_name+0x96>
 80157fa:	e7b9      	b.n	8015770 <rcl_validate_topic_name+0x98>
 80157fc:	2c00      	cmp	r4, #0
 80157fe:	d0c3      	beq.n	8015788 <rcl_validate_topic_name+0xb0>
 8015800:	2308      	movs	r3, #8
 8015802:	6033      	str	r3, [r6, #0]
 8015804:	2f00      	cmp	r7, #0
 8015806:	d1b2      	bne.n	801576e <rcl_validate_topic_name+0x96>
 8015808:	e7b2      	b.n	8015770 <rcl_validate_topic_name+0x98>
 801580a:	2c00      	cmp	r4, #0
 801580c:	d1f8      	bne.n	8015800 <rcl_validate_topic_name+0x128>
 801580e:	460b      	mov	r3, r1
 8015810:	2401      	movs	r4, #1
 8015812:	e7b9      	b.n	8015788 <rcl_validate_topic_name+0xb0>
 8015814:	2400      	movs	r4, #0
 8015816:	e7b7      	b.n	8015788 <rcl_validate_topic_name+0xb0>
 8015818:	2000      	movs	r0, #0
 801581a:	6030      	str	r0, [r6, #0]
 801581c:	e784      	b.n	8015728 <rcl_validate_topic_name+0x50>
 801581e:	2205      	movs	r2, #5
 8015820:	6032      	str	r2, [r6, #0]
 8015822:	2f00      	cmp	r7, #0
 8015824:	d1d2      	bne.n	80157cc <rcl_validate_topic_name+0xf4>
 8015826:	e7a3      	b.n	8015770 <rcl_validate_topic_name+0x98>
 8015828:	2c00      	cmp	r4, #0
 801582a:	bf14      	ite	ne
 801582c:	2308      	movne	r3, #8
 801582e:	2303      	moveq	r3, #3
 8015830:	6033      	str	r3, [r6, #0]
 8015832:	2f00      	cmp	r7, #0
 8015834:	d19b      	bne.n	801576e <rcl_validate_topic_name+0x96>
 8015836:	e79b      	b.n	8015770 <rcl_validate_topic_name+0x98>
 8015838:	2301      	movs	r3, #1
 801583a:	e00a      	b.n	8015852 <rcl_validate_topic_name+0x17a>
 801583c:	2c01      	cmp	r4, #1
 801583e:	d013      	beq.n	8015868 <rcl_validate_topic_name+0x190>
 8015840:	4299      	cmp	r1, r3
 8015842:	f104 0401 	add.w	r4, r4, #1
 8015846:	f105 0501 	add.w	r5, r5, #1
 801584a:	f103 0201 	add.w	r2, r3, #1
 801584e:	d9e3      	bls.n	8015818 <rcl_validate_topic_name+0x140>
 8015850:	4613      	mov	r3, r2
 8015852:	45a0      	cmp	r8, r4
 8015854:	d0f4      	beq.n	8015840 <rcl_validate_topic_name+0x168>
 8015856:	782a      	ldrb	r2, [r5, #0]
 8015858:	2a2f      	cmp	r2, #47	@ 0x2f
 801585a:	d1ef      	bne.n	801583c <rcl_validate_topic_name+0x164>
 801585c:	786a      	ldrb	r2, [r5, #1]
 801585e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8015862:	0752      	lsls	r2, r2, #29
 8015864:	d5ec      	bpl.n	8015840 <rcl_validate_topic_name+0x168>
 8015866:	e7ad      	b.n	80157c4 <rcl_validate_topic_name+0xec>
 8015868:	2307      	movs	r3, #7
 801586a:	6033      	str	r3, [r6, #0]
 801586c:	2f00      	cmp	r7, #0
 801586e:	f43f af7f 	beq.w	8015770 <rcl_validate_topic_name+0x98>
 8015872:	603c      	str	r4, [r7, #0]
 8015874:	2000      	movs	r0, #0
 8015876:	e757      	b.n	8015728 <rcl_validate_topic_name+0x50>
 8015878:	08019de3 	.word	0x08019de3

0801587c <rcutils_string_array_fini>:
 801587c:	b320      	cbz	r0, 80158c8 <rcutils_string_array_fini+0x4c>
 801587e:	b570      	push	{r4, r5, r6, lr}
 8015880:	4604      	mov	r4, r0
 8015882:	6840      	ldr	r0, [r0, #4]
 8015884:	b1d8      	cbz	r0, 80158be <rcutils_string_array_fini+0x42>
 8015886:	f104 0008 	add.w	r0, r4, #8
 801588a:	f7f4 fdb9 	bl	800a400 <rcutils_allocator_is_valid>
 801588e:	b1b8      	cbz	r0, 80158c0 <rcutils_string_array_fini+0x44>
 8015890:	6823      	ldr	r3, [r4, #0]
 8015892:	b1bb      	cbz	r3, 80158c4 <rcutils_string_array_fini+0x48>
 8015894:	2500      	movs	r5, #0
 8015896:	6860      	ldr	r0, [r4, #4]
 8015898:	462e      	mov	r6, r5
 801589a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801589e:	68e3      	ldr	r3, [r4, #12]
 80158a0:	69a1      	ldr	r1, [r4, #24]
 80158a2:	4798      	blx	r3
 80158a4:	e9d4 3000 	ldrd	r3, r0, [r4]
 80158a8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80158ac:	3501      	adds	r5, #1
 80158ae:	429d      	cmp	r5, r3
 80158b0:	d3f3      	bcc.n	801589a <rcutils_string_array_fini+0x1e>
 80158b2:	68e3      	ldr	r3, [r4, #12]
 80158b4:	69a1      	ldr	r1, [r4, #24]
 80158b6:	4798      	blx	r3
 80158b8:	2000      	movs	r0, #0
 80158ba:	e9c4 0000 	strd	r0, r0, [r4]
 80158be:	bd70      	pop	{r4, r5, r6, pc}
 80158c0:	200b      	movs	r0, #11
 80158c2:	bd70      	pop	{r4, r5, r6, pc}
 80158c4:	6860      	ldr	r0, [r4, #4]
 80158c6:	e7f4      	b.n	80158b2 <rcutils_string_array_fini+0x36>
 80158c8:	200b      	movs	r0, #11
 80158ca:	4770      	bx	lr

080158cc <on_status>:
 80158cc:	b082      	sub	sp, #8
 80158ce:	b002      	add	sp, #8
 80158d0:	4770      	bx	lr
 80158d2:	bf00      	nop

080158d4 <on_topic>:
 80158d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d8:	4a22      	ldr	r2, [pc, #136]	@ (8015964 <on_topic+0x90>)
 80158da:	b094      	sub	sp, #80	@ 0x50
 80158dc:	6812      	ldr	r2, [r2, #0]
 80158de:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80158e0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80158e4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80158e8:	b3c2      	cbz	r2, 801595c <on_topic+0x88>
 80158ea:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80158ee:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80158f2:	e001      	b.n	80158f8 <on_topic+0x24>
 80158f4:	6852      	ldr	r2, [r2, #4]
 80158f6:	b38a      	cbz	r2, 801595c <on_topic+0x88>
 80158f8:	6894      	ldr	r4, [r2, #8]
 80158fa:	8aa3      	ldrh	r3, [r4, #20]
 80158fc:	428b      	cmp	r3, r1
 80158fe:	d1f9      	bne.n	80158f4 <on_topic+0x20>
 8015900:	7da3      	ldrb	r3, [r4, #22]
 8015902:	4283      	cmp	r3, r0
 8015904:	d1f6      	bne.n	80158f4 <on_topic+0x20>
 8015906:	2248      	movs	r2, #72	@ 0x48
 8015908:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801590c:	4668      	mov	r0, sp
 801590e:	f001 fc2c 	bl	801716a <memcpy>
 8015912:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015916:	cb0c      	ldmia	r3, {r2, r3}
 8015918:	4620      	mov	r0, r4
 801591a:	f7f5 f9a1 	bl	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity>
 801591e:	4607      	mov	r7, r0
 8015920:	b1e0      	cbz	r0, 801595c <on_topic+0x88>
 8015922:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015926:	4632      	mov	r2, r6
 8015928:	4628      	mov	r0, r5
 801592a:	f108 0110 	add.w	r1, r8, #16
 801592e:	f7fd f89b 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 8015932:	b930      	cbnz	r0, 8015942 <on_topic+0x6e>
 8015934:	480c      	ldr	r0, [pc, #48]	@ (8015968 <on_topic+0x94>)
 8015936:	4639      	mov	r1, r7
 8015938:	b014      	add	sp, #80	@ 0x50
 801593a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801593e:	f7fb be4b 	b.w	80115d8 <put_memory>
 8015942:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015946:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801594a:	f7fc ff73 	bl	8012834 <rmw_uros_epoch_nanos>
 801594e:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015952:	2305      	movs	r3, #5
 8015954:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015958:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801595c:	b014      	add	sp, #80	@ 0x50
 801595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015962:	bf00      	nop
 8015964:	20010bb4 	.word	0x20010bb4
 8015968:	20010ba4 	.word	0x20010ba4

0801596c <on_request>:
 801596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015970:	4823      	ldr	r0, [pc, #140]	@ (8015a00 <on_request+0x94>)
 8015972:	b094      	sub	sp, #80	@ 0x50
 8015974:	6800      	ldr	r0, [r0, #0]
 8015976:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015978:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801597c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801597e:	2800      	cmp	r0, #0
 8015980:	d03b      	beq.n	80159fa <on_request+0x8e>
 8015982:	461d      	mov	r5, r3
 8015984:	e001      	b.n	801598a <on_request+0x1e>
 8015986:	6840      	ldr	r0, [r0, #4]
 8015988:	b3b8      	cbz	r0, 80159fa <on_request+0x8e>
 801598a:	6884      	ldr	r4, [r0, #8]
 801598c:	8b21      	ldrh	r1, [r4, #24]
 801598e:	4291      	cmp	r1, r2
 8015990:	d1f9      	bne.n	8015986 <on_request+0x1a>
 8015992:	2248      	movs	r2, #72	@ 0x48
 8015994:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015998:	4668      	mov	r0, sp
 801599a:	f001 fbe6 	bl	801716a <memcpy>
 801599e:	f104 0320 	add.w	r3, r4, #32
 80159a2:	cb0c      	ldmia	r3, {r2, r3}
 80159a4:	4620      	mov	r0, r4
 80159a6:	f7f5 f95b 	bl	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity>
 80159aa:	4680      	mov	r8, r0
 80159ac:	b328      	cbz	r0, 80159fa <on_request+0x8e>
 80159ae:	4638      	mov	r0, r7
 80159b0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80159b4:	4632      	mov	r2, r6
 80159b6:	f107 0110 	add.w	r1, r7, #16
 80159ba:	f7fd f855 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 80159be:	b930      	cbnz	r0, 80159ce <on_request+0x62>
 80159c0:	4810      	ldr	r0, [pc, #64]	@ (8015a04 <on_request+0x98>)
 80159c2:	4641      	mov	r1, r8
 80159c4:	b014      	add	sp, #80	@ 0x50
 80159c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159ca:	f7fb be05 	b.w	80115d8 <put_memory>
 80159ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159d0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80159d4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80159d8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80159dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80159e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80159e8:	f7fc ff24 	bl	8012834 <rmw_uros_epoch_nanos>
 80159ec:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80159f0:	2303      	movs	r3, #3
 80159f2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80159f6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80159fa:	b014      	add	sp, #80	@ 0x50
 80159fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a00:	20010b84 	.word	0x20010b84
 8015a04:	20010ba4 	.word	0x20010ba4

08015a08 <on_reply>:
 8015a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0c:	4821      	ldr	r0, [pc, #132]	@ (8015a94 <on_reply+0x8c>)
 8015a0e:	b094      	sub	sp, #80	@ 0x50
 8015a10:	6800      	ldr	r0, [r0, #0]
 8015a12:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015a14:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015a18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015a1a:	b3b8      	cbz	r0, 8015a8c <on_reply+0x84>
 8015a1c:	461d      	mov	r5, r3
 8015a1e:	e001      	b.n	8015a24 <on_reply+0x1c>
 8015a20:	6840      	ldr	r0, [r0, #4]
 8015a22:	b398      	cbz	r0, 8015a8c <on_reply+0x84>
 8015a24:	6884      	ldr	r4, [r0, #8]
 8015a26:	8b21      	ldrh	r1, [r4, #24]
 8015a28:	4291      	cmp	r1, r2
 8015a2a:	d1f9      	bne.n	8015a20 <on_reply+0x18>
 8015a2c:	2248      	movs	r2, #72	@ 0x48
 8015a2e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015a32:	4668      	mov	r0, sp
 8015a34:	f001 fb99 	bl	801716a <memcpy>
 8015a38:	f104 0320 	add.w	r3, r4, #32
 8015a3c:	cb0c      	ldmia	r3, {r2, r3}
 8015a3e:	4620      	mov	r0, r4
 8015a40:	f7f5 f90e 	bl	800ac60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015a44:	4680      	mov	r8, r0
 8015a46:	b308      	cbz	r0, 8015a8c <on_reply+0x84>
 8015a48:	4638      	mov	r0, r7
 8015a4a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015a4e:	4632      	mov	r2, r6
 8015a50:	f107 0110 	add.w	r1, r7, #16
 8015a54:	f7fd f808 	bl	8012a68 <ucdr_deserialize_array_uint8_t>
 8015a58:	b930      	cbnz	r0, 8015a68 <on_reply+0x60>
 8015a5a:	480f      	ldr	r0, [pc, #60]	@ (8015a98 <on_reply+0x90>)
 8015a5c:	4641      	mov	r1, r8
 8015a5e:	b014      	add	sp, #80	@ 0x50
 8015a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a64:	f7fb bdb8 	b.w	80115d8 <put_memory>
 8015a68:	2200      	movs	r2, #0
 8015a6a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015a6e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015a72:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015a76:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015a7a:	f7fc fedb 	bl	8012834 <rmw_uros_epoch_nanos>
 8015a7e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015a82:	2304      	movs	r3, #4
 8015a84:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015a88:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015a8c:	b014      	add	sp, #80	@ 0x50
 8015a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a92:	bf00      	nop
 8015a94:	2000c298 	.word	0x2000c298
 8015a98:	20010ba4 	.word	0x20010ba4

08015a9c <rmw_create_guard_condition>:
 8015a9c:	b538      	push	{r3, r4, r5, lr}
 8015a9e:	4605      	mov	r5, r0
 8015aa0:	4807      	ldr	r0, [pc, #28]	@ (8015ac0 <rmw_create_guard_condition+0x24>)
 8015aa2:	f7fb fd89 	bl	80115b8 <get_memory>
 8015aa6:	b148      	cbz	r0, 8015abc <rmw_create_guard_condition+0x20>
 8015aa8:	6884      	ldr	r4, [r0, #8]
 8015aaa:	2300      	movs	r3, #0
 8015aac:	7423      	strb	r3, [r4, #16]
 8015aae:	61e5      	str	r5, [r4, #28]
 8015ab0:	f7fb fdea 	bl	8011688 <rmw_get_implementation_identifier>
 8015ab4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8015ab8:	f104 0014 	add.w	r0, r4, #20
 8015abc:	bd38      	pop	{r3, r4, r5, pc}
 8015abe:	bf00      	nop
 8015ac0:	20010b44 	.word	0x20010b44

08015ac4 <rmw_destroy_guard_condition>:
 8015ac4:	b508      	push	{r3, lr}
 8015ac6:	4b08      	ldr	r3, [pc, #32]	@ (8015ae8 <rmw_destroy_guard_condition+0x24>)
 8015ac8:	6819      	ldr	r1, [r3, #0]
 8015aca:	b911      	cbnz	r1, 8015ad2 <rmw_destroy_guard_condition+0xe>
 8015acc:	e00a      	b.n	8015ae4 <rmw_destroy_guard_condition+0x20>
 8015ace:	6849      	ldr	r1, [r1, #4]
 8015ad0:	b141      	cbz	r1, 8015ae4 <rmw_destroy_guard_condition+0x20>
 8015ad2:	688b      	ldr	r3, [r1, #8]
 8015ad4:	3314      	adds	r3, #20
 8015ad6:	4298      	cmp	r0, r3
 8015ad8:	d1f9      	bne.n	8015ace <rmw_destroy_guard_condition+0xa>
 8015ada:	4803      	ldr	r0, [pc, #12]	@ (8015ae8 <rmw_destroy_guard_condition+0x24>)
 8015adc:	f7fb fd7c 	bl	80115d8 <put_memory>
 8015ae0:	2000      	movs	r0, #0
 8015ae2:	bd08      	pop	{r3, pc}
 8015ae4:	2001      	movs	r0, #1
 8015ae6:	bd08      	pop	{r3, pc}
 8015ae8:	20010b44 	.word	0x20010b44

08015aec <rosidl_runtime_c__String__init>:
 8015aec:	b510      	push	{r4, lr}
 8015aee:	4604      	mov	r4, r0
 8015af0:	b086      	sub	sp, #24
 8015af2:	b170      	cbz	r0, 8015b12 <rosidl_runtime_c__String__init+0x26>
 8015af4:	a801      	add	r0, sp, #4
 8015af6:	f7f4 fc75 	bl	800a3e4 <rcutils_get_default_allocator>
 8015afa:	9b01      	ldr	r3, [sp, #4]
 8015afc:	9905      	ldr	r1, [sp, #20]
 8015afe:	2001      	movs	r0, #1
 8015b00:	4798      	blx	r3
 8015b02:	6020      	str	r0, [r4, #0]
 8015b04:	b128      	cbz	r0, 8015b12 <rosidl_runtime_c__String__init+0x26>
 8015b06:	2100      	movs	r1, #0
 8015b08:	2201      	movs	r2, #1
 8015b0a:	7001      	strb	r1, [r0, #0]
 8015b0c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8015b10:	4610      	mov	r0, r2
 8015b12:	b006      	add	sp, #24
 8015b14:	bd10      	pop	{r4, pc}
 8015b16:	bf00      	nop

08015b18 <rosidl_runtime_c__String__fini>:
 8015b18:	b320      	cbz	r0, 8015b64 <rosidl_runtime_c__String__fini+0x4c>
 8015b1a:	b510      	push	{r4, lr}
 8015b1c:	6803      	ldr	r3, [r0, #0]
 8015b1e:	b086      	sub	sp, #24
 8015b20:	4604      	mov	r4, r0
 8015b22:	b173      	cbz	r3, 8015b42 <rosidl_runtime_c__String__fini+0x2a>
 8015b24:	6883      	ldr	r3, [r0, #8]
 8015b26:	b1f3      	cbz	r3, 8015b66 <rosidl_runtime_c__String__fini+0x4e>
 8015b28:	a801      	add	r0, sp, #4
 8015b2a:	f7f4 fc5b 	bl	800a3e4 <rcutils_get_default_allocator>
 8015b2e:	9b02      	ldr	r3, [sp, #8]
 8015b30:	9905      	ldr	r1, [sp, #20]
 8015b32:	6820      	ldr	r0, [r4, #0]
 8015b34:	4798      	blx	r3
 8015b36:	2300      	movs	r3, #0
 8015b38:	e9c4 3300 	strd	r3, r3, [r4]
 8015b3c:	60a3      	str	r3, [r4, #8]
 8015b3e:	b006      	add	sp, #24
 8015b40:	bd10      	pop	{r4, pc}
 8015b42:	6843      	ldr	r3, [r0, #4]
 8015b44:	b9db      	cbnz	r3, 8015b7e <rosidl_runtime_c__String__fini+0x66>
 8015b46:	6883      	ldr	r3, [r0, #8]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d0f8      	beq.n	8015b3e <rosidl_runtime_c__String__fini+0x26>
 8015b4c:	4b12      	ldr	r3, [pc, #72]	@ (8015b98 <rosidl_runtime_c__String__fini+0x80>)
 8015b4e:	4813      	ldr	r0, [pc, #76]	@ (8015b9c <rosidl_runtime_c__String__fini+0x84>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2251      	movs	r2, #81	@ 0x51
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	2101      	movs	r1, #1
 8015b58:	f001 f836 	bl	8016bc8 <fwrite>
 8015b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b60:	f000 f83e 	bl	8015be0 <exit>
 8015b64:	4770      	bx	lr
 8015b66:	4b0c      	ldr	r3, [pc, #48]	@ (8015b98 <rosidl_runtime_c__String__fini+0x80>)
 8015b68:	480d      	ldr	r0, [pc, #52]	@ (8015ba0 <rosidl_runtime_c__String__fini+0x88>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	224c      	movs	r2, #76	@ 0x4c
 8015b6e:	68db      	ldr	r3, [r3, #12]
 8015b70:	2101      	movs	r1, #1
 8015b72:	f001 f829 	bl	8016bc8 <fwrite>
 8015b76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b7a:	f000 f831 	bl	8015be0 <exit>
 8015b7e:	4b06      	ldr	r3, [pc, #24]	@ (8015b98 <rosidl_runtime_c__String__fini+0x80>)
 8015b80:	4808      	ldr	r0, [pc, #32]	@ (8015ba4 <rosidl_runtime_c__String__fini+0x8c>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	224e      	movs	r2, #78	@ 0x4e
 8015b86:	68db      	ldr	r3, [r3, #12]
 8015b88:	2101      	movs	r1, #1
 8015b8a:	f001 f81d 	bl	8016bc8 <fwrite>
 8015b8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015b92:	f000 f825 	bl	8015be0 <exit>
 8015b96:	bf00      	nop
 8015b98:	200000c8 	.word	0x200000c8
 8015b9c:	08019cfc 	.word	0x08019cfc
 8015ba0:	08019c5c 	.word	0x08019c5c
 8015ba4:	08019cac 	.word	0x08019cac

08015ba8 <calloc>:
 8015ba8:	4b02      	ldr	r3, [pc, #8]	@ (8015bb4 <calloc+0xc>)
 8015baa:	460a      	mov	r2, r1
 8015bac:	4601      	mov	r1, r0
 8015bae:	6818      	ldr	r0, [r3, #0]
 8015bb0:	f000 b802 	b.w	8015bb8 <_calloc_r>
 8015bb4:	200000c8 	.word	0x200000c8

08015bb8 <_calloc_r>:
 8015bb8:	b570      	push	{r4, r5, r6, lr}
 8015bba:	fba1 5402 	umull	r5, r4, r1, r2
 8015bbe:	b93c      	cbnz	r4, 8015bd0 <_calloc_r+0x18>
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	f000 f8b3 	bl	8015d2c <_malloc_r>
 8015bc6:	4606      	mov	r6, r0
 8015bc8:	b928      	cbnz	r0, 8015bd6 <_calloc_r+0x1e>
 8015bca:	2600      	movs	r6, #0
 8015bcc:	4630      	mov	r0, r6
 8015bce:	bd70      	pop	{r4, r5, r6, pc}
 8015bd0:	220c      	movs	r2, #12
 8015bd2:	6002      	str	r2, [r0, #0]
 8015bd4:	e7f9      	b.n	8015bca <_calloc_r+0x12>
 8015bd6:	462a      	mov	r2, r5
 8015bd8:	4621      	mov	r1, r4
 8015bda:	f001 f9a3 	bl	8016f24 <memset>
 8015bde:	e7f5      	b.n	8015bcc <_calloc_r+0x14>

08015be0 <exit>:
 8015be0:	b508      	push	{r3, lr}
 8015be2:	4b06      	ldr	r3, [pc, #24]	@ (8015bfc <exit+0x1c>)
 8015be4:	4604      	mov	r4, r0
 8015be6:	b113      	cbz	r3, 8015bee <exit+0xe>
 8015be8:	2100      	movs	r1, #0
 8015bea:	f3af 8000 	nop.w
 8015bee:	4b04      	ldr	r3, [pc, #16]	@ (8015c00 <exit+0x20>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	b103      	cbz	r3, 8015bf6 <exit+0x16>
 8015bf4:	4798      	blx	r3
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f7ec fd94 	bl	8002724 <_exit>
 8015bfc:	00000000 	.word	0x00000000
 8015c00:	20010ea8 	.word	0x20010ea8

08015c04 <getenv>:
 8015c04:	b507      	push	{r0, r1, r2, lr}
 8015c06:	4b04      	ldr	r3, [pc, #16]	@ (8015c18 <getenv+0x14>)
 8015c08:	4601      	mov	r1, r0
 8015c0a:	aa01      	add	r2, sp, #4
 8015c0c:	6818      	ldr	r0, [r3, #0]
 8015c0e:	f000 f805 	bl	8015c1c <_findenv_r>
 8015c12:	b003      	add	sp, #12
 8015c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c18:	200000c8 	.word	0x200000c8

08015c1c <_findenv_r>:
 8015c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c20:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8015c90 <_findenv_r+0x74>
 8015c24:	4606      	mov	r6, r0
 8015c26:	4689      	mov	r9, r1
 8015c28:	4617      	mov	r7, r2
 8015c2a:	f002 f919 	bl	8017e60 <__env_lock>
 8015c2e:	f8da 4000 	ldr.w	r4, [sl]
 8015c32:	b134      	cbz	r4, 8015c42 <_findenv_r+0x26>
 8015c34:	464b      	mov	r3, r9
 8015c36:	4698      	mov	r8, r3
 8015c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c3c:	b13a      	cbz	r2, 8015c4e <_findenv_r+0x32>
 8015c3e:	2a3d      	cmp	r2, #61	@ 0x3d
 8015c40:	d1f9      	bne.n	8015c36 <_findenv_r+0x1a>
 8015c42:	4630      	mov	r0, r6
 8015c44:	f002 f912 	bl	8017e6c <__env_unlock>
 8015c48:	2000      	movs	r0, #0
 8015c4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c4e:	eba8 0809 	sub.w	r8, r8, r9
 8015c52:	46a3      	mov	fp, r4
 8015c54:	f854 0b04 	ldr.w	r0, [r4], #4
 8015c58:	2800      	cmp	r0, #0
 8015c5a:	d0f2      	beq.n	8015c42 <_findenv_r+0x26>
 8015c5c:	4642      	mov	r2, r8
 8015c5e:	4649      	mov	r1, r9
 8015c60:	f001 f975 	bl	8016f4e <strncmp>
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d1f4      	bne.n	8015c52 <_findenv_r+0x36>
 8015c68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015c6c:	eb03 0508 	add.w	r5, r3, r8
 8015c70:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015c74:	2b3d      	cmp	r3, #61	@ 0x3d
 8015c76:	d1ec      	bne.n	8015c52 <_findenv_r+0x36>
 8015c78:	f8da 3000 	ldr.w	r3, [sl]
 8015c7c:	ebab 0303 	sub.w	r3, fp, r3
 8015c80:	109b      	asrs	r3, r3, #2
 8015c82:	4630      	mov	r0, r6
 8015c84:	603b      	str	r3, [r7, #0]
 8015c86:	f002 f8f1 	bl	8017e6c <__env_unlock>
 8015c8a:	1c68      	adds	r0, r5, #1
 8015c8c:	e7dd      	b.n	8015c4a <_findenv_r+0x2e>
 8015c8e:	bf00      	nop
 8015c90:	20000000 	.word	0x20000000

08015c94 <__itoa>:
 8015c94:	1e93      	subs	r3, r2, #2
 8015c96:	2b22      	cmp	r3, #34	@ 0x22
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	460c      	mov	r4, r1
 8015c9c:	d904      	bls.n	8015ca8 <__itoa+0x14>
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	700b      	strb	r3, [r1, #0]
 8015ca2:	461c      	mov	r4, r3
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	bd10      	pop	{r4, pc}
 8015ca8:	2a0a      	cmp	r2, #10
 8015caa:	d109      	bne.n	8015cc0 <__itoa+0x2c>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	da07      	bge.n	8015cc0 <__itoa+0x2c>
 8015cb0:	232d      	movs	r3, #45	@ 0x2d
 8015cb2:	700b      	strb	r3, [r1, #0]
 8015cb4:	4240      	negs	r0, r0
 8015cb6:	2101      	movs	r1, #1
 8015cb8:	4421      	add	r1, r4
 8015cba:	f000 f9dd 	bl	8016078 <__utoa>
 8015cbe:	e7f1      	b.n	8015ca4 <__itoa+0x10>
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	e7f9      	b.n	8015cb8 <__itoa+0x24>

08015cc4 <itoa>:
 8015cc4:	f7ff bfe6 	b.w	8015c94 <__itoa>

08015cc8 <malloc>:
 8015cc8:	4b02      	ldr	r3, [pc, #8]	@ (8015cd4 <malloc+0xc>)
 8015cca:	4601      	mov	r1, r0
 8015ccc:	6818      	ldr	r0, [r3, #0]
 8015cce:	f000 b82d 	b.w	8015d2c <_malloc_r>
 8015cd2:	bf00      	nop
 8015cd4:	200000c8 	.word	0x200000c8

08015cd8 <free>:
 8015cd8:	4b02      	ldr	r3, [pc, #8]	@ (8015ce4 <free+0xc>)
 8015cda:	4601      	mov	r1, r0
 8015cdc:	6818      	ldr	r0, [r3, #0]
 8015cde:	f002 b8cb 	b.w	8017e78 <_free_r>
 8015ce2:	bf00      	nop
 8015ce4:	200000c8 	.word	0x200000c8

08015ce8 <sbrk_aligned>:
 8015ce8:	b570      	push	{r4, r5, r6, lr}
 8015cea:	4e0f      	ldr	r6, [pc, #60]	@ (8015d28 <sbrk_aligned+0x40>)
 8015cec:	460c      	mov	r4, r1
 8015cee:	6831      	ldr	r1, [r6, #0]
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	b911      	cbnz	r1, 8015cfa <sbrk_aligned+0x12>
 8015cf4:	f001 f9e2 	bl	80170bc <_sbrk_r>
 8015cf8:	6030      	str	r0, [r6, #0]
 8015cfa:	4621      	mov	r1, r4
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	f001 f9dd 	bl	80170bc <_sbrk_r>
 8015d02:	1c43      	adds	r3, r0, #1
 8015d04:	d103      	bne.n	8015d0e <sbrk_aligned+0x26>
 8015d06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	bd70      	pop	{r4, r5, r6, pc}
 8015d0e:	1cc4      	adds	r4, r0, #3
 8015d10:	f024 0403 	bic.w	r4, r4, #3
 8015d14:	42a0      	cmp	r0, r4
 8015d16:	d0f8      	beq.n	8015d0a <sbrk_aligned+0x22>
 8015d18:	1a21      	subs	r1, r4, r0
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	f001 f9ce 	bl	80170bc <_sbrk_r>
 8015d20:	3001      	adds	r0, #1
 8015d22:	d1f2      	bne.n	8015d0a <sbrk_aligned+0x22>
 8015d24:	e7ef      	b.n	8015d06 <sbrk_aligned+0x1e>
 8015d26:	bf00      	nop
 8015d28:	20010d68 	.word	0x20010d68

08015d2c <_malloc_r>:
 8015d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d30:	1ccd      	adds	r5, r1, #3
 8015d32:	f025 0503 	bic.w	r5, r5, #3
 8015d36:	3508      	adds	r5, #8
 8015d38:	2d0c      	cmp	r5, #12
 8015d3a:	bf38      	it	cc
 8015d3c:	250c      	movcc	r5, #12
 8015d3e:	2d00      	cmp	r5, #0
 8015d40:	4606      	mov	r6, r0
 8015d42:	db01      	blt.n	8015d48 <_malloc_r+0x1c>
 8015d44:	42a9      	cmp	r1, r5
 8015d46:	d904      	bls.n	8015d52 <_malloc_r+0x26>
 8015d48:	230c      	movs	r3, #12
 8015d4a:	6033      	str	r3, [r6, #0]
 8015d4c:	2000      	movs	r0, #0
 8015d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015e28 <_malloc_r+0xfc>
 8015d56:	f000 f869 	bl	8015e2c <__malloc_lock>
 8015d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8015d5e:	461c      	mov	r4, r3
 8015d60:	bb44      	cbnz	r4, 8015db4 <_malloc_r+0x88>
 8015d62:	4629      	mov	r1, r5
 8015d64:	4630      	mov	r0, r6
 8015d66:	f7ff ffbf 	bl	8015ce8 <sbrk_aligned>
 8015d6a:	1c43      	adds	r3, r0, #1
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	d158      	bne.n	8015e22 <_malloc_r+0xf6>
 8015d70:	f8d8 4000 	ldr.w	r4, [r8]
 8015d74:	4627      	mov	r7, r4
 8015d76:	2f00      	cmp	r7, #0
 8015d78:	d143      	bne.n	8015e02 <_malloc_r+0xd6>
 8015d7a:	2c00      	cmp	r4, #0
 8015d7c:	d04b      	beq.n	8015e16 <_malloc_r+0xea>
 8015d7e:	6823      	ldr	r3, [r4, #0]
 8015d80:	4639      	mov	r1, r7
 8015d82:	4630      	mov	r0, r6
 8015d84:	eb04 0903 	add.w	r9, r4, r3
 8015d88:	f001 f998 	bl	80170bc <_sbrk_r>
 8015d8c:	4581      	cmp	r9, r0
 8015d8e:	d142      	bne.n	8015e16 <_malloc_r+0xea>
 8015d90:	6821      	ldr	r1, [r4, #0]
 8015d92:	1a6d      	subs	r5, r5, r1
 8015d94:	4629      	mov	r1, r5
 8015d96:	4630      	mov	r0, r6
 8015d98:	f7ff ffa6 	bl	8015ce8 <sbrk_aligned>
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	d03a      	beq.n	8015e16 <_malloc_r+0xea>
 8015da0:	6823      	ldr	r3, [r4, #0]
 8015da2:	442b      	add	r3, r5
 8015da4:	6023      	str	r3, [r4, #0]
 8015da6:	f8d8 3000 	ldr.w	r3, [r8]
 8015daa:	685a      	ldr	r2, [r3, #4]
 8015dac:	bb62      	cbnz	r2, 8015e08 <_malloc_r+0xdc>
 8015dae:	f8c8 7000 	str.w	r7, [r8]
 8015db2:	e00f      	b.n	8015dd4 <_malloc_r+0xa8>
 8015db4:	6822      	ldr	r2, [r4, #0]
 8015db6:	1b52      	subs	r2, r2, r5
 8015db8:	d420      	bmi.n	8015dfc <_malloc_r+0xd0>
 8015dba:	2a0b      	cmp	r2, #11
 8015dbc:	d917      	bls.n	8015dee <_malloc_r+0xc2>
 8015dbe:	1961      	adds	r1, r4, r5
 8015dc0:	42a3      	cmp	r3, r4
 8015dc2:	6025      	str	r5, [r4, #0]
 8015dc4:	bf18      	it	ne
 8015dc6:	6059      	strne	r1, [r3, #4]
 8015dc8:	6863      	ldr	r3, [r4, #4]
 8015dca:	bf08      	it	eq
 8015dcc:	f8c8 1000 	streq.w	r1, [r8]
 8015dd0:	5162      	str	r2, [r4, r5]
 8015dd2:	604b      	str	r3, [r1, #4]
 8015dd4:	4630      	mov	r0, r6
 8015dd6:	f000 f82f 	bl	8015e38 <__malloc_unlock>
 8015dda:	f104 000b 	add.w	r0, r4, #11
 8015dde:	1d23      	adds	r3, r4, #4
 8015de0:	f020 0007 	bic.w	r0, r0, #7
 8015de4:	1ac2      	subs	r2, r0, r3
 8015de6:	bf1c      	itt	ne
 8015de8:	1a1b      	subne	r3, r3, r0
 8015dea:	50a3      	strne	r3, [r4, r2]
 8015dec:	e7af      	b.n	8015d4e <_malloc_r+0x22>
 8015dee:	6862      	ldr	r2, [r4, #4]
 8015df0:	42a3      	cmp	r3, r4
 8015df2:	bf0c      	ite	eq
 8015df4:	f8c8 2000 	streq.w	r2, [r8]
 8015df8:	605a      	strne	r2, [r3, #4]
 8015dfa:	e7eb      	b.n	8015dd4 <_malloc_r+0xa8>
 8015dfc:	4623      	mov	r3, r4
 8015dfe:	6864      	ldr	r4, [r4, #4]
 8015e00:	e7ae      	b.n	8015d60 <_malloc_r+0x34>
 8015e02:	463c      	mov	r4, r7
 8015e04:	687f      	ldr	r7, [r7, #4]
 8015e06:	e7b6      	b.n	8015d76 <_malloc_r+0x4a>
 8015e08:	461a      	mov	r2, r3
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	42a3      	cmp	r3, r4
 8015e0e:	d1fb      	bne.n	8015e08 <_malloc_r+0xdc>
 8015e10:	2300      	movs	r3, #0
 8015e12:	6053      	str	r3, [r2, #4]
 8015e14:	e7de      	b.n	8015dd4 <_malloc_r+0xa8>
 8015e16:	230c      	movs	r3, #12
 8015e18:	6033      	str	r3, [r6, #0]
 8015e1a:	4630      	mov	r0, r6
 8015e1c:	f000 f80c 	bl	8015e38 <__malloc_unlock>
 8015e20:	e794      	b.n	8015d4c <_malloc_r+0x20>
 8015e22:	6005      	str	r5, [r0, #0]
 8015e24:	e7d6      	b.n	8015dd4 <_malloc_r+0xa8>
 8015e26:	bf00      	nop
 8015e28:	20010d6c 	.word	0x20010d6c

08015e2c <__malloc_lock>:
 8015e2c:	4801      	ldr	r0, [pc, #4]	@ (8015e34 <__malloc_lock+0x8>)
 8015e2e:	f001 b992 	b.w	8017156 <__retarget_lock_acquire_recursive>
 8015e32:	bf00      	nop
 8015e34:	20010eb1 	.word	0x20010eb1

08015e38 <__malloc_unlock>:
 8015e38:	4801      	ldr	r0, [pc, #4]	@ (8015e40 <__malloc_unlock+0x8>)
 8015e3a:	f001 b98d 	b.w	8017158 <__retarget_lock_release_recursive>
 8015e3e:	bf00      	nop
 8015e40:	20010eb1 	.word	0x20010eb1

08015e44 <srand>:
 8015e44:	b538      	push	{r3, r4, r5, lr}
 8015e46:	4b10      	ldr	r3, [pc, #64]	@ (8015e88 <srand+0x44>)
 8015e48:	681d      	ldr	r5, [r3, #0]
 8015e4a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	b9b3      	cbnz	r3, 8015e7e <srand+0x3a>
 8015e50:	2018      	movs	r0, #24
 8015e52:	f7ff ff39 	bl	8015cc8 <malloc>
 8015e56:	4602      	mov	r2, r0
 8015e58:	6328      	str	r0, [r5, #48]	@ 0x30
 8015e5a:	b920      	cbnz	r0, 8015e66 <srand+0x22>
 8015e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8015e8c <srand+0x48>)
 8015e5e:	480c      	ldr	r0, [pc, #48]	@ (8015e90 <srand+0x4c>)
 8015e60:	2146      	movs	r1, #70	@ 0x46
 8015e62:	f001 f991 	bl	8017188 <__assert_func>
 8015e66:	490b      	ldr	r1, [pc, #44]	@ (8015e94 <srand+0x50>)
 8015e68:	4b0b      	ldr	r3, [pc, #44]	@ (8015e98 <srand+0x54>)
 8015e6a:	e9c0 1300 	strd	r1, r3, [r0]
 8015e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015e9c <srand+0x58>)
 8015e70:	6083      	str	r3, [r0, #8]
 8015e72:	230b      	movs	r3, #11
 8015e74:	8183      	strh	r3, [r0, #12]
 8015e76:	2100      	movs	r1, #0
 8015e78:	2001      	movs	r0, #1
 8015e7a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015e7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015e80:	2200      	movs	r2, #0
 8015e82:	611c      	str	r4, [r3, #16]
 8015e84:	615a      	str	r2, [r3, #20]
 8015e86:	bd38      	pop	{r3, r4, r5, pc}
 8015e88:	200000c8 	.word	0x200000c8
 8015e8c:	08019d4e 	.word	0x08019d4e
 8015e90:	08019d65 	.word	0x08019d65
 8015e94:	abcd330e 	.word	0xabcd330e
 8015e98:	e66d1234 	.word	0xe66d1234
 8015e9c:	0005deec 	.word	0x0005deec

08015ea0 <rand>:
 8015ea0:	4b16      	ldr	r3, [pc, #88]	@ (8015efc <rand+0x5c>)
 8015ea2:	b510      	push	{r4, lr}
 8015ea4:	681c      	ldr	r4, [r3, #0]
 8015ea6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ea8:	b9b3      	cbnz	r3, 8015ed8 <rand+0x38>
 8015eaa:	2018      	movs	r0, #24
 8015eac:	f7ff ff0c 	bl	8015cc8 <malloc>
 8015eb0:	4602      	mov	r2, r0
 8015eb2:	6320      	str	r0, [r4, #48]	@ 0x30
 8015eb4:	b920      	cbnz	r0, 8015ec0 <rand+0x20>
 8015eb6:	4b12      	ldr	r3, [pc, #72]	@ (8015f00 <rand+0x60>)
 8015eb8:	4812      	ldr	r0, [pc, #72]	@ (8015f04 <rand+0x64>)
 8015eba:	2152      	movs	r1, #82	@ 0x52
 8015ebc:	f001 f964 	bl	8017188 <__assert_func>
 8015ec0:	4911      	ldr	r1, [pc, #68]	@ (8015f08 <rand+0x68>)
 8015ec2:	4b12      	ldr	r3, [pc, #72]	@ (8015f0c <rand+0x6c>)
 8015ec4:	e9c0 1300 	strd	r1, r3, [r0]
 8015ec8:	4b11      	ldr	r3, [pc, #68]	@ (8015f10 <rand+0x70>)
 8015eca:	6083      	str	r3, [r0, #8]
 8015ecc:	230b      	movs	r3, #11
 8015ece:	8183      	strh	r3, [r0, #12]
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	2001      	movs	r0, #1
 8015ed4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015ed8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015eda:	480e      	ldr	r0, [pc, #56]	@ (8015f14 <rand+0x74>)
 8015edc:	690b      	ldr	r3, [r1, #16]
 8015ede:	694c      	ldr	r4, [r1, #20]
 8015ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8015f18 <rand+0x78>)
 8015ee2:	4358      	muls	r0, r3
 8015ee4:	fb02 0004 	mla	r0, r2, r4, r0
 8015ee8:	fba3 3202 	umull	r3, r2, r3, r2
 8015eec:	3301      	adds	r3, #1
 8015eee:	eb40 0002 	adc.w	r0, r0, r2
 8015ef2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8015ef6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8015efa:	bd10      	pop	{r4, pc}
 8015efc:	200000c8 	.word	0x200000c8
 8015f00:	08019d4e 	.word	0x08019d4e
 8015f04:	08019d65 	.word	0x08019d65
 8015f08:	abcd330e 	.word	0xabcd330e
 8015f0c:	e66d1234 	.word	0xe66d1234
 8015f10:	0005deec 	.word	0x0005deec
 8015f14:	5851f42d 	.word	0x5851f42d
 8015f18:	4c957f2d 	.word	0x4c957f2d

08015f1c <realloc>:
 8015f1c:	4b02      	ldr	r3, [pc, #8]	@ (8015f28 <realloc+0xc>)
 8015f1e:	460a      	mov	r2, r1
 8015f20:	4601      	mov	r1, r0
 8015f22:	6818      	ldr	r0, [r3, #0]
 8015f24:	f000 b802 	b.w	8015f2c <_realloc_r>
 8015f28:	200000c8 	.word	0x200000c8

08015f2c <_realloc_r>:
 8015f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f30:	4680      	mov	r8, r0
 8015f32:	4615      	mov	r5, r2
 8015f34:	460c      	mov	r4, r1
 8015f36:	b921      	cbnz	r1, 8015f42 <_realloc_r+0x16>
 8015f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f3c:	4611      	mov	r1, r2
 8015f3e:	f7ff bef5 	b.w	8015d2c <_malloc_r>
 8015f42:	b92a      	cbnz	r2, 8015f50 <_realloc_r+0x24>
 8015f44:	f001 ff98 	bl	8017e78 <_free_r>
 8015f48:	2400      	movs	r4, #0
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f50:	f002 fb5e 	bl	8018610 <_malloc_usable_size_r>
 8015f54:	4285      	cmp	r5, r0
 8015f56:	4606      	mov	r6, r0
 8015f58:	d802      	bhi.n	8015f60 <_realloc_r+0x34>
 8015f5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015f5e:	d8f4      	bhi.n	8015f4a <_realloc_r+0x1e>
 8015f60:	4629      	mov	r1, r5
 8015f62:	4640      	mov	r0, r8
 8015f64:	f7ff fee2 	bl	8015d2c <_malloc_r>
 8015f68:	4607      	mov	r7, r0
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	d0ec      	beq.n	8015f48 <_realloc_r+0x1c>
 8015f6e:	42b5      	cmp	r5, r6
 8015f70:	462a      	mov	r2, r5
 8015f72:	4621      	mov	r1, r4
 8015f74:	bf28      	it	cs
 8015f76:	4632      	movcs	r2, r6
 8015f78:	f001 f8f7 	bl	801716a <memcpy>
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	4640      	mov	r0, r8
 8015f80:	f001 ff7a 	bl	8017e78 <_free_r>
 8015f84:	463c      	mov	r4, r7
 8015f86:	e7e0      	b.n	8015f4a <_realloc_r+0x1e>

08015f88 <_strtoul_l.constprop.0>:
 8015f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f8c:	4e34      	ldr	r6, [pc, #208]	@ (8016060 <_strtoul_l.constprop.0+0xd8>)
 8015f8e:	4686      	mov	lr, r0
 8015f90:	460d      	mov	r5, r1
 8015f92:	4628      	mov	r0, r5
 8015f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015f98:	5d37      	ldrb	r7, [r6, r4]
 8015f9a:	f017 0708 	ands.w	r7, r7, #8
 8015f9e:	d1f8      	bne.n	8015f92 <_strtoul_l.constprop.0+0xa>
 8015fa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8015fa2:	d12f      	bne.n	8016004 <_strtoul_l.constprop.0+0x7c>
 8015fa4:	782c      	ldrb	r4, [r5, #0]
 8015fa6:	2701      	movs	r7, #1
 8015fa8:	1c85      	adds	r5, r0, #2
 8015faa:	f033 0010 	bics.w	r0, r3, #16
 8015fae:	d109      	bne.n	8015fc4 <_strtoul_l.constprop.0+0x3c>
 8015fb0:	2c30      	cmp	r4, #48	@ 0x30
 8015fb2:	d12c      	bne.n	801600e <_strtoul_l.constprop.0+0x86>
 8015fb4:	7828      	ldrb	r0, [r5, #0]
 8015fb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015fba:	2858      	cmp	r0, #88	@ 0x58
 8015fbc:	d127      	bne.n	801600e <_strtoul_l.constprop.0+0x86>
 8015fbe:	786c      	ldrb	r4, [r5, #1]
 8015fc0:	2310      	movs	r3, #16
 8015fc2:	3502      	adds	r5, #2
 8015fc4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8015fc8:	2600      	movs	r6, #0
 8015fca:	fbb8 f8f3 	udiv	r8, r8, r3
 8015fce:	fb03 f908 	mul.w	r9, r3, r8
 8015fd2:	ea6f 0909 	mvn.w	r9, r9
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015fdc:	f1bc 0f09 	cmp.w	ip, #9
 8015fe0:	d81c      	bhi.n	801601c <_strtoul_l.constprop.0+0x94>
 8015fe2:	4664      	mov	r4, ip
 8015fe4:	42a3      	cmp	r3, r4
 8015fe6:	dd2a      	ble.n	801603e <_strtoul_l.constprop.0+0xb6>
 8015fe8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8015fec:	d007      	beq.n	8015ffe <_strtoul_l.constprop.0+0x76>
 8015fee:	4580      	cmp	r8, r0
 8015ff0:	d322      	bcc.n	8016038 <_strtoul_l.constprop.0+0xb0>
 8015ff2:	d101      	bne.n	8015ff8 <_strtoul_l.constprop.0+0x70>
 8015ff4:	45a1      	cmp	r9, r4
 8015ff6:	db1f      	blt.n	8016038 <_strtoul_l.constprop.0+0xb0>
 8015ff8:	fb00 4003 	mla	r0, r0, r3, r4
 8015ffc:	2601      	movs	r6, #1
 8015ffe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016002:	e7e9      	b.n	8015fd8 <_strtoul_l.constprop.0+0x50>
 8016004:	2c2b      	cmp	r4, #43	@ 0x2b
 8016006:	bf04      	itt	eq
 8016008:	782c      	ldrbeq	r4, [r5, #0]
 801600a:	1c85      	addeq	r5, r0, #2
 801600c:	e7cd      	b.n	8015faa <_strtoul_l.constprop.0+0x22>
 801600e:	2b00      	cmp	r3, #0
 8016010:	d1d8      	bne.n	8015fc4 <_strtoul_l.constprop.0+0x3c>
 8016012:	2c30      	cmp	r4, #48	@ 0x30
 8016014:	bf0c      	ite	eq
 8016016:	2308      	moveq	r3, #8
 8016018:	230a      	movne	r3, #10
 801601a:	e7d3      	b.n	8015fc4 <_strtoul_l.constprop.0+0x3c>
 801601c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016020:	f1bc 0f19 	cmp.w	ip, #25
 8016024:	d801      	bhi.n	801602a <_strtoul_l.constprop.0+0xa2>
 8016026:	3c37      	subs	r4, #55	@ 0x37
 8016028:	e7dc      	b.n	8015fe4 <_strtoul_l.constprop.0+0x5c>
 801602a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801602e:	f1bc 0f19 	cmp.w	ip, #25
 8016032:	d804      	bhi.n	801603e <_strtoul_l.constprop.0+0xb6>
 8016034:	3c57      	subs	r4, #87	@ 0x57
 8016036:	e7d5      	b.n	8015fe4 <_strtoul_l.constprop.0+0x5c>
 8016038:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801603c:	e7df      	b.n	8015ffe <_strtoul_l.constprop.0+0x76>
 801603e:	1c73      	adds	r3, r6, #1
 8016040:	d106      	bne.n	8016050 <_strtoul_l.constprop.0+0xc8>
 8016042:	2322      	movs	r3, #34	@ 0x22
 8016044:	f8ce 3000 	str.w	r3, [lr]
 8016048:	4630      	mov	r0, r6
 801604a:	b932      	cbnz	r2, 801605a <_strtoul_l.constprop.0+0xd2>
 801604c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016050:	b107      	cbz	r7, 8016054 <_strtoul_l.constprop.0+0xcc>
 8016052:	4240      	negs	r0, r0
 8016054:	2a00      	cmp	r2, #0
 8016056:	d0f9      	beq.n	801604c <_strtoul_l.constprop.0+0xc4>
 8016058:	b106      	cbz	r6, 801605c <_strtoul_l.constprop.0+0xd4>
 801605a:	1e69      	subs	r1, r5, #1
 801605c:	6011      	str	r1, [r2, #0]
 801605e:	e7f5      	b.n	801604c <_strtoul_l.constprop.0+0xc4>
 8016060:	08019de3 	.word	0x08019de3

08016064 <strtoul>:
 8016064:	4613      	mov	r3, r2
 8016066:	460a      	mov	r2, r1
 8016068:	4601      	mov	r1, r0
 801606a:	4802      	ldr	r0, [pc, #8]	@ (8016074 <strtoul+0x10>)
 801606c:	6800      	ldr	r0, [r0, #0]
 801606e:	f7ff bf8b 	b.w	8015f88 <_strtoul_l.constprop.0>
 8016072:	bf00      	nop
 8016074:	200000c8 	.word	0x200000c8

08016078 <__utoa>:
 8016078:	b5f0      	push	{r4, r5, r6, r7, lr}
 801607a:	4c1f      	ldr	r4, [pc, #124]	@ (80160f8 <__utoa+0x80>)
 801607c:	b08b      	sub	sp, #44	@ 0x2c
 801607e:	4605      	mov	r5, r0
 8016080:	460b      	mov	r3, r1
 8016082:	466e      	mov	r6, sp
 8016084:	f104 0c20 	add.w	ip, r4, #32
 8016088:	6820      	ldr	r0, [r4, #0]
 801608a:	6861      	ldr	r1, [r4, #4]
 801608c:	4637      	mov	r7, r6
 801608e:	c703      	stmia	r7!, {r0, r1}
 8016090:	3408      	adds	r4, #8
 8016092:	4564      	cmp	r4, ip
 8016094:	463e      	mov	r6, r7
 8016096:	d1f7      	bne.n	8016088 <__utoa+0x10>
 8016098:	7921      	ldrb	r1, [r4, #4]
 801609a:	7139      	strb	r1, [r7, #4]
 801609c:	1e91      	subs	r1, r2, #2
 801609e:	6820      	ldr	r0, [r4, #0]
 80160a0:	6038      	str	r0, [r7, #0]
 80160a2:	2922      	cmp	r1, #34	@ 0x22
 80160a4:	f04f 0100 	mov.w	r1, #0
 80160a8:	d904      	bls.n	80160b4 <__utoa+0x3c>
 80160aa:	7019      	strb	r1, [r3, #0]
 80160ac:	460b      	mov	r3, r1
 80160ae:	4618      	mov	r0, r3
 80160b0:	b00b      	add	sp, #44	@ 0x2c
 80160b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160b4:	1e58      	subs	r0, r3, #1
 80160b6:	4684      	mov	ip, r0
 80160b8:	fbb5 f7f2 	udiv	r7, r5, r2
 80160bc:	fb02 5617 	mls	r6, r2, r7, r5
 80160c0:	3628      	adds	r6, #40	@ 0x28
 80160c2:	446e      	add	r6, sp
 80160c4:	460c      	mov	r4, r1
 80160c6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80160ca:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80160ce:	462e      	mov	r6, r5
 80160d0:	42b2      	cmp	r2, r6
 80160d2:	f101 0101 	add.w	r1, r1, #1
 80160d6:	463d      	mov	r5, r7
 80160d8:	d9ee      	bls.n	80160b8 <__utoa+0x40>
 80160da:	2200      	movs	r2, #0
 80160dc:	545a      	strb	r2, [r3, r1]
 80160de:	1919      	adds	r1, r3, r4
 80160e0:	1aa5      	subs	r5, r4, r2
 80160e2:	42aa      	cmp	r2, r5
 80160e4:	dae3      	bge.n	80160ae <__utoa+0x36>
 80160e6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80160ea:	780e      	ldrb	r6, [r1, #0]
 80160ec:	7006      	strb	r6, [r0, #0]
 80160ee:	3201      	adds	r2, #1
 80160f0:	f801 5901 	strb.w	r5, [r1], #-1
 80160f4:	e7f4      	b.n	80160e0 <__utoa+0x68>
 80160f6:	bf00      	nop
 80160f8:	08019dbd 	.word	0x08019dbd

080160fc <__cvt>:
 80160fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016100:	ec57 6b10 	vmov	r6, r7, d0
 8016104:	2f00      	cmp	r7, #0
 8016106:	460c      	mov	r4, r1
 8016108:	4619      	mov	r1, r3
 801610a:	463b      	mov	r3, r7
 801610c:	bfbb      	ittet	lt
 801610e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8016112:	461f      	movlt	r7, r3
 8016114:	2300      	movge	r3, #0
 8016116:	232d      	movlt	r3, #45	@ 0x2d
 8016118:	700b      	strb	r3, [r1, #0]
 801611a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801611c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8016120:	4691      	mov	r9, r2
 8016122:	f023 0820 	bic.w	r8, r3, #32
 8016126:	bfbc      	itt	lt
 8016128:	4632      	movlt	r2, r6
 801612a:	4616      	movlt	r6, r2
 801612c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016130:	d005      	beq.n	801613e <__cvt+0x42>
 8016132:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016136:	d100      	bne.n	801613a <__cvt+0x3e>
 8016138:	3401      	adds	r4, #1
 801613a:	2102      	movs	r1, #2
 801613c:	e000      	b.n	8016140 <__cvt+0x44>
 801613e:	2103      	movs	r1, #3
 8016140:	ab03      	add	r3, sp, #12
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	ab02      	add	r3, sp, #8
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	ec47 6b10 	vmov	d0, r6, r7
 801614c:	4653      	mov	r3, sl
 801614e:	4622      	mov	r2, r4
 8016150:	f001 f8c2 	bl	80172d8 <_dtoa_r>
 8016154:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016158:	4605      	mov	r5, r0
 801615a:	d119      	bne.n	8016190 <__cvt+0x94>
 801615c:	f019 0f01 	tst.w	r9, #1
 8016160:	d00e      	beq.n	8016180 <__cvt+0x84>
 8016162:	eb00 0904 	add.w	r9, r0, r4
 8016166:	2200      	movs	r2, #0
 8016168:	2300      	movs	r3, #0
 801616a:	4630      	mov	r0, r6
 801616c:	4639      	mov	r1, r7
 801616e:	f7ea fcdb 	bl	8000b28 <__aeabi_dcmpeq>
 8016172:	b108      	cbz	r0, 8016178 <__cvt+0x7c>
 8016174:	f8cd 900c 	str.w	r9, [sp, #12]
 8016178:	2230      	movs	r2, #48	@ 0x30
 801617a:	9b03      	ldr	r3, [sp, #12]
 801617c:	454b      	cmp	r3, r9
 801617e:	d31e      	bcc.n	80161be <__cvt+0xc2>
 8016180:	9b03      	ldr	r3, [sp, #12]
 8016182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016184:	1b5b      	subs	r3, r3, r5
 8016186:	4628      	mov	r0, r5
 8016188:	6013      	str	r3, [r2, #0]
 801618a:	b004      	add	sp, #16
 801618c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016194:	eb00 0904 	add.w	r9, r0, r4
 8016198:	d1e5      	bne.n	8016166 <__cvt+0x6a>
 801619a:	7803      	ldrb	r3, [r0, #0]
 801619c:	2b30      	cmp	r3, #48	@ 0x30
 801619e:	d10a      	bne.n	80161b6 <__cvt+0xba>
 80161a0:	2200      	movs	r2, #0
 80161a2:	2300      	movs	r3, #0
 80161a4:	4630      	mov	r0, r6
 80161a6:	4639      	mov	r1, r7
 80161a8:	f7ea fcbe 	bl	8000b28 <__aeabi_dcmpeq>
 80161ac:	b918      	cbnz	r0, 80161b6 <__cvt+0xba>
 80161ae:	f1c4 0401 	rsb	r4, r4, #1
 80161b2:	f8ca 4000 	str.w	r4, [sl]
 80161b6:	f8da 3000 	ldr.w	r3, [sl]
 80161ba:	4499      	add	r9, r3
 80161bc:	e7d3      	b.n	8016166 <__cvt+0x6a>
 80161be:	1c59      	adds	r1, r3, #1
 80161c0:	9103      	str	r1, [sp, #12]
 80161c2:	701a      	strb	r2, [r3, #0]
 80161c4:	e7d9      	b.n	801617a <__cvt+0x7e>

080161c6 <__exponent>:
 80161c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161c8:	2900      	cmp	r1, #0
 80161ca:	bfba      	itte	lt
 80161cc:	4249      	neglt	r1, r1
 80161ce:	232d      	movlt	r3, #45	@ 0x2d
 80161d0:	232b      	movge	r3, #43	@ 0x2b
 80161d2:	2909      	cmp	r1, #9
 80161d4:	7002      	strb	r2, [r0, #0]
 80161d6:	7043      	strb	r3, [r0, #1]
 80161d8:	dd29      	ble.n	801622e <__exponent+0x68>
 80161da:	f10d 0307 	add.w	r3, sp, #7
 80161de:	461d      	mov	r5, r3
 80161e0:	270a      	movs	r7, #10
 80161e2:	461a      	mov	r2, r3
 80161e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80161e8:	fb07 1416 	mls	r4, r7, r6, r1
 80161ec:	3430      	adds	r4, #48	@ 0x30
 80161ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80161f2:	460c      	mov	r4, r1
 80161f4:	2c63      	cmp	r4, #99	@ 0x63
 80161f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80161fa:	4631      	mov	r1, r6
 80161fc:	dcf1      	bgt.n	80161e2 <__exponent+0x1c>
 80161fe:	3130      	adds	r1, #48	@ 0x30
 8016200:	1e94      	subs	r4, r2, #2
 8016202:	f803 1c01 	strb.w	r1, [r3, #-1]
 8016206:	1c41      	adds	r1, r0, #1
 8016208:	4623      	mov	r3, r4
 801620a:	42ab      	cmp	r3, r5
 801620c:	d30a      	bcc.n	8016224 <__exponent+0x5e>
 801620e:	f10d 0309 	add.w	r3, sp, #9
 8016212:	1a9b      	subs	r3, r3, r2
 8016214:	42ac      	cmp	r4, r5
 8016216:	bf88      	it	hi
 8016218:	2300      	movhi	r3, #0
 801621a:	3302      	adds	r3, #2
 801621c:	4403      	add	r3, r0
 801621e:	1a18      	subs	r0, r3, r0
 8016220:	b003      	add	sp, #12
 8016222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016224:	f813 6b01 	ldrb.w	r6, [r3], #1
 8016228:	f801 6f01 	strb.w	r6, [r1, #1]!
 801622c:	e7ed      	b.n	801620a <__exponent+0x44>
 801622e:	2330      	movs	r3, #48	@ 0x30
 8016230:	3130      	adds	r1, #48	@ 0x30
 8016232:	7083      	strb	r3, [r0, #2]
 8016234:	70c1      	strb	r1, [r0, #3]
 8016236:	1d03      	adds	r3, r0, #4
 8016238:	e7f1      	b.n	801621e <__exponent+0x58>
	...

0801623c <_printf_float>:
 801623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016240:	b08d      	sub	sp, #52	@ 0x34
 8016242:	460c      	mov	r4, r1
 8016244:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016248:	4616      	mov	r6, r2
 801624a:	461f      	mov	r7, r3
 801624c:	4605      	mov	r5, r0
 801624e:	f000 fea7 	bl	8016fa0 <_localeconv_r>
 8016252:	6803      	ldr	r3, [r0, #0]
 8016254:	9304      	str	r3, [sp, #16]
 8016256:	4618      	mov	r0, r3
 8016258:	f7ea f83a 	bl	80002d0 <strlen>
 801625c:	2300      	movs	r3, #0
 801625e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016260:	f8d8 3000 	ldr.w	r3, [r8]
 8016264:	9005      	str	r0, [sp, #20]
 8016266:	3307      	adds	r3, #7
 8016268:	f023 0307 	bic.w	r3, r3, #7
 801626c:	f103 0208 	add.w	r2, r3, #8
 8016270:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016274:	f8d4 b000 	ldr.w	fp, [r4]
 8016278:	f8c8 2000 	str.w	r2, [r8]
 801627c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016280:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016284:	9307      	str	r3, [sp, #28]
 8016286:	f8cd 8018 	str.w	r8, [sp, #24]
 801628a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801628e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016292:	4b9c      	ldr	r3, [pc, #624]	@ (8016504 <_printf_float+0x2c8>)
 8016294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016298:	f7ea fc78 	bl	8000b8c <__aeabi_dcmpun>
 801629c:	bb70      	cbnz	r0, 80162fc <_printf_float+0xc0>
 801629e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162a2:	4b98      	ldr	r3, [pc, #608]	@ (8016504 <_printf_float+0x2c8>)
 80162a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80162a8:	f7ea fc52 	bl	8000b50 <__aeabi_dcmple>
 80162ac:	bb30      	cbnz	r0, 80162fc <_printf_float+0xc0>
 80162ae:	2200      	movs	r2, #0
 80162b0:	2300      	movs	r3, #0
 80162b2:	4640      	mov	r0, r8
 80162b4:	4649      	mov	r1, r9
 80162b6:	f7ea fc41 	bl	8000b3c <__aeabi_dcmplt>
 80162ba:	b110      	cbz	r0, 80162c2 <_printf_float+0x86>
 80162bc:	232d      	movs	r3, #45	@ 0x2d
 80162be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80162c2:	4a91      	ldr	r2, [pc, #580]	@ (8016508 <_printf_float+0x2cc>)
 80162c4:	4b91      	ldr	r3, [pc, #580]	@ (801650c <_printf_float+0x2d0>)
 80162c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80162ca:	bf94      	ite	ls
 80162cc:	4690      	movls	r8, r2
 80162ce:	4698      	movhi	r8, r3
 80162d0:	2303      	movs	r3, #3
 80162d2:	6123      	str	r3, [r4, #16]
 80162d4:	f02b 0304 	bic.w	r3, fp, #4
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	f04f 0900 	mov.w	r9, #0
 80162de:	9700      	str	r7, [sp, #0]
 80162e0:	4633      	mov	r3, r6
 80162e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80162e4:	4621      	mov	r1, r4
 80162e6:	4628      	mov	r0, r5
 80162e8:	f000 f9d2 	bl	8016690 <_printf_common>
 80162ec:	3001      	adds	r0, #1
 80162ee:	f040 808d 	bne.w	801640c <_printf_float+0x1d0>
 80162f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80162f6:	b00d      	add	sp, #52	@ 0x34
 80162f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162fc:	4642      	mov	r2, r8
 80162fe:	464b      	mov	r3, r9
 8016300:	4640      	mov	r0, r8
 8016302:	4649      	mov	r1, r9
 8016304:	f7ea fc42 	bl	8000b8c <__aeabi_dcmpun>
 8016308:	b140      	cbz	r0, 801631c <_printf_float+0xe0>
 801630a:	464b      	mov	r3, r9
 801630c:	2b00      	cmp	r3, #0
 801630e:	bfbc      	itt	lt
 8016310:	232d      	movlt	r3, #45	@ 0x2d
 8016312:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8016316:	4a7e      	ldr	r2, [pc, #504]	@ (8016510 <_printf_float+0x2d4>)
 8016318:	4b7e      	ldr	r3, [pc, #504]	@ (8016514 <_printf_float+0x2d8>)
 801631a:	e7d4      	b.n	80162c6 <_printf_float+0x8a>
 801631c:	6863      	ldr	r3, [r4, #4]
 801631e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8016322:	9206      	str	r2, [sp, #24]
 8016324:	1c5a      	adds	r2, r3, #1
 8016326:	d13b      	bne.n	80163a0 <_printf_float+0x164>
 8016328:	2306      	movs	r3, #6
 801632a:	6063      	str	r3, [r4, #4]
 801632c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8016330:	2300      	movs	r3, #0
 8016332:	6022      	str	r2, [r4, #0]
 8016334:	9303      	str	r3, [sp, #12]
 8016336:	ab0a      	add	r3, sp, #40	@ 0x28
 8016338:	e9cd a301 	strd	sl, r3, [sp, #4]
 801633c:	ab09      	add	r3, sp, #36	@ 0x24
 801633e:	9300      	str	r3, [sp, #0]
 8016340:	6861      	ldr	r1, [r4, #4]
 8016342:	ec49 8b10 	vmov	d0, r8, r9
 8016346:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801634a:	4628      	mov	r0, r5
 801634c:	f7ff fed6 	bl	80160fc <__cvt>
 8016350:	9b06      	ldr	r3, [sp, #24]
 8016352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016354:	2b47      	cmp	r3, #71	@ 0x47
 8016356:	4680      	mov	r8, r0
 8016358:	d129      	bne.n	80163ae <_printf_float+0x172>
 801635a:	1cc8      	adds	r0, r1, #3
 801635c:	db02      	blt.n	8016364 <_printf_float+0x128>
 801635e:	6863      	ldr	r3, [r4, #4]
 8016360:	4299      	cmp	r1, r3
 8016362:	dd41      	ble.n	80163e8 <_printf_float+0x1ac>
 8016364:	f1aa 0a02 	sub.w	sl, sl, #2
 8016368:	fa5f fa8a 	uxtb.w	sl, sl
 801636c:	3901      	subs	r1, #1
 801636e:	4652      	mov	r2, sl
 8016370:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016374:	9109      	str	r1, [sp, #36]	@ 0x24
 8016376:	f7ff ff26 	bl	80161c6 <__exponent>
 801637a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801637c:	1813      	adds	r3, r2, r0
 801637e:	2a01      	cmp	r2, #1
 8016380:	4681      	mov	r9, r0
 8016382:	6123      	str	r3, [r4, #16]
 8016384:	dc02      	bgt.n	801638c <_printf_float+0x150>
 8016386:	6822      	ldr	r2, [r4, #0]
 8016388:	07d2      	lsls	r2, r2, #31
 801638a:	d501      	bpl.n	8016390 <_printf_float+0x154>
 801638c:	3301      	adds	r3, #1
 801638e:	6123      	str	r3, [r4, #16]
 8016390:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016394:	2b00      	cmp	r3, #0
 8016396:	d0a2      	beq.n	80162de <_printf_float+0xa2>
 8016398:	232d      	movs	r3, #45	@ 0x2d
 801639a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801639e:	e79e      	b.n	80162de <_printf_float+0xa2>
 80163a0:	9a06      	ldr	r2, [sp, #24]
 80163a2:	2a47      	cmp	r2, #71	@ 0x47
 80163a4:	d1c2      	bne.n	801632c <_printf_float+0xf0>
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d1c0      	bne.n	801632c <_printf_float+0xf0>
 80163aa:	2301      	movs	r3, #1
 80163ac:	e7bd      	b.n	801632a <_printf_float+0xee>
 80163ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80163b2:	d9db      	bls.n	801636c <_printf_float+0x130>
 80163b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80163b8:	d118      	bne.n	80163ec <_printf_float+0x1b0>
 80163ba:	2900      	cmp	r1, #0
 80163bc:	6863      	ldr	r3, [r4, #4]
 80163be:	dd0b      	ble.n	80163d8 <_printf_float+0x19c>
 80163c0:	6121      	str	r1, [r4, #16]
 80163c2:	b913      	cbnz	r3, 80163ca <_printf_float+0x18e>
 80163c4:	6822      	ldr	r2, [r4, #0]
 80163c6:	07d0      	lsls	r0, r2, #31
 80163c8:	d502      	bpl.n	80163d0 <_printf_float+0x194>
 80163ca:	3301      	adds	r3, #1
 80163cc:	440b      	add	r3, r1
 80163ce:	6123      	str	r3, [r4, #16]
 80163d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80163d2:	f04f 0900 	mov.w	r9, #0
 80163d6:	e7db      	b.n	8016390 <_printf_float+0x154>
 80163d8:	b913      	cbnz	r3, 80163e0 <_printf_float+0x1a4>
 80163da:	6822      	ldr	r2, [r4, #0]
 80163dc:	07d2      	lsls	r2, r2, #31
 80163de:	d501      	bpl.n	80163e4 <_printf_float+0x1a8>
 80163e0:	3302      	adds	r3, #2
 80163e2:	e7f4      	b.n	80163ce <_printf_float+0x192>
 80163e4:	2301      	movs	r3, #1
 80163e6:	e7f2      	b.n	80163ce <_printf_float+0x192>
 80163e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80163ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80163ee:	4299      	cmp	r1, r3
 80163f0:	db05      	blt.n	80163fe <_printf_float+0x1c2>
 80163f2:	6823      	ldr	r3, [r4, #0]
 80163f4:	6121      	str	r1, [r4, #16]
 80163f6:	07d8      	lsls	r0, r3, #31
 80163f8:	d5ea      	bpl.n	80163d0 <_printf_float+0x194>
 80163fa:	1c4b      	adds	r3, r1, #1
 80163fc:	e7e7      	b.n	80163ce <_printf_float+0x192>
 80163fe:	2900      	cmp	r1, #0
 8016400:	bfd4      	ite	le
 8016402:	f1c1 0202 	rsble	r2, r1, #2
 8016406:	2201      	movgt	r2, #1
 8016408:	4413      	add	r3, r2
 801640a:	e7e0      	b.n	80163ce <_printf_float+0x192>
 801640c:	6823      	ldr	r3, [r4, #0]
 801640e:	055a      	lsls	r2, r3, #21
 8016410:	d407      	bmi.n	8016422 <_printf_float+0x1e6>
 8016412:	6923      	ldr	r3, [r4, #16]
 8016414:	4642      	mov	r2, r8
 8016416:	4631      	mov	r1, r6
 8016418:	4628      	mov	r0, r5
 801641a:	47b8      	blx	r7
 801641c:	3001      	adds	r0, #1
 801641e:	d12b      	bne.n	8016478 <_printf_float+0x23c>
 8016420:	e767      	b.n	80162f2 <_printf_float+0xb6>
 8016422:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8016426:	f240 80dd 	bls.w	80165e4 <_printf_float+0x3a8>
 801642a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801642e:	2200      	movs	r2, #0
 8016430:	2300      	movs	r3, #0
 8016432:	f7ea fb79 	bl	8000b28 <__aeabi_dcmpeq>
 8016436:	2800      	cmp	r0, #0
 8016438:	d033      	beq.n	80164a2 <_printf_float+0x266>
 801643a:	4a37      	ldr	r2, [pc, #220]	@ (8016518 <_printf_float+0x2dc>)
 801643c:	2301      	movs	r3, #1
 801643e:	4631      	mov	r1, r6
 8016440:	4628      	mov	r0, r5
 8016442:	47b8      	blx	r7
 8016444:	3001      	adds	r0, #1
 8016446:	f43f af54 	beq.w	80162f2 <_printf_float+0xb6>
 801644a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801644e:	4543      	cmp	r3, r8
 8016450:	db02      	blt.n	8016458 <_printf_float+0x21c>
 8016452:	6823      	ldr	r3, [r4, #0]
 8016454:	07d8      	lsls	r0, r3, #31
 8016456:	d50f      	bpl.n	8016478 <_printf_float+0x23c>
 8016458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801645c:	4631      	mov	r1, r6
 801645e:	4628      	mov	r0, r5
 8016460:	47b8      	blx	r7
 8016462:	3001      	adds	r0, #1
 8016464:	f43f af45 	beq.w	80162f2 <_printf_float+0xb6>
 8016468:	f04f 0900 	mov.w	r9, #0
 801646c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016470:	f104 0a1a 	add.w	sl, r4, #26
 8016474:	45c8      	cmp	r8, r9
 8016476:	dc09      	bgt.n	801648c <_printf_float+0x250>
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	079b      	lsls	r3, r3, #30
 801647c:	f100 8103 	bmi.w	8016686 <_printf_float+0x44a>
 8016480:	68e0      	ldr	r0, [r4, #12]
 8016482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016484:	4298      	cmp	r0, r3
 8016486:	bfb8      	it	lt
 8016488:	4618      	movlt	r0, r3
 801648a:	e734      	b.n	80162f6 <_printf_float+0xba>
 801648c:	2301      	movs	r3, #1
 801648e:	4652      	mov	r2, sl
 8016490:	4631      	mov	r1, r6
 8016492:	4628      	mov	r0, r5
 8016494:	47b8      	blx	r7
 8016496:	3001      	adds	r0, #1
 8016498:	f43f af2b 	beq.w	80162f2 <_printf_float+0xb6>
 801649c:	f109 0901 	add.w	r9, r9, #1
 80164a0:	e7e8      	b.n	8016474 <_printf_float+0x238>
 80164a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	dc39      	bgt.n	801651c <_printf_float+0x2e0>
 80164a8:	4a1b      	ldr	r2, [pc, #108]	@ (8016518 <_printf_float+0x2dc>)
 80164aa:	2301      	movs	r3, #1
 80164ac:	4631      	mov	r1, r6
 80164ae:	4628      	mov	r0, r5
 80164b0:	47b8      	blx	r7
 80164b2:	3001      	adds	r0, #1
 80164b4:	f43f af1d 	beq.w	80162f2 <_printf_float+0xb6>
 80164b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80164bc:	ea59 0303 	orrs.w	r3, r9, r3
 80164c0:	d102      	bne.n	80164c8 <_printf_float+0x28c>
 80164c2:	6823      	ldr	r3, [r4, #0]
 80164c4:	07d9      	lsls	r1, r3, #31
 80164c6:	d5d7      	bpl.n	8016478 <_printf_float+0x23c>
 80164c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164cc:	4631      	mov	r1, r6
 80164ce:	4628      	mov	r0, r5
 80164d0:	47b8      	blx	r7
 80164d2:	3001      	adds	r0, #1
 80164d4:	f43f af0d 	beq.w	80162f2 <_printf_float+0xb6>
 80164d8:	f04f 0a00 	mov.w	sl, #0
 80164dc:	f104 0b1a 	add.w	fp, r4, #26
 80164e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164e2:	425b      	negs	r3, r3
 80164e4:	4553      	cmp	r3, sl
 80164e6:	dc01      	bgt.n	80164ec <_printf_float+0x2b0>
 80164e8:	464b      	mov	r3, r9
 80164ea:	e793      	b.n	8016414 <_printf_float+0x1d8>
 80164ec:	2301      	movs	r3, #1
 80164ee:	465a      	mov	r2, fp
 80164f0:	4631      	mov	r1, r6
 80164f2:	4628      	mov	r0, r5
 80164f4:	47b8      	blx	r7
 80164f6:	3001      	adds	r0, #1
 80164f8:	f43f aefb 	beq.w	80162f2 <_printf_float+0xb6>
 80164fc:	f10a 0a01 	add.w	sl, sl, #1
 8016500:	e7ee      	b.n	80164e0 <_printf_float+0x2a4>
 8016502:	bf00      	nop
 8016504:	7fefffff 	.word	0x7fefffff
 8016508:	08019ee3 	.word	0x08019ee3
 801650c:	08019ee7 	.word	0x08019ee7
 8016510:	08019eeb 	.word	0x08019eeb
 8016514:	08019eef 	.word	0x08019eef
 8016518:	08019ef3 	.word	0x08019ef3
 801651c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801651e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8016522:	4553      	cmp	r3, sl
 8016524:	bfa8      	it	ge
 8016526:	4653      	movge	r3, sl
 8016528:	2b00      	cmp	r3, #0
 801652a:	4699      	mov	r9, r3
 801652c:	dc36      	bgt.n	801659c <_printf_float+0x360>
 801652e:	f04f 0b00 	mov.w	fp, #0
 8016532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016536:	f104 021a 	add.w	r2, r4, #26
 801653a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801653c:	9306      	str	r3, [sp, #24]
 801653e:	eba3 0309 	sub.w	r3, r3, r9
 8016542:	455b      	cmp	r3, fp
 8016544:	dc31      	bgt.n	80165aa <_printf_float+0x36e>
 8016546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016548:	459a      	cmp	sl, r3
 801654a:	dc3a      	bgt.n	80165c2 <_printf_float+0x386>
 801654c:	6823      	ldr	r3, [r4, #0]
 801654e:	07da      	lsls	r2, r3, #31
 8016550:	d437      	bmi.n	80165c2 <_printf_float+0x386>
 8016552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016554:	ebaa 0903 	sub.w	r9, sl, r3
 8016558:	9b06      	ldr	r3, [sp, #24]
 801655a:	ebaa 0303 	sub.w	r3, sl, r3
 801655e:	4599      	cmp	r9, r3
 8016560:	bfa8      	it	ge
 8016562:	4699      	movge	r9, r3
 8016564:	f1b9 0f00 	cmp.w	r9, #0
 8016568:	dc33      	bgt.n	80165d2 <_printf_float+0x396>
 801656a:	f04f 0800 	mov.w	r8, #0
 801656e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016572:	f104 0b1a 	add.w	fp, r4, #26
 8016576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016578:	ebaa 0303 	sub.w	r3, sl, r3
 801657c:	eba3 0309 	sub.w	r3, r3, r9
 8016580:	4543      	cmp	r3, r8
 8016582:	f77f af79 	ble.w	8016478 <_printf_float+0x23c>
 8016586:	2301      	movs	r3, #1
 8016588:	465a      	mov	r2, fp
 801658a:	4631      	mov	r1, r6
 801658c:	4628      	mov	r0, r5
 801658e:	47b8      	blx	r7
 8016590:	3001      	adds	r0, #1
 8016592:	f43f aeae 	beq.w	80162f2 <_printf_float+0xb6>
 8016596:	f108 0801 	add.w	r8, r8, #1
 801659a:	e7ec      	b.n	8016576 <_printf_float+0x33a>
 801659c:	4642      	mov	r2, r8
 801659e:	4631      	mov	r1, r6
 80165a0:	4628      	mov	r0, r5
 80165a2:	47b8      	blx	r7
 80165a4:	3001      	adds	r0, #1
 80165a6:	d1c2      	bne.n	801652e <_printf_float+0x2f2>
 80165a8:	e6a3      	b.n	80162f2 <_printf_float+0xb6>
 80165aa:	2301      	movs	r3, #1
 80165ac:	4631      	mov	r1, r6
 80165ae:	4628      	mov	r0, r5
 80165b0:	9206      	str	r2, [sp, #24]
 80165b2:	47b8      	blx	r7
 80165b4:	3001      	adds	r0, #1
 80165b6:	f43f ae9c 	beq.w	80162f2 <_printf_float+0xb6>
 80165ba:	9a06      	ldr	r2, [sp, #24]
 80165bc:	f10b 0b01 	add.w	fp, fp, #1
 80165c0:	e7bb      	b.n	801653a <_printf_float+0x2fe>
 80165c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165c6:	4631      	mov	r1, r6
 80165c8:	4628      	mov	r0, r5
 80165ca:	47b8      	blx	r7
 80165cc:	3001      	adds	r0, #1
 80165ce:	d1c0      	bne.n	8016552 <_printf_float+0x316>
 80165d0:	e68f      	b.n	80162f2 <_printf_float+0xb6>
 80165d2:	9a06      	ldr	r2, [sp, #24]
 80165d4:	464b      	mov	r3, r9
 80165d6:	4442      	add	r2, r8
 80165d8:	4631      	mov	r1, r6
 80165da:	4628      	mov	r0, r5
 80165dc:	47b8      	blx	r7
 80165de:	3001      	adds	r0, #1
 80165e0:	d1c3      	bne.n	801656a <_printf_float+0x32e>
 80165e2:	e686      	b.n	80162f2 <_printf_float+0xb6>
 80165e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80165e8:	f1ba 0f01 	cmp.w	sl, #1
 80165ec:	dc01      	bgt.n	80165f2 <_printf_float+0x3b6>
 80165ee:	07db      	lsls	r3, r3, #31
 80165f0:	d536      	bpl.n	8016660 <_printf_float+0x424>
 80165f2:	2301      	movs	r3, #1
 80165f4:	4642      	mov	r2, r8
 80165f6:	4631      	mov	r1, r6
 80165f8:	4628      	mov	r0, r5
 80165fa:	47b8      	blx	r7
 80165fc:	3001      	adds	r0, #1
 80165fe:	f43f ae78 	beq.w	80162f2 <_printf_float+0xb6>
 8016602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016606:	4631      	mov	r1, r6
 8016608:	4628      	mov	r0, r5
 801660a:	47b8      	blx	r7
 801660c:	3001      	adds	r0, #1
 801660e:	f43f ae70 	beq.w	80162f2 <_printf_float+0xb6>
 8016612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8016616:	2200      	movs	r2, #0
 8016618:	2300      	movs	r3, #0
 801661a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801661e:	f7ea fa83 	bl	8000b28 <__aeabi_dcmpeq>
 8016622:	b9c0      	cbnz	r0, 8016656 <_printf_float+0x41a>
 8016624:	4653      	mov	r3, sl
 8016626:	f108 0201 	add.w	r2, r8, #1
 801662a:	4631      	mov	r1, r6
 801662c:	4628      	mov	r0, r5
 801662e:	47b8      	blx	r7
 8016630:	3001      	adds	r0, #1
 8016632:	d10c      	bne.n	801664e <_printf_float+0x412>
 8016634:	e65d      	b.n	80162f2 <_printf_float+0xb6>
 8016636:	2301      	movs	r3, #1
 8016638:	465a      	mov	r2, fp
 801663a:	4631      	mov	r1, r6
 801663c:	4628      	mov	r0, r5
 801663e:	47b8      	blx	r7
 8016640:	3001      	adds	r0, #1
 8016642:	f43f ae56 	beq.w	80162f2 <_printf_float+0xb6>
 8016646:	f108 0801 	add.w	r8, r8, #1
 801664a:	45d0      	cmp	r8, sl
 801664c:	dbf3      	blt.n	8016636 <_printf_float+0x3fa>
 801664e:	464b      	mov	r3, r9
 8016650:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016654:	e6df      	b.n	8016416 <_printf_float+0x1da>
 8016656:	f04f 0800 	mov.w	r8, #0
 801665a:	f104 0b1a 	add.w	fp, r4, #26
 801665e:	e7f4      	b.n	801664a <_printf_float+0x40e>
 8016660:	2301      	movs	r3, #1
 8016662:	4642      	mov	r2, r8
 8016664:	e7e1      	b.n	801662a <_printf_float+0x3ee>
 8016666:	2301      	movs	r3, #1
 8016668:	464a      	mov	r2, r9
 801666a:	4631      	mov	r1, r6
 801666c:	4628      	mov	r0, r5
 801666e:	47b8      	blx	r7
 8016670:	3001      	adds	r0, #1
 8016672:	f43f ae3e 	beq.w	80162f2 <_printf_float+0xb6>
 8016676:	f108 0801 	add.w	r8, r8, #1
 801667a:	68e3      	ldr	r3, [r4, #12]
 801667c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801667e:	1a5b      	subs	r3, r3, r1
 8016680:	4543      	cmp	r3, r8
 8016682:	dcf0      	bgt.n	8016666 <_printf_float+0x42a>
 8016684:	e6fc      	b.n	8016480 <_printf_float+0x244>
 8016686:	f04f 0800 	mov.w	r8, #0
 801668a:	f104 0919 	add.w	r9, r4, #25
 801668e:	e7f4      	b.n	801667a <_printf_float+0x43e>

08016690 <_printf_common>:
 8016690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016694:	4616      	mov	r6, r2
 8016696:	4698      	mov	r8, r3
 8016698:	688a      	ldr	r2, [r1, #8]
 801669a:	690b      	ldr	r3, [r1, #16]
 801669c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80166a0:	4293      	cmp	r3, r2
 80166a2:	bfb8      	it	lt
 80166a4:	4613      	movlt	r3, r2
 80166a6:	6033      	str	r3, [r6, #0]
 80166a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80166ac:	4607      	mov	r7, r0
 80166ae:	460c      	mov	r4, r1
 80166b0:	b10a      	cbz	r2, 80166b6 <_printf_common+0x26>
 80166b2:	3301      	adds	r3, #1
 80166b4:	6033      	str	r3, [r6, #0]
 80166b6:	6823      	ldr	r3, [r4, #0]
 80166b8:	0699      	lsls	r1, r3, #26
 80166ba:	bf42      	ittt	mi
 80166bc:	6833      	ldrmi	r3, [r6, #0]
 80166be:	3302      	addmi	r3, #2
 80166c0:	6033      	strmi	r3, [r6, #0]
 80166c2:	6825      	ldr	r5, [r4, #0]
 80166c4:	f015 0506 	ands.w	r5, r5, #6
 80166c8:	d106      	bne.n	80166d8 <_printf_common+0x48>
 80166ca:	f104 0a19 	add.w	sl, r4, #25
 80166ce:	68e3      	ldr	r3, [r4, #12]
 80166d0:	6832      	ldr	r2, [r6, #0]
 80166d2:	1a9b      	subs	r3, r3, r2
 80166d4:	42ab      	cmp	r3, r5
 80166d6:	dc26      	bgt.n	8016726 <_printf_common+0x96>
 80166d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80166dc:	6822      	ldr	r2, [r4, #0]
 80166de:	3b00      	subs	r3, #0
 80166e0:	bf18      	it	ne
 80166e2:	2301      	movne	r3, #1
 80166e4:	0692      	lsls	r2, r2, #26
 80166e6:	d42b      	bmi.n	8016740 <_printf_common+0xb0>
 80166e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80166ec:	4641      	mov	r1, r8
 80166ee:	4638      	mov	r0, r7
 80166f0:	47c8      	blx	r9
 80166f2:	3001      	adds	r0, #1
 80166f4:	d01e      	beq.n	8016734 <_printf_common+0xa4>
 80166f6:	6823      	ldr	r3, [r4, #0]
 80166f8:	6922      	ldr	r2, [r4, #16]
 80166fa:	f003 0306 	and.w	r3, r3, #6
 80166fe:	2b04      	cmp	r3, #4
 8016700:	bf02      	ittt	eq
 8016702:	68e5      	ldreq	r5, [r4, #12]
 8016704:	6833      	ldreq	r3, [r6, #0]
 8016706:	1aed      	subeq	r5, r5, r3
 8016708:	68a3      	ldr	r3, [r4, #8]
 801670a:	bf0c      	ite	eq
 801670c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016710:	2500      	movne	r5, #0
 8016712:	4293      	cmp	r3, r2
 8016714:	bfc4      	itt	gt
 8016716:	1a9b      	subgt	r3, r3, r2
 8016718:	18ed      	addgt	r5, r5, r3
 801671a:	2600      	movs	r6, #0
 801671c:	341a      	adds	r4, #26
 801671e:	42b5      	cmp	r5, r6
 8016720:	d11a      	bne.n	8016758 <_printf_common+0xc8>
 8016722:	2000      	movs	r0, #0
 8016724:	e008      	b.n	8016738 <_printf_common+0xa8>
 8016726:	2301      	movs	r3, #1
 8016728:	4652      	mov	r2, sl
 801672a:	4641      	mov	r1, r8
 801672c:	4638      	mov	r0, r7
 801672e:	47c8      	blx	r9
 8016730:	3001      	adds	r0, #1
 8016732:	d103      	bne.n	801673c <_printf_common+0xac>
 8016734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801673c:	3501      	adds	r5, #1
 801673e:	e7c6      	b.n	80166ce <_printf_common+0x3e>
 8016740:	18e1      	adds	r1, r4, r3
 8016742:	1c5a      	adds	r2, r3, #1
 8016744:	2030      	movs	r0, #48	@ 0x30
 8016746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801674a:	4422      	add	r2, r4
 801674c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016754:	3302      	adds	r3, #2
 8016756:	e7c7      	b.n	80166e8 <_printf_common+0x58>
 8016758:	2301      	movs	r3, #1
 801675a:	4622      	mov	r2, r4
 801675c:	4641      	mov	r1, r8
 801675e:	4638      	mov	r0, r7
 8016760:	47c8      	blx	r9
 8016762:	3001      	adds	r0, #1
 8016764:	d0e6      	beq.n	8016734 <_printf_common+0xa4>
 8016766:	3601      	adds	r6, #1
 8016768:	e7d9      	b.n	801671e <_printf_common+0x8e>
	...

0801676c <_printf_i>:
 801676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016770:	7e0f      	ldrb	r7, [r1, #24]
 8016772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016774:	2f78      	cmp	r7, #120	@ 0x78
 8016776:	4691      	mov	r9, r2
 8016778:	4680      	mov	r8, r0
 801677a:	460c      	mov	r4, r1
 801677c:	469a      	mov	sl, r3
 801677e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016782:	d807      	bhi.n	8016794 <_printf_i+0x28>
 8016784:	2f62      	cmp	r7, #98	@ 0x62
 8016786:	d80a      	bhi.n	801679e <_printf_i+0x32>
 8016788:	2f00      	cmp	r7, #0
 801678a:	f000 80d2 	beq.w	8016932 <_printf_i+0x1c6>
 801678e:	2f58      	cmp	r7, #88	@ 0x58
 8016790:	f000 80b9 	beq.w	8016906 <_printf_i+0x19a>
 8016794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801679c:	e03a      	b.n	8016814 <_printf_i+0xa8>
 801679e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80167a2:	2b15      	cmp	r3, #21
 80167a4:	d8f6      	bhi.n	8016794 <_printf_i+0x28>
 80167a6:	a101      	add	r1, pc, #4	@ (adr r1, 80167ac <_printf_i+0x40>)
 80167a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167ac:	08016805 	.word	0x08016805
 80167b0:	08016819 	.word	0x08016819
 80167b4:	08016795 	.word	0x08016795
 80167b8:	08016795 	.word	0x08016795
 80167bc:	08016795 	.word	0x08016795
 80167c0:	08016795 	.word	0x08016795
 80167c4:	08016819 	.word	0x08016819
 80167c8:	08016795 	.word	0x08016795
 80167cc:	08016795 	.word	0x08016795
 80167d0:	08016795 	.word	0x08016795
 80167d4:	08016795 	.word	0x08016795
 80167d8:	08016919 	.word	0x08016919
 80167dc:	08016843 	.word	0x08016843
 80167e0:	080168d3 	.word	0x080168d3
 80167e4:	08016795 	.word	0x08016795
 80167e8:	08016795 	.word	0x08016795
 80167ec:	0801693b 	.word	0x0801693b
 80167f0:	08016795 	.word	0x08016795
 80167f4:	08016843 	.word	0x08016843
 80167f8:	08016795 	.word	0x08016795
 80167fc:	08016795 	.word	0x08016795
 8016800:	080168db 	.word	0x080168db
 8016804:	6833      	ldr	r3, [r6, #0]
 8016806:	1d1a      	adds	r2, r3, #4
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	6032      	str	r2, [r6, #0]
 801680c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016814:	2301      	movs	r3, #1
 8016816:	e09d      	b.n	8016954 <_printf_i+0x1e8>
 8016818:	6833      	ldr	r3, [r6, #0]
 801681a:	6820      	ldr	r0, [r4, #0]
 801681c:	1d19      	adds	r1, r3, #4
 801681e:	6031      	str	r1, [r6, #0]
 8016820:	0606      	lsls	r6, r0, #24
 8016822:	d501      	bpl.n	8016828 <_printf_i+0xbc>
 8016824:	681d      	ldr	r5, [r3, #0]
 8016826:	e003      	b.n	8016830 <_printf_i+0xc4>
 8016828:	0645      	lsls	r5, r0, #25
 801682a:	d5fb      	bpl.n	8016824 <_printf_i+0xb8>
 801682c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016830:	2d00      	cmp	r5, #0
 8016832:	da03      	bge.n	801683c <_printf_i+0xd0>
 8016834:	232d      	movs	r3, #45	@ 0x2d
 8016836:	426d      	negs	r5, r5
 8016838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801683c:	4859      	ldr	r0, [pc, #356]	@ (80169a4 <_printf_i+0x238>)
 801683e:	230a      	movs	r3, #10
 8016840:	e011      	b.n	8016866 <_printf_i+0xfa>
 8016842:	6821      	ldr	r1, [r4, #0]
 8016844:	6833      	ldr	r3, [r6, #0]
 8016846:	0608      	lsls	r0, r1, #24
 8016848:	f853 5b04 	ldr.w	r5, [r3], #4
 801684c:	d402      	bmi.n	8016854 <_printf_i+0xe8>
 801684e:	0649      	lsls	r1, r1, #25
 8016850:	bf48      	it	mi
 8016852:	b2ad      	uxthmi	r5, r5
 8016854:	2f6f      	cmp	r7, #111	@ 0x6f
 8016856:	4853      	ldr	r0, [pc, #332]	@ (80169a4 <_printf_i+0x238>)
 8016858:	6033      	str	r3, [r6, #0]
 801685a:	bf14      	ite	ne
 801685c:	230a      	movne	r3, #10
 801685e:	2308      	moveq	r3, #8
 8016860:	2100      	movs	r1, #0
 8016862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016866:	6866      	ldr	r6, [r4, #4]
 8016868:	60a6      	str	r6, [r4, #8]
 801686a:	2e00      	cmp	r6, #0
 801686c:	bfa2      	ittt	ge
 801686e:	6821      	ldrge	r1, [r4, #0]
 8016870:	f021 0104 	bicge.w	r1, r1, #4
 8016874:	6021      	strge	r1, [r4, #0]
 8016876:	b90d      	cbnz	r5, 801687c <_printf_i+0x110>
 8016878:	2e00      	cmp	r6, #0
 801687a:	d04b      	beq.n	8016914 <_printf_i+0x1a8>
 801687c:	4616      	mov	r6, r2
 801687e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016882:	fb03 5711 	mls	r7, r3, r1, r5
 8016886:	5dc7      	ldrb	r7, [r0, r7]
 8016888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801688c:	462f      	mov	r7, r5
 801688e:	42bb      	cmp	r3, r7
 8016890:	460d      	mov	r5, r1
 8016892:	d9f4      	bls.n	801687e <_printf_i+0x112>
 8016894:	2b08      	cmp	r3, #8
 8016896:	d10b      	bne.n	80168b0 <_printf_i+0x144>
 8016898:	6823      	ldr	r3, [r4, #0]
 801689a:	07df      	lsls	r7, r3, #31
 801689c:	d508      	bpl.n	80168b0 <_printf_i+0x144>
 801689e:	6923      	ldr	r3, [r4, #16]
 80168a0:	6861      	ldr	r1, [r4, #4]
 80168a2:	4299      	cmp	r1, r3
 80168a4:	bfde      	ittt	le
 80168a6:	2330      	movle	r3, #48	@ 0x30
 80168a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80168b0:	1b92      	subs	r2, r2, r6
 80168b2:	6122      	str	r2, [r4, #16]
 80168b4:	f8cd a000 	str.w	sl, [sp]
 80168b8:	464b      	mov	r3, r9
 80168ba:	aa03      	add	r2, sp, #12
 80168bc:	4621      	mov	r1, r4
 80168be:	4640      	mov	r0, r8
 80168c0:	f7ff fee6 	bl	8016690 <_printf_common>
 80168c4:	3001      	adds	r0, #1
 80168c6:	d14a      	bne.n	801695e <_printf_i+0x1f2>
 80168c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80168cc:	b004      	add	sp, #16
 80168ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168d2:	6823      	ldr	r3, [r4, #0]
 80168d4:	f043 0320 	orr.w	r3, r3, #32
 80168d8:	6023      	str	r3, [r4, #0]
 80168da:	4833      	ldr	r0, [pc, #204]	@ (80169a8 <_printf_i+0x23c>)
 80168dc:	2778      	movs	r7, #120	@ 0x78
 80168de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	6831      	ldr	r1, [r6, #0]
 80168e6:	061f      	lsls	r7, r3, #24
 80168e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80168ec:	d402      	bmi.n	80168f4 <_printf_i+0x188>
 80168ee:	065f      	lsls	r7, r3, #25
 80168f0:	bf48      	it	mi
 80168f2:	b2ad      	uxthmi	r5, r5
 80168f4:	6031      	str	r1, [r6, #0]
 80168f6:	07d9      	lsls	r1, r3, #31
 80168f8:	bf44      	itt	mi
 80168fa:	f043 0320 	orrmi.w	r3, r3, #32
 80168fe:	6023      	strmi	r3, [r4, #0]
 8016900:	b11d      	cbz	r5, 801690a <_printf_i+0x19e>
 8016902:	2310      	movs	r3, #16
 8016904:	e7ac      	b.n	8016860 <_printf_i+0xf4>
 8016906:	4827      	ldr	r0, [pc, #156]	@ (80169a4 <_printf_i+0x238>)
 8016908:	e7e9      	b.n	80168de <_printf_i+0x172>
 801690a:	6823      	ldr	r3, [r4, #0]
 801690c:	f023 0320 	bic.w	r3, r3, #32
 8016910:	6023      	str	r3, [r4, #0]
 8016912:	e7f6      	b.n	8016902 <_printf_i+0x196>
 8016914:	4616      	mov	r6, r2
 8016916:	e7bd      	b.n	8016894 <_printf_i+0x128>
 8016918:	6833      	ldr	r3, [r6, #0]
 801691a:	6825      	ldr	r5, [r4, #0]
 801691c:	6961      	ldr	r1, [r4, #20]
 801691e:	1d18      	adds	r0, r3, #4
 8016920:	6030      	str	r0, [r6, #0]
 8016922:	062e      	lsls	r6, r5, #24
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	d501      	bpl.n	801692c <_printf_i+0x1c0>
 8016928:	6019      	str	r1, [r3, #0]
 801692a:	e002      	b.n	8016932 <_printf_i+0x1c6>
 801692c:	0668      	lsls	r0, r5, #25
 801692e:	d5fb      	bpl.n	8016928 <_printf_i+0x1bc>
 8016930:	8019      	strh	r1, [r3, #0]
 8016932:	2300      	movs	r3, #0
 8016934:	6123      	str	r3, [r4, #16]
 8016936:	4616      	mov	r6, r2
 8016938:	e7bc      	b.n	80168b4 <_printf_i+0x148>
 801693a:	6833      	ldr	r3, [r6, #0]
 801693c:	1d1a      	adds	r2, r3, #4
 801693e:	6032      	str	r2, [r6, #0]
 8016940:	681e      	ldr	r6, [r3, #0]
 8016942:	6862      	ldr	r2, [r4, #4]
 8016944:	2100      	movs	r1, #0
 8016946:	4630      	mov	r0, r6
 8016948:	f7e9 fc72 	bl	8000230 <memchr>
 801694c:	b108      	cbz	r0, 8016952 <_printf_i+0x1e6>
 801694e:	1b80      	subs	r0, r0, r6
 8016950:	6060      	str	r0, [r4, #4]
 8016952:	6863      	ldr	r3, [r4, #4]
 8016954:	6123      	str	r3, [r4, #16]
 8016956:	2300      	movs	r3, #0
 8016958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801695c:	e7aa      	b.n	80168b4 <_printf_i+0x148>
 801695e:	6923      	ldr	r3, [r4, #16]
 8016960:	4632      	mov	r2, r6
 8016962:	4649      	mov	r1, r9
 8016964:	4640      	mov	r0, r8
 8016966:	47d0      	blx	sl
 8016968:	3001      	adds	r0, #1
 801696a:	d0ad      	beq.n	80168c8 <_printf_i+0x15c>
 801696c:	6823      	ldr	r3, [r4, #0]
 801696e:	079b      	lsls	r3, r3, #30
 8016970:	d413      	bmi.n	801699a <_printf_i+0x22e>
 8016972:	68e0      	ldr	r0, [r4, #12]
 8016974:	9b03      	ldr	r3, [sp, #12]
 8016976:	4298      	cmp	r0, r3
 8016978:	bfb8      	it	lt
 801697a:	4618      	movlt	r0, r3
 801697c:	e7a6      	b.n	80168cc <_printf_i+0x160>
 801697e:	2301      	movs	r3, #1
 8016980:	4632      	mov	r2, r6
 8016982:	4649      	mov	r1, r9
 8016984:	4640      	mov	r0, r8
 8016986:	47d0      	blx	sl
 8016988:	3001      	adds	r0, #1
 801698a:	d09d      	beq.n	80168c8 <_printf_i+0x15c>
 801698c:	3501      	adds	r5, #1
 801698e:	68e3      	ldr	r3, [r4, #12]
 8016990:	9903      	ldr	r1, [sp, #12]
 8016992:	1a5b      	subs	r3, r3, r1
 8016994:	42ab      	cmp	r3, r5
 8016996:	dcf2      	bgt.n	801697e <_printf_i+0x212>
 8016998:	e7eb      	b.n	8016972 <_printf_i+0x206>
 801699a:	2500      	movs	r5, #0
 801699c:	f104 0619 	add.w	r6, r4, #25
 80169a0:	e7f5      	b.n	801698e <_printf_i+0x222>
 80169a2:	bf00      	nop
 80169a4:	08019ef5 	.word	0x08019ef5
 80169a8:	08019f06 	.word	0x08019f06

080169ac <std>:
 80169ac:	2300      	movs	r3, #0
 80169ae:	b510      	push	{r4, lr}
 80169b0:	4604      	mov	r4, r0
 80169b2:	e9c0 3300 	strd	r3, r3, [r0]
 80169b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80169ba:	6083      	str	r3, [r0, #8]
 80169bc:	8181      	strh	r1, [r0, #12]
 80169be:	6643      	str	r3, [r0, #100]	@ 0x64
 80169c0:	81c2      	strh	r2, [r0, #14]
 80169c2:	6183      	str	r3, [r0, #24]
 80169c4:	4619      	mov	r1, r3
 80169c6:	2208      	movs	r2, #8
 80169c8:	305c      	adds	r0, #92	@ 0x5c
 80169ca:	f000 faab 	bl	8016f24 <memset>
 80169ce:	4b0d      	ldr	r3, [pc, #52]	@ (8016a04 <std+0x58>)
 80169d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80169d2:	4b0d      	ldr	r3, [pc, #52]	@ (8016a08 <std+0x5c>)
 80169d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80169d6:	4b0d      	ldr	r3, [pc, #52]	@ (8016a0c <std+0x60>)
 80169d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80169da:	4b0d      	ldr	r3, [pc, #52]	@ (8016a10 <std+0x64>)
 80169dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80169de:	4b0d      	ldr	r3, [pc, #52]	@ (8016a14 <std+0x68>)
 80169e0:	6224      	str	r4, [r4, #32]
 80169e2:	429c      	cmp	r4, r3
 80169e4:	d006      	beq.n	80169f4 <std+0x48>
 80169e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80169ea:	4294      	cmp	r4, r2
 80169ec:	d002      	beq.n	80169f4 <std+0x48>
 80169ee:	33d0      	adds	r3, #208	@ 0xd0
 80169f0:	429c      	cmp	r4, r3
 80169f2:	d105      	bne.n	8016a00 <std+0x54>
 80169f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80169f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169fc:	f000 bbaa 	b.w	8017154 <__retarget_lock_init_recursive>
 8016a00:	bd10      	pop	{r4, pc}
 8016a02:	bf00      	nop
 8016a04:	08016cb1 	.word	0x08016cb1
 8016a08:	08016cd3 	.word	0x08016cd3
 8016a0c:	08016d0b 	.word	0x08016d0b
 8016a10:	08016d2f 	.word	0x08016d2f
 8016a14:	20010d70 	.word	0x20010d70

08016a18 <stdio_exit_handler>:
 8016a18:	4a02      	ldr	r2, [pc, #8]	@ (8016a24 <stdio_exit_handler+0xc>)
 8016a1a:	4903      	ldr	r1, [pc, #12]	@ (8016a28 <stdio_exit_handler+0x10>)
 8016a1c:	4803      	ldr	r0, [pc, #12]	@ (8016a2c <stdio_exit_handler+0x14>)
 8016a1e:	f000 b869 	b.w	8016af4 <_fwalk_sglue>
 8016a22:	bf00      	nop
 8016a24:	200000bc 	.word	0x200000bc
 8016a28:	08018c5d 	.word	0x08018c5d
 8016a2c:	200000cc 	.word	0x200000cc

08016a30 <cleanup_stdio>:
 8016a30:	6841      	ldr	r1, [r0, #4]
 8016a32:	4b0c      	ldr	r3, [pc, #48]	@ (8016a64 <cleanup_stdio+0x34>)
 8016a34:	4299      	cmp	r1, r3
 8016a36:	b510      	push	{r4, lr}
 8016a38:	4604      	mov	r4, r0
 8016a3a:	d001      	beq.n	8016a40 <cleanup_stdio+0x10>
 8016a3c:	f002 f90e 	bl	8018c5c <_fflush_r>
 8016a40:	68a1      	ldr	r1, [r4, #8]
 8016a42:	4b09      	ldr	r3, [pc, #36]	@ (8016a68 <cleanup_stdio+0x38>)
 8016a44:	4299      	cmp	r1, r3
 8016a46:	d002      	beq.n	8016a4e <cleanup_stdio+0x1e>
 8016a48:	4620      	mov	r0, r4
 8016a4a:	f002 f907 	bl	8018c5c <_fflush_r>
 8016a4e:	68e1      	ldr	r1, [r4, #12]
 8016a50:	4b06      	ldr	r3, [pc, #24]	@ (8016a6c <cleanup_stdio+0x3c>)
 8016a52:	4299      	cmp	r1, r3
 8016a54:	d004      	beq.n	8016a60 <cleanup_stdio+0x30>
 8016a56:	4620      	mov	r0, r4
 8016a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a5c:	f002 b8fe 	b.w	8018c5c <_fflush_r>
 8016a60:	bd10      	pop	{r4, pc}
 8016a62:	bf00      	nop
 8016a64:	20010d70 	.word	0x20010d70
 8016a68:	20010dd8 	.word	0x20010dd8
 8016a6c:	20010e40 	.word	0x20010e40

08016a70 <global_stdio_init.part.0>:
 8016a70:	b510      	push	{r4, lr}
 8016a72:	4b0b      	ldr	r3, [pc, #44]	@ (8016aa0 <global_stdio_init.part.0+0x30>)
 8016a74:	4c0b      	ldr	r4, [pc, #44]	@ (8016aa4 <global_stdio_init.part.0+0x34>)
 8016a76:	4a0c      	ldr	r2, [pc, #48]	@ (8016aa8 <global_stdio_init.part.0+0x38>)
 8016a78:	601a      	str	r2, [r3, #0]
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	2104      	movs	r1, #4
 8016a80:	f7ff ff94 	bl	80169ac <std>
 8016a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016a88:	2201      	movs	r2, #1
 8016a8a:	2109      	movs	r1, #9
 8016a8c:	f7ff ff8e 	bl	80169ac <std>
 8016a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016a94:	2202      	movs	r2, #2
 8016a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a9a:	2112      	movs	r1, #18
 8016a9c:	f7ff bf86 	b.w	80169ac <std>
 8016aa0:	20010ea8 	.word	0x20010ea8
 8016aa4:	20010d70 	.word	0x20010d70
 8016aa8:	08016a19 	.word	0x08016a19

08016aac <__sfp_lock_acquire>:
 8016aac:	4801      	ldr	r0, [pc, #4]	@ (8016ab4 <__sfp_lock_acquire+0x8>)
 8016aae:	f000 bb52 	b.w	8017156 <__retarget_lock_acquire_recursive>
 8016ab2:	bf00      	nop
 8016ab4:	20010eb2 	.word	0x20010eb2

08016ab8 <__sfp_lock_release>:
 8016ab8:	4801      	ldr	r0, [pc, #4]	@ (8016ac0 <__sfp_lock_release+0x8>)
 8016aba:	f000 bb4d 	b.w	8017158 <__retarget_lock_release_recursive>
 8016abe:	bf00      	nop
 8016ac0:	20010eb2 	.word	0x20010eb2

08016ac4 <__sinit>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	f7ff fff0 	bl	8016aac <__sfp_lock_acquire>
 8016acc:	6a23      	ldr	r3, [r4, #32]
 8016ace:	b11b      	cbz	r3, 8016ad8 <__sinit+0x14>
 8016ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ad4:	f7ff bff0 	b.w	8016ab8 <__sfp_lock_release>
 8016ad8:	4b04      	ldr	r3, [pc, #16]	@ (8016aec <__sinit+0x28>)
 8016ada:	6223      	str	r3, [r4, #32]
 8016adc:	4b04      	ldr	r3, [pc, #16]	@ (8016af0 <__sinit+0x2c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1f5      	bne.n	8016ad0 <__sinit+0xc>
 8016ae4:	f7ff ffc4 	bl	8016a70 <global_stdio_init.part.0>
 8016ae8:	e7f2      	b.n	8016ad0 <__sinit+0xc>
 8016aea:	bf00      	nop
 8016aec:	08016a31 	.word	0x08016a31
 8016af0:	20010ea8 	.word	0x20010ea8

08016af4 <_fwalk_sglue>:
 8016af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016af8:	4607      	mov	r7, r0
 8016afa:	4688      	mov	r8, r1
 8016afc:	4614      	mov	r4, r2
 8016afe:	2600      	movs	r6, #0
 8016b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016b04:	f1b9 0901 	subs.w	r9, r9, #1
 8016b08:	d505      	bpl.n	8016b16 <_fwalk_sglue+0x22>
 8016b0a:	6824      	ldr	r4, [r4, #0]
 8016b0c:	2c00      	cmp	r4, #0
 8016b0e:	d1f7      	bne.n	8016b00 <_fwalk_sglue+0xc>
 8016b10:	4630      	mov	r0, r6
 8016b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b16:	89ab      	ldrh	r3, [r5, #12]
 8016b18:	2b01      	cmp	r3, #1
 8016b1a:	d907      	bls.n	8016b2c <_fwalk_sglue+0x38>
 8016b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b20:	3301      	adds	r3, #1
 8016b22:	d003      	beq.n	8016b2c <_fwalk_sglue+0x38>
 8016b24:	4629      	mov	r1, r5
 8016b26:	4638      	mov	r0, r7
 8016b28:	47c0      	blx	r8
 8016b2a:	4306      	orrs	r6, r0
 8016b2c:	3568      	adds	r5, #104	@ 0x68
 8016b2e:	e7e9      	b.n	8016b04 <_fwalk_sglue+0x10>

08016b30 <_fwrite_r>:
 8016b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b34:	9c08      	ldr	r4, [sp, #32]
 8016b36:	468a      	mov	sl, r1
 8016b38:	4690      	mov	r8, r2
 8016b3a:	fb02 f903 	mul.w	r9, r2, r3
 8016b3e:	4606      	mov	r6, r0
 8016b40:	b118      	cbz	r0, 8016b4a <_fwrite_r+0x1a>
 8016b42:	6a03      	ldr	r3, [r0, #32]
 8016b44:	b90b      	cbnz	r3, 8016b4a <_fwrite_r+0x1a>
 8016b46:	f7ff ffbd 	bl	8016ac4 <__sinit>
 8016b4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b4c:	07dd      	lsls	r5, r3, #31
 8016b4e:	d405      	bmi.n	8016b5c <_fwrite_r+0x2c>
 8016b50:	89a3      	ldrh	r3, [r4, #12]
 8016b52:	0598      	lsls	r0, r3, #22
 8016b54:	d402      	bmi.n	8016b5c <_fwrite_r+0x2c>
 8016b56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b58:	f000 fafd 	bl	8017156 <__retarget_lock_acquire_recursive>
 8016b5c:	89a3      	ldrh	r3, [r4, #12]
 8016b5e:	0719      	lsls	r1, r3, #28
 8016b60:	d516      	bpl.n	8016b90 <_fwrite_r+0x60>
 8016b62:	6923      	ldr	r3, [r4, #16]
 8016b64:	b1a3      	cbz	r3, 8016b90 <_fwrite_r+0x60>
 8016b66:	2500      	movs	r5, #0
 8016b68:	454d      	cmp	r5, r9
 8016b6a:	d01f      	beq.n	8016bac <_fwrite_r+0x7c>
 8016b6c:	68a7      	ldr	r7, [r4, #8]
 8016b6e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8016b72:	3f01      	subs	r7, #1
 8016b74:	2f00      	cmp	r7, #0
 8016b76:	60a7      	str	r7, [r4, #8]
 8016b78:	da04      	bge.n	8016b84 <_fwrite_r+0x54>
 8016b7a:	69a3      	ldr	r3, [r4, #24]
 8016b7c:	429f      	cmp	r7, r3
 8016b7e:	db0f      	blt.n	8016ba0 <_fwrite_r+0x70>
 8016b80:	290a      	cmp	r1, #10
 8016b82:	d00d      	beq.n	8016ba0 <_fwrite_r+0x70>
 8016b84:	6823      	ldr	r3, [r4, #0]
 8016b86:	1c5a      	adds	r2, r3, #1
 8016b88:	6022      	str	r2, [r4, #0]
 8016b8a:	7019      	strb	r1, [r3, #0]
 8016b8c:	3501      	adds	r5, #1
 8016b8e:	e7eb      	b.n	8016b68 <_fwrite_r+0x38>
 8016b90:	4621      	mov	r1, r4
 8016b92:	4630      	mov	r0, r6
 8016b94:	f000 f946 	bl	8016e24 <__swsetup_r>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	d0e4      	beq.n	8016b66 <_fwrite_r+0x36>
 8016b9c:	2500      	movs	r5, #0
 8016b9e:	e005      	b.n	8016bac <_fwrite_r+0x7c>
 8016ba0:	4622      	mov	r2, r4
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	f000 f900 	bl	8016da8 <__swbuf_r>
 8016ba8:	3001      	adds	r0, #1
 8016baa:	d1ef      	bne.n	8016b8c <_fwrite_r+0x5c>
 8016bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016bae:	07da      	lsls	r2, r3, #31
 8016bb0:	d405      	bmi.n	8016bbe <_fwrite_r+0x8e>
 8016bb2:	89a3      	ldrh	r3, [r4, #12]
 8016bb4:	059b      	lsls	r3, r3, #22
 8016bb6:	d402      	bmi.n	8016bbe <_fwrite_r+0x8e>
 8016bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bba:	f000 facd 	bl	8017158 <__retarget_lock_release_recursive>
 8016bbe:	fbb5 f0f8 	udiv	r0, r5, r8
 8016bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08016bc8 <fwrite>:
 8016bc8:	b507      	push	{r0, r1, r2, lr}
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	4613      	mov	r3, r2
 8016bce:	460a      	mov	r2, r1
 8016bd0:	4601      	mov	r1, r0
 8016bd2:	4803      	ldr	r0, [pc, #12]	@ (8016be0 <fwrite+0x18>)
 8016bd4:	6800      	ldr	r0, [r0, #0]
 8016bd6:	f7ff ffab 	bl	8016b30 <_fwrite_r>
 8016bda:	b003      	add	sp, #12
 8016bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8016be0:	200000c8 	.word	0x200000c8

08016be4 <iprintf>:
 8016be4:	b40f      	push	{r0, r1, r2, r3}
 8016be6:	b507      	push	{r0, r1, r2, lr}
 8016be8:	4906      	ldr	r1, [pc, #24]	@ (8016c04 <iprintf+0x20>)
 8016bea:	ab04      	add	r3, sp, #16
 8016bec:	6808      	ldr	r0, [r1, #0]
 8016bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bf2:	6881      	ldr	r1, [r0, #8]
 8016bf4:	9301      	str	r3, [sp, #4]
 8016bf6:	f001 fe95 	bl	8018924 <_vfiprintf_r>
 8016bfa:	b003      	add	sp, #12
 8016bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c00:	b004      	add	sp, #16
 8016c02:	4770      	bx	lr
 8016c04:	200000c8 	.word	0x200000c8

08016c08 <sniprintf>:
 8016c08:	b40c      	push	{r2, r3}
 8016c0a:	b530      	push	{r4, r5, lr}
 8016c0c:	4b17      	ldr	r3, [pc, #92]	@ (8016c6c <sniprintf+0x64>)
 8016c0e:	1e0c      	subs	r4, r1, #0
 8016c10:	681d      	ldr	r5, [r3, #0]
 8016c12:	b09d      	sub	sp, #116	@ 0x74
 8016c14:	da08      	bge.n	8016c28 <sniprintf+0x20>
 8016c16:	238b      	movs	r3, #139	@ 0x8b
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c1e:	b01d      	add	sp, #116	@ 0x74
 8016c20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c24:	b002      	add	sp, #8
 8016c26:	4770      	bx	lr
 8016c28:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016c30:	bf14      	ite	ne
 8016c32:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016c36:	4623      	moveq	r3, r4
 8016c38:	9304      	str	r3, [sp, #16]
 8016c3a:	9307      	str	r3, [sp, #28]
 8016c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016c40:	9002      	str	r0, [sp, #8]
 8016c42:	9006      	str	r0, [sp, #24]
 8016c44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c48:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016c4a:	ab21      	add	r3, sp, #132	@ 0x84
 8016c4c:	a902      	add	r1, sp, #8
 8016c4e:	4628      	mov	r0, r5
 8016c50:	9301      	str	r3, [sp, #4]
 8016c52:	f001 fd41 	bl	80186d8 <_svfiprintf_r>
 8016c56:	1c43      	adds	r3, r0, #1
 8016c58:	bfbc      	itt	lt
 8016c5a:	238b      	movlt	r3, #139	@ 0x8b
 8016c5c:	602b      	strlt	r3, [r5, #0]
 8016c5e:	2c00      	cmp	r4, #0
 8016c60:	d0dd      	beq.n	8016c1e <sniprintf+0x16>
 8016c62:	9b02      	ldr	r3, [sp, #8]
 8016c64:	2200      	movs	r2, #0
 8016c66:	701a      	strb	r2, [r3, #0]
 8016c68:	e7d9      	b.n	8016c1e <sniprintf+0x16>
 8016c6a:	bf00      	nop
 8016c6c:	200000c8 	.word	0x200000c8

08016c70 <siprintf>:
 8016c70:	b40e      	push	{r1, r2, r3}
 8016c72:	b500      	push	{lr}
 8016c74:	b09c      	sub	sp, #112	@ 0x70
 8016c76:	ab1d      	add	r3, sp, #116	@ 0x74
 8016c78:	9002      	str	r0, [sp, #8]
 8016c7a:	9006      	str	r0, [sp, #24]
 8016c7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016c80:	4809      	ldr	r0, [pc, #36]	@ (8016ca8 <siprintf+0x38>)
 8016c82:	9107      	str	r1, [sp, #28]
 8016c84:	9104      	str	r1, [sp, #16]
 8016c86:	4909      	ldr	r1, [pc, #36]	@ (8016cac <siprintf+0x3c>)
 8016c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c8c:	9105      	str	r1, [sp, #20]
 8016c8e:	6800      	ldr	r0, [r0, #0]
 8016c90:	9301      	str	r3, [sp, #4]
 8016c92:	a902      	add	r1, sp, #8
 8016c94:	f001 fd20 	bl	80186d8 <_svfiprintf_r>
 8016c98:	9b02      	ldr	r3, [sp, #8]
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	701a      	strb	r2, [r3, #0]
 8016c9e:	b01c      	add	sp, #112	@ 0x70
 8016ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ca4:	b003      	add	sp, #12
 8016ca6:	4770      	bx	lr
 8016ca8:	200000c8 	.word	0x200000c8
 8016cac:	ffff0208 	.word	0xffff0208

08016cb0 <__sread>:
 8016cb0:	b510      	push	{r4, lr}
 8016cb2:	460c      	mov	r4, r1
 8016cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cb8:	f000 f9ee 	bl	8017098 <_read_r>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	bfab      	itete	ge
 8016cc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8016cc4:	181b      	addge	r3, r3, r0
 8016cc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016cca:	bfac      	ite	ge
 8016ccc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016cce:	81a3      	strhlt	r3, [r4, #12]
 8016cd0:	bd10      	pop	{r4, pc}

08016cd2 <__swrite>:
 8016cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd6:	461f      	mov	r7, r3
 8016cd8:	898b      	ldrh	r3, [r1, #12]
 8016cda:	05db      	lsls	r3, r3, #23
 8016cdc:	4605      	mov	r5, r0
 8016cde:	460c      	mov	r4, r1
 8016ce0:	4616      	mov	r6, r2
 8016ce2:	d505      	bpl.n	8016cf0 <__swrite+0x1e>
 8016ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ce8:	2302      	movs	r3, #2
 8016cea:	2200      	movs	r2, #0
 8016cec:	f000 f9c2 	bl	8017074 <_lseek_r>
 8016cf0:	89a3      	ldrh	r3, [r4, #12]
 8016cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016cfa:	81a3      	strh	r3, [r4, #12]
 8016cfc:	4632      	mov	r2, r6
 8016cfe:	463b      	mov	r3, r7
 8016d00:	4628      	mov	r0, r5
 8016d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d06:	f000 b9e9 	b.w	80170dc <_write_r>

08016d0a <__sseek>:
 8016d0a:	b510      	push	{r4, lr}
 8016d0c:	460c      	mov	r4, r1
 8016d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d12:	f000 f9af 	bl	8017074 <_lseek_r>
 8016d16:	1c43      	adds	r3, r0, #1
 8016d18:	89a3      	ldrh	r3, [r4, #12]
 8016d1a:	bf15      	itete	ne
 8016d1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016d1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016d22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016d26:	81a3      	strheq	r3, [r4, #12]
 8016d28:	bf18      	it	ne
 8016d2a:	81a3      	strhne	r3, [r4, #12]
 8016d2c:	bd10      	pop	{r4, pc}

08016d2e <__sclose>:
 8016d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d32:	f000 b939 	b.w	8016fa8 <_close_r>

08016d36 <_vsniprintf_r>:
 8016d36:	b530      	push	{r4, r5, lr}
 8016d38:	4614      	mov	r4, r2
 8016d3a:	2c00      	cmp	r4, #0
 8016d3c:	b09b      	sub	sp, #108	@ 0x6c
 8016d3e:	4605      	mov	r5, r0
 8016d40:	461a      	mov	r2, r3
 8016d42:	da05      	bge.n	8016d50 <_vsniprintf_r+0x1a>
 8016d44:	238b      	movs	r3, #139	@ 0x8b
 8016d46:	6003      	str	r3, [r0, #0]
 8016d48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016d4c:	b01b      	add	sp, #108	@ 0x6c
 8016d4e:	bd30      	pop	{r4, r5, pc}
 8016d50:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016d54:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016d58:	bf14      	ite	ne
 8016d5a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016d5e:	4623      	moveq	r3, r4
 8016d60:	9302      	str	r3, [sp, #8]
 8016d62:	9305      	str	r3, [sp, #20]
 8016d64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016d68:	9100      	str	r1, [sp, #0]
 8016d6a:	9104      	str	r1, [sp, #16]
 8016d6c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016d70:	4669      	mov	r1, sp
 8016d72:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016d74:	f001 fcb0 	bl	80186d8 <_svfiprintf_r>
 8016d78:	1c43      	adds	r3, r0, #1
 8016d7a:	bfbc      	itt	lt
 8016d7c:	238b      	movlt	r3, #139	@ 0x8b
 8016d7e:	602b      	strlt	r3, [r5, #0]
 8016d80:	2c00      	cmp	r4, #0
 8016d82:	d0e3      	beq.n	8016d4c <_vsniprintf_r+0x16>
 8016d84:	9b00      	ldr	r3, [sp, #0]
 8016d86:	2200      	movs	r2, #0
 8016d88:	701a      	strb	r2, [r3, #0]
 8016d8a:	e7df      	b.n	8016d4c <_vsniprintf_r+0x16>

08016d8c <vsniprintf>:
 8016d8c:	b507      	push	{r0, r1, r2, lr}
 8016d8e:	9300      	str	r3, [sp, #0]
 8016d90:	4613      	mov	r3, r2
 8016d92:	460a      	mov	r2, r1
 8016d94:	4601      	mov	r1, r0
 8016d96:	4803      	ldr	r0, [pc, #12]	@ (8016da4 <vsniprintf+0x18>)
 8016d98:	6800      	ldr	r0, [r0, #0]
 8016d9a:	f7ff ffcc 	bl	8016d36 <_vsniprintf_r>
 8016d9e:	b003      	add	sp, #12
 8016da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016da4:	200000c8 	.word	0x200000c8

08016da8 <__swbuf_r>:
 8016da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016daa:	460e      	mov	r6, r1
 8016dac:	4614      	mov	r4, r2
 8016dae:	4605      	mov	r5, r0
 8016db0:	b118      	cbz	r0, 8016dba <__swbuf_r+0x12>
 8016db2:	6a03      	ldr	r3, [r0, #32]
 8016db4:	b90b      	cbnz	r3, 8016dba <__swbuf_r+0x12>
 8016db6:	f7ff fe85 	bl	8016ac4 <__sinit>
 8016dba:	69a3      	ldr	r3, [r4, #24]
 8016dbc:	60a3      	str	r3, [r4, #8]
 8016dbe:	89a3      	ldrh	r3, [r4, #12]
 8016dc0:	071a      	lsls	r2, r3, #28
 8016dc2:	d501      	bpl.n	8016dc8 <__swbuf_r+0x20>
 8016dc4:	6923      	ldr	r3, [r4, #16]
 8016dc6:	b943      	cbnz	r3, 8016dda <__swbuf_r+0x32>
 8016dc8:	4621      	mov	r1, r4
 8016dca:	4628      	mov	r0, r5
 8016dcc:	f000 f82a 	bl	8016e24 <__swsetup_r>
 8016dd0:	b118      	cbz	r0, 8016dda <__swbuf_r+0x32>
 8016dd2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8016dd6:	4638      	mov	r0, r7
 8016dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dda:	6823      	ldr	r3, [r4, #0]
 8016ddc:	6922      	ldr	r2, [r4, #16]
 8016dde:	1a98      	subs	r0, r3, r2
 8016de0:	6963      	ldr	r3, [r4, #20]
 8016de2:	b2f6      	uxtb	r6, r6
 8016de4:	4283      	cmp	r3, r0
 8016de6:	4637      	mov	r7, r6
 8016de8:	dc05      	bgt.n	8016df6 <__swbuf_r+0x4e>
 8016dea:	4621      	mov	r1, r4
 8016dec:	4628      	mov	r0, r5
 8016dee:	f001 ff35 	bl	8018c5c <_fflush_r>
 8016df2:	2800      	cmp	r0, #0
 8016df4:	d1ed      	bne.n	8016dd2 <__swbuf_r+0x2a>
 8016df6:	68a3      	ldr	r3, [r4, #8]
 8016df8:	3b01      	subs	r3, #1
 8016dfa:	60a3      	str	r3, [r4, #8]
 8016dfc:	6823      	ldr	r3, [r4, #0]
 8016dfe:	1c5a      	adds	r2, r3, #1
 8016e00:	6022      	str	r2, [r4, #0]
 8016e02:	701e      	strb	r6, [r3, #0]
 8016e04:	6962      	ldr	r2, [r4, #20]
 8016e06:	1c43      	adds	r3, r0, #1
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d004      	beq.n	8016e16 <__swbuf_r+0x6e>
 8016e0c:	89a3      	ldrh	r3, [r4, #12]
 8016e0e:	07db      	lsls	r3, r3, #31
 8016e10:	d5e1      	bpl.n	8016dd6 <__swbuf_r+0x2e>
 8016e12:	2e0a      	cmp	r6, #10
 8016e14:	d1df      	bne.n	8016dd6 <__swbuf_r+0x2e>
 8016e16:	4621      	mov	r1, r4
 8016e18:	4628      	mov	r0, r5
 8016e1a:	f001 ff1f 	bl	8018c5c <_fflush_r>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	d0d9      	beq.n	8016dd6 <__swbuf_r+0x2e>
 8016e22:	e7d6      	b.n	8016dd2 <__swbuf_r+0x2a>

08016e24 <__swsetup_r>:
 8016e24:	b538      	push	{r3, r4, r5, lr}
 8016e26:	4b29      	ldr	r3, [pc, #164]	@ (8016ecc <__swsetup_r+0xa8>)
 8016e28:	4605      	mov	r5, r0
 8016e2a:	6818      	ldr	r0, [r3, #0]
 8016e2c:	460c      	mov	r4, r1
 8016e2e:	b118      	cbz	r0, 8016e38 <__swsetup_r+0x14>
 8016e30:	6a03      	ldr	r3, [r0, #32]
 8016e32:	b90b      	cbnz	r3, 8016e38 <__swsetup_r+0x14>
 8016e34:	f7ff fe46 	bl	8016ac4 <__sinit>
 8016e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016e3c:	0719      	lsls	r1, r3, #28
 8016e3e:	d422      	bmi.n	8016e86 <__swsetup_r+0x62>
 8016e40:	06da      	lsls	r2, r3, #27
 8016e42:	d407      	bmi.n	8016e54 <__swsetup_r+0x30>
 8016e44:	2209      	movs	r2, #9
 8016e46:	602a      	str	r2, [r5, #0]
 8016e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016e4c:	81a3      	strh	r3, [r4, #12]
 8016e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e52:	e033      	b.n	8016ebc <__swsetup_r+0x98>
 8016e54:	0758      	lsls	r0, r3, #29
 8016e56:	d512      	bpl.n	8016e7e <__swsetup_r+0x5a>
 8016e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016e5a:	b141      	cbz	r1, 8016e6e <__swsetup_r+0x4a>
 8016e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016e60:	4299      	cmp	r1, r3
 8016e62:	d002      	beq.n	8016e6a <__swsetup_r+0x46>
 8016e64:	4628      	mov	r0, r5
 8016e66:	f001 f807 	bl	8017e78 <_free_r>
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016e6e:	89a3      	ldrh	r3, [r4, #12]
 8016e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016e74:	81a3      	strh	r3, [r4, #12]
 8016e76:	2300      	movs	r3, #0
 8016e78:	6063      	str	r3, [r4, #4]
 8016e7a:	6923      	ldr	r3, [r4, #16]
 8016e7c:	6023      	str	r3, [r4, #0]
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	f043 0308 	orr.w	r3, r3, #8
 8016e84:	81a3      	strh	r3, [r4, #12]
 8016e86:	6923      	ldr	r3, [r4, #16]
 8016e88:	b94b      	cbnz	r3, 8016e9e <__swsetup_r+0x7a>
 8016e8a:	89a3      	ldrh	r3, [r4, #12]
 8016e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016e94:	d003      	beq.n	8016e9e <__swsetup_r+0x7a>
 8016e96:	4621      	mov	r1, r4
 8016e98:	4628      	mov	r0, r5
 8016e9a:	f001 ff3f 	bl	8018d1c <__smakebuf_r>
 8016e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ea2:	f013 0201 	ands.w	r2, r3, #1
 8016ea6:	d00a      	beq.n	8016ebe <__swsetup_r+0x9a>
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	60a2      	str	r2, [r4, #8]
 8016eac:	6962      	ldr	r2, [r4, #20]
 8016eae:	4252      	negs	r2, r2
 8016eb0:	61a2      	str	r2, [r4, #24]
 8016eb2:	6922      	ldr	r2, [r4, #16]
 8016eb4:	b942      	cbnz	r2, 8016ec8 <__swsetup_r+0xa4>
 8016eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016eba:	d1c5      	bne.n	8016e48 <__swsetup_r+0x24>
 8016ebc:	bd38      	pop	{r3, r4, r5, pc}
 8016ebe:	0799      	lsls	r1, r3, #30
 8016ec0:	bf58      	it	pl
 8016ec2:	6962      	ldrpl	r2, [r4, #20]
 8016ec4:	60a2      	str	r2, [r4, #8]
 8016ec6:	e7f4      	b.n	8016eb2 <__swsetup_r+0x8e>
 8016ec8:	2000      	movs	r0, #0
 8016eca:	e7f7      	b.n	8016ebc <__swsetup_r+0x98>
 8016ecc:	200000c8 	.word	0x200000c8

08016ed0 <memcmp>:
 8016ed0:	b510      	push	{r4, lr}
 8016ed2:	3901      	subs	r1, #1
 8016ed4:	4402      	add	r2, r0
 8016ed6:	4290      	cmp	r0, r2
 8016ed8:	d101      	bne.n	8016ede <memcmp+0xe>
 8016eda:	2000      	movs	r0, #0
 8016edc:	e005      	b.n	8016eea <memcmp+0x1a>
 8016ede:	7803      	ldrb	r3, [r0, #0]
 8016ee0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ee4:	42a3      	cmp	r3, r4
 8016ee6:	d001      	beq.n	8016eec <memcmp+0x1c>
 8016ee8:	1b18      	subs	r0, r3, r4
 8016eea:	bd10      	pop	{r4, pc}
 8016eec:	3001      	adds	r0, #1
 8016eee:	e7f2      	b.n	8016ed6 <memcmp+0x6>

08016ef0 <memmove>:
 8016ef0:	4288      	cmp	r0, r1
 8016ef2:	b510      	push	{r4, lr}
 8016ef4:	eb01 0402 	add.w	r4, r1, r2
 8016ef8:	d902      	bls.n	8016f00 <memmove+0x10>
 8016efa:	4284      	cmp	r4, r0
 8016efc:	4623      	mov	r3, r4
 8016efe:	d807      	bhi.n	8016f10 <memmove+0x20>
 8016f00:	1e43      	subs	r3, r0, #1
 8016f02:	42a1      	cmp	r1, r4
 8016f04:	d008      	beq.n	8016f18 <memmove+0x28>
 8016f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f0e:	e7f8      	b.n	8016f02 <memmove+0x12>
 8016f10:	4402      	add	r2, r0
 8016f12:	4601      	mov	r1, r0
 8016f14:	428a      	cmp	r2, r1
 8016f16:	d100      	bne.n	8016f1a <memmove+0x2a>
 8016f18:	bd10      	pop	{r4, pc}
 8016f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f22:	e7f7      	b.n	8016f14 <memmove+0x24>

08016f24 <memset>:
 8016f24:	4402      	add	r2, r0
 8016f26:	4603      	mov	r3, r0
 8016f28:	4293      	cmp	r3, r2
 8016f2a:	d100      	bne.n	8016f2e <memset+0xa>
 8016f2c:	4770      	bx	lr
 8016f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8016f32:	e7f9      	b.n	8016f28 <memset+0x4>

08016f34 <strchr>:
 8016f34:	b2c9      	uxtb	r1, r1
 8016f36:	4603      	mov	r3, r0
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f3e:	b112      	cbz	r2, 8016f46 <strchr+0x12>
 8016f40:	428a      	cmp	r2, r1
 8016f42:	d1f9      	bne.n	8016f38 <strchr+0x4>
 8016f44:	4770      	bx	lr
 8016f46:	2900      	cmp	r1, #0
 8016f48:	bf18      	it	ne
 8016f4a:	2000      	movne	r0, #0
 8016f4c:	4770      	bx	lr

08016f4e <strncmp>:
 8016f4e:	b510      	push	{r4, lr}
 8016f50:	b16a      	cbz	r2, 8016f6e <strncmp+0x20>
 8016f52:	3901      	subs	r1, #1
 8016f54:	1884      	adds	r4, r0, r2
 8016f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f5a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d103      	bne.n	8016f6a <strncmp+0x1c>
 8016f62:	42a0      	cmp	r0, r4
 8016f64:	d001      	beq.n	8016f6a <strncmp+0x1c>
 8016f66:	2a00      	cmp	r2, #0
 8016f68:	d1f5      	bne.n	8016f56 <strncmp+0x8>
 8016f6a:	1ad0      	subs	r0, r2, r3
 8016f6c:	bd10      	pop	{r4, pc}
 8016f6e:	4610      	mov	r0, r2
 8016f70:	e7fc      	b.n	8016f6c <strncmp+0x1e>

08016f72 <strstr>:
 8016f72:	780a      	ldrb	r2, [r1, #0]
 8016f74:	b570      	push	{r4, r5, r6, lr}
 8016f76:	b96a      	cbnz	r2, 8016f94 <strstr+0x22>
 8016f78:	bd70      	pop	{r4, r5, r6, pc}
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d109      	bne.n	8016f92 <strstr+0x20>
 8016f7e:	460c      	mov	r4, r1
 8016f80:	4605      	mov	r5, r0
 8016f82:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d0f6      	beq.n	8016f78 <strstr+0x6>
 8016f8a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8016f8e:	429e      	cmp	r6, r3
 8016f90:	d0f7      	beq.n	8016f82 <strstr+0x10>
 8016f92:	3001      	adds	r0, #1
 8016f94:	7803      	ldrb	r3, [r0, #0]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d1ef      	bne.n	8016f7a <strstr+0x8>
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	e7ec      	b.n	8016f78 <strstr+0x6>
	...

08016fa0 <_localeconv_r>:
 8016fa0:	4800      	ldr	r0, [pc, #0]	@ (8016fa4 <_localeconv_r+0x4>)
 8016fa2:	4770      	bx	lr
 8016fa4:	20000208 	.word	0x20000208

08016fa8 <_close_r>:
 8016fa8:	b538      	push	{r3, r4, r5, lr}
 8016faa:	4d06      	ldr	r5, [pc, #24]	@ (8016fc4 <_close_r+0x1c>)
 8016fac:	2300      	movs	r3, #0
 8016fae:	4604      	mov	r4, r0
 8016fb0:	4608      	mov	r0, r1
 8016fb2:	602b      	str	r3, [r5, #0]
 8016fb4:	f7eb fbfa 	bl	80027ac <_close>
 8016fb8:	1c43      	adds	r3, r0, #1
 8016fba:	d102      	bne.n	8016fc2 <_close_r+0x1a>
 8016fbc:	682b      	ldr	r3, [r5, #0]
 8016fbe:	b103      	cbz	r3, 8016fc2 <_close_r+0x1a>
 8016fc0:	6023      	str	r3, [r4, #0]
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	20010eac 	.word	0x20010eac

08016fc8 <_reclaim_reent>:
 8016fc8:	4b29      	ldr	r3, [pc, #164]	@ (8017070 <_reclaim_reent+0xa8>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	4283      	cmp	r3, r0
 8016fce:	b570      	push	{r4, r5, r6, lr}
 8016fd0:	4604      	mov	r4, r0
 8016fd2:	d04b      	beq.n	801706c <_reclaim_reent+0xa4>
 8016fd4:	69c3      	ldr	r3, [r0, #28]
 8016fd6:	b1ab      	cbz	r3, 8017004 <_reclaim_reent+0x3c>
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	b16b      	cbz	r3, 8016ff8 <_reclaim_reent+0x30>
 8016fdc:	2500      	movs	r5, #0
 8016fde:	69e3      	ldr	r3, [r4, #28]
 8016fe0:	68db      	ldr	r3, [r3, #12]
 8016fe2:	5959      	ldr	r1, [r3, r5]
 8016fe4:	2900      	cmp	r1, #0
 8016fe6:	d13b      	bne.n	8017060 <_reclaim_reent+0x98>
 8016fe8:	3504      	adds	r5, #4
 8016fea:	2d80      	cmp	r5, #128	@ 0x80
 8016fec:	d1f7      	bne.n	8016fde <_reclaim_reent+0x16>
 8016fee:	69e3      	ldr	r3, [r4, #28]
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	68d9      	ldr	r1, [r3, #12]
 8016ff4:	f000 ff40 	bl	8017e78 <_free_r>
 8016ff8:	69e3      	ldr	r3, [r4, #28]
 8016ffa:	6819      	ldr	r1, [r3, #0]
 8016ffc:	b111      	cbz	r1, 8017004 <_reclaim_reent+0x3c>
 8016ffe:	4620      	mov	r0, r4
 8017000:	f000 ff3a 	bl	8017e78 <_free_r>
 8017004:	6961      	ldr	r1, [r4, #20]
 8017006:	b111      	cbz	r1, 801700e <_reclaim_reent+0x46>
 8017008:	4620      	mov	r0, r4
 801700a:	f000 ff35 	bl	8017e78 <_free_r>
 801700e:	69e1      	ldr	r1, [r4, #28]
 8017010:	b111      	cbz	r1, 8017018 <_reclaim_reent+0x50>
 8017012:	4620      	mov	r0, r4
 8017014:	f000 ff30 	bl	8017e78 <_free_r>
 8017018:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801701a:	b111      	cbz	r1, 8017022 <_reclaim_reent+0x5a>
 801701c:	4620      	mov	r0, r4
 801701e:	f000 ff2b 	bl	8017e78 <_free_r>
 8017022:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017024:	b111      	cbz	r1, 801702c <_reclaim_reent+0x64>
 8017026:	4620      	mov	r0, r4
 8017028:	f000 ff26 	bl	8017e78 <_free_r>
 801702c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801702e:	b111      	cbz	r1, 8017036 <_reclaim_reent+0x6e>
 8017030:	4620      	mov	r0, r4
 8017032:	f000 ff21 	bl	8017e78 <_free_r>
 8017036:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017038:	b111      	cbz	r1, 8017040 <_reclaim_reent+0x78>
 801703a:	4620      	mov	r0, r4
 801703c:	f000 ff1c 	bl	8017e78 <_free_r>
 8017040:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017042:	b111      	cbz	r1, 801704a <_reclaim_reent+0x82>
 8017044:	4620      	mov	r0, r4
 8017046:	f000 ff17 	bl	8017e78 <_free_r>
 801704a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801704c:	b111      	cbz	r1, 8017054 <_reclaim_reent+0x8c>
 801704e:	4620      	mov	r0, r4
 8017050:	f000 ff12 	bl	8017e78 <_free_r>
 8017054:	6a23      	ldr	r3, [r4, #32]
 8017056:	b14b      	cbz	r3, 801706c <_reclaim_reent+0xa4>
 8017058:	4620      	mov	r0, r4
 801705a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801705e:	4718      	bx	r3
 8017060:	680e      	ldr	r6, [r1, #0]
 8017062:	4620      	mov	r0, r4
 8017064:	f000 ff08 	bl	8017e78 <_free_r>
 8017068:	4631      	mov	r1, r6
 801706a:	e7bb      	b.n	8016fe4 <_reclaim_reent+0x1c>
 801706c:	bd70      	pop	{r4, r5, r6, pc}
 801706e:	bf00      	nop
 8017070:	200000c8 	.word	0x200000c8

08017074 <_lseek_r>:
 8017074:	b538      	push	{r3, r4, r5, lr}
 8017076:	4d07      	ldr	r5, [pc, #28]	@ (8017094 <_lseek_r+0x20>)
 8017078:	4604      	mov	r4, r0
 801707a:	4608      	mov	r0, r1
 801707c:	4611      	mov	r1, r2
 801707e:	2200      	movs	r2, #0
 8017080:	602a      	str	r2, [r5, #0]
 8017082:	461a      	mov	r2, r3
 8017084:	f7eb fbb9 	bl	80027fa <_lseek>
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	d102      	bne.n	8017092 <_lseek_r+0x1e>
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	b103      	cbz	r3, 8017092 <_lseek_r+0x1e>
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	20010eac 	.word	0x20010eac

08017098 <_read_r>:
 8017098:	b538      	push	{r3, r4, r5, lr}
 801709a:	4d07      	ldr	r5, [pc, #28]	@ (80170b8 <_read_r+0x20>)
 801709c:	4604      	mov	r4, r0
 801709e:	4608      	mov	r0, r1
 80170a0:	4611      	mov	r1, r2
 80170a2:	2200      	movs	r2, #0
 80170a4:	602a      	str	r2, [r5, #0]
 80170a6:	461a      	mov	r2, r3
 80170a8:	f7eb fb47 	bl	800273a <_read>
 80170ac:	1c43      	adds	r3, r0, #1
 80170ae:	d102      	bne.n	80170b6 <_read_r+0x1e>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	b103      	cbz	r3, 80170b6 <_read_r+0x1e>
 80170b4:	6023      	str	r3, [r4, #0]
 80170b6:	bd38      	pop	{r3, r4, r5, pc}
 80170b8:	20010eac 	.word	0x20010eac

080170bc <_sbrk_r>:
 80170bc:	b538      	push	{r3, r4, r5, lr}
 80170be:	4d06      	ldr	r5, [pc, #24]	@ (80170d8 <_sbrk_r+0x1c>)
 80170c0:	2300      	movs	r3, #0
 80170c2:	4604      	mov	r4, r0
 80170c4:	4608      	mov	r0, r1
 80170c6:	602b      	str	r3, [r5, #0]
 80170c8:	f7eb fba4 	bl	8002814 <_sbrk>
 80170cc:	1c43      	adds	r3, r0, #1
 80170ce:	d102      	bne.n	80170d6 <_sbrk_r+0x1a>
 80170d0:	682b      	ldr	r3, [r5, #0]
 80170d2:	b103      	cbz	r3, 80170d6 <_sbrk_r+0x1a>
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	bd38      	pop	{r3, r4, r5, pc}
 80170d8:	20010eac 	.word	0x20010eac

080170dc <_write_r>:
 80170dc:	b538      	push	{r3, r4, r5, lr}
 80170de:	4d07      	ldr	r5, [pc, #28]	@ (80170fc <_write_r+0x20>)
 80170e0:	4604      	mov	r4, r0
 80170e2:	4608      	mov	r0, r1
 80170e4:	4611      	mov	r1, r2
 80170e6:	2200      	movs	r2, #0
 80170e8:	602a      	str	r2, [r5, #0]
 80170ea:	461a      	mov	r2, r3
 80170ec:	f7eb fb42 	bl	8002774 <_write>
 80170f0:	1c43      	adds	r3, r0, #1
 80170f2:	d102      	bne.n	80170fa <_write_r+0x1e>
 80170f4:	682b      	ldr	r3, [r5, #0]
 80170f6:	b103      	cbz	r3, 80170fa <_write_r+0x1e>
 80170f8:	6023      	str	r3, [r4, #0]
 80170fa:	bd38      	pop	{r3, r4, r5, pc}
 80170fc:	20010eac 	.word	0x20010eac

08017100 <__errno>:
 8017100:	4b01      	ldr	r3, [pc, #4]	@ (8017108 <__errno+0x8>)
 8017102:	6818      	ldr	r0, [r3, #0]
 8017104:	4770      	bx	lr
 8017106:	bf00      	nop
 8017108:	200000c8 	.word	0x200000c8

0801710c <__libc_init_array>:
 801710c:	b570      	push	{r4, r5, r6, lr}
 801710e:	4d0d      	ldr	r5, [pc, #52]	@ (8017144 <__libc_init_array+0x38>)
 8017110:	4c0d      	ldr	r4, [pc, #52]	@ (8017148 <__libc_init_array+0x3c>)
 8017112:	1b64      	subs	r4, r4, r5
 8017114:	10a4      	asrs	r4, r4, #2
 8017116:	2600      	movs	r6, #0
 8017118:	42a6      	cmp	r6, r4
 801711a:	d109      	bne.n	8017130 <__libc_init_array+0x24>
 801711c:	4d0b      	ldr	r5, [pc, #44]	@ (801714c <__libc_init_array+0x40>)
 801711e:	4c0c      	ldr	r4, [pc, #48]	@ (8017150 <__libc_init_array+0x44>)
 8017120:	f001 fec4 	bl	8018eac <_init>
 8017124:	1b64      	subs	r4, r4, r5
 8017126:	10a4      	asrs	r4, r4, #2
 8017128:	2600      	movs	r6, #0
 801712a:	42a6      	cmp	r6, r4
 801712c:	d105      	bne.n	801713a <__libc_init_array+0x2e>
 801712e:	bd70      	pop	{r4, r5, r6, pc}
 8017130:	f855 3b04 	ldr.w	r3, [r5], #4
 8017134:	4798      	blx	r3
 8017136:	3601      	adds	r6, #1
 8017138:	e7ee      	b.n	8017118 <__libc_init_array+0xc>
 801713a:	f855 3b04 	ldr.w	r3, [r5], #4
 801713e:	4798      	blx	r3
 8017140:	3601      	adds	r6, #1
 8017142:	e7f2      	b.n	801712a <__libc_init_array+0x1e>
 8017144:	0801a144 	.word	0x0801a144
 8017148:	0801a144 	.word	0x0801a144
 801714c:	0801a144 	.word	0x0801a144
 8017150:	0801a14c 	.word	0x0801a14c

08017154 <__retarget_lock_init_recursive>:
 8017154:	4770      	bx	lr

08017156 <__retarget_lock_acquire_recursive>:
 8017156:	4770      	bx	lr

08017158 <__retarget_lock_release_recursive>:
 8017158:	4770      	bx	lr

0801715a <strcpy>:
 801715a:	4603      	mov	r3, r0
 801715c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017160:	f803 2b01 	strb.w	r2, [r3], #1
 8017164:	2a00      	cmp	r2, #0
 8017166:	d1f9      	bne.n	801715c <strcpy+0x2>
 8017168:	4770      	bx	lr

0801716a <memcpy>:
 801716a:	440a      	add	r2, r1
 801716c:	4291      	cmp	r1, r2
 801716e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017172:	d100      	bne.n	8017176 <memcpy+0xc>
 8017174:	4770      	bx	lr
 8017176:	b510      	push	{r4, lr}
 8017178:	f811 4b01 	ldrb.w	r4, [r1], #1
 801717c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017180:	4291      	cmp	r1, r2
 8017182:	d1f9      	bne.n	8017178 <memcpy+0xe>
 8017184:	bd10      	pop	{r4, pc}
	...

08017188 <__assert_func>:
 8017188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801718a:	4614      	mov	r4, r2
 801718c:	461a      	mov	r2, r3
 801718e:	4b09      	ldr	r3, [pc, #36]	@ (80171b4 <__assert_func+0x2c>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	4605      	mov	r5, r0
 8017194:	68d8      	ldr	r0, [r3, #12]
 8017196:	b954      	cbnz	r4, 80171ae <__assert_func+0x26>
 8017198:	4b07      	ldr	r3, [pc, #28]	@ (80171b8 <__assert_func+0x30>)
 801719a:	461c      	mov	r4, r3
 801719c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171a0:	9100      	str	r1, [sp, #0]
 80171a2:	462b      	mov	r3, r5
 80171a4:	4905      	ldr	r1, [pc, #20]	@ (80171bc <__assert_func+0x34>)
 80171a6:	f001 fd81 	bl	8018cac <fiprintf>
 80171aa:	f001 fe15 	bl	8018dd8 <abort>
 80171ae:	4b04      	ldr	r3, [pc, #16]	@ (80171c0 <__assert_func+0x38>)
 80171b0:	e7f4      	b.n	801719c <__assert_func+0x14>
 80171b2:	bf00      	nop
 80171b4:	200000c8 	.word	0x200000c8
 80171b8:	08019f52 	.word	0x08019f52
 80171bc:	08019f24 	.word	0x08019f24
 80171c0:	08019f17 	.word	0x08019f17

080171c4 <quorem>:
 80171c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c8:	6903      	ldr	r3, [r0, #16]
 80171ca:	690c      	ldr	r4, [r1, #16]
 80171cc:	42a3      	cmp	r3, r4
 80171ce:	4607      	mov	r7, r0
 80171d0:	db7e      	blt.n	80172d0 <quorem+0x10c>
 80171d2:	3c01      	subs	r4, #1
 80171d4:	f101 0814 	add.w	r8, r1, #20
 80171d8:	00a3      	lsls	r3, r4, #2
 80171da:	f100 0514 	add.w	r5, r0, #20
 80171de:	9300      	str	r3, [sp, #0]
 80171e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171e4:	9301      	str	r3, [sp, #4]
 80171e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80171ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80171ee:	3301      	adds	r3, #1
 80171f0:	429a      	cmp	r2, r3
 80171f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80171f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80171fa:	d32e      	bcc.n	801725a <quorem+0x96>
 80171fc:	f04f 0a00 	mov.w	sl, #0
 8017200:	46c4      	mov	ip, r8
 8017202:	46ae      	mov	lr, r5
 8017204:	46d3      	mov	fp, sl
 8017206:	f85c 3b04 	ldr.w	r3, [ip], #4
 801720a:	b298      	uxth	r0, r3
 801720c:	fb06 a000 	mla	r0, r6, r0, sl
 8017210:	0c02      	lsrs	r2, r0, #16
 8017212:	0c1b      	lsrs	r3, r3, #16
 8017214:	fb06 2303 	mla	r3, r6, r3, r2
 8017218:	f8de 2000 	ldr.w	r2, [lr]
 801721c:	b280      	uxth	r0, r0
 801721e:	b292      	uxth	r2, r2
 8017220:	1a12      	subs	r2, r2, r0
 8017222:	445a      	add	r2, fp
 8017224:	f8de 0000 	ldr.w	r0, [lr]
 8017228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801722c:	b29b      	uxth	r3, r3
 801722e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8017232:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017236:	b292      	uxth	r2, r2
 8017238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801723c:	45e1      	cmp	r9, ip
 801723e:	f84e 2b04 	str.w	r2, [lr], #4
 8017242:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017246:	d2de      	bcs.n	8017206 <quorem+0x42>
 8017248:	9b00      	ldr	r3, [sp, #0]
 801724a:	58eb      	ldr	r3, [r5, r3]
 801724c:	b92b      	cbnz	r3, 801725a <quorem+0x96>
 801724e:	9b01      	ldr	r3, [sp, #4]
 8017250:	3b04      	subs	r3, #4
 8017252:	429d      	cmp	r5, r3
 8017254:	461a      	mov	r2, r3
 8017256:	d32f      	bcc.n	80172b8 <quorem+0xf4>
 8017258:	613c      	str	r4, [r7, #16]
 801725a:	4638      	mov	r0, r7
 801725c:	f001 f8d0 	bl	8018400 <__mcmp>
 8017260:	2800      	cmp	r0, #0
 8017262:	db25      	blt.n	80172b0 <quorem+0xec>
 8017264:	4629      	mov	r1, r5
 8017266:	2000      	movs	r0, #0
 8017268:	f858 2b04 	ldr.w	r2, [r8], #4
 801726c:	f8d1 c000 	ldr.w	ip, [r1]
 8017270:	fa1f fe82 	uxth.w	lr, r2
 8017274:	fa1f f38c 	uxth.w	r3, ip
 8017278:	eba3 030e 	sub.w	r3, r3, lr
 801727c:	4403      	add	r3, r0
 801727e:	0c12      	lsrs	r2, r2, #16
 8017280:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8017284:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8017288:	b29b      	uxth	r3, r3
 801728a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801728e:	45c1      	cmp	r9, r8
 8017290:	f841 3b04 	str.w	r3, [r1], #4
 8017294:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017298:	d2e6      	bcs.n	8017268 <quorem+0xa4>
 801729a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801729e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172a2:	b922      	cbnz	r2, 80172ae <quorem+0xea>
 80172a4:	3b04      	subs	r3, #4
 80172a6:	429d      	cmp	r5, r3
 80172a8:	461a      	mov	r2, r3
 80172aa:	d30b      	bcc.n	80172c4 <quorem+0x100>
 80172ac:	613c      	str	r4, [r7, #16]
 80172ae:	3601      	adds	r6, #1
 80172b0:	4630      	mov	r0, r6
 80172b2:	b003      	add	sp, #12
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	6812      	ldr	r2, [r2, #0]
 80172ba:	3b04      	subs	r3, #4
 80172bc:	2a00      	cmp	r2, #0
 80172be:	d1cb      	bne.n	8017258 <quorem+0x94>
 80172c0:	3c01      	subs	r4, #1
 80172c2:	e7c6      	b.n	8017252 <quorem+0x8e>
 80172c4:	6812      	ldr	r2, [r2, #0]
 80172c6:	3b04      	subs	r3, #4
 80172c8:	2a00      	cmp	r2, #0
 80172ca:	d1ef      	bne.n	80172ac <quorem+0xe8>
 80172cc:	3c01      	subs	r4, #1
 80172ce:	e7ea      	b.n	80172a6 <quorem+0xe2>
 80172d0:	2000      	movs	r0, #0
 80172d2:	e7ee      	b.n	80172b2 <quorem+0xee>
 80172d4:	0000      	movs	r0, r0
	...

080172d8 <_dtoa_r>:
 80172d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172dc:	69c7      	ldr	r7, [r0, #28]
 80172de:	b099      	sub	sp, #100	@ 0x64
 80172e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80172e4:	ec55 4b10 	vmov	r4, r5, d0
 80172e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80172ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80172ec:	4683      	mov	fp, r0
 80172ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80172f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80172f2:	b97f      	cbnz	r7, 8017314 <_dtoa_r+0x3c>
 80172f4:	2010      	movs	r0, #16
 80172f6:	f7fe fce7 	bl	8015cc8 <malloc>
 80172fa:	4602      	mov	r2, r0
 80172fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8017300:	b920      	cbnz	r0, 801730c <_dtoa_r+0x34>
 8017302:	4ba7      	ldr	r3, [pc, #668]	@ (80175a0 <_dtoa_r+0x2c8>)
 8017304:	21ef      	movs	r1, #239	@ 0xef
 8017306:	48a7      	ldr	r0, [pc, #668]	@ (80175a4 <_dtoa_r+0x2cc>)
 8017308:	f7ff ff3e 	bl	8017188 <__assert_func>
 801730c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017310:	6007      	str	r7, [r0, #0]
 8017312:	60c7      	str	r7, [r0, #12]
 8017314:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017318:	6819      	ldr	r1, [r3, #0]
 801731a:	b159      	cbz	r1, 8017334 <_dtoa_r+0x5c>
 801731c:	685a      	ldr	r2, [r3, #4]
 801731e:	604a      	str	r2, [r1, #4]
 8017320:	2301      	movs	r3, #1
 8017322:	4093      	lsls	r3, r2
 8017324:	608b      	str	r3, [r1, #8]
 8017326:	4658      	mov	r0, fp
 8017328:	f000 fe30 	bl	8017f8c <_Bfree>
 801732c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017330:	2200      	movs	r2, #0
 8017332:	601a      	str	r2, [r3, #0]
 8017334:	1e2b      	subs	r3, r5, #0
 8017336:	bfb9      	ittee	lt
 8017338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801733c:	9303      	strlt	r3, [sp, #12]
 801733e:	2300      	movge	r3, #0
 8017340:	6033      	strge	r3, [r6, #0]
 8017342:	9f03      	ldr	r7, [sp, #12]
 8017344:	4b98      	ldr	r3, [pc, #608]	@ (80175a8 <_dtoa_r+0x2d0>)
 8017346:	bfbc      	itt	lt
 8017348:	2201      	movlt	r2, #1
 801734a:	6032      	strlt	r2, [r6, #0]
 801734c:	43bb      	bics	r3, r7
 801734e:	d112      	bne.n	8017376 <_dtoa_r+0x9e>
 8017350:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8017356:	6013      	str	r3, [r2, #0]
 8017358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801735c:	4323      	orrs	r3, r4
 801735e:	f000 854d 	beq.w	8017dfc <_dtoa_r+0xb24>
 8017362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017364:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80175bc <_dtoa_r+0x2e4>
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 854f 	beq.w	8017e0c <_dtoa_r+0xb34>
 801736e:	f10a 0303 	add.w	r3, sl, #3
 8017372:	f000 bd49 	b.w	8017e08 <_dtoa_r+0xb30>
 8017376:	ed9d 7b02 	vldr	d7, [sp, #8]
 801737a:	2200      	movs	r2, #0
 801737c:	ec51 0b17 	vmov	r0, r1, d7
 8017380:	2300      	movs	r3, #0
 8017382:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8017386:	f7e9 fbcf 	bl	8000b28 <__aeabi_dcmpeq>
 801738a:	4680      	mov	r8, r0
 801738c:	b158      	cbz	r0, 80173a6 <_dtoa_r+0xce>
 801738e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017390:	2301      	movs	r3, #1
 8017392:	6013      	str	r3, [r2, #0]
 8017394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017396:	b113      	cbz	r3, 801739e <_dtoa_r+0xc6>
 8017398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801739a:	4b84      	ldr	r3, [pc, #528]	@ (80175ac <_dtoa_r+0x2d4>)
 801739c:	6013      	str	r3, [r2, #0]
 801739e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80175c0 <_dtoa_r+0x2e8>
 80173a2:	f000 bd33 	b.w	8017e0c <_dtoa_r+0xb34>
 80173a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80173aa:	aa16      	add	r2, sp, #88	@ 0x58
 80173ac:	a917      	add	r1, sp, #92	@ 0x5c
 80173ae:	4658      	mov	r0, fp
 80173b0:	f001 f8d6 	bl	8018560 <__d2b>
 80173b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80173b8:	4681      	mov	r9, r0
 80173ba:	2e00      	cmp	r6, #0
 80173bc:	d077      	beq.n	80174ae <_dtoa_r+0x1d6>
 80173be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80173c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80173cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80173d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80173d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80173d8:	4619      	mov	r1, r3
 80173da:	2200      	movs	r2, #0
 80173dc:	4b74      	ldr	r3, [pc, #464]	@ (80175b0 <_dtoa_r+0x2d8>)
 80173de:	f7e8 ff83 	bl	80002e8 <__aeabi_dsub>
 80173e2:	a369      	add	r3, pc, #420	@ (adr r3, 8017588 <_dtoa_r+0x2b0>)
 80173e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e8:	f7e9 f936 	bl	8000658 <__aeabi_dmul>
 80173ec:	a368      	add	r3, pc, #416	@ (adr r3, 8017590 <_dtoa_r+0x2b8>)
 80173ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f2:	f7e8 ff7b 	bl	80002ec <__adddf3>
 80173f6:	4604      	mov	r4, r0
 80173f8:	4630      	mov	r0, r6
 80173fa:	460d      	mov	r5, r1
 80173fc:	f7e9 f8c2 	bl	8000584 <__aeabi_i2d>
 8017400:	a365      	add	r3, pc, #404	@ (adr r3, 8017598 <_dtoa_r+0x2c0>)
 8017402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017406:	f7e9 f927 	bl	8000658 <__aeabi_dmul>
 801740a:	4602      	mov	r2, r0
 801740c:	460b      	mov	r3, r1
 801740e:	4620      	mov	r0, r4
 8017410:	4629      	mov	r1, r5
 8017412:	f7e8 ff6b 	bl	80002ec <__adddf3>
 8017416:	4604      	mov	r4, r0
 8017418:	460d      	mov	r5, r1
 801741a:	f7e9 fbcd 	bl	8000bb8 <__aeabi_d2iz>
 801741e:	2200      	movs	r2, #0
 8017420:	4607      	mov	r7, r0
 8017422:	2300      	movs	r3, #0
 8017424:	4620      	mov	r0, r4
 8017426:	4629      	mov	r1, r5
 8017428:	f7e9 fb88 	bl	8000b3c <__aeabi_dcmplt>
 801742c:	b140      	cbz	r0, 8017440 <_dtoa_r+0x168>
 801742e:	4638      	mov	r0, r7
 8017430:	f7e9 f8a8 	bl	8000584 <__aeabi_i2d>
 8017434:	4622      	mov	r2, r4
 8017436:	462b      	mov	r3, r5
 8017438:	f7e9 fb76 	bl	8000b28 <__aeabi_dcmpeq>
 801743c:	b900      	cbnz	r0, 8017440 <_dtoa_r+0x168>
 801743e:	3f01      	subs	r7, #1
 8017440:	2f16      	cmp	r7, #22
 8017442:	d851      	bhi.n	80174e8 <_dtoa_r+0x210>
 8017444:	4b5b      	ldr	r3, [pc, #364]	@ (80175b4 <_dtoa_r+0x2dc>)
 8017446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017452:	f7e9 fb73 	bl	8000b3c <__aeabi_dcmplt>
 8017456:	2800      	cmp	r0, #0
 8017458:	d048      	beq.n	80174ec <_dtoa_r+0x214>
 801745a:	3f01      	subs	r7, #1
 801745c:	2300      	movs	r3, #0
 801745e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017460:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017462:	1b9b      	subs	r3, r3, r6
 8017464:	1e5a      	subs	r2, r3, #1
 8017466:	bf44      	itt	mi
 8017468:	f1c3 0801 	rsbmi	r8, r3, #1
 801746c:	2300      	movmi	r3, #0
 801746e:	9208      	str	r2, [sp, #32]
 8017470:	bf54      	ite	pl
 8017472:	f04f 0800 	movpl.w	r8, #0
 8017476:	9308      	strmi	r3, [sp, #32]
 8017478:	2f00      	cmp	r7, #0
 801747a:	db39      	blt.n	80174f0 <_dtoa_r+0x218>
 801747c:	9b08      	ldr	r3, [sp, #32]
 801747e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8017480:	443b      	add	r3, r7
 8017482:	9308      	str	r3, [sp, #32]
 8017484:	2300      	movs	r3, #0
 8017486:	930a      	str	r3, [sp, #40]	@ 0x28
 8017488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801748a:	2b09      	cmp	r3, #9
 801748c:	d864      	bhi.n	8017558 <_dtoa_r+0x280>
 801748e:	2b05      	cmp	r3, #5
 8017490:	bfc4      	itt	gt
 8017492:	3b04      	subgt	r3, #4
 8017494:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8017496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017498:	f1a3 0302 	sub.w	r3, r3, #2
 801749c:	bfcc      	ite	gt
 801749e:	2400      	movgt	r4, #0
 80174a0:	2401      	movle	r4, #1
 80174a2:	2b03      	cmp	r3, #3
 80174a4:	d863      	bhi.n	801756e <_dtoa_r+0x296>
 80174a6:	e8df f003 	tbb	[pc, r3]
 80174aa:	372a      	.short	0x372a
 80174ac:	5535      	.short	0x5535
 80174ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80174b2:	441e      	add	r6, r3
 80174b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80174b8:	2b20      	cmp	r3, #32
 80174ba:	bfc1      	itttt	gt
 80174bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80174c0:	409f      	lslgt	r7, r3
 80174c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80174c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80174ca:	bfd6      	itet	le
 80174cc:	f1c3 0320 	rsble	r3, r3, #32
 80174d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80174d4:	fa04 f003 	lslle.w	r0, r4, r3
 80174d8:	f7e9 f844 	bl	8000564 <__aeabi_ui2d>
 80174dc:	2201      	movs	r2, #1
 80174de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80174e2:	3e01      	subs	r6, #1
 80174e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80174e6:	e777      	b.n	80173d8 <_dtoa_r+0x100>
 80174e8:	2301      	movs	r3, #1
 80174ea:	e7b8      	b.n	801745e <_dtoa_r+0x186>
 80174ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80174ee:	e7b7      	b.n	8017460 <_dtoa_r+0x188>
 80174f0:	427b      	negs	r3, r7
 80174f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80174f4:	2300      	movs	r3, #0
 80174f6:	eba8 0807 	sub.w	r8, r8, r7
 80174fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80174fc:	e7c4      	b.n	8017488 <_dtoa_r+0x1b0>
 80174fe:	2300      	movs	r3, #0
 8017500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017504:	2b00      	cmp	r3, #0
 8017506:	dc35      	bgt.n	8017574 <_dtoa_r+0x29c>
 8017508:	2301      	movs	r3, #1
 801750a:	9300      	str	r3, [sp, #0]
 801750c:	9307      	str	r3, [sp, #28]
 801750e:	461a      	mov	r2, r3
 8017510:	920e      	str	r2, [sp, #56]	@ 0x38
 8017512:	e00b      	b.n	801752c <_dtoa_r+0x254>
 8017514:	2301      	movs	r3, #1
 8017516:	e7f3      	b.n	8017500 <_dtoa_r+0x228>
 8017518:	2300      	movs	r3, #0
 801751a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801751c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801751e:	18fb      	adds	r3, r7, r3
 8017520:	9300      	str	r3, [sp, #0]
 8017522:	3301      	adds	r3, #1
 8017524:	2b01      	cmp	r3, #1
 8017526:	9307      	str	r3, [sp, #28]
 8017528:	bfb8      	it	lt
 801752a:	2301      	movlt	r3, #1
 801752c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017530:	2100      	movs	r1, #0
 8017532:	2204      	movs	r2, #4
 8017534:	f102 0514 	add.w	r5, r2, #20
 8017538:	429d      	cmp	r5, r3
 801753a:	d91f      	bls.n	801757c <_dtoa_r+0x2a4>
 801753c:	6041      	str	r1, [r0, #4]
 801753e:	4658      	mov	r0, fp
 8017540:	f000 fce4 	bl	8017f0c <_Balloc>
 8017544:	4682      	mov	sl, r0
 8017546:	2800      	cmp	r0, #0
 8017548:	d13c      	bne.n	80175c4 <_dtoa_r+0x2ec>
 801754a:	4b1b      	ldr	r3, [pc, #108]	@ (80175b8 <_dtoa_r+0x2e0>)
 801754c:	4602      	mov	r2, r0
 801754e:	f240 11af 	movw	r1, #431	@ 0x1af
 8017552:	e6d8      	b.n	8017306 <_dtoa_r+0x2e>
 8017554:	2301      	movs	r3, #1
 8017556:	e7e0      	b.n	801751a <_dtoa_r+0x242>
 8017558:	2401      	movs	r4, #1
 801755a:	2300      	movs	r3, #0
 801755c:	9309      	str	r3, [sp, #36]	@ 0x24
 801755e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017564:	9300      	str	r3, [sp, #0]
 8017566:	9307      	str	r3, [sp, #28]
 8017568:	2200      	movs	r2, #0
 801756a:	2312      	movs	r3, #18
 801756c:	e7d0      	b.n	8017510 <_dtoa_r+0x238>
 801756e:	2301      	movs	r3, #1
 8017570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017572:	e7f5      	b.n	8017560 <_dtoa_r+0x288>
 8017574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017576:	9300      	str	r3, [sp, #0]
 8017578:	9307      	str	r3, [sp, #28]
 801757a:	e7d7      	b.n	801752c <_dtoa_r+0x254>
 801757c:	3101      	adds	r1, #1
 801757e:	0052      	lsls	r2, r2, #1
 8017580:	e7d8      	b.n	8017534 <_dtoa_r+0x25c>
 8017582:	bf00      	nop
 8017584:	f3af 8000 	nop.w
 8017588:	636f4361 	.word	0x636f4361
 801758c:	3fd287a7 	.word	0x3fd287a7
 8017590:	8b60c8b3 	.word	0x8b60c8b3
 8017594:	3fc68a28 	.word	0x3fc68a28
 8017598:	509f79fb 	.word	0x509f79fb
 801759c:	3fd34413 	.word	0x3fd34413
 80175a0:	08019d4e 	.word	0x08019d4e
 80175a4:	08019f60 	.word	0x08019f60
 80175a8:	7ff00000 	.word	0x7ff00000
 80175ac:	08019ef4 	.word	0x08019ef4
 80175b0:	3ff80000 	.word	0x3ff80000
 80175b4:	0801a058 	.word	0x0801a058
 80175b8:	08019fb8 	.word	0x08019fb8
 80175bc:	08019f5c 	.word	0x08019f5c
 80175c0:	08019ef3 	.word	0x08019ef3
 80175c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80175c8:	6018      	str	r0, [r3, #0]
 80175ca:	9b07      	ldr	r3, [sp, #28]
 80175cc:	2b0e      	cmp	r3, #14
 80175ce:	f200 80a4 	bhi.w	801771a <_dtoa_r+0x442>
 80175d2:	2c00      	cmp	r4, #0
 80175d4:	f000 80a1 	beq.w	801771a <_dtoa_r+0x442>
 80175d8:	2f00      	cmp	r7, #0
 80175da:	dd33      	ble.n	8017644 <_dtoa_r+0x36c>
 80175dc:	4bad      	ldr	r3, [pc, #692]	@ (8017894 <_dtoa_r+0x5bc>)
 80175de:	f007 020f 	and.w	r2, r7, #15
 80175e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80175e6:	ed93 7b00 	vldr	d7, [r3]
 80175ea:	05f8      	lsls	r0, r7, #23
 80175ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80175f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80175f4:	d516      	bpl.n	8017624 <_dtoa_r+0x34c>
 80175f6:	4ba8      	ldr	r3, [pc, #672]	@ (8017898 <_dtoa_r+0x5c0>)
 80175f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80175fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017600:	f7e9 f954 	bl	80008ac <__aeabi_ddiv>
 8017604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017608:	f004 040f 	and.w	r4, r4, #15
 801760c:	2603      	movs	r6, #3
 801760e:	4da2      	ldr	r5, [pc, #648]	@ (8017898 <_dtoa_r+0x5c0>)
 8017610:	b954      	cbnz	r4, 8017628 <_dtoa_r+0x350>
 8017612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801761a:	f7e9 f947 	bl	80008ac <__aeabi_ddiv>
 801761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017622:	e028      	b.n	8017676 <_dtoa_r+0x39e>
 8017624:	2602      	movs	r6, #2
 8017626:	e7f2      	b.n	801760e <_dtoa_r+0x336>
 8017628:	07e1      	lsls	r1, r4, #31
 801762a:	d508      	bpl.n	801763e <_dtoa_r+0x366>
 801762c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017634:	f7e9 f810 	bl	8000658 <__aeabi_dmul>
 8017638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801763c:	3601      	adds	r6, #1
 801763e:	1064      	asrs	r4, r4, #1
 8017640:	3508      	adds	r5, #8
 8017642:	e7e5      	b.n	8017610 <_dtoa_r+0x338>
 8017644:	f000 80d2 	beq.w	80177ec <_dtoa_r+0x514>
 8017648:	427c      	negs	r4, r7
 801764a:	4b92      	ldr	r3, [pc, #584]	@ (8017894 <_dtoa_r+0x5bc>)
 801764c:	4d92      	ldr	r5, [pc, #584]	@ (8017898 <_dtoa_r+0x5c0>)
 801764e:	f004 020f 	and.w	r2, r4, #15
 8017652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017656:	e9d3 2300 	ldrd	r2, r3, [r3]
 801765a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801765e:	f7e8 fffb 	bl	8000658 <__aeabi_dmul>
 8017662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017666:	1124      	asrs	r4, r4, #4
 8017668:	2300      	movs	r3, #0
 801766a:	2602      	movs	r6, #2
 801766c:	2c00      	cmp	r4, #0
 801766e:	f040 80b2 	bne.w	80177d6 <_dtoa_r+0x4fe>
 8017672:	2b00      	cmp	r3, #0
 8017674:	d1d3      	bne.n	801761e <_dtoa_r+0x346>
 8017676:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017678:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801767c:	2b00      	cmp	r3, #0
 801767e:	f000 80b7 	beq.w	80177f0 <_dtoa_r+0x518>
 8017682:	4b86      	ldr	r3, [pc, #536]	@ (801789c <_dtoa_r+0x5c4>)
 8017684:	2200      	movs	r2, #0
 8017686:	4620      	mov	r0, r4
 8017688:	4629      	mov	r1, r5
 801768a:	f7e9 fa57 	bl	8000b3c <__aeabi_dcmplt>
 801768e:	2800      	cmp	r0, #0
 8017690:	f000 80ae 	beq.w	80177f0 <_dtoa_r+0x518>
 8017694:	9b07      	ldr	r3, [sp, #28]
 8017696:	2b00      	cmp	r3, #0
 8017698:	f000 80aa 	beq.w	80177f0 <_dtoa_r+0x518>
 801769c:	9b00      	ldr	r3, [sp, #0]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	dd37      	ble.n	8017712 <_dtoa_r+0x43a>
 80176a2:	1e7b      	subs	r3, r7, #1
 80176a4:	9304      	str	r3, [sp, #16]
 80176a6:	4620      	mov	r0, r4
 80176a8:	4b7d      	ldr	r3, [pc, #500]	@ (80178a0 <_dtoa_r+0x5c8>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	4629      	mov	r1, r5
 80176ae:	f7e8 ffd3 	bl	8000658 <__aeabi_dmul>
 80176b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176b6:	9c00      	ldr	r4, [sp, #0]
 80176b8:	3601      	adds	r6, #1
 80176ba:	4630      	mov	r0, r6
 80176bc:	f7e8 ff62 	bl	8000584 <__aeabi_i2d>
 80176c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80176c4:	f7e8 ffc8 	bl	8000658 <__aeabi_dmul>
 80176c8:	4b76      	ldr	r3, [pc, #472]	@ (80178a4 <_dtoa_r+0x5cc>)
 80176ca:	2200      	movs	r2, #0
 80176cc:	f7e8 fe0e 	bl	80002ec <__adddf3>
 80176d0:	4605      	mov	r5, r0
 80176d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80176d6:	2c00      	cmp	r4, #0
 80176d8:	f040 808d 	bne.w	80177f6 <_dtoa_r+0x51e>
 80176dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80176e0:	4b71      	ldr	r3, [pc, #452]	@ (80178a8 <_dtoa_r+0x5d0>)
 80176e2:	2200      	movs	r2, #0
 80176e4:	f7e8 fe00 	bl	80002e8 <__aeabi_dsub>
 80176e8:	4602      	mov	r2, r0
 80176ea:	460b      	mov	r3, r1
 80176ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80176f0:	462a      	mov	r2, r5
 80176f2:	4633      	mov	r3, r6
 80176f4:	f7e9 fa40 	bl	8000b78 <__aeabi_dcmpgt>
 80176f8:	2800      	cmp	r0, #0
 80176fa:	f040 828b 	bne.w	8017c14 <_dtoa_r+0x93c>
 80176fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017702:	462a      	mov	r2, r5
 8017704:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017708:	f7e9 fa18 	bl	8000b3c <__aeabi_dcmplt>
 801770c:	2800      	cmp	r0, #0
 801770e:	f040 8128 	bne.w	8017962 <_dtoa_r+0x68a>
 8017712:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801771a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801771c:	2b00      	cmp	r3, #0
 801771e:	f2c0 815a 	blt.w	80179d6 <_dtoa_r+0x6fe>
 8017722:	2f0e      	cmp	r7, #14
 8017724:	f300 8157 	bgt.w	80179d6 <_dtoa_r+0x6fe>
 8017728:	4b5a      	ldr	r3, [pc, #360]	@ (8017894 <_dtoa_r+0x5bc>)
 801772a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801772e:	ed93 7b00 	vldr	d7, [r3]
 8017732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017734:	2b00      	cmp	r3, #0
 8017736:	ed8d 7b00 	vstr	d7, [sp]
 801773a:	da03      	bge.n	8017744 <_dtoa_r+0x46c>
 801773c:	9b07      	ldr	r3, [sp, #28]
 801773e:	2b00      	cmp	r3, #0
 8017740:	f340 8101 	ble.w	8017946 <_dtoa_r+0x66e>
 8017744:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017748:	4656      	mov	r6, sl
 801774a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801774e:	4620      	mov	r0, r4
 8017750:	4629      	mov	r1, r5
 8017752:	f7e9 f8ab 	bl	80008ac <__aeabi_ddiv>
 8017756:	f7e9 fa2f 	bl	8000bb8 <__aeabi_d2iz>
 801775a:	4680      	mov	r8, r0
 801775c:	f7e8 ff12 	bl	8000584 <__aeabi_i2d>
 8017760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017764:	f7e8 ff78 	bl	8000658 <__aeabi_dmul>
 8017768:	4602      	mov	r2, r0
 801776a:	460b      	mov	r3, r1
 801776c:	4620      	mov	r0, r4
 801776e:	4629      	mov	r1, r5
 8017770:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017774:	f7e8 fdb8 	bl	80002e8 <__aeabi_dsub>
 8017778:	f806 4b01 	strb.w	r4, [r6], #1
 801777c:	9d07      	ldr	r5, [sp, #28]
 801777e:	eba6 040a 	sub.w	r4, r6, sl
 8017782:	42a5      	cmp	r5, r4
 8017784:	4602      	mov	r2, r0
 8017786:	460b      	mov	r3, r1
 8017788:	f040 8117 	bne.w	80179ba <_dtoa_r+0x6e2>
 801778c:	f7e8 fdae 	bl	80002ec <__adddf3>
 8017790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017794:	4604      	mov	r4, r0
 8017796:	460d      	mov	r5, r1
 8017798:	f7e9 f9ee 	bl	8000b78 <__aeabi_dcmpgt>
 801779c:	2800      	cmp	r0, #0
 801779e:	f040 80f9 	bne.w	8017994 <_dtoa_r+0x6bc>
 80177a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177a6:	4620      	mov	r0, r4
 80177a8:	4629      	mov	r1, r5
 80177aa:	f7e9 f9bd 	bl	8000b28 <__aeabi_dcmpeq>
 80177ae:	b118      	cbz	r0, 80177b8 <_dtoa_r+0x4e0>
 80177b0:	f018 0f01 	tst.w	r8, #1
 80177b4:	f040 80ee 	bne.w	8017994 <_dtoa_r+0x6bc>
 80177b8:	4649      	mov	r1, r9
 80177ba:	4658      	mov	r0, fp
 80177bc:	f000 fbe6 	bl	8017f8c <_Bfree>
 80177c0:	2300      	movs	r3, #0
 80177c2:	7033      	strb	r3, [r6, #0]
 80177c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80177c6:	3701      	adds	r7, #1
 80177c8:	601f      	str	r7, [r3, #0]
 80177ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	f000 831d 	beq.w	8017e0c <_dtoa_r+0xb34>
 80177d2:	601e      	str	r6, [r3, #0]
 80177d4:	e31a      	b.n	8017e0c <_dtoa_r+0xb34>
 80177d6:	07e2      	lsls	r2, r4, #31
 80177d8:	d505      	bpl.n	80177e6 <_dtoa_r+0x50e>
 80177da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177de:	f7e8 ff3b 	bl	8000658 <__aeabi_dmul>
 80177e2:	3601      	adds	r6, #1
 80177e4:	2301      	movs	r3, #1
 80177e6:	1064      	asrs	r4, r4, #1
 80177e8:	3508      	adds	r5, #8
 80177ea:	e73f      	b.n	801766c <_dtoa_r+0x394>
 80177ec:	2602      	movs	r6, #2
 80177ee:	e742      	b.n	8017676 <_dtoa_r+0x39e>
 80177f0:	9c07      	ldr	r4, [sp, #28]
 80177f2:	9704      	str	r7, [sp, #16]
 80177f4:	e761      	b.n	80176ba <_dtoa_r+0x3e2>
 80177f6:	4b27      	ldr	r3, [pc, #156]	@ (8017894 <_dtoa_r+0x5bc>)
 80177f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80177fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80177fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017802:	4454      	add	r4, sl
 8017804:	2900      	cmp	r1, #0
 8017806:	d053      	beq.n	80178b0 <_dtoa_r+0x5d8>
 8017808:	4928      	ldr	r1, [pc, #160]	@ (80178ac <_dtoa_r+0x5d4>)
 801780a:	2000      	movs	r0, #0
 801780c:	f7e9 f84e 	bl	80008ac <__aeabi_ddiv>
 8017810:	4633      	mov	r3, r6
 8017812:	462a      	mov	r2, r5
 8017814:	f7e8 fd68 	bl	80002e8 <__aeabi_dsub>
 8017818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801781c:	4656      	mov	r6, sl
 801781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017822:	f7e9 f9c9 	bl	8000bb8 <__aeabi_d2iz>
 8017826:	4605      	mov	r5, r0
 8017828:	f7e8 feac 	bl	8000584 <__aeabi_i2d>
 801782c:	4602      	mov	r2, r0
 801782e:	460b      	mov	r3, r1
 8017830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017834:	f7e8 fd58 	bl	80002e8 <__aeabi_dsub>
 8017838:	3530      	adds	r5, #48	@ 0x30
 801783a:	4602      	mov	r2, r0
 801783c:	460b      	mov	r3, r1
 801783e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017842:	f806 5b01 	strb.w	r5, [r6], #1
 8017846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801784a:	f7e9 f977 	bl	8000b3c <__aeabi_dcmplt>
 801784e:	2800      	cmp	r0, #0
 8017850:	d171      	bne.n	8017936 <_dtoa_r+0x65e>
 8017852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017856:	4911      	ldr	r1, [pc, #68]	@ (801789c <_dtoa_r+0x5c4>)
 8017858:	2000      	movs	r0, #0
 801785a:	f7e8 fd45 	bl	80002e8 <__aeabi_dsub>
 801785e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017862:	f7e9 f96b 	bl	8000b3c <__aeabi_dcmplt>
 8017866:	2800      	cmp	r0, #0
 8017868:	f040 8095 	bne.w	8017996 <_dtoa_r+0x6be>
 801786c:	42a6      	cmp	r6, r4
 801786e:	f43f af50 	beq.w	8017712 <_dtoa_r+0x43a>
 8017872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017876:	4b0a      	ldr	r3, [pc, #40]	@ (80178a0 <_dtoa_r+0x5c8>)
 8017878:	2200      	movs	r2, #0
 801787a:	f7e8 feed 	bl	8000658 <__aeabi_dmul>
 801787e:	4b08      	ldr	r3, [pc, #32]	@ (80178a0 <_dtoa_r+0x5c8>)
 8017880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017884:	2200      	movs	r2, #0
 8017886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801788a:	f7e8 fee5 	bl	8000658 <__aeabi_dmul>
 801788e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017892:	e7c4      	b.n	801781e <_dtoa_r+0x546>
 8017894:	0801a058 	.word	0x0801a058
 8017898:	0801a030 	.word	0x0801a030
 801789c:	3ff00000 	.word	0x3ff00000
 80178a0:	40240000 	.word	0x40240000
 80178a4:	401c0000 	.word	0x401c0000
 80178a8:	40140000 	.word	0x40140000
 80178ac:	3fe00000 	.word	0x3fe00000
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	f7e8 fed0 	bl	8000658 <__aeabi_dmul>
 80178b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80178bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80178be:	4656      	mov	r6, sl
 80178c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178c4:	f7e9 f978 	bl	8000bb8 <__aeabi_d2iz>
 80178c8:	4605      	mov	r5, r0
 80178ca:	f7e8 fe5b 	bl	8000584 <__aeabi_i2d>
 80178ce:	4602      	mov	r2, r0
 80178d0:	460b      	mov	r3, r1
 80178d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178d6:	f7e8 fd07 	bl	80002e8 <__aeabi_dsub>
 80178da:	3530      	adds	r5, #48	@ 0x30
 80178dc:	f806 5b01 	strb.w	r5, [r6], #1
 80178e0:	4602      	mov	r2, r0
 80178e2:	460b      	mov	r3, r1
 80178e4:	42a6      	cmp	r6, r4
 80178e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80178ea:	f04f 0200 	mov.w	r2, #0
 80178ee:	d124      	bne.n	801793a <_dtoa_r+0x662>
 80178f0:	4bac      	ldr	r3, [pc, #688]	@ (8017ba4 <_dtoa_r+0x8cc>)
 80178f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80178f6:	f7e8 fcf9 	bl	80002ec <__adddf3>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017902:	f7e9 f939 	bl	8000b78 <__aeabi_dcmpgt>
 8017906:	2800      	cmp	r0, #0
 8017908:	d145      	bne.n	8017996 <_dtoa_r+0x6be>
 801790a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801790e:	49a5      	ldr	r1, [pc, #660]	@ (8017ba4 <_dtoa_r+0x8cc>)
 8017910:	2000      	movs	r0, #0
 8017912:	f7e8 fce9 	bl	80002e8 <__aeabi_dsub>
 8017916:	4602      	mov	r2, r0
 8017918:	460b      	mov	r3, r1
 801791a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801791e:	f7e9 f90d 	bl	8000b3c <__aeabi_dcmplt>
 8017922:	2800      	cmp	r0, #0
 8017924:	f43f aef5 	beq.w	8017712 <_dtoa_r+0x43a>
 8017928:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801792a:	1e73      	subs	r3, r6, #1
 801792c:	9315      	str	r3, [sp, #84]	@ 0x54
 801792e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017932:	2b30      	cmp	r3, #48	@ 0x30
 8017934:	d0f8      	beq.n	8017928 <_dtoa_r+0x650>
 8017936:	9f04      	ldr	r7, [sp, #16]
 8017938:	e73e      	b.n	80177b8 <_dtoa_r+0x4e0>
 801793a:	4b9b      	ldr	r3, [pc, #620]	@ (8017ba8 <_dtoa_r+0x8d0>)
 801793c:	f7e8 fe8c 	bl	8000658 <__aeabi_dmul>
 8017940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017944:	e7bc      	b.n	80178c0 <_dtoa_r+0x5e8>
 8017946:	d10c      	bne.n	8017962 <_dtoa_r+0x68a>
 8017948:	4b98      	ldr	r3, [pc, #608]	@ (8017bac <_dtoa_r+0x8d4>)
 801794a:	2200      	movs	r2, #0
 801794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017950:	f7e8 fe82 	bl	8000658 <__aeabi_dmul>
 8017954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017958:	f7e9 f904 	bl	8000b64 <__aeabi_dcmpge>
 801795c:	2800      	cmp	r0, #0
 801795e:	f000 8157 	beq.w	8017c10 <_dtoa_r+0x938>
 8017962:	2400      	movs	r4, #0
 8017964:	4625      	mov	r5, r4
 8017966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017968:	43db      	mvns	r3, r3
 801796a:	9304      	str	r3, [sp, #16]
 801796c:	4656      	mov	r6, sl
 801796e:	2700      	movs	r7, #0
 8017970:	4621      	mov	r1, r4
 8017972:	4658      	mov	r0, fp
 8017974:	f000 fb0a 	bl	8017f8c <_Bfree>
 8017978:	2d00      	cmp	r5, #0
 801797a:	d0dc      	beq.n	8017936 <_dtoa_r+0x65e>
 801797c:	b12f      	cbz	r7, 801798a <_dtoa_r+0x6b2>
 801797e:	42af      	cmp	r7, r5
 8017980:	d003      	beq.n	801798a <_dtoa_r+0x6b2>
 8017982:	4639      	mov	r1, r7
 8017984:	4658      	mov	r0, fp
 8017986:	f000 fb01 	bl	8017f8c <_Bfree>
 801798a:	4629      	mov	r1, r5
 801798c:	4658      	mov	r0, fp
 801798e:	f000 fafd 	bl	8017f8c <_Bfree>
 8017992:	e7d0      	b.n	8017936 <_dtoa_r+0x65e>
 8017994:	9704      	str	r7, [sp, #16]
 8017996:	4633      	mov	r3, r6
 8017998:	461e      	mov	r6, r3
 801799a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801799e:	2a39      	cmp	r2, #57	@ 0x39
 80179a0:	d107      	bne.n	80179b2 <_dtoa_r+0x6da>
 80179a2:	459a      	cmp	sl, r3
 80179a4:	d1f8      	bne.n	8017998 <_dtoa_r+0x6c0>
 80179a6:	9a04      	ldr	r2, [sp, #16]
 80179a8:	3201      	adds	r2, #1
 80179aa:	9204      	str	r2, [sp, #16]
 80179ac:	2230      	movs	r2, #48	@ 0x30
 80179ae:	f88a 2000 	strb.w	r2, [sl]
 80179b2:	781a      	ldrb	r2, [r3, #0]
 80179b4:	3201      	adds	r2, #1
 80179b6:	701a      	strb	r2, [r3, #0]
 80179b8:	e7bd      	b.n	8017936 <_dtoa_r+0x65e>
 80179ba:	4b7b      	ldr	r3, [pc, #492]	@ (8017ba8 <_dtoa_r+0x8d0>)
 80179bc:	2200      	movs	r2, #0
 80179be:	f7e8 fe4b 	bl	8000658 <__aeabi_dmul>
 80179c2:	2200      	movs	r2, #0
 80179c4:	2300      	movs	r3, #0
 80179c6:	4604      	mov	r4, r0
 80179c8:	460d      	mov	r5, r1
 80179ca:	f7e9 f8ad 	bl	8000b28 <__aeabi_dcmpeq>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	f43f aebb 	beq.w	801774a <_dtoa_r+0x472>
 80179d4:	e6f0      	b.n	80177b8 <_dtoa_r+0x4e0>
 80179d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80179d8:	2a00      	cmp	r2, #0
 80179da:	f000 80db 	beq.w	8017b94 <_dtoa_r+0x8bc>
 80179de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179e0:	2a01      	cmp	r2, #1
 80179e2:	f300 80bf 	bgt.w	8017b64 <_dtoa_r+0x88c>
 80179e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80179e8:	2a00      	cmp	r2, #0
 80179ea:	f000 80b7 	beq.w	8017b5c <_dtoa_r+0x884>
 80179ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80179f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80179f4:	4646      	mov	r6, r8
 80179f6:	9a08      	ldr	r2, [sp, #32]
 80179f8:	2101      	movs	r1, #1
 80179fa:	441a      	add	r2, r3
 80179fc:	4658      	mov	r0, fp
 80179fe:	4498      	add	r8, r3
 8017a00:	9208      	str	r2, [sp, #32]
 8017a02:	f000 fb77 	bl	80180f4 <__i2b>
 8017a06:	4605      	mov	r5, r0
 8017a08:	b15e      	cbz	r6, 8017a22 <_dtoa_r+0x74a>
 8017a0a:	9b08      	ldr	r3, [sp, #32]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	dd08      	ble.n	8017a22 <_dtoa_r+0x74a>
 8017a10:	42b3      	cmp	r3, r6
 8017a12:	9a08      	ldr	r2, [sp, #32]
 8017a14:	bfa8      	it	ge
 8017a16:	4633      	movge	r3, r6
 8017a18:	eba8 0803 	sub.w	r8, r8, r3
 8017a1c:	1af6      	subs	r6, r6, r3
 8017a1e:	1ad3      	subs	r3, r2, r3
 8017a20:	9308      	str	r3, [sp, #32]
 8017a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a24:	b1f3      	cbz	r3, 8017a64 <_dtoa_r+0x78c>
 8017a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f000 80b7 	beq.w	8017b9c <_dtoa_r+0x8c4>
 8017a2e:	b18c      	cbz	r4, 8017a54 <_dtoa_r+0x77c>
 8017a30:	4629      	mov	r1, r5
 8017a32:	4622      	mov	r2, r4
 8017a34:	4658      	mov	r0, fp
 8017a36:	f000 fc1d 	bl	8018274 <__pow5mult>
 8017a3a:	464a      	mov	r2, r9
 8017a3c:	4601      	mov	r1, r0
 8017a3e:	4605      	mov	r5, r0
 8017a40:	4658      	mov	r0, fp
 8017a42:	f000 fb6d 	bl	8018120 <__multiply>
 8017a46:	4649      	mov	r1, r9
 8017a48:	9004      	str	r0, [sp, #16]
 8017a4a:	4658      	mov	r0, fp
 8017a4c:	f000 fa9e 	bl	8017f8c <_Bfree>
 8017a50:	9b04      	ldr	r3, [sp, #16]
 8017a52:	4699      	mov	r9, r3
 8017a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a56:	1b1a      	subs	r2, r3, r4
 8017a58:	d004      	beq.n	8017a64 <_dtoa_r+0x78c>
 8017a5a:	4649      	mov	r1, r9
 8017a5c:	4658      	mov	r0, fp
 8017a5e:	f000 fc09 	bl	8018274 <__pow5mult>
 8017a62:	4681      	mov	r9, r0
 8017a64:	2101      	movs	r1, #1
 8017a66:	4658      	mov	r0, fp
 8017a68:	f000 fb44 	bl	80180f4 <__i2b>
 8017a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017a6e:	4604      	mov	r4, r0
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	f000 81cf 	beq.w	8017e14 <_dtoa_r+0xb3c>
 8017a76:	461a      	mov	r2, r3
 8017a78:	4601      	mov	r1, r0
 8017a7a:	4658      	mov	r0, fp
 8017a7c:	f000 fbfa 	bl	8018274 <__pow5mult>
 8017a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a82:	2b01      	cmp	r3, #1
 8017a84:	4604      	mov	r4, r0
 8017a86:	f300 8095 	bgt.w	8017bb4 <_dtoa_r+0x8dc>
 8017a8a:	9b02      	ldr	r3, [sp, #8]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	f040 8087 	bne.w	8017ba0 <_dtoa_r+0x8c8>
 8017a92:	9b03      	ldr	r3, [sp, #12]
 8017a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f040 8089 	bne.w	8017bb0 <_dtoa_r+0x8d8>
 8017a9e:	9b03      	ldr	r3, [sp, #12]
 8017aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017aa4:	0d1b      	lsrs	r3, r3, #20
 8017aa6:	051b      	lsls	r3, r3, #20
 8017aa8:	b12b      	cbz	r3, 8017ab6 <_dtoa_r+0x7de>
 8017aaa:	9b08      	ldr	r3, [sp, #32]
 8017aac:	3301      	adds	r3, #1
 8017aae:	9308      	str	r3, [sp, #32]
 8017ab0:	f108 0801 	add.w	r8, r8, #1
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	f000 81b0 	beq.w	8017e20 <_dtoa_r+0xb48>
 8017ac0:	6923      	ldr	r3, [r4, #16]
 8017ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017ac6:	6918      	ldr	r0, [r3, #16]
 8017ac8:	f000 fac8 	bl	801805c <__hi0bits>
 8017acc:	f1c0 0020 	rsb	r0, r0, #32
 8017ad0:	9b08      	ldr	r3, [sp, #32]
 8017ad2:	4418      	add	r0, r3
 8017ad4:	f010 001f 	ands.w	r0, r0, #31
 8017ad8:	d077      	beq.n	8017bca <_dtoa_r+0x8f2>
 8017ada:	f1c0 0320 	rsb	r3, r0, #32
 8017ade:	2b04      	cmp	r3, #4
 8017ae0:	dd6b      	ble.n	8017bba <_dtoa_r+0x8e2>
 8017ae2:	9b08      	ldr	r3, [sp, #32]
 8017ae4:	f1c0 001c 	rsb	r0, r0, #28
 8017ae8:	4403      	add	r3, r0
 8017aea:	4480      	add	r8, r0
 8017aec:	4406      	add	r6, r0
 8017aee:	9308      	str	r3, [sp, #32]
 8017af0:	f1b8 0f00 	cmp.w	r8, #0
 8017af4:	dd05      	ble.n	8017b02 <_dtoa_r+0x82a>
 8017af6:	4649      	mov	r1, r9
 8017af8:	4642      	mov	r2, r8
 8017afa:	4658      	mov	r0, fp
 8017afc:	f000 fc14 	bl	8018328 <__lshift>
 8017b00:	4681      	mov	r9, r0
 8017b02:	9b08      	ldr	r3, [sp, #32]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	dd05      	ble.n	8017b14 <_dtoa_r+0x83c>
 8017b08:	4621      	mov	r1, r4
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	4658      	mov	r0, fp
 8017b0e:	f000 fc0b 	bl	8018328 <__lshift>
 8017b12:	4604      	mov	r4, r0
 8017b14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d059      	beq.n	8017bce <_dtoa_r+0x8f6>
 8017b1a:	4621      	mov	r1, r4
 8017b1c:	4648      	mov	r0, r9
 8017b1e:	f000 fc6f 	bl	8018400 <__mcmp>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	da53      	bge.n	8017bce <_dtoa_r+0x8f6>
 8017b26:	1e7b      	subs	r3, r7, #1
 8017b28:	9304      	str	r3, [sp, #16]
 8017b2a:	4649      	mov	r1, r9
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	220a      	movs	r2, #10
 8017b30:	4658      	mov	r0, fp
 8017b32:	f000 fa4d 	bl	8017fd0 <__multadd>
 8017b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017b38:	4681      	mov	r9, r0
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	f000 8172 	beq.w	8017e24 <_dtoa_r+0xb4c>
 8017b40:	2300      	movs	r3, #0
 8017b42:	4629      	mov	r1, r5
 8017b44:	220a      	movs	r2, #10
 8017b46:	4658      	mov	r0, fp
 8017b48:	f000 fa42 	bl	8017fd0 <__multadd>
 8017b4c:	9b00      	ldr	r3, [sp, #0]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	4605      	mov	r5, r0
 8017b52:	dc67      	bgt.n	8017c24 <_dtoa_r+0x94c>
 8017b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b56:	2b02      	cmp	r3, #2
 8017b58:	dc41      	bgt.n	8017bde <_dtoa_r+0x906>
 8017b5a:	e063      	b.n	8017c24 <_dtoa_r+0x94c>
 8017b5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017b5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017b62:	e746      	b.n	80179f2 <_dtoa_r+0x71a>
 8017b64:	9b07      	ldr	r3, [sp, #28]
 8017b66:	1e5c      	subs	r4, r3, #1
 8017b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017b6a:	42a3      	cmp	r3, r4
 8017b6c:	bfbf      	itttt	lt
 8017b6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017b70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017b72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017b74:	1ae3      	sublt	r3, r4, r3
 8017b76:	bfb4      	ite	lt
 8017b78:	18d2      	addlt	r2, r2, r3
 8017b7a:	1b1c      	subge	r4, r3, r4
 8017b7c:	9b07      	ldr	r3, [sp, #28]
 8017b7e:	bfbc      	itt	lt
 8017b80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017b82:	2400      	movlt	r4, #0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	bfb5      	itete	lt
 8017b88:	eba8 0603 	sublt.w	r6, r8, r3
 8017b8c:	9b07      	ldrge	r3, [sp, #28]
 8017b8e:	2300      	movlt	r3, #0
 8017b90:	4646      	movge	r6, r8
 8017b92:	e730      	b.n	80179f6 <_dtoa_r+0x71e>
 8017b94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017b96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017b98:	4646      	mov	r6, r8
 8017b9a:	e735      	b.n	8017a08 <_dtoa_r+0x730>
 8017b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017b9e:	e75c      	b.n	8017a5a <_dtoa_r+0x782>
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	e788      	b.n	8017ab6 <_dtoa_r+0x7de>
 8017ba4:	3fe00000 	.word	0x3fe00000
 8017ba8:	40240000 	.word	0x40240000
 8017bac:	40140000 	.word	0x40140000
 8017bb0:	9b02      	ldr	r3, [sp, #8]
 8017bb2:	e780      	b.n	8017ab6 <_dtoa_r+0x7de>
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8017bb8:	e782      	b.n	8017ac0 <_dtoa_r+0x7e8>
 8017bba:	d099      	beq.n	8017af0 <_dtoa_r+0x818>
 8017bbc:	9a08      	ldr	r2, [sp, #32]
 8017bbe:	331c      	adds	r3, #28
 8017bc0:	441a      	add	r2, r3
 8017bc2:	4498      	add	r8, r3
 8017bc4:	441e      	add	r6, r3
 8017bc6:	9208      	str	r2, [sp, #32]
 8017bc8:	e792      	b.n	8017af0 <_dtoa_r+0x818>
 8017bca:	4603      	mov	r3, r0
 8017bcc:	e7f6      	b.n	8017bbc <_dtoa_r+0x8e4>
 8017bce:	9b07      	ldr	r3, [sp, #28]
 8017bd0:	9704      	str	r7, [sp, #16]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	dc20      	bgt.n	8017c18 <_dtoa_r+0x940>
 8017bd6:	9300      	str	r3, [sp, #0]
 8017bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017bda:	2b02      	cmp	r3, #2
 8017bdc:	dd1e      	ble.n	8017c1c <_dtoa_r+0x944>
 8017bde:	9b00      	ldr	r3, [sp, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f47f aec0 	bne.w	8017966 <_dtoa_r+0x68e>
 8017be6:	4621      	mov	r1, r4
 8017be8:	2205      	movs	r2, #5
 8017bea:	4658      	mov	r0, fp
 8017bec:	f000 f9f0 	bl	8017fd0 <__multadd>
 8017bf0:	4601      	mov	r1, r0
 8017bf2:	4604      	mov	r4, r0
 8017bf4:	4648      	mov	r0, r9
 8017bf6:	f000 fc03 	bl	8018400 <__mcmp>
 8017bfa:	2800      	cmp	r0, #0
 8017bfc:	f77f aeb3 	ble.w	8017966 <_dtoa_r+0x68e>
 8017c00:	4656      	mov	r6, sl
 8017c02:	2331      	movs	r3, #49	@ 0x31
 8017c04:	f806 3b01 	strb.w	r3, [r6], #1
 8017c08:	9b04      	ldr	r3, [sp, #16]
 8017c0a:	3301      	adds	r3, #1
 8017c0c:	9304      	str	r3, [sp, #16]
 8017c0e:	e6ae      	b.n	801796e <_dtoa_r+0x696>
 8017c10:	9c07      	ldr	r4, [sp, #28]
 8017c12:	9704      	str	r7, [sp, #16]
 8017c14:	4625      	mov	r5, r4
 8017c16:	e7f3      	b.n	8017c00 <_dtoa_r+0x928>
 8017c18:	9b07      	ldr	r3, [sp, #28]
 8017c1a:	9300      	str	r3, [sp, #0]
 8017c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f000 8104 	beq.w	8017e2c <_dtoa_r+0xb54>
 8017c24:	2e00      	cmp	r6, #0
 8017c26:	dd05      	ble.n	8017c34 <_dtoa_r+0x95c>
 8017c28:	4629      	mov	r1, r5
 8017c2a:	4632      	mov	r2, r6
 8017c2c:	4658      	mov	r0, fp
 8017c2e:	f000 fb7b 	bl	8018328 <__lshift>
 8017c32:	4605      	mov	r5, r0
 8017c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d05a      	beq.n	8017cf0 <_dtoa_r+0xa18>
 8017c3a:	6869      	ldr	r1, [r5, #4]
 8017c3c:	4658      	mov	r0, fp
 8017c3e:	f000 f965 	bl	8017f0c <_Balloc>
 8017c42:	4606      	mov	r6, r0
 8017c44:	b928      	cbnz	r0, 8017c52 <_dtoa_r+0x97a>
 8017c46:	4b84      	ldr	r3, [pc, #528]	@ (8017e58 <_dtoa_r+0xb80>)
 8017c48:	4602      	mov	r2, r0
 8017c4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017c4e:	f7ff bb5a 	b.w	8017306 <_dtoa_r+0x2e>
 8017c52:	692a      	ldr	r2, [r5, #16]
 8017c54:	3202      	adds	r2, #2
 8017c56:	0092      	lsls	r2, r2, #2
 8017c58:	f105 010c 	add.w	r1, r5, #12
 8017c5c:	300c      	adds	r0, #12
 8017c5e:	f7ff fa84 	bl	801716a <memcpy>
 8017c62:	2201      	movs	r2, #1
 8017c64:	4631      	mov	r1, r6
 8017c66:	4658      	mov	r0, fp
 8017c68:	f000 fb5e 	bl	8018328 <__lshift>
 8017c6c:	f10a 0301 	add.w	r3, sl, #1
 8017c70:	9307      	str	r3, [sp, #28]
 8017c72:	9b00      	ldr	r3, [sp, #0]
 8017c74:	4453      	add	r3, sl
 8017c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017c78:	9b02      	ldr	r3, [sp, #8]
 8017c7a:	f003 0301 	and.w	r3, r3, #1
 8017c7e:	462f      	mov	r7, r5
 8017c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8017c82:	4605      	mov	r5, r0
 8017c84:	9b07      	ldr	r3, [sp, #28]
 8017c86:	4621      	mov	r1, r4
 8017c88:	3b01      	subs	r3, #1
 8017c8a:	4648      	mov	r0, r9
 8017c8c:	9300      	str	r3, [sp, #0]
 8017c8e:	f7ff fa99 	bl	80171c4 <quorem>
 8017c92:	4639      	mov	r1, r7
 8017c94:	9002      	str	r0, [sp, #8]
 8017c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017c9a:	4648      	mov	r0, r9
 8017c9c:	f000 fbb0 	bl	8018400 <__mcmp>
 8017ca0:	462a      	mov	r2, r5
 8017ca2:	9008      	str	r0, [sp, #32]
 8017ca4:	4621      	mov	r1, r4
 8017ca6:	4658      	mov	r0, fp
 8017ca8:	f000 fbc6 	bl	8018438 <__mdiff>
 8017cac:	68c2      	ldr	r2, [r0, #12]
 8017cae:	4606      	mov	r6, r0
 8017cb0:	bb02      	cbnz	r2, 8017cf4 <_dtoa_r+0xa1c>
 8017cb2:	4601      	mov	r1, r0
 8017cb4:	4648      	mov	r0, r9
 8017cb6:	f000 fba3 	bl	8018400 <__mcmp>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	4631      	mov	r1, r6
 8017cbe:	4658      	mov	r0, fp
 8017cc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8017cc2:	f000 f963 	bl	8017f8c <_Bfree>
 8017cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017cca:	9e07      	ldr	r6, [sp, #28]
 8017ccc:	ea43 0102 	orr.w	r1, r3, r2
 8017cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017cd2:	4319      	orrs	r1, r3
 8017cd4:	d110      	bne.n	8017cf8 <_dtoa_r+0xa20>
 8017cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017cda:	d029      	beq.n	8017d30 <_dtoa_r+0xa58>
 8017cdc:	9b08      	ldr	r3, [sp, #32]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	dd02      	ble.n	8017ce8 <_dtoa_r+0xa10>
 8017ce2:	9b02      	ldr	r3, [sp, #8]
 8017ce4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8017ce8:	9b00      	ldr	r3, [sp, #0]
 8017cea:	f883 8000 	strb.w	r8, [r3]
 8017cee:	e63f      	b.n	8017970 <_dtoa_r+0x698>
 8017cf0:	4628      	mov	r0, r5
 8017cf2:	e7bb      	b.n	8017c6c <_dtoa_r+0x994>
 8017cf4:	2201      	movs	r2, #1
 8017cf6:	e7e1      	b.n	8017cbc <_dtoa_r+0x9e4>
 8017cf8:	9b08      	ldr	r3, [sp, #32]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	db04      	blt.n	8017d08 <_dtoa_r+0xa30>
 8017cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017d00:	430b      	orrs	r3, r1
 8017d02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d04:	430b      	orrs	r3, r1
 8017d06:	d120      	bne.n	8017d4a <_dtoa_r+0xa72>
 8017d08:	2a00      	cmp	r2, #0
 8017d0a:	dded      	ble.n	8017ce8 <_dtoa_r+0xa10>
 8017d0c:	4649      	mov	r1, r9
 8017d0e:	2201      	movs	r2, #1
 8017d10:	4658      	mov	r0, fp
 8017d12:	f000 fb09 	bl	8018328 <__lshift>
 8017d16:	4621      	mov	r1, r4
 8017d18:	4681      	mov	r9, r0
 8017d1a:	f000 fb71 	bl	8018400 <__mcmp>
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	dc03      	bgt.n	8017d2a <_dtoa_r+0xa52>
 8017d22:	d1e1      	bne.n	8017ce8 <_dtoa_r+0xa10>
 8017d24:	f018 0f01 	tst.w	r8, #1
 8017d28:	d0de      	beq.n	8017ce8 <_dtoa_r+0xa10>
 8017d2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017d2e:	d1d8      	bne.n	8017ce2 <_dtoa_r+0xa0a>
 8017d30:	9a00      	ldr	r2, [sp, #0]
 8017d32:	2339      	movs	r3, #57	@ 0x39
 8017d34:	7013      	strb	r3, [r2, #0]
 8017d36:	4633      	mov	r3, r6
 8017d38:	461e      	mov	r6, r3
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017d40:	2a39      	cmp	r2, #57	@ 0x39
 8017d42:	d052      	beq.n	8017dea <_dtoa_r+0xb12>
 8017d44:	3201      	adds	r2, #1
 8017d46:	701a      	strb	r2, [r3, #0]
 8017d48:	e612      	b.n	8017970 <_dtoa_r+0x698>
 8017d4a:	2a00      	cmp	r2, #0
 8017d4c:	dd07      	ble.n	8017d5e <_dtoa_r+0xa86>
 8017d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8017d52:	d0ed      	beq.n	8017d30 <_dtoa_r+0xa58>
 8017d54:	9a00      	ldr	r2, [sp, #0]
 8017d56:	f108 0301 	add.w	r3, r8, #1
 8017d5a:	7013      	strb	r3, [r2, #0]
 8017d5c:	e608      	b.n	8017970 <_dtoa_r+0x698>
 8017d5e:	9b07      	ldr	r3, [sp, #28]
 8017d60:	9a07      	ldr	r2, [sp, #28]
 8017d62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8017d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d68:	4293      	cmp	r3, r2
 8017d6a:	d028      	beq.n	8017dbe <_dtoa_r+0xae6>
 8017d6c:	4649      	mov	r1, r9
 8017d6e:	2300      	movs	r3, #0
 8017d70:	220a      	movs	r2, #10
 8017d72:	4658      	mov	r0, fp
 8017d74:	f000 f92c 	bl	8017fd0 <__multadd>
 8017d78:	42af      	cmp	r7, r5
 8017d7a:	4681      	mov	r9, r0
 8017d7c:	f04f 0300 	mov.w	r3, #0
 8017d80:	f04f 020a 	mov.w	r2, #10
 8017d84:	4639      	mov	r1, r7
 8017d86:	4658      	mov	r0, fp
 8017d88:	d107      	bne.n	8017d9a <_dtoa_r+0xac2>
 8017d8a:	f000 f921 	bl	8017fd0 <__multadd>
 8017d8e:	4607      	mov	r7, r0
 8017d90:	4605      	mov	r5, r0
 8017d92:	9b07      	ldr	r3, [sp, #28]
 8017d94:	3301      	adds	r3, #1
 8017d96:	9307      	str	r3, [sp, #28]
 8017d98:	e774      	b.n	8017c84 <_dtoa_r+0x9ac>
 8017d9a:	f000 f919 	bl	8017fd0 <__multadd>
 8017d9e:	4629      	mov	r1, r5
 8017da0:	4607      	mov	r7, r0
 8017da2:	2300      	movs	r3, #0
 8017da4:	220a      	movs	r2, #10
 8017da6:	4658      	mov	r0, fp
 8017da8:	f000 f912 	bl	8017fd0 <__multadd>
 8017dac:	4605      	mov	r5, r0
 8017dae:	e7f0      	b.n	8017d92 <_dtoa_r+0xaba>
 8017db0:	9b00      	ldr	r3, [sp, #0]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	bfcc      	ite	gt
 8017db6:	461e      	movgt	r6, r3
 8017db8:	2601      	movle	r6, #1
 8017dba:	4456      	add	r6, sl
 8017dbc:	2700      	movs	r7, #0
 8017dbe:	4649      	mov	r1, r9
 8017dc0:	2201      	movs	r2, #1
 8017dc2:	4658      	mov	r0, fp
 8017dc4:	f000 fab0 	bl	8018328 <__lshift>
 8017dc8:	4621      	mov	r1, r4
 8017dca:	4681      	mov	r9, r0
 8017dcc:	f000 fb18 	bl	8018400 <__mcmp>
 8017dd0:	2800      	cmp	r0, #0
 8017dd2:	dcb0      	bgt.n	8017d36 <_dtoa_r+0xa5e>
 8017dd4:	d102      	bne.n	8017ddc <_dtoa_r+0xb04>
 8017dd6:	f018 0f01 	tst.w	r8, #1
 8017dda:	d1ac      	bne.n	8017d36 <_dtoa_r+0xa5e>
 8017ddc:	4633      	mov	r3, r6
 8017dde:	461e      	mov	r6, r3
 8017de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017de4:	2a30      	cmp	r2, #48	@ 0x30
 8017de6:	d0fa      	beq.n	8017dde <_dtoa_r+0xb06>
 8017de8:	e5c2      	b.n	8017970 <_dtoa_r+0x698>
 8017dea:	459a      	cmp	sl, r3
 8017dec:	d1a4      	bne.n	8017d38 <_dtoa_r+0xa60>
 8017dee:	9b04      	ldr	r3, [sp, #16]
 8017df0:	3301      	adds	r3, #1
 8017df2:	9304      	str	r3, [sp, #16]
 8017df4:	2331      	movs	r3, #49	@ 0x31
 8017df6:	f88a 3000 	strb.w	r3, [sl]
 8017dfa:	e5b9      	b.n	8017970 <_dtoa_r+0x698>
 8017dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017dfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8017e5c <_dtoa_r+0xb84>
 8017e02:	b11b      	cbz	r3, 8017e0c <_dtoa_r+0xb34>
 8017e04:	f10a 0308 	add.w	r3, sl, #8
 8017e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8017e0a:	6013      	str	r3, [r2, #0]
 8017e0c:	4650      	mov	r0, sl
 8017e0e:	b019      	add	sp, #100	@ 0x64
 8017e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	f77f ae37 	ble.w	8017a8a <_dtoa_r+0x7b2>
 8017e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e20:	2001      	movs	r0, #1
 8017e22:	e655      	b.n	8017ad0 <_dtoa_r+0x7f8>
 8017e24:	9b00      	ldr	r3, [sp, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	f77f aed6 	ble.w	8017bd8 <_dtoa_r+0x900>
 8017e2c:	4656      	mov	r6, sl
 8017e2e:	4621      	mov	r1, r4
 8017e30:	4648      	mov	r0, r9
 8017e32:	f7ff f9c7 	bl	80171c4 <quorem>
 8017e36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017e3a:	f806 8b01 	strb.w	r8, [r6], #1
 8017e3e:	9b00      	ldr	r3, [sp, #0]
 8017e40:	eba6 020a 	sub.w	r2, r6, sl
 8017e44:	4293      	cmp	r3, r2
 8017e46:	ddb3      	ble.n	8017db0 <_dtoa_r+0xad8>
 8017e48:	4649      	mov	r1, r9
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	220a      	movs	r2, #10
 8017e4e:	4658      	mov	r0, fp
 8017e50:	f000 f8be 	bl	8017fd0 <__multadd>
 8017e54:	4681      	mov	r9, r0
 8017e56:	e7ea      	b.n	8017e2e <_dtoa_r+0xb56>
 8017e58:	08019fb8 	.word	0x08019fb8
 8017e5c:	08019f53 	.word	0x08019f53

08017e60 <__env_lock>:
 8017e60:	4801      	ldr	r0, [pc, #4]	@ (8017e68 <__env_lock+0x8>)
 8017e62:	f7ff b978 	b.w	8017156 <__retarget_lock_acquire_recursive>
 8017e66:	bf00      	nop
 8017e68:	20010eb0 	.word	0x20010eb0

08017e6c <__env_unlock>:
 8017e6c:	4801      	ldr	r0, [pc, #4]	@ (8017e74 <__env_unlock+0x8>)
 8017e6e:	f7ff b973 	b.w	8017158 <__retarget_lock_release_recursive>
 8017e72:	bf00      	nop
 8017e74:	20010eb0 	.word	0x20010eb0

08017e78 <_free_r>:
 8017e78:	b538      	push	{r3, r4, r5, lr}
 8017e7a:	4605      	mov	r5, r0
 8017e7c:	2900      	cmp	r1, #0
 8017e7e:	d041      	beq.n	8017f04 <_free_r+0x8c>
 8017e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e84:	1f0c      	subs	r4, r1, #4
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	bfb8      	it	lt
 8017e8a:	18e4      	addlt	r4, r4, r3
 8017e8c:	f7fd ffce 	bl	8015e2c <__malloc_lock>
 8017e90:	4a1d      	ldr	r2, [pc, #116]	@ (8017f08 <_free_r+0x90>)
 8017e92:	6813      	ldr	r3, [r2, #0]
 8017e94:	b933      	cbnz	r3, 8017ea4 <_free_r+0x2c>
 8017e96:	6063      	str	r3, [r4, #4]
 8017e98:	6014      	str	r4, [r2, #0]
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ea0:	f7fd bfca 	b.w	8015e38 <__malloc_unlock>
 8017ea4:	42a3      	cmp	r3, r4
 8017ea6:	d908      	bls.n	8017eba <_free_r+0x42>
 8017ea8:	6820      	ldr	r0, [r4, #0]
 8017eaa:	1821      	adds	r1, r4, r0
 8017eac:	428b      	cmp	r3, r1
 8017eae:	bf01      	itttt	eq
 8017eb0:	6819      	ldreq	r1, [r3, #0]
 8017eb2:	685b      	ldreq	r3, [r3, #4]
 8017eb4:	1809      	addeq	r1, r1, r0
 8017eb6:	6021      	streq	r1, [r4, #0]
 8017eb8:	e7ed      	b.n	8017e96 <_free_r+0x1e>
 8017eba:	461a      	mov	r2, r3
 8017ebc:	685b      	ldr	r3, [r3, #4]
 8017ebe:	b10b      	cbz	r3, 8017ec4 <_free_r+0x4c>
 8017ec0:	42a3      	cmp	r3, r4
 8017ec2:	d9fa      	bls.n	8017eba <_free_r+0x42>
 8017ec4:	6811      	ldr	r1, [r2, #0]
 8017ec6:	1850      	adds	r0, r2, r1
 8017ec8:	42a0      	cmp	r0, r4
 8017eca:	d10b      	bne.n	8017ee4 <_free_r+0x6c>
 8017ecc:	6820      	ldr	r0, [r4, #0]
 8017ece:	4401      	add	r1, r0
 8017ed0:	1850      	adds	r0, r2, r1
 8017ed2:	4283      	cmp	r3, r0
 8017ed4:	6011      	str	r1, [r2, #0]
 8017ed6:	d1e0      	bne.n	8017e9a <_free_r+0x22>
 8017ed8:	6818      	ldr	r0, [r3, #0]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	6053      	str	r3, [r2, #4]
 8017ede:	4408      	add	r0, r1
 8017ee0:	6010      	str	r0, [r2, #0]
 8017ee2:	e7da      	b.n	8017e9a <_free_r+0x22>
 8017ee4:	d902      	bls.n	8017eec <_free_r+0x74>
 8017ee6:	230c      	movs	r3, #12
 8017ee8:	602b      	str	r3, [r5, #0]
 8017eea:	e7d6      	b.n	8017e9a <_free_r+0x22>
 8017eec:	6820      	ldr	r0, [r4, #0]
 8017eee:	1821      	adds	r1, r4, r0
 8017ef0:	428b      	cmp	r3, r1
 8017ef2:	bf04      	itt	eq
 8017ef4:	6819      	ldreq	r1, [r3, #0]
 8017ef6:	685b      	ldreq	r3, [r3, #4]
 8017ef8:	6063      	str	r3, [r4, #4]
 8017efa:	bf04      	itt	eq
 8017efc:	1809      	addeq	r1, r1, r0
 8017efe:	6021      	streq	r1, [r4, #0]
 8017f00:	6054      	str	r4, [r2, #4]
 8017f02:	e7ca      	b.n	8017e9a <_free_r+0x22>
 8017f04:	bd38      	pop	{r3, r4, r5, pc}
 8017f06:	bf00      	nop
 8017f08:	20010d6c 	.word	0x20010d6c

08017f0c <_Balloc>:
 8017f0c:	b570      	push	{r4, r5, r6, lr}
 8017f0e:	69c6      	ldr	r6, [r0, #28]
 8017f10:	4604      	mov	r4, r0
 8017f12:	460d      	mov	r5, r1
 8017f14:	b976      	cbnz	r6, 8017f34 <_Balloc+0x28>
 8017f16:	2010      	movs	r0, #16
 8017f18:	f7fd fed6 	bl	8015cc8 <malloc>
 8017f1c:	4602      	mov	r2, r0
 8017f1e:	61e0      	str	r0, [r4, #28]
 8017f20:	b920      	cbnz	r0, 8017f2c <_Balloc+0x20>
 8017f22:	4b18      	ldr	r3, [pc, #96]	@ (8017f84 <_Balloc+0x78>)
 8017f24:	4818      	ldr	r0, [pc, #96]	@ (8017f88 <_Balloc+0x7c>)
 8017f26:	216b      	movs	r1, #107	@ 0x6b
 8017f28:	f7ff f92e 	bl	8017188 <__assert_func>
 8017f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f30:	6006      	str	r6, [r0, #0]
 8017f32:	60c6      	str	r6, [r0, #12]
 8017f34:	69e6      	ldr	r6, [r4, #28]
 8017f36:	68f3      	ldr	r3, [r6, #12]
 8017f38:	b183      	cbz	r3, 8017f5c <_Balloc+0x50>
 8017f3a:	69e3      	ldr	r3, [r4, #28]
 8017f3c:	68db      	ldr	r3, [r3, #12]
 8017f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f42:	b9b8      	cbnz	r0, 8017f74 <_Balloc+0x68>
 8017f44:	2101      	movs	r1, #1
 8017f46:	fa01 f605 	lsl.w	r6, r1, r5
 8017f4a:	1d72      	adds	r2, r6, #5
 8017f4c:	0092      	lsls	r2, r2, #2
 8017f4e:	4620      	mov	r0, r4
 8017f50:	f7fd fe32 	bl	8015bb8 <_calloc_r>
 8017f54:	b160      	cbz	r0, 8017f70 <_Balloc+0x64>
 8017f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f5a:	e00e      	b.n	8017f7a <_Balloc+0x6e>
 8017f5c:	2221      	movs	r2, #33	@ 0x21
 8017f5e:	2104      	movs	r1, #4
 8017f60:	4620      	mov	r0, r4
 8017f62:	f7fd fe29 	bl	8015bb8 <_calloc_r>
 8017f66:	69e3      	ldr	r3, [r4, #28]
 8017f68:	60f0      	str	r0, [r6, #12]
 8017f6a:	68db      	ldr	r3, [r3, #12]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d1e4      	bne.n	8017f3a <_Balloc+0x2e>
 8017f70:	2000      	movs	r0, #0
 8017f72:	bd70      	pop	{r4, r5, r6, pc}
 8017f74:	6802      	ldr	r2, [r0, #0]
 8017f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f80:	e7f7      	b.n	8017f72 <_Balloc+0x66>
 8017f82:	bf00      	nop
 8017f84:	08019d4e 	.word	0x08019d4e
 8017f88:	08019fc9 	.word	0x08019fc9

08017f8c <_Bfree>:
 8017f8c:	b570      	push	{r4, r5, r6, lr}
 8017f8e:	69c6      	ldr	r6, [r0, #28]
 8017f90:	4605      	mov	r5, r0
 8017f92:	460c      	mov	r4, r1
 8017f94:	b976      	cbnz	r6, 8017fb4 <_Bfree+0x28>
 8017f96:	2010      	movs	r0, #16
 8017f98:	f7fd fe96 	bl	8015cc8 <malloc>
 8017f9c:	4602      	mov	r2, r0
 8017f9e:	61e8      	str	r0, [r5, #28]
 8017fa0:	b920      	cbnz	r0, 8017fac <_Bfree+0x20>
 8017fa2:	4b09      	ldr	r3, [pc, #36]	@ (8017fc8 <_Bfree+0x3c>)
 8017fa4:	4809      	ldr	r0, [pc, #36]	@ (8017fcc <_Bfree+0x40>)
 8017fa6:	218f      	movs	r1, #143	@ 0x8f
 8017fa8:	f7ff f8ee 	bl	8017188 <__assert_func>
 8017fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fb0:	6006      	str	r6, [r0, #0]
 8017fb2:	60c6      	str	r6, [r0, #12]
 8017fb4:	b13c      	cbz	r4, 8017fc6 <_Bfree+0x3a>
 8017fb6:	69eb      	ldr	r3, [r5, #28]
 8017fb8:	6862      	ldr	r2, [r4, #4]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fc0:	6021      	str	r1, [r4, #0]
 8017fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017fc6:	bd70      	pop	{r4, r5, r6, pc}
 8017fc8:	08019d4e 	.word	0x08019d4e
 8017fcc:	08019fc9 	.word	0x08019fc9

08017fd0 <__multadd>:
 8017fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	690d      	ldr	r5, [r1, #16]
 8017fd6:	4607      	mov	r7, r0
 8017fd8:	460c      	mov	r4, r1
 8017fda:	461e      	mov	r6, r3
 8017fdc:	f101 0c14 	add.w	ip, r1, #20
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8017fe6:	b299      	uxth	r1, r3
 8017fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8017fec:	0c1e      	lsrs	r6, r3, #16
 8017fee:	0c0b      	lsrs	r3, r1, #16
 8017ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8017ff4:	b289      	uxth	r1, r1
 8017ff6:	3001      	adds	r0, #1
 8017ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017ffc:	4285      	cmp	r5, r0
 8017ffe:	f84c 1b04 	str.w	r1, [ip], #4
 8018002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018006:	dcec      	bgt.n	8017fe2 <__multadd+0x12>
 8018008:	b30e      	cbz	r6, 801804e <__multadd+0x7e>
 801800a:	68a3      	ldr	r3, [r4, #8]
 801800c:	42ab      	cmp	r3, r5
 801800e:	dc19      	bgt.n	8018044 <__multadd+0x74>
 8018010:	6861      	ldr	r1, [r4, #4]
 8018012:	4638      	mov	r0, r7
 8018014:	3101      	adds	r1, #1
 8018016:	f7ff ff79 	bl	8017f0c <_Balloc>
 801801a:	4680      	mov	r8, r0
 801801c:	b928      	cbnz	r0, 801802a <__multadd+0x5a>
 801801e:	4602      	mov	r2, r0
 8018020:	4b0c      	ldr	r3, [pc, #48]	@ (8018054 <__multadd+0x84>)
 8018022:	480d      	ldr	r0, [pc, #52]	@ (8018058 <__multadd+0x88>)
 8018024:	21ba      	movs	r1, #186	@ 0xba
 8018026:	f7ff f8af 	bl	8017188 <__assert_func>
 801802a:	6922      	ldr	r2, [r4, #16]
 801802c:	3202      	adds	r2, #2
 801802e:	f104 010c 	add.w	r1, r4, #12
 8018032:	0092      	lsls	r2, r2, #2
 8018034:	300c      	adds	r0, #12
 8018036:	f7ff f898 	bl	801716a <memcpy>
 801803a:	4621      	mov	r1, r4
 801803c:	4638      	mov	r0, r7
 801803e:	f7ff ffa5 	bl	8017f8c <_Bfree>
 8018042:	4644      	mov	r4, r8
 8018044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018048:	3501      	adds	r5, #1
 801804a:	615e      	str	r6, [r3, #20]
 801804c:	6125      	str	r5, [r4, #16]
 801804e:	4620      	mov	r0, r4
 8018050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018054:	08019fb8 	.word	0x08019fb8
 8018058:	08019fc9 	.word	0x08019fc9

0801805c <__hi0bits>:
 801805c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018060:	4603      	mov	r3, r0
 8018062:	bf36      	itet	cc
 8018064:	0403      	lslcc	r3, r0, #16
 8018066:	2000      	movcs	r0, #0
 8018068:	2010      	movcc	r0, #16
 801806a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801806e:	bf3c      	itt	cc
 8018070:	021b      	lslcc	r3, r3, #8
 8018072:	3008      	addcc	r0, #8
 8018074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018078:	bf3c      	itt	cc
 801807a:	011b      	lslcc	r3, r3, #4
 801807c:	3004      	addcc	r0, #4
 801807e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018082:	bf3c      	itt	cc
 8018084:	009b      	lslcc	r3, r3, #2
 8018086:	3002      	addcc	r0, #2
 8018088:	2b00      	cmp	r3, #0
 801808a:	db05      	blt.n	8018098 <__hi0bits+0x3c>
 801808c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018090:	f100 0001 	add.w	r0, r0, #1
 8018094:	bf08      	it	eq
 8018096:	2020      	moveq	r0, #32
 8018098:	4770      	bx	lr

0801809a <__lo0bits>:
 801809a:	6803      	ldr	r3, [r0, #0]
 801809c:	4602      	mov	r2, r0
 801809e:	f013 0007 	ands.w	r0, r3, #7
 80180a2:	d00b      	beq.n	80180bc <__lo0bits+0x22>
 80180a4:	07d9      	lsls	r1, r3, #31
 80180a6:	d421      	bmi.n	80180ec <__lo0bits+0x52>
 80180a8:	0798      	lsls	r0, r3, #30
 80180aa:	bf49      	itett	mi
 80180ac:	085b      	lsrmi	r3, r3, #1
 80180ae:	089b      	lsrpl	r3, r3, #2
 80180b0:	2001      	movmi	r0, #1
 80180b2:	6013      	strmi	r3, [r2, #0]
 80180b4:	bf5c      	itt	pl
 80180b6:	6013      	strpl	r3, [r2, #0]
 80180b8:	2002      	movpl	r0, #2
 80180ba:	4770      	bx	lr
 80180bc:	b299      	uxth	r1, r3
 80180be:	b909      	cbnz	r1, 80180c4 <__lo0bits+0x2a>
 80180c0:	0c1b      	lsrs	r3, r3, #16
 80180c2:	2010      	movs	r0, #16
 80180c4:	b2d9      	uxtb	r1, r3
 80180c6:	b909      	cbnz	r1, 80180cc <__lo0bits+0x32>
 80180c8:	3008      	adds	r0, #8
 80180ca:	0a1b      	lsrs	r3, r3, #8
 80180cc:	0719      	lsls	r1, r3, #28
 80180ce:	bf04      	itt	eq
 80180d0:	091b      	lsreq	r3, r3, #4
 80180d2:	3004      	addeq	r0, #4
 80180d4:	0799      	lsls	r1, r3, #30
 80180d6:	bf04      	itt	eq
 80180d8:	089b      	lsreq	r3, r3, #2
 80180da:	3002      	addeq	r0, #2
 80180dc:	07d9      	lsls	r1, r3, #31
 80180de:	d403      	bmi.n	80180e8 <__lo0bits+0x4e>
 80180e0:	085b      	lsrs	r3, r3, #1
 80180e2:	f100 0001 	add.w	r0, r0, #1
 80180e6:	d003      	beq.n	80180f0 <__lo0bits+0x56>
 80180e8:	6013      	str	r3, [r2, #0]
 80180ea:	4770      	bx	lr
 80180ec:	2000      	movs	r0, #0
 80180ee:	4770      	bx	lr
 80180f0:	2020      	movs	r0, #32
 80180f2:	4770      	bx	lr

080180f4 <__i2b>:
 80180f4:	b510      	push	{r4, lr}
 80180f6:	460c      	mov	r4, r1
 80180f8:	2101      	movs	r1, #1
 80180fa:	f7ff ff07 	bl	8017f0c <_Balloc>
 80180fe:	4602      	mov	r2, r0
 8018100:	b928      	cbnz	r0, 801810e <__i2b+0x1a>
 8018102:	4b05      	ldr	r3, [pc, #20]	@ (8018118 <__i2b+0x24>)
 8018104:	4805      	ldr	r0, [pc, #20]	@ (801811c <__i2b+0x28>)
 8018106:	f240 1145 	movw	r1, #325	@ 0x145
 801810a:	f7ff f83d 	bl	8017188 <__assert_func>
 801810e:	2301      	movs	r3, #1
 8018110:	6144      	str	r4, [r0, #20]
 8018112:	6103      	str	r3, [r0, #16]
 8018114:	bd10      	pop	{r4, pc}
 8018116:	bf00      	nop
 8018118:	08019fb8 	.word	0x08019fb8
 801811c:	08019fc9 	.word	0x08019fc9

08018120 <__multiply>:
 8018120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018124:	4614      	mov	r4, r2
 8018126:	690a      	ldr	r2, [r1, #16]
 8018128:	6923      	ldr	r3, [r4, #16]
 801812a:	429a      	cmp	r2, r3
 801812c:	bfa8      	it	ge
 801812e:	4623      	movge	r3, r4
 8018130:	460f      	mov	r7, r1
 8018132:	bfa4      	itt	ge
 8018134:	460c      	movge	r4, r1
 8018136:	461f      	movge	r7, r3
 8018138:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801813c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018140:	68a3      	ldr	r3, [r4, #8]
 8018142:	6861      	ldr	r1, [r4, #4]
 8018144:	eb0a 0609 	add.w	r6, sl, r9
 8018148:	42b3      	cmp	r3, r6
 801814a:	b085      	sub	sp, #20
 801814c:	bfb8      	it	lt
 801814e:	3101      	addlt	r1, #1
 8018150:	f7ff fedc 	bl	8017f0c <_Balloc>
 8018154:	b930      	cbnz	r0, 8018164 <__multiply+0x44>
 8018156:	4602      	mov	r2, r0
 8018158:	4b44      	ldr	r3, [pc, #272]	@ (801826c <__multiply+0x14c>)
 801815a:	4845      	ldr	r0, [pc, #276]	@ (8018270 <__multiply+0x150>)
 801815c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018160:	f7ff f812 	bl	8017188 <__assert_func>
 8018164:	f100 0514 	add.w	r5, r0, #20
 8018168:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801816c:	462b      	mov	r3, r5
 801816e:	2200      	movs	r2, #0
 8018170:	4543      	cmp	r3, r8
 8018172:	d321      	bcc.n	80181b8 <__multiply+0x98>
 8018174:	f107 0114 	add.w	r1, r7, #20
 8018178:	f104 0214 	add.w	r2, r4, #20
 801817c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018180:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018184:	9302      	str	r3, [sp, #8]
 8018186:	1b13      	subs	r3, r2, r4
 8018188:	3b15      	subs	r3, #21
 801818a:	f023 0303 	bic.w	r3, r3, #3
 801818e:	3304      	adds	r3, #4
 8018190:	f104 0715 	add.w	r7, r4, #21
 8018194:	42ba      	cmp	r2, r7
 8018196:	bf38      	it	cc
 8018198:	2304      	movcc	r3, #4
 801819a:	9301      	str	r3, [sp, #4]
 801819c:	9b02      	ldr	r3, [sp, #8]
 801819e:	9103      	str	r1, [sp, #12]
 80181a0:	428b      	cmp	r3, r1
 80181a2:	d80c      	bhi.n	80181be <__multiply+0x9e>
 80181a4:	2e00      	cmp	r6, #0
 80181a6:	dd03      	ble.n	80181b0 <__multiply+0x90>
 80181a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d05b      	beq.n	8018268 <__multiply+0x148>
 80181b0:	6106      	str	r6, [r0, #16]
 80181b2:	b005      	add	sp, #20
 80181b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181b8:	f843 2b04 	str.w	r2, [r3], #4
 80181bc:	e7d8      	b.n	8018170 <__multiply+0x50>
 80181be:	f8b1 a000 	ldrh.w	sl, [r1]
 80181c2:	f1ba 0f00 	cmp.w	sl, #0
 80181c6:	d024      	beq.n	8018212 <__multiply+0xf2>
 80181c8:	f104 0e14 	add.w	lr, r4, #20
 80181cc:	46a9      	mov	r9, r5
 80181ce:	f04f 0c00 	mov.w	ip, #0
 80181d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80181d6:	f8d9 3000 	ldr.w	r3, [r9]
 80181da:	fa1f fb87 	uxth.w	fp, r7
 80181de:	b29b      	uxth	r3, r3
 80181e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80181e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80181e8:	f8d9 7000 	ldr.w	r7, [r9]
 80181ec:	4463      	add	r3, ip
 80181ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80181f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80181f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80181fa:	b29b      	uxth	r3, r3
 80181fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018200:	4572      	cmp	r2, lr
 8018202:	f849 3b04 	str.w	r3, [r9], #4
 8018206:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801820a:	d8e2      	bhi.n	80181d2 <__multiply+0xb2>
 801820c:	9b01      	ldr	r3, [sp, #4]
 801820e:	f845 c003 	str.w	ip, [r5, r3]
 8018212:	9b03      	ldr	r3, [sp, #12]
 8018214:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018218:	3104      	adds	r1, #4
 801821a:	f1b9 0f00 	cmp.w	r9, #0
 801821e:	d021      	beq.n	8018264 <__multiply+0x144>
 8018220:	682b      	ldr	r3, [r5, #0]
 8018222:	f104 0c14 	add.w	ip, r4, #20
 8018226:	46ae      	mov	lr, r5
 8018228:	f04f 0a00 	mov.w	sl, #0
 801822c:	f8bc b000 	ldrh.w	fp, [ip]
 8018230:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018234:	fb09 770b 	mla	r7, r9, fp, r7
 8018238:	4457      	add	r7, sl
 801823a:	b29b      	uxth	r3, r3
 801823c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018240:	f84e 3b04 	str.w	r3, [lr], #4
 8018244:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801824c:	f8be 3000 	ldrh.w	r3, [lr]
 8018250:	fb09 330a 	mla	r3, r9, sl, r3
 8018254:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018258:	4562      	cmp	r2, ip
 801825a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801825e:	d8e5      	bhi.n	801822c <__multiply+0x10c>
 8018260:	9f01      	ldr	r7, [sp, #4]
 8018262:	51eb      	str	r3, [r5, r7]
 8018264:	3504      	adds	r5, #4
 8018266:	e799      	b.n	801819c <__multiply+0x7c>
 8018268:	3e01      	subs	r6, #1
 801826a:	e79b      	b.n	80181a4 <__multiply+0x84>
 801826c:	08019fb8 	.word	0x08019fb8
 8018270:	08019fc9 	.word	0x08019fc9

08018274 <__pow5mult>:
 8018274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018278:	4615      	mov	r5, r2
 801827a:	f012 0203 	ands.w	r2, r2, #3
 801827e:	4607      	mov	r7, r0
 8018280:	460e      	mov	r6, r1
 8018282:	d007      	beq.n	8018294 <__pow5mult+0x20>
 8018284:	4c25      	ldr	r4, [pc, #148]	@ (801831c <__pow5mult+0xa8>)
 8018286:	3a01      	subs	r2, #1
 8018288:	2300      	movs	r3, #0
 801828a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801828e:	f7ff fe9f 	bl	8017fd0 <__multadd>
 8018292:	4606      	mov	r6, r0
 8018294:	10ad      	asrs	r5, r5, #2
 8018296:	d03d      	beq.n	8018314 <__pow5mult+0xa0>
 8018298:	69fc      	ldr	r4, [r7, #28]
 801829a:	b97c      	cbnz	r4, 80182bc <__pow5mult+0x48>
 801829c:	2010      	movs	r0, #16
 801829e:	f7fd fd13 	bl	8015cc8 <malloc>
 80182a2:	4602      	mov	r2, r0
 80182a4:	61f8      	str	r0, [r7, #28]
 80182a6:	b928      	cbnz	r0, 80182b4 <__pow5mult+0x40>
 80182a8:	4b1d      	ldr	r3, [pc, #116]	@ (8018320 <__pow5mult+0xac>)
 80182aa:	481e      	ldr	r0, [pc, #120]	@ (8018324 <__pow5mult+0xb0>)
 80182ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80182b0:	f7fe ff6a 	bl	8017188 <__assert_func>
 80182b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182b8:	6004      	str	r4, [r0, #0]
 80182ba:	60c4      	str	r4, [r0, #12]
 80182bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80182c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182c4:	b94c      	cbnz	r4, 80182da <__pow5mult+0x66>
 80182c6:	f240 2171 	movw	r1, #625	@ 0x271
 80182ca:	4638      	mov	r0, r7
 80182cc:	f7ff ff12 	bl	80180f4 <__i2b>
 80182d0:	2300      	movs	r3, #0
 80182d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80182d6:	4604      	mov	r4, r0
 80182d8:	6003      	str	r3, [r0, #0]
 80182da:	f04f 0900 	mov.w	r9, #0
 80182de:	07eb      	lsls	r3, r5, #31
 80182e0:	d50a      	bpl.n	80182f8 <__pow5mult+0x84>
 80182e2:	4631      	mov	r1, r6
 80182e4:	4622      	mov	r2, r4
 80182e6:	4638      	mov	r0, r7
 80182e8:	f7ff ff1a 	bl	8018120 <__multiply>
 80182ec:	4631      	mov	r1, r6
 80182ee:	4680      	mov	r8, r0
 80182f0:	4638      	mov	r0, r7
 80182f2:	f7ff fe4b 	bl	8017f8c <_Bfree>
 80182f6:	4646      	mov	r6, r8
 80182f8:	106d      	asrs	r5, r5, #1
 80182fa:	d00b      	beq.n	8018314 <__pow5mult+0xa0>
 80182fc:	6820      	ldr	r0, [r4, #0]
 80182fe:	b938      	cbnz	r0, 8018310 <__pow5mult+0x9c>
 8018300:	4622      	mov	r2, r4
 8018302:	4621      	mov	r1, r4
 8018304:	4638      	mov	r0, r7
 8018306:	f7ff ff0b 	bl	8018120 <__multiply>
 801830a:	6020      	str	r0, [r4, #0]
 801830c:	f8c0 9000 	str.w	r9, [r0]
 8018310:	4604      	mov	r4, r0
 8018312:	e7e4      	b.n	80182de <__pow5mult+0x6a>
 8018314:	4630      	mov	r0, r6
 8018316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801831a:	bf00      	nop
 801831c:	0801a024 	.word	0x0801a024
 8018320:	08019d4e 	.word	0x08019d4e
 8018324:	08019fc9 	.word	0x08019fc9

08018328 <__lshift>:
 8018328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801832c:	460c      	mov	r4, r1
 801832e:	6849      	ldr	r1, [r1, #4]
 8018330:	6923      	ldr	r3, [r4, #16]
 8018332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018336:	68a3      	ldr	r3, [r4, #8]
 8018338:	4607      	mov	r7, r0
 801833a:	4691      	mov	r9, r2
 801833c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018340:	f108 0601 	add.w	r6, r8, #1
 8018344:	42b3      	cmp	r3, r6
 8018346:	db0b      	blt.n	8018360 <__lshift+0x38>
 8018348:	4638      	mov	r0, r7
 801834a:	f7ff fddf 	bl	8017f0c <_Balloc>
 801834e:	4605      	mov	r5, r0
 8018350:	b948      	cbnz	r0, 8018366 <__lshift+0x3e>
 8018352:	4602      	mov	r2, r0
 8018354:	4b28      	ldr	r3, [pc, #160]	@ (80183f8 <__lshift+0xd0>)
 8018356:	4829      	ldr	r0, [pc, #164]	@ (80183fc <__lshift+0xd4>)
 8018358:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801835c:	f7fe ff14 	bl	8017188 <__assert_func>
 8018360:	3101      	adds	r1, #1
 8018362:	005b      	lsls	r3, r3, #1
 8018364:	e7ee      	b.n	8018344 <__lshift+0x1c>
 8018366:	2300      	movs	r3, #0
 8018368:	f100 0114 	add.w	r1, r0, #20
 801836c:	f100 0210 	add.w	r2, r0, #16
 8018370:	4618      	mov	r0, r3
 8018372:	4553      	cmp	r3, sl
 8018374:	db33      	blt.n	80183de <__lshift+0xb6>
 8018376:	6920      	ldr	r0, [r4, #16]
 8018378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801837c:	f104 0314 	add.w	r3, r4, #20
 8018380:	f019 091f 	ands.w	r9, r9, #31
 8018384:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018388:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801838c:	d02b      	beq.n	80183e6 <__lshift+0xbe>
 801838e:	f1c9 0e20 	rsb	lr, r9, #32
 8018392:	468a      	mov	sl, r1
 8018394:	2200      	movs	r2, #0
 8018396:	6818      	ldr	r0, [r3, #0]
 8018398:	fa00 f009 	lsl.w	r0, r0, r9
 801839c:	4310      	orrs	r0, r2
 801839e:	f84a 0b04 	str.w	r0, [sl], #4
 80183a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80183a6:	459c      	cmp	ip, r3
 80183a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80183ac:	d8f3      	bhi.n	8018396 <__lshift+0x6e>
 80183ae:	ebac 0304 	sub.w	r3, ip, r4
 80183b2:	3b15      	subs	r3, #21
 80183b4:	f023 0303 	bic.w	r3, r3, #3
 80183b8:	3304      	adds	r3, #4
 80183ba:	f104 0015 	add.w	r0, r4, #21
 80183be:	4584      	cmp	ip, r0
 80183c0:	bf38      	it	cc
 80183c2:	2304      	movcc	r3, #4
 80183c4:	50ca      	str	r2, [r1, r3]
 80183c6:	b10a      	cbz	r2, 80183cc <__lshift+0xa4>
 80183c8:	f108 0602 	add.w	r6, r8, #2
 80183cc:	3e01      	subs	r6, #1
 80183ce:	4638      	mov	r0, r7
 80183d0:	612e      	str	r6, [r5, #16]
 80183d2:	4621      	mov	r1, r4
 80183d4:	f7ff fdda 	bl	8017f8c <_Bfree>
 80183d8:	4628      	mov	r0, r5
 80183da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183de:	f842 0f04 	str.w	r0, [r2, #4]!
 80183e2:	3301      	adds	r3, #1
 80183e4:	e7c5      	b.n	8018372 <__lshift+0x4a>
 80183e6:	3904      	subs	r1, #4
 80183e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80183ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80183f0:	459c      	cmp	ip, r3
 80183f2:	d8f9      	bhi.n	80183e8 <__lshift+0xc0>
 80183f4:	e7ea      	b.n	80183cc <__lshift+0xa4>
 80183f6:	bf00      	nop
 80183f8:	08019fb8 	.word	0x08019fb8
 80183fc:	08019fc9 	.word	0x08019fc9

08018400 <__mcmp>:
 8018400:	690a      	ldr	r2, [r1, #16]
 8018402:	4603      	mov	r3, r0
 8018404:	6900      	ldr	r0, [r0, #16]
 8018406:	1a80      	subs	r0, r0, r2
 8018408:	b530      	push	{r4, r5, lr}
 801840a:	d10e      	bne.n	801842a <__mcmp+0x2a>
 801840c:	3314      	adds	r3, #20
 801840e:	3114      	adds	r1, #20
 8018410:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018414:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018418:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801841c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018420:	4295      	cmp	r5, r2
 8018422:	d003      	beq.n	801842c <__mcmp+0x2c>
 8018424:	d205      	bcs.n	8018432 <__mcmp+0x32>
 8018426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801842a:	bd30      	pop	{r4, r5, pc}
 801842c:	42a3      	cmp	r3, r4
 801842e:	d3f3      	bcc.n	8018418 <__mcmp+0x18>
 8018430:	e7fb      	b.n	801842a <__mcmp+0x2a>
 8018432:	2001      	movs	r0, #1
 8018434:	e7f9      	b.n	801842a <__mcmp+0x2a>
	...

08018438 <__mdiff>:
 8018438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801843c:	4689      	mov	r9, r1
 801843e:	4606      	mov	r6, r0
 8018440:	4611      	mov	r1, r2
 8018442:	4648      	mov	r0, r9
 8018444:	4614      	mov	r4, r2
 8018446:	f7ff ffdb 	bl	8018400 <__mcmp>
 801844a:	1e05      	subs	r5, r0, #0
 801844c:	d112      	bne.n	8018474 <__mdiff+0x3c>
 801844e:	4629      	mov	r1, r5
 8018450:	4630      	mov	r0, r6
 8018452:	f7ff fd5b 	bl	8017f0c <_Balloc>
 8018456:	4602      	mov	r2, r0
 8018458:	b928      	cbnz	r0, 8018466 <__mdiff+0x2e>
 801845a:	4b3f      	ldr	r3, [pc, #252]	@ (8018558 <__mdiff+0x120>)
 801845c:	f240 2137 	movw	r1, #567	@ 0x237
 8018460:	483e      	ldr	r0, [pc, #248]	@ (801855c <__mdiff+0x124>)
 8018462:	f7fe fe91 	bl	8017188 <__assert_func>
 8018466:	2301      	movs	r3, #1
 8018468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801846c:	4610      	mov	r0, r2
 801846e:	b003      	add	sp, #12
 8018470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018474:	bfbc      	itt	lt
 8018476:	464b      	movlt	r3, r9
 8018478:	46a1      	movlt	r9, r4
 801847a:	4630      	mov	r0, r6
 801847c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018480:	bfba      	itte	lt
 8018482:	461c      	movlt	r4, r3
 8018484:	2501      	movlt	r5, #1
 8018486:	2500      	movge	r5, #0
 8018488:	f7ff fd40 	bl	8017f0c <_Balloc>
 801848c:	4602      	mov	r2, r0
 801848e:	b918      	cbnz	r0, 8018498 <__mdiff+0x60>
 8018490:	4b31      	ldr	r3, [pc, #196]	@ (8018558 <__mdiff+0x120>)
 8018492:	f240 2145 	movw	r1, #581	@ 0x245
 8018496:	e7e3      	b.n	8018460 <__mdiff+0x28>
 8018498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801849c:	6926      	ldr	r6, [r4, #16]
 801849e:	60c5      	str	r5, [r0, #12]
 80184a0:	f109 0310 	add.w	r3, r9, #16
 80184a4:	f109 0514 	add.w	r5, r9, #20
 80184a8:	f104 0e14 	add.w	lr, r4, #20
 80184ac:	f100 0b14 	add.w	fp, r0, #20
 80184b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80184b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80184b8:	9301      	str	r3, [sp, #4]
 80184ba:	46d9      	mov	r9, fp
 80184bc:	f04f 0c00 	mov.w	ip, #0
 80184c0:	9b01      	ldr	r3, [sp, #4]
 80184c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80184c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80184ca:	9301      	str	r3, [sp, #4]
 80184cc:	fa1f f38a 	uxth.w	r3, sl
 80184d0:	4619      	mov	r1, r3
 80184d2:	b283      	uxth	r3, r0
 80184d4:	1acb      	subs	r3, r1, r3
 80184d6:	0c00      	lsrs	r0, r0, #16
 80184d8:	4463      	add	r3, ip
 80184da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80184de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80184e8:	4576      	cmp	r6, lr
 80184ea:	f849 3b04 	str.w	r3, [r9], #4
 80184ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80184f2:	d8e5      	bhi.n	80184c0 <__mdiff+0x88>
 80184f4:	1b33      	subs	r3, r6, r4
 80184f6:	3b15      	subs	r3, #21
 80184f8:	f023 0303 	bic.w	r3, r3, #3
 80184fc:	3415      	adds	r4, #21
 80184fe:	3304      	adds	r3, #4
 8018500:	42a6      	cmp	r6, r4
 8018502:	bf38      	it	cc
 8018504:	2304      	movcc	r3, #4
 8018506:	441d      	add	r5, r3
 8018508:	445b      	add	r3, fp
 801850a:	461e      	mov	r6, r3
 801850c:	462c      	mov	r4, r5
 801850e:	4544      	cmp	r4, r8
 8018510:	d30e      	bcc.n	8018530 <__mdiff+0xf8>
 8018512:	f108 0103 	add.w	r1, r8, #3
 8018516:	1b49      	subs	r1, r1, r5
 8018518:	f021 0103 	bic.w	r1, r1, #3
 801851c:	3d03      	subs	r5, #3
 801851e:	45a8      	cmp	r8, r5
 8018520:	bf38      	it	cc
 8018522:	2100      	movcc	r1, #0
 8018524:	440b      	add	r3, r1
 8018526:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801852a:	b191      	cbz	r1, 8018552 <__mdiff+0x11a>
 801852c:	6117      	str	r7, [r2, #16]
 801852e:	e79d      	b.n	801846c <__mdiff+0x34>
 8018530:	f854 1b04 	ldr.w	r1, [r4], #4
 8018534:	46e6      	mov	lr, ip
 8018536:	0c08      	lsrs	r0, r1, #16
 8018538:	fa1c fc81 	uxtah	ip, ip, r1
 801853c:	4471      	add	r1, lr
 801853e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018542:	b289      	uxth	r1, r1
 8018544:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018548:	f846 1b04 	str.w	r1, [r6], #4
 801854c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018550:	e7dd      	b.n	801850e <__mdiff+0xd6>
 8018552:	3f01      	subs	r7, #1
 8018554:	e7e7      	b.n	8018526 <__mdiff+0xee>
 8018556:	bf00      	nop
 8018558:	08019fb8 	.word	0x08019fb8
 801855c:	08019fc9 	.word	0x08019fc9

08018560 <__d2b>:
 8018560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018564:	460f      	mov	r7, r1
 8018566:	2101      	movs	r1, #1
 8018568:	ec59 8b10 	vmov	r8, r9, d0
 801856c:	4616      	mov	r6, r2
 801856e:	f7ff fccd 	bl	8017f0c <_Balloc>
 8018572:	4604      	mov	r4, r0
 8018574:	b930      	cbnz	r0, 8018584 <__d2b+0x24>
 8018576:	4602      	mov	r2, r0
 8018578:	4b23      	ldr	r3, [pc, #140]	@ (8018608 <__d2b+0xa8>)
 801857a:	4824      	ldr	r0, [pc, #144]	@ (801860c <__d2b+0xac>)
 801857c:	f240 310f 	movw	r1, #783	@ 0x30f
 8018580:	f7fe fe02 	bl	8017188 <__assert_func>
 8018584:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801858c:	b10d      	cbz	r5, 8018592 <__d2b+0x32>
 801858e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018592:	9301      	str	r3, [sp, #4]
 8018594:	f1b8 0300 	subs.w	r3, r8, #0
 8018598:	d023      	beq.n	80185e2 <__d2b+0x82>
 801859a:	4668      	mov	r0, sp
 801859c:	9300      	str	r3, [sp, #0]
 801859e:	f7ff fd7c 	bl	801809a <__lo0bits>
 80185a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80185a6:	b1d0      	cbz	r0, 80185de <__d2b+0x7e>
 80185a8:	f1c0 0320 	rsb	r3, r0, #32
 80185ac:	fa02 f303 	lsl.w	r3, r2, r3
 80185b0:	430b      	orrs	r3, r1
 80185b2:	40c2      	lsrs	r2, r0
 80185b4:	6163      	str	r3, [r4, #20]
 80185b6:	9201      	str	r2, [sp, #4]
 80185b8:	9b01      	ldr	r3, [sp, #4]
 80185ba:	61a3      	str	r3, [r4, #24]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	bf0c      	ite	eq
 80185c0:	2201      	moveq	r2, #1
 80185c2:	2202      	movne	r2, #2
 80185c4:	6122      	str	r2, [r4, #16]
 80185c6:	b1a5      	cbz	r5, 80185f2 <__d2b+0x92>
 80185c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80185cc:	4405      	add	r5, r0
 80185ce:	603d      	str	r5, [r7, #0]
 80185d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80185d4:	6030      	str	r0, [r6, #0]
 80185d6:	4620      	mov	r0, r4
 80185d8:	b003      	add	sp, #12
 80185da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185de:	6161      	str	r1, [r4, #20]
 80185e0:	e7ea      	b.n	80185b8 <__d2b+0x58>
 80185e2:	a801      	add	r0, sp, #4
 80185e4:	f7ff fd59 	bl	801809a <__lo0bits>
 80185e8:	9b01      	ldr	r3, [sp, #4]
 80185ea:	6163      	str	r3, [r4, #20]
 80185ec:	3020      	adds	r0, #32
 80185ee:	2201      	movs	r2, #1
 80185f0:	e7e8      	b.n	80185c4 <__d2b+0x64>
 80185f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80185f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80185fa:	6038      	str	r0, [r7, #0]
 80185fc:	6918      	ldr	r0, [r3, #16]
 80185fe:	f7ff fd2d 	bl	801805c <__hi0bits>
 8018602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018606:	e7e5      	b.n	80185d4 <__d2b+0x74>
 8018608:	08019fb8 	.word	0x08019fb8
 801860c:	08019fc9 	.word	0x08019fc9

08018610 <_malloc_usable_size_r>:
 8018610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018614:	1f18      	subs	r0, r3, #4
 8018616:	2b00      	cmp	r3, #0
 8018618:	bfbc      	itt	lt
 801861a:	580b      	ldrlt	r3, [r1, r0]
 801861c:	18c0      	addlt	r0, r0, r3
 801861e:	4770      	bx	lr

08018620 <__ssputs_r>:
 8018620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018624:	688e      	ldr	r6, [r1, #8]
 8018626:	461f      	mov	r7, r3
 8018628:	42be      	cmp	r6, r7
 801862a:	680b      	ldr	r3, [r1, #0]
 801862c:	4682      	mov	sl, r0
 801862e:	460c      	mov	r4, r1
 8018630:	4690      	mov	r8, r2
 8018632:	d82d      	bhi.n	8018690 <__ssputs_r+0x70>
 8018634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801863c:	d026      	beq.n	801868c <__ssputs_r+0x6c>
 801863e:	6965      	ldr	r5, [r4, #20]
 8018640:	6909      	ldr	r1, [r1, #16]
 8018642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018646:	eba3 0901 	sub.w	r9, r3, r1
 801864a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801864e:	1c7b      	adds	r3, r7, #1
 8018650:	444b      	add	r3, r9
 8018652:	106d      	asrs	r5, r5, #1
 8018654:	429d      	cmp	r5, r3
 8018656:	bf38      	it	cc
 8018658:	461d      	movcc	r5, r3
 801865a:	0553      	lsls	r3, r2, #21
 801865c:	d527      	bpl.n	80186ae <__ssputs_r+0x8e>
 801865e:	4629      	mov	r1, r5
 8018660:	f7fd fb64 	bl	8015d2c <_malloc_r>
 8018664:	4606      	mov	r6, r0
 8018666:	b360      	cbz	r0, 80186c2 <__ssputs_r+0xa2>
 8018668:	6921      	ldr	r1, [r4, #16]
 801866a:	464a      	mov	r2, r9
 801866c:	f7fe fd7d 	bl	801716a <memcpy>
 8018670:	89a3      	ldrh	r3, [r4, #12]
 8018672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801867a:	81a3      	strh	r3, [r4, #12]
 801867c:	6126      	str	r6, [r4, #16]
 801867e:	6165      	str	r5, [r4, #20]
 8018680:	444e      	add	r6, r9
 8018682:	eba5 0509 	sub.w	r5, r5, r9
 8018686:	6026      	str	r6, [r4, #0]
 8018688:	60a5      	str	r5, [r4, #8]
 801868a:	463e      	mov	r6, r7
 801868c:	42be      	cmp	r6, r7
 801868e:	d900      	bls.n	8018692 <__ssputs_r+0x72>
 8018690:	463e      	mov	r6, r7
 8018692:	6820      	ldr	r0, [r4, #0]
 8018694:	4632      	mov	r2, r6
 8018696:	4641      	mov	r1, r8
 8018698:	f7fe fc2a 	bl	8016ef0 <memmove>
 801869c:	68a3      	ldr	r3, [r4, #8]
 801869e:	1b9b      	subs	r3, r3, r6
 80186a0:	60a3      	str	r3, [r4, #8]
 80186a2:	6823      	ldr	r3, [r4, #0]
 80186a4:	4433      	add	r3, r6
 80186a6:	6023      	str	r3, [r4, #0]
 80186a8:	2000      	movs	r0, #0
 80186aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ae:	462a      	mov	r2, r5
 80186b0:	f7fd fc3c 	bl	8015f2c <_realloc_r>
 80186b4:	4606      	mov	r6, r0
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d1e0      	bne.n	801867c <__ssputs_r+0x5c>
 80186ba:	6921      	ldr	r1, [r4, #16]
 80186bc:	4650      	mov	r0, sl
 80186be:	f7ff fbdb 	bl	8017e78 <_free_r>
 80186c2:	230c      	movs	r3, #12
 80186c4:	f8ca 3000 	str.w	r3, [sl]
 80186c8:	89a3      	ldrh	r3, [r4, #12]
 80186ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80186ce:	81a3      	strh	r3, [r4, #12]
 80186d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80186d4:	e7e9      	b.n	80186aa <__ssputs_r+0x8a>
	...

080186d8 <_svfiprintf_r>:
 80186d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186dc:	4698      	mov	r8, r3
 80186de:	898b      	ldrh	r3, [r1, #12]
 80186e0:	061b      	lsls	r3, r3, #24
 80186e2:	b09d      	sub	sp, #116	@ 0x74
 80186e4:	4607      	mov	r7, r0
 80186e6:	460d      	mov	r5, r1
 80186e8:	4614      	mov	r4, r2
 80186ea:	d510      	bpl.n	801870e <_svfiprintf_r+0x36>
 80186ec:	690b      	ldr	r3, [r1, #16]
 80186ee:	b973      	cbnz	r3, 801870e <_svfiprintf_r+0x36>
 80186f0:	2140      	movs	r1, #64	@ 0x40
 80186f2:	f7fd fb1b 	bl	8015d2c <_malloc_r>
 80186f6:	6028      	str	r0, [r5, #0]
 80186f8:	6128      	str	r0, [r5, #16]
 80186fa:	b930      	cbnz	r0, 801870a <_svfiprintf_r+0x32>
 80186fc:	230c      	movs	r3, #12
 80186fe:	603b      	str	r3, [r7, #0]
 8018700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018704:	b01d      	add	sp, #116	@ 0x74
 8018706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801870a:	2340      	movs	r3, #64	@ 0x40
 801870c:	616b      	str	r3, [r5, #20]
 801870e:	2300      	movs	r3, #0
 8018710:	9309      	str	r3, [sp, #36]	@ 0x24
 8018712:	2320      	movs	r3, #32
 8018714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018718:	f8cd 800c 	str.w	r8, [sp, #12]
 801871c:	2330      	movs	r3, #48	@ 0x30
 801871e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80188bc <_svfiprintf_r+0x1e4>
 8018722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018726:	f04f 0901 	mov.w	r9, #1
 801872a:	4623      	mov	r3, r4
 801872c:	469a      	mov	sl, r3
 801872e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018732:	b10a      	cbz	r2, 8018738 <_svfiprintf_r+0x60>
 8018734:	2a25      	cmp	r2, #37	@ 0x25
 8018736:	d1f9      	bne.n	801872c <_svfiprintf_r+0x54>
 8018738:	ebba 0b04 	subs.w	fp, sl, r4
 801873c:	d00b      	beq.n	8018756 <_svfiprintf_r+0x7e>
 801873e:	465b      	mov	r3, fp
 8018740:	4622      	mov	r2, r4
 8018742:	4629      	mov	r1, r5
 8018744:	4638      	mov	r0, r7
 8018746:	f7ff ff6b 	bl	8018620 <__ssputs_r>
 801874a:	3001      	adds	r0, #1
 801874c:	f000 80a7 	beq.w	801889e <_svfiprintf_r+0x1c6>
 8018750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018752:	445a      	add	r2, fp
 8018754:	9209      	str	r2, [sp, #36]	@ 0x24
 8018756:	f89a 3000 	ldrb.w	r3, [sl]
 801875a:	2b00      	cmp	r3, #0
 801875c:	f000 809f 	beq.w	801889e <_svfiprintf_r+0x1c6>
 8018760:	2300      	movs	r3, #0
 8018762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801876a:	f10a 0a01 	add.w	sl, sl, #1
 801876e:	9304      	str	r3, [sp, #16]
 8018770:	9307      	str	r3, [sp, #28]
 8018772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018776:	931a      	str	r3, [sp, #104]	@ 0x68
 8018778:	4654      	mov	r4, sl
 801877a:	2205      	movs	r2, #5
 801877c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018780:	484e      	ldr	r0, [pc, #312]	@ (80188bc <_svfiprintf_r+0x1e4>)
 8018782:	f7e7 fd55 	bl	8000230 <memchr>
 8018786:	9a04      	ldr	r2, [sp, #16]
 8018788:	b9d8      	cbnz	r0, 80187c2 <_svfiprintf_r+0xea>
 801878a:	06d0      	lsls	r0, r2, #27
 801878c:	bf44      	itt	mi
 801878e:	2320      	movmi	r3, #32
 8018790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018794:	0711      	lsls	r1, r2, #28
 8018796:	bf44      	itt	mi
 8018798:	232b      	movmi	r3, #43	@ 0x2b
 801879a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801879e:	f89a 3000 	ldrb.w	r3, [sl]
 80187a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80187a4:	d015      	beq.n	80187d2 <_svfiprintf_r+0xfa>
 80187a6:	9a07      	ldr	r2, [sp, #28]
 80187a8:	4654      	mov	r4, sl
 80187aa:	2000      	movs	r0, #0
 80187ac:	f04f 0c0a 	mov.w	ip, #10
 80187b0:	4621      	mov	r1, r4
 80187b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187b6:	3b30      	subs	r3, #48	@ 0x30
 80187b8:	2b09      	cmp	r3, #9
 80187ba:	d94b      	bls.n	8018854 <_svfiprintf_r+0x17c>
 80187bc:	b1b0      	cbz	r0, 80187ec <_svfiprintf_r+0x114>
 80187be:	9207      	str	r2, [sp, #28]
 80187c0:	e014      	b.n	80187ec <_svfiprintf_r+0x114>
 80187c2:	eba0 0308 	sub.w	r3, r0, r8
 80187c6:	fa09 f303 	lsl.w	r3, r9, r3
 80187ca:	4313      	orrs	r3, r2
 80187cc:	9304      	str	r3, [sp, #16]
 80187ce:	46a2      	mov	sl, r4
 80187d0:	e7d2      	b.n	8018778 <_svfiprintf_r+0xa0>
 80187d2:	9b03      	ldr	r3, [sp, #12]
 80187d4:	1d19      	adds	r1, r3, #4
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	9103      	str	r1, [sp, #12]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	bfbb      	ittet	lt
 80187de:	425b      	neglt	r3, r3
 80187e0:	f042 0202 	orrlt.w	r2, r2, #2
 80187e4:	9307      	strge	r3, [sp, #28]
 80187e6:	9307      	strlt	r3, [sp, #28]
 80187e8:	bfb8      	it	lt
 80187ea:	9204      	strlt	r2, [sp, #16]
 80187ec:	7823      	ldrb	r3, [r4, #0]
 80187ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80187f0:	d10a      	bne.n	8018808 <_svfiprintf_r+0x130>
 80187f2:	7863      	ldrb	r3, [r4, #1]
 80187f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80187f6:	d132      	bne.n	801885e <_svfiprintf_r+0x186>
 80187f8:	9b03      	ldr	r3, [sp, #12]
 80187fa:	1d1a      	adds	r2, r3, #4
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	9203      	str	r2, [sp, #12]
 8018800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018804:	3402      	adds	r4, #2
 8018806:	9305      	str	r3, [sp, #20]
 8018808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80188cc <_svfiprintf_r+0x1f4>
 801880c:	7821      	ldrb	r1, [r4, #0]
 801880e:	2203      	movs	r2, #3
 8018810:	4650      	mov	r0, sl
 8018812:	f7e7 fd0d 	bl	8000230 <memchr>
 8018816:	b138      	cbz	r0, 8018828 <_svfiprintf_r+0x150>
 8018818:	9b04      	ldr	r3, [sp, #16]
 801881a:	eba0 000a 	sub.w	r0, r0, sl
 801881e:	2240      	movs	r2, #64	@ 0x40
 8018820:	4082      	lsls	r2, r0
 8018822:	4313      	orrs	r3, r2
 8018824:	3401      	adds	r4, #1
 8018826:	9304      	str	r3, [sp, #16]
 8018828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801882c:	4824      	ldr	r0, [pc, #144]	@ (80188c0 <_svfiprintf_r+0x1e8>)
 801882e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018832:	2206      	movs	r2, #6
 8018834:	f7e7 fcfc 	bl	8000230 <memchr>
 8018838:	2800      	cmp	r0, #0
 801883a:	d036      	beq.n	80188aa <_svfiprintf_r+0x1d2>
 801883c:	4b21      	ldr	r3, [pc, #132]	@ (80188c4 <_svfiprintf_r+0x1ec>)
 801883e:	bb1b      	cbnz	r3, 8018888 <_svfiprintf_r+0x1b0>
 8018840:	9b03      	ldr	r3, [sp, #12]
 8018842:	3307      	adds	r3, #7
 8018844:	f023 0307 	bic.w	r3, r3, #7
 8018848:	3308      	adds	r3, #8
 801884a:	9303      	str	r3, [sp, #12]
 801884c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801884e:	4433      	add	r3, r6
 8018850:	9309      	str	r3, [sp, #36]	@ 0x24
 8018852:	e76a      	b.n	801872a <_svfiprintf_r+0x52>
 8018854:	fb0c 3202 	mla	r2, ip, r2, r3
 8018858:	460c      	mov	r4, r1
 801885a:	2001      	movs	r0, #1
 801885c:	e7a8      	b.n	80187b0 <_svfiprintf_r+0xd8>
 801885e:	2300      	movs	r3, #0
 8018860:	3401      	adds	r4, #1
 8018862:	9305      	str	r3, [sp, #20]
 8018864:	4619      	mov	r1, r3
 8018866:	f04f 0c0a 	mov.w	ip, #10
 801886a:	4620      	mov	r0, r4
 801886c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018870:	3a30      	subs	r2, #48	@ 0x30
 8018872:	2a09      	cmp	r2, #9
 8018874:	d903      	bls.n	801887e <_svfiprintf_r+0x1a6>
 8018876:	2b00      	cmp	r3, #0
 8018878:	d0c6      	beq.n	8018808 <_svfiprintf_r+0x130>
 801887a:	9105      	str	r1, [sp, #20]
 801887c:	e7c4      	b.n	8018808 <_svfiprintf_r+0x130>
 801887e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018882:	4604      	mov	r4, r0
 8018884:	2301      	movs	r3, #1
 8018886:	e7f0      	b.n	801886a <_svfiprintf_r+0x192>
 8018888:	ab03      	add	r3, sp, #12
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	462a      	mov	r2, r5
 801888e:	4b0e      	ldr	r3, [pc, #56]	@ (80188c8 <_svfiprintf_r+0x1f0>)
 8018890:	a904      	add	r1, sp, #16
 8018892:	4638      	mov	r0, r7
 8018894:	f7fd fcd2 	bl	801623c <_printf_float>
 8018898:	1c42      	adds	r2, r0, #1
 801889a:	4606      	mov	r6, r0
 801889c:	d1d6      	bne.n	801884c <_svfiprintf_r+0x174>
 801889e:	89ab      	ldrh	r3, [r5, #12]
 80188a0:	065b      	lsls	r3, r3, #25
 80188a2:	f53f af2d 	bmi.w	8018700 <_svfiprintf_r+0x28>
 80188a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80188a8:	e72c      	b.n	8018704 <_svfiprintf_r+0x2c>
 80188aa:	ab03      	add	r3, sp, #12
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	462a      	mov	r2, r5
 80188b0:	4b05      	ldr	r3, [pc, #20]	@ (80188c8 <_svfiprintf_r+0x1f0>)
 80188b2:	a904      	add	r1, sp, #16
 80188b4:	4638      	mov	r0, r7
 80188b6:	f7fd ff59 	bl	801676c <_printf_i>
 80188ba:	e7ed      	b.n	8018898 <_svfiprintf_r+0x1c0>
 80188bc:	0801a120 	.word	0x0801a120
 80188c0:	0801a12a 	.word	0x0801a12a
 80188c4:	0801623d 	.word	0x0801623d
 80188c8:	08018621 	.word	0x08018621
 80188cc:	0801a126 	.word	0x0801a126

080188d0 <__sfputc_r>:
 80188d0:	6893      	ldr	r3, [r2, #8]
 80188d2:	3b01      	subs	r3, #1
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	b410      	push	{r4}
 80188d8:	6093      	str	r3, [r2, #8]
 80188da:	da08      	bge.n	80188ee <__sfputc_r+0x1e>
 80188dc:	6994      	ldr	r4, [r2, #24]
 80188de:	42a3      	cmp	r3, r4
 80188e0:	db01      	blt.n	80188e6 <__sfputc_r+0x16>
 80188e2:	290a      	cmp	r1, #10
 80188e4:	d103      	bne.n	80188ee <__sfputc_r+0x1e>
 80188e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188ea:	f7fe ba5d 	b.w	8016da8 <__swbuf_r>
 80188ee:	6813      	ldr	r3, [r2, #0]
 80188f0:	1c58      	adds	r0, r3, #1
 80188f2:	6010      	str	r0, [r2, #0]
 80188f4:	7019      	strb	r1, [r3, #0]
 80188f6:	4608      	mov	r0, r1
 80188f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188fc:	4770      	bx	lr

080188fe <__sfputs_r>:
 80188fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018900:	4606      	mov	r6, r0
 8018902:	460f      	mov	r7, r1
 8018904:	4614      	mov	r4, r2
 8018906:	18d5      	adds	r5, r2, r3
 8018908:	42ac      	cmp	r4, r5
 801890a:	d101      	bne.n	8018910 <__sfputs_r+0x12>
 801890c:	2000      	movs	r0, #0
 801890e:	e007      	b.n	8018920 <__sfputs_r+0x22>
 8018910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018914:	463a      	mov	r2, r7
 8018916:	4630      	mov	r0, r6
 8018918:	f7ff ffda 	bl	80188d0 <__sfputc_r>
 801891c:	1c43      	adds	r3, r0, #1
 801891e:	d1f3      	bne.n	8018908 <__sfputs_r+0xa>
 8018920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018924 <_vfiprintf_r>:
 8018924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018928:	460d      	mov	r5, r1
 801892a:	b09d      	sub	sp, #116	@ 0x74
 801892c:	4614      	mov	r4, r2
 801892e:	4698      	mov	r8, r3
 8018930:	4606      	mov	r6, r0
 8018932:	b118      	cbz	r0, 801893c <_vfiprintf_r+0x18>
 8018934:	6a03      	ldr	r3, [r0, #32]
 8018936:	b90b      	cbnz	r3, 801893c <_vfiprintf_r+0x18>
 8018938:	f7fe f8c4 	bl	8016ac4 <__sinit>
 801893c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801893e:	07d9      	lsls	r1, r3, #31
 8018940:	d405      	bmi.n	801894e <_vfiprintf_r+0x2a>
 8018942:	89ab      	ldrh	r3, [r5, #12]
 8018944:	059a      	lsls	r2, r3, #22
 8018946:	d402      	bmi.n	801894e <_vfiprintf_r+0x2a>
 8018948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801894a:	f7fe fc04 	bl	8017156 <__retarget_lock_acquire_recursive>
 801894e:	89ab      	ldrh	r3, [r5, #12]
 8018950:	071b      	lsls	r3, r3, #28
 8018952:	d501      	bpl.n	8018958 <_vfiprintf_r+0x34>
 8018954:	692b      	ldr	r3, [r5, #16]
 8018956:	b99b      	cbnz	r3, 8018980 <_vfiprintf_r+0x5c>
 8018958:	4629      	mov	r1, r5
 801895a:	4630      	mov	r0, r6
 801895c:	f7fe fa62 	bl	8016e24 <__swsetup_r>
 8018960:	b170      	cbz	r0, 8018980 <_vfiprintf_r+0x5c>
 8018962:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018964:	07dc      	lsls	r4, r3, #31
 8018966:	d504      	bpl.n	8018972 <_vfiprintf_r+0x4e>
 8018968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801896c:	b01d      	add	sp, #116	@ 0x74
 801896e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018972:	89ab      	ldrh	r3, [r5, #12]
 8018974:	0598      	lsls	r0, r3, #22
 8018976:	d4f7      	bmi.n	8018968 <_vfiprintf_r+0x44>
 8018978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801897a:	f7fe fbed 	bl	8017158 <__retarget_lock_release_recursive>
 801897e:	e7f3      	b.n	8018968 <_vfiprintf_r+0x44>
 8018980:	2300      	movs	r3, #0
 8018982:	9309      	str	r3, [sp, #36]	@ 0x24
 8018984:	2320      	movs	r3, #32
 8018986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801898a:	f8cd 800c 	str.w	r8, [sp, #12]
 801898e:	2330      	movs	r3, #48	@ 0x30
 8018990:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018b40 <_vfiprintf_r+0x21c>
 8018994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018998:	f04f 0901 	mov.w	r9, #1
 801899c:	4623      	mov	r3, r4
 801899e:	469a      	mov	sl, r3
 80189a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189a4:	b10a      	cbz	r2, 80189aa <_vfiprintf_r+0x86>
 80189a6:	2a25      	cmp	r2, #37	@ 0x25
 80189a8:	d1f9      	bne.n	801899e <_vfiprintf_r+0x7a>
 80189aa:	ebba 0b04 	subs.w	fp, sl, r4
 80189ae:	d00b      	beq.n	80189c8 <_vfiprintf_r+0xa4>
 80189b0:	465b      	mov	r3, fp
 80189b2:	4622      	mov	r2, r4
 80189b4:	4629      	mov	r1, r5
 80189b6:	4630      	mov	r0, r6
 80189b8:	f7ff ffa1 	bl	80188fe <__sfputs_r>
 80189bc:	3001      	adds	r0, #1
 80189be:	f000 80a7 	beq.w	8018b10 <_vfiprintf_r+0x1ec>
 80189c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189c4:	445a      	add	r2, fp
 80189c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80189c8:	f89a 3000 	ldrb.w	r3, [sl]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 809f 	beq.w	8018b10 <_vfiprintf_r+0x1ec>
 80189d2:	2300      	movs	r3, #0
 80189d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80189d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189dc:	f10a 0a01 	add.w	sl, sl, #1
 80189e0:	9304      	str	r3, [sp, #16]
 80189e2:	9307      	str	r3, [sp, #28]
 80189e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80189e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80189ea:	4654      	mov	r4, sl
 80189ec:	2205      	movs	r2, #5
 80189ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189f2:	4853      	ldr	r0, [pc, #332]	@ (8018b40 <_vfiprintf_r+0x21c>)
 80189f4:	f7e7 fc1c 	bl	8000230 <memchr>
 80189f8:	9a04      	ldr	r2, [sp, #16]
 80189fa:	b9d8      	cbnz	r0, 8018a34 <_vfiprintf_r+0x110>
 80189fc:	06d1      	lsls	r1, r2, #27
 80189fe:	bf44      	itt	mi
 8018a00:	2320      	movmi	r3, #32
 8018a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a06:	0713      	lsls	r3, r2, #28
 8018a08:	bf44      	itt	mi
 8018a0a:	232b      	movmi	r3, #43	@ 0x2b
 8018a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a10:	f89a 3000 	ldrb.w	r3, [sl]
 8018a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a16:	d015      	beq.n	8018a44 <_vfiprintf_r+0x120>
 8018a18:	9a07      	ldr	r2, [sp, #28]
 8018a1a:	4654      	mov	r4, sl
 8018a1c:	2000      	movs	r0, #0
 8018a1e:	f04f 0c0a 	mov.w	ip, #10
 8018a22:	4621      	mov	r1, r4
 8018a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a28:	3b30      	subs	r3, #48	@ 0x30
 8018a2a:	2b09      	cmp	r3, #9
 8018a2c:	d94b      	bls.n	8018ac6 <_vfiprintf_r+0x1a2>
 8018a2e:	b1b0      	cbz	r0, 8018a5e <_vfiprintf_r+0x13a>
 8018a30:	9207      	str	r2, [sp, #28]
 8018a32:	e014      	b.n	8018a5e <_vfiprintf_r+0x13a>
 8018a34:	eba0 0308 	sub.w	r3, r0, r8
 8018a38:	fa09 f303 	lsl.w	r3, r9, r3
 8018a3c:	4313      	orrs	r3, r2
 8018a3e:	9304      	str	r3, [sp, #16]
 8018a40:	46a2      	mov	sl, r4
 8018a42:	e7d2      	b.n	80189ea <_vfiprintf_r+0xc6>
 8018a44:	9b03      	ldr	r3, [sp, #12]
 8018a46:	1d19      	adds	r1, r3, #4
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	9103      	str	r1, [sp, #12]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	bfbb      	ittet	lt
 8018a50:	425b      	neglt	r3, r3
 8018a52:	f042 0202 	orrlt.w	r2, r2, #2
 8018a56:	9307      	strge	r3, [sp, #28]
 8018a58:	9307      	strlt	r3, [sp, #28]
 8018a5a:	bfb8      	it	lt
 8018a5c:	9204      	strlt	r2, [sp, #16]
 8018a5e:	7823      	ldrb	r3, [r4, #0]
 8018a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a62:	d10a      	bne.n	8018a7a <_vfiprintf_r+0x156>
 8018a64:	7863      	ldrb	r3, [r4, #1]
 8018a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a68:	d132      	bne.n	8018ad0 <_vfiprintf_r+0x1ac>
 8018a6a:	9b03      	ldr	r3, [sp, #12]
 8018a6c:	1d1a      	adds	r2, r3, #4
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	9203      	str	r2, [sp, #12]
 8018a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018a76:	3402      	adds	r4, #2
 8018a78:	9305      	str	r3, [sp, #20]
 8018a7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018b50 <_vfiprintf_r+0x22c>
 8018a7e:	7821      	ldrb	r1, [r4, #0]
 8018a80:	2203      	movs	r2, #3
 8018a82:	4650      	mov	r0, sl
 8018a84:	f7e7 fbd4 	bl	8000230 <memchr>
 8018a88:	b138      	cbz	r0, 8018a9a <_vfiprintf_r+0x176>
 8018a8a:	9b04      	ldr	r3, [sp, #16]
 8018a8c:	eba0 000a 	sub.w	r0, r0, sl
 8018a90:	2240      	movs	r2, #64	@ 0x40
 8018a92:	4082      	lsls	r2, r0
 8018a94:	4313      	orrs	r3, r2
 8018a96:	3401      	adds	r4, #1
 8018a98:	9304      	str	r3, [sp, #16]
 8018a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a9e:	4829      	ldr	r0, [pc, #164]	@ (8018b44 <_vfiprintf_r+0x220>)
 8018aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018aa4:	2206      	movs	r2, #6
 8018aa6:	f7e7 fbc3 	bl	8000230 <memchr>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	d03f      	beq.n	8018b2e <_vfiprintf_r+0x20a>
 8018aae:	4b26      	ldr	r3, [pc, #152]	@ (8018b48 <_vfiprintf_r+0x224>)
 8018ab0:	bb1b      	cbnz	r3, 8018afa <_vfiprintf_r+0x1d6>
 8018ab2:	9b03      	ldr	r3, [sp, #12]
 8018ab4:	3307      	adds	r3, #7
 8018ab6:	f023 0307 	bic.w	r3, r3, #7
 8018aba:	3308      	adds	r3, #8
 8018abc:	9303      	str	r3, [sp, #12]
 8018abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ac0:	443b      	add	r3, r7
 8018ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ac4:	e76a      	b.n	801899c <_vfiprintf_r+0x78>
 8018ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018aca:	460c      	mov	r4, r1
 8018acc:	2001      	movs	r0, #1
 8018ace:	e7a8      	b.n	8018a22 <_vfiprintf_r+0xfe>
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	3401      	adds	r4, #1
 8018ad4:	9305      	str	r3, [sp, #20]
 8018ad6:	4619      	mov	r1, r3
 8018ad8:	f04f 0c0a 	mov.w	ip, #10
 8018adc:	4620      	mov	r0, r4
 8018ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ae2:	3a30      	subs	r2, #48	@ 0x30
 8018ae4:	2a09      	cmp	r2, #9
 8018ae6:	d903      	bls.n	8018af0 <_vfiprintf_r+0x1cc>
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d0c6      	beq.n	8018a7a <_vfiprintf_r+0x156>
 8018aec:	9105      	str	r1, [sp, #20]
 8018aee:	e7c4      	b.n	8018a7a <_vfiprintf_r+0x156>
 8018af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018af4:	4604      	mov	r4, r0
 8018af6:	2301      	movs	r3, #1
 8018af8:	e7f0      	b.n	8018adc <_vfiprintf_r+0x1b8>
 8018afa:	ab03      	add	r3, sp, #12
 8018afc:	9300      	str	r3, [sp, #0]
 8018afe:	462a      	mov	r2, r5
 8018b00:	4b12      	ldr	r3, [pc, #72]	@ (8018b4c <_vfiprintf_r+0x228>)
 8018b02:	a904      	add	r1, sp, #16
 8018b04:	4630      	mov	r0, r6
 8018b06:	f7fd fb99 	bl	801623c <_printf_float>
 8018b0a:	4607      	mov	r7, r0
 8018b0c:	1c78      	adds	r0, r7, #1
 8018b0e:	d1d6      	bne.n	8018abe <_vfiprintf_r+0x19a>
 8018b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018b12:	07d9      	lsls	r1, r3, #31
 8018b14:	d405      	bmi.n	8018b22 <_vfiprintf_r+0x1fe>
 8018b16:	89ab      	ldrh	r3, [r5, #12]
 8018b18:	059a      	lsls	r2, r3, #22
 8018b1a:	d402      	bmi.n	8018b22 <_vfiprintf_r+0x1fe>
 8018b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018b1e:	f7fe fb1b 	bl	8017158 <__retarget_lock_release_recursive>
 8018b22:	89ab      	ldrh	r3, [r5, #12]
 8018b24:	065b      	lsls	r3, r3, #25
 8018b26:	f53f af1f 	bmi.w	8018968 <_vfiprintf_r+0x44>
 8018b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b2c:	e71e      	b.n	801896c <_vfiprintf_r+0x48>
 8018b2e:	ab03      	add	r3, sp, #12
 8018b30:	9300      	str	r3, [sp, #0]
 8018b32:	462a      	mov	r2, r5
 8018b34:	4b05      	ldr	r3, [pc, #20]	@ (8018b4c <_vfiprintf_r+0x228>)
 8018b36:	a904      	add	r1, sp, #16
 8018b38:	4630      	mov	r0, r6
 8018b3a:	f7fd fe17 	bl	801676c <_printf_i>
 8018b3e:	e7e4      	b.n	8018b0a <_vfiprintf_r+0x1e6>
 8018b40:	0801a120 	.word	0x0801a120
 8018b44:	0801a12a 	.word	0x0801a12a
 8018b48:	0801623d 	.word	0x0801623d
 8018b4c:	080188ff 	.word	0x080188ff
 8018b50:	0801a126 	.word	0x0801a126

08018b54 <__sflush_r>:
 8018b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b5c:	0716      	lsls	r6, r2, #28
 8018b5e:	4605      	mov	r5, r0
 8018b60:	460c      	mov	r4, r1
 8018b62:	d454      	bmi.n	8018c0e <__sflush_r+0xba>
 8018b64:	684b      	ldr	r3, [r1, #4]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	dc02      	bgt.n	8018b70 <__sflush_r+0x1c>
 8018b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	dd48      	ble.n	8018c02 <__sflush_r+0xae>
 8018b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018b72:	2e00      	cmp	r6, #0
 8018b74:	d045      	beq.n	8018c02 <__sflush_r+0xae>
 8018b76:	2300      	movs	r3, #0
 8018b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018b7c:	682f      	ldr	r7, [r5, #0]
 8018b7e:	6a21      	ldr	r1, [r4, #32]
 8018b80:	602b      	str	r3, [r5, #0]
 8018b82:	d030      	beq.n	8018be6 <__sflush_r+0x92>
 8018b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018b86:	89a3      	ldrh	r3, [r4, #12]
 8018b88:	0759      	lsls	r1, r3, #29
 8018b8a:	d505      	bpl.n	8018b98 <__sflush_r+0x44>
 8018b8c:	6863      	ldr	r3, [r4, #4]
 8018b8e:	1ad2      	subs	r2, r2, r3
 8018b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018b92:	b10b      	cbz	r3, 8018b98 <__sflush_r+0x44>
 8018b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018b96:	1ad2      	subs	r2, r2, r3
 8018b98:	2300      	movs	r3, #0
 8018b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018b9c:	6a21      	ldr	r1, [r4, #32]
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	47b0      	blx	r6
 8018ba2:	1c43      	adds	r3, r0, #1
 8018ba4:	89a3      	ldrh	r3, [r4, #12]
 8018ba6:	d106      	bne.n	8018bb6 <__sflush_r+0x62>
 8018ba8:	6829      	ldr	r1, [r5, #0]
 8018baa:	291d      	cmp	r1, #29
 8018bac:	d82b      	bhi.n	8018c06 <__sflush_r+0xb2>
 8018bae:	4a2a      	ldr	r2, [pc, #168]	@ (8018c58 <__sflush_r+0x104>)
 8018bb0:	410a      	asrs	r2, r1
 8018bb2:	07d6      	lsls	r6, r2, #31
 8018bb4:	d427      	bmi.n	8018c06 <__sflush_r+0xb2>
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	6062      	str	r2, [r4, #4]
 8018bba:	04d9      	lsls	r1, r3, #19
 8018bbc:	6922      	ldr	r2, [r4, #16]
 8018bbe:	6022      	str	r2, [r4, #0]
 8018bc0:	d504      	bpl.n	8018bcc <__sflush_r+0x78>
 8018bc2:	1c42      	adds	r2, r0, #1
 8018bc4:	d101      	bne.n	8018bca <__sflush_r+0x76>
 8018bc6:	682b      	ldr	r3, [r5, #0]
 8018bc8:	b903      	cbnz	r3, 8018bcc <__sflush_r+0x78>
 8018bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8018bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018bce:	602f      	str	r7, [r5, #0]
 8018bd0:	b1b9      	cbz	r1, 8018c02 <__sflush_r+0xae>
 8018bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018bd6:	4299      	cmp	r1, r3
 8018bd8:	d002      	beq.n	8018be0 <__sflush_r+0x8c>
 8018bda:	4628      	mov	r0, r5
 8018bdc:	f7ff f94c 	bl	8017e78 <_free_r>
 8018be0:	2300      	movs	r3, #0
 8018be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8018be4:	e00d      	b.n	8018c02 <__sflush_r+0xae>
 8018be6:	2301      	movs	r3, #1
 8018be8:	4628      	mov	r0, r5
 8018bea:	47b0      	blx	r6
 8018bec:	4602      	mov	r2, r0
 8018bee:	1c50      	adds	r0, r2, #1
 8018bf0:	d1c9      	bne.n	8018b86 <__sflush_r+0x32>
 8018bf2:	682b      	ldr	r3, [r5, #0]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d0c6      	beq.n	8018b86 <__sflush_r+0x32>
 8018bf8:	2b1d      	cmp	r3, #29
 8018bfa:	d001      	beq.n	8018c00 <__sflush_r+0xac>
 8018bfc:	2b16      	cmp	r3, #22
 8018bfe:	d11e      	bne.n	8018c3e <__sflush_r+0xea>
 8018c00:	602f      	str	r7, [r5, #0]
 8018c02:	2000      	movs	r0, #0
 8018c04:	e022      	b.n	8018c4c <__sflush_r+0xf8>
 8018c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c0a:	b21b      	sxth	r3, r3
 8018c0c:	e01b      	b.n	8018c46 <__sflush_r+0xf2>
 8018c0e:	690f      	ldr	r7, [r1, #16]
 8018c10:	2f00      	cmp	r7, #0
 8018c12:	d0f6      	beq.n	8018c02 <__sflush_r+0xae>
 8018c14:	0793      	lsls	r3, r2, #30
 8018c16:	680e      	ldr	r6, [r1, #0]
 8018c18:	bf08      	it	eq
 8018c1a:	694b      	ldreq	r3, [r1, #20]
 8018c1c:	600f      	str	r7, [r1, #0]
 8018c1e:	bf18      	it	ne
 8018c20:	2300      	movne	r3, #0
 8018c22:	eba6 0807 	sub.w	r8, r6, r7
 8018c26:	608b      	str	r3, [r1, #8]
 8018c28:	f1b8 0f00 	cmp.w	r8, #0
 8018c2c:	dde9      	ble.n	8018c02 <__sflush_r+0xae>
 8018c2e:	6a21      	ldr	r1, [r4, #32]
 8018c30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018c32:	4643      	mov	r3, r8
 8018c34:	463a      	mov	r2, r7
 8018c36:	4628      	mov	r0, r5
 8018c38:	47b0      	blx	r6
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	dc08      	bgt.n	8018c50 <__sflush_r+0xfc>
 8018c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c46:	81a3      	strh	r3, [r4, #12]
 8018c48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c50:	4407      	add	r7, r0
 8018c52:	eba8 0800 	sub.w	r8, r8, r0
 8018c56:	e7e7      	b.n	8018c28 <__sflush_r+0xd4>
 8018c58:	dfbffffe 	.word	0xdfbffffe

08018c5c <_fflush_r>:
 8018c5c:	b538      	push	{r3, r4, r5, lr}
 8018c5e:	690b      	ldr	r3, [r1, #16]
 8018c60:	4605      	mov	r5, r0
 8018c62:	460c      	mov	r4, r1
 8018c64:	b913      	cbnz	r3, 8018c6c <_fflush_r+0x10>
 8018c66:	2500      	movs	r5, #0
 8018c68:	4628      	mov	r0, r5
 8018c6a:	bd38      	pop	{r3, r4, r5, pc}
 8018c6c:	b118      	cbz	r0, 8018c76 <_fflush_r+0x1a>
 8018c6e:	6a03      	ldr	r3, [r0, #32]
 8018c70:	b90b      	cbnz	r3, 8018c76 <_fflush_r+0x1a>
 8018c72:	f7fd ff27 	bl	8016ac4 <__sinit>
 8018c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d0f3      	beq.n	8018c66 <_fflush_r+0xa>
 8018c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018c80:	07d0      	lsls	r0, r2, #31
 8018c82:	d404      	bmi.n	8018c8e <_fflush_r+0x32>
 8018c84:	0599      	lsls	r1, r3, #22
 8018c86:	d402      	bmi.n	8018c8e <_fflush_r+0x32>
 8018c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018c8a:	f7fe fa64 	bl	8017156 <__retarget_lock_acquire_recursive>
 8018c8e:	4628      	mov	r0, r5
 8018c90:	4621      	mov	r1, r4
 8018c92:	f7ff ff5f 	bl	8018b54 <__sflush_r>
 8018c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018c98:	07da      	lsls	r2, r3, #31
 8018c9a:	4605      	mov	r5, r0
 8018c9c:	d4e4      	bmi.n	8018c68 <_fflush_r+0xc>
 8018c9e:	89a3      	ldrh	r3, [r4, #12]
 8018ca0:	059b      	lsls	r3, r3, #22
 8018ca2:	d4e1      	bmi.n	8018c68 <_fflush_r+0xc>
 8018ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ca6:	f7fe fa57 	bl	8017158 <__retarget_lock_release_recursive>
 8018caa:	e7dd      	b.n	8018c68 <_fflush_r+0xc>

08018cac <fiprintf>:
 8018cac:	b40e      	push	{r1, r2, r3}
 8018cae:	b503      	push	{r0, r1, lr}
 8018cb0:	4601      	mov	r1, r0
 8018cb2:	ab03      	add	r3, sp, #12
 8018cb4:	4805      	ldr	r0, [pc, #20]	@ (8018ccc <fiprintf+0x20>)
 8018cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cba:	6800      	ldr	r0, [r0, #0]
 8018cbc:	9301      	str	r3, [sp, #4]
 8018cbe:	f7ff fe31 	bl	8018924 <_vfiprintf_r>
 8018cc2:	b002      	add	sp, #8
 8018cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cc8:	b003      	add	sp, #12
 8018cca:	4770      	bx	lr
 8018ccc:	200000c8 	.word	0x200000c8

08018cd0 <__swhatbuf_r>:
 8018cd0:	b570      	push	{r4, r5, r6, lr}
 8018cd2:	460c      	mov	r4, r1
 8018cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cd8:	2900      	cmp	r1, #0
 8018cda:	b096      	sub	sp, #88	@ 0x58
 8018cdc:	4615      	mov	r5, r2
 8018cde:	461e      	mov	r6, r3
 8018ce0:	da0d      	bge.n	8018cfe <__swhatbuf_r+0x2e>
 8018ce2:	89a3      	ldrh	r3, [r4, #12]
 8018ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018ce8:	f04f 0100 	mov.w	r1, #0
 8018cec:	bf14      	ite	ne
 8018cee:	2340      	movne	r3, #64	@ 0x40
 8018cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	6031      	str	r1, [r6, #0]
 8018cf8:	602b      	str	r3, [r5, #0]
 8018cfa:	b016      	add	sp, #88	@ 0x58
 8018cfc:	bd70      	pop	{r4, r5, r6, pc}
 8018cfe:	466a      	mov	r2, sp
 8018d00:	f000 f848 	bl	8018d94 <_fstat_r>
 8018d04:	2800      	cmp	r0, #0
 8018d06:	dbec      	blt.n	8018ce2 <__swhatbuf_r+0x12>
 8018d08:	9901      	ldr	r1, [sp, #4]
 8018d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d12:	4259      	negs	r1, r3
 8018d14:	4159      	adcs	r1, r3
 8018d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d1a:	e7eb      	b.n	8018cf4 <__swhatbuf_r+0x24>

08018d1c <__smakebuf_r>:
 8018d1c:	898b      	ldrh	r3, [r1, #12]
 8018d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d20:	079d      	lsls	r5, r3, #30
 8018d22:	4606      	mov	r6, r0
 8018d24:	460c      	mov	r4, r1
 8018d26:	d507      	bpl.n	8018d38 <__smakebuf_r+0x1c>
 8018d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018d2c:	6023      	str	r3, [r4, #0]
 8018d2e:	6123      	str	r3, [r4, #16]
 8018d30:	2301      	movs	r3, #1
 8018d32:	6163      	str	r3, [r4, #20]
 8018d34:	b003      	add	sp, #12
 8018d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d38:	ab01      	add	r3, sp, #4
 8018d3a:	466a      	mov	r2, sp
 8018d3c:	f7ff ffc8 	bl	8018cd0 <__swhatbuf_r>
 8018d40:	9f00      	ldr	r7, [sp, #0]
 8018d42:	4605      	mov	r5, r0
 8018d44:	4639      	mov	r1, r7
 8018d46:	4630      	mov	r0, r6
 8018d48:	f7fc fff0 	bl	8015d2c <_malloc_r>
 8018d4c:	b948      	cbnz	r0, 8018d62 <__smakebuf_r+0x46>
 8018d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d52:	059a      	lsls	r2, r3, #22
 8018d54:	d4ee      	bmi.n	8018d34 <__smakebuf_r+0x18>
 8018d56:	f023 0303 	bic.w	r3, r3, #3
 8018d5a:	f043 0302 	orr.w	r3, r3, #2
 8018d5e:	81a3      	strh	r3, [r4, #12]
 8018d60:	e7e2      	b.n	8018d28 <__smakebuf_r+0xc>
 8018d62:	89a3      	ldrh	r3, [r4, #12]
 8018d64:	6020      	str	r0, [r4, #0]
 8018d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018d6a:	81a3      	strh	r3, [r4, #12]
 8018d6c:	9b01      	ldr	r3, [sp, #4]
 8018d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018d72:	b15b      	cbz	r3, 8018d8c <__smakebuf_r+0x70>
 8018d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d78:	4630      	mov	r0, r6
 8018d7a:	f000 f81d 	bl	8018db8 <_isatty_r>
 8018d7e:	b128      	cbz	r0, 8018d8c <__smakebuf_r+0x70>
 8018d80:	89a3      	ldrh	r3, [r4, #12]
 8018d82:	f023 0303 	bic.w	r3, r3, #3
 8018d86:	f043 0301 	orr.w	r3, r3, #1
 8018d8a:	81a3      	strh	r3, [r4, #12]
 8018d8c:	89a3      	ldrh	r3, [r4, #12]
 8018d8e:	431d      	orrs	r5, r3
 8018d90:	81a5      	strh	r5, [r4, #12]
 8018d92:	e7cf      	b.n	8018d34 <__smakebuf_r+0x18>

08018d94 <_fstat_r>:
 8018d94:	b538      	push	{r3, r4, r5, lr}
 8018d96:	4d07      	ldr	r5, [pc, #28]	@ (8018db4 <_fstat_r+0x20>)
 8018d98:	2300      	movs	r3, #0
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	4608      	mov	r0, r1
 8018d9e:	4611      	mov	r1, r2
 8018da0:	602b      	str	r3, [r5, #0]
 8018da2:	f7e9 fd0f 	bl	80027c4 <_fstat>
 8018da6:	1c43      	adds	r3, r0, #1
 8018da8:	d102      	bne.n	8018db0 <_fstat_r+0x1c>
 8018daa:	682b      	ldr	r3, [r5, #0]
 8018dac:	b103      	cbz	r3, 8018db0 <_fstat_r+0x1c>
 8018dae:	6023      	str	r3, [r4, #0]
 8018db0:	bd38      	pop	{r3, r4, r5, pc}
 8018db2:	bf00      	nop
 8018db4:	20010eac 	.word	0x20010eac

08018db8 <_isatty_r>:
 8018db8:	b538      	push	{r3, r4, r5, lr}
 8018dba:	4d06      	ldr	r5, [pc, #24]	@ (8018dd4 <_isatty_r+0x1c>)
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	4604      	mov	r4, r0
 8018dc0:	4608      	mov	r0, r1
 8018dc2:	602b      	str	r3, [r5, #0]
 8018dc4:	f7e9 fd0e 	bl	80027e4 <_isatty>
 8018dc8:	1c43      	adds	r3, r0, #1
 8018dca:	d102      	bne.n	8018dd2 <_isatty_r+0x1a>
 8018dcc:	682b      	ldr	r3, [r5, #0]
 8018dce:	b103      	cbz	r3, 8018dd2 <_isatty_r+0x1a>
 8018dd0:	6023      	str	r3, [r4, #0]
 8018dd2:	bd38      	pop	{r3, r4, r5, pc}
 8018dd4:	20010eac 	.word	0x20010eac

08018dd8 <abort>:
 8018dd8:	b508      	push	{r3, lr}
 8018dda:	2006      	movs	r0, #6
 8018ddc:	f000 f84a 	bl	8018e74 <raise>
 8018de0:	2001      	movs	r0, #1
 8018de2:	f7e9 fc9f 	bl	8002724 <_exit>

08018de6 <__ascii_mbtowc>:
 8018de6:	b082      	sub	sp, #8
 8018de8:	b901      	cbnz	r1, 8018dec <__ascii_mbtowc+0x6>
 8018dea:	a901      	add	r1, sp, #4
 8018dec:	b142      	cbz	r2, 8018e00 <__ascii_mbtowc+0x1a>
 8018dee:	b14b      	cbz	r3, 8018e04 <__ascii_mbtowc+0x1e>
 8018df0:	7813      	ldrb	r3, [r2, #0]
 8018df2:	600b      	str	r3, [r1, #0]
 8018df4:	7812      	ldrb	r2, [r2, #0]
 8018df6:	1e10      	subs	r0, r2, #0
 8018df8:	bf18      	it	ne
 8018dfa:	2001      	movne	r0, #1
 8018dfc:	b002      	add	sp, #8
 8018dfe:	4770      	bx	lr
 8018e00:	4610      	mov	r0, r2
 8018e02:	e7fb      	b.n	8018dfc <__ascii_mbtowc+0x16>
 8018e04:	f06f 0001 	mvn.w	r0, #1
 8018e08:	e7f8      	b.n	8018dfc <__ascii_mbtowc+0x16>

08018e0a <__ascii_wctomb>:
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	4608      	mov	r0, r1
 8018e0e:	b141      	cbz	r1, 8018e22 <__ascii_wctomb+0x18>
 8018e10:	2aff      	cmp	r2, #255	@ 0xff
 8018e12:	d904      	bls.n	8018e1e <__ascii_wctomb+0x14>
 8018e14:	228a      	movs	r2, #138	@ 0x8a
 8018e16:	601a      	str	r2, [r3, #0]
 8018e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e1c:	4770      	bx	lr
 8018e1e:	700a      	strb	r2, [r1, #0]
 8018e20:	2001      	movs	r0, #1
 8018e22:	4770      	bx	lr

08018e24 <_raise_r>:
 8018e24:	291f      	cmp	r1, #31
 8018e26:	b538      	push	{r3, r4, r5, lr}
 8018e28:	4605      	mov	r5, r0
 8018e2a:	460c      	mov	r4, r1
 8018e2c:	d904      	bls.n	8018e38 <_raise_r+0x14>
 8018e2e:	2316      	movs	r3, #22
 8018e30:	6003      	str	r3, [r0, #0]
 8018e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e36:	bd38      	pop	{r3, r4, r5, pc}
 8018e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018e3a:	b112      	cbz	r2, 8018e42 <_raise_r+0x1e>
 8018e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e40:	b94b      	cbnz	r3, 8018e56 <_raise_r+0x32>
 8018e42:	4628      	mov	r0, r5
 8018e44:	f000 f830 	bl	8018ea8 <_getpid_r>
 8018e48:	4622      	mov	r2, r4
 8018e4a:	4601      	mov	r1, r0
 8018e4c:	4628      	mov	r0, r5
 8018e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e52:	f000 b817 	b.w	8018e84 <_kill_r>
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d00a      	beq.n	8018e70 <_raise_r+0x4c>
 8018e5a:	1c59      	adds	r1, r3, #1
 8018e5c:	d103      	bne.n	8018e66 <_raise_r+0x42>
 8018e5e:	2316      	movs	r3, #22
 8018e60:	6003      	str	r3, [r0, #0]
 8018e62:	2001      	movs	r0, #1
 8018e64:	e7e7      	b.n	8018e36 <_raise_r+0x12>
 8018e66:	2100      	movs	r1, #0
 8018e68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	4798      	blx	r3
 8018e70:	2000      	movs	r0, #0
 8018e72:	e7e0      	b.n	8018e36 <_raise_r+0x12>

08018e74 <raise>:
 8018e74:	4b02      	ldr	r3, [pc, #8]	@ (8018e80 <raise+0xc>)
 8018e76:	4601      	mov	r1, r0
 8018e78:	6818      	ldr	r0, [r3, #0]
 8018e7a:	f7ff bfd3 	b.w	8018e24 <_raise_r>
 8018e7e:	bf00      	nop
 8018e80:	200000c8 	.word	0x200000c8

08018e84 <_kill_r>:
 8018e84:	b538      	push	{r3, r4, r5, lr}
 8018e86:	4d07      	ldr	r5, [pc, #28]	@ (8018ea4 <_kill_r+0x20>)
 8018e88:	2300      	movs	r3, #0
 8018e8a:	4604      	mov	r4, r0
 8018e8c:	4608      	mov	r0, r1
 8018e8e:	4611      	mov	r1, r2
 8018e90:	602b      	str	r3, [r5, #0]
 8018e92:	f7e9 fc37 	bl	8002704 <_kill>
 8018e96:	1c43      	adds	r3, r0, #1
 8018e98:	d102      	bne.n	8018ea0 <_kill_r+0x1c>
 8018e9a:	682b      	ldr	r3, [r5, #0]
 8018e9c:	b103      	cbz	r3, 8018ea0 <_kill_r+0x1c>
 8018e9e:	6023      	str	r3, [r4, #0]
 8018ea0:	bd38      	pop	{r3, r4, r5, pc}
 8018ea2:	bf00      	nop
 8018ea4:	20010eac 	.word	0x20010eac

08018ea8 <_getpid_r>:
 8018ea8:	f7e9 bc24 	b.w	80026f4 <_getpid>

08018eac <_init>:
 8018eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eae:	bf00      	nop
 8018eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb2:	bc08      	pop	{r3}
 8018eb4:	469e      	mov	lr, r3
 8018eb6:	4770      	bx	lr

08018eb8 <_fini>:
 8018eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eba:	bf00      	nop
 8018ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ebe:	bc08      	pop	{r3}
 8018ec0:	469e      	mov	lr, r3
 8018ec2:	4770      	bx	lr
